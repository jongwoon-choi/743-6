
743-6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018014  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b728  080182b4  080182b4  000282b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080239dc  080239dc  000339dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080239e4  080239e4  000339e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080239e8  080239e8  000339e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000030c  24000000  080239ec  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008790  2400030c  08023cf8  0004030c  2**2
                  ALLOC
  8 ._user_heap_stack 00004004  24008a9c  08023cf8  00048a9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004030c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005e849  00000000  00000000  0004033a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009fde  00000000  00000000  0009eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc0  00000000  00000000  000a8b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002850  00000000  00000000  000ab728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045f18  00000000  00000000  000adf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c268  00000000  00000000  000f3e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001957c3  00000000  00000000  001300f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002c58bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c23c  00000000  00000000  002c5910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400030c 	.word	0x2400030c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801829c 	.word	0x0801829c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000310 	.word	0x24000310
 80002dc:	0801829c 	.word	0x0801829c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800069c:	4b30      	ldr	r3, [pc, #192]	; (8000760 <MX_ADC1_Init+0xe8>)
 800069e:	4a31      	ldr	r2, [pc, #196]	; (8000764 <MX_ADC1_Init+0xec>)
 80006a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006a2:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fa:	4819      	ldr	r0, [pc, #100]	; (8000760 <MX_ADC1_Init+0xe8>)
 80006fc:	f005 fc9c 	bl	8006038 <HAL_ADC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000706:	f001 ff47 	bl	8002598 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4812      	ldr	r0, [pc, #72]	; (8000760 <MX_ADC1_Init+0xe8>)
 8000716:	f006 faaf 	bl	8006c78 <HAL_ADCEx_MultiModeConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000720:	f001 ff3a 	bl	8002598 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_ADC1_Init+0xf0>)
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000728:	2306      	movs	r3, #6
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000730:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000734:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000736:	2304      	movs	r3, #4
 8000738:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_ADC1_Init+0xe8>)
 8000748:	f005 fe16 	bl	8006378 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000752:	f001 ff21 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	24006b30 	.word	0x24006b30
 8000764:	40022000 	.word	0x40022000
 8000768:	1d500080 	.word	0x1d500080

0800076c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
 8000780:	615a      	str	r2, [r3, #20]
 8000782:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_ADC2_Init+0xc0>)
 8000786:	4a2a      	ldr	r2, [pc, #168]	; (8000830 <MX_ADC2_Init+0xc4>)
 8000788:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_ADC2_Init+0xc0>)
 800078c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000790:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_ADC2_Init+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_ADC2_Init+0xc0>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_ADC2_Init+0xc0>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC2_Init+0xc0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_ADC2_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ADC2_Init+0xc0>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_ADC2_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_ADC2_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_ADC2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_ADC2_Init+0xc0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_ADC2_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_ADC2_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_ADC2_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <MX_ADC2_Init+0xc0>)
 80007e4:	f005 fc28 	bl	8006038 <HAL_ADC_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80007ee:	f001 fed3 	bl	8002598 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_ADC2_Init+0xc8>)
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f6:	2306      	movs	r3, #6
 80007f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000802:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000804:	2304      	movs	r3, #4
 8000806:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_ADC2_Init+0xc0>)
 8000816:	f005 fdaf 	bl	8006378 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000820:	f001 feba 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	24006ac8 	.word	0x24006ac8
 8000830:	40022100 	.word	0x40022100
 8000834:	0c900008 	.word	0x0c900008

08000838 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
 800084c:	615a      	str	r2, [r3, #20]
 800084e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000852:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <MX_ADC3_Init+0xc4>)
 8000854:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000858:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800085c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800086c:	2204      	movs	r2, #4
 800086e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000872:	2200      	movs	r2, #0
 8000874:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800087e:	2201      	movs	r2, #1
 8000880:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_ADC3_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_ADC3_Init+0xc0>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008b0:	f005 fbc2 	bl	8006038 <HAL_ADC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80008ba:	f001 fe6d 	bl	8002598 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_ADC3_Init+0xc8>)
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2306      	movs	r3, #6
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d0:	2304      	movs	r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_ADC3_Init+0xc0>)
 80008e2:	f005 fd49 	bl	8006378 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80008ec:	f001 fe54 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	24006b94 	.word	0x24006b94
 80008fc:	58026000 	.word	0x58026000
 8000900:	2e300800 	.word	0x2e300800

08000904 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b090      	sub	sp, #64	; 0x40
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a6f      	ldr	r2, [pc, #444]	; (8000ae0 <HAL_ADC_MspInit+0x1dc>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d133      	bne.n	800098e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000926:	4b6f      	ldr	r3, [pc, #444]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	4a6d      	ldr	r2, [pc, #436]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 800092e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000930:	4b6c      	ldr	r3, [pc, #432]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10e      	bne.n	8000956 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000938:	4b6b      	ldr	r3, [pc, #428]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 800093a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800093e:	4a6a      	ldr	r2, [pc, #424]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000948:	4b67      	ldr	r3, [pc, #412]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 800094a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
 8000954:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b64      	ldr	r3, [pc, #400]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	4a62      	ldr	r2, [pc, #392]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000978:	2303      	movs	r3, #3
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4619      	mov	r1, r3
 8000986:	4859      	ldr	r0, [pc, #356]	; (8000aec <HAL_ADC_MspInit+0x1e8>)
 8000988:	f007 f9e8 	bl	8007d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800098c:	e0a3      	b.n	8000ad6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC2)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a57      	ldr	r2, [pc, #348]	; (8000af0 <HAL_ADC_MspInit+0x1ec>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d169      	bne.n	8000a6c <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000998:	4b52      	ldr	r3, [pc, #328]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a51      	ldr	r2, [pc, #324]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 80009a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009a2:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <HAL_ADC_MspInit+0x1e0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d10e      	bne.n	80009c8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009aa:	4b4f      	ldr	r3, [pc, #316]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009b0:	4a4d      	ldr	r2, [pc, #308]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009ba:	4b4b      	ldr	r3, [pc, #300]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	623b      	str	r3, [r7, #32]
 80009c6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	4a46      	ldr	r2, [pc, #280]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d8:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f6:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	4a37      	ldr	r2, [pc, #220]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a22:	2340      	movs	r3, #64	; 0x40
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a26:	2303      	movs	r3, #3
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a32:	4619      	mov	r1, r3
 8000a34:	482d      	ldr	r0, [pc, #180]	; (8000aec <HAL_ADC_MspInit+0x1e8>)
 8000a36:	f007 f991 	bl	8007d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4829      	ldr	r0, [pc, #164]	; (8000af4 <HAL_ADC_MspInit+0x1f0>)
 8000a4e:	f007 f985 	bl	8007d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a52:	2302      	movs	r3, #2
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a56:	2303      	movs	r3, #3
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a62:	4619      	mov	r1, r3
 8000a64:	4824      	ldr	r0, [pc, #144]	; (8000af8 <HAL_ADC_MspInit+0x1f4>)
 8000a66:	f007 f979 	bl	8007d5c <HAL_GPIO_Init>
}
 8000a6a:	e034      	b.n	8000ad6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a22      	ldr	r2, [pc, #136]	; (8000afc <HAL_ADC_MspInit+0x1f8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12f      	bne.n	8000ad6 <HAL_ADC_MspInit+0x1d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_ADC_MspInit+0x1e4>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <HAL_ADC_MspInit+0x1f0>)
 8000ac6:	f007 f949 	bl	8007d5c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000aca:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000ace:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ad2:	f005 f90f 	bl	8005cf4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000ad6:	bf00      	nop
 8000ad8:	3740      	adds	r7, #64	; 0x40
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000
 8000ae4:	24000328 	.word	0x24000328
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58020000 	.word	0x58020000
 8000af0:	40022100 	.word	0x40022100
 8000af4:	58020800 	.word	0x58020800
 8000af8:	58020400 	.word	0x58020400
 8000afc:	58026000 	.word	0x58026000

08000b00 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2224      	movs	r2, #36	; 0x24
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f016 f9c2 	bl	8016e96 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <MX_DAC1_Init+0x74>)
 8000b16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b18:	4815      	ldr	r0, [pc, #84]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b1a:	f006 fa6b 	bl	8006ff4 <HAL_DAC_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b24:	f001 fd38 	bl	8002598 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000b34:	2302      	movs	r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b44:	f006 fa78 	bl	8007038 <HAL_DAC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f001 fd23 	bl	8002598 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2210      	movs	r2, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_DAC1_Init+0x70>)
 8000b5a:	f006 fa6d 	bl	8007038 <HAL_DAC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000b64:	f001 fd18 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	24006c40 	.word	0x24006c40
 8000b74:	40007400 	.word	0x40007400

08000b78 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <HAL_DAC_MspInit+0x80>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d129      	bne.n	8000bee <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ba0:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ba6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_DAC_MspInit+0x84>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bd6:	2330      	movs	r3, #48	; 0x30
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_DAC_MspInit+0x88>)
 8000bea:	f007 f8b7 	bl	8007d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40007400 	.word	0x40007400
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	58020000 	.word	0x58020000

08000c04 <RTC_CalendarShow>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

static void RTC_CalendarShow(RTC_DateTypeDef *sdatestructureget,RTC_TimeTypeDef *stimestructureget)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
   /* Both time and date must be obtained or RTC cannot be read next time */
  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, stimestructureget, RTC_FORMAT_BIN);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	6839      	ldr	r1, [r7, #0]
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <RTC_CalendarShow+0x28>)
 8000c14:	f00c fbb6 	bl	800d384 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, sdatestructureget, RTC_FORMAT_BIN);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <RTC_CalendarShow+0x28>)
 8000c1e:	f00c fc95 	bl	800d54c <HAL_RTC_GetDate>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	24006de0 	.word	0x24006de0

08000c30 <clear_pw_circle>:


void clear_pw_circle(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	// Clear passwd counter
		GUI_key0[7] = 0;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <clear_pw_circle+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_key0, sizeof(GUI_key0), 100);
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2208      	movs	r2, #8
 8000c3e:	4910      	ldr	r1, [pc, #64]	; (8000c80 <clear_pw_circle+0x50>)
 8000c40:	4810      	ldr	r0, [pc, #64]	; (8000c84 <clear_pw_circle+0x54>)
 8000c42:	f00e ff94 	bl	800fb6e <HAL_UART_Transmit>
	GUI_key1[7] = 0;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <clear_pw_circle+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_key1, sizeof(GUI_key1), 100);
 8000c4c:	2364      	movs	r3, #100	; 0x64
 8000c4e:	2208      	movs	r2, #8
 8000c50:	490d      	ldr	r1, [pc, #52]	; (8000c88 <clear_pw_circle+0x58>)
 8000c52:	480c      	ldr	r0, [pc, #48]	; (8000c84 <clear_pw_circle+0x54>)
 8000c54:	f00e ff8b 	bl	800fb6e <HAL_UART_Transmit>
	GUI_key2[7] = 0;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <clear_pw_circle+0x5c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_key2, sizeof(GUI_key2), 100);
 8000c5e:	2364      	movs	r3, #100	; 0x64
 8000c60:	2208      	movs	r2, #8
 8000c62:	490a      	ldr	r1, [pc, #40]	; (8000c8c <clear_pw_circle+0x5c>)
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <clear_pw_circle+0x54>)
 8000c66:	f00e ff82 	bl	800fb6e <HAL_UART_Transmit>
	GUI_key3[7] = 0;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <clear_pw_circle+0x60>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_key3, sizeof(GUI_key3), 100);
 8000c70:	2364      	movs	r3, #100	; 0x64
 8000c72:	2208      	movs	r2, #8
 8000c74:	4906      	ldr	r1, [pc, #24]	; (8000c90 <clear_pw_circle+0x60>)
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <clear_pw_circle+0x54>)
 8000c78:	f00e ff79 	bl	800fb6e <HAL_UART_Transmit>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	24000000 	.word	0x24000000
 8000c84:	2400703c 	.word	0x2400703c
 8000c88:	24000008 	.word	0x24000008
 8000c8c:	24000010 	.word	0x24000010
 8000c90:	24000018 	.word	0x24000018

08000c94 <passwd_verify>:

char  passwd[4], passwd_1[4]={1,2,3,4};
uint8_t passwd_count  ;
void passwd_verify(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	int8_t passwd_OK;

			switch(passwd_count){
 8000c9a:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <passwd_verify+0x144>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d832      	bhi.n	8000d08 <passwd_verify+0x74>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <passwd_verify+0x14>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000cb9 	.word	0x08000cb9
 8000cac:	08000ccd 	.word	0x08000ccd
 8000cb0:	08000ce1 	.word	0x08000ce1
 8000cb4:	08000cf5 	.word	0x08000cf5
			case(0):
				GUI_key0[7] = 1;
 8000cb8:	4b48      	ldr	r3, [pc, #288]	; (8000ddc <passwd_verify+0x148>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	71da      	strb	r2, [r3, #7]
				HAL_UART_Transmit(&huart1, GUI_key0, sizeof(GUI_key0), 100);
 8000cbe:	2364      	movs	r3, #100	; 0x64
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	4946      	ldr	r1, [pc, #280]	; (8000ddc <passwd_verify+0x148>)
 8000cc4:	4846      	ldr	r0, [pc, #280]	; (8000de0 <passwd_verify+0x14c>)
 8000cc6:	f00e ff52 	bl	800fb6e <HAL_UART_Transmit>
				break;
 8000cca:	e01d      	b.n	8000d08 <passwd_verify+0x74>
			case(1):
				GUI_key1[7] = 1;
 8000ccc:	4b45      	ldr	r3, [pc, #276]	; (8000de4 <passwd_verify+0x150>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	71da      	strb	r2, [r3, #7]
				HAL_UART_Transmit(&huart1, GUI_key1, sizeof(GUI_key1), 100);
 8000cd2:	2364      	movs	r3, #100	; 0x64
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	4943      	ldr	r1, [pc, #268]	; (8000de4 <passwd_verify+0x150>)
 8000cd8:	4841      	ldr	r0, [pc, #260]	; (8000de0 <passwd_verify+0x14c>)
 8000cda:	f00e ff48 	bl	800fb6e <HAL_UART_Transmit>
				break;
 8000cde:	e013      	b.n	8000d08 <passwd_verify+0x74>
			case(2):
				GUI_key2[7] = 1;
 8000ce0:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <passwd_verify+0x154>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	71da      	strb	r2, [r3, #7]
				HAL_UART_Transmit(&huart1, GUI_key2, sizeof(GUI_key2), 100);
 8000ce6:	2364      	movs	r3, #100	; 0x64
 8000ce8:	2208      	movs	r2, #8
 8000cea:	493f      	ldr	r1, [pc, #252]	; (8000de8 <passwd_verify+0x154>)
 8000cec:	483c      	ldr	r0, [pc, #240]	; (8000de0 <passwd_verify+0x14c>)
 8000cee:	f00e ff3e 	bl	800fb6e <HAL_UART_Transmit>
				break;
 8000cf2:	e009      	b.n	8000d08 <passwd_verify+0x74>
			case(3):
				GUI_key3[7] = 1;
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <passwd_verify+0x158>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	71da      	strb	r2, [r3, #7]
				HAL_UART_Transmit(&huart1, GUI_key3, sizeof(GUI_key3), 100);
 8000cfa:	2364      	movs	r3, #100	; 0x64
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	493b      	ldr	r1, [pc, #236]	; (8000dec <passwd_verify+0x158>)
 8000d00:	4837      	ldr	r0, [pc, #220]	; (8000de0 <passwd_verify+0x14c>)
 8000d02:	f00e ff34 	bl	800fb6e <HAL_UART_Transmit>
				break;
 8000d06:	bf00      	nop
			default:
				;
			}

			passwd_count++;
 8000d08:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <passwd_verify+0x144>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <passwd_verify+0x144>)
 8000d12:	701a      	strb	r2, [r3, #0]

			if(passwd_count == 4){
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <passwd_verify+0x144>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d11f      	bne.n	8000d5c <passwd_verify+0xc8>
				//passwd_count = 0;

				// Check pw is right or not
				for(int i=0;i<4;i++){
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	e019      	b.n	8000d56 <passwd_verify+0xc2>
					if(passwd[i] == passwd_1[i]){
 8000d22:	4a33      	ldr	r2, [pc, #204]	; (8000df0 <passwd_verify+0x15c>)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	4932      	ldr	r1, [pc, #200]	; (8000df4 <passwd_verify+0x160>)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	440b      	add	r3, r1
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d106      	bne.n	8000d44 <passwd_verify+0xb0>
						passwd_OK++;
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	e005      	b.n	8000d50 <passwd_verify+0xbc>
					}
					else
						passwd_OK--;
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	71fb      	strb	r3, [r7, #7]
				for(int i=0;i<4;i++){
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	dde2      	ble.n	8000d22 <passwd_verify+0x8e>
				}
			}

			if(passwd_OK == 4){
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d117      	bne.n	8000d94 <passwd_verify+0x100>
				DF_Play(S_ready);  //Ready it is OK();
 8000d64:	2019      	movs	r0, #25
 8000d66:	f001 fde4 	bl	8002932 <DF_Play>
				osDelay(100);
 8000d6a:	2064      	movs	r0, #100	; 0x64
 8000d6c:	f013 ff0e 	bl	8014b8c <osDelay>
				passwd_count = 0;
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <passwd_verify+0x144>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
				clear_pw_circle();
 8000d76:	f7ff ff5b 	bl	8000c30 <clear_pw_circle>
				HAL_UART_Transmit(&huart1, GUI_main, sizeof(GUI_main), 100);//Call main page
 8000d7a:	2364      	movs	r3, #100	; 0x64
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	491e      	ldr	r1, [pc, #120]	; (8000df8 <passwd_verify+0x164>)
 8000d80:	4817      	ldr	r0, [pc, #92]	; (8000de0 <passwd_verify+0x14c>)
 8000d82:	f00e fef4 	bl	800fb6e <HAL_UART_Transmit>

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8c:	481b      	ldr	r0, [pc, #108]	; (8000dfc <passwd_verify+0x168>)
 8000d8e:	f007 f9ad 	bl	80080ec <HAL_GPIO_WritePin>
 8000d92:	e008      	b.n	8000da6 <passwd_verify+0x112>
		 	}
 	 		else{
		  	 	DF_Play(S_Beek);  //Ready it is no();
 8000d94:	2013      	movs	r0, #19
 8000d96:	f001 fdcc 	bl	8002932 <DF_Play>
		  	 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da0:	4816      	ldr	r0, [pc, #88]	; (8000dfc <passwd_verify+0x168>)
 8000da2:	f007 f9a3 	bl	80080ec <HAL_GPIO_WritePin>
		 	}

			if((passwd_count == 4)&&(passwd_OK != 4)){
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <passwd_verify+0x144>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d10e      	bne.n	8000dcc <passwd_verify+0x138>
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d00a      	beq.n	8000dcc <passwd_verify+0x138>
				 DF_Play(S_boook);  //Ready it is OK();
 8000db6:	2004      	movs	r0, #4
 8000db8:	f001 fdbb 	bl	8002932 <DF_Play>
				osDelay(100);
 8000dbc:	2064      	movs	r0, #100	; 0x64
 8000dbe:	f013 fee5 	bl	8014b8c <osDelay>
				passwd_count = 0;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <passwd_verify+0x144>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
				clear_pw_circle();
 8000dc8:	f7ff ff32 	bl	8000c30 <clear_pw_circle>
			}


			passwd_OK = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	71fb      	strb	r3, [r7, #7]
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24006c74 	.word	0x24006c74
 8000ddc:	24000000 	.word	0x24000000
 8000de0:	2400703c 	.word	0x2400703c
 8000de4:	24000008 	.word	0x24000008
 8000de8:	24000010 	.word	0x24000010
 8000dec:	24000018 	.word	0x24000018
 8000df0:	24006cf0 	.word	0x24006cf0
 8000df4:	24000088 	.word	0x24000088
 8000df8:	24000020 	.word	0x24000020
 8000dfc:	58020400 	.word	0x58020400

08000e00 <GUI_1400>:

void GUI_1400(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	if (!Ready)
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <GUI_1400+0x68>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	f083 0301 	eor.w	r3, r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d01a      	beq.n	8000e48 <GUI_1400+0x48>
	{ //STOP
		HAL_UART_Transmit(&huart1, GUI_stop, sizeof(GUI_stop), 100);
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	2208      	movs	r2, #8
 8000e16:	4915      	ldr	r1, [pc, #84]	; (8000e6c <GUI_1400+0x6c>)
 8000e18:	4815      	ldr	r0, [pc, #84]	; (8000e70 <GUI_1400+0x70>)
 8000e1a:	f00e fea8 	bl	800fb6e <HAL_UART_Transmit>
		Ready = 1;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <GUI_1400+0x68>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
		DF_Play(S_ready);  //Ready
 8000e24:	2019      	movs	r0, #25
 8000e26:	f001 fd84 	bl	8002932 <DF_Play>
		osDelay(10);
 8000e2a:	200a      	movs	r0, #10
 8000e2c:	f013 feae 	bl	8014b8c <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Interloc
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e36:	480f      	ldr	r0, [pc, #60]	; (8000e74 <GUI_1400+0x74>)
 8000e38:	f007 f958 	bl	80080ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // AKELA pointer
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2101      	movs	r1, #1
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <GUI_1400+0x78>)
 8000e42:	f007 f953 	bl	80080ec <HAL_GPIO_WritePin>
		Ready = 0;
		DF_Play(S_stop);  //Stop
		osDelay(10);
//				// GUI_ready2stop();
	}
}
 8000e46:	e00c      	b.n	8000e62 <GUI_1400+0x62>
	else if (Ready)
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <GUI_1400+0x68>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d008      	beq.n	8000e62 <GUI_1400+0x62>
		Ready = 0;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <GUI_1400+0x68>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
		DF_Play(S_stop);  //Stop
 8000e56:	2005      	movs	r0, #5
 8000e58:	f001 fd6b 	bl	8002932 <DF_Play>
		osDelay(10);
 8000e5c:	200a      	movs	r0, #10
 8000e5e:	f013 fe95 	bl	8014b8c <osDelay>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	24006d76 	.word	0x24006d76
 8000e6c:	24000044 	.word	0x24000044
 8000e70:	2400703c 	.word	0x2400703c
 8000e74:	58020400 	.word	0x58020400
 8000e78:	58020800 	.word	0x58020800

08000e7c <GUI_1296>:

void GUI_1296(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	DF_Play(S_Beek);
 8000e80:	2013      	movs	r0, #19
 8000e82:	f001 fd56 	bl	8002932 <DF_Play>
	Monitor = 0;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <GUI_1296+0x70>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]

	Stamp = 1;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <GUI_1296+0x74>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
	DF_Play(S_stamp);  //Stamp
 8000e92:	2018      	movs	r0, #24
 8000e94:	f001 fd4d 	bl	8002932 <DF_Play>
	//  EEPROM_Read(Last_mode);  //save current mode
	// show_parameter_stamp();
	//  show_ST_key_value();
	// // GUI_ready2stop(); // clear "ready" state

	GUI_mon_Laser_ON[7] = 1; //Laser OFF
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <GUI_1296+0x78>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8000e9e:	2364      	movs	r3, #100	; 0x64
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	4914      	ldr	r1, [pc, #80]	; (8000ef4 <GUI_1296+0x78>)
 8000ea4:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <GUI_1296+0x7c>)
 8000ea6:	f00e fe62 	bl	800fb6e <HAL_UART_Transmit>

	// Stop "Laser ON" over Monitor mode
//	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
//	HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Interlock stop
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb0:	4812      	ldr	r0, [pc, #72]	; (8000efc <GUI_1296+0x80>)
 8000eb2:	f007 f91b 	bl	80080ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Enable Stop
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	4811      	ldr	r0, [pc, #68]	; (8000f00 <GUI_1296+0x84>)
 8000ebc:	f007 f916 	bl	80080ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Fire lamp Off
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <GUI_1296+0x80>)
 8000ec6:	f007 f911 	bl	80080ec <HAL_GPIO_WritePin>

	GUI_sum_mode[7] = 1;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <GUI_1296+0x88>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	490b      	ldr	r1, [pc, #44]	; (8000f04 <GUI_1296+0x88>)
 8000ed6:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <GUI_1296+0x7c>)
 8000ed8:	f00e fe49 	bl	800fb6e <HAL_UART_Transmit>

	vTaskSuspend(myTask05Handle);	 // STOP DefaultTask
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <GUI_1296+0x8c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f014 f8f9 	bl	80150d8 <vTaskSuspend>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	24006cc4 	.word	0x24006cc4
 8000ef0:	24006c6a 	.word	0x24006c6a
 8000ef4:	24000080 	.word	0x24000080
 8000ef8:	2400703c 	.word	0x2400703c
 8000efc:	58020400 	.word	0x58020400
 8000f00:	58020000 	.word	0x58020000
 8000f04:	24000064 	.word	0x24000064
 8000f08:	24006c6c 	.word	0x24006c6c

08000f0c <GUI_1298>:

void GUI_1298(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	DF_Play(S_Beek);
 8000f10:	2013      	movs	r0, #19
 8000f12:	f001 fd0e 	bl	8002932 <DF_Play>
	Monitor = true;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <GUI_1298+0x68>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
	// // GUI_ready2stop(); // clear "ready" state

	GUI_mon_Laser_ON[7] = 1;  //Laser OFF
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <GUI_1298+0x6c>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8000f22:	2364      	movs	r3, #100	; 0x64
 8000f24:	2208      	movs	r2, #8
 8000f26:	4914      	ldr	r1, [pc, #80]	; (8000f78 <GUI_1298+0x6c>)
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <GUI_1298+0x70>)
 8000f2a:	f00e fe20 	bl	800fb6e <HAL_UART_Transmit>

	GUI_mon_power[6] = 0;     //Start monitor page with Power = 0
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <GUI_1298+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	719a      	strb	r2, [r3, #6]
	GUI_mon_power[7] = 0;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <GUI_1298+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_mon_power, sizeof(GUI_mon_power),100);//show power0~6
 8000f3a:	2364      	movs	r3, #100	; 0x64
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	4910      	ldr	r1, [pc, #64]	; (8000f80 <GUI_1298+0x74>)
 8000f40:	480e      	ldr	r0, [pc, #56]	; (8000f7c <GUI_1298+0x70>)
 8000f42:	f00e fe14 	bl	800fb6e <HAL_UART_Transmit>

	// Stop "Laser ON" over Monitor mode
//		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
//		HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Interlock stop
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <GUI_1298+0x78>)
 8000f4e:	f007 f8cd 	bl	80080ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Enable Stop
 8000f52:	2200      	movs	r2, #0
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <GUI_1298+0x7c>)
 8000f58:	f007 f8c8 	bl	80080ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Fire lamp Off
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <GUI_1298+0x78>)
 8000f62:	f007 f8c3 	bl	80080ec <HAL_GPIO_WritePin>

	vTaskResume(myTask05Handle);   // Strat Monitoring Task(5)
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <GUI_1298+0x80>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f014 f978 	bl	8015260 <vTaskResume>
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	24006cc4 	.word	0x24006cc4
 8000f78:	24000080 	.word	0x24000080
 8000f7c:	2400703c 	.word	0x2400703c
 8000f80:	24000078 	.word	0x24000078
 8000f84:	58020400 	.word	0x58020400
 8000f88:	58020000 	.word	0x58020000
 8000f8c:	24006c6c 	.word	0x24006c6c

08000f90 <GUI_1340>:

void GUI_1340(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	if (!Laser_ON)
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <GUI_1340+0x98>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f083 0301 	eor.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d01d      	beq.n	8000fde <GUI_1340+0x4e>
	{
		GUI_mon_Laser_ON[7] = 0;
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <GUI_1340+0x9c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8000fa8:	2364      	movs	r3, #100	; 0x64
 8000faa:	2208      	movs	r2, #8
 8000fac:	491f      	ldr	r1, [pc, #124]	; (800102c <GUI_1340+0x9c>)
 8000fae:	4820      	ldr	r0, [pc, #128]	; (8001030 <GUI_1340+0xa0>)
 8000fb0:	f00e fddd 	bl	800fb6e <HAL_UART_Transmit>
		Laser_ON = 1;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <GUI_1340+0x98>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
		DF_Play(S_ready);  //Ready
 8000fba:	2019      	movs	r0, #25
 8000fbc:	f001 fcb9 	bl	8002932 <DF_Play>
		osDelay(10);
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f013 fde3 	bl	8014b8c <osDelay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Interloc
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fcc:	4819      	ldr	r0, [pc, #100]	; (8001034 <GUI_1340+0xa4>)
 8000fce:	f007 f88d 	bl	80080ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // AKELA pointer
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <GUI_1340+0xa8>)
 8000fd8:	f007 f888 	bl	80080ec <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Interlock on
		HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0); // Enable stop
		HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0); // AKELA pointer Off
	}
}
 8000fdc:	e021      	b.n	8001022 <GUI_1340+0x92>
		GUI_mon_Laser_ON[7] = 1;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <GUI_1340+0x9c>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	4910      	ldr	r1, [pc, #64]	; (800102c <GUI_1340+0x9c>)
 8000fea:	4811      	ldr	r0, [pc, #68]	; (8001030 <GUI_1340+0xa0>)
 8000fec:	f00e fdbf 	bl	800fb6e <HAL_UART_Transmit>
		Laser_ON = 0;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <GUI_1340+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
		DF_Play(S_stop);  //Stop
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f001 fc9b 	bl	8002932 <DF_Play>
		osDelay(10);
 8000ffc:	200a      	movs	r0, #10
 8000ffe:	f013 fdc5 	bl	8014b8c <osDelay>
		HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Interlock on
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001008:	480a      	ldr	r0, [pc, #40]	; (8001034 <GUI_1340+0xa4>)
 800100a:	f007 f86f 	bl	80080ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0); // Enable stop
 800100e:	2200      	movs	r2, #0
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <GUI_1340+0xac>)
 8001014:	f007 f86a 	bl	80080ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0); // AKELA pointer Off
 8001018:	2200      	movs	r2, #0
 800101a:	2101      	movs	r1, #1
 800101c:	4806      	ldr	r0, [pc, #24]	; (8001038 <GUI_1340+0xa8>)
 800101e:	f007 f865 	bl	80080ec <HAL_GPIO_WritePin>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24006c63 	.word	0x24006c63
 800102c:	24000080 	.word	0x24000080
 8001030:	2400703c 	.word	0x2400703c
 8001034:	58020400 	.word	0x58020400
 8001038:	58020800 	.word	0x58020800
 800103c:	58020000 	.word	0x58020000

08001040 <GUI_1345>:

void GUI_1345(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	DF_Play(S_Beek);
 8001044:	2013      	movs	r0, #19
 8001046:	f001 fc74 	bl	8002932 <DF_Play>
	// 5*330 = 1650:최고 DAC �???????, ?��?�� HP?��?��?�� CW�??????? 5 W 출력?��, 330?? Cut&Try�??????? ?��?? �???????
	Power_DAC = ((Rx1_Buffer[7] << 8) + Rx1_Buffer[8])*330;  //0~2100
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <GUI_1345+0x3c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	021a      	lsls	r2, r3, #8
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <GUI_1345+0x3c>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4413      	add	r3, r2
 8001056:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	461a      	mov	r2, r3
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <GUI_1345+0x40>)
 8001062:	601a      	str	r2, [r3, #0]
	GUI_mon_power[6] = Rx1_Buffer[7];  //Last_mpower_high
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <GUI_1345+0x3c>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <GUI_1345+0x44>)
 800106c:	719a      	strb	r2, [r3, #6]
	GUI_mon_power[7] = Rx1_Buffer[8];  //Last_mpower_low (real)
 800106e:	4b03      	ldr	r3, [pc, #12]	; (800107c <GUI_1345+0x3c>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <GUI_1345+0x44>)
 8001076:	71da      	strb	r2, [r3, #7]
//	HAL_UART_Transmit(&huart1, GUI_mon_power, sizeof(GUI_mon_power),100);//show power0~5

	//  EEPROM_Write(Last_mon_power_high, GUI_mon_power[6]);
	//  EEPROM_Write(Last_mon_power_low, GUI_mon_power[7]);

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	24006cf4 	.word	0x24006cf4
 8001080:	24006ca0 	.word	0x24006ca0
 8001084:	24000078 	.word	0x24000078

08001088 <GUI_1602>:

void GUI_1602(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	if (Sound)
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <GUI_1602+0x5c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d012      	beq.n	80010ba <GUI_1602+0x32>
	{
		GUI_sound[7] = 0;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <GUI_1602+0x60>)
 8001096:	2200      	movs	r2, #0
 8001098:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
 800109a:	2364      	movs	r3, #100	; 0x64
 800109c:	2208      	movs	r2, #8
 800109e:	4912      	ldr	r1, [pc, #72]	; (80010e8 <GUI_1602+0x60>)
 80010a0:	4812      	ldr	r0, [pc, #72]	; (80010ec <GUI_1602+0x64>)
 80010a2:	f00e fd64 	bl	800fb6e <HAL_UART_Transmit>
		Sound = 0;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <GUI_1602+0x5c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
		DF_Play(S_sound);  //sound
 80010ac:	2007      	movs	r0, #7
 80010ae:	f001 fc40 	bl	8002932 <DF_Play>
		//  EEPROM_Write( Last_sound, Sound);
		DF_Volume(15);
 80010b2:	200f      	movs	r0, #15
 80010b4:	f001 fc50 	bl	8002958 <DF_Volume>
		//  EEPROM_Write( Last_sound, Sound);

		DF_Volume(0);
	}
//  EEPROM_Write( Last_sound, Sound);  //save current mode
}
 80010b8:	e011      	b.n	80010de <GUI_1602+0x56>
		GUI_sound[7] = 1;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <GUI_1602+0x60>)
 80010bc:	2201      	movs	r2, #1
 80010be:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
 80010c0:	2364      	movs	r3, #100	; 0x64
 80010c2:	2208      	movs	r2, #8
 80010c4:	4908      	ldr	r1, [pc, #32]	; (80010e8 <GUI_1602+0x60>)
 80010c6:	4809      	ldr	r0, [pc, #36]	; (80010ec <GUI_1602+0x64>)
 80010c8:	f00e fd51 	bl	800fb6e <HAL_UART_Transmit>
		Sound = true;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <GUI_1602+0x5c>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
		DF_Play(S_mute);  //mute
 80010d2:	200b      	movs	r0, #11
 80010d4:	f001 fc2d 	bl	8002932 <DF_Play>
		DF_Volume(0);
 80010d8:	2000      	movs	r0, #0
 80010da:	f001 fc3d 	bl	8002958 <DF_Volume>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	24006c62 	.word	0x24006c62
 80010e8:	2400004c 	.word	0x2400004c
 80010ec:	2400703c 	.word	0x2400703c

080010f0 <GUI_1603>:

void GUI_1603(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	if (Hand_foot)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <GUI_1603+0x50>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00f      	beq.n	800111c <GUI_1603+0x2c>
	{
		GUI_foot[7] = 0;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <GUI_1603+0x54>)
 80010fe:	2200      	movs	r2, #0
 8001100:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
 8001102:	2364      	movs	r3, #100	; 0x64
 8001104:	2208      	movs	r2, #8
 8001106:	490f      	ldr	r1, [pc, #60]	; (8001144 <GUI_1603+0x54>)
 8001108:	480f      	ldr	r0, [pc, #60]	; (8001148 <GUI_1603+0x58>)
 800110a:	f00e fd30 	bl	800fb6e <HAL_UART_Transmit>
		Hand_foot = 0;
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <GUI_1603+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
		DF_Play(S_hand);  //hand
 8001114:	2008      	movs	r0, #8
 8001116:	f001 fc0c 	bl	8002932 <DF_Play>
		Hand_foot = true;
		DF_Play(S_foot); //foot

		//  EEPROM_Write( Last_Hand_foot, Hand_foot);
	}
}
 800111a:	e00e      	b.n	800113a <GUI_1603+0x4a>
		GUI_foot[7] = 1;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <GUI_1603+0x54>)
 800111e:	2201      	movs	r2, #1
 8001120:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
 8001122:	2364      	movs	r3, #100	; 0x64
 8001124:	2208      	movs	r2, #8
 8001126:	4907      	ldr	r1, [pc, #28]	; (8001144 <GUI_1603+0x54>)
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <GUI_1603+0x58>)
 800112a:	f00e fd20 	bl	800fb6e <HAL_UART_Transmit>
		Hand_foot = true;
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <GUI_1603+0x50>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
		DF_Play(S_foot); //foot
 8001134:	2001      	movs	r0, #1
 8001136:	f001 fbfc 	bl	8002932 <DF_Play>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	24006c80 	.word	0x24006c80
 8001144:	2400005c 	.word	0x2400005c
 8001148:	2400703c 	.word	0x2400703c

0800114c <GUI_1606>:

void GUI_1606(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	if (Count_energy)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <GUI_1606+0x50>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00f      	beq.n	8001178 <GUI_1606+0x2c>
	{
    	Count_energy = 0;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <GUI_1606+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
		DF_Play(S_total_energy);
 800115e:	200d      	movs	r0, #13
 8001160:	f001 fbe7 	bl	8002932 <DF_Play>
		GUI_sum_mode[7] = 0;
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <GUI_1606+0x54>)
 8001166:	2200      	movs	r2, #0
 8001168:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 800116a:	2364      	movs	r3, #100	; 0x64
 800116c:	2208      	movs	r2, #8
 800116e:	490c      	ldr	r1, [pc, #48]	; (80011a0 <GUI_1606+0x54>)
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <GUI_1606+0x58>)
 8001172:	f00e fcfc 	bl	800fb6e <HAL_UART_Transmit>
		DF_Play(S_total_count);
		GUI_sum_mode[7] = 1;
		HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
		//  EEPROM_Write( Last_Count_energy, Count_energy);
	}
}
 8001176:	e00e      	b.n	8001196 <GUI_1606+0x4a>
		Count_energy = 1;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <GUI_1606+0x50>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
		DF_Play(S_total_count);
 800117e:	200e      	movs	r0, #14
 8001180:	f001 fbd7 	bl	8002932 <DF_Play>
		GUI_sum_mode[7] = 1;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <GUI_1606+0x54>)
 8001186:	2201      	movs	r2, #1
 8001188:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	2208      	movs	r2, #8
 800118e:	4904      	ldr	r1, [pc, #16]	; (80011a0 <GUI_1606+0x54>)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <GUI_1606+0x58>)
 8001192:	f00e fcec 	bl	800fb6e <HAL_UART_Transmit>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	24006c60 	.word	0x24006c60
 80011a0:	24000064 	.word	0x24000064
 80011a4:	2400703c 	.word	0x2400703c

080011a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80011b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <vApplicationGetIdleTaskMemory+0x30>)
 80011be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	2400032c 	.word	0x2400032c
 80011d8:	240003e0 	.word	0x240003e0

080011dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b0b8      	sub	sp, #224	; 0xe0
 80011e0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011e2:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <MX_FREERTOS_Init+0x13c>)
 80011e4:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80011e8:	461d      	mov	r5, r3
 80011ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f013 fc79 	bl	8014af4 <osThreadCreate>
 8001202:	4603      	mov	r3, r0
 8001204:	4a45      	ldr	r2, [pc, #276]	; (800131c <MX_FREERTOS_Init+0x140>)
 8001206:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 256);
 8001208:	4b45      	ldr	r3, [pc, #276]	; (8001320 <MX_FREERTOS_Init+0x144>)
 800120a:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800120e:	461d      	mov	r5, r3
 8001210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800121c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f013 fc66 	bl	8014af4 <osThreadCreate>
 8001228:	4603      	mov	r3, r0
 800122a:	4a3e      	ldr	r2, [pc, #248]	; (8001324 <MX_FREERTOS_Init+0x148>)
 800122c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 800122e:	4b3e      	ldr	r3, [pc, #248]	; (8001328 <MX_FREERTOS_Init+0x14c>)
 8001230:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001234:	461d      	mov	r5, r3
 8001236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800123e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001242:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f013 fc53 	bl	8014af4 <osThreadCreate>
 800124e:	4603      	mov	r3, r0
 8001250:	4a36      	ldr	r2, [pc, #216]	; (800132c <MX_FREERTOS_Init+0x150>)
 8001252:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 8001254:	4b36      	ldr	r3, [pc, #216]	; (8001330 <MX_FREERTOS_Init+0x154>)
 8001256:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800125a:	461d      	mov	r5, r3
 800125c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001268:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f013 fc40 	bl	8014af4 <osThreadCreate>
 8001274:	4603      	mov	r3, r0
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <MX_FREERTOS_Init+0x158>)
 8001278:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 128);
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <MX_FREERTOS_Init+0x15c>)
 800127c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001280:	461d      	mov	r5, r3
 8001282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800128a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 800128e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f013 fc2d 	bl	8014af4 <osThreadCreate>
 800129a:	4603      	mov	r3, r0
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <MX_FREERTOS_Init+0x160>)
 800129e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, StartTask06, osPriorityNormal, 0, 128);
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <MX_FREERTOS_Init+0x164>)
 80012a2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80012a6:	461d      	mov	r5, r3
 80012a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 80012b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f013 fc1a 	bl	8014af4 <osThreadCreate>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a20      	ldr	r2, [pc, #128]	; (8001344 <MX_FREERTOS_Init+0x168>)
 80012c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, StartTask07, osPriorityNormal, 0, 128);
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <MX_FREERTOS_Init+0x16c>)
 80012c8:	f107 041c 	add.w	r4, r7, #28
 80012cc:	461d      	mov	r5, r3
 80012ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f013 fc07 	bl	8014af4 <osThreadCreate>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a18      	ldr	r2, [pc, #96]	; (800134c <MX_FREERTOS_Init+0x170>)
 80012ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask08 */
  osThreadDef(myTask08, StartTask08, osPriorityNormal, 0, 128);
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_FREERTOS_Init+0x174>)
 80012ee:	463c      	mov	r4, r7
 80012f0:	461d      	mov	r5, r3
 80012f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask08Handle = osThreadCreate(osThread(myTask08), NULL);
 80012fe:	463b      	mov	r3, r7
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f013 fbf6 	bl	8014af4 <osThreadCreate>
 8001308:	4603      	mov	r3, r0
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_FREERTOS_Init+0x178>)
 800130c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800130e:	bf00      	nop
 8001310:	37e0      	adds	r7, #224	; 0xe0
 8001312:	46bd      	mov	sp, r7
 8001314:	bdb0      	pop	{r4, r5, r7, pc}
 8001316:	bf00      	nop
 8001318:	08018314 	.word	0x08018314
 800131c:	24006c5c 	.word	0x24006c5c
 8001320:	08018330 	.word	0x08018330
 8001324:	24006cc8 	.word	0x24006cc8
 8001328:	0801834c 	.word	0x0801834c
 800132c:	24006ce4 	.word	0x24006ce4
 8001330:	08018368 	.word	0x08018368
 8001334:	24006c70 	.word	0x24006c70
 8001338:	08018384 	.word	0x08018384
 800133c:	24006c6c 	.word	0x24006c6c
 8001340:	080183a0 	.word	0x080183a0
 8001344:	24006d7c 	.word	0x24006d7c
 8001348:	080183bc 	.word	0x080183bc
 800134c:	24006ce8 	.word	0x24006ce8
 8001350:	080183d8 	.word	0x080183d8
 8001354:	24006c78 	.word	0x24006c78

08001358 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001360:	f014 ff44 	bl	80161ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
		 HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_12);
 8001364:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <StartDefaultTask+0x28>)
 800136a:	f006 fed8 	bl	800811e <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin( GPIOE, GPIO_PIN_3);
 800136e:	2108      	movs	r1, #8
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <StartDefaultTask+0x2c>)
 8001372:	f006 fed4 	bl	800811e <HAL_GPIO_TogglePin>


	//	 HAL_UART_Transmit(&huart4, GUI_sum_mode,sizeof(GUI_sum_mode), 100);

    osDelay(50);
 8001376:	2032      	movs	r0, #50	; 0x32
 8001378:	f013 fc08 	bl	8014b8c <osDelay>
		 HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_12);
 800137c:	e7f2      	b.n	8001364 <StartDefaultTask+0xc>
 800137e:	bf00      	nop
 8001380:	58020400 	.word	0x58020400
 8001384:	58021000 	.word	0x58021000

08001388 <StartTask02>:
/* USER CODE END Header_StartTask02 */
RTC_TimeTypeDef 	sTime = {0};
RTC_DateTypeDef 	sDate = {0};

void StartTask02(void const * argument)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	uint8_t Key_memo;
	uint16_t Dwin_mess;
	//	bool count_energy;
	Ready = true;   //Initial condition is STOP
 8001390:	4bd1      	ldr	r3, [pc, #836]	; (80016d8 <StartTask02+0x350>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]

	GUI_key0[7] = 0;
 8001396:	4bd1      	ldr	r3, [pc, #836]	; (80016dc <StartTask02+0x354>)
 8001398:	2200      	movs	r2, #0
 800139a:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_key0, sizeof(GUI_key0), 100);
 800139c:	2364      	movs	r3, #100	; 0x64
 800139e:	2208      	movs	r2, #8
 80013a0:	49ce      	ldr	r1, [pc, #824]	; (80016dc <StartTask02+0x354>)
 80013a2:	48cf      	ldr	r0, [pc, #828]	; (80016e0 <StartTask02+0x358>)
 80013a4:	f00e fbe3 	bl	800fb6e <HAL_UART_Transmit>
	GUI_key1[7] = 0;
 80013a8:	4bce      	ldr	r3, [pc, #824]	; (80016e4 <StartTask02+0x35c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_key1, sizeof(GUI_key1), 100);
 80013ae:	2364      	movs	r3, #100	; 0x64
 80013b0:	2208      	movs	r2, #8
 80013b2:	49cc      	ldr	r1, [pc, #816]	; (80016e4 <StartTask02+0x35c>)
 80013b4:	48ca      	ldr	r0, [pc, #808]	; (80016e0 <StartTask02+0x358>)
 80013b6:	f00e fbda 	bl	800fb6e <HAL_UART_Transmit>
	GUI_key2[7] = 0;
 80013ba:	4bcb      	ldr	r3, [pc, #812]	; (80016e8 <StartTask02+0x360>)
 80013bc:	2200      	movs	r2, #0
 80013be:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_key2, sizeof(GUI_key2), 100);
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	2208      	movs	r2, #8
 80013c4:	49c8      	ldr	r1, [pc, #800]	; (80016e8 <StartTask02+0x360>)
 80013c6:	48c6      	ldr	r0, [pc, #792]	; (80016e0 <StartTask02+0x358>)
 80013c8:	f00e fbd1 	bl	800fb6e <HAL_UART_Transmit>
	GUI_key3[7] = 0;
 80013cc:	4bc7      	ldr	r3, [pc, #796]	; (80016ec <StartTask02+0x364>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, GUI_key3, sizeof(GUI_key3), 100);
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	2208      	movs	r2, #8
 80013d6:	49c5      	ldr	r1, [pc, #788]	; (80016ec <StartTask02+0x364>)
 80013d8:	48c1      	ldr	r0, [pc, #772]	; (80016e0 <StartTask02+0x358>)
 80013da:	f00e fbc8 	bl	800fb6e <HAL_UART_Transmit>


	while (1)
	{
		if (Rx_recv)   //DWIN string is get completely
 80013de:	4bc4      	ldr	r3, [pc, #784]	; (80016f0 <StartTask02+0x368>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 82cc 	beq.w	8001980 <StartTask02+0x5f8>
		{
			Rx_recv = 0;   //confirmed Rx_rec
 80013e8:	4bc1      	ldr	r3, [pc, #772]	; (80016f0 <StartTask02+0x368>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
			GUI_boot = true;
 80013ee:	4bc1      	ldr	r3, [pc, #772]	; (80016f4 <StartTask02+0x36c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]

			Dwin_mess = (Rx1_Buffer[4] << 8) + Rx1_Buffer[5];
 80013f4:	4bc0      	ldr	r3, [pc, #768]	; (80016f8 <StartTask02+0x370>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4bbe      	ldr	r3, [pc, #760]	; (80016f8 <StartTask02+0x370>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4413      	add	r3, r2
 8001406:	81bb      	strh	r3, [r7, #12]

			osDelay(2);  // Remove repeat chattering
 8001408:	2002      	movs	r0, #2
 800140a:	f013 fbbf 	bl	8014b8c <osDelay>
			Rx_recv = 0;
 800140e:	4bb8      	ldr	r3, [pc, #736]	; (80016f0 <StartTask02+0x368>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]

			switch (Dwin_mess)
 8001414:	89bb      	ldrh	r3, [r7, #12]
 8001416:	f241 6215 	movw	r2, #5653	; 0x1615
 800141a:	4293      	cmp	r3, r2
 800141c:	f300 82b5 	bgt.w	800198a <StartTask02+0x602>
 8001420:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8001424:	f280 8082 	bge.w	800152c <StartTask02+0x1a4>
 8001428:	f241 5218 	movw	r2, #5400	; 0x1518
 800142c:	4293      	cmp	r3, r2
 800142e:	f300 82ac 	bgt.w	800198a <StartTask02+0x602>
 8001432:	f5b3 5fa8 	cmp.w	r3, #5376	; 0x1500
 8001436:	f280 80ad 	bge.w	8001594 <StartTask02+0x20c>
 800143a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800143e:	f000 8147 	beq.w	80016d0 <StartTask02+0x348>
 8001442:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001446:	f300 82a0 	bgt.w	800198a <StartTask02+0x602>
 800144a:	f241 32ac 	movw	r2, #5036	; 0x13ac
 800144e:	4293      	cmp	r3, r2
 8001450:	f000 8174 	beq.w	800173c <StartTask02+0x3b4>
 8001454:	f241 32ac 	movw	r2, #5036	; 0x13ac
 8001458:	4293      	cmp	r3, r2
 800145a:	f300 8296 	bgt.w	800198a <StartTask02+0x602>
 800145e:	f5b3 5f9d 	cmp.w	r3, #5024	; 0x13a0
 8001462:	f000 8172 	beq.w	800174a <StartTask02+0x3c2>
 8001466:	f5b3 5f9d 	cmp.w	r3, #5024	; 0x13a0
 800146a:	f300 828e 	bgt.w	800198a <StartTask02+0x602>
 800146e:	f241 3245 	movw	r2, #4933	; 0x1345
 8001472:	4293      	cmp	r3, r2
 8001474:	f000 815f 	beq.w	8001736 <StartTask02+0x3ae>
 8001478:	f241 3245 	movw	r2, #4933	; 0x1345
 800147c:	4293      	cmp	r3, r2
 800147e:	f300 8284 	bgt.w	800198a <StartTask02+0x602>
 8001482:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8001486:	f000 8153 	beq.w	8001730 <StartTask02+0x3a8>
 800148a:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 800148e:	f300 827c 	bgt.w	800198a <StartTask02+0x602>
 8001492:	f241 3205 	movw	r2, #4869	; 0x1305
 8001496:	4293      	cmp	r3, r2
 8001498:	f000 8211 	beq.w	80018be <StartTask02+0x536>
 800149c:	f241 3205 	movw	r2, #4869	; 0x1305
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f300 8272 	bgt.w	800198a <StartTask02+0x602>
 80014a6:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 80014aa:	f000 81fb 	beq.w	80018a4 <StartTask02+0x51c>
 80014ae:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 80014b2:	f300 826a 	bgt.w	800198a <StartTask02+0x602>
 80014b6:	f241 2298 	movw	r2, #4760	; 0x1298
 80014ba:	4293      	cmp	r3, r2
 80014bc:	f000 8135 	beq.w	800172a <StartTask02+0x3a2>
 80014c0:	f241 2298 	movw	r2, #4760	; 0x1298
 80014c4:	4293      	cmp	r3, r2
 80014c6:	f300 8260 	bgt.w	800198a <StartTask02+0x602>
 80014ca:	f241 2296 	movw	r2, #4758	; 0x1296
 80014ce:	4293      	cmp	r3, r2
 80014d0:	f000 8128 	beq.w	8001724 <StartTask02+0x39c>
 80014d4:	f241 2296 	movw	r2, #4758	; 0x1296
 80014d8:	4293      	cmp	r3, r2
 80014da:	f300 8256 	bgt.w	800198a <StartTask02+0x602>
 80014de:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80014e2:	f000 821f 	beq.w	8001924 <StartTask02+0x59c>
 80014e6:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80014ea:	f300 824e 	bgt.w	800198a <StartTask02+0x602>
 80014ee:	f5b3 5f93 	cmp.w	r3, #4704	; 0x1260
 80014f2:	f000 820b 	beq.w	800190c <StartTask02+0x584>
 80014f6:	f5b3 5f93 	cmp.w	r3, #4704	; 0x1260
 80014fa:	f300 8246 	bgt.w	800198a <StartTask02+0x602>
 80014fe:	f241 2250 	movw	r2, #4688	; 0x1250
 8001502:	4293      	cmp	r3, r2
 8001504:	f000 8107 	beq.w	8001716 <StartTask02+0x38e>
 8001508:	f241 2250 	movw	r2, #4688	; 0x1250
 800150c:	4293      	cmp	r3, r2
 800150e:	f300 823c 	bgt.w	800198a <StartTask02+0x602>
 8001512:	f5b3 5f92 	cmp.w	r3, #4672	; 0x1240
 8001516:	f000 80f7 	beq.w	8001708 <StartTask02+0x380>
 800151a:	f5b3 5f92 	cmp.w	r3, #4672	; 0x1240
 800151e:	f300 8234 	bgt.w	800198a <StartTask02+0x602>
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d070      	beq.n	8001608 <StartTask02+0x280>
 8001526:	2b14      	cmp	r3, #20
 8001528:	d072      	beq.n	8001610 <StartTask02+0x288>
 800152a:	e22e      	b.n	800198a <StartTask02+0x602>
 800152c:	f5a3 53b0 	sub.w	r3, r3, #5632	; 0x1600
 8001530:	2b15      	cmp	r3, #21
 8001532:	f200 822a 	bhi.w	800198a <StartTask02+0x602>
 8001536:	a201      	add	r2, pc, #4	; (adr r2, 800153c <StartTask02+0x1b4>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	0800198b 	.word	0x0800198b
 8001540:	0800198b 	.word	0x0800198b
 8001544:	08001931 	.word	0x08001931
 8001548:	08001937 	.word	0x08001937
 800154c:	0800198b 	.word	0x0800198b
 8001550:	08001919 	.word	0x08001919
 8001554:	0800193d 	.word	0x0800193d
 8001558:	0800198b 	.word	0x0800198b
 800155c:	08001943 	.word	0x08001943
 8001560:	0800197b 	.word	0x0800197b
 8001564:	0800198b 	.word	0x0800198b
 8001568:	0800198b 	.word	0x0800198b
 800156c:	0800198b 	.word	0x0800198b
 8001570:	0800198b 	.word	0x0800198b
 8001574:	0800198b 	.word	0x0800198b
 8001578:	0800198b 	.word	0x0800198b
 800157c:	0800198b 	.word	0x0800198b
 8001580:	0800198b 	.word	0x0800198b
 8001584:	0800198b 	.word	0x0800198b
 8001588:	0800198b 	.word	0x0800198b
 800158c:	080018d9 	.word	0x080018d9
 8001590:	080018f3 	.word	0x080018f3
 8001594:	f5a3 53a8 	sub.w	r3, r3, #5376	; 0x1500
 8001598:	2b18      	cmp	r3, #24
 800159a:	f200 81f6 	bhi.w	800198a <StartTask02+0x602>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <StartTask02+0x21c>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	0800161d 	.word	0x0800161d
 80015a8:	0800198b 	.word	0x0800198b
 80015ac:	0800162f 	.word	0x0800162f
 80015b0:	0800198b 	.word	0x0800198b
 80015b4:	08001641 	.word	0x08001641
 80015b8:	0800198b 	.word	0x0800198b
 80015bc:	08001653 	.word	0x08001653
 80015c0:	0800198b 	.word	0x0800198b
 80015c4:	08001665 	.word	0x08001665
 80015c8:	0800198b 	.word	0x0800198b
 80015cc:	0800198b 	.word	0x0800198b
 80015d0:	0800198b 	.word	0x0800198b
 80015d4:	0800198b 	.word	0x0800198b
 80015d8:	0800198b 	.word	0x0800198b
 80015dc:	0800198b 	.word	0x0800198b
 80015e0:	0800198b 	.word	0x0800198b
 80015e4:	08001677 	.word	0x08001677
 80015e8:	0800198b 	.word	0x0800198b
 80015ec:	08001689 	.word	0x08001689
 80015f0:	0800198b 	.word	0x0800198b
 80015f4:	0800169b 	.word	0x0800169b
 80015f8:	0800198b 	.word	0x0800198b
 80015fc:	080016ad 	.word	0x080016ad
 8001600:	0800198b 	.word	0x0800198b
 8001604:	080016bf 	.word	0x080016bf
			{
			//Take VP from receive data

			case (0x0F):     // Check LCD power on?
				GUI_boot = true;
 8001608:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <StartTask02+0x36c>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
			break;
 800160e:	e1bc      	b.n	800198a <StartTask02+0x602>

			case (0x0014): //Read no of page on work
				page = Rx1_Buffer[8];
 8001610:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <StartTask02+0x370>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <StartTask02+0x374>)
 8001618:	701a      	strb	r2, [r3, #0]
			break;
 800161a:	e1b6      	b.n	800198a <StartTask02+0x602>
//////////////////////////////////////////////////////////////

			case (0x1500):  // Password Key detection
				passwd[passwd_count] = 0;
 800161c:	4b38      	ldr	r3, [pc, #224]	; (8001700 <StartTask02+0x378>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b38      	ldr	r3, [pc, #224]	; (8001704 <StartTask02+0x37c>)
 8001624:	2100      	movs	r1, #0
 8001626:	5499      	strb	r1, [r3, r2]
				passwd_verify();
 8001628:	f7ff fb34 	bl	8000c94 <passwd_verify>
			break;
 800162c:	e1ad      	b.n	800198a <StartTask02+0x602>

			case (0x1502):  // Password Key detection
				passwd[passwd_count] = 1;
 800162e:	4b34      	ldr	r3, [pc, #208]	; (8001700 <StartTask02+0x378>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	4b33      	ldr	r3, [pc, #204]	; (8001704 <StartTask02+0x37c>)
 8001636:	2101      	movs	r1, #1
 8001638:	5499      	strb	r1, [r3, r2]
				passwd_verify();
 800163a:	f7ff fb2b 	bl	8000c94 <passwd_verify>
			break;
 800163e:	e1a4      	b.n	800198a <StartTask02+0x602>

			case (0x1504):  // Password Key detection
				passwd[passwd_count] = 2;
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <StartTask02+0x378>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <StartTask02+0x37c>)
 8001648:	2102      	movs	r1, #2
 800164a:	5499      	strb	r1, [r3, r2]
				passwd_verify();
 800164c:	f7ff fb22 	bl	8000c94 <passwd_verify>
			break;
 8001650:	e19b      	b.n	800198a <StartTask02+0x602>

			case (0x1506):  // Password Key detection
				passwd[passwd_count] = 3;
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <StartTask02+0x378>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <StartTask02+0x37c>)
 800165a:	2103      	movs	r1, #3
 800165c:	5499      	strb	r1, [r3, r2]
				passwd_verify();
 800165e:	f7ff fb19 	bl	8000c94 <passwd_verify>
			break;
 8001662:	e192      	b.n	800198a <StartTask02+0x602>

			case (0x1508):  // Password Key detection
				passwd[passwd_count] = 4;
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <StartTask02+0x378>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <StartTask02+0x37c>)
 800166c:	2104      	movs	r1, #4
 800166e:	5499      	strb	r1, [r3, r2]
				passwd_verify();
 8001670:	f7ff fb10 	bl	8000c94 <passwd_verify>
			break;
 8001674:	e189      	b.n	800198a <StartTask02+0x602>

			case (0x1510):  // Password Key detection
				passwd[passwd_count] = 5;
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <StartTask02+0x378>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <StartTask02+0x37c>)
 800167e:	2105      	movs	r1, #5
 8001680:	5499      	strb	r1, [r3, r2]
				passwd_verify();
 8001682:	f7ff fb07 	bl	8000c94 <passwd_verify>
			break;
 8001686:	e180      	b.n	800198a <StartTask02+0x602>

			case (0x1512):  // Password Key detection
				passwd[passwd_count] = 6;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <StartTask02+0x378>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <StartTask02+0x37c>)
 8001690:	2106      	movs	r1, #6
 8001692:	5499      	strb	r1, [r3, r2]
				passwd_verify();
 8001694:	f7ff fafe 	bl	8000c94 <passwd_verify>
			break;
 8001698:	e177      	b.n	800198a <StartTask02+0x602>

			case (0x1514):  // Password Key detection
				passwd[passwd_count] = 7;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <StartTask02+0x378>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <StartTask02+0x37c>)
 80016a2:	2107      	movs	r1, #7
 80016a4:	5499      	strb	r1, [r3, r2]
				passwd_verify();
 80016a6:	f7ff faf5 	bl	8000c94 <passwd_verify>
			break;
 80016aa:	e16e      	b.n	800198a <StartTask02+0x602>

			case (0x1516):  // Password Key detection
				passwd[passwd_count] = 8;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <StartTask02+0x378>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <StartTask02+0x37c>)
 80016b4:	2108      	movs	r1, #8
 80016b6:	5499      	strb	r1, [r3, r2]
				passwd_verify();
 80016b8:	f7ff faec 	bl	8000c94 <passwd_verify>
			break;
 80016bc:	e165      	b.n	800198a <StartTask02+0x602>

			case (0x1518):  // Password Key detection
				passwd[passwd_count] = 9;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <StartTask02+0x378>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <StartTask02+0x37c>)
 80016c6:	2109      	movs	r1, #9
 80016c8:	5499      	strb	r1, [r3, r2]
				passwd_verify();
 80016ca:	f7ff fae3 	bl	8000c94 <passwd_verify>
			break;
 80016ce:	e15c      	b.n	800198a <StartTask02+0x602>

////////////////////////////////////////////////


			case (0x1400):  //STOP, READY  Variable GUI
				GUI_1400();
 80016d0:	f7ff fb96 	bl	8000e00 <GUI_1400>
			break;
 80016d4:	e159      	b.n	800198a <StartTask02+0x602>
 80016d6:	bf00      	nop
 80016d8:	24006d76 	.word	0x24006d76
 80016dc:	24000000 	.word	0x24000000
 80016e0:	2400703c 	.word	0x2400703c
 80016e4:	24000008 	.word	0x24000008
 80016e8:	24000010 	.word	0x24000010
 80016ec:	24000018 	.word	0x24000018
 80016f0:	24006c66 	.word	0x24006c66
 80016f4:	24006c64 	.word	0x24006c64
 80016f8:	24006cf4 	.word	0x24006cf4
 80016fc:	24006cec 	.word	0x24006cec
 8001700:	24006c74 	.word	0x24006c74
 8001704:	24006cf0 	.word	0x24006cf0

			case (0x1240):  //TONING Page switching
				Stamp = 0;
 8001708:	4ba2      	ldr	r3, [pc, #648]	; (8001994 <StartTask02+0x60c>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
				DF_Play(S_toning); //Toning sound
 800170e:	201a      	movs	r0, #26
 8001710:	f001 f90f 	bl	8002932 <DF_Play>
				//  EEPROM_Read(Last_mode); //save current mode
				// // show_parameter_toning();
				//  show_ST_key_value();
				// // GUI_ready2stop();
			break;
 8001714:	e139      	b.n	800198a <StartTask02+0x602>

			case (0x1250):  //STAMP page switching
				Stamp = 1;
 8001716:	4b9f      	ldr	r3, [pc, #636]	; (8001994 <StartTask02+0x60c>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
				DF_Play(S_stamp);  //Stamp
 800171c:	2018      	movs	r0, #24
 800171e:	f001 f908 	bl	8002932 <DF_Play>
				//  EEPROM_Read(Last_mode);  //save current mode
				// show_parameter_stamp();
				//  show_ST_key_value();
				// // GUI_ready2stop();
			break;
 8001722:	e132      	b.n	800198a <StartTask02+0x602>

			// ===  Jump to Stamp mode from Monitor mode
			case (0x1296):
				GUI_1296();
 8001724:	f7ff fbaa 	bl	8000e7c <GUI_1296>
			break;
 8001728:	e12f      	b.n	800198a <StartTask02+0x602>


			// ===  Move to Monitor mode
			case (0x1298):
				GUI_1298();
 800172a:	f7ff fbef 	bl	8000f0c <GUI_1298>
			break;
 800172e:	e12c      	b.n	800198a <StartTask02+0x602>



			// ===  Laser ON at Monitor mode
			case (0x1340):
				GUI_1340();
 8001730:	f7ff fc2e 	bl	8000f90 <GUI_1340>
			break;
 8001734:	e129      	b.n	800198a <StartTask02+0x602>

			// ===  Increament & decrement adjustment at Monitoring
			case (0x1345):
				GUI_1345();
 8001736:	f7ff fc83 	bl	8001040 <GUI_1345>
			break;
 800173a:	e126      	b.n	800198a <StartTask02+0x602>

			// === Time setup
			case (0x13AC):
					HAL_UART_Transmit(&huart1, RTC_read,sizeof(RTC_read), 100); //RTC READ, year-month-date-time-minute
 800173c:	2364      	movs	r3, #100	; 0x64
 800173e:	2207      	movs	r2, #7
 8001740:	4995      	ldr	r1, [pc, #596]	; (8001998 <StartTask02+0x610>)
 8001742:	4896      	ldr	r0, [pc, #600]	; (800199c <StartTask02+0x614>)
 8001744:	f00e fa13 	bl	800fb6e <HAL_UART_Transmit>
			break;
 8001748:	e11f      	b.n	800198a <StartTask02+0x602>



			case (0x13A0):
				MX_RTC_Init();
 800174a:	f001 f821 	bl	8002790 <MX_RTC_Init>

				sDate.Year  =   ((Rx1_Buffer[8]/10) *16)  + (Rx1_Buffer[8]%10) ;
 800174e:	4b94      	ldr	r3, [pc, #592]	; (80019a0 <StartTask02+0x618>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a94      	ldr	r2, [pc, #592]	; (80019a4 <StartTask02+0x61c>)
 8001754:	fb82 1203 	smull	r1, r2, r2, r3
 8001758:	1092      	asrs	r2, r2, #2
 800175a:	17db      	asrs	r3, r3, #31
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	b2d8      	uxtb	r0, r3
 8001764:	4b8e      	ldr	r3, [pc, #568]	; (80019a0 <StartTask02+0x618>)
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	4b8e      	ldr	r3, [pc, #568]	; (80019a4 <StartTask02+0x61c>)
 800176a:	fb83 1302 	smull	r1, r3, r3, r2
 800176e:	1099      	asrs	r1, r3, #2
 8001770:	17d3      	asrs	r3, r2, #31
 8001772:	1ac9      	subs	r1, r1, r3
 8001774:	460b      	mov	r3, r1
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	1ad1      	subs	r1, r2, r3
 800177e:	b2cb      	uxtb	r3, r1
 8001780:	4403      	add	r3, r0
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b88      	ldr	r3, [pc, #544]	; (80019a8 <StartTask02+0x620>)
 8001786:	70da      	strb	r2, [r3, #3]
				sDate.Month =     Rx1_Buffer[12] ;
 8001788:	4b85      	ldr	r3, [pc, #532]	; (80019a0 <StartTask02+0x618>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b86      	ldr	r3, [pc, #536]	; (80019a8 <StartTask02+0x620>)
 8001790:	705a      	strb	r2, [r3, #1]
				sDate.Date  =   ((Rx1_Buffer[16]/10) *16) + (Rx1_Buffer[16]%10) ;
 8001792:	4b83      	ldr	r3, [pc, #524]	; (80019a0 <StartTask02+0x618>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a83      	ldr	r2, [pc, #524]	; (80019a4 <StartTask02+0x61c>)
 8001798:	fb82 1203 	smull	r1, r2, r2, r3
 800179c:	1092      	asrs	r2, r2, #2
 800179e:	17db      	asrs	r3, r3, #31
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	b2d8      	uxtb	r0, r3
 80017a8:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <StartTask02+0x618>)
 80017aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ac:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <StartTask02+0x61c>)
 80017ae:	fb83 1302 	smull	r1, r3, r3, r2
 80017b2:	1099      	asrs	r1, r3, #2
 80017b4:	17d3      	asrs	r3, r2, #31
 80017b6:	1ac9      	subs	r1, r1, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	1ad1      	subs	r1, r2, r3
 80017c2:	b2cb      	uxtb	r3, r1
 80017c4:	4403      	add	r3, r0
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b77      	ldr	r3, [pc, #476]	; (80019a8 <StartTask02+0x620>)
 80017ca:	709a      	strb	r2, [r3, #2]
				 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017cc:	2201      	movs	r2, #1
 80017ce:	4976      	ldr	r1, [pc, #472]	; (80019a8 <StartTask02+0x620>)
 80017d0:	4876      	ldr	r0, [pc, #472]	; (80019ac <StartTask02+0x624>)
 80017d2:	f00b fe33 	bl	800d43c <HAL_RTC_SetDate>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <StartTask02+0x458>
				 {
				   Error_Handler();
 80017dc:	f000 fedc 	bl	8002598 <Error_Handler>
				 }

					sTime.Hours   = ((Rx1_Buffer[20]/10) *16) + (Rx1_Buffer[20]%10) ;
 80017e0:	4b6f      	ldr	r3, [pc, #444]	; (80019a0 <StartTask02+0x618>)
 80017e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e4:	4a6f      	ldr	r2, [pc, #444]	; (80019a4 <StartTask02+0x61c>)
 80017e6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ea:	1092      	asrs	r2, r2, #2
 80017ec:	17db      	asrs	r3, r3, #31
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	b2d8      	uxtb	r0, r3
 80017f6:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <StartTask02+0x618>)
 80017f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017fa:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <StartTask02+0x61c>)
 80017fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001800:	1099      	asrs	r1, r3, #2
 8001802:	17d3      	asrs	r3, r2, #31
 8001804:	1ac9      	subs	r1, r1, r3
 8001806:	460b      	mov	r3, r1
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	1ad1      	subs	r1, r2, r3
 8001810:	b2cb      	uxtb	r3, r1
 8001812:	4403      	add	r3, r0
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <StartTask02+0x628>)
 8001818:	701a      	strb	r2, [r3, #0]
					sTime.Minutes = ((Rx1_Buffer[24]/10) *16) + (Rx1_Buffer[24]%10) ;
 800181a:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <StartTask02+0x618>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <StartTask02+0x61c>)
 8001820:	fb82 1203 	smull	r1, r2, r2, r3
 8001824:	1092      	asrs	r2, r2, #2
 8001826:	17db      	asrs	r3, r3, #31
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	b2d8      	uxtb	r0, r3
 8001830:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <StartTask02+0x618>)
 8001832:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001834:	4b5b      	ldr	r3, [pc, #364]	; (80019a4 <StartTask02+0x61c>)
 8001836:	fb83 1302 	smull	r1, r3, r3, r2
 800183a:	1099      	asrs	r1, r3, #2
 800183c:	17d3      	asrs	r3, r2, #31
 800183e:	1ac9      	subs	r1, r1, r3
 8001840:	460b      	mov	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	1ad1      	subs	r1, r2, r3
 800184a:	b2cb      	uxtb	r3, r1
 800184c:	4403      	add	r3, r0
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b57      	ldr	r3, [pc, #348]	; (80019b0 <StartTask02+0x628>)
 8001852:	705a      	strb	r2, [r3, #1]
					sTime.Seconds = ((Rx1_Buffer[28]/10) *16) + (Rx1_Buffer[28]%10) ;
 8001854:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <StartTask02+0x618>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <StartTask02+0x61c>)
 800185a:	fb82 1203 	smull	r1, r2, r2, r3
 800185e:	1092      	asrs	r2, r2, #2
 8001860:	17db      	asrs	r3, r3, #31
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	b2d8      	uxtb	r0, r3
 800186a:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <StartTask02+0x618>)
 800186c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800186e:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <StartTask02+0x61c>)
 8001870:	fb83 1302 	smull	r1, r3, r3, r2
 8001874:	1099      	asrs	r1, r3, #2
 8001876:	17d3      	asrs	r3, r2, #31
 8001878:	1ac9      	subs	r1, r1, r3
 800187a:	460b      	mov	r3, r1
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	1ad1      	subs	r1, r2, r3
 8001884:	b2cb      	uxtb	r3, r1
 8001886:	4403      	add	r3, r0
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <StartTask02+0x628>)
 800188c:	709a      	strb	r2, [r3, #2]
				    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800188e:	2201      	movs	r2, #1
 8001890:	4947      	ldr	r1, [pc, #284]	; (80019b0 <StartTask02+0x628>)
 8001892:	4846      	ldr	r0, [pc, #280]	; (80019ac <StartTask02+0x624>)
 8001894:	f00b fcd8 	bl	800d248 <HAL_RTC_SetTime>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d072      	beq.n	8001984 <StartTask02+0x5fc>
				    {
				      Error_Handler();
 800189e:	f000 fe7b 	bl	8002598 <Error_Handler>
				    }
			break;
 80018a2:	e06f      	b.n	8001984 <StartTask02+0x5fc>

			///////////////////
			case (0x1300):  //  Increament & decrement adjustment at STAMP
			DF_Play(S_Beek);
 80018a4:	2013      	movs	r0, #19
 80018a6:	f001 f844 	bl	8002932 <DF_Play>
			//  EEPROM_Write( Last_power_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_power_low, Rx1_Buffer[8]);
			Power_DAC = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8];  ///////
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <StartTask02+0x618>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	021a      	lsls	r2, r3, #8
 80018b0:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <StartTask02+0x618>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4413      	add	r3, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <StartTask02+0x62c>)
 80018ba:	601a      	str	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 80018bc:	e065      	b.n	800198a <StartTask02+0x602>

			case (0x1305):  // Increament & decrement adjustment at Toning
			DF_Play(S_Beek);
 80018be:	2013      	movs	r0, #19
 80018c0:	f001 f837 	bl	8002932 <DF_Play>
			//  EEPROM_Write( Last_power_high_t, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_power_low_t, Rx1_Buffer[8]);
			Power_DAC_t = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8];  ///////
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <StartTask02+0x618>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	021a      	lsls	r2, r3, #8
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <StartTask02+0x618>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4413      	add	r3, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <StartTask02+0x630>)
 80018d4:	601a      	str	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 80018d6:	e058      	b.n	800198a <StartTask02+0x602>

			case (0x1614):  //save On_time value to eeprom
								//  EEPROM_Write( Last_on_time_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_on_time_low, Rx1_Buffer[8]);
			On_Time = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8]; ///////
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <StartTask02+0x618>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <StartTask02+0x618>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b33      	ldr	r3, [pc, #204]	; (80019bc <StartTask02+0x634>)
 80018ee:	801a      	strh	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 80018f0:	e04b      	b.n	800198a <StartTask02+0x602>

			case (0x1615):  //save Off_time value to eeprom
								//  EEPROM_Write( Last_off_time_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_off_time_low, Rx1_Buffer[8]);
			Off_Time = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8]; ///////
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <StartTask02+0x618>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <StartTask02+0x618>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	b29b      	uxth	r3, r3
 8001902:	4413      	add	r3, r2
 8001904:	b29a      	uxth	r2, r3
 8001906:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <StartTask02+0x638>)
 8001908:	801a      	strh	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 800190a:	e03e      	b.n	800198a <StartTask02+0x602>

			case (0x1260):  //Pulse value to eeprom
			//  EEPROM_Write( Last_pulse, Rx1_Buffer[8]);
			Pulse = Rx1_Buffer[8];  ///////
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <StartTask02+0x618>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <StartTask02+0x63c>)
 8001914:	701a      	strb	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 8001916:	e038      	b.n	800198a <StartTask02+0x602>

			case (0x1605):  //Repeat value to eeprom
			//  EEPROM_Write( Last_repeat, Rx1_Buffer[8]);
			Repeat = Rx1_Buffer[8];
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <StartTask02+0x618>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	b29a      	uxth	r2, r3
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <StartTask02+0x640>)
 8001920:	801a      	strh	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 8001922:	e032      	b.n	800198a <StartTask02+0x602>

			case (0x1280):  //Frequency value to eeprom
			//  EEPROM_Write( Last_frequency, Rx1_Buffer[8]);
			Freq = Rx1_Buffer[8];  ///////
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <StartTask02+0x618>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <StartTask02+0x644>)
 800192c:	701a      	strb	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 800192e:	e02c      	b.n	800198a <StartTask02+0x602>
			//  EEPROM_Write( Last_tcount_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_tcount_low, Rx1_Buffer[8]);
			break;

			case (0x1602):  //SOUND, MUTE Variable GUI
				GUI_1602();
 8001930:	f7ff fbaa 	bl	8001088 <GUI_1602>
			break;
 8001934:	e029      	b.n	800198a <StartTask02+0x602>


			case (0x1603):  //FOOT, HAND Variable GUI
				GUI_1603();
 8001936:	f7ff fbdb 	bl	80010f0 <GUI_1603>
			break;
 800193a:	e026      	b.n	800198a <StartTask02+0x602>

			//======  Select Total counter & energy  ============
			case (0x1606):  //Select between Toggle counts and Energy
				GUI_1606();
 800193c:	f7ff fc06 	bl	800114c <GUI_1606>
			break;
 8001940:	e023      	b.n	800198a <StartTask02+0x602>

			//======  Clear Total counter value     ============
			case (0x1608):  // Clear Total counter value
				Key_memo++;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	3301      	adds	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]

				if (Key_memo == GUI_save_delay)
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d11c      	bne.n	8001988 <StartTask02+0x600>
				{
					DF_Play(S_clear);   //sound 'clear'
 800194e:	2006      	movs	r0, #6
 8001950:	f000 ffef 	bl	8002932 <DF_Play>
					sum_count = 0;
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <StartTask02+0x648>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
					sum_count_t = 0;
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <StartTask02+0x64c>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
					sum_energy = 0;
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <StartTask02+0x650>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
					sum_energy_t = 0;
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <StartTask02+0x654>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, GUI_sum_value,sizeof(GUI_sum_value), 100);
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	220a      	movs	r2, #10
 8001970:	491b      	ldr	r1, [pc, #108]	; (80019e0 <StartTask02+0x658>)
 8001972:	480a      	ldr	r0, [pc, #40]	; (800199c <StartTask02+0x614>)
 8001974:	f00e f8fb 	bl	800fb6e <HAL_UART_Transmit>
				}
			break;
 8001978:	e006      	b.n	8001988 <StartTask02+0x600>
			case (0x1609): // save last parameter to EEPROM, show value on S2 key
				if (Key_memo >= GUI_save_delay)
						;
				else
						;
				Key_memo = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
			break;
 800197e:	e004      	b.n	800198a <StartTask02+0x602>

		default:
 8001980:	bf00      	nop
 8001982:	e002      	b.n	800198a <StartTask02+0x602>
			break;
 8001984:	bf00      	nop
 8001986:	e000      	b.n	800198a <StartTask02+0x602>
			break;
 8001988:	bf00      	nop
			}  //end of switch
			//================== End of Memory process ======================

		}   //if Rx_recv is received, it will be work.

		osDelay(Delay_task02);
 800198a:	2005      	movs	r0, #5
 800198c:	f013 f8fe 	bl	8014b8c <osDelay>
		if (Rx_recv)   //DWIN string is get completely
 8001990:	e525      	b.n	80013de <StartTask02+0x56>
 8001992:	bf00      	nop
 8001994:	24006c6a 	.word	0x24006c6a
 8001998:	2400002c 	.word	0x2400002c
 800199c:	2400703c 	.word	0x2400703c
 80019a0:	24006cf4 	.word	0x24006cf4
 80019a4:	66666667 	.word	0x66666667
 80019a8:	240005f4 	.word	0x240005f4
 80019ac:	24006de0 	.word	0x24006de0
 80019b0:	240005e0 	.word	0x240005e0
 80019b4:	24006ca0 	.word	0x24006ca0
 80019b8:	24006d80 	.word	0x24006d80
 80019bc:	24006ca4 	.word	0x24006ca4
 80019c0:	24006cce 	.word	0x24006cce
 80019c4:	24006c61 	.word	0x24006c61
 80019c8:	24006c54 	.word	0x24006c54
 80019cc:	24006cac 	.word	0x24006cac
 80019d0:	24006cb0 	.word	0x24006cb0
 80019d4:	24006c58 	.word	0x24006c58
 80019d8:	24006ca8 	.word	0x24006ca8
 80019dc:	24006c9c 	.word	0x24006c9c
 80019e0:	2400006c 	.word	0x2400006c

080019e4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	static uint8_t Rx_len, Rx_indx, data, Rx4_indx;

	while (1)
	{
		//============= UART-4: Hand piece ==============
		if (isEmpty(&uart_4) == 0)
 80019ec:	485b      	ldr	r0, [pc, #364]	; (8001b5c <StartTask03+0x178>)
 80019ee:	f000 faa0 	bl	8001f32 <isEmpty>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d153      	bne.n	8001aa0 <StartTask03+0xbc>
		{
			data = pop(&uart_4);
 80019f8:	4858      	ldr	r0, [pc, #352]	; (8001b5c <StartTask03+0x178>)
 80019fa:	f000 fa7b 	bl	8001ef4 <pop>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <StartTask03+0x17c>)
 8001a04:	701a      	strb	r2, [r3, #0]

			if (data != 10)   // Line feed? new line
 8001a06:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <StartTask03+0x17c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b0a      	cmp	r3, #10
 8001a0c:	d00b      	beq.n	8001a26 <StartTask03+0x42>
			{
				Rx4_Buffer[Rx4_indx++] = data;
 8001a0e:	4b55      	ldr	r3, [pc, #340]	; (8001b64 <StartTask03+0x180>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	b2d1      	uxtb	r1, r2
 8001a16:	4a53      	ldr	r2, [pc, #332]	; (8001b64 <StartTask03+0x180>)
 8001a18:	7011      	strb	r1, [r2, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <StartTask03+0x17c>)
 8001a1e:	7819      	ldrb	r1, [r3, #0]
 8001a20:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <StartTask03+0x184>)
 8001a22:	5499      	strb	r1, [r3, r2]
 8001a24:	e02d      	b.n	8001a82 <StartTask03+0x9e>
			}
			else
			{
				Rx4_Buffer[0] = 0x30; // # -> 0 clear
 8001a26:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <StartTask03+0x184>)
 8001a28:	2230      	movs	r2, #48	; 0x30
 8001a2a:	701a      	strb	r2, [r3, #0]
				HP_lens = atoi(strtok(Rx4_Buffer, " ")); //Lens 1,2,3
 8001a2c:	494f      	ldr	r1, [pc, #316]	; (8001b6c <StartTask03+0x188>)
 8001a2e:	484e      	ldr	r0, [pc, #312]	; (8001b68 <StartTask03+0x184>)
 8001a30:	f015 fb8a 	bl	8017148 <strtok>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f015 f8f8 	bl	8016c2c <atoi>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <StartTask03+0x18c>)
 8001a42:	701a      	strb	r2, [r3, #0]
				HP_Temp = atoi(strtok(NULL, " ")); //Temp. sensor data
 8001a44:	4949      	ldr	r1, [pc, #292]	; (8001b6c <StartTask03+0x188>)
 8001a46:	2000      	movs	r0, #0
 8001a48:	f015 fb7e 	bl	8017148 <strtok>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f015 f8ec 	bl	8016c2c <atoi>
 8001a54:	4603      	mov	r3, r0
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <StartTask03+0x190>)
 8001a5a:	801a      	strh	r2, [r3, #0]
				HP_Fire = atoi(strtok(NULL, " ")); //HP switch detect
 8001a5c:	4943      	ldr	r1, [pc, #268]	; (8001b6c <StartTask03+0x188>)
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f015 fb72 	bl	8017148 <strtok>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f015 f8e0 	bl	8016c2c <atoi>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <StartTask03+0x194>)
 8001a7a:	701a      	strb	r2, [r3, #0]

				Rx4_indx = 0;   // HP data is received
 8001a7c:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <StartTask03+0x180>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
			}   //else

			if (HP_Fire)
 8001a82:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <StartTask03+0x194>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <StartTask03+0xb2>
			{
				 HAL_GPIO_WritePin( GPIOC, GPIO_PIN_7,GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	483b      	ldr	r0, [pc, #236]	; (8001b7c <StartTask03+0x198>)
 8001a90:	f006 fb2c 	bl	80080ec <HAL_GPIO_WritePin>
 8001a94:	e004      	b.n	8001aa0 <StartTask03+0xbc>
			}
			else
				 HAL_GPIO_WritePin( GPIOC, GPIO_PIN_7,GPIO_PIN_SET);
 8001a96:	2201      	movs	r2, #1
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	4838      	ldr	r0, [pc, #224]	; (8001b7c <StartTask03+0x198>)
 8001a9c:	f006 fb26 	bl	80080ec <HAL_GPIO_WritePin>

    	}  //if

		//============= UART-1: DWIN LCD ==============
		if (isEmpty(&uart_1) == 0)
 8001aa0:	4837      	ldr	r0, [pc, #220]	; (8001b80 <StartTask03+0x19c>)
 8001aa2:	f000 fa46 	bl	8001f32 <isEmpty>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d152      	bne.n	8001b52 <StartTask03+0x16e>
		{  /////Ring buffer check and get all

			data = pop(&uart_1);
 8001aac:	4834      	ldr	r0, [pc, #208]	; (8001b80 <StartTask03+0x19c>)
 8001aae:	f000 fa21 	bl	8001ef4 <pop>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <StartTask03+0x17c>)
 8001ab8:	701a      	strb	r2, [r3, #0]

			if (data == 0x5A)
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <StartTask03+0x17c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b5a      	cmp	r3, #90	; 0x5a
 8001ac0:	d108      	bne.n	8001ad4 <StartTask03+0xf0>
			{			//Find head of string 0x5A/90
				Rx1_Buffer[0] = data;
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <StartTask03+0x17c>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <StartTask03+0x1a0>)
 8001aca:	601a      	str	r2, [r3, #0]
				Rx_recv = 0;
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <StartTask03+0x1a4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e03e      	b.n	8001b52 <StartTask03+0x16e>
			}
			else if (data == 0xA5)
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <StartTask03+0x17c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2ba5      	cmp	r3, #165	; 0xa5
 8001ada:	d108      	bne.n	8001aee <StartTask03+0x10a>
			{	//head of string  0xA5/165
				Rx1_Buffer[1] = data;
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <StartTask03+0x17c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <StartTask03+0x1a0>)
 8001ae4:	605a      	str	r2, [r3, #4]
				Rx_len = 1;			//Ready to get length of string
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <StartTask03+0x1a8>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e031      	b.n	8001b52 <StartTask03+0x16e>
			}

			else if (Rx_len == 1)
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <StartTask03+0x1a8>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d10b      	bne.n	8001b0e <StartTask03+0x12a>
			{	//Is it a length of string
				Rx1_Buffer[2] = data;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <StartTask03+0x17c>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <StartTask03+0x1a0>)
 8001afe:	609a      	str	r2, [r3, #8]
				Rx_len = 0;
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <StartTask03+0x1a8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
				Rx_indx = 3;
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <StartTask03+0x1ac>)
 8001b08:	2203      	movs	r2, #3
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	e021      	b.n	8001b52 <StartTask03+0x16e>
			}

			else
			{
				if (Rx1_Buffer[2] > Rx_indx)
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <StartTask03+0x1a0>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <StartTask03+0x1ac>)
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	dd0c      	ble.n	8001b34 <StartTask03+0x150>
					Rx1_Buffer[Rx_indx++] = data;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <StartTask03+0x17c>)
 8001b1c:	7819      	ldrb	r1, [r3, #0]
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <StartTask03+0x1ac>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	b2d0      	uxtb	r0, r2
 8001b26:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <StartTask03+0x1ac>)
 8001b28:	7010      	strb	r0, [r2, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <StartTask03+0x1a0>)
 8001b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001b32:	e00e      	b.n	8001b52 <StartTask03+0x16e>
				else
				{
					Rx1_Buffer[Rx_indx++] = data; //already get length of string
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <StartTask03+0x17c>)
 8001b36:	7819      	ldrb	r1, [r3, #0]
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <StartTask03+0x1ac>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	b2d0      	uxtb	r0, r2
 8001b40:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <StartTask03+0x1ac>)
 8001b42:	7010      	strb	r0, [r2, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <StartTask03+0x1a0>)
 8001b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					Rx_recv = 1;
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <StartTask03+0x1a4>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
				}

			} //else
		}
		osDelay(Delay_task03);
 8001b52:	2001      	movs	r0, #1
 8001b54:	f013 f81a 	bl	8014b8c <osDelay>
		if (isEmpty(&uart_4) == 0)
 8001b58:	e748      	b.n	80019ec <StartTask03+0x8>
 8001b5a:	bf00      	nop
 8001b5c:	24006a84 	.word	0x24006a84
 8001b60:	240005f8 	.word	0x240005f8
 8001b64:	240005f9 	.word	0x240005f9
 8001b68:	24006cb4 	.word	0x24006cb4
 8001b6c:	080183f4 	.word	0x080183f4
 8001b70:	24006d78 	.word	0x24006d78
 8001b74:	24006c68 	.word	0x24006c68
 8001b78:	24006c98 	.word	0x24006c98
 8001b7c:	58020800 	.word	0x58020800
 8001b80:	24006bfc 	.word	0x24006bfc
 8001b84:	24006cf4 	.word	0x24006cf4
 8001b88:	24006c66 	.word	0x24006c66
 8001b8c:	240005fa 	.word	0x240005fa
 8001b90:	240005fb 	.word	0x240005fb

08001b94 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	    ttt = (float)HP_Temp/10;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <StartTask04+0x2c>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001baa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <StartTask04+0x30>)
 8001bb4:	edc3 7a00 	vstr	s15, [r3]
	//     HAL_UART_Transmit(&huart4,  HP_Temp ,sizeof(3), 100);
	 //   printf("Temp = %d \r\n", HP_Temp);
	    osDelay(200);
 8001bb8:	20c8      	movs	r0, #200	; 0xc8
 8001bba:	f012 ffe7 	bl	8014b8c <osDelay>
	    ttt = (float)HP_Temp/10;
 8001bbe:	e7ed      	b.n	8001b9c <StartTask04+0x8>
 8001bc0:	24006c68 	.word	0x24006c68
 8001bc4:	24006d84 	.word	0x24006d84

08001bc8 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
		RTC_CalendarShow(&sdatestructureget, &stimestructureget);
 8001bd0:	4904      	ldr	r1, [pc, #16]	; (8001be4 <StartTask05+0x1c>)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <StartTask05+0x20>)
 8001bd4:	f7ff f816 	bl	8000c04 <RTC_CalendarShow>
			sprintf((char *)&text, "Date 20%02d-%02d-%02d ",sdatestructureget.Year,sdatestructureget.Month, sdatestructureget.Date);
		LCD_ShowString(4, 40, 160, 16, 16, text);

		sprintf((char *)&text,"Tick: %d ms",HAL_GetTick());
		LCD_ShowString(4, 74, 160, 16, 16,text);
*/		osDelay(1000);
 8001bd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bdc:	f012 ffd6 	bl	8014b8c <osDelay>
		RTC_CalendarShow(&sdatestructureget, &stimestructureget);
 8001be0:	e7f6      	b.n	8001bd0 <StartTask05+0x8>
 8001be2:	bf00      	nop
 8001be4:	24006cd0 	.word	0x24006cd0
 8001be8:	24006c7c 	.word	0x24006c7c

08001bec <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {

	  for(int k= 0;k<4095;k++){
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	e007      	b.n	8001c0a <StartTask06+0x1e>
	  	wdata[k] = 29;
 8001bfa:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <StartTask06+0x60>)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	221d      	movs	r2, #29
 8001c02:	701a      	strb	r2, [r3, #0]
	  for(int k= 0;k<4095;k++){
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001c10:	4293      	cmp	r3, r2
 8001c12:	ddf2      	ble.n	8001bfa <StartTask06+0xe>
	  }

	  W25qxx_EraseSector(0);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f003 fdfb 	bl	8005810 <W25qxx_EraseSector>
	  W25qxx_PageProgram(wdata, 3800, 300);
 8001c1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c1e:	f640 61d8 	movw	r1, #3800	; 0xed8
 8001c22:	480a      	ldr	r0, [pc, #40]	; (8001c4c <StartTask06+0x60>)
 8001c24:	f003 fe3a 	bl	800589c <W25qxx_PageProgram>
	  osDelay(100);
 8001c28:	2064      	movs	r0, #100	; 0x64
 8001c2a:	f012 ffaf 	bl	8014b8c <osDelay>
	  W25qxx_Read(rdata, 3800, 300);
 8001c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c32:	f640 61d8 	movw	r1, #3800	; 0xed8
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <StartTask06+0x64>)
 8001c38:	f003 fe82 	bl	8005940 <W25qxx_Read>
	  osDelay(100);
 8001c3c:	2064      	movs	r0, #100	; 0x64
 8001c3e:	f012 ffa5 	bl	8014b8c <osDelay>
	    printf("  Read=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d \r\n",
	 	  rdata[i],rdata[i+1],rdata[i+2],rdata[i+3],rdata[i+4],rdata[i+5],rdata[i+6],rdata[i+7],rdata[i+8],rdata[i+9]);
   }

	  printf("\r\n");
 */   osDelay(2000);
 8001c42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c46:	f012 ffa1 	bl	8014b8c <osDelay>
  {
 8001c4a:	e7d3      	b.n	8001bf4 <StartTask06+0x8>
 8001c4c:	240005fc 	.word	0x240005fc
 8001c50:	240015fc 	.word	0x240015fc

08001c54 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void const * argument)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	uint8_t first, second;

	//=============  Temperature  ===============
	for (;;)
	{   // HP temperature detection
		first = HP_Temp >> 8;
 8001c5c:	4b5e      	ldr	r3, [pc, #376]	; (8001dd8 <StartTask07+0x184>)
 8001c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c62:	121b      	asrs	r3, r3, #8
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	73fb      	strb	r3, [r7, #15]
		second = HP_Temp & 0x00FF;
 8001c68:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <StartTask07+0x184>)
 8001c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6e:	73bb      	strb	r3, [r7, #14]
		GUI_temp[6] = first;  // Disp temperature and show it on LCD
 8001c70:	4a5a      	ldr	r2, [pc, #360]	; (8001ddc <StartTask07+0x188>)
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	7193      	strb	r3, [r2, #6]
		GUI_temp[7] = second;
 8001c76:	4a59      	ldr	r2, [pc, #356]	; (8001ddc <StartTask07+0x188>)
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	71d3      	strb	r3, [r2, #7]
		HAL_UART_Transmit(&huart1, GUI_temp, sizeof(GUI_temp), 100);
 8001c7c:	2364      	movs	r3, #100	; 0x64
 8001c7e:	2208      	movs	r2, #8
 8001c80:	4956      	ldr	r1, [pc, #344]	; (8001ddc <StartTask07+0x188>)
 8001c82:	4857      	ldr	r0, [pc, #348]	; (8001de0 <StartTask07+0x18c>)
 8001c84:	f00d ff73 	bl	800fb6e <HAL_UART_Transmit>

		//=============  Total energy & count value ===============
		if (Count_energy)
 8001c88:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <StartTask07+0x190>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03f      	beq.n	8001d10 <StartTask07+0xbc>
		{
			if (Stamp)
 8001c90:	4b55      	ldr	r3, [pc, #340]	; (8001de8 <StartTask07+0x194>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01d      	beq.n	8001cd4 <StartTask07+0x80>
			{
				GUI_sum_value[6] =  (sum_count) >> 24;
 8001c98:	4b54      	ldr	r3, [pc, #336]	; (8001dec <StartTask07+0x198>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0e1b      	lsrs	r3, r3, #24
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <StartTask07+0x19c>)
 8001ca2:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] =  ((sum_count) >> 16) & 0xFF;
 8001ca4:	4b51      	ldr	r3, [pc, #324]	; (8001dec <StartTask07+0x198>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <StartTask07+0x19c>)
 8001cae:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] =  ((sum_count) >> 8) & 0xFF;
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <StartTask07+0x198>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <StartTask07+0x19c>)
 8001cba:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] =  (sum_count) & 0xFF;
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <StartTask07+0x198>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <StartTask07+0x19c>)
 8001cc4:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),100);
 8001cc6:	2364      	movs	r3, #100	; 0x64
 8001cc8:	220a      	movs	r2, #10
 8001cca:	4949      	ldr	r1, [pc, #292]	; (8001df0 <StartTask07+0x19c>)
 8001ccc:	4844      	ldr	r0, [pc, #272]	; (8001de0 <StartTask07+0x18c>)
 8001cce:	f00d ff4e 	bl	800fb6e <HAL_UART_Transmit>
 8001cd2:	e07c      	b.n	8001dce <StartTask07+0x17a>
			}
			else
			{
				GUI_sum_value[6] = (sum_count_t) >> 24;
 8001cd4:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <StartTask07+0x1a0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0e1b      	lsrs	r3, r3, #24
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <StartTask07+0x19c>)
 8001cde:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_count_t) >> 16) & 0xFF;
 8001ce0:	4b44      	ldr	r3, [pc, #272]	; (8001df4 <StartTask07+0x1a0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <StartTask07+0x19c>)
 8001cea:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_count_t) >> 8) & 0xFF;
 8001cec:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <StartTask07+0x1a0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <StartTask07+0x19c>)
 8001cf6:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_count_t) & 0xFF;
 8001cf8:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <StartTask07+0x1a0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <StartTask07+0x19c>)
 8001d00:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),100);
 8001d02:	2364      	movs	r3, #100	; 0x64
 8001d04:	220a      	movs	r2, #10
 8001d06:	493a      	ldr	r1, [pc, #232]	; (8001df0 <StartTask07+0x19c>)
 8001d08:	4835      	ldr	r0, [pc, #212]	; (8001de0 <StartTask07+0x18c>)
 8001d0a:	f00d ff30 	bl	800fb6e <HAL_UART_Transmit>
 8001d0e:	e05e      	b.n	8001dce <StartTask07+0x17a>
			}
		}
		else
		{
			if (Stamp)
 8001d10:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <StartTask07+0x194>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d02d      	beq.n	8001d74 <StartTask07+0x120>
			{
				GUI_sum_value[6] = (sum_energy/10) >> 24;
 8001d18:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <StartTask07+0x1a4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a37      	ldr	r2, [pc, #220]	; (8001dfc <StartTask07+0x1a8>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	08db      	lsrs	r3, r3, #3
 8001d24:	0e1b      	lsrs	r3, r3, #24
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <StartTask07+0x19c>)
 8001d2a:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_energy/10) >> 16) & 0xFF;
 8001d2c:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <StartTask07+0x1a4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a32      	ldr	r2, [pc, #200]	; (8001dfc <StartTask07+0x1a8>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	08db      	lsrs	r3, r3, #3
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <StartTask07+0x19c>)
 8001d3e:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_energy/10) >> 8) & 0xFF;
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <StartTask07+0x1a4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2d      	ldr	r2, [pc, #180]	; (8001dfc <StartTask07+0x1a8>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <StartTask07+0x19c>)
 8001d52:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_energy/10) & 0xFF;
 8001d54:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <StartTask07+0x1a4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a28      	ldr	r2, [pc, #160]	; (8001dfc <StartTask07+0x1a8>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	08db      	lsrs	r3, r3, #3
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <StartTask07+0x19c>)
 8001d64:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),100);
 8001d66:	2364      	movs	r3, #100	; 0x64
 8001d68:	220a      	movs	r2, #10
 8001d6a:	4921      	ldr	r1, [pc, #132]	; (8001df0 <StartTask07+0x19c>)
 8001d6c:	481c      	ldr	r0, [pc, #112]	; (8001de0 <StartTask07+0x18c>)
 8001d6e:	f00d fefe 	bl	800fb6e <HAL_UART_Transmit>
 8001d72:	e02c      	b.n	8001dce <StartTask07+0x17a>
			}
			else
			{
				GUI_sum_value[6] = (sum_energy_t/10) >> 24;
 8001d74:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <StartTask07+0x1ac>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <StartTask07+0x1a8>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	0e1b      	lsrs	r3, r3, #24
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <StartTask07+0x19c>)
 8001d86:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_energy_t/10) >> 16) & 0xFF;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <StartTask07+0x1ac>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <StartTask07+0x1a8>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	0c1b      	lsrs	r3, r3, #16
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <StartTask07+0x19c>)
 8001d9a:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_energy_t/10) >> 8) & 0xFF;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <StartTask07+0x1ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <StartTask07+0x1a8>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <StartTask07+0x19c>)
 8001dae:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_energy_t/10) & 0xFF;
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <StartTask07+0x1ac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <StartTask07+0x1a8>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	08db      	lsrs	r3, r3, #3
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <StartTask07+0x19c>)
 8001dc0:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),100);
 8001dc2:	2364      	movs	r3, #100	; 0x64
 8001dc4:	220a      	movs	r2, #10
 8001dc6:	490a      	ldr	r1, [pc, #40]	; (8001df0 <StartTask07+0x19c>)
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <StartTask07+0x18c>)
 8001dca:	f00d fed0 	bl	800fb6e <HAL_UART_Transmit>
			}
		}

		osDelay(Delay_task07);  //500ms
 8001dce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001dd2:	f012 fedb 	bl	8014b8c <osDelay>
		first = HP_Temp >> 8;
 8001dd6:	e741      	b.n	8001c5c <StartTask07+0x8>
 8001dd8:	24006c68 	.word	0x24006c68
 8001ddc:	24000054 	.word	0x24000054
 8001de0:	2400703c 	.word	0x2400703c
 8001de4:	24006c60 	.word	0x24006c60
 8001de8:	24006c6a 	.word	0x24006c6a
 8001dec:	24006cb0 	.word	0x24006cb0
 8001df0:	2400006c 	.word	0x2400006c
 8001df4:	24006c58 	.word	0x24006c58
 8001df8:	24006ca8 	.word	0x24006ca8
 8001dfc:	cccccccd 	.word	0xcccccccd
 8001e00:	24006c9c 	.word	0x24006c9c

08001e04 <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void const * argument)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  /* Infinite loop */
  for(;;)
  {
 	  printf( "Date 20%d-%d-%d\r\n",sdatestructureget.Year,sdatestructureget.Month, sdatestructureget.Date);
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <StartTask08+0x94>)
 8001e0e:	78db      	ldrb	r3, [r3, #3]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <StartTask08+0x94>)
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <StartTask08+0x94>)
 8001e1a:	789b      	ldrb	r3, [r3, #2]
 8001e1c:	481f      	ldr	r0, [pc, #124]	; (8001e9c <StartTask08+0x98>)
 8001e1e:	f015 f89d 	bl	8016f5c <iprintf>
 	  osDelay(5);
 8001e22:	2005      	movs	r0, #5
 8001e24:	f012 feb2 	bl	8014b8c <osDelay>
	  printf( "Time %d:%d:%d\r\n",stimestructureget.Hours, stimestructureget.Minutes,stimestructureget.Seconds);
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <StartTask08+0x9c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <StartTask08+0x9c>)
 8001e30:	785b      	ldrb	r3, [r3, #1]
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <StartTask08+0x9c>)
 8001e36:	789b      	ldrb	r3, [r3, #2]
 8001e38:	481a      	ldr	r0, [pc, #104]	; (8001ea4 <StartTask08+0xa0>)
 8001e3a:	f015 f88f 	bl	8016f5c <iprintf>
	  osDelay(5);
 8001e3e:	2005      	movs	r0, #5
 8001e40:	f012 fea4 	bl	8014b8c <osDelay>
	  printf( "\n\r");
 8001e44:	4818      	ldr	r0, [pc, #96]	; (8001ea8 <StartTask08+0xa4>)
 8001e46:	f015 f889 	bl	8016f5c <iprintf>

	  RTC_disp[6] = sdatestructureget.Year;
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <StartTask08+0x94>)
 8001e4c:	78da      	ldrb	r2, [r3, #3]
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <StartTask08+0xa8>)
 8001e50:	719a      	strb	r2, [r3, #6]
	  RTC_disp[7] = sdatestructureget.Month;
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <StartTask08+0x94>)
 8001e54:	785a      	ldrb	r2, [r3, #1]
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <StartTask08+0xa8>)
 8001e58:	71da      	strb	r2, [r3, #7]
	  RTC_disp[8] = sdatestructureget.Date;
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <StartTask08+0x94>)
 8001e5c:	789a      	ldrb	r2, [r3, #2]
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <StartTask08+0xa8>)
 8001e60:	721a      	strb	r2, [r3, #8]
	  RTC_disp[9] = sdatestructureget.WeekDay;//    0x05; //stimestructureget.WeekDay;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <StartTask08+0x94>)
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <StartTask08+0xa8>)
 8001e68:	725a      	strb	r2, [r3, #9]

	  RTC_disp[10] = stimestructureget.Hours;
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <StartTask08+0x9c>)
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <StartTask08+0xa8>)
 8001e70:	729a      	strb	r2, [r3, #10]
	  RTC_disp[11] = stimestructureget.Minutes;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <StartTask08+0x9c>)
 8001e74:	785a      	ldrb	r2, [r3, #1]
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <StartTask08+0xa8>)
 8001e78:	72da      	strb	r2, [r3, #11]
	  RTC_disp[12] = stimestructureget.Seconds;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <StartTask08+0x9c>)
 8001e7c:	789a      	ldrb	r2, [r3, #2]
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <StartTask08+0xa8>)
 8001e80:	731a      	strb	r2, [r3, #12]
	  HAL_UART_Transmit(&huart1, RTC_disp, sizeof(RTC_disp),100);
 8001e82:	2364      	movs	r3, #100	; 0x64
 8001e84:	220e      	movs	r2, #14
 8001e86:	4909      	ldr	r1, [pc, #36]	; (8001eac <StartTask08+0xa8>)
 8001e88:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <StartTask08+0xac>)
 8001e8a:	f00d fe70 	bl	800fb6e <HAL_UART_Transmit>
	 // HAL_UART_Transmit(&huart1, RTC_dial, sizeof(RTC_dial),100);

    osDelay(1000);
 8001e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e92:	f012 fe7b 	bl	8014b8c <osDelay>
  {
 8001e96:	e7b9      	b.n	8001e0c <StartTask08+0x8>
 8001e98:	24006c7c 	.word	0x24006c7c
 8001e9c:	080183f8 	.word	0x080183f8
 8001ea0:	24006cd0 	.word	0x24006cd0
 8001ea4:	0801840c 	.word	0x0801840c
 8001ea8:	0801841c 	.word	0x0801841c
 8001eac:	24000034 	.word	0x24000034
 8001eb0:	2400703c 	.word	0x2400703c

08001eb4 <push>:
/* USER CODE BEGIN Application */
//=============== Ring buffer =====================


void push(uart_t *u, uint8_t data)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
	u->buffer[u->head] = data;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	709a      	strb	r2, [r3, #2]
	u->head++;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	701a      	strb	r2, [r3, #0]
	if (u->head >= MAX_BUFFER_SIZE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b3f      	cmp	r3, #63	; 0x3f
 8001ee0:	d902      	bls.n	8001ee8 <push+0x34>
	{
		u->head = 0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
	}
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <pop>:

uint8_t pop(uart_t *u)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	uint8_t data = u->buffer[u->tail];
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	785b      	ldrb	r3, [r3, #1]
 8001f00:	461a      	mov	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	789b      	ldrb	r3, [r3, #2]
 8001f08:	73fb      	strb	r3, [r7, #15]
	u->tail++;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	785b      	ldrb	r3, [r3, #1]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	705a      	strb	r2, [r3, #1]
	if (u->tail >= MAX_BUFFER_SIZE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	2b3f      	cmp	r3, #63	; 0x3f
 8001f1c:	d902      	bls.n	8001f24 <pop+0x30>
	{
		u->tail = 0;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	705a      	strb	r2, [r3, #1]
	}
	return data;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <isEmpty>:

uint8_t isEmpty(uart_t *u)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
	return u->head == u->tail;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	bf0c      	ite	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	2300      	movne	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_UART_RxCpltCallback+0x50>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10a      	bne.n	8001f80 <HAL_UART_RxCpltCallback+0x28>
	{
		push(&uart_1, rx1_data);  //save data to Ring buffer
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_UART_RxCpltCallback+0x54>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <HAL_UART_RxCpltCallback+0x58>)
 8001f72:	f7ff ff9f 	bl	8001eb4 <push>
		HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 8001f76:	2201      	movs	r2, #1
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <HAL_UART_RxCpltCallback+0x54>)
 8001f7a:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <HAL_UART_RxCpltCallback+0x5c>)
 8001f7c:	f00d fe8e 	bl	800fc9c <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART4)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <HAL_UART_RxCpltCallback+0x60>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d10a      	bne.n	8001fa0 <HAL_UART_RxCpltCallback+0x48>
	{
		push(&uart_4, rx4_data);  //save data to Ring buffer
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_UART_RxCpltCallback+0x64>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <HAL_UART_RxCpltCallback+0x68>)
 8001f92:	f7ff ff8f 	bl	8001eb4 <push>
		HAL_UART_Receive_IT(&huart4, &rx4_data, 1);
 8001f96:	2201      	movs	r2, #1
 8001f98:	4908      	ldr	r1, [pc, #32]	; (8001fbc <HAL_UART_RxCpltCallback+0x64>)
 8001f9a:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <HAL_UART_RxCpltCallback+0x6c>)
 8001f9c:	f00d fe7e 	bl	800fc9c <HAL_UART_Receive_IT>
	}

}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	24006bf8 	.word	0x24006bf8
 8001fb0:	24006bfc 	.word	0x24006bfc
 8001fb4:	2400703c 	.word	0x2400703c
 8001fb8:	40004c00 	.word	0x40004c00
 8001fbc:	24006b2c 	.word	0x24006b2c
 8001fc0:	24006a84 	.word	0x24006a84
 8001fc4:	240070cc 	.word	0x240070cc

08001fc8 <MX_GPIO_Init>:
     PC11   ------> SDMMC1_D3
     PC12   ------> SDMMC1_CK
     PD2   ------> SDMMC1_CMD
*/
void MX_GPIO_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fde:	4b96      	ldr	r3, [pc, #600]	; (8002238 <MX_GPIO_Init+0x270>)
 8001fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe4:	4a94      	ldr	r2, [pc, #592]	; (8002238 <MX_GPIO_Init+0x270>)
 8001fe6:	f043 0310 	orr.w	r3, r3, #16
 8001fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fee:	4b92      	ldr	r3, [pc, #584]	; (8002238 <MX_GPIO_Init+0x270>)
 8001ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffc:	4b8e      	ldr	r3, [pc, #568]	; (8002238 <MX_GPIO_Init+0x270>)
 8001ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002002:	4a8d      	ldr	r2, [pc, #564]	; (8002238 <MX_GPIO_Init+0x270>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800200c:	4b8a      	ldr	r3, [pc, #552]	; (8002238 <MX_GPIO_Init+0x270>)
 800200e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800201a:	4b87      	ldr	r3, [pc, #540]	; (8002238 <MX_GPIO_Init+0x270>)
 800201c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002020:	4a85      	ldr	r2, [pc, #532]	; (8002238 <MX_GPIO_Init+0x270>)
 8002022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800202a:	4b83      	ldr	r3, [pc, #524]	; (8002238 <MX_GPIO_Init+0x270>)
 800202c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	4b7f      	ldr	r3, [pc, #508]	; (8002238 <MX_GPIO_Init+0x270>)
 800203a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203e:	4a7e      	ldr	r2, [pc, #504]	; (8002238 <MX_GPIO_Init+0x270>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002048:	4b7b      	ldr	r3, [pc, #492]	; (8002238 <MX_GPIO_Init+0x270>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002056:	4b78      	ldr	r3, [pc, #480]	; (8002238 <MX_GPIO_Init+0x270>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205c:	4a76      	ldr	r2, [pc, #472]	; (8002238 <MX_GPIO_Init+0x270>)
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002066:	4b74      	ldr	r3, [pc, #464]	; (8002238 <MX_GPIO_Init+0x270>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002074:	4b70      	ldr	r3, [pc, #448]	; (8002238 <MX_GPIO_Init+0x270>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	4a6f      	ldr	r2, [pc, #444]	; (8002238 <MX_GPIO_Init+0x270>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002084:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <MX_GPIO_Init+0x270>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEY_GPIO_Port, KEY_Pin, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	2108      	movs	r1, #8
 8002096:	4869      	ldr	r0, [pc, #420]	; (800223c <MX_GPIO_Init+0x274>)
 8002098:	f006 f828 	bl	80080ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 800209c:	2201      	movs	r2, #1
 800209e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80020a2:	4866      	ldr	r0, [pc, #408]	; (800223c <MX_GPIO_Init+0x274>)
 80020a4:	f006 f822 	bl	80080ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Fire_lamp_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80020ae:	4864      	ldr	r0, [pc, #400]	; (8002240 <MX_GPIO_Init+0x278>)
 80020b0:	f006 f81c 	bl	80080ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 80020ba:	4862      	ldr	r0, [pc, #392]	; (8002244 <MX_GPIO_Init+0x27c>)
 80020bc:	f006 f816 	bl	80080ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	4860      	ldr	r0, [pc, #384]	; (8002248 <MX_GPIO_Init+0x280>)
 80020c6:	f006 f811 	bl	80080ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_CS_GPIO_Port, F_CS_Pin, GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	2140      	movs	r1, #64	; 0x40
 80020ce:	485d      	ldr	r0, [pc, #372]	; (8002244 <MX_GPIO_Init+0x27c>)
 80020d0:	f006 f80c 	bl	80080ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80020d4:	2308      	movs	r3, #8
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	4854      	ldr	r0, [pc, #336]	; (800223c <MX_GPIO_Init+0x274>)
 80020ec:	f005 fe36 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 80020f0:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80020f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	4850      	ldr	r0, [pc, #320]	; (8002248 <MX_GPIO_Init+0x280>)
 8002106:	f005 fe29 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800210a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800210e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002110:	2301      	movs	r3, #1
 8002112:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	4619      	mov	r1, r3
 8002122:	4846      	ldr	r0, [pc, #280]	; (800223c <MX_GPIO_Init+0x274>)
 8002124:	f005 fe1a 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Fire_lamp_Pin;
 8002128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Fire_lamp_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	483f      	ldr	r0, [pc, #252]	; (8002240 <MX_GPIO_Init+0x278>)
 8002142:	f005 fe0b 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214c:	2301      	movs	r3, #1
 800214e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002150:	2301      	movs	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4619      	mov	r1, r3
 800215e:	4838      	ldr	r0, [pc, #224]	; (8002240 <MX_GPIO_Init+0x278>)
 8002160:	f005 fdfc 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15;
 8002164:	f44f 4343 	mov.w	r3, #49920	; 0xc300
 8002168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4831      	ldr	r0, [pc, #196]	; (8002244 <MX_GPIO_Init+0x27c>)
 800217e:	f005 fded 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002188:	2300      	movs	r3, #0
 800218a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	4619      	mov	r1, r3
 8002196:	482b      	ldr	r0, [pc, #172]	; (8002244 <MX_GPIO_Init+0x27c>)
 8002198:	f005 fde0 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Test_LED_Pin;
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021a4:	2302      	movs	r3, #2
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Test_LED_GPIO_Port, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	4825      	ldr	r0, [pc, #148]	; (8002248 <MX_GPIO_Init+0x280>)
 80021b4:	f005 fdd2 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80021b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80021bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80021ca:	230c      	movs	r3, #12
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4619      	mov	r1, r3
 80021d4:	481c      	ldr	r0, [pc, #112]	; (8002248 <MX_GPIO_Init+0x280>)
 80021d6:	f005 fdc1 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Foot_Pin;
 80021da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Foot_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4817      	ldr	r0, [pc, #92]	; (800224c <MX_GPIO_Init+0x284>)
 80021f0:	f005 fdb4 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021f4:	2304      	movs	r3, #4
 80021f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002204:	230c      	movs	r3, #12
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	4619      	mov	r1, r3
 800220e:	480d      	ldr	r0, [pc, #52]	; (8002244 <MX_GPIO_Init+0x27c>)
 8002210:	f005 fda4 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_CS_Pin;
 8002214:	2340      	movs	r3, #64	; 0x40
 8002216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002218:	2301      	movs	r3, #1
 800221a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(F_CS_GPIO_Port, &GPIO_InitStruct);
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	4619      	mov	r1, r3
 800222a:	4806      	ldr	r0, [pc, #24]	; (8002244 <MX_GPIO_Init+0x27c>)
 800222c:	f005 fd96 	bl	8007d5c <HAL_GPIO_Init>

}
 8002230:	bf00      	nop
 8002232:	3730      	adds	r7, #48	; 0x30
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	58024400 	.word	0x58024400
 800223c:	58021000 	.word	0x58021000
 8002240:	58020400 	.word	0x58020400
 8002244:	58020c00 	.word	0x58020c00
 8002248:	58020800 	.word	0x58020800
 800224c:	58020000 	.word	0x58020000

08002250 <_write>:
void MX_FREERTOS_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

//printf, putchar, puts ?��?��?�� ?��출되?�� ?��?��
int _write(int fd, char *str, int len) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*)str, len);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	b29b      	uxth	r3, r3
 8002260:	4619      	mov	r1, r3
 8002262:	68b8      	ldr	r0, [r7, #8]
 8002264:	f014 f882 	bl	801636c <CDC_Transmit_FS>
	return len;
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <init_uart>:
	HAL_GPIO_WritePin(KEY_GPIO_Port,KEY_Pin,GPIO_PIN_RESET);
	HAL_Delay(Ldelay-1);
}

void init_uart(uart_t *u)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
	u->head = 0;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
	u->tail = 0;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	705a      	strb	r2, [r3, #1]
	memset(u->buffer, 0, sizeof(u->buffer));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3302      	adds	r3, #2
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f014 fe01 	bl	8016e96 <memset>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_Init();
 80022a2:	f003 fc8d 	bl	8005bc0 <HAL_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a6:	f003 fc8b 	bl	8005bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022aa:	f000 f86f 	bl	800238c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80022ae:	f000 f8ff 	bl	80024b0 <PeriphCommonClock_Config>
	RTC_DateTypeDef sdatestructureget  ;
	RTC_TimeTypeDef stimestructureget  ;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b2:	f7ff fe89 	bl	8001fc8 <MX_GPIO_Init>
  MX_RTC_Init();
 80022b6:	f000 fa6b 	bl	8002790 <MX_RTC_Init>
  MX_SPI1_Init();
 80022ba:	f000 fb61 	bl	8002980 <MX_SPI1_Init>
  MX_SPI4_Init();
 80022be:	f000 fbb5 	bl	8002a2c <MX_SPI4_Init>
  MX_TIM1_Init();
 80022c2:	f000 fed1 	bl	8003068 <MX_TIM1_Init>
  MX_UART4_Init();
 80022c6:	f000 ffbb 	bl	8003240 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80022ca:	f001 f805 	bl	80032d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80022ce:	f001 f84f 	bl	8003370 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 80022d2:	f7fe fab1 	bl	8000838 <MX_ADC3_Init>
  MX_ADC2_Init();
 80022d6:	f7fe fa49 	bl	800076c <MX_ADC2_Init>
  MX_DAC1_Init();
 80022da:	f7fe fc11 	bl	8000b00 <MX_DAC1_Init>
  MX_ADC1_Init();
 80022de:	f7fe f9cb 	bl	8000678 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80022e2:	f000 f92a 	bl	800253a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	init_uart(&uart_1);
 80022e6:	4820      	ldr	r0, [pc, #128]	; (8002368 <main+0xcc>)
 80022e8:	f7ff ffc3 	bl	8002272 <init_uart>
	init_uart(&uart_4);
 80022ec:	481f      	ldr	r0, [pc, #124]	; (800236c <main+0xd0>)
 80022ee:	f7ff ffc0 	bl	8002272 <init_uart>
	HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 80022f2:	2201      	movs	r2, #1
 80022f4:	491e      	ldr	r1, [pc, #120]	; (8002370 <main+0xd4>)
 80022f6:	481f      	ldr	r0, [pc, #124]	; (8002374 <main+0xd8>)
 80022f8:	f00d fcd0 	bl	800fc9c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &rx4_data, 1);
 80022fc:	2201      	movs	r2, #1
 80022fe:	491e      	ldr	r1, [pc, #120]	; (8002378 <main+0xdc>)
 8002300:	481e      	ldr	r0, [pc, #120]	; (800237c <main+0xe0>)
 8002302:	f00d fccb 	bl	800fc9c <HAL_UART_Receive_IT>

	printf("Hello \n\r");
 8002306:	481e      	ldr	r0, [pc, #120]	; (8002380 <main+0xe4>)
 8002308:	f014 fe28 	bl	8016f5c <iprintf>

	DF_Init(15);
 800230c:	200f      	movs	r0, #15
 800230e:	f000 faf5 	bl	80028fc <DF_Init>
	DF_PlayFromStart();
 8002312:	f000 fae7 	bl	80028e4 <DF_PlayFromStart>
	DF_Volume(15);
 8002316:	200f      	movs	r0, #15
 8002318:	f000 fb1e 	bl	8002958 <DF_Volume>

	  w25qxx_Init();
 800231c:	f003 f996 	bl	800564c <w25qxx_Init>

	  for(int i=100;i>0;i--){
 8002320:	2364      	movs	r3, #100	; 0x64
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002324:	e009      	b.n	800233a <main+0x9e>
	  	wdata[i] = i;
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	b2d9      	uxtb	r1, r3
 800232a:	4a16      	ldr	r2, [pc, #88]	; (8002384 <main+0xe8>)
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	4413      	add	r3, r2
 8002330:	460a      	mov	r2, r1
 8002332:	701a      	strb	r2, [r3, #0]
	  for(int i=100;i>0;i--){
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	3b01      	subs	r3, #1
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233c:	2b00      	cmp	r3, #0
 800233e:	dcf2      	bgt.n	8002326 <main+0x8a>
	  }
	  //W25qxx_Write(wdata, 0, 100);

	  W25qxx_EraseSector(0);
 8002340:	2000      	movs	r0, #0
 8002342:	f003 fa65 	bl	8005810 <W25qxx_EraseSector>
	  W25qxx_PageProgram(wdata, 0, 100);
 8002346:	2264      	movs	r2, #100	; 0x64
 8002348:	2100      	movs	r1, #0
 800234a:	480e      	ldr	r0, [pc, #56]	; (8002384 <main+0xe8>)
 800234c:	f003 faa6 	bl	800589c <W25qxx_PageProgram>
	  W25qxx_Read(rdata, 0, 100);
 8002350:	2264      	movs	r2, #100	; 0x64
 8002352:	2100      	movs	r1, #0
 8002354:	480c      	ldr	r0, [pc, #48]	; (8002388 <main+0xec>)
 8002356:	f003 faf3 	bl	8005940 <W25qxx_Read>

 	LCD_Test();
 800235a:	f001 f97b 	bl	8003654 <LCD_Test>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800235e:	f7fe ff3d 	bl	80011dc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002362:	f012 fbc0 	bl	8014ae6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002366:	e7fe      	b.n	8002366 <main+0xca>
 8002368:	24006bfc 	.word	0x24006bfc
 800236c:	24006a84 	.word	0x24006a84
 8002370:	24006bf8 	.word	0x24006bf8
 8002374:	2400703c 	.word	0x2400703c
 8002378:	24006b2c 	.word	0x24006b2c
 800237c:	240070cc 	.word	0x240070cc
 8002380:	08018420 	.word	0x08018420
 8002384:	240005fc 	.word	0x240005fc
 8002388:	240015fc 	.word	0x240015fc

0800238c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b09c      	sub	sp, #112	; 0x70
 8002390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002396:	224c      	movs	r2, #76	; 0x4c
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f014 fd7b 	bl	8016e96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2220      	movs	r2, #32
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f014 fd75 	bl	8016e96 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80023ac:	2002      	movs	r0, #2
 80023ae:	f007 f8e1 	bl	8009574 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <SystemClock_Config+0x118>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	4a3a      	ldr	r2, [pc, #232]	; (80024a4 <SystemClock_Config+0x118>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80023c2:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <SystemClock_Config+0x118>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <SystemClock_Config+0x11c>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023d4:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <SystemClock_Config+0x11c>)
 80023d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <SystemClock_Config+0x11c>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023e8:	bf00      	nop
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <SystemClock_Config+0x11c>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f6:	d1f8      	bne.n	80023ea <SystemClock_Config+0x5e>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80023f8:	f007 f8ac 	bl	8009554 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80023fc:	f003 fc60 	bl	8005cc0 <HAL_GetREVID>
 8002400:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <SystemClock_Config+0x120>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a29      	ldr	r2, [pc, #164]	; (80024ac <SystemClock_Config+0x120>)
 8002406:	f023 0318 	bic.w	r3, r3, #24
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <SystemClock_Config+0x120>)
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	f023 0303 	bic.w	r3, r3, #3
 8002414:	4a25      	ldr	r2, [pc, #148]	; (80024ac <SystemClock_Config+0x120>)
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800241c:	2305      	movs	r3, #5
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002426:	2301      	movs	r3, #1
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800242a:	2302      	movs	r3, #2
 800242c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800242e:	2302      	movs	r3, #2
 8002430:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002432:	2302      	movs	r3, #2
 8002434:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002436:	2320      	movs	r3, #32
 8002438:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800243a:	2302      	movs	r3, #2
 800243c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800243e:	2304      	movs	r3, #4
 8002440:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002442:	2302      	movs	r3, #2
 8002444:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002446:	230c      	movs	r3, #12
 8002448:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800244a:	2300      	movs	r3, #0
 800244c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002456:	4618      	mov	r0, r3
 8002458:	f007 fd1a 	bl	8009e90 <HAL_RCC_OscConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002462:	f000 f899 	bl	8002598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002466:	233f      	movs	r3, #63	; 0x3f
 8002468:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800246a:	2303      	movs	r3, #3
 800246c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002472:	2308      	movs	r3, #8
 8002474:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800247a:	2340      	movs	r3, #64	; 0x40
 800247c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800247e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002482:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002484:	2300      	movs	r3, #0
 8002486:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2102      	movs	r1, #2
 800248c:	4618      	mov	r0, r3
 800248e:	f008 f90f 	bl	800a6b0 <HAL_RCC_ClockConfig>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8002498:	f000 f87e 	bl	8002598 <Error_Handler>
  }
}
 800249c:	bf00      	nop
 800249e:	3770      	adds	r7, #112	; 0x70
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	58000400 	.word	0x58000400
 80024a8:	58024800 	.word	0x58024800
 80024ac:	58024400 	.word	0x58024400

080024b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b0b0      	sub	sp, #192	; 0xc0
 80024b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	22bc      	movs	r2, #188	; 0xbc
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f014 fcea 	bl	8016e96 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
 80024c2:	f44f 2342 	mov.w	r3, #794624	; 0xc2000
 80024c6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80024c8:	2302      	movs	r3, #2
 80024ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80024cc:	230c      	movs	r3, #12
 80024ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80024d0:	2304      	movs	r3, #4
 80024d2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80024d4:	2302      	movs	r3, #2
 80024d6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80024d8:	2302      	movs	r3, #2
 80024da:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80024dc:	23c0      	movs	r3, #192	; 0xc0
 80024de:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80024e0:	2320      	movs	r3, #32
 80024e2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 80024e8:	2302      	movs	r3, #2
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 80024ec:	230c      	movs	r3, #12
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 5;
 80024f0:	2305      	movs	r3, #5
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80024f4:	2303      	movs	r3, #3
 80024f6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80024f8:	2302      	movs	r3, #2
 80024fa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80024fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002500:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002506:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 800250c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002510:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002512:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	4618      	mov	r0, r3
 8002524:	f008 fc92 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <PeriphCommonClock_Config+0x82>
  {
    Error_Handler();
 800252e:	f000 f833 	bl	8002598 <Error_Handler>
  }
}
 8002532:	bf00      	nop
 8002534:	37c0      	adds	r7, #192	; 0xc0
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2105      	movs	r1, #5
 8002542:	2025      	movs	r0, #37	; 0x25
 8002544:	f004 fd2e 	bl	8006fa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002548:	2025      	movs	r0, #37	; 0x25
 800254a:	f004 fd45 	bl	8006fd8 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2105      	movs	r1, #5
 8002552:	2027      	movs	r0, #39	; 0x27
 8002554:	f004 fd26 	bl	8006fa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002558:	2027      	movs	r0, #39	; 0x27
 800255a:	f004 fd3d 	bl	8006fd8 <HAL_NVIC_EnableIRQ>
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2105      	movs	r1, #5
 8002562:	2034      	movs	r0, #52	; 0x34
 8002564:	f004 fd1e 	bl	8006fa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002568:	2034      	movs	r0, #52	; 0x34
 800256a:	f004 fd35 	bl	8006fd8 <HAL_NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a04      	ldr	r2, [pc, #16]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002586:	f003 fb57 	bl	8005c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40014800 	.word	0x40014800

08002598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <Error_Handler+0x8>
	...

080025a4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <MX_QUADSPI_Init+0x50>)
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <MX_QUADSPI_Init+0x54>)
 80025ac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2-1;
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_QUADSPI_Init+0x50>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_QUADSPI_Init+0x50>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_QUADSPI_Init+0x50>)
 80025bc:	2210      	movs	r2, #16
 80025be:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23-1;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_QUADSPI_Init+0x50>)
 80025c2:	2216      	movs	r2, #22
 80025c4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_QUADSPI_Init+0x50>)
 80025c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025cc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_3;
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_QUADSPI_Init+0x50>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <MX_QUADSPI_Init+0x50>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_QUADSPI_Init+0x50>)
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80025e0:	4804      	ldr	r0, [pc, #16]	; (80025f4 <MX_QUADSPI_Init+0x50>)
 80025e2:	f007 f811 	bl	8009608 <HAL_QSPI_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80025ec:	f7ff ffd4 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	24006d94 	.word	0x24006d94
 80025f8:	52005000 	.word	0x52005000

080025fc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b0ba      	sub	sp, #232	; 0xe8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002614:	f107 0318 	add.w	r3, r7, #24
 8002618:	22bc      	movs	r2, #188	; 0xbc
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f014 fc3a 	bl	8016e96 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a55      	ldr	r2, [pc, #340]	; (800277c <HAL_QSPI_MspInit+0x180>)
 8002628:	4293      	cmp	r3, r2
 800262a:	f040 80a3 	bne.w	8002774 <HAL_QSPI_MspInit+0x178>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800262e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002632:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8002634:	2300      	movs	r3, #0
 8002636:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002638:	f107 0318 	add.w	r3, r7, #24
 800263c:	4618      	mov	r0, r3
 800263e:	f008 fc05 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8002648:	f7ff ffa6 	bl	8002598 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800264c:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 800264e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002652:	4a4b      	ldr	r2, [pc, #300]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800265c:	4b48      	ldr	r3, [pc, #288]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 800265e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800266a:	4b45      	ldr	r3, [pc, #276]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 800266c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002670:	4a43      	ldr	r2, [pc, #268]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 8002672:	f043 0310 	orr.w	r3, r3, #16
 8002676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 800267c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 800268a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268e:	4a3c      	ldr	r2, [pc, #240]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a6:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 80026a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ac:	4a34      	ldr	r2, [pc, #208]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 80026ae:	f043 0308 	orr.w	r3, r3, #8
 80026b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b6:	4b32      	ldr	r3, [pc, #200]	; (8002780 <HAL_QSPI_MspInit+0x184>)
 80026b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026c4:	2304      	movs	r3, #4
 80026c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80026dc:	2309      	movs	r3, #9
 80026de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026e6:	4619      	mov	r1, r3
 80026e8:	4826      	ldr	r0, [pc, #152]	; (8002784 <HAL_QSPI_MspInit+0x188>)
 80026ea:	f005 fb37 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026ee:	2304      	movs	r3, #4
 80026f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002706:	2309      	movs	r3, #9
 8002708:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002710:	4619      	mov	r1, r3
 8002712:	481d      	ldr	r0, [pc, #116]	; (8002788 <HAL_QSPI_MspInit+0x18c>)
 8002714:	f005 fb22 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002718:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800271c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002732:	2309      	movs	r3, #9
 8002734:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002738:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800273c:	4619      	mov	r1, r3
 800273e:	4813      	ldr	r0, [pc, #76]	; (800278c <HAL_QSPI_MspInit+0x190>)
 8002740:	f005 fb0c 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002744:	2340      	movs	r3, #64	; 0x40
 8002746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002756:	2303      	movs	r3, #3
 8002758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800275c:	230a      	movs	r3, #10
 800275e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002766:	4619      	mov	r1, r3
 8002768:	4807      	ldr	r0, [pc, #28]	; (8002788 <HAL_QSPI_MspInit+0x18c>)
 800276a:	f005 faf7 	bl	8007d5c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB6_FMP);
 800276e:	2010      	movs	r0, #16
 8002770:	f005 fcf0 	bl	8008154 <HAL_I2CEx_EnableFastModePlus>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002774:	bf00      	nop
 8002776:	37e8      	adds	r7, #232	; 0xe8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	52005000 	.word	0x52005000
 8002780:	58024400 	.word	0x58024400
 8002784:	58021000 	.word	0x58021000
 8002788:	58020400 	.word	0x58020400
 800278c:	58020c00 	.word	0x58020c00

08002790 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b090      	sub	sp, #64	; 0x40
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	 RTC_TimeTypeDef 	sTime = {0};
 8002796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]
	 RTC_DateTypeDef 	sDate = {0};
 80027a6:	2300      	movs	r3, #0
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
	 RTC_AlarmTypeDef 	sAlarm = {0};
 80027aa:	463b      	mov	r3, r7
 80027ac:	2228      	movs	r2, #40	; 0x28
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f014 fb70 	bl	8016e96 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <MX_RTC_Init+0x70>)
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <MX_RTC_Init+0x74>)
 80027ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80027bc:	4b10      	ldr	r3, [pc, #64]	; (8002800 <MX_RTC_Init+0x70>)
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <MX_RTC_Init+0x70>)
 80027c4:	227f      	movs	r2, #127	; 0x7f
 80027c6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027c8:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <MX_RTC_Init+0x70>)
 80027ca:	22ff      	movs	r2, #255	; 0xff
 80027cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MX_RTC_Init+0x70>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <MX_RTC_Init+0x70>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <MX_RTC_Init+0x70>)
 80027dc:	2200      	movs	r2, #0
 80027de:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <MX_RTC_Init+0x70>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027e6:	4806      	ldr	r0, [pc, #24]	; (8002800 <MX_RTC_Init+0x70>)
 80027e8:	f00a fcb6 	bl	800d158 <HAL_RTC_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80027f2:	f7ff fed1 	bl	8002598 <Error_Handler>
    {
      Error_Handler();
    }
*/     /* USER CODE END RTC_Init 2;*/

}
 80027f6:	bf00      	nop
 80027f8:	3740      	adds	r7, #64	; 0x40
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	24006de0 	.word	0x24006de0
 8002804:	58004000 	.word	0x58004000

08002808 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b0b2      	sub	sp, #200	; 0xc8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	22bc      	movs	r2, #188	; 0xbc
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f014 fb3c 	bl	8016e96 <memset>
  if(rtcHandle->Instance==RTC)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <HAL_RTC_MspInit+0x58>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d116      	bne.n	8002856 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002828:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800282c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800282e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002836:	f107 030c 	add.w	r3, r7, #12
 800283a:	4618      	mov	r0, r3
 800283c:	f008 fb06 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002846:	f7ff fea7 	bl	8002598 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RTC_MspInit+0x5c>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a05      	ldr	r2, [pc, #20]	; (8002864 <HAL_RTC_MspInit+0x5c>)
 8002850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002856:	bf00      	nop
 8002858:	37c8      	adds	r7, #200	; 0xc8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	58004000 	.word	0x58004000
 8002864:	58024400 	.word	0x58024400

08002868 <Send_cmd>:
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0


void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
 8002872:	460b      	mov	r3, r1
 8002874:	71bb      	strb	r3, [r7, #6]
 8002876:	4613      	mov	r3, r2
 8002878:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	b29a      	uxth	r2, r3
 800287e:	79bb      	ldrb	r3, [r7, #6]
 8002880:	b29b      	uxth	r3, r3
 8002882:	4413      	add	r3, r2
 8002884:	b29a      	uxth	r2, r3
 8002886:	797b      	ldrb	r3, [r7, #5]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4413      	add	r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	f203 1305 	addw	r3, r3, #261	; 0x105
 8002892:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 8002894:	8afb      	ldrh	r3, [r7, #22]
 8002896:	425b      	negs	r3, r3
 8002898:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 800289a:	237e      	movs	r3, #126	; 0x7e
 800289c:	733b      	strb	r3, [r7, #12]
 800289e:	23ff      	movs	r3, #255	; 0xff
 80028a0:	737b      	strb	r3, [r7, #13]
 80028a2:	2306      	movs	r3, #6
 80028a4:	73bb      	strb	r3, [r7, #14]
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	2300      	movs	r3, #0
 80028ac:	743b      	strb	r3, [r7, #16]
 80028ae:	79bb      	ldrb	r3, [r7, #6]
 80028b0:	747b      	strb	r3, [r7, #17]
 80028b2:	797b      	ldrb	r3, [r7, #5]
 80028b4:	74bb      	strb	r3, [r7, #18]
 80028b6:	8afb      	ldrh	r3, [r7, #22]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	74fb      	strb	r3, [r7, #19]
 80028c0:	8afb      	ldrh	r3, [r7, #22]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	753b      	strb	r3, [r7, #20]
 80028c6:	23ef      	movs	r3, #239	; 0xef
 80028c8:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart3, CmdSequence, 10, 100);
 80028ca:	f107 010c 	add.w	r1, r7, #12
 80028ce:	2364      	movs	r3, #100	; 0x64
 80028d0:	220a      	movs	r2, #10
 80028d2:	4803      	ldr	r0, [pc, #12]	; (80028e0 <Send_cmd+0x78>)
 80028d4:	f00d f94b 	bl	800fb6e <HAL_UART_Transmit>
}
 80028d8:	bf00      	nop
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	24006e04 	.word	0x24006e04

080028e4 <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 80028e8:	2201      	movs	r2, #1
 80028ea:	2100      	movs	r1, #0
 80028ec:	2003      	movs	r0, #3
 80028ee:	f7ff ffbb 	bl	8002868 <Send_cmd>
  HAL_Delay(200);
 80028f2:	20c8      	movs	r0, #200	; 0xc8
 80028f4:	f003 f9c0 	bl	8005c78 <HAL_Delay>
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}

080028fc <DF_Init>:


void DF_Init (uint8_t volume)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 8002906:	2202      	movs	r2, #2
 8002908:	2100      	movs	r1, #0
 800290a:	203f      	movs	r0, #63	; 0x3f
 800290c:	f7ff ffac 	bl	8002868 <Send_cmd>
	HAL_Delay(200);
 8002910:	20c8      	movs	r0, #200	; 0xc8
 8002912:	f003 f9b1 	bl	8005c78 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	461a      	mov	r2, r3
 800291a:	2100      	movs	r1, #0
 800291c:	2006      	movs	r0, #6
 800291e:	f7ff ffa3 	bl	8002868 <Send_cmd>
	HAL_Delay(500);
 8002922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002926:	f003 f9a7 	bl	8005c78 <HAL_Delay>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <DF_Play>:

void DF_Play (uint16_t num)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	80fb      	strh	r3, [r7, #6]
	Send_cmd(0x03, 0x00, num);
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	2100      	movs	r1, #0
 8002944:	2003      	movs	r0, #3
 8002946:	f7ff ff8f 	bl	8002868 <Send_cmd>
	HAL_Delay(200);
 800294a:	20c8      	movs	r0, #200	; 0xc8
 800294c:	f003 f994 	bl	8005c78 <HAL_Delay>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <DF_Volume>:
	Send_cmd(0x12, 0x00, num);
	HAL_Delay(200);
}

//0x06 set volume 0-30
void DF_Volume (uint16_t volume) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
	Send_cmd(0x06, 0x00, volume);
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	2100      	movs	r1, #0
 800296a:	2006      	movs	r0, #6
 800296c:	f7ff ff7c 	bl	8002868 <Send_cmd>
	HAL_Delay(200);
 8002970:	20c8      	movs	r0, #200	; 0xc8
 8002972:	f003 f981 	bl	8005c78 <HAL_Delay>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <MX_SPI1_Init+0xa4>)
 8002986:	4a28      	ldr	r2, [pc, #160]	; (8002a28 <MX_SPI1_Init+0xa8>)
 8002988:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800298a:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <MX_SPI1_Init+0xa4>)
 800298c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002990:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <MX_SPI1_Init+0xa4>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <MX_SPI1_Init+0xa4>)
 800299a:	2207      	movs	r2, #7
 800299c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029a4:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029aa:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <MX_SPI1_Init+0xa4>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <MX_SPI1_Init+0xa4>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <MX_SPI1_Init+0xa4>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a0e:	4805      	ldr	r0, [pc, #20]	; (8002a24 <MX_SPI1_Init+0xa4>)
 8002a10:	f00a feb8 	bl	800d784 <HAL_SPI_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8002a1a:	f7ff fdbd 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	24006f1c 	.word	0x24006f1c
 8002a28:	40013000 	.word	0x40013000

08002a2c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002a30:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a32:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <MX_SPI4_Init+0xac>)
 8002a34:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002a36:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a3c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8002a3e:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a40:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002a44:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a46:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a48:	2207      	movs	r2, #7
 8002a4a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a4c:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002a58:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a5e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a60:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a66:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a6e:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a86:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <MX_SPI4_Init+0xa8>)
 8002ac0:	f00a fe60 	bl	800d784 <HAL_SPI_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8002aca:	f7ff fd65 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	24006e94 	.word	0x24006e94
 8002ad8:	40013400 	.word	0x40013400

08002adc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b0bc      	sub	sp, #240	; 0xf0
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af4:	f107 0320 	add.w	r3, r7, #32
 8002af8:	22bc      	movs	r2, #188	; 0xbc
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f014 f9ca 	bl	8016e96 <memset>
  if(spiHandle->Instance==SPI1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a53      	ldr	r2, [pc, #332]	; (8002c54 <HAL_SPI_MspInit+0x178>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d166      	bne.n	8002bda <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b10:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b16:	f107 0320 	add.w	r3, r7, #32
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f008 f996 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002b26:	f7ff fd37 	bl	8002598 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b2a:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b30:	4a49      	ldr	r2, [pc, #292]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002b32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4e:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002b50:	f043 0308 	orr.w	r3, r3, #8
 8002b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b58:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6c:	4a3a      	ldr	r2, [pc, #232]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b76:	4b38      	ldr	r3, [pc, #224]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b9c:	2305      	movs	r3, #5
 8002b9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	482c      	ldr	r0, [pc, #176]	; (8002c5c <HAL_SPI_MspInit+0x180>)
 8002baa:	f005 f8d7 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002bae:	2318      	movs	r3, #24
 8002bb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bc6:	2305      	movs	r3, #5
 8002bc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bcc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4823      	ldr	r0, [pc, #140]	; (8002c60 <HAL_SPI_MspInit+0x184>)
 8002bd4:	f005 f8c2 	bl	8007d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002bd8:	e038      	b.n	8002c4c <HAL_SPI_MspInit+0x170>
  else if(spiHandle->Instance==SPI4)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <HAL_SPI_MspInit+0x188>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d133      	bne.n	8002c4c <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bea:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002bec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bf0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c08:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002c0a:	f043 0310 	orr.w	r3, r3, #16
 8002c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_SPI_MspInit+0x17c>)
 8002c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002c20:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002c24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002c3a:	2305      	movs	r3, #5
 8002c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c44:	4619      	mov	r1, r3
 8002c46:	4808      	ldr	r0, [pc, #32]	; (8002c68 <HAL_SPI_MspInit+0x18c>)
 8002c48:	f005 f888 	bl	8007d5c <HAL_GPIO_Init>
}
 8002c4c:	bf00      	nop
 8002c4e:	37f0      	adds	r7, #240	; 0xf0
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40013000 	.word	0x40013000
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	58020c00 	.word	0x58020c00
 8002c60:	58020400 	.word	0x58020400
 8002c64:	40013400 	.word	0x40013400
 8002c68:	58021000 	.word	0x58021000

08002c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_MspInit+0x38>)
 8002c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_MspInit+0x38>)
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_MspInit+0x38>)
 8002c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	210f      	movs	r1, #15
 8002c94:	f06f 0001 	mvn.w	r0, #1
 8002c98:	f004 f984 	bl	8006fa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	58024400 	.word	0x58024400

08002ca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08e      	sub	sp, #56	; 0x38
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b0f      	cmp	r3, #15
 8002cb4:	d844      	bhi.n	8002d40 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	2076      	movs	r0, #118	; 0x76
 8002cbc:	f004 f972 	bl	8006fa4 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002cc0:	2076      	movs	r0, #118	; 0x76
 8002cc2:	f004 f989 	bl	8006fd8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_InitTick+0xb0>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002ccc:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_InitTick+0xb4>)
 8002cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cd2:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <HAL_InitTick+0xb4>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <HAL_InitTick+0xb4>)
 8002cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cea:	f107 020c 	add.w	r2, r7, #12
 8002cee:	f107 0310 	add.w	r3, r7, #16
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f008 f867 	bl	800adc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002cfa:	f008 f84f 	bl	800ad9c <HAL_RCC_GetPCLK2Freq>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <HAL_InitTick+0xb8>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	0c9b      	lsrs	r3, r3, #18
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_InitTick+0xbc>)
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_InitTick+0xc0>)
 8002d16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_InitTick+0xbc>)
 8002d1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d1e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002d20:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <HAL_InitTick+0xbc>)
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_InitTick+0xbc>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <HAL_InitTick+0xbc>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002d32:	480c      	ldr	r0, [pc, #48]	; (8002d64 <HAL_InitTick+0xbc>)
 8002d34:	f00b fde1 	bl	800e8fa <HAL_TIM_Base_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d107      	bne.n	8002d4e <HAL_InitTick+0xa6>
 8002d3e:	e001      	b.n	8002d44 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e005      	b.n	8002d50 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002d44:	4807      	ldr	r0, [pc, #28]	; (8002d64 <HAL_InitTick+0xbc>)
 8002d46:	f00b fe39 	bl	800e9bc <HAL_TIM_Base_Start_IT>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	e000      	b.n	8002d50 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3738      	adds	r7, #56	; 0x38
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	24000128 	.word	0x24000128
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	431bde83 	.word	0x431bde83
 8002d64:	24006fa4 	.word	0x24006fa4
 8002d68:	40014800 	.word	0x40014800

08002d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <NMI_Handler+0x4>

08002d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d76:	e7fe      	b.n	8002d76 <HardFault_Handler+0x4>

08002d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <MemManage_Handler+0x4>

08002d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d82:	e7fe      	b.n	8002d82 <BusFault_Handler+0x4>

08002d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d88:	e7fe      	b.n	8002d88 <UsageFault_Handler+0x4>

08002d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d9c:	4802      	ldr	r0, [pc, #8]	; (8002da8 <USART1_IRQHandler+0x10>)
 8002d9e:	f00c ffc3 	bl	800fd28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2400703c 	.word	0x2400703c

08002dac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002db0:	4802      	ldr	r0, [pc, #8]	; (8002dbc <USART3_IRQHandler+0x10>)
 8002db2:	f00c ffb9 	bl	800fd28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	24006e04 	.word	0x24006e04

08002dc0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <UART4_IRQHandler+0x10>)
 8002dc6:	f00c ffaf 	bl	800fd28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	240070cc 	.word	0x240070cc

08002dd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <OTG_FS_IRQHandler+0x10>)
 8002dda:	f005 fb36 	bl	800844a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	24008684 	.word	0x24008684

08002de8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <TIM17_IRQHandler+0x10>)
 8002dee:	f00b feac 	bl	800eb4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	24006fa4 	.word	0x24006fa4

08002dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
	return 1;
 8002e00:	2301      	movs	r3, #1
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_kill>:

int _kill(int pid, int sig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e16:	f013 ff0d 	bl	8016c34 <__errno>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2216      	movs	r2, #22
 8002e1e:	601a      	str	r2, [r3, #0]
	return -1;
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <_exit>:

void _exit (int status)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ffe7 	bl	8002e0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e3e:	e7fe      	b.n	8002e3e <_exit+0x12>

08002e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e00a      	b.n	8002e68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e52:	f3af 8000 	nop.w
 8002e56:	4601      	mov	r1, r0
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	60ba      	str	r2, [r7, #8]
 8002e5e:	b2ca      	uxtb	r2, r1
 8002e60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	dbf0      	blt.n	8002e52 <_read+0x12>
	}

return len;
 8002e70:	687b      	ldr	r3, [r7, #4]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
	return -1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ea2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <_isatty>:

int _isatty(int file)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
	return 1;
 8002eba:	2301      	movs	r3, #1
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eec:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <_sbrk+0x5c>)
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <_sbrk+0x60>)
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <_sbrk+0x64>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <_sbrk+0x64>)
 8002f02:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <_sbrk+0x68>)
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d207      	bcs.n	8002f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f14:	f013 fe8e 	bl	8016c34 <__errno>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f22:	e009      	b.n	8002f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <_sbrk+0x64>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <_sbrk+0x64>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <_sbrk+0x64>)
 8002f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f36:	68fb      	ldr	r3, [r7, #12]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	24080000 	.word	0x24080000
 8002f44:	00002000 	.word	0x00002000
 8002f48:	240025fc 	.word	0x240025fc
 8002f4c:	24008aa0 	.word	0x24008aa0

08002f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f54:	4b39      	ldr	r3, [pc, #228]	; (800303c <SystemInit+0xec>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	4a38      	ldr	r2, [pc, #224]	; (800303c <SystemInit+0xec>)
 8002f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <SystemInit+0xf0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	2b06      	cmp	r3, #6
 8002f6e:	d807      	bhi.n	8002f80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f70:	4b33      	ldr	r3, [pc, #204]	; (8003040 <SystemInit+0xf0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 030f 	bic.w	r3, r3, #15
 8002f78:	4a31      	ldr	r2, [pc, #196]	; (8003040 <SystemInit+0xf0>)
 8002f7a:	f043 0307 	orr.w	r3, r3, #7
 8002f7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f80:	4b30      	ldr	r3, [pc, #192]	; (8003044 <SystemInit+0xf4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2f      	ldr	r2, [pc, #188]	; (8003044 <SystemInit+0xf4>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <SystemInit+0xf4>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f92:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <SystemInit+0xf4>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	492b      	ldr	r1, [pc, #172]	; (8003044 <SystemInit+0xf4>)
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <SystemInit+0xf8>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f9e:	4b28      	ldr	r3, [pc, #160]	; (8003040 <SystemInit+0xf0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <SystemInit+0xf0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 030f 	bic.w	r3, r3, #15
 8002fb2:	4a23      	ldr	r2, [pc, #140]	; (8003040 <SystemInit+0xf0>)
 8002fb4:	f043 0307 	orr.w	r3, r3, #7
 8002fb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002fba:	4b22      	ldr	r3, [pc, #136]	; (8003044 <SystemInit+0xf4>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <SystemInit+0xf4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <SystemInit+0xf4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <SystemInit+0xf4>)
 8002fce:	4a1f      	ldr	r2, [pc, #124]	; (800304c <SystemInit+0xfc>)
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <SystemInit+0xf4>)
 8002fd4:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <SystemInit+0x100>)
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <SystemInit+0xf4>)
 8002fda:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <SystemInit+0x104>)
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fde:	4b19      	ldr	r3, [pc, #100]	; (8003044 <SystemInit+0xf4>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fe4:	4b17      	ldr	r3, [pc, #92]	; (8003044 <SystemInit+0xf4>)
 8002fe6:	4a1b      	ldr	r2, [pc, #108]	; (8003054 <SystemInit+0x104>)
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <SystemInit+0xf4>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <SystemInit+0xf4>)
 8002ff2:	4a18      	ldr	r2, [pc, #96]	; (8003054 <SystemInit+0x104>)
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <SystemInit+0xf4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <SystemInit+0xf4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a10      	ldr	r2, [pc, #64]	; (8003044 <SystemInit+0xf4>)
 8003002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003006:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <SystemInit+0xf4>)
 800300a:	2200      	movs	r2, #0
 800300c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <SystemInit+0x108>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <SystemInit+0x10c>)
 8003014:	4013      	ands	r3, r2
 8003016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800301a:	d202      	bcs.n	8003022 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <SystemInit+0x110>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <SystemInit+0x114>)
 8003024:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003028:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <SystemInit+0xec>)
 800302c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003030:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00
 8003040:	52002000 	.word	0x52002000
 8003044:	58024400 	.word	0x58024400
 8003048:	eaf6ed7f 	.word	0xeaf6ed7f
 800304c:	02020200 	.word	0x02020200
 8003050:	01ff0000 	.word	0x01ff0000
 8003054:	01010280 	.word	0x01010280
 8003058:	5c001000 	.word	0x5c001000
 800305c:	ffff0000 	.word	0xffff0000
 8003060:	51008108 	.word	0x51008108
 8003064:	52004000 	.word	0x52004000

08003068 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b096      	sub	sp, #88	; 0x58
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800306e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800307a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	611a      	str	r2, [r3, #16]
 800308a:	615a      	str	r2, [r3, #20]
 800308c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	222c      	movs	r2, #44	; 0x2c
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f013 fefe 	bl	8016e96 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800309a:	4b38      	ldr	r3, [pc, #224]	; (800317c <MX_TIM1_Init+0x114>)
 800309c:	4a38      	ldr	r2, [pc, #224]	; (8003180 <MX_TIM1_Init+0x118>)
 800309e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 80030a0:	4b36      	ldr	r3, [pc, #216]	; (800317c <MX_TIM1_Init+0x114>)
 80030a2:	2277      	movs	r2, #119	; 0x77
 80030a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a6:	4b35      	ldr	r3, [pc, #212]	; (800317c <MX_TIM1_Init+0x114>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80030ac:	4b33      	ldr	r3, [pc, #204]	; (800317c <MX_TIM1_Init+0x114>)
 80030ae:	2263      	movs	r2, #99	; 0x63
 80030b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b2:	4b32      	ldr	r3, [pc, #200]	; (800317c <MX_TIM1_Init+0x114>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030b8:	4b30      	ldr	r3, [pc, #192]	; (800317c <MX_TIM1_Init+0x114>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030be:	4b2f      	ldr	r3, [pc, #188]	; (800317c <MX_TIM1_Init+0x114>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030c4:	482d      	ldr	r0, [pc, #180]	; (800317c <MX_TIM1_Init+0x114>)
 80030c6:	f00b fce9 	bl	800ea9c <HAL_TIM_PWM_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80030d0:	f7ff fa62 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80030e4:	4619      	mov	r1, r3
 80030e6:	4825      	ldr	r0, [pc, #148]	; (800317c <MX_TIM1_Init+0x114>)
 80030e8:	f00c fba8 	bl	800f83c <HAL_TIMEx_MasterConfigSynchronization>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80030f2:	f7ff fa51 	bl	8002598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030f6:	2360      	movs	r3, #96	; 0x60
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030fe:	2300      	movs	r3, #0
 8003100:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003102:	2308      	movs	r3, #8
 8003104:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003116:	2204      	movs	r2, #4
 8003118:	4619      	mov	r1, r3
 800311a:	4818      	ldr	r0, [pc, #96]	; (800317c <MX_TIM1_Init+0x114>)
 800311c:	f00b fe34 	bl	800ed88 <HAL_TIM_PWM_ConfigChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003126:	f7ff fa37 	bl	8002598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800313e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003142:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800314c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	4619      	mov	r1, r3
 800315e:	4807      	ldr	r0, [pc, #28]	; (800317c <MX_TIM1_Init+0x114>)
 8003160:	f00c fbf4 	bl	800f94c <HAL_TIMEx_ConfigBreakDeadTime>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800316a:	f7ff fa15 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800316e:	4803      	ldr	r0, [pc, #12]	; (800317c <MX_TIM1_Init+0x114>)
 8003170:	f000 f82a 	bl	80031c8 <HAL_TIM_MspPostInit>

}
 8003174:	bf00      	nop
 8003176:	3758      	adds	r7, #88	; 0x58
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	24006ff0 	.word	0x24006ff0
 8003180:	40010000 	.word	0x40010000

08003184 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10e      	bne.n	80031b4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_TIM_PWM_MspInit+0x40>)
 8003198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800319c:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_TIM_PWM_MspInit+0x40>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <HAL_TIM_PWM_MspInit+0x40>)
 80031a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	40010000 	.word	0x40010000
 80031c4:	58024400 	.word	0x58024400

080031c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 030c 	add.w	r3, r7, #12
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a13      	ldr	r2, [pc, #76]	; (8003234 <HAL_TIM_MspPostInit+0x6c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d11f      	bne.n	800322a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_TIM_MspPostInit+0x70>)
 80031ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f0:	4a11      	ldr	r2, [pc, #68]	; (8003238 <HAL_TIM_MspPostInit+0x70>)
 80031f2:	f043 0310 	orr.w	r3, r3, #16
 80031f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_TIM_MspPostInit+0x70>)
 80031fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800320c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800321a:	2301      	movs	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	4619      	mov	r1, r3
 8003224:	4805      	ldr	r0, [pc, #20]	; (800323c <HAL_TIM_MspPostInit+0x74>)
 8003226:	f004 fd99 	bl	8007d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800322a:	bf00      	nop
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40010000 	.word	0x40010000
 8003238:	58024400 	.word	0x58024400
 800323c:	58021000 	.word	0x58021000

08003240 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <MX_UART4_Init+0x90>)
 8003246:	4a23      	ldr	r2, [pc, #140]	; (80032d4 <MX_UART4_Init+0x94>)
 8003248:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <MX_UART4_Init+0x90>)
 800324c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003250:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <MX_UART4_Init+0x90>)
 8003254:	2200      	movs	r2, #0
 8003256:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <MX_UART4_Init+0x90>)
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800325e:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <MX_UART4_Init+0x90>)
 8003260:	2200      	movs	r2, #0
 8003262:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <MX_UART4_Init+0x90>)
 8003266:	220c      	movs	r2, #12
 8003268:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800326a:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <MX_UART4_Init+0x90>)
 800326c:	2200      	movs	r2, #0
 800326e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <MX_UART4_Init+0x90>)
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <MX_UART4_Init+0x90>)
 8003278:	2200      	movs	r2, #0
 800327a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <MX_UART4_Init+0x90>)
 800327e:	2200      	movs	r2, #0
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <MX_UART4_Init+0x90>)
 8003284:	2200      	movs	r2, #0
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003288:	4811      	ldr	r0, [pc, #68]	; (80032d0 <MX_UART4_Init+0x90>)
 800328a:	f00c fc20 	bl	800face <HAL_UART_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003294:	f7ff f980 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003298:	2100      	movs	r1, #0
 800329a:	480d      	ldr	r0, [pc, #52]	; (80032d0 <MX_UART4_Init+0x90>)
 800329c:	f00e fb3f 	bl	801191e <HAL_UARTEx_SetTxFifoThreshold>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80032a6:	f7ff f977 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032aa:	2100      	movs	r1, #0
 80032ac:	4808      	ldr	r0, [pc, #32]	; (80032d0 <MX_UART4_Init+0x90>)
 80032ae:	f00e fb74 	bl	801199a <HAL_UARTEx_SetRxFifoThreshold>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80032b8:	f7ff f96e 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80032bc:	4804      	ldr	r0, [pc, #16]	; (80032d0 <MX_UART4_Init+0x90>)
 80032be:	f00e faf5 	bl	80118ac <HAL_UARTEx_DisableFifoMode>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80032c8:	f7ff f966 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	240070cc 	.word	0x240070cc
 80032d4:	40004c00 	.word	0x40004c00

080032d8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <MX_USART1_UART_Init+0x94>)
 80032e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032e2:	4b21      	ldr	r3, [pc, #132]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032ea:	4b1f      	ldr	r3, [pc, #124]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032f6:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032fc:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <MX_USART1_UART_Init+0x90>)
 80032fe:	220c      	movs	r2, #12
 8003300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <MX_USART1_UART_Init+0x90>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800330e:	4b16      	ldr	r3, [pc, #88]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003314:	4b14      	ldr	r3, [pc, #80]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <MX_USART1_UART_Init+0x90>)
 800331c:	2200      	movs	r2, #0
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003320:	4811      	ldr	r0, [pc, #68]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003322:	f00c fbd4 	bl	800face <HAL_UART_Init>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800332c:	f7ff f934 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003330:	2100      	movs	r1, #0
 8003332:	480d      	ldr	r0, [pc, #52]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003334:	f00e faf3 	bl	801191e <HAL_UARTEx_SetTxFifoThreshold>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800333e:	f7ff f92b 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003342:	2100      	movs	r1, #0
 8003344:	4808      	ldr	r0, [pc, #32]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003346:	f00e fb28 	bl	801199a <HAL_UARTEx_SetRxFifoThreshold>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003350:	f7ff f922 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003354:	4804      	ldr	r0, [pc, #16]	; (8003368 <MX_USART1_UART_Init+0x90>)
 8003356:	f00e faa9 	bl	80118ac <HAL_UARTEx_DisableFifoMode>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003360:	f7ff f91a 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003364:	bf00      	nop
 8003366:	bd80      	pop	{r7, pc}
 8003368:	2400703c 	.word	0x2400703c
 800336c:	40011000 	.word	0x40011000

08003370 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <MX_USART3_UART_Init+0x90>)
 8003376:	4a23      	ldr	r2, [pc, #140]	; (8003404 <MX_USART3_UART_Init+0x94>)
 8003378:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800337a:	4b21      	ldr	r3, [pc, #132]	; (8003400 <MX_USART3_UART_Init+0x90>)
 800337c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003380:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003382:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <MX_USART3_UART_Init+0x90>)
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <MX_USART3_UART_Init+0x90>)
 800338a:	2200      	movs	r2, #0
 800338c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <MX_USART3_UART_Init+0x90>)
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <MX_USART3_UART_Init+0x90>)
 8003396:	220c      	movs	r2, #12
 8003398:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <MX_USART3_UART_Init+0x90>)
 800339c:	2200      	movs	r2, #0
 800339e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <MX_USART3_UART_Init+0x90>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <MX_USART3_UART_Init+0x90>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <MX_USART3_UART_Init+0x90>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <MX_USART3_UART_Init+0x90>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033b8:	4811      	ldr	r0, [pc, #68]	; (8003400 <MX_USART3_UART_Init+0x90>)
 80033ba:	f00c fb88 	bl	800face <HAL_UART_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80033c4:	f7ff f8e8 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033c8:	2100      	movs	r1, #0
 80033ca:	480d      	ldr	r0, [pc, #52]	; (8003400 <MX_USART3_UART_Init+0x90>)
 80033cc:	f00e faa7 	bl	801191e <HAL_UARTEx_SetTxFifoThreshold>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80033d6:	f7ff f8df 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033da:	2100      	movs	r1, #0
 80033dc:	4808      	ldr	r0, [pc, #32]	; (8003400 <MX_USART3_UART_Init+0x90>)
 80033de:	f00e fadc 	bl	801199a <HAL_UARTEx_SetRxFifoThreshold>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80033e8:	f7ff f8d6 	bl	8002598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80033ec:	4804      	ldr	r0, [pc, #16]	; (8003400 <MX_USART3_UART_Init+0x90>)
 80033ee:	f00e fa5d 	bl	80118ac <HAL_UARTEx_DisableFifoMode>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80033f8:	f7ff f8ce 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	24006e04 	.word	0x24006e04
 8003404:	40004800 	.word	0x40004800

08003408 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b0bc      	sub	sp, #240	; 0xf0
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003420:	f107 0320 	add.w	r3, r7, #32
 8003424:	22bc      	movs	r2, #188	; 0xbc
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f013 fd34 	bl	8016e96 <memset>
  if(uartHandle->Instance==UART4)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6d      	ldr	r2, [pc, #436]	; (80035e8 <HAL_UART_MspInit+0x1e0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d142      	bne.n	80034be <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003438:	2302      	movs	r3, #2
 800343a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003442:	f107 0320 	add.w	r3, r7, #32
 8003446:	4618      	mov	r0, r3
 8003448:	f007 fd00 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003452:	f7ff f8a1 	bl	8002598 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003456:	4b65      	ldr	r3, [pc, #404]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 8003458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800345c:	4a63      	ldr	r2, [pc, #396]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 800345e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003462:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003466:	4b61      	ldr	r3, [pc, #388]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 8003468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800346c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003474:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 8003476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800347a:	4a5c      	ldr	r2, [pc, #368]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003484:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 8003486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003492:	2303      	movs	r3, #3
 8003494:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034aa:	2308      	movs	r3, #8
 80034ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034b4:	4619      	mov	r1, r3
 80034b6:	484e      	ldr	r0, [pc, #312]	; (80035f0 <HAL_UART_MspInit+0x1e8>)
 80034b8:	f004 fc50 	bl	8007d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034bc:	e090      	b.n	80035e0 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <HAL_UART_MspInit+0x1ec>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d143      	bne.n	8003550 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034c8:	2301      	movs	r3, #1
 80034ca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034d2:	f107 0320 	add.w	r3, r7, #32
 80034d6:	4618      	mov	r0, r3
 80034d8:	f007 fcb8 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_UART_MspInit+0xde>
      Error_Handler();
 80034e2:	f7ff f859 	bl	8002598 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 80034e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034ec:	4a3f      	ldr	r2, [pc, #252]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 80034ee:	f043 0310 	orr.w	r3, r3, #16
 80034f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034f6:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 80034f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003504:	4b39      	ldr	r3, [pc, #228]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 8003506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350a:	4a38      	ldr	r2, [pc, #224]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003514:	4b35      	ldr	r3, [pc, #212]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 8003516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003522:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800353c:	2304      	movs	r3, #4
 800353e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003542:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003546:	4619      	mov	r1, r3
 8003548:	482b      	ldr	r0, [pc, #172]	; (80035f8 <HAL_UART_MspInit+0x1f0>)
 800354a:	f004 fc07 	bl	8007d5c <HAL_GPIO_Init>
}
 800354e:	e047      	b.n	80035e0 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART3)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a29      	ldr	r2, [pc, #164]	; (80035fc <HAL_UART_MspInit+0x1f4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d142      	bne.n	80035e0 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800355a:	2302      	movs	r3, #2
 800355c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003564:	f107 0320 	add.w	r3, r7, #32
 8003568:	4618      	mov	r0, r3
 800356a:	f007 fc6f 	bl	800ae4c <HAL_RCCEx_PeriphCLKConfig>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8003574:	f7ff f810 	bl	8002598 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003578:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 800357a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800357e:	4a1b      	ldr	r2, [pc, #108]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 8003580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003584:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 800358a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800358e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 8003598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 800359e:	f043 0302 	orr.w	r3, r3, #2
 80035a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_UART_MspInit+0x1e4>)
 80035a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035ce:	2307      	movs	r3, #7
 80035d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035d8:	4619      	mov	r1, r3
 80035da:	4807      	ldr	r0, [pc, #28]	; (80035f8 <HAL_UART_MspInit+0x1f0>)
 80035dc:	f004 fbbe 	bl	8007d5c <HAL_GPIO_Init>
}
 80035e0:	bf00      	nop
 80035e2:	37f0      	adds	r7, #240	; 0xf0
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40004c00 	.word	0x40004c00
 80035ec:	58024400 	.word	0x58024400
 80035f0:	58020000 	.word	0x58020000
 80035f4:	40011000 	.word	0x40011000
 80035f8:	58020400 	.word	0x58020400
 80035fc:	40004800 	.word	0x40004800

08003600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003638 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003604:	f7ff fca4 	bl	8002f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
 ldr r0, =_sdata
 8003608:	480c      	ldr	r0, [pc, #48]	; (800363c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800360a:	490d      	ldr	r1, [pc, #52]	; (8003640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800360c:	4a0d      	ldr	r2, [pc, #52]	; (8003644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800360e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003610:	e002      	b.n	8003618 <LoopCopyDataInit>

08003612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003616:	3304      	adds	r3, #4

08003618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800361a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800361c:	d3f9      	bcc.n	8003612 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003620:	4c0a      	ldr	r4, [pc, #40]	; (800364c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003624:	e001      	b.n	800362a <LoopFillZerobss>

08003626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003628:	3204      	adds	r2, #4

0800362a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800362a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800362c:	d3fb      	bcc.n	8003626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800362e:	f013 fbfd 	bl	8016e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003632:	f7fe fe33 	bl	800229c <main>
  bx  lr
 8003636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003638:	24080000 	.word	0x24080000
 ldr r0, =_sdata
 800363c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003640:	2400030c 	.word	0x2400030c
  ldr r2, =_sidata
 8003644:	080239ec 	.word	0x080239ec
  ldr r2, =_sbss
 8003648:	2400030c 	.word	0x2400030c
  ldr r4, =_ebss
 800364c:	24008a9c 	.word	0x24008a9c

08003650 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003650:	e7fe      	b.n	8003650 <ADC3_IRQHandler>
	...

08003654 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8003654:	b5b0      	push	{r4, r5, r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af02      	add	r7, sp, #8
/*	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
	ST7735Ctx.Panel = HannStar_Panel;
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
	#elif TFT18
*/	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 800365a:	4b7c      	ldr	r3, [pc, #496]	; (800384c <LCD_Test+0x1f8>)
 800365c:	2203      	movs	r2, #3
 800365e:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = BOE_Panel;
 8003660:	4b7a      	ldr	r3, [pc, #488]	; (800384c <LCD_Test+0x1f8>)
 8003662:	2201      	movs	r2, #1
 8003664:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_1_8a_inch_screen;
 8003666:	4b79      	ldr	r3, [pc, #484]	; (800384c <LCD_Test+0x1f8>)
 8003668:	2202      	movs	r2, #2
 800366a:	735a      	strb	r2, [r3, #13]
//	#else
//	error "Unknown Screen"
	
//	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 800366c:	4978      	ldr	r1, [pc, #480]	; (8003850 <LCD_Test+0x1fc>)
 800366e:	4879      	ldr	r0, [pc, #484]	; (8003854 <LCD_Test+0x200>)
 8003670:	f000 fcb4 	bl	8003fdc <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8003674:	4b78      	ldr	r3, [pc, #480]	; (8003858 <LCD_Test+0x204>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a74      	ldr	r2, [pc, #464]	; (800384c <LCD_Test+0x1f8>)
 800367a:	2105      	movs	r1, #5
 800367c:	4875      	ldr	r0, [pc, #468]	; (8003854 <LCD_Test+0x200>)
 800367e:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8003680:	4b75      	ldr	r3, [pc, #468]	; (8003858 <LCD_Test+0x204>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4975      	ldr	r1, [pc, #468]	; (800385c <LCD_Test+0x208>)
 8003686:	4873      	ldr	r0, [pc, #460]	; (8003854 <LCD_Test+0x200>)
 8003688:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 800368a:	2000      	movs	r0, #0
 800368c:	f000 f8f8 	bl	8003880 <LCD_SetBrightness>
/*	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
	#elif TFT18
*/	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
 8003690:	4b71      	ldr	r3, [pc, #452]	; (8003858 <LCD_Test+0x204>)
 8003692:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003694:	4b72      	ldr	r3, [pc, #456]	; (8003860 <LCD_Test+0x20c>)
 8003696:	2200      	movs	r2, #0
 8003698:	2100      	movs	r1, #0
 800369a:	486e      	ldr	r0, [pc, #440]	; (8003854 <LCD_Test+0x200>)
 800369c:	47a0      	blx	r4
//	#endif
	
  uint32_t tick = get_tick();
 800369e:	f002 fadf 	bl	8005c60 <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 80036a4:	e06a      	b.n	800377c <LCD_Test+0x128>
	{
		delay_ms(10);
 80036a6:	200a      	movs	r0, #10
 80036a8:	f002 fae6 	bl	8005c78 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 80036ac:	f002 fad8 	bl	8005c60 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ba:	d80f      	bhi.n	80036dc <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 80036bc:	f002 fad0 	bl	8005c60 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2264      	movs	r2, #100	; 0x64
 80036c8:	fb02 f303 	mul.w	r3, r2, r3
 80036cc:	4a65      	ldr	r2, [pc, #404]	; (8003864 <LCD_Test+0x210>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f8d3 	bl	8003880 <LCD_SetBrightness>
 80036da:	e04f      	b.n	800377c <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 80036dc:	f002 fac0 	bl	8005c60 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d83d      	bhi.n	800376a <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 80036ee:	f002 fab7 	bl	8005c60 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80036fc:	4a5a      	ldr	r2, [pc, #360]	; (8003868 <LCD_Test+0x214>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	08da      	lsrs	r2, r3, #3
 8003704:	463b      	mov	r3, r7
 8003706:	4959      	ldr	r1, [pc, #356]	; (800386c <LCD_Test+0x218>)
 8003708:	4618      	mov	r0, r3
 800370a:	f013 fcb9 	bl	8017080 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 800370e:	4b4f      	ldr	r3, [pc, #316]	; (800384c <LCD_Test+0x1f8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b1e      	subs	r3, #30
 8003716:	b298      	uxth	r0, r3
 8003718:	4b4c      	ldr	r3, [pc, #304]	; (800384c <LCD_Test+0x1f8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b29a      	uxth	r2, r3
 800371e:	463b      	mov	r3, r7
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	2310      	movs	r3, #16
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2310      	movs	r3, #16
 8003728:	2101      	movs	r1, #1
 800372a:	f000 fb09 	bl	8003d40 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 800372e:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <LCD_Test+0x204>)
 8003730:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003732:	4b46      	ldr	r3, [pc, #280]	; (800384c <LCD_Test+0x1f8>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	1edd      	subs	r5, r3, #3
 8003738:	f002 fa92 	bl	8005c60 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003746:	4a41      	ldr	r2, [pc, #260]	; (800384c <LCD_Test+0x1f8>)
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	4a45      	ldr	r2, [pc, #276]	; (8003864 <LCD_Test+0x210>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	09db      	lsrs	r3, r3, #7
 8003756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800375a:	9201      	str	r2, [sp, #4]
 800375c:	2203      	movs	r2, #3
 800375e:	9200      	str	r2, [sp, #0]
 8003760:	462a      	mov	r2, r5
 8003762:	2100      	movs	r1, #0
 8003764:	483b      	ldr	r0, [pc, #236]	; (8003854 <LCD_Test+0x200>)
 8003766:	47a0      	blx	r4
 8003768:	e008      	b.n	800377c <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 800376a:	f002 fa79 	bl	8005c60 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003778:	4293      	cmp	r3, r2
 800377a:	d807      	bhi.n	800378c <LCD_Test+0x138>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 800377c:	2108      	movs	r1, #8
 800377e:	483c      	ldr	r0, [pc, #240]	; (8003870 <LCD_Test+0x21c>)
 8003780:	f004 fc9c 	bl	80080bc <HAL_GPIO_ReadPin>
 8003784:	4603      	mov	r3, r0
 8003786:	2b01      	cmp	r3, #1
 8003788:	d18d      	bne.n	80036a6 <LCD_Test+0x52>
 800378a:	e004      	b.n	8003796 <LCD_Test+0x142>
			break;
 800378c:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800378e:	e002      	b.n	8003796 <LCD_Test+0x142>
	{
		delay_ms(10);
 8003790:	200a      	movs	r0, #10
 8003792:	f002 fa71 	bl	8005c78 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8003796:	2108      	movs	r1, #8
 8003798:	4835      	ldr	r0, [pc, #212]	; (8003870 <LCD_Test+0x21c>)
 800379a:	f004 fc8f 	bl	80080bc <HAL_GPIO_ReadPin>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d0f5      	beq.n	8003790 <LCD_Test+0x13c>
	}
	LCD_Light(0, 300);
 80037a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80037a8:	2000      	movs	r0, #0
 80037aa:	f000 f885 	bl	80038b8 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 80037ae:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <LCD_Test+0x204>)
 80037b0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <LCD_Test+0x1f8>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b25      	ldr	r3, [pc, #148]	; (800384c <LCD_Test+0x1f8>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2100      	movs	r1, #0
 80037bc:	9101      	str	r1, [sp, #4]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	2100      	movs	r1, #0
 80037c6:	4823      	ldr	r0, [pc, #140]	; (8003854 <LCD_Test+0x200>)
 80037c8:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 80037ca:	463b      	mov	r3, r7
 80037cc:	4929      	ldr	r1, [pc, #164]	; (8003874 <LCD_Test+0x220>)
 80037ce:	4618      	mov	r0, r3
 80037d0:	f013 fc56 	bl	8017080 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <LCD_Test+0x1f8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b29a      	uxth	r2, r3
 80037da:	463b      	mov	r3, r7
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	2310      	movs	r3, #16
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2310      	movs	r3, #16
 80037e4:	2104      	movs	r1, #4
 80037e6:	2004      	movs	r0, #4
 80037e8:	f000 faaa 	bl	8003d40 <LCD_ShowString>
	sprintf((char *)&text, "STM32H743 %X", HAL_GetDEVID());
 80037ec:	f002 fa74 	bl	8005cd8 <HAL_GetDEVID>
 80037f0:	4602      	mov	r2, r0
 80037f2:	463b      	mov	r3, r7
 80037f4:	4920      	ldr	r1, [pc, #128]	; (8003878 <LCD_Test+0x224>)
 80037f6:	4618      	mov	r0, r3
 80037f8:	f013 fc42 	bl	8017080 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 80037fc:	4b13      	ldr	r3, [pc, #76]	; (800384c <LCD_Test+0x1f8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b29a      	uxth	r2, r3
 8003802:	463b      	mov	r3, r7
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	2310      	movs	r3, #16
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	2310      	movs	r3, #16
 800380c:	2116      	movs	r1, #22
 800380e:	2004      	movs	r0, #4
 8003810:	f000 fa96 	bl	8003d40 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <LCD_Test+0x208>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	463b      	mov	r3, r7
 800381a:	4918      	ldr	r1, [pc, #96]	; (800387c <LCD_Test+0x228>)
 800381c:	4618      	mov	r0, r3
 800381e:	f013 fc2f 	bl	8017080 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <LCD_Test+0x1f8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	b29a      	uxth	r2, r3
 8003828:	463b      	mov	r3, r7
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	2310      	movs	r3, #16
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	2310      	movs	r3, #16
 8003832:	2128      	movs	r1, #40	; 0x28
 8003834:	2004      	movs	r0, #4
 8003836:	f000 fa83 	bl	8003d40 <LCD_ShowString>

	LCD_Light(100, 200);
 800383a:	21c8      	movs	r1, #200	; 0xc8
 800383c:	2064      	movs	r0, #100	; 0x64
 800383e:	f000 f83b 	bl	80038b8 <LCD_Light>
}
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bdb0      	pop	{r4, r5, r7, pc}
 800384a:	bf00      	nop
 800384c:	24007198 	.word	0x24007198
 8003850:	24000094 	.word	0x24000094
 8003854:	24007160 	.word	0x24007160
 8003858:	240000b8 	.word	0x240000b8
 800385c:	2400715c 	.word	0x2400715c
 8003860:	08018f24 	.word	0x08018f24
 8003864:	10624dd3 	.word	0x10624dd3
 8003868:	cccccccd 	.word	0xcccccccd
 800386c:	0801842c 	.word	0x0801842c
 8003870:	58021000 	.word	0x58021000
 8003874:	08018434 	.word	0x08018434
 8003878:	08018444 	.word	0x08018444
 800387c:	08018454 	.word	0x08018454

08003880 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <LCD_SetBrightness+0x1c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	24006ff0 	.word	0x24006ff0

080038a0 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <LCD_GetBrightness+0x14>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	24006ff0 	.word	0x24006ff0

080038b8 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 80038c2:	f7ff ffed 	bl	80038a0 <LCD_GetBrightness>
 80038c6:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d05e      	beq.n	8003992 <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d05c      	beq.n	8003996 <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80038f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038fc:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390a:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003918:	ed97 7a06 	vldr	s14, [r7, #24]
 800391c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003920:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8003924:	edd7 6a07 	vldr	s13, [r7, #28]
 8003928:	ed97 7a06 	vldr	s14, [r7, #24]
 800392c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003930:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8003934:	f002 f994 	bl	8005c60 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 800393a:	2001      	movs	r0, #1
 800393c:	f002 f99c 	bl	8005c78 <HAL_Delay>
		
		time_now = get_tick()-tick;
 8003940:	f002 f98e 	bl	8005c60 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003956:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 800395a:	ed97 7a06 	vldr	s14, [r7, #24]
 800395e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003974:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 8003978:	edd7 7a03 	vldr	s15, [r7, #12]
 800397c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003980:	ee17 0a90 	vmov	r0, s15
 8003984:	f7ff ff7c 	bl	8003880 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d204      	bcs.n	800399a <LCD_Light+0xe2>
		delay_ms(1);
 8003990:	e7d3      	b.n	800393a <LCD_Light+0x82>
		return;
 8003992:	bf00      	nop
 8003994:	e002      	b.n	800399c <LCD_Light+0xe4>
		return;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <LCD_Light+0xe4>
		if(time_now >= time) break;
 800399a:	bf00      	nop
		
	}
}
 800399c:	3728      	adds	r7, #40	; 0x28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 80039a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a8:	b08c      	sub	sp, #48	; 0x30
 80039aa:	af02      	add	r7, sp, #8
 80039ac:	4604      	mov	r4, r0
 80039ae:	4608      	mov	r0, r1
 80039b0:	4611      	mov	r1, r2
 80039b2:	461a      	mov	r2, r3
 80039b4:	4623      	mov	r3, r4
 80039b6:	80fb      	strh	r3, [r7, #6]
 80039b8:	4603      	mov	r3, r0
 80039ba:	80bb      	strh	r3, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
 80039c0:	4613      	mov	r3, r2
 80039c2:	70bb      	strb	r3, [r7, #2]
 80039c4:	466b      	mov	r3, sp
 80039c6:	4698      	mov	r8, r3
  uint8_t temp,t1,t;
	uint16_t y0=y;
 80039c8:	88bb      	ldrh	r3, [r7, #4]
 80039ca:	843b      	strh	r3, [r7, #32]
	uint16_t x0=x;
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	83fb      	strh	r3, [r7, #30]
	uint16_t colortemp=POINT_COLOR; 
 80039d0:	4bb2      	ldr	r3, [pc, #712]	; (8003c9c <LCD_ShowChar+0x2f8>)
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	83bb      	strh	r3, [r7, #28]
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 80039d6:	78bb      	ldrb	r3, [r7, #2]
 80039d8:	2b0c      	cmp	r3, #12
 80039da:	d101      	bne.n	80039e0 <LCD_ShowChar+0x3c>
 80039dc:	2406      	movs	r4, #6
 80039de:	e000      	b.n	80039e2 <LCD_ShowChar+0x3e>
 80039e0:	2408      	movs	r4, #8
 80039e2:	78bd      	ldrb	r5, [r7, #2]
 80039e4:	1e63      	subs	r3, r4, #1
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	4623      	mov	r3, r4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	010b      	lsls	r3, r1, #4
 80039fa:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80039fe:	0102      	lsls	r2, r0, #4
 8003a00:	4623      	mov	r3, r4
 8003a02:	005e      	lsls	r6, r3, #1
 8003a04:	462b      	mov	r3, r5
 8003a06:	3b01      	subs	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	4623      	mov	r3, r4
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	b2ea      	uxtb	r2, r5
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	fb02 fe01 	mul.w	lr, r2, r1
 8003a1c:	fb00 fc03 	mul.w	ip, r0, r3
 8003a20:	44f4      	add	ip, lr
 8003a22:	fba0 2302 	umull	r2, r3, r0, r2
 8003a26:	eb0c 0103 	add.w	r1, ip, r3
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	f04f 0000 	mov.w	r0, #0
 8003a30:	f04f 0100 	mov.w	r1, #0
 8003a34:	0119      	lsls	r1, r3, #4
 8003a36:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003a3a:	0110      	lsls	r0, r2, #4
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f04f 0100 	mov.w	r1, #0
 8003a44:	b2ea      	uxtb	r2, r5
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	fb02 fe01 	mul.w	lr, r2, r1
 8003a4e:	fb00 fc03 	mul.w	ip, r0, r3
 8003a52:	44f4      	add	ip, lr
 8003a54:	fba0 2302 	umull	r2, r3, r0, r2
 8003a58:	eb0c 0103 	add.w	r1, ip, r3
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	f04f 0000 	mov.w	r0, #0
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	0119      	lsls	r1, r3, #4
 8003a68:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003a6c:	0110      	lsls	r0, r2, #4
 8003a6e:	4623      	mov	r3, r4
 8003a70:	462a      	mov	r2, r5
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	3307      	adds	r3, #7
 8003a7a:	08db      	lsrs	r3, r3, #3
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	ebad 0d03 	sub.w	sp, sp, r3
 8003a82:	ab02      	add	r3, sp, #8
 8003a84:	3301      	adds	r3, #1
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	613b      	str	r3, [r7, #16]
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8003a8c:	f107 0308 	add.w	r3, r7, #8
 8003a90:	4619      	mov	r1, r3
 8003a92:	4883      	ldr	r0, [pc, #524]	; (8003ca0 <LCD_ShowChar+0x2fc>)
 8003a94:	f001 fbfe 	bl	8005294 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8003a98:	f107 030c 	add.w	r3, r7, #12
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4880      	ldr	r0, [pc, #512]	; (8003ca0 <LCD_ShowChar+0x2fc>)
 8003aa0:	f001 fc0a 	bl	80052b8 <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	3b20      	subs	r3, #32
 8003aa8:	70fb      	strb	r3, [r7, #3]
	count = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if(!mode) //�ǵ��ӷ�ʽ
 8003aae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 8096 	bne.w	8003be4 <LCD_ShowChar+0x240>
	{
		for(t=0;t<size;t++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003abe:	e08a      	b.n	8003bd6 <LCD_ShowChar+0x232>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8003ac0:	78bb      	ldrb	r3, [r7, #2]
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d10d      	bne.n	8003ae2 <LCD_ShowChar+0x13e>
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003acc:	4875      	ldr	r0, [pc, #468]	; (8003ca4 <LCD_ShowChar+0x300>)
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	440b      	add	r3, r1
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ae0:	e009      	b.n	8003af6 <LCD_ShowChar+0x152>
			else temp=asc2_1608[num][t];		 //����1608����
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003ae8:	496f      	ldr	r1, [pc, #444]	; (8003ca8 <LCD_ShowChar+0x304>)
 8003aea:	0112      	lsls	r2, r2, #4
 8003aec:	440a      	add	r2, r1
 8003aee:	4413      	add	r3, r2
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			
			for(t1=0;t1<8;t1++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003afc:	e060      	b.n	8003bc0 <LCD_ShowChar+0x21c>
			{			    
				if(temp&0x80)
 8003afe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	da0c      	bge.n	8003b20 <LCD_ShowChar+0x17c>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8003b06:	8bbb      	ldrh	r3, [r7, #28]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	b21a      	sxth	r2, r3
 8003b0c:	8bbb      	ldrh	r3, [r7, #28]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	b21b      	sxth	r3, r3
 8003b14:	4313      	orrs	r3, r2
 8003b16:	b21b      	sxth	r3, r3
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	4b60      	ldr	r3, [pc, #384]	; (8003c9c <LCD_ShowChar+0x2f8>)
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	e00d      	b.n	8003b3c <LCD_ShowChar+0x198>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8003b20:	4b62      	ldr	r3, [pc, #392]	; (8003cac <LCD_ShowChar+0x308>)
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	b21a      	sxth	r2, r3
 8003b28:	4b60      	ldr	r3, [pc, #384]	; (8003cac <LCD_ShowChar+0x308>)
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	b21b      	sxth	r3, r3
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b21b      	sxth	r3, r3
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	4b58      	ldr	r3, [pc, #352]	; (8003c9c <LCD_ShowChar+0x2f8>)
 8003b3a:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 8003b3c:	0872      	lsrs	r2, r6, #1
 8003b3e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003b40:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461c      	mov	r4, r3
 8003b4a:	4b54      	ldr	r3, [pc, #336]	; (8003c9c <LCD_ShowChar+0x2f8>)
 8003b4c:	8818      	ldrh	r0, [r3, #0]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	fb01 f202 	mul.w	r2, r1, r2
 8003b54:	4422      	add	r2, r4
 8003b56:	4601      	mov	r1, r0
 8003b58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8003b5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b5e:	3301      	adds	r3, #1
 8003b60:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 8003b62:	78bb      	ldrb	r3, [r7, #2]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d301      	bcc.n	8003b70 <LCD_ShowChar+0x1cc>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 8003b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 8003b7a:	88bb      	ldrh	r3, [r7, #4]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8003b80:	88ba      	ldrh	r2, [r7, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d303      	bcc.n	8003b90 <LCD_ShowChar+0x1ec>
 8003b88:	4a44      	ldr	r2, [pc, #272]	; (8003c9c <LCD_ShowChar+0x2f8>)
 8003b8a:	8bbb      	ldrh	r3, [r7, #28]
 8003b8c:	8013      	strh	r3, [r2, #0]
 8003b8e:	e0ce      	b.n	8003d2e <LCD_ShowChar+0x38a>
				if((y-y0)==size)
 8003b90:	88ba      	ldrh	r2, [r7, #4]
 8003b92:	8c3b      	ldrh	r3, [r7, #32]
 8003b94:	1ad2      	subs	r2, r2, r3
 8003b96:	78bb      	ldrb	r3, [r7, #2]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d10c      	bne.n	8003bb6 <LCD_ShowChar+0x212>
				{
					y=y0;
 8003b9c:	8c3b      	ldrh	r3, [r7, #32]
 8003b9e:	80bb      	strh	r3, [r7, #4]
					x++;
 8003ba0:	88fb      	ldrh	r3, [r7, #6]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8003ba6:	88fa      	ldrh	r2, [r7, #6]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d30d      	bcc.n	8003bca <LCD_ShowChar+0x226>
 8003bae:	4a3b      	ldr	r2, [pc, #236]	; (8003c9c <LCD_ShowChar+0x2f8>)
 8003bb0:	8bbb      	ldrh	r3, [r7, #28]
 8003bb2:	8013      	strh	r3, [r2, #0]
 8003bb4:	e0bb      	b.n	8003d2e <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 8003bb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bc4:	2b07      	cmp	r3, #7
 8003bc6:	d99a      	bls.n	8003afe <LCD_ShowChar+0x15a>
 8003bc8:	e000      	b.n	8003bcc <LCD_ShowChar+0x228>
					break;
 8003bca:	bf00      	nop
		for(t=0;t<size;t++)
 8003bcc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003bd6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003bda:	78bb      	ldrb	r3, [r7, #2]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	f4ff af6f 	bcc.w	8003ac0 <LCD_ShowChar+0x11c>
 8003be2:	e08e      	b.n	8003d02 <LCD_ShowChar+0x35e>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003bea:	e084      	b.n	8003cf6 <LCD_ShowChar+0x352>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8003bec:	78bb      	ldrb	r3, [r7, #2]
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d10d      	bne.n	8003c0e <LCD_ShowChar+0x26a>
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003bf8:	482a      	ldr	r0, [pc, #168]	; (8003ca4 <LCD_ShowChar+0x300>)
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4403      	add	r3, r0
 8003c04:	440b      	add	r3, r1
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c0c:	e009      	b.n	8003c22 <LCD_ShowChar+0x27e>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c14:	4924      	ldr	r1, [pc, #144]	; (8003ca8 <LCD_ShowChar+0x304>)
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	440a      	add	r2, r1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(t1=0;t1<8;t1++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003c28:	e05a      	b.n	8003ce0 <LCD_ShowChar+0x33c>
			{			    
				if(temp&0x80)
 8003c2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	da19      	bge.n	8003c66 <LCD_ShowChar+0x2c2>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <LCD_ShowChar+0x2f8>)
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b21a      	sxth	r2, r3
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <LCD_ShowChar+0x2f8>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b218      	sxth	r0, r3
 8003c48:	0872      	lsrs	r2, r6, #1
 8003c4a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003c4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	461c      	mov	r4, r3
 8003c56:	b280      	uxth	r0, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	fb01 f202 	mul.w	r2, r1, r2
 8003c5e:	4422      	add	r2, r4
 8003c60:	4601      	mov	r1, r0
 8003c62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8003c66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c68:	3301      	adds	r3, #1
 8003c6a:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 8003c6c:	78bb      	ldrb	r3, [r7, #2]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d301      	bcc.n	8003c7a <LCD_ShowChar+0x2d6>
 8003c76:	2300      	movs	r3, #0
 8003c78:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 8003c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 8003c84:	88bb      	ldrh	r3, [r7, #4]
 8003c86:	3301      	adds	r3, #1
 8003c88:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8003c8a:	88ba      	ldrh	r2, [r7, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d30e      	bcc.n	8003cb0 <LCD_ShowChar+0x30c>
 8003c92:	4a02      	ldr	r2, [pc, #8]	; (8003c9c <LCD_ShowChar+0x2f8>)
 8003c94:	8bbb      	ldrh	r3, [r7, #28]
 8003c96:	8013      	strh	r3, [r2, #0]
 8003c98:	e049      	b.n	8003d2e <LCD_ShowChar+0x38a>
 8003c9a:	bf00      	nop
 8003c9c:	240000b4 	.word	0x240000b4
 8003ca0:	24007160 	.word	0x24007160
 8003ca4:	080184c0 	.word	0x080184c0
 8003ca8:	08018934 	.word	0x08018934
 8003cac:	24002600 	.word	0x24002600
				if((y-y0)==size)
 8003cb0:	88ba      	ldrh	r2, [r7, #4]
 8003cb2:	8c3b      	ldrh	r3, [r7, #32]
 8003cb4:	1ad2      	subs	r2, r2, r3
 8003cb6:	78bb      	ldrb	r3, [r7, #2]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d10c      	bne.n	8003cd6 <LCD_ShowChar+0x332>
				{
					y=y0;
 8003cbc:	8c3b      	ldrh	r3, [r7, #32]
 8003cbe:	80bb      	strh	r3, [r7, #4]
					x++;
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d30d      	bcc.n	8003cea <LCD_ShowChar+0x346>
 8003cce:	4a1a      	ldr	r2, [pc, #104]	; (8003d38 <LCD_ShowChar+0x394>)
 8003cd0:	8bbb      	ldrh	r3, [r7, #28]
 8003cd2:	8013      	strh	r3, [r2, #0]
 8003cd4:	e02b      	b.n	8003d2e <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 8003cd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003ce0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ce4:	2b07      	cmp	r3, #7
 8003ce6:	d9a0      	bls.n	8003c2a <LCD_ShowChar+0x286>
 8003ce8:	e000      	b.n	8003cec <LCD_ShowChar+0x348>
					break;
 8003cea:	bf00      	nop
		for(t=0;t<size;t++)
 8003cec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003cf6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003cfa:	78bb      	ldrb	r3, [r7, #2]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	f4ff af75 	bcc.w	8003bec <LCD_ShowChar+0x248>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 8003d02:	8bf9      	ldrh	r1, [r7, #30]
 8003d04:	8c38      	ldrh	r0, [r7, #32]
 8003d06:	693c      	ldr	r4, [r7, #16]
 8003d08:	78bb      	ldrb	r3, [r7, #2]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d101      	bne.n	8003d12 <LCD_ShowChar+0x36e>
 8003d0e:	2306      	movs	r3, #6
 8003d10:	e000      	b.n	8003d14 <LCD_ShowChar+0x370>
 8003d12:	2308      	movs	r3, #8
 8003d14:	78ba      	ldrb	r2, [r7, #2]
 8003d16:	9201      	str	r2, [sp, #4]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4807      	ldr	r0, [pc, #28]	; (8003d3c <LCD_ShowChar+0x398>)
 8003d20:	f001 f90a 	bl	8004f38 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <LCD_ShowChar+0x394>)
 8003d26:	8bbb      	ldrh	r3, [r7, #28]
 8003d28:	8013      	strh	r3, [r2, #0]
 8003d2a:	46c5      	mov	sp, r8
 8003d2c:	e000      	b.n	8003d30 <LCD_ShowChar+0x38c>
 8003d2e:	46c5      	mov	sp, r8
}   
 8003d30:	3728      	adds	r7, #40	; 0x28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d38:	240000b4 	.word	0x240000b4
 8003d3c:	24007160 	.word	0x24007160

08003d40 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	4604      	mov	r4, r0
 8003d48:	4608      	mov	r0, r1
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4623      	mov	r3, r4
 8003d50:	80fb      	strh	r3, [r7, #6]
 8003d52:	4603      	mov	r3, r0
 8003d54:	80bb      	strh	r3, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	807b      	strh	r3, [r7, #2]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	4413      	add	r3, r2
 8003d68:	807b      	strh	r3, [r7, #2]
	height+=y;
 8003d6a:	883a      	ldrh	r2, [r7, #0]
 8003d6c:	88bb      	ldrh	r3, [r7, #4]
 8003d6e:	4413      	add	r3, r2
 8003d70:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8003d72:	e024      	b.n	8003dbe <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	887b      	ldrh	r3, [r7, #2]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d307      	bcc.n	8003d8c <LCD_ShowString+0x4c>
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	80fb      	strh	r3, [r7, #6]
 8003d80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	88bb      	ldrh	r3, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 8003d8c:	88ba      	ldrh	r2, [r7, #4]
 8003d8e:	883b      	ldrh	r3, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d21d      	bcs.n	8003dd0 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d9c:	88b9      	ldrh	r1, [r7, #4]
 8003d9e:	88f8      	ldrh	r0, [r7, #6]
 8003da0:	2400      	movs	r4, #0
 8003da2:	9400      	str	r4, [sp, #0]
 8003da4:	f7ff fdfe 	bl	80039a4 <LCD_ShowChar>
        x+=size/2;
 8003da8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	4413      	add	r3, r2
 8003db6:	80fb      	strh	r3, [r7, #6]
        p++;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	3301      	adds	r3, #1
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b7e      	cmp	r3, #126	; 0x7e
 8003dc4:	d805      	bhi.n	8003dd2 <LCD_ShowString+0x92>
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b1f      	cmp	r3, #31
 8003dcc:	d8d2      	bhi.n	8003d74 <LCD_ShowString+0x34>
    }  
}
 8003dce:	e000      	b.n	8003dd2 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 8003dd0:	bf00      	nop
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd90      	pop	{r4, r7, pc}
	...

08003ddc <lcd_init>:

static int32_t lcd_init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 8003de6:	2104      	movs	r1, #4
 8003de8:	4803      	ldr	r0, [pc, #12]	; (8003df8 <lcd_init+0x1c>)
 8003dea:	f00b fc6d 	bl	800f6c8 <HAL_TIMEx_PWMN_Start>
	return result;
 8003dee:	687b      	ldr	r3, [r7, #4]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	24006ff0 	.word	0x24006ff0

08003dfc <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8003e00:	f001 ff2e 	bl	8005c60 <HAL_GetTick>
 8003e04:	4603      	mov	r3, r0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e20:	481d      	ldr	r0, [pc, #116]	; (8003e98 <lcd_writereg+0x8c>)
 8003e22:	f004 f963 	bl	80080ec <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8003e26:	2200      	movs	r2, #0
 8003e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e2c:	481a      	ldr	r0, [pc, #104]	; (8003e98 <lcd_writereg+0x8c>)
 8003e2e:	f004 f95d 	bl	80080ec <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8003e32:	f107 010f 	add.w	r1, r7, #15
 8003e36:	2364      	movs	r3, #100	; 0x64
 8003e38:	2201      	movs	r2, #1
 8003e3a:	4818      	ldr	r0, [pc, #96]	; (8003e9c <lcd_writereg+0x90>)
 8003e3c:	f009 fda4 	bl	800d988 <HAL_SPI_Transmit>
 8003e40:	4603      	mov	r3, r0
 8003e42:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8003e44:	2201      	movs	r2, #1
 8003e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e4a:	4813      	ldr	r0, [pc, #76]	; (8003e98 <lcd_writereg+0x8c>)
 8003e4c:	f004 f94e 	bl	80080ec <HAL_GPIO_WritePin>
	if(length > 0)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	480e      	ldr	r0, [pc, #56]	; (8003e9c <lcd_writereg+0x90>)
 8003e62:	f009 fd91 	bl	800d988 <HAL_SPI_Transmit>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8003e70:	2201      	movs	r2, #1
 8003e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e76:	4808      	ldr	r0, [pc, #32]	; (8003e98 <lcd_writereg+0x8c>)
 8003e78:	f004 f938 	bl	80080ec <HAL_GPIO_WritePin>
	if(result>0){
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	dd03      	ble.n	8003e8a <lcd_writereg+0x7e>
		result = -1;}
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e001      	b.n	8003e8e <lcd_writereg+0x82>
	else{
		result = 0;}
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
	return result;
 8003e8e:	697b      	ldr	r3, [r7, #20]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	58021000 	.word	0x58021000
 8003e9c:	24006e94 	.word	0x24006e94

08003ea0 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	6039      	str	r1, [r7, #0]
 8003eaa:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8003eac:	2200      	movs	r2, #0
 8003eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003eb2:	481b      	ldr	r0, [pc, #108]	; (8003f20 <lcd_readreg+0x80>)
 8003eb4:	f004 f91a 	bl	80080ec <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ebe:	4818      	ldr	r0, [pc, #96]	; (8003f20 <lcd_readreg+0x80>)
 8003ec0:	f004 f914 	bl	80080ec <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8003ec4:	1df9      	adds	r1, r7, #7
 8003ec6:	2364      	movs	r3, #100	; 0x64
 8003ec8:	2201      	movs	r2, #1
 8003eca:	4816      	ldr	r0, [pc, #88]	; (8003f24 <lcd_readreg+0x84>)
 8003ecc:	f009 fd5c 	bl	800d988 <HAL_SPI_Transmit>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003eda:	4811      	ldr	r0, [pc, #68]	; (8003f20 <lcd_readreg+0x80>)
 8003edc:	f004 f906 	bl	80080ec <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8003ee0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	480e      	ldr	r0, [pc, #56]	; (8003f24 <lcd_readreg+0x84>)
 8003eea:	f009 ff3f 	bl	800dd6c <HAL_SPI_Receive>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003efe:	4808      	ldr	r0, [pc, #32]	; (8003f20 <lcd_readreg+0x80>)
 8003f00:	f004 f8f4 	bl	80080ec <HAL_GPIO_WritePin>
	if(result>0){
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	dd03      	ble.n	8003f12 <lcd_readreg+0x72>
		result = -1;}
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e001      	b.n	8003f16 <lcd_readreg+0x76>
	else{
		result = 0;}
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
	return result;
 8003f16:	68fb      	ldr	r3, [r7, #12]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	58021000 	.word	0x58021000
 8003f24:	24006e94 	.word	0x24006e94

08003f28 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8003f32:	2200      	movs	r2, #0
 8003f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f38:	480f      	ldr	r0, [pc, #60]	; (8003f78 <lcd_senddata+0x50>)
 8003f3a:	f004 f8d7 	bl	80080ec <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	2364      	movs	r3, #100	; 0x64
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	480d      	ldr	r0, [pc, #52]	; (8003f7c <lcd_senddata+0x54>)
 8003f48:	f009 fd1e 	bl	800d988 <HAL_SPI_Transmit>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8003f50:	2201      	movs	r2, #1
 8003f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f56:	4808      	ldr	r0, [pc, #32]	; (8003f78 <lcd_senddata+0x50>)
 8003f58:	f004 f8c8 	bl	80080ec <HAL_GPIO_WritePin>
	if(result>0){
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	dd03      	ble.n	8003f6a <lcd_senddata+0x42>
		result = -1;}
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e001      	b.n	8003f6e <lcd_senddata+0x46>
	else{
		result = 0;}
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
	return result;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	58021000 	.word	0x58021000
 8003f7c:	24006e94 	.word	0x24006e94

08003f80 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f90:	4810      	ldr	r0, [pc, #64]	; (8003fd4 <lcd_recvdata+0x54>)
 8003f92:	f004 f8ab 	bl	80080ec <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <lcd_recvdata+0x58>)
 8003fa2:	f009 fee3 	bl	800dd6c <HAL_SPI_Receive>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8003faa:	2201      	movs	r2, #1
 8003fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fb0:	4808      	ldr	r0, [pc, #32]	; (8003fd4 <lcd_recvdata+0x54>)
 8003fb2:	f004 f89b 	bl	80080ec <HAL_GPIO_WritePin>
	if(result>0){
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	dd03      	ble.n	8003fc4 <lcd_recvdata+0x44>
		result = -1;}
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e001      	b.n	8003fc8 <lcd_recvdata+0x48>
	else{
		result = 0;}
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
	return result;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	58021000 	.word	0x58021000
 8003fd8:	24006e94 	.word	0x24006e94

08003fdc <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d103      	bne.n	8003ff4 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e03a      	b.n	800406a <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	891a      	ldrh	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <ST7735_RegisterBusIO+0x98>)
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a0e      	ldr	r2, [pc, #56]	; (8004078 <ST7735_RegisterBusIO+0x9c>)
 800403e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a0e      	ldr	r2, [pc, #56]	; (800407c <ST7735_RegisterBusIO+0xa0>)
 8004044:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a0d      	ldr	r2, [pc, #52]	; (8004080 <ST7735_RegisterBusIO+0xa4>)
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4798      	blx	r3
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	e002      	b.n	800406a <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
 8004068:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800406a:	68fb      	ldr	r3, [r7, #12]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	080054e5 	.word	0x080054e5
 8004078:	0800550d 	.word	0x0800550d
 800407c:	08005537 	.word	0x08005537
 8004080:	0800555b 	.word	0x0800555b

08004084 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e3a6      	b.n	80047ec <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 800409e:	2300      	movs	r3, #0
 80040a0:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f103 0020 	add.w	r0, r3, #32
 80040a8:	f107 0213 	add.w	r2, r7, #19
 80040ac:	2300      	movs	r3, #0
 80040ae:	2101      	movs	r1, #1
 80040b0:	f001 fa92 	bl	80055d8 <st7735_write_reg>
 80040b4:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 80040b6:	2178      	movs	r1, #120	; 0x78
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f001 fa60 	bl	800557e <ST7735_IO_Delay>
		
		tmp = 0x00U;
 80040be:	2300      	movs	r3, #0
 80040c0:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f103 0020 	add.w	r0, r3, #32
 80040c8:	f107 0213 	add.w	r2, r7, #19
 80040cc:	2300      	movs	r3, #0
 80040ce:	2101      	movs	r1, #1
 80040d0:	f001 fa82 	bl	80055d8 <st7735_write_reg>
 80040d4:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 80040d6:	2178      	movs	r1, #120	; 0x78
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f001 fa50 	bl	800557e <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f103 0020 	add.w	r0, r3, #32
 80040e8:	f107 0213 	add.w	r2, r7, #19
 80040ec:	2301      	movs	r3, #1
 80040ee:	2111      	movs	r1, #17
 80040f0:	f001 fa72 	bl	80055d8 <st7735_write_reg>
 80040f4:	4602      	mov	r2, r0
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4413      	add	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f103 0020 	add.w	r0, r3, #32
 8004102:	f107 0213 	add.w	r2, r7, #19
 8004106:	2300      	movs	r3, #0
 8004108:	21b1      	movs	r1, #177	; 0xb1
 800410a:	f001 fa65 	bl	80055d8 <st7735_write_reg>
 800410e:	4602      	mov	r2, r0
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	4413      	add	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8004116:	2301      	movs	r3, #1
 8004118:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3320      	adds	r3, #32
 800411e:	f107 0113 	add.w	r1, r7, #19
 8004122:	2201      	movs	r2, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fa6c 	bl	8005602 <st7735_send_data>
 800412a:	4602      	mov	r2, r0
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8004132:	232c      	movs	r3, #44	; 0x2c
 8004134:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3320      	adds	r3, #32
 800413a:	f107 0113 	add.w	r1, r7, #19
 800413e:	2201      	movs	r2, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f001 fa5e 	bl	8005602 <st7735_send_data>
 8004146:	4602      	mov	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	4413      	add	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800414e:	232d      	movs	r3, #45	; 0x2d
 8004150:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3320      	adds	r3, #32
 8004156:	f107 0113 	add.w	r1, r7, #19
 800415a:	2201      	movs	r2, #1
 800415c:	4618      	mov	r0, r3
 800415e:	f001 fa50 	bl	8005602 <st7735_send_data>
 8004162:	4602      	mov	r2, r0
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4413      	add	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 800416a:	2301      	movs	r3, #1
 800416c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f103 0020 	add.w	r0, r3, #32
 8004174:	f107 0213 	add.w	r2, r7, #19
 8004178:	2301      	movs	r3, #1
 800417a:	21b2      	movs	r1, #178	; 0xb2
 800417c:	f001 fa2c 	bl	80055d8 <st7735_write_reg>
 8004180:	4602      	mov	r2, r0
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4413      	add	r3, r2
 8004186:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8004188:	232c      	movs	r3, #44	; 0x2c
 800418a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3320      	adds	r3, #32
 8004190:	f107 0113 	add.w	r1, r7, #19
 8004194:	2201      	movs	r2, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f001 fa33 	bl	8005602 <st7735_send_data>
 800419c:	4602      	mov	r2, r0
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	4413      	add	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80041a4:	232d      	movs	r3, #45	; 0x2d
 80041a6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3320      	adds	r3, #32
 80041ac:	f107 0113 	add.w	r1, r7, #19
 80041b0:	2201      	movs	r2, #1
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fa25 	bl	8005602 <st7735_send_data>
 80041b8:	4602      	mov	r2, r0
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 80041c0:	2301      	movs	r3, #1
 80041c2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f103 0020 	add.w	r0, r3, #32
 80041ca:	f107 0213 	add.w	r2, r7, #19
 80041ce:	2301      	movs	r3, #1
 80041d0:	21b3      	movs	r1, #179	; 0xb3
 80041d2:	f001 fa01 	bl	80055d8 <st7735_write_reg>
 80041d6:	4602      	mov	r2, r0
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	4413      	add	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80041de:	232c      	movs	r3, #44	; 0x2c
 80041e0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3320      	adds	r3, #32
 80041e6:	f107 0113 	add.w	r1, r7, #19
 80041ea:	2201      	movs	r2, #1
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 fa08 	bl	8005602 <st7735_send_data>
 80041f2:	4602      	mov	r2, r0
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	4413      	add	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80041fa:	232d      	movs	r3, #45	; 0x2d
 80041fc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3320      	adds	r3, #32
 8004202:	f107 0113 	add.w	r1, r7, #19
 8004206:	2201      	movs	r2, #1
 8004208:	4618      	mov	r0, r3
 800420a:	f001 f9fa 	bl	8005602 <st7735_send_data>
 800420e:	4602      	mov	r2, r0
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4413      	add	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8004216:	2301      	movs	r3, #1
 8004218:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3320      	adds	r3, #32
 800421e:	f107 0113 	add.w	r1, r7, #19
 8004222:	2201      	movs	r2, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f001 f9ec 	bl	8005602 <st7735_send_data>
 800422a:	4602      	mov	r2, r0
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	4413      	add	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8004232:	232c      	movs	r3, #44	; 0x2c
 8004234:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3320      	adds	r3, #32
 800423a:	f107 0113 	add.w	r1, r7, #19
 800423e:	2201      	movs	r2, #1
 8004240:	4618      	mov	r0, r3
 8004242:	f001 f9de 	bl	8005602 <st7735_send_data>
 8004246:	4602      	mov	r2, r0
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800424e:	232d      	movs	r3, #45	; 0x2d
 8004250:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3320      	adds	r3, #32
 8004256:	f107 0113 	add.w	r1, r7, #19
 800425a:	2201      	movs	r2, #1
 800425c:	4618      	mov	r0, r3
 800425e:	f001 f9d0 	bl	8005602 <st7735_send_data>
 8004262:	4602      	mov	r2, r0
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4413      	add	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 800426a:	2307      	movs	r3, #7
 800426c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f103 0020 	add.w	r0, r3, #32
 8004274:	f107 0213 	add.w	r2, r7, #19
 8004278:	2301      	movs	r3, #1
 800427a:	21b4      	movs	r1, #180	; 0xb4
 800427c:	f001 f9ac 	bl	80055d8 <st7735_write_reg>
 8004280:	4602      	mov	r2, r0
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	4413      	add	r3, r2
 8004286:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8004288:	23a2      	movs	r3, #162	; 0xa2
 800428a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f103 0020 	add.w	r0, r3, #32
 8004292:	f107 0213 	add.w	r2, r7, #19
 8004296:	2301      	movs	r3, #1
 8004298:	21c0      	movs	r1, #192	; 0xc0
 800429a:	f001 f99d 	bl	80055d8 <st7735_write_reg>
 800429e:	4602      	mov	r2, r0
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4413      	add	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 80042a6:	2302      	movs	r3, #2
 80042a8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3320      	adds	r3, #32
 80042ae:	f107 0113 	add.w	r1, r7, #19
 80042b2:	2201      	movs	r2, #1
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f9a4 	bl	8005602 <st7735_send_data>
 80042ba:	4602      	mov	r2, r0
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	4413      	add	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 80042c2:	2384      	movs	r3, #132	; 0x84
 80042c4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3320      	adds	r3, #32
 80042ca:	f107 0113 	add.w	r1, r7, #19
 80042ce:	2201      	movs	r2, #1
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 f996 	bl	8005602 <st7735_send_data>
 80042d6:	4602      	mov	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	4413      	add	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 80042de:	23c5      	movs	r3, #197	; 0xc5
 80042e0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f103 0020 	add.w	r0, r3, #32
 80042e8:	f107 0213 	add.w	r2, r7, #19
 80042ec:	2301      	movs	r3, #1
 80042ee:	21c1      	movs	r1, #193	; 0xc1
 80042f0:	f001 f972 	bl	80055d8 <st7735_write_reg>
 80042f4:	4602      	mov	r2, r0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	4413      	add	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 80042fc:	230a      	movs	r3, #10
 80042fe:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f103 0020 	add.w	r0, r3, #32
 8004306:	f107 0213 	add.w	r2, r7, #19
 800430a:	2301      	movs	r3, #1
 800430c:	21c2      	movs	r1, #194	; 0xc2
 800430e:	f001 f963 	bl	80055d8 <st7735_write_reg>
 8004312:	4602      	mov	r2, r0
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4413      	add	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3320      	adds	r3, #32
 8004322:	f107 0113 	add.w	r1, r7, #19
 8004326:	2201      	movs	r2, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f001 f96a 	bl	8005602 <st7735_send_data>
 800432e:	4602      	mov	r2, r0
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4413      	add	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8004336:	238a      	movs	r3, #138	; 0x8a
 8004338:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f103 0020 	add.w	r0, r3, #32
 8004340:	f107 0213 	add.w	r2, r7, #19
 8004344:	2301      	movs	r3, #1
 8004346:	21c3      	movs	r1, #195	; 0xc3
 8004348:	f001 f946 	bl	80055d8 <st7735_write_reg>
 800434c:	4602      	mov	r2, r0
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	4413      	add	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8004354:	232a      	movs	r3, #42	; 0x2a
 8004356:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3320      	adds	r3, #32
 800435c:	f107 0113 	add.w	r1, r7, #19
 8004360:	2201      	movs	r2, #1
 8004362:	4618      	mov	r0, r3
 8004364:	f001 f94d 	bl	8005602 <st7735_send_data>
 8004368:	4602      	mov	r2, r0
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	4413      	add	r3, r2
 800436e:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8004370:	238a      	movs	r3, #138	; 0x8a
 8004372:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f103 0020 	add.w	r0, r3, #32
 800437a:	f107 0213 	add.w	r2, r7, #19
 800437e:	2301      	movs	r3, #1
 8004380:	21c4      	movs	r1, #196	; 0xc4
 8004382:	f001 f929 	bl	80055d8 <st7735_write_reg>
 8004386:	4602      	mov	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4413      	add	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 800438e:	23ee      	movs	r3, #238	; 0xee
 8004390:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3320      	adds	r3, #32
 8004396:	f107 0113 	add.w	r1, r7, #19
 800439a:	2201      	movs	r2, #1
 800439c:	4618      	mov	r0, r3
 800439e:	f001 f930 	bl	8005602 <st7735_send_data>
 80043a2:	4602      	mov	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4413      	add	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 80043aa:	230e      	movs	r3, #14
 80043ac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f103 0020 	add.w	r0, r3, #32
 80043b4:	f107 0213 	add.w	r2, r7, #19
 80043b8:	2301      	movs	r3, #1
 80043ba:	21c5      	movs	r1, #197	; 0xc5
 80043bc:	f001 f90c 	bl	80055d8 <st7735_write_reg>
 80043c0:	4602      	mov	r2, r0
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	4413      	add	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	7b1b      	ldrb	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10d      	bne.n	80043ec <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f103 0020 	add.w	r0, r3, #32
 80043d6:	f107 0213 	add.w	r2, r7, #19
 80043da:	2300      	movs	r3, #0
 80043dc:	2121      	movs	r1, #33	; 0x21
 80043de:	f001 f8fb 	bl	80055d8 <st7735_write_reg>
 80043e2:	4602      	mov	r2, r0
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4413      	add	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e00c      	b.n	8004406 <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f103 0020 	add.w	r0, r3, #32
 80043f2:	f107 0213 	add.w	r2, r7, #19
 80043f6:	2300      	movs	r3, #0
 80043f8:	2120      	movs	r1, #32
 80043fa:	f001 f8ed 	bl	80055d8 <st7735_write_reg>
 80043fe:	4602      	mov	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4413      	add	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f103 0020 	add.w	r0, r3, #32
 800440c:	f107 0208 	add.w	r2, r7, #8
 8004410:	2301      	movs	r3, #1
 8004412:	213a      	movs	r1, #58	; 0x3a
 8004414:	f001 f8e0 	bl	80055d8 <st7735_write_reg>
 8004418:	4602      	mov	r2, r0
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	4413      	add	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8004420:	2302      	movs	r3, #2
 8004422:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f103 0020 	add.w	r0, r3, #32
 800442a:	f107 0213 	add.w	r2, r7, #19
 800442e:	2301      	movs	r3, #1
 8004430:	21e0      	movs	r1, #224	; 0xe0
 8004432:	f001 f8d1 	bl	80055d8 <st7735_write_reg>
 8004436:	4602      	mov	r2, r0
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	4413      	add	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 800443e:	231c      	movs	r3, #28
 8004440:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3320      	adds	r3, #32
 8004446:	f107 0113 	add.w	r1, r7, #19
 800444a:	2201      	movs	r2, #1
 800444c:	4618      	mov	r0, r3
 800444e:	f001 f8d8 	bl	8005602 <st7735_send_data>
 8004452:	4602      	mov	r2, r0
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	4413      	add	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 800445a:	2307      	movs	r3, #7
 800445c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3320      	adds	r3, #32
 8004462:	f107 0113 	add.w	r1, r7, #19
 8004466:	2201      	movs	r2, #1
 8004468:	4618      	mov	r0, r3
 800446a:	f001 f8ca 	bl	8005602 <st7735_send_data>
 800446e:	4602      	mov	r2, r0
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4413      	add	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8004476:	2312      	movs	r3, #18
 8004478:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3320      	adds	r3, #32
 800447e:	f107 0113 	add.w	r1, r7, #19
 8004482:	2201      	movs	r2, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f001 f8bc 	bl	8005602 <st7735_send_data>
 800448a:	4602      	mov	r2, r0
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4413      	add	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8004492:	2337      	movs	r3, #55	; 0x37
 8004494:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3320      	adds	r3, #32
 800449a:	f107 0113 	add.w	r1, r7, #19
 800449e:	2201      	movs	r2, #1
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 f8ae 	bl	8005602 <st7735_send_data>
 80044a6:	4602      	mov	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	4413      	add	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 80044ae:	2332      	movs	r3, #50	; 0x32
 80044b0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3320      	adds	r3, #32
 80044b6:	f107 0113 	add.w	r1, r7, #19
 80044ba:	2201      	movs	r2, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 f8a0 	bl	8005602 <st7735_send_data>
 80044c2:	4602      	mov	r2, r0
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	4413      	add	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 80044ca:	2329      	movs	r3, #41	; 0x29
 80044cc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3320      	adds	r3, #32
 80044d2:	f107 0113 	add.w	r1, r7, #19
 80044d6:	2201      	movs	r2, #1
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 f892 	bl	8005602 <st7735_send_data>
 80044de:	4602      	mov	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	4413      	add	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80044e6:	232d      	movs	r3, #45	; 0x2d
 80044e8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3320      	adds	r3, #32
 80044ee:	f107 0113 	add.w	r1, r7, #19
 80044f2:	2201      	movs	r2, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 f884 	bl	8005602 <st7735_send_data>
 80044fa:	4602      	mov	r2, r0
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4413      	add	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8004502:	2329      	movs	r3, #41	; 0x29
 8004504:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3320      	adds	r3, #32
 800450a:	f107 0113 	add.w	r1, r7, #19
 800450e:	2201      	movs	r2, #1
 8004510:	4618      	mov	r0, r3
 8004512:	f001 f876 	bl	8005602 <st7735_send_data>
 8004516:	4602      	mov	r2, r0
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4413      	add	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 800451e:	2325      	movs	r3, #37	; 0x25
 8004520:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3320      	adds	r3, #32
 8004526:	f107 0113 	add.w	r1, r7, #19
 800452a:	2201      	movs	r2, #1
 800452c:	4618      	mov	r0, r3
 800452e:	f001 f868 	bl	8005602 <st7735_send_data>
 8004532:	4602      	mov	r2, r0
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	4413      	add	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 800453a:	232b      	movs	r3, #43	; 0x2b
 800453c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3320      	adds	r3, #32
 8004542:	f107 0113 	add.w	r1, r7, #19
 8004546:	2201      	movs	r2, #1
 8004548:	4618      	mov	r0, r3
 800454a:	f001 f85a 	bl	8005602 <st7735_send_data>
 800454e:	4602      	mov	r2, r0
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	4413      	add	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8004556:	2339      	movs	r3, #57	; 0x39
 8004558:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3320      	adds	r3, #32
 800455e:	f107 0113 	add.w	r1, r7, #19
 8004562:	2201      	movs	r2, #1
 8004564:	4618      	mov	r0, r3
 8004566:	f001 f84c 	bl	8005602 <st7735_send_data>
 800456a:	4602      	mov	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4413      	add	r3, r2
 8004570:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8004572:	2300      	movs	r3, #0
 8004574:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3320      	adds	r3, #32
 800457a:	f107 0113 	add.w	r1, r7, #19
 800457e:	2201      	movs	r2, #1
 8004580:	4618      	mov	r0, r3
 8004582:	f001 f83e 	bl	8005602 <st7735_send_data>
 8004586:	4602      	mov	r2, r0
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	4413      	add	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 800458e:	2301      	movs	r3, #1
 8004590:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3320      	adds	r3, #32
 8004596:	f107 0113 	add.w	r1, r7, #19
 800459a:	2201      	movs	r2, #1
 800459c:	4618      	mov	r0, r3
 800459e:	f001 f830 	bl	8005602 <st7735_send_data>
 80045a2:	4602      	mov	r2, r0
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	4413      	add	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 80045aa:	2303      	movs	r3, #3
 80045ac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3320      	adds	r3, #32
 80045b2:	f107 0113 	add.w	r1, r7, #19
 80045b6:	2201      	movs	r2, #1
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 f822 	bl	8005602 <st7735_send_data>
 80045be:	4602      	mov	r2, r0
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 80045c6:	2310      	movs	r3, #16
 80045c8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3320      	adds	r3, #32
 80045ce:	f107 0113 	add.w	r1, r7, #19
 80045d2:	2201      	movs	r2, #1
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 f814 	bl	8005602 <st7735_send_data>
 80045da:	4602      	mov	r2, r0
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	4413      	add	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 80045e2:	2303      	movs	r3, #3
 80045e4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f103 0020 	add.w	r0, r3, #32
 80045ec:	f107 0213 	add.w	r2, r7, #19
 80045f0:	2301      	movs	r3, #1
 80045f2:	21e1      	movs	r1, #225	; 0xe1
 80045f4:	f000 fff0 	bl	80055d8 <st7735_write_reg>
 80045f8:	4602      	mov	r2, r0
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8004600:	231d      	movs	r3, #29
 8004602:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3320      	adds	r3, #32
 8004608:	f107 0113 	add.w	r1, r7, #19
 800460c:	2201      	movs	r2, #1
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fff7 	bl	8005602 <st7735_send_data>
 8004614:	4602      	mov	r2, r0
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	4413      	add	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 800461c:	2307      	movs	r3, #7
 800461e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3320      	adds	r3, #32
 8004624:	f107 0113 	add.w	r1, r7, #19
 8004628:	2201      	movs	r2, #1
 800462a:	4618      	mov	r0, r3
 800462c:	f000 ffe9 	bl	8005602 <st7735_send_data>
 8004630:	4602      	mov	r2, r0
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4413      	add	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8004638:	2306      	movs	r3, #6
 800463a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3320      	adds	r3, #32
 8004640:	f107 0113 	add.w	r1, r7, #19
 8004644:	2201      	movs	r2, #1
 8004646:	4618      	mov	r0, r3
 8004648:	f000 ffdb 	bl	8005602 <st7735_send_data>
 800464c:	4602      	mov	r2, r0
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	4413      	add	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8004654:	232e      	movs	r3, #46	; 0x2e
 8004656:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3320      	adds	r3, #32
 800465c:	f107 0113 	add.w	r1, r7, #19
 8004660:	2201      	movs	r2, #1
 8004662:	4618      	mov	r0, r3
 8004664:	f000 ffcd 	bl	8005602 <st7735_send_data>
 8004668:	4602      	mov	r2, r0
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	4413      	add	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8004670:	232c      	movs	r3, #44	; 0x2c
 8004672:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3320      	adds	r3, #32
 8004678:	f107 0113 	add.w	r1, r7, #19
 800467c:	2201      	movs	r2, #1
 800467e:	4618      	mov	r0, r3
 8004680:	f000 ffbf 	bl	8005602 <st7735_send_data>
 8004684:	4602      	mov	r2, r0
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4413      	add	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 800468c:	2329      	movs	r3, #41	; 0x29
 800468e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3320      	adds	r3, #32
 8004694:	f107 0113 	add.w	r1, r7, #19
 8004698:	2201      	movs	r2, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 ffb1 	bl	8005602 <st7735_send_data>
 80046a0:	4602      	mov	r2, r0
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	4413      	add	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80046a8:	232d      	movs	r3, #45	; 0x2d
 80046aa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3320      	adds	r3, #32
 80046b0:	f107 0113 	add.w	r1, r7, #19
 80046b4:	2201      	movs	r2, #1
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 ffa3 	bl	8005602 <st7735_send_data>
 80046bc:	4602      	mov	r2, r0
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4413      	add	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80046c4:	232e      	movs	r3, #46	; 0x2e
 80046c6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3320      	adds	r3, #32
 80046cc:	f107 0113 	add.w	r1, r7, #19
 80046d0:	2201      	movs	r2, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ff95 	bl	8005602 <st7735_send_data>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80046e0:	232e      	movs	r3, #46	; 0x2e
 80046e2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3320      	adds	r3, #32
 80046e8:	f107 0113 	add.w	r1, r7, #19
 80046ec:	2201      	movs	r2, #1
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 ff87 	bl	8005602 <st7735_send_data>
 80046f4:	4602      	mov	r2, r0
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4413      	add	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 80046fc:	2337      	movs	r3, #55	; 0x37
 80046fe:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3320      	adds	r3, #32
 8004704:	f107 0113 	add.w	r1, r7, #19
 8004708:	2201      	movs	r2, #1
 800470a:	4618      	mov	r0, r3
 800470c:	f000 ff79 	bl	8005602 <st7735_send_data>
 8004710:	4602      	mov	r2, r0
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	4413      	add	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8004718:	233f      	movs	r3, #63	; 0x3f
 800471a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3320      	adds	r3, #32
 8004720:	f107 0113 	add.w	r1, r7, #19
 8004724:	2201      	movs	r2, #1
 8004726:	4618      	mov	r0, r3
 8004728:	f000 ff6b 	bl	8005602 <st7735_send_data>
 800472c:	4602      	mov	r2, r0
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	4413      	add	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8004734:	2300      	movs	r3, #0
 8004736:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3320      	adds	r3, #32
 800473c:	f107 0113 	add.w	r1, r7, #19
 8004740:	2201      	movs	r2, #1
 8004742:	4618      	mov	r0, r3
 8004744:	f000 ff5d 	bl	8005602 <st7735_send_data>
 8004748:	4602      	mov	r2, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	4413      	add	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8004750:	2300      	movs	r3, #0
 8004752:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3320      	adds	r3, #32
 8004758:	f107 0113 	add.w	r1, r7, #19
 800475c:	2201      	movs	r2, #1
 800475e:	4618      	mov	r0, r3
 8004760:	f000 ff4f 	bl	8005602 <st7735_send_data>
 8004764:	4602      	mov	r2, r0
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	4413      	add	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 800476c:	2302      	movs	r3, #2
 800476e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3320      	adds	r3, #32
 8004774:	f107 0113 	add.w	r1, r7, #19
 8004778:	2201      	movs	r2, #1
 800477a:	4618      	mov	r0, r3
 800477c:	f000 ff41 	bl	8005602 <st7735_send_data>
 8004780:	4602      	mov	r2, r0
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	4413      	add	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8004788:	2310      	movs	r3, #16
 800478a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3320      	adds	r3, #32
 8004790:	f107 0113 	add.w	r1, r7, #19
 8004794:	2201      	movs	r2, #1
 8004796:	4618      	mov	r0, r3
 8004798:	f000 ff33 	bl	8005602 <st7735_send_data>
 800479c:	4602      	mov	r2, r0
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4413      	add	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f103 0020 	add.w	r0, r3, #32
 80047ae:	f107 0213 	add.w	r2, r7, #19
 80047b2:	2301      	movs	r3, #1
 80047b4:	2113      	movs	r1, #19
 80047b6:	f000 ff0f 	bl	80055d8 <st7735_write_reg>
 80047ba:	4602      	mov	r2, r0
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	4413      	add	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f103 0020 	add.w	r0, r3, #32
 80047c8:	f107 0213 	add.w	r2, r7, #19
 80047cc:	2301      	movs	r3, #1
 80047ce:	2129      	movs	r1, #41	; 0x29
 80047d0:	f000 ff02 	bl	80055d8 <st7735_write_reg>
 80047d4:	4602      	mov	r2, r0
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	4413      	add	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f944 	bl	8004a6c <ST7735_SetOrientation>
 80047e4:	4602      	mov	r2, r0
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	4413      	add	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 80047f2:	f04f 33ff 	mov.w	r3, #4294967295
 80047f6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80047f8:	697b      	ldr	r3, [r7, #20]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3320      	adds	r3, #32
 8004826:	f107 0208 	add.w	r2, r7, #8
 800482a:	21da      	movs	r1, #218	; 0xda
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fec0 	bl	80055b2 <st7735_read_reg>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e02d      	b.n	800489c <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f103 0020 	add.w	r0, r3, #32
 8004846:	f107 0308 	add.w	r3, r7, #8
 800484a:	3301      	adds	r3, #1
 800484c:	461a      	mov	r2, r3
 800484e:	21db      	movs	r1, #219	; 0xdb
 8004850:	f000 feaf 	bl	80055b2 <st7735_read_reg>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 800485a:	f04f 33ff 	mov.w	r3, #4294967295
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e01c      	b.n	800489c <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f103 0020 	add.w	r0, r3, #32
 8004868:	f107 0308 	add.w	r3, r7, #8
 800486c:	3302      	adds	r3, #2
 800486e:	461a      	mov	r2, r3
 8004870:	21dc      	movs	r1, #220	; 0xdc
 8004872:	f000 fe9e 	bl	80055b2 <st7735_read_reg>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 800487c:	f04f 33ff 	mov.w	r3, #4294967295
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	e00b      	b.n	800489c <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8004884:	7abb      	ldrb	r3, [r7, #10]
 8004886:	461a      	mov	r2, r3
 8004888:	7a7b      	ldrb	r3, [r7, #9]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	431a      	orrs	r2, r3
 800488e:	7a3b      	ldrb	r3, [r7, #8]
 8004890:	041b      	lsls	r3, r3, #16
 8004892:	431a      	orrs	r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800489c:	68fb      	ldr	r3, [r7, #12]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f103 0020 	add.w	r0, r3, #32
 80048ba:	f107 020b 	add.w	r2, r7, #11
 80048be:	2300      	movs	r3, #0
 80048c0:	2113      	movs	r1, #19
 80048c2:	f000 fe89 	bl	80055d8 <st7735_write_reg>
 80048c6:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80048c8:	210a      	movs	r1, #10
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fe57 	bl	800557e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f103 0020 	add.w	r0, r3, #32
 80048d6:	f107 020b 	add.w	r2, r7, #11
 80048da:	2300      	movs	r3, #0
 80048dc:	2129      	movs	r1, #41	; 0x29
 80048de:	f000 fe7b 	bl	80055d8 <st7735_write_reg>
 80048e2:	4602      	mov	r2, r0
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80048ea:	210a      	movs	r1, #10
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fe46 	bl	800557e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f103 0020 	add.w	r0, r3, #32
 80048f8:	f107 020b 	add.w	r2, r7, #11
 80048fc:	2300      	movs	r3, #0
 80048fe:	2136      	movs	r1, #54	; 0x36
 8004900:	f000 fe6a 	bl	80055d8 <st7735_write_reg>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4413      	add	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <ST7735_DisplayOn+0xc0>)
 800490e:	7b1b      	ldrb	r3, [r3, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8004914:	4b14      	ldr	r3, [pc, #80]	; (8004968 <ST7735_DisplayOn+0xc0>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a14      	ldr	r2, [pc, #80]	; (800496c <ST7735_DisplayOn+0xc4>)
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4413      	add	r3, r2
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004922:	f043 0308 	orr.w	r3, r3, #8
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e006      	b.n	8004938 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800492a:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <ST7735_DisplayOn+0xc0>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	4a0f      	ldr	r2, [pc, #60]	; (800496c <ST7735_DisplayOn+0xc4>)
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4413      	add	r3, r2
 8004934:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004936:	b2db      	uxtb	r3, r3
 8004938:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3320      	adds	r3, #32
 800493e:	f107 010b 	add.w	r1, r7, #11
 8004942:	2201      	movs	r2, #1
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fe5c 	bl	8005602 <st7735_send_data>
 800494a:	4602      	mov	r2, r0
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8004958:	f04f 33ff 	mov.w	r3, #4294967295
 800495c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800495e:	68fb      	ldr	r3, [r7, #12]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	24007198 	.word	0x24007198
 800496c:	24000104 	.word	0x24000104

08004970 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f103 0020 	add.w	r0, r3, #32
 8004982:	f107 020b 	add.w	r2, r7, #11
 8004986:	2300      	movs	r3, #0
 8004988:	2113      	movs	r1, #19
 800498a:	f000 fe25 	bl	80055d8 <st7735_write_reg>
 800498e:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8004990:	210a      	movs	r1, #10
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fdf3 	bl	800557e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f103 0020 	add.w	r0, r3, #32
 800499e:	f107 020b 	add.w	r2, r7, #11
 80049a2:	2300      	movs	r3, #0
 80049a4:	2128      	movs	r1, #40	; 0x28
 80049a6:	f000 fe17 	bl	80055d8 <st7735_write_reg>
 80049aa:	4602      	mov	r2, r0
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80049b2:	210a      	movs	r1, #10
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fde2 	bl	800557e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f103 0020 	add.w	r0, r3, #32
 80049c0:	f107 020b 	add.w	r2, r7, #11
 80049c4:	2300      	movs	r3, #0
 80049c6:	2136      	movs	r1, #54	; 0x36
 80049c8:	f000 fe06 	bl	80055d8 <st7735_write_reg>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80049d4:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <ST7735_DisplayOff+0xc0>)
 80049d6:	7b1b      	ldrb	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80049dc:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <ST7735_DisplayOff+0xc0>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <ST7735_DisplayOff+0xc4>)
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4413      	add	r3, r2
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80049ea:	f043 0308 	orr.w	r3, r3, #8
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	e006      	b.n	8004a00 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80049f2:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <ST7735_DisplayOff+0xc0>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	4a0f      	ldr	r2, [pc, #60]	; (8004a34 <ST7735_DisplayOff+0xc4>)
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4413      	add	r3, r2
 80049fc:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3320      	adds	r3, #32
 8004a06:	f107 010b 	add.w	r1, r7, #11
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fdf8 	bl	8005602 <st7735_send_data>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8004a20:	f04f 33ff 	mov.w	r3, #4294967295
 8004a24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004a26:	68fb      	ldr	r3, [r7, #12]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	24007198 	.word	0x24007198
 8004a34:	24000104 	.word	0x24000104

08004a38 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 8004a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8004a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <ST7735_SetOrientation+0x1a>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d119      	bne.n	8004aba <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	7b5b      	ldrb	r3, [r3, #13]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d106      	bne.n	8004a9c <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8004a8e:	4b3c      	ldr	r3, [pc, #240]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004a90:	2250      	movs	r2, #80	; 0x50
 8004a92:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8004a94:	4b3a      	ldr	r3, [pc, #232]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004a96:	22a0      	movs	r2, #160	; 0xa0
 8004a98:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004a9a:	e028      	b.n	8004aee <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	7b5b      	ldrb	r3, [r3, #13]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <ST7735_SetOrientation+0x40>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	7b5b      	ldrb	r3, [r3, #13]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d120      	bne.n	8004aee <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8004aac:	4b34      	ldr	r3, [pc, #208]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004aae:	2280      	movs	r2, #128	; 0x80
 8004ab0:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 8004ab2:	4b33      	ldr	r3, [pc, #204]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004ab4:	22a0      	movs	r2, #160	; 0xa0
 8004ab6:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004ab8:	e019      	b.n	8004aee <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	7b5b      	ldrb	r3, [r3, #13]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d106      	bne.n	8004ad0 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 8004ac2:	4b2f      	ldr	r3, [pc, #188]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004ac4:	22a0      	movs	r2, #160	; 0xa0
 8004ac6:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 8004ac8:	4b2d      	ldr	r3, [pc, #180]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004aca:	2250      	movs	r2, #80	; 0x50
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	e00f      	b.n	8004af0 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	7b5b      	ldrb	r3, [r3, #13]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <ST7735_SetOrientation+0x74>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	7b5b      	ldrb	r3, [r3, #13]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d107      	bne.n	8004af0 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8004ae0:	4b27      	ldr	r3, [pc, #156]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004ae2:	22a0      	movs	r2, #160	; 0xa0
 8004ae4:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 8004ae6:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004ae8:	2280      	movs	r2, #128	; 0x80
 8004aea:	605a      	str	r2, [r3, #4]
 8004aec:	e000      	b.n	8004af0 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004aee:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004af6:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	7b1a      	ldrb	r2, [r3, #12]
 8004afc:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004afe:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	7b5a      	ldrb	r2, [r3, #13]
 8004b04:	4b1e      	ldr	r3, [pc, #120]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004b06:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	2200      	movs	r2, #0
 8004b16:	2100      	movs	r1, #0
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fbdf 	bl	80052dc <ST7735_SetDisplayWindow>
 8004b1e:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004b20:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004b22:	7b1b      	ldrb	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <ST7735_SetOrientation+0x118>)
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004b36:	f043 0308 	orr.w	r3, r3, #8
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	e006      	b.n	8004b4c <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <ST7735_SetOrientation+0x114>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <ST7735_SetOrientation+0x118>)
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f103 0020 	add.w	r0, r3, #32
 8004b54:	f107 020b 	add.w	r2, r7, #11
 8004b58:	2301      	movs	r3, #1
 8004b5a:	2136      	movs	r1, #54	; 0x36
 8004b5c:	f000 fd3c 	bl	80055d8 <st7735_write_reg>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 8004b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b72:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	24007198 	.word	0x24007198
 8004b84:	24000104 	.word	0x24000104

08004b88 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <ST7735_GetOrientation+0x20>)
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	24007198 	.word	0x24007198

08004bac <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8004bb8:	4b59      	ldr	r3, [pc, #356]	; (8004d20 <ST7735_SetCursor+0x174>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d821      	bhi.n	8004c04 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8004bc0:	4b57      	ldr	r3, [pc, #348]	; (8004d20 <ST7735_SetCursor+0x174>)
 8004bc2:	7b5b      	ldrb	r3, [r3, #13]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d10e      	bne.n	8004be6 <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8004bc8:	4b55      	ldr	r3, [pc, #340]	; (8004d20 <ST7735_SetCursor+0x174>)
 8004bca:	7b1b      	ldrb	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <ST7735_SetCursor+0x32>
				Xpos += 26;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	331a      	adds	r3, #26
 8004bd4:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	607b      	str	r3, [r7, #4]
 8004bdc:	e033      	b.n	8004c46 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	3318      	adds	r3, #24
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	e02f      	b.n	8004c46 <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8004be6:	4b4e      	ldr	r3, [pc, #312]	; (8004d20 <ST7735_SetCursor+0x174>)
 8004be8:	7b5b      	ldrb	r3, [r3, #13]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d12b      	bne.n	8004c46 <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004bee:	4b4c      	ldr	r3, [pc, #304]	; (8004d20 <ST7735_SetCursor+0x174>)
 8004bf0:	7b1b      	ldrb	r3, [r3, #12]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d127      	bne.n	8004c46 <ST7735_SetCursor+0x9a>
				Xpos += 2;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	e020      	b.n	8004c46 <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8004c04:	4b46      	ldr	r3, [pc, #280]	; (8004d20 <ST7735_SetCursor+0x174>)
 8004c06:	7b5b      	ldrb	r3, [r3, #13]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10e      	bne.n	8004c2a <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8004c0c:	4b44      	ldr	r3, [pc, #272]	; (8004d20 <ST7735_SetCursor+0x174>)
 8004c0e:	7b1b      	ldrb	r3, [r3, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <ST7735_SetCursor+0x76>
				Xpos += 1;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	331a      	adds	r3, #26
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	e011      	b.n	8004c46 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3318      	adds	r3, #24
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	e00d      	b.n	8004c46 <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8004c2a:	4b3d      	ldr	r3, [pc, #244]	; (8004d20 <ST7735_SetCursor+0x174>)
 8004c2c:	7b5b      	ldrb	r3, [r3, #13]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d109      	bne.n	8004c46 <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004c32:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <ST7735_SetCursor+0x174>)
 8004c34:	7b1b      	ldrb	r3, [r3, #12]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d105      	bne.n	8004c46 <ST7735_SetCursor+0x9a>
				Xpos += 1;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3302      	adds	r3, #2
 8004c44:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f103 0020 	add.w	r0, r3, #32
 8004c4c:	f107 0213 	add.w	r2, r7, #19
 8004c50:	2300      	movs	r3, #0
 8004c52:	212a      	movs	r1, #42	; 0x2a
 8004c54:	f000 fcc0 	bl	80055d8 <st7735_write_reg>
 8004c58:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3320      	adds	r3, #32
 8004c66:	f107 0113 	add.w	r1, r7, #19
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fcc8 	bl	8005602 <st7735_send_data>
 8004c72:	4602      	mov	r2, r0
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4413      	add	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3320      	adds	r3, #32
 8004c84:	f107 0113 	add.w	r1, r7, #19
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fcb9 	bl	8005602 <st7735_send_data>
 8004c90:	4602      	mov	r2, r0
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4413      	add	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f103 0020 	add.w	r0, r3, #32
 8004c9e:	f107 0213 	add.w	r2, r7, #19
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	212b      	movs	r1, #43	; 0x2b
 8004ca6:	f000 fc97 	bl	80055d8 <st7735_write_reg>
 8004caa:	4602      	mov	r2, r0
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4413      	add	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0a1b      	lsrs	r3, r3, #8
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3320      	adds	r3, #32
 8004cbe:	f107 0113 	add.w	r1, r7, #19
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fc9c 	bl	8005602 <st7735_send_data>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	4413      	add	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3320      	adds	r3, #32
 8004cdc:	f107 0113 	add.w	r1, r7, #19
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fc8d 	bl	8005602 <st7735_send_data>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	4413      	add	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f103 0020 	add.w	r0, r3, #32
 8004cf6:	f107 0213 	add.w	r2, r7, #19
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	212c      	movs	r1, #44	; 0x2c
 8004cfe:	f000 fc6b 	bl	80055d8 <st7735_write_reg>
 8004d02:	4602      	mov	r2, r0
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	4413      	add	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 8004d10:	f04f 33ff 	mov.w	r3, #4294967295
 8004d14:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004d16:	697b      	ldr	r3, [r7, #20]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	24007198 	.word	0x24007198

08004d24 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b090      	sub	sp, #64	; 0x40
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	330a      	adds	r3, #10
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	330b      	adds	r3, #11
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	441a      	add	r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	041b      	lsls	r3, r3, #16
 8004d54:	441a      	add	r2, r3
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	330d      	adds	r3, #13
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	061b      	lsls	r3, r3, #24
 8004d5e:	4413      	add	r3, r2
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	3312      	adds	r3, #18
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	3313      	adds	r3, #19
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	441a      	add	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	041b      	lsls	r3, r3, #16
 8004d7c:	441a      	add	r2, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	3315      	adds	r3, #21
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	061b      	lsls	r3, r3, #24
 8004d86:	4413      	add	r3, r2
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	3316      	adds	r3, #22
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	3317      	adds	r3, #23
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	441a      	add	r2, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	3318      	adds	r3, #24
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	441a      	add	r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	3319      	adds	r3, #25
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	4413      	add	r3, r2
 8004db0:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	3302      	adds	r3, #2
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	3303      	adds	r3, #3
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	441a      	add	r2, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	441a      	add	r2, r3
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	3305      	adds	r3, #5
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	4413      	add	r3, r2
 8004dd8:	61fb      	str	r3, [r7, #28]
  size = size - index;
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	4413      	add	r3, r2
 8004de8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 8004dea:	4b51      	ldr	r3, [pc, #324]	; (8004f30 <ST7735_DrawBitmap+0x20c>)
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	1ad2      	subs	r2, r2, r3
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fa6a 	bl	80052dc <ST7735_SetDisplayWindow>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 8004e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e12:	637b      	str	r3, [r7, #52]	; 0x34
 8004e14:	e087      	b.n	8004f26 <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004e16:	4b46      	ldr	r3, [pc, #280]	; (8004f30 <ST7735_DrawBitmap+0x20c>)
 8004e18:	7b1b      	ldrb	r3, [r3, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8004e1e:	4b44      	ldr	r3, [pc, #272]	; (8004f30 <ST7735_DrawBitmap+0x20c>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	4a44      	ldr	r2, [pc, #272]	; (8004f34 <ST7735_DrawBitmap+0x210>)
 8004e24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e28:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004e2a:	f043 0308 	orr.w	r3, r3, #8
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	e005      	b.n	8004e3e <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 8004e32:	4b3f      	ldr	r3, [pc, #252]	; (8004f30 <ST7735_DrawBitmap+0x20c>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	4a3f      	ldr	r2, [pc, #252]	; (8004f34 <ST7735_DrawBitmap+0x210>)
 8004e38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f103 0020 	add.w	r0, r3, #32
 8004e46:	f107 0213 	add.w	r2, r7, #19
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	2136      	movs	r1, #54	; 0x36
 8004e4e:	f000 fbc3 	bl	80055d8 <st7735_write_reg>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5e:	e062      	b.n	8004f26 <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7ff fea1 	bl	8004bac <ST7735_SetCursor>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
 8004e74:	637b      	str	r3, [r7, #52]	; 0x34
 8004e76:	e056      	b.n	8004f26 <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3320      	adds	r3, #32
 8004e88:	f107 0114 	add.w	r1, r7, #20
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fbb7 	bl	8005602 <st7735_send_data>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004ea0:	e009      	b.n	8004eb6 <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	3302      	adds	r3, #2
 8004eac:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8004eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3e0      	bcc.n	8004e78 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004eb6:	4b1e      	ldr	r3, [pc, #120]	; (8004f30 <ST7735_DrawBitmap+0x20c>)
 8004eb8:	7b1b      	ldrb	r3, [r3, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8004ebe:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <ST7735_DrawBitmap+0x20c>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <ST7735_DrawBitmap+0x210>)
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004ecc:	f043 0308 	orr.w	r3, r3, #8
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	e006      	b.n	8004ee2 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8004ed4:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <ST7735_DrawBitmap+0x20c>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a16      	ldr	r2, [pc, #88]	; (8004f34 <ST7735_DrawBitmap+0x210>)
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	4413      	add	r3, r2
 8004ede:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f103 0020 	add.w	r0, r3, #32
 8004eea:	f107 0213 	add.w	r2, r7, #19
 8004eee:	2301      	movs	r3, #1
 8004ef0:	2136      	movs	r1, #54	; 0x36
 8004ef2:	f000 fb71 	bl	80055d8 <st7735_write_reg>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 8004efc:	f04f 33ff 	mov.w	r3, #4294967295
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
 8004f02:	e010      	b.n	8004f26 <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 8004f04:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <ST7735_DrawBitmap+0x20c>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <ST7735_DrawBitmap+0x20c>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	2200      	movs	r2, #0
 8004f12:	2100      	movs	r1, #0
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f9e1 	bl	80052dc <ST7735_SetDisplayWindow>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 8004f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3738      	adds	r7, #56	; 0x38
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	24007198 	.word	0x24007198
 8004f34:	24000104 	.word	0x24000104

08004f38 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	441a      	add	r2, r3
 8004f54:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <ST7735_FillRGBRect+0xcc>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d806      	bhi.n	8004f6a <ST7735_FillRGBRect+0x32>
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	441a      	add	r2, r3
 8004f62:	4b28      	ldr	r3, [pc, #160]	; (8005004 <ST7735_FillRGBRect+0xcc>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d903      	bls.n	8004f72 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	e042      	b.n	8004ff8 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8004f72:	2300      	movs	r3, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e03b      	b.n	8004ff0 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff fe12 	bl	8004bac <ST7735_SetCursor>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	e029      	b.n	8004fea <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e013      	b.n	8004fc4 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	7811      	ldrb	r1, [r2, #0]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <ST7735_FillRGBRect+0xd0>)
 8004fa6:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	7811      	ldrb	r1, [r2, #0]
 8004fb4:	4a14      	ldr	r2, [pc, #80]	; (8005008 <ST7735_FillRGBRect+0xd0>)
 8004fb6:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	3302      	adds	r3, #2
 8004fbc:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d3e7      	bcc.n	8004f9c <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f103 0020 	add.w	r0, r3, #32
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	490b      	ldr	r1, [pc, #44]	; (8005008 <ST7735_FillRGBRect+0xd0>)
 8004fda:	f000 fb12 	bl	8005602 <st7735_send_data>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8004fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe8:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3301      	adds	r3, #1
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d3bf      	bcc.n	8004f78 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	24007198 	.word	0x24007198
 8005008:	24002604 	.word	0x24002604

0800500c <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	441a      	add	r2, r3
 8005024:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <ST7735_DrawHLine+0x98>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d903      	bls.n	8005034 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 800502c:	f04f 33ff 	mov.w	r3, #4294967295
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e032      	b.n	800509a <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff fdb7 	bl	8004bac <ST7735_SetCursor>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8005044:	f04f 33ff 	mov.w	r3, #4294967295
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e026      	b.n	800509a <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	e010      	b.n	8005074 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	0a1a      	lsrs	r2, r3, #8
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	b2d1      	uxtb	r1, r2
 800505c:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <ST7735_DrawHLine+0x9c>)
 800505e:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	3301      	adds	r3, #1
 8005066:	6a3a      	ldr	r2, [r7, #32]
 8005068:	b2d1      	uxtb	r1, r2
 800506a:	4a0f      	ldr	r2, [pc, #60]	; (80050a8 <ST7735_DrawHLine+0x9c>)
 800506c:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	3301      	adds	r3, #1
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d3ea      	bcc.n	8005052 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f103 0020 	add.w	r0, r3, #32
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	461a      	mov	r2, r3
 8005088:	4907      	ldr	r1, [pc, #28]	; (80050a8 <ST7735_DrawHLine+0x9c>)
 800508a:	f000 faba 	bl	8005602 <st7735_send_data>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8005094:	f04f 33ff 	mov.w	r3, #4294967295
 8005098:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800509a:	697b      	ldr	r3, [r7, #20]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	24007198 	.word	0x24007198
 80050a8:	24002884 	.word	0x24002884

080050ac <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	441a      	add	r2, r3
 80050c4:	4b12      	ldr	r3, [pc, #72]	; (8005110 <ST7735_DrawVLine+0x64>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d903      	bls.n	80050d4 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 80050cc:	f04f 33ff 	mov.w	r3, #4294967295
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e018      	b.n	8005106 <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	e011      	b.n	80050fe <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	441a      	add	r2, r3
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f841 	bl	800516c <ST7735_SetPixel>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295
 80050f4:	617b      	str	r3, [r7, #20]
        break;
 80050f6:	e006      	b.n	8005106 <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	3301      	adds	r3, #1
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d3e9      	bcc.n	80050da <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8005106:	697b      	ldr	r3, [r7, #20]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	24007198 	.word	0x24007198

08005114 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e014      	b.n	800515a <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff ff66 	bl	800500c <ST7735_DrawHLine>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
 800514a:	61fb      	str	r3, [r7, #28]
      break;
 800514c:	e009      	b.n	8005162 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3301      	adds	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	3301      	adds	r3, #1
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	429a      	cmp	r2, r3
 8005160:	d3e6      	bcc.n	8005130 <ST7735_FillRect+0x1c>
  }

  return ret;
 8005162:	69fb      	ldr	r3, [r7, #28]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	b29b      	uxth	r3, r3
 8005186:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	0a1b      	lsrs	r3, r3, #8
 800518c:	b29a      	uxth	r2, r3
 800518e:	8a7b      	ldrh	r3, [r7, #18]
 8005190:	4313      	orrs	r3, r2
 8005192:	b29b      	uxth	r3, r3
 8005194:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8005196:	4b16      	ldr	r3, [pc, #88]	; (80051f0 <ST7735_SetPixel+0x84>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d204      	bcs.n	80051aa <ST7735_SetPixel+0x3e>
 80051a0:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <ST7735_SetPixel+0x84>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d303      	bcc.n	80051b2 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 80051aa:	f04f 33ff 	mov.w	r3, #4294967295
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	e019      	b.n	80051e6 <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff fcf8 	bl	8004bac <ST7735_SetCursor>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 80051c2:	f04f 33ff 	mov.w	r3, #4294967295
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e00d      	b.n	80051e6 <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3320      	adds	r3, #32
 80051ce:	f107 0112 	add.w	r1, r7, #18
 80051d2:	2202      	movs	r2, #2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fa14 	bl	8005602 <st7735_send_data>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 80051e0:	f04f 33ff 	mov.w	r3, #4294967295
 80051e4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80051e6:	697b      	ldr	r3, [r7, #20]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	24007198 	.word	0x24007198

080051f4 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff fcd0 	bl	8004bac <ST7735_SetCursor>
 800520c:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3320      	adds	r3, #32
 8005212:	f107 0211 	add.w	r2, r7, #17
 8005216:	212e      	movs	r1, #46	; 0x2e
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f9ca 	bl	80055b2 <st7735_read_reg>
 800521e:	4602      	mov	r2, r0
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4413      	add	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3320      	adds	r3, #32
 800522a:	f107 0111 	add.w	r1, r7, #17
 800522e:	2201      	movs	r2, #1
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f9f8 	bl	8005626 <st7735_recv_data>
 8005236:	4602      	mov	r2, r0
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3320      	adds	r3, #32
 8005242:	f107 0113 	add.w	r1, r7, #19
 8005246:	2201      	movs	r2, #1
 8005248:	4618      	mov	r0, r3
 800524a:	f000 f9ec 	bl	8005626 <st7735_recv_data>
 800524e:	4602      	mov	r2, r0
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3320      	adds	r3, #32
 800525a:	f107 0112 	add.w	r1, r7, #18
 800525e:	2201      	movs	r2, #1
 8005260:	4618      	mov	r0, r3
 8005262:	f000 f9e0 	bl	8005626 <st7735_recv_data>
 8005266:	4602      	mov	r2, r0
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	4413      	add	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 800526e:	7cfb      	ldrb	r3, [r7, #19]
 8005270:	461a      	mov	r2, r3
 8005272:	7cbb      	ldrb	r3, [r7, #18]
 8005274:	021b      	lsls	r3, r3, #8
 8005276:	441a      	add	r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8005282:	f04f 33ff 	mov.w	r3, #4294967295
 8005286:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8005288:	697b      	ldr	r3, [r7, #20]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <ST7735_GetXSize+0x20>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	24007198 	.word	0x24007198

080052b8 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 80052c2:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <ST7735_GetYSize+0x20>)
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	24007198 	.word	0x24007198

080052dc <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80052ea:	4b7d      	ldr	r3, [pc, #500]	; (80054e0 <ST7735_SetDisplayWindow+0x204>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d821      	bhi.n	8005336 <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80052f2:	4b7b      	ldr	r3, [pc, #492]	; (80054e0 <ST7735_SetDisplayWindow+0x204>)
 80052f4:	7b5b      	ldrb	r3, [r3, #13]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10e      	bne.n	8005318 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80052fa:	4b79      	ldr	r3, [pc, #484]	; (80054e0 <ST7735_SetDisplayWindow+0x204>)
 80052fc:	7b1b      	ldrb	r3, [r3, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	331a      	adds	r3, #26
 8005306:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3301      	adds	r3, #1
 800530c:	607b      	str	r3, [r7, #4]
 800530e:	e036      	b.n	800537e <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	3318      	adds	r3, #24
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	e032      	b.n	800537e <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8005318:	4b71      	ldr	r3, [pc, #452]	; (80054e0 <ST7735_SetDisplayWindow+0x204>)
 800531a:	7b5b      	ldrb	r3, [r3, #13]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d12e      	bne.n	800537e <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8005320:	4b6f      	ldr	r3, [pc, #444]	; (80054e0 <ST7735_SetDisplayWindow+0x204>)
 8005322:	7b1b      	ldrb	r3, [r3, #12]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d12a      	bne.n	800537e <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	3302      	adds	r3, #2
 800532c:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3301      	adds	r3, #1
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	e023      	b.n	800537e <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8005336:	4b6a      	ldr	r3, [pc, #424]	; (80054e0 <ST7735_SetDisplayWindow+0x204>)
 8005338:	7b5b      	ldrb	r3, [r3, #13]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d111      	bne.n	8005362 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 800533e:	4b68      	ldr	r3, [pc, #416]	; (80054e0 <ST7735_SetDisplayWindow+0x204>)
 8005340:	7b1b      	ldrb	r3, [r3, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3301      	adds	r3, #1
 800534a:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	331a      	adds	r3, #26
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	e014      	b.n	800537e <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	3301      	adds	r3, #1
 8005358:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3318      	adds	r3, #24
 800535e:	607b      	str	r3, [r7, #4]
 8005360:	e00d      	b.n	800537e <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8005362:	4b5f      	ldr	r3, [pc, #380]	; (80054e0 <ST7735_SetDisplayWindow+0x204>)
 8005364:	7b5b      	ldrb	r3, [r3, #13]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d109      	bne.n	800537e <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 800536a:	4b5d      	ldr	r3, [pc, #372]	; (80054e0 <ST7735_SetDisplayWindow+0x204>)
 800536c:	7b1b      	ldrb	r3, [r3, #12]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d105      	bne.n	800537e <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	3301      	adds	r3, #1
 8005376:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3302      	adds	r3, #2
 800537c:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f103 0020 	add.w	r0, r3, #32
 8005384:	f107 0213 	add.w	r2, r7, #19
 8005388:	2300      	movs	r3, #0
 800538a:	212a      	movs	r1, #42	; 0x2a
 800538c:	f000 f924 	bl	80055d8 <st7735_write_reg>
 8005390:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	0a1b      	lsrs	r3, r3, #8
 8005396:	b2db      	uxtb	r3, r3
 8005398:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3320      	adds	r3, #32
 800539e:	f107 0113 	add.w	r1, r7, #19
 80053a2:	2201      	movs	r2, #1
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f92c 	bl	8005602 <st7735_send_data>
 80053aa:	4602      	mov	r2, r0
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	4413      	add	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3320      	adds	r3, #32
 80053bc:	f107 0113 	add.w	r1, r7, #19
 80053c0:	2201      	movs	r2, #1
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f91d 	bl	8005602 <st7735_send_data>
 80053c8:	4602      	mov	r2, r0
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	4413      	add	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	4413      	add	r3, r2
 80053d6:	3b01      	subs	r3, #1
 80053d8:	0a1b      	lsrs	r3, r3, #8
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3320      	adds	r3, #32
 80053e2:	f107 0113 	add.w	r1, r7, #19
 80053e6:	2201      	movs	r2, #1
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f90a 	bl	8005602 <st7735_send_data>
 80053ee:	4602      	mov	r2, r0
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4413      	add	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	4413      	add	r3, r2
 8005400:	b2db      	uxtb	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b2db      	uxtb	r3, r3
 8005406:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3320      	adds	r3, #32
 800540c:	f107 0113 	add.w	r1, r7, #19
 8005410:	2201      	movs	r2, #1
 8005412:	4618      	mov	r0, r3
 8005414:	f000 f8f5 	bl	8005602 <st7735_send_data>
 8005418:	4602      	mov	r2, r0
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f103 0020 	add.w	r0, r3, #32
 8005426:	f107 0213 	add.w	r2, r7, #19
 800542a:	2300      	movs	r3, #0
 800542c:	212b      	movs	r1, #43	; 0x2b
 800542e:	f000 f8d3 	bl	80055d8 <st7735_write_reg>
 8005432:	4602      	mov	r2, r0
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	b2db      	uxtb	r3, r3
 8005440:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3320      	adds	r3, #32
 8005446:	f107 0113 	add.w	r1, r7, #19
 800544a:	2201      	movs	r2, #1
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f8d8 	bl	8005602 <st7735_send_data>
 8005452:	4602      	mov	r2, r0
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4413      	add	r3, r2
 8005458:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3320      	adds	r3, #32
 8005464:	f107 0113 	add.w	r1, r7, #19
 8005468:	2201      	movs	r2, #1
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f8c9 	bl	8005602 <st7735_send_data>
 8005470:	4602      	mov	r2, r0
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	4413      	add	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	4413      	add	r3, r2
 800547e:	3b01      	subs	r3, #1
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	b2db      	uxtb	r3, r3
 8005484:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3320      	adds	r3, #32
 800548a:	f107 0113 	add.w	r1, r7, #19
 800548e:	2201      	movs	r2, #1
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f8b6 	bl	8005602 <st7735_send_data>
 8005496:	4602      	mov	r2, r0
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	4413      	add	r3, r2
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3320      	adds	r3, #32
 80054b4:	f107 0113 	add.w	r1, r7, #19
 80054b8:	2201      	movs	r2, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f8a1 	bl	8005602 <st7735_send_data>
 80054c0:	4602      	mov	r2, r0
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	4413      	add	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80054d4:	697b      	ldr	r3, [r7, #20]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	24007198 	.word	0x24007198

080054e4 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	460b      	mov	r3, r1
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	7afa      	ldrb	r2, [r7, #11]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4610      	mov	r0, r2
 8005500:	4798      	blx	r3
 8005502:	4603      	mov	r3, r0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	460b      	mov	r3, r1
 800551a:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	7af8      	ldrb	r0, [r7, #11]
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4798      	blx	r3
 800552c:	4603      	mov	r3, r0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	68b8      	ldr	r0, [r7, #8]
 800554e:	4798      	blx	r3
 8005550:	4603      	mov	r3, r0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	68b8      	ldr	r0, [r7, #8]
 8005572:	4798      	blx	r3
 8005574:	4603      	mov	r3, r0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	4798      	blx	r3
 800558e:	4603      	mov	r3, r0
 8005590:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8005592:	bf00      	nop
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	4798      	blx	r3
 800559a:	4603      	mov	r3, r0
 800559c:	461a      	mov	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d8f5      	bhi.n	8005594 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	460b      	mov	r3, r1
 80055bc:	607a      	str	r2, [r7, #4]
 80055be:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	6910      	ldr	r0, [r2, #16]
 80055c8:	7af9      	ldrb	r1, [r7, #11]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4798      	blx	r3
 80055ce:	4603      	mov	r3, r0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 80055d8:	b590      	push	{r4, r7, lr}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	460b      	mov	r3, r1
 80055e6:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681c      	ldr	r4, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6918      	ldr	r0, [r3, #16]
 80055f0:	7af9      	ldrb	r1, [r7, #11]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	47a0      	blx	r4
 80055f8:	4603      	mov	r3, r0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd90      	pop	{r4, r7, pc}

08005602 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	6910      	ldr	r0, [r2, #16]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	4798      	blx	r3
 800561c:	4603      	mov	r3, r0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	6910      	ldr	r0, [r2, #16]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	4798      	blx	r3
 8005640:	4603      	mov	r3, r0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <w25qxx_Init>:
w25qxx_StatusTypeDef w25qxx_Mode = w25qxx_SPIMode;
uint8_t w25qxx_StatusReg[3];
uint16_t w25qxx_ID;

void w25qxx_Init(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8005650:	2005      	movs	r0, #5
 8005652:	f000 fb11 	bl	8005c78 <HAL_Delay>
	MX_QUADSPI_Init();
 8005656:	f7fc ffa5 	bl	80025a4 <MX_QUADSPI_Init>
	QSPI_ResetDevice(&hqspi);
 800565a:	4808      	ldr	r0, [pc, #32]	; (800567c <w25qxx_Init+0x30>)
 800565c:	f000 f9c6 	bl	80059ec <QSPI_ResetDevice>
	HAL_Delay(0); // 1ms wait device stable
 8005660:	2000      	movs	r0, #0
 8005662:	f000 fb09 	bl	8005c78 <HAL_Delay>
	w25qxx_ID = w25qxx_GetID();
 8005666:	f000 f80d 	bl	8005684 <w25qxx_GetID>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	4b04      	ldr	r3, [pc, #16]	; (8005680 <w25qxx_Init+0x34>)
 8005670:	801a      	strh	r2, [r3, #0]
	w25qxx_ReadAllStatusReg();
 8005672:	f000 f897 	bl	80057a4 <w25qxx_ReadAllStatusReg>
}
 8005676:	bf00      	nop
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	24006d94 	.word	0x24006d94
 8005680:	240071a8 	.word	0x240071a8

08005684 <w25qxx_GetID>:

uint16_t w25qxx_GetID(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af06      	add	r7, sp, #24
	uint8_t ID[6];
	uint16_t deviceID;
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 800568a:	4b23      	ldr	r3, [pc, #140]	; (8005718 <w25qxx_GetID+0x94>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b05      	cmp	r3, #5
 8005690:	d114      	bne.n	80056bc <w25qxx_GetID+0x38>
		QSPI_Send_CMD(&hqspi,W25X_QUAD_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,6,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8005692:	2306      	movs	r3, #6
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800569a:	9303      	str	r3, [sp, #12]
 800569c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056a0:	9302      	str	r3, [sp, #8]
 80056a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	2306      	movs	r3, #6
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b0:	2200      	movs	r2, #0
 80056b2:	2194      	movs	r1, #148	; 0x94
 80056b4:	4819      	ldr	r0, [pc, #100]	; (800571c <w25qxx_GetID+0x98>)
 80056b6:	f000 f9f2 	bl	8005a9e <QSPI_Send_CMD>
 80056ba:	e013      	b.n	80056e4 <w25qxx_GetID+0x60>
	else
		QSPI_Send_CMD(&hqspi,W25X_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 80056bc:	2306      	movs	r3, #6
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80056c4:	9303      	str	r3, [sp, #12]
 80056c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056ca:	9302      	str	r3, [sp, #8]
 80056cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	2300      	movs	r3, #0
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056da:	2200      	movs	r2, #0
 80056dc:	2190      	movs	r1, #144	; 0x90
 80056de:	480f      	ldr	r0, [pc, #60]	; (800571c <w25qxx_GetID+0x98>)
 80056e0:	f000 f9dd 	bl	8005a9e <QSPI_Send_CMD>

	/* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, ID, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056e4:	463b      	mov	r3, r7
 80056e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ea:	4619      	mov	r1, r3
 80056ec:	480b      	ldr	r0, [pc, #44]	; (800571c <w25qxx_GetID+0x98>)
 80056ee:	f004 f8ef 	bl	80098d0 <HAL_QSPI_Receive>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <w25qxx_GetID+0x78>
  {
    return w25qxx_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e008      	b.n	800570e <w25qxx_GetID+0x8a>
  }
	deviceID = (ID[0] << 8) | ID[1];
 80056fc:	783b      	ldrb	r3, [r7, #0]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	b21a      	sxth	r2, r3
 8005702:	787b      	ldrb	r3, [r7, #1]
 8005704:	b21b      	sxth	r3, r3
 8005706:	4313      	orrs	r3, r2
 8005708:	b21b      	sxth	r3, r3
 800570a:	80fb      	strh	r3, [r7, #6]

	return deviceID;
 800570c:	88fb      	ldrh	r3, [r7, #6]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	24000124 	.word	0x24000124
 800571c:	24006d94 	.word	0x24006d94

08005720 <w25qxx_ReadSR>:

uint8_t w25qxx_ReadSR(uint8_t SR)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	; 0x28
 8005724:	af06      	add	r7, sp, #24
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0;
 800572a:	2300      	movs	r3, #0
 800572c:	73fb      	strb	r3, [r7, #15]
	if(w25qxx_Mode == w25qxx_SPIMode)
 800572e:	4b1b      	ldr	r3, [pc, #108]	; (800579c <w25qxx_ReadSR+0x7c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b05      	cmp	r3, #5
 8005734:	d112      	bne.n	800575c <w25qxx_ReadSR+0x3c>
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE, QSPI_DATA_1_LINE, 1);
 8005736:	79f9      	ldrb	r1, [r7, #7]
 8005738:	2301      	movs	r3, #1
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005740:	9303      	str	r3, [sp, #12]
 8005742:	2300      	movs	r3, #0
 8005744:	9302      	str	r3, [sp, #8]
 8005746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	2300      	movs	r3, #0
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	2300      	movs	r3, #0
 8005752:	2200      	movs	r2, #0
 8005754:	4812      	ldr	r0, [pc, #72]	; (80057a0 <w25qxx_ReadSR+0x80>)
 8005756:	f000 f9a2 	bl	8005a9e <QSPI_Send_CMD>
 800575a:	e011      	b.n	8005780 <w25qxx_ReadSR+0x60>
	else
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 800575c:	79f9      	ldrb	r1, [r7, #7]
 800575e:	2301      	movs	r3, #1
 8005760:	9304      	str	r3, [sp, #16]
 8005762:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005766:	9303      	str	r3, [sp, #12]
 8005768:	2300      	movs	r3, #0
 800576a:	9302      	str	r3, [sp, #8]
 800576c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	2300      	movs	r3, #0
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	2300      	movs	r3, #0
 8005778:	2200      	movs	r2, #0
 800577a:	4809      	ldr	r0, [pc, #36]	; (80057a0 <w25qxx_ReadSR+0x80>)
 800577c:	f000 f98f 	bl	8005a9e <QSPI_Send_CMD>
	
	if (HAL_QSPI_Receive(&hqspi,&byte,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005780:	f107 030f 	add.w	r3, r7, #15
 8005784:	f241 3288 	movw	r2, #5000	; 0x1388
 8005788:	4619      	mov	r1, r3
 800578a:	4805      	ldr	r0, [pc, #20]	; (80057a0 <w25qxx_ReadSR+0x80>)
 800578c:	f004 f8a0 	bl	80098d0 <HAL_QSPI_Receive>
	{
		
	}
  return byte;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	24000124 	.word	0x24000124
 80057a0:	24006d94 	.word	0x24006d94

080057a4 <w25qxx_ReadAllStatusReg>:

  return HAL_QSPI_Transmit(&hqspi,&data,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
}

uint8_t w25qxx_ReadAllStatusReg(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
	
	w25qxx_StatusReg[0] = w25qxx_ReadSR(W25X_ReadStatusReg1);
 80057a8:	2005      	movs	r0, #5
 80057aa:	f7ff ffb9 	bl	8005720 <w25qxx_ReadSR>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <w25qxx_ReadAllStatusReg+0x34>)
 80057b4:	701a      	strb	r2, [r3, #0]
	w25qxx_StatusReg[1] = w25qxx_ReadSR(W25X_ReadStatusReg2);
 80057b6:	2035      	movs	r0, #53	; 0x35
 80057b8:	f7ff ffb2 	bl	8005720 <w25qxx_ReadSR>
 80057bc:	4603      	mov	r3, r0
 80057be:	461a      	mov	r2, r3
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <w25qxx_ReadAllStatusReg+0x34>)
 80057c2:	705a      	strb	r2, [r3, #1]
	w25qxx_StatusReg[2] = w25qxx_ReadSR(W25X_ReadStatusReg3);
 80057c4:	2015      	movs	r0, #21
 80057c6:	f7ff ffab 	bl	8005720 <w25qxx_ReadSR>
 80057ca:	4603      	mov	r3, r0
 80057cc:	461a      	mov	r2, r3
 80057ce:	4b02      	ldr	r3, [pc, #8]	; (80057d8 <w25qxx_ReadAllStatusReg+0x34>)
 80057d0:	709a      	strb	r2, [r3, #2]
	return w25qxx_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	240071ac 	.word	0x240071ac

080057dc <W25QXX_Wait_Busy>:

//�ȴ�����
void W25QXX_Wait_Busy(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
	while((w25qxx_ReadSR(W25X_ReadStatusReg1) & 0x01) == 0x01);
 80057e0:	bf00      	nop
 80057e2:	2005      	movs	r0, #5
 80057e4:	f7ff ff9c 	bl	8005720 <w25qxx_ReadSR>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d0f7      	beq.n	80057e2 <W25QXX_Wait_Busy+0x6>
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <W25qxx_WriteEnable>:
  }
  return w25qxx_OK;
}

uint8_t W25qxx_WriteEnable(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
	return QSPI_WriteEnable(&hqspi);
 80057fc:	4803      	ldr	r0, [pc, #12]	; (800580c <W25qxx_WriteEnable+0x14>)
 80057fe:	f000 f983 	bl	8005b08 <QSPI_WriteEnable>
 8005802:	4603      	mov	r3, r0
 8005804:	b2db      	uxtb	r3, r3
}
 8005806:	4618      	mov	r0, r3
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	24006d94 	.word	0x24006d94

08005810 <W25qxx_EraseSector>:
  * @brief  Erase 4KB Sector of the OSPI memory.
	* @param  SectorAddress: Sector address to erase
  * @retval QSPI memory status
  */
uint8_t W25qxx_EraseSector(uint32_t SectorAddress)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af06      	add	r7, sp, #24
 8005816:	6078      	str	r0, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8005818:	f7ff ffee 	bl	80057f8 <W25qxx_WriteEnable>
	W25QXX_Wait_Busy();
 800581c:	f7ff ffde 	bl	80057dc <W25QXX_Wait_Busy>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8005820:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <W25qxx_EraseSector+0x84>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b05      	cmp	r3, #5
 8005826:	d115      	bne.n	8005854 <W25qxx_EraseSector+0x44>
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_NONE,0);
 8005828:	2300      	movs	r3, #0
 800582a:	9304      	str	r3, [sp, #16]
 800582c:	2300      	movs	r3, #0
 800582e:	9303      	str	r3, [sp, #12]
 8005830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005834:	9302      	str	r3, [sp, #8]
 8005836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	2300      	movs	r3, #0
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	2120      	movs	r1, #32
 8005848:	4813      	ldr	r0, [pc, #76]	; (8005898 <W25qxx_EraseSector+0x88>)
 800584a:	f000 f928 	bl	8005a9e <QSPI_Send_CMD>
 800584e:	4603      	mov	r3, r0
 8005850:	73fb      	strb	r3, [r7, #15]
 8005852:	e014      	b.n	800587e <W25qxx_EraseSector+0x6e>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_NONE,0);
 8005854:	2300      	movs	r3, #0
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	2300      	movs	r3, #0
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005860:	9302      	str	r3, [sp, #8]
 8005862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	2300      	movs	r3, #0
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	2120      	movs	r1, #32
 8005874:	4808      	ldr	r0, [pc, #32]	; (8005898 <W25qxx_EraseSector+0x88>)
 8005876:	f000 f912 	bl	8005a9e <QSPI_Send_CMD>
 800587a:	4603      	mov	r3, r0
 800587c:	73fb      	strb	r3, [r7, #15]
	
	/* �ȴ�������� */
	if(result == w25qxx_OK)
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <W25qxx_EraseSector+0x78>
		W25QXX_Wait_Busy();
 8005884:	f7ff ffaa 	bl	80057dc <W25QXX_Wait_Busy>

	return result;
 8005888:	7bfb      	ldrb	r3, [r7, #15]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	24000124 	.word	0x24000124
 8005898:	24006d94 	.word	0x24006d94

0800589c <W25qxx_PageProgram>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write. Range 1 ~ W25qxx page size
  * @retval QSPI memory status
  */
uint8_t W25qxx_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08c      	sub	sp, #48	; 0x30
 80058a0:	af06      	add	r7, sp, #24
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 80058a8:	f7ff ffa6 	bl	80057f8 <W25qxx_WriteEnable>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 80058ac:	4b22      	ldr	r3, [pc, #136]	; (8005938 <W25qxx_PageProgram+0x9c>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	d116      	bne.n	80058e2 <W25qxx_PageProgram+0x46>
		result = QSPI_Send_CMD(&hqspi,W25X_QUAD_INPUT_PAGE_PROG_CMD,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_4_LINES,Size);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	9304      	str	r3, [sp, #16]
 80058b8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80058bc:	9303      	str	r3, [sp, #12]
 80058be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058c2:	9302      	str	r3, [sp, #8]
 80058c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	2132      	movs	r1, #50	; 0x32
 80058d6:	4819      	ldr	r0, [pc, #100]	; (800593c <W25qxx_PageProgram+0xa0>)
 80058d8:	f000 f8e1 	bl	8005a9e <QSPI_Send_CMD>
 80058dc:	4603      	mov	r3, r0
 80058de:	75fb      	strb	r3, [r7, #23]
 80058e0:	e015      	b.n	800590e <W25qxx_PageProgram+0x72>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_PageProgram,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_4_LINES,Size);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80058ea:	9303      	str	r3, [sp, #12]
 80058ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80058f0:	9302      	str	r3, [sp, #8]
 80058f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	2300      	movs	r3, #0
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	2102      	movs	r1, #2
 8005904:	480d      	ldr	r0, [pc, #52]	; (800593c <W25qxx_PageProgram+0xa0>)
 8005906:	f000 f8ca 	bl	8005a9e <QSPI_Send_CMD>
 800590a:	4603      	mov	r3, r0
 800590c:	75fb      	strb	r3, [r7, #23]
	
	if(result == w25qxx_OK)
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d107      	bne.n	8005924 <W25qxx_PageProgram+0x88>
		result = HAL_QSPI_Transmit(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005914:	f241 3288 	movw	r2, #5000	; 0x1388
 8005918:	68f9      	ldr	r1, [r7, #12]
 800591a:	4808      	ldr	r0, [pc, #32]	; (800593c <W25qxx_PageProgram+0xa0>)
 800591c:	f003 ff46 	bl	80097ac <HAL_QSPI_Transmit>
 8005920:	4603      	mov	r3, r0
 8005922:	75fb      	strb	r3, [r7, #23]
	
	/* �ȴ�д����� */
	if(result == w25qxx_OK)
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <W25qxx_PageProgram+0x92>
		W25QXX_Wait_Busy();
 800592a:	f7ff ff57 	bl	80057dc <W25QXX_Wait_Busy>
	
  return result;
 800592e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	24000124 	.word	0x24000124
 800593c:	24006d94 	.word	0x24006d94

08005940 <W25qxx_Read>:
//��ָ����ַ��ʼ��ȡָ�����ȵ�����
//pBuffer:���ݴ洢��
//ReadAddr:��ʼ��ȡ�ĵ�ַ(���32bit)
//NumByteToRead:Ҫ��ȡ���ֽ���(���65535)
uint8_t W25qxx_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b094      	sub	sp, #80	; 0x50
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
	
	QSPI_CommandTypeDef      s_command;

	/* Configure the command for the read instruction */
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 800594c:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <W25qxx_Read+0xa4>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b04      	cmp	r3, #4
 8005952:	d107      	bne.n	8005964 <W25qxx_Read+0x24>
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8005954:	23eb      	movs	r3, #235	; 0xeb
 8005956:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8005958:	f44f 7340 	mov.w	r3, #768	; 0x300
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD;
 800595e:	2306      	movs	r3, #6
 8005960:	62bb      	str	r3, [r7, #40]	; 0x28
 8005962:	e006      	b.n	8005972 <W25qxx_Read+0x32>
	}
	else 
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8005964:	23eb      	movs	r3, #235	; 0xeb
 8005966:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
		s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD-2;
 800596e:	2304      	movs	r3, #4
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
    }
	
	s_command.Address           = ReadAddr;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	61bb      	str	r3, [r7, #24]
	s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005976:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800597a:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800597c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005980:	623b      	str	r3, [r7, #32]

	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8005982:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.AlternateBytes    = 0xFF;
 8005988:	23ff      	movs	r3, #255	; 0xff
 800598a:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.DataMode          = QSPI_DATA_4_LINES;	
 8005990:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005994:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.NbData            = Size;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	63fb      	str	r3, [r7, #60]	; 0x3c
		
	s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800599a:	2300      	movs	r3, #0
 800599c:	643b      	str	r3, [r7, #64]	; 0x40

	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800599e:	2300      	movs	r3, #0
 80059a0:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80059a2:	2300      	movs	r3, #0
 80059a4:	64bb      	str	r3, [r7, #72]	; 0x48
	
	result = HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80059a6:	f107 0314 	add.w	r3, r7, #20
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4619      	mov	r1, r3
 80059b0:	480d      	ldr	r0, [pc, #52]	; (80059e8 <W25qxx_Read+0xa8>)
 80059b2:	f003 fe9d 	bl	80096f0 <HAL_QSPI_Command>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	if(result == w25qxx_OK)
 80059bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d108      	bne.n	80059d6 <W25qxx_Read+0x96>
		result = HAL_QSPI_Receive(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80059c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c8:	68f9      	ldr	r1, [r7, #12]
 80059ca:	4807      	ldr	r0, [pc, #28]	; (80059e8 <W25qxx_Read+0xa8>)
 80059cc:	f003 ff80 	bl	80098d0 <HAL_QSPI_Receive>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	return result;
 80059d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3750      	adds	r7, #80	; 0x50
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	24000124 	.word	0x24000124
 80059e8:	24006d94 	.word	0x24006d94

080059ec <QSPI_ResetDevice>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetDevice(QSPI_HandleTypeDef *hqspi)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b090      	sub	sp, #64	; 0x40
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80059f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 80059fa:	2366      	movs	r3, #102	; 0x66
 80059fc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005a12:	2300      	movs	r3, #0
 8005a14:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005a16:	2300      	movs	r3, #0
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a1a:	f107 0308 	add.w	r3, r7, #8
 8005a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f003 fe63 	bl	80096f0 <HAL_QSPI_Command>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <QSPI_ResetDevice+0x48>
  {
    return w25qxx_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e030      	b.n	8005a96 <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset device command */
  s_command.Instruction = W25X_ResetDevice;
 8005a34:	2399      	movs	r3, #153	; 0x99
 8005a36:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a38:	f107 0308 	add.w	r3, r7, #8
 8005a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f003 fe54 	bl	80096f0 <HAL_QSPI_Command>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <QSPI_ResetDevice+0x66>
  {
    return w25qxx_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e021      	b.n	8005a96 <QSPI_ResetDevice+0xaa>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005a52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a56:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 8005a58:	2366      	movs	r3, #102	; 0x66
 8005a5a:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a5c:	f107 0308 	add.w	r3, r7, #8
 8005a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f003 fe42 	bl	80096f0 <HAL_QSPI_Command>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <QSPI_ResetDevice+0x8a>
  {
    return w25qxx_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e00f      	b.n	8005a96 <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset memory command */
  s_command.Instruction = W25X_ResetDevice;
 8005a76:	2399      	movs	r3, #153	; 0x99
 8005a78:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a7a:	f107 0308 	add.w	r3, r7, #8
 8005a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f003 fe33 	bl	80096f0 <HAL_QSPI_Command>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <QSPI_ResetDevice+0xa8>
  {
    return w25qxx_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <QSPI_ResetDevice+0xaa>
  }
	
  return w25qxx_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3740      	adds	r7, #64	; 0x40
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <QSPI_Send_CMD>:
 * @return  uint8_t			w25qxx_OK:����
 *                      w25qxx_ERROR:����
 */
static uint8_t QSPI_Send_CMD(QSPI_HandleTypeDef *hqspi,uint32_t instruction, uint32_t address,uint32_t addressSize,uint32_t dummyCycles, 
                    uint32_t instructionMode,uint32_t addressMode, uint32_t dataMode, uint32_t dataSize)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b092      	sub	sp, #72	; 0x48
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction        = instruction;   
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	613b      	str	r3, [r7, #16]
	  Cmdhandler.InstructionMode    = instructionMode;  
 8005ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
	
    Cmdhandler.Address            = address;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	617b      	str	r3, [r7, #20]
    Cmdhandler.AddressSize        = addressSize;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	61fb      	str	r3, [r7, #28]
	  Cmdhandler.AddressMode        = addressMode;
 8005abc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
	  
	  Cmdhandler.AlternateBytes     = 0x00;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61bb      	str	r3, [r7, #24]
    Cmdhandler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	623b      	str	r3, [r7, #32]
	  Cmdhandler.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;                              
 8005ac8:	2300      	movs	r3, #0
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DummyCycles        = dummyCycles;                   
 8005acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
       					      				
    Cmdhandler.DataMode           = dataMode;
 8005ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.NbData             = dataSize; 
 8005ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ad6:	63bb      	str	r3, [r7, #56]	; 0x38
	
    Cmdhandler.DdrMode            = QSPI_DDR_MODE_DISABLE;           	
 8005ad8:	2300      	movs	r3, #0
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8005adc:	2300      	movs	r3, #0
 8005ade:	643b      	str	r3, [r7, #64]	; 0x40
    Cmdhandler.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	647b      	str	r3, [r7, #68]	; 0x44

    if(HAL_QSPI_Command(hqspi, &Cmdhandler, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ae4:	f107 0310 	add.w	r3, r7, #16
 8005ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aec:	4619      	mov	r1, r3
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f003 fdfe 	bl	80096f0 <HAL_QSPI_Command>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <QSPI_Send_CMD+0x60>
      return w25qxx_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <QSPI_Send_CMD+0x62>

    return w25qxx_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3748      	adds	r7, #72	; 0x48
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b096      	sub	sp, #88	; 0x58
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
	if(w25qxx_Mode == w25qxx_QPIMode)
 8005b10:	4b2a      	ldr	r3, [pc, #168]	; (8005bbc <QSPI_WriteEnable+0xb4>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d103      	bne.n	8005b20 <QSPI_WriteEnable+0x18>
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8005b18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b1e:	e002      	b.n	8005b26 <QSPI_WriteEnable+0x1e>
	else 
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b24:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = W25X_WriteEnable;
 8005b26:	2306      	movs	r3, #6
 8005b28:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005b42:	2300      	movs	r3, #0
 8005b44:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b46:	f107 0320 	add.w	r3, r7, #32
 8005b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f003 fdcd 	bl	80096f0 <HAL_QSPI_Command>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <QSPI_WriteEnable+0x58>
  {
    return w25qxx_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e028      	b.n	8005bb2 <QSPI_WriteEnable+0xaa>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = W25X_SR_WREN;
 8005b60:	2302      	movs	r3, #2
 8005b62:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = W25X_SR_WREN;
 8005b64:	2302      	movs	r3, #2
 8005b66:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8005b70:	2310      	movs	r3, #16
 8005b72:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005b74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b78:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = W25X_ReadStatusReg1;
 8005b7a:	2305      	movs	r3, #5
 8005b7c:	623b      	str	r3, [r7, #32]
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <QSPI_WriteEnable+0xb4>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d103      	bne.n	8005b8e <QSPI_WriteEnable+0x86>
		s_command.DataMode     = QSPI_DATA_4_LINES;
 8005b86:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b8c:	e002      	b.n	8005b94 <QSPI_WriteEnable+0x8c>
  else 
		s_command.DataMode     = QSPI_DATA_1_LINE;
 8005b8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b92:	647b      	str	r3, [r7, #68]	; 0x44
	
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b94:	f107 0208 	add.w	r2, r7, #8
 8005b98:	f107 0120 	add.w	r1, r7, #32
 8005b9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f003 ff32 	bl	8009a0a <HAL_QSPI_AutoPolling>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <QSPI_WriteEnable+0xa8>
  {
    return w25qxx_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <QSPI_WriteEnable+0xaa>
  }

  return w25qxx_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3758      	adds	r7, #88	; 0x58
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	24000124 	.word	0x24000124

08005bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bc6:	2003      	movs	r0, #3
 8005bc8:	f001 f9e1 	bl	8006f8e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005bcc:	f004 ff26 	bl	800aa1c <HAL_RCC_GetSysClockFreq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <HAL_Init+0x68>)
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	4913      	ldr	r1, [pc, #76]	; (8005c2c <HAL_Init+0x6c>)
 8005bde:	5ccb      	ldrb	r3, [r1, r3]
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
 8005be8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bea:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <HAL_Init+0x68>)
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <HAL_Init+0x6c>)
 8005bf4:	5cd3      	ldrb	r3, [r2, r3]
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005c00:	4a0b      	ldr	r2, [pc, #44]	; (8005c30 <HAL_Init+0x70>)
 8005c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c04:	4a0b      	ldr	r2, [pc, #44]	; (8005c34 <HAL_Init+0x74>)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c0a:	200f      	movs	r0, #15
 8005c0c:	f7fd f84c 	bl	8002ca8 <HAL_InitTick>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e002      	b.n	8005c20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005c1a:	f7fd f827 	bl	8002c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	58024400 	.word	0x58024400
 8005c2c:	080184b0 	.word	0x080184b0
 8005c30:	24000090 	.word	0x24000090
 8005c34:	2400008c 	.word	0x2400008c

08005c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c3c:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <HAL_IncTick+0x20>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <HAL_IncTick+0x24>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4413      	add	r3, r2
 8005c48:	4a04      	ldr	r2, [pc, #16]	; (8005c5c <HAL_IncTick+0x24>)
 8005c4a:	6013      	str	r3, [r2, #0]
}
 8005c4c:	bf00      	nop
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	2400012c 	.word	0x2400012c
 8005c5c:	240071b0 	.word	0x240071b0

08005c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return uwTick;
 8005c64:	4b03      	ldr	r3, [pc, #12]	; (8005c74 <HAL_GetTick+0x14>)
 8005c66:	681b      	ldr	r3, [r3, #0]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	240071b0 	.word	0x240071b0

08005c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c80:	f7ff ffee 	bl	8005c60 <HAL_GetTick>
 8005c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d005      	beq.n	8005c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c92:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <HAL_Delay+0x44>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c9e:	bf00      	nop
 8005ca0:	f7ff ffde 	bl	8005c60 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d8f7      	bhi.n	8005ca0 <HAL_Delay+0x28>
  {
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	2400012c 	.word	0x2400012c

08005cc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005cc4:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <HAL_GetREVID+0x14>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	0c1b      	lsrs	r3, r3, #16
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	5c001000 	.word	0x5c001000

08005cd8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8005cdc:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <HAL_GetDEVID+0x18>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	5c001000 	.word	0x5c001000

08005cf4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005cfe:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	43db      	mvns	r3, r3
 8005d06:	401a      	ands	r2, r3
 8005d08:	4904      	ldr	r1, [pc, #16]	; (8005d1c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	604b      	str	r3, [r1, #4]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	58000400 	.word	0x58000400

08005d20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	609a      	str	r2, [r3, #8]
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3360      	adds	r3, #96	; 0x60
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	430b      	orrs	r3, r1
 8005db6:	431a      	orrs	r2, r3
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	fa01 f303 	lsl.w	r3, r1, r3
 8005de8:	431a      	orrs	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	611a      	str	r2, [r3, #16]
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b087      	sub	sp, #28
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3360      	adds	r3, #96	; 0x60
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	601a      	str	r2, [r3, #0]
  }
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3330      	adds	r3, #48	; 0x30
 8005e40:	461a      	mov	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	0a1b      	lsrs	r3, r3, #8
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	f003 030c 	and.w	r3, r3, #12
 8005e4c:	4413      	add	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	211f      	movs	r1, #31
 8005e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	401a      	ands	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	0e9b      	lsrs	r3, r3, #26
 8005e68:	f003 011f 	and.w	r1, r3, #31
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	431a      	orrs	r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3314      	adds	r3, #20
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	0e5b      	lsrs	r3, r3, #25
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	4413      	add	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	0d1b      	lsrs	r3, r3, #20
 8005eb0:	f003 031f 	and.w	r3, r3, #31
 8005eb4:	2107      	movs	r1, #7
 8005eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eba:	43db      	mvns	r3, r3
 8005ebc:	401a      	ands	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	0d1b      	lsrs	r3, r3, #20
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	401a      	ands	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f003 0318 	and.w	r3, r3, #24
 8005f02:	4908      	ldr	r1, [pc, #32]	; (8005f24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005f04:	40d9      	lsrs	r1, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	400b      	ands	r3, r1
 8005f0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	000fffff 	.word	0x000fffff

08005f28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6093      	str	r3, [r2, #8]
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	5fffffc0 	.word	0x5fffffc0

08005f4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f60:	d101      	bne.n	8005f66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <LL_ADC_EnableInternalRegulator+0x24>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	6fffffc0 	.word	0x6fffffc0

08005f9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fb0:	d101      	bne.n	8005fb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <LL_ADC_IsEnabled+0x18>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e000      	b.n	8005fde <LL_ADC_IsEnabled+0x1a>
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d101      	bne.n	8006002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b08      	cmp	r3, #8
 8006022:	d101      	bne.n	8006028 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006024:	2301      	movs	r3, #1
 8006026:	e000      	b.n	800602a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006038:	b590      	push	{r4, r7, lr}
 800603a:	b089      	sub	sp, #36	; 0x24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006044:	2300      	movs	r3, #0
 8006046:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e18e      	b.n	8006370 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7fa fc4f 	bl	8000904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff ff67 	bl	8005f4c <LL_ADC_IsDeepPowerDownEnabled>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d004      	beq.n	800608e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ff4d 	bl	8005f28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff ff82 	bl	8005f9c <LL_ADC_IsInternalRegulatorEnabled>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d114      	bne.n	80060c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff ff66 	bl	8005f74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060a8:	4b9a      	ldr	r3, [pc, #616]	; (8006314 <HAL_ADC_Init+0x2dc>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	099b      	lsrs	r3, r3, #6
 80060ae:	4a9a      	ldr	r2, [pc, #616]	; (8006318 <HAL_ADC_Init+0x2e0>)
 80060b0:	fba2 2303 	umull	r2, r3, r2, r3
 80060b4:	099b      	lsrs	r3, r3, #6
 80060b6:	3301      	adds	r3, #1
 80060b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80060ba:	e002      	b.n	80060c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	3b01      	subs	r3, #1
 80060c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1f9      	bne.n	80060bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff ff65 	bl	8005f9c <LL_ADC_IsInternalRegulatorEnabled>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10d      	bne.n	80060f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060dc:	f043 0210 	orr.w	r2, r3, #16
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e8:	f043 0201 	orr.w	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff ff76 	bl	8005fea <LL_ADC_REG_IsConversionOngoing>
 80060fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b00      	cmp	r3, #0
 800610a:	f040 8128 	bne.w	800635e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f040 8124 	bne.w	800635e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800611e:	f043 0202 	orr.w	r2, r3, #2
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff ff4a 	bl	8005fc4 <LL_ADC_IsEnabled>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d136      	bne.n	80061a4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a78      	ldr	r2, [pc, #480]	; (800631c <HAL_ADC_Init+0x2e4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d004      	beq.n	800614a <HAL_ADC_Init+0x112>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a76      	ldr	r2, [pc, #472]	; (8006320 <HAL_ADC_Init+0x2e8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d10e      	bne.n	8006168 <HAL_ADC_Init+0x130>
 800614a:	4874      	ldr	r0, [pc, #464]	; (800631c <HAL_ADC_Init+0x2e4>)
 800614c:	f7ff ff3a 	bl	8005fc4 <LL_ADC_IsEnabled>
 8006150:	4604      	mov	r4, r0
 8006152:	4873      	ldr	r0, [pc, #460]	; (8006320 <HAL_ADC_Init+0x2e8>)
 8006154:	f7ff ff36 	bl	8005fc4 <LL_ADC_IsEnabled>
 8006158:	4603      	mov	r3, r0
 800615a:	4323      	orrs	r3, r4
 800615c:	2b00      	cmp	r3, #0
 800615e:	bf0c      	ite	eq
 8006160:	2301      	moveq	r3, #1
 8006162:	2300      	movne	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	e008      	b.n	800617a <HAL_ADC_Init+0x142>
 8006168:	486e      	ldr	r0, [pc, #440]	; (8006324 <HAL_ADC_Init+0x2ec>)
 800616a:	f7ff ff2b 	bl	8005fc4 <LL_ADC_IsEnabled>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d012      	beq.n	80061a4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a66      	ldr	r2, [pc, #408]	; (800631c <HAL_ADC_Init+0x2e4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d004      	beq.n	8006192 <HAL_ADC_Init+0x15a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a64      	ldr	r2, [pc, #400]	; (8006320 <HAL_ADC_Init+0x2e8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d101      	bne.n	8006196 <HAL_ADC_Init+0x15e>
 8006192:	4a65      	ldr	r2, [pc, #404]	; (8006328 <HAL_ADC_Init+0x2f0>)
 8006194:	e000      	b.n	8006198 <HAL_ADC_Init+0x160>
 8006196:	4a65      	ldr	r2, [pc, #404]	; (800632c <HAL_ADC_Init+0x2f4>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7ff fdbe 	bl	8005d20 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80061a4:	f7ff fd8c 	bl	8005cc0 <HAL_GetREVID>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d914      	bls.n	80061dc <HAL_ADC_Init+0x1a4>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d110      	bne.n	80061dc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	7d5b      	ldrb	r3, [r3, #21]
 80061be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80061c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80061ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	7f1b      	ldrb	r3, [r3, #28]
 80061d0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80061d2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80061d4:	f043 030c 	orr.w	r3, r3, #12
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	e00d      	b.n	80061f8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7d5b      	ldrb	r3, [r3, #21]
 80061e0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80061e6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80061ec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	7f1b      	ldrb	r3, [r3, #28]
 80061f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80061f4:	4313      	orrs	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	7f1b      	ldrb	r3, [r3, #28]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d106      	bne.n	800620e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	3b01      	subs	r3, #1
 8006206:	045b      	lsls	r3, r3, #17
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	4313      	orrs	r3, r2
 800620c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4313      	orrs	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	4b3f      	ldr	r3, [pc, #252]	; (8006330 <HAL_ADC_Init+0x2f8>)
 8006232:	4013      	ands	r3, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	69b9      	ldr	r1, [r7, #24]
 800623a:	430b      	orrs	r3, r1
 800623c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fed1 	bl	8005fea <LL_ADC_REG_IsConversionOngoing>
 8006248:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fede 	bl	8006010 <LL_ADC_INJ_IsConversionOngoing>
 8006254:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d14a      	bne.n	80062f2 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d147      	bne.n	80062f2 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	7d1b      	ldrb	r3, [r3, #20]
 8006266:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800626c:	4313      	orrs	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	4b2f      	ldr	r3, [pc, #188]	; (8006334 <HAL_ADC_Init+0x2fc>)
 8006278:	4013      	ands	r3, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	69b9      	ldr	r1, [r7, #24]
 8006280:	430b      	orrs	r3, r1
 8006282:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800628a:	2b01      	cmp	r3, #1
 800628c:	d11b      	bne.n	80062c6 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	4b27      	ldr	r3, [pc, #156]	; (8006338 <HAL_ADC_Init+0x300>)
 800629c:	4013      	ands	r3, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062a2:	3a01      	subs	r2, #1
 80062a4:	0411      	lsls	r1, r2, #16
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80062aa:	4311      	orrs	r1, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80062b0:	4311      	orrs	r1, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062b6:	430a      	orrs	r2, r1
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	611a      	str	r2, [r3, #16]
 80062c4:	e007      	b.n	80062d6 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0201 	bic.w	r2, r2, #1
 80062d4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fb93 	bl	8006a18 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d120      	bne.n	800633c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	f023 010f 	bic.w	r1, r3, #15
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	1e5a      	subs	r2, r3, #1
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	631a      	str	r2, [r3, #48]	; 0x30
 8006312:	e01b      	b.n	800634c <HAL_ADC_Init+0x314>
 8006314:	2400008c 	.word	0x2400008c
 8006318:	053e2d63 	.word	0x053e2d63
 800631c:	40022000 	.word	0x40022000
 8006320:	40022100 	.word	0x40022100
 8006324:	58026000 	.word	0x58026000
 8006328:	40022300 	.word	0x40022300
 800632c:	58026300 	.word	0x58026300
 8006330:	fff0c003 	.word	0xfff0c003
 8006334:	ffffbffc 	.word	0xffffbffc
 8006338:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 020f 	bic.w	r2, r2, #15
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006350:	f023 0303 	bic.w	r3, r3, #3
 8006354:	f043 0201 	orr.w	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
 800635c:	e007      	b.n	800636e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	f043 0210 	orr.w	r2, r3, #16
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800636e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3724      	adds	r7, #36	; 0x24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd90      	pop	{r4, r7, pc}

08006378 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006378:	b590      	push	{r4, r7, lr}
 800637a:	b0a1      	sub	sp, #132	; 0x84
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	4a9d      	ldr	r2, [pc, #628]	; (8006608 <HAL_ADC_ConfigChannel+0x290>)
 8006392:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_ADC_ConfigChannel+0x2a>
 800639e:	2302      	movs	r3, #2
 80063a0:	e321      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x66e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff fe1b 	bl	8005fea <LL_ADC_REG_IsConversionOngoing>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 8306 	bne.w	80069c8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d108      	bne.n	80063da <HAL_ADC_ConfigChannel+0x62>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	0e9b      	lsrs	r3, r3, #26
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	2201      	movs	r2, #1
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	e016      	b.n	8006408 <HAL_ADC_ConfigChannel+0x90>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063e2:	fa93 f3a3 	rbit	r3, r3
 80063e6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80063e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063ea:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80063ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80063f2:	2320      	movs	r3, #32
 80063f4:	e003      	b.n	80063fe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80063f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063f8:	fab3 f383 	clz	r3, r3
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	2201      	movs	r2, #1
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	69d1      	ldr	r1, [r2, #28]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	430b      	orrs	r3, r1
 8006414:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6859      	ldr	r1, [r3, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	f7ff fd04 	bl	8005e30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff fddc 	bl	8005fea <LL_ADC_REG_IsConversionOngoing>
 8006432:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fde9 	bl	8006010 <LL_ADC_INJ_IsConversionOngoing>
 800643e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006442:	2b00      	cmp	r3, #0
 8006444:	f040 80b3 	bne.w	80065ae <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 80af 	bne.w	80065ae <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	6819      	ldr	r1, [r3, #0]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	461a      	mov	r2, r3
 800645e:	f7ff fd13 	bl	8005e88 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006462:	4b6a      	ldr	r3, [pc, #424]	; (800660c <HAL_ADC_ConfigChannel+0x294>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800646a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800646e:	d10b      	bne.n	8006488 <HAL_ADC_ConfigChannel+0x110>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695a      	ldr	r2, [r3, #20]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	089b      	lsrs	r3, r3, #2
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	e01d      	b.n	80064c4 <HAL_ADC_ConfigChannel+0x14c>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <HAL_ADC_ConfigChannel+0x136>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	089b      	lsrs	r3, r3, #2
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	e00a      	b.n	80064c4 <HAL_ADC_ConfigChannel+0x14c>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	089b      	lsrs	r3, r3, #2
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d027      	beq.n	800651e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6919      	ldr	r1, [r3, #16]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064dc:	f7ff fc54 	bl	8005d88 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	6919      	ldr	r1, [r3, #16]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	7e5b      	ldrb	r3, [r3, #25]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d102      	bne.n	80064f6 <HAL_ADC_ConfigChannel+0x17e>
 80064f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064f4:	e000      	b.n	80064f8 <HAL_ADC_ConfigChannel+0x180>
 80064f6:	2300      	movs	r3, #0
 80064f8:	461a      	mov	r2, r3
 80064fa:	f7ff fc7e 	bl	8005dfa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	6919      	ldr	r1, [r3, #16]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	7e1b      	ldrb	r3, [r3, #24]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d102      	bne.n	8006514 <HAL_ADC_ConfigChannel+0x19c>
 800650e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006512:	e000      	b.n	8006516 <HAL_ADC_ConfigChannel+0x19e>
 8006514:	2300      	movs	r3, #0
 8006516:	461a      	mov	r2, r3
 8006518:	f7ff fc56 	bl	8005dc8 <LL_ADC_SetDataRightShift>
 800651c:	e047      	b.n	80065ae <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006524:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	069b      	lsls	r3, r3, #26
 800652e:	429a      	cmp	r2, r3
 8006530:	d107      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006540:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	069b      	lsls	r3, r3, #26
 8006552:	429a      	cmp	r2, r3
 8006554:	d107      	bne.n	8006566 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006564:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800656c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	069b      	lsls	r3, r3, #26
 8006576:	429a      	cmp	r2, r3
 8006578:	d107      	bne.n	800658a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006588:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006590:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	069b      	lsls	r3, r3, #26
 800659a:	429a      	cmp	r2, r3
 800659c:	d107      	bne.n	80065ae <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80065ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff fd06 	bl	8005fc4 <LL_ADC_IsEnabled>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f040 820d 	bne.w	80069da <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	6819      	ldr	r1, [r3, #0]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	461a      	mov	r2, r3
 80065ce:	f7ff fc87 	bl	8005ee0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	4a0c      	ldr	r2, [pc, #48]	; (8006608 <HAL_ADC_ConfigChannel+0x290>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	f040 8133 	bne.w	8006844 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d110      	bne.n	8006610 <HAL_ADC_ConfigChannel+0x298>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	0e9b      	lsrs	r3, r3, #26
 80065f4:	3301      	adds	r3, #1
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2b09      	cmp	r3, #9
 80065fc:	bf94      	ite	ls
 80065fe:	2301      	movls	r3, #1
 8006600:	2300      	movhi	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	e01e      	b.n	8006644 <HAL_ADC_ConfigChannel+0x2cc>
 8006606:	bf00      	nop
 8006608:	47ff0000 	.word	0x47ff0000
 800660c:	5c001000 	.word	0x5c001000
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006618:	fa93 f3a3 	rbit	r3, r3
 800661c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800661e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006620:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8006628:	2320      	movs	r3, #32
 800662a:	e003      	b.n	8006634 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800662c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800662e:	fab3 f383 	clz	r3, r3
 8006632:	b2db      	uxtb	r3, r3
 8006634:	3301      	adds	r3, #1
 8006636:	f003 031f 	and.w	r3, r3, #31
 800663a:	2b09      	cmp	r3, #9
 800663c:	bf94      	ite	ls
 800663e:	2301      	movls	r3, #1
 8006640:	2300      	movhi	r3, #0
 8006642:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006644:	2b00      	cmp	r3, #0
 8006646:	d079      	beq.n	800673c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006650:	2b00      	cmp	r3, #0
 8006652:	d107      	bne.n	8006664 <HAL_ADC_ConfigChannel+0x2ec>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	0e9b      	lsrs	r3, r3, #26
 800665a:	3301      	adds	r3, #1
 800665c:	069b      	lsls	r3, r3, #26
 800665e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006662:	e015      	b.n	8006690 <HAL_ADC_ConfigChannel+0x318>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666c:	fa93 f3a3 	rbit	r3, r3
 8006670:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006674:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800667c:	2320      	movs	r3, #32
 800667e:	e003      	b.n	8006688 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006682:	fab3 f383 	clz	r3, r3
 8006686:	b2db      	uxtb	r3, r3
 8006688:	3301      	adds	r3, #1
 800668a:	069b      	lsls	r3, r3, #26
 800668c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006698:	2b00      	cmp	r3, #0
 800669a:	d109      	bne.n	80066b0 <HAL_ADC_ConfigChannel+0x338>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	0e9b      	lsrs	r3, r3, #26
 80066a2:	3301      	adds	r3, #1
 80066a4:	f003 031f 	and.w	r3, r3, #31
 80066a8:	2101      	movs	r1, #1
 80066aa:	fa01 f303 	lsl.w	r3, r1, r3
 80066ae:	e017      	b.n	80066e0 <HAL_ADC_ConfigChannel+0x368>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	fa93 f3a3 	rbit	r3, r3
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80066be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80066c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80066c8:	2320      	movs	r3, #32
 80066ca:	e003      	b.n	80066d4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80066cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ce:	fab3 f383 	clz	r3, r3
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	3301      	adds	r3, #1
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	2101      	movs	r1, #1
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	ea42 0103 	orr.w	r1, r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <HAL_ADC_ConfigChannel+0x38e>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	0e9b      	lsrs	r3, r3, #26
 80066f6:	3301      	adds	r3, #1
 80066f8:	f003 021f 	and.w	r2, r3, #31
 80066fc:	4613      	mov	r3, r2
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	4413      	add	r3, r2
 8006702:	051b      	lsls	r3, r3, #20
 8006704:	e018      	b.n	8006738 <HAL_ADC_ConfigChannel+0x3c0>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670e:	fa93 f3a3 	rbit	r3, r3
 8006712:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800671e:	2320      	movs	r3, #32
 8006720:	e003      	b.n	800672a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	fab3 f383 	clz	r3, r3
 8006728:	b2db      	uxtb	r3, r3
 800672a:	3301      	adds	r3, #1
 800672c:	f003 021f 	and.w	r2, r3, #31
 8006730:	4613      	mov	r3, r2
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	4413      	add	r3, r2
 8006736:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006738:	430b      	orrs	r3, r1
 800673a:	e07e      	b.n	800683a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006744:	2b00      	cmp	r3, #0
 8006746:	d107      	bne.n	8006758 <HAL_ADC_ConfigChannel+0x3e0>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	0e9b      	lsrs	r3, r3, #26
 800674e:	3301      	adds	r3, #1
 8006750:	069b      	lsls	r3, r3, #26
 8006752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006756:	e015      	b.n	8006784 <HAL_ADC_ConfigChannel+0x40c>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	fa93 f3a3 	rbit	r3, r3
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006770:	2320      	movs	r3, #32
 8006772:	e003      	b.n	800677c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	fab3 f383 	clz	r3, r3
 800677a:	b2db      	uxtb	r3, r3
 800677c:	3301      	adds	r3, #1
 800677e:	069b      	lsls	r3, r3, #26
 8006780:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800678c:	2b00      	cmp	r3, #0
 800678e:	d109      	bne.n	80067a4 <HAL_ADC_ConfigChannel+0x42c>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	0e9b      	lsrs	r3, r3, #26
 8006796:	3301      	adds	r3, #1
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	2101      	movs	r1, #1
 800679e:	fa01 f303 	lsl.w	r3, r1, r3
 80067a2:	e017      	b.n	80067d4 <HAL_ADC_ConfigChannel+0x45c>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	fa93 f3a3 	rbit	r3, r3
 80067b0:	61bb      	str	r3, [r7, #24]
  return result;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80067bc:	2320      	movs	r3, #32
 80067be:	e003      	b.n	80067c8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	fab3 f383 	clz	r3, r3
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	3301      	adds	r3, #1
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2101      	movs	r1, #1
 80067d0:	fa01 f303 	lsl.w	r3, r1, r3
 80067d4:	ea42 0103 	orr.w	r1, r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10d      	bne.n	8006800 <HAL_ADC_ConfigChannel+0x488>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	0e9b      	lsrs	r3, r3, #26
 80067ea:	3301      	adds	r3, #1
 80067ec:	f003 021f 	and.w	r2, r3, #31
 80067f0:	4613      	mov	r3, r2
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4413      	add	r3, r2
 80067f6:	3b1e      	subs	r3, #30
 80067f8:	051b      	lsls	r3, r3, #20
 80067fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067fe:	e01b      	b.n	8006838 <HAL_ADC_ConfigChannel+0x4c0>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	fa93 f3a3 	rbit	r3, r3
 800680c:	60fb      	str	r3, [r7, #12]
  return result;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8006818:	2320      	movs	r3, #32
 800681a:	e003      	b.n	8006824 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	fab3 f383 	clz	r3, r3
 8006822:	b2db      	uxtb	r3, r3
 8006824:	3301      	adds	r3, #1
 8006826:	f003 021f 	and.w	r2, r3, #31
 800682a:	4613      	mov	r3, r2
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	4413      	add	r3, r2
 8006830:	3b1e      	subs	r3, #30
 8006832:	051b      	lsls	r3, r3, #20
 8006834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006838:	430b      	orrs	r3, r1
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	6892      	ldr	r2, [r2, #8]
 800683e:	4619      	mov	r1, r3
 8006840:	f7ff fb22 	bl	8005e88 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f280 80c6 	bge.w	80069da <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a67      	ldr	r2, [pc, #412]	; (80069f0 <HAL_ADC_ConfigChannel+0x678>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d004      	beq.n	8006862 <HAL_ADC_ConfigChannel+0x4ea>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a65      	ldr	r2, [pc, #404]	; (80069f4 <HAL_ADC_ConfigChannel+0x67c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d101      	bne.n	8006866 <HAL_ADC_ConfigChannel+0x4ee>
 8006862:	4b65      	ldr	r3, [pc, #404]	; (80069f8 <HAL_ADC_ConfigChannel+0x680>)
 8006864:	e000      	b.n	8006868 <HAL_ADC_ConfigChannel+0x4f0>
 8006866:	4b65      	ldr	r3, [pc, #404]	; (80069fc <HAL_ADC_ConfigChannel+0x684>)
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff fa7f 	bl	8005d6c <LL_ADC_GetCommonPathInternalCh>
 800686e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a5e      	ldr	r2, [pc, #376]	; (80069f0 <HAL_ADC_ConfigChannel+0x678>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_ADC_ConfigChannel+0x50c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a5d      	ldr	r2, [pc, #372]	; (80069f4 <HAL_ADC_ConfigChannel+0x67c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d10e      	bne.n	80068a2 <HAL_ADC_ConfigChannel+0x52a>
 8006884:	485a      	ldr	r0, [pc, #360]	; (80069f0 <HAL_ADC_ConfigChannel+0x678>)
 8006886:	f7ff fb9d 	bl	8005fc4 <LL_ADC_IsEnabled>
 800688a:	4604      	mov	r4, r0
 800688c:	4859      	ldr	r0, [pc, #356]	; (80069f4 <HAL_ADC_ConfigChannel+0x67c>)
 800688e:	f7ff fb99 	bl	8005fc4 <LL_ADC_IsEnabled>
 8006892:	4603      	mov	r3, r0
 8006894:	4323      	orrs	r3, r4
 8006896:	2b00      	cmp	r3, #0
 8006898:	bf0c      	ite	eq
 800689a:	2301      	moveq	r3, #1
 800689c:	2300      	movne	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	e008      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x53c>
 80068a2:	4857      	ldr	r0, [pc, #348]	; (8006a00 <HAL_ADC_ConfigChannel+0x688>)
 80068a4:	f7ff fb8e 	bl	8005fc4 <LL_ADC_IsEnabled>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bf0c      	ite	eq
 80068ae:	2301      	moveq	r3, #1
 80068b0:	2300      	movne	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d07d      	beq.n	80069b4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a51      	ldr	r2, [pc, #324]	; (8006a04 <HAL_ADC_ConfigChannel+0x68c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d130      	bne.n	8006924 <HAL_ADC_ConfigChannel+0x5ac>
 80068c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d12b      	bne.n	8006924 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a4b      	ldr	r2, [pc, #300]	; (8006a00 <HAL_ADC_ConfigChannel+0x688>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	f040 8081 	bne.w	80069da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a44      	ldr	r2, [pc, #272]	; (80069f0 <HAL_ADC_ConfigChannel+0x678>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d004      	beq.n	80068ec <HAL_ADC_ConfigChannel+0x574>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a43      	ldr	r2, [pc, #268]	; (80069f4 <HAL_ADC_ConfigChannel+0x67c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d101      	bne.n	80068f0 <HAL_ADC_ConfigChannel+0x578>
 80068ec:	4a42      	ldr	r2, [pc, #264]	; (80069f8 <HAL_ADC_ConfigChannel+0x680>)
 80068ee:	e000      	b.n	80068f2 <HAL_ADC_ConfigChannel+0x57a>
 80068f0:	4a42      	ldr	r2, [pc, #264]	; (80069fc <HAL_ADC_ConfigChannel+0x684>)
 80068f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068f8:	4619      	mov	r1, r3
 80068fa:	4610      	mov	r0, r2
 80068fc:	f7ff fa23 	bl	8005d46 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006900:	4b41      	ldr	r3, [pc, #260]	; (8006a08 <HAL_ADC_ConfigChannel+0x690>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	099b      	lsrs	r3, r3, #6
 8006906:	4a41      	ldr	r2, [pc, #260]	; (8006a0c <HAL_ADC_ConfigChannel+0x694>)
 8006908:	fba2 2303 	umull	r2, r3, r2, r3
 800690c:	099b      	lsrs	r3, r3, #6
 800690e:	3301      	adds	r3, #1
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006914:	e002      	b.n	800691c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	3b01      	subs	r3, #1
 800691a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f9      	bne.n	8006916 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006922:	e05a      	b.n	80069da <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a39      	ldr	r2, [pc, #228]	; (8006a10 <HAL_ADC_ConfigChannel+0x698>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d11e      	bne.n	800696c <HAL_ADC_ConfigChannel+0x5f4>
 800692e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d119      	bne.n	800696c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a30      	ldr	r2, [pc, #192]	; (8006a00 <HAL_ADC_ConfigChannel+0x688>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d14b      	bne.n	80069da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <HAL_ADC_ConfigChannel+0x678>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d004      	beq.n	8006956 <HAL_ADC_ConfigChannel+0x5de>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a28      	ldr	r2, [pc, #160]	; (80069f4 <HAL_ADC_ConfigChannel+0x67c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d101      	bne.n	800695a <HAL_ADC_ConfigChannel+0x5e2>
 8006956:	4a28      	ldr	r2, [pc, #160]	; (80069f8 <HAL_ADC_ConfigChannel+0x680>)
 8006958:	e000      	b.n	800695c <HAL_ADC_ConfigChannel+0x5e4>
 800695a:	4a28      	ldr	r2, [pc, #160]	; (80069fc <HAL_ADC_ConfigChannel+0x684>)
 800695c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006962:	4619      	mov	r1, r3
 8006964:	4610      	mov	r0, r2
 8006966:	f7ff f9ee 	bl	8005d46 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800696a:	e036      	b.n	80069da <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a28      	ldr	r2, [pc, #160]	; (8006a14 <HAL_ADC_ConfigChannel+0x69c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d131      	bne.n	80069da <HAL_ADC_ConfigChannel+0x662>
 8006976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d12c      	bne.n	80069da <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1e      	ldr	r2, [pc, #120]	; (8006a00 <HAL_ADC_ConfigChannel+0x688>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d127      	bne.n	80069da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <HAL_ADC_ConfigChannel+0x678>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d004      	beq.n	800699e <HAL_ADC_ConfigChannel+0x626>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a16      	ldr	r2, [pc, #88]	; (80069f4 <HAL_ADC_ConfigChannel+0x67c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d101      	bne.n	80069a2 <HAL_ADC_ConfigChannel+0x62a>
 800699e:	4a16      	ldr	r2, [pc, #88]	; (80069f8 <HAL_ADC_ConfigChannel+0x680>)
 80069a0:	e000      	b.n	80069a4 <HAL_ADC_ConfigChannel+0x62c>
 80069a2:	4a16      	ldr	r2, [pc, #88]	; (80069fc <HAL_ADC_ConfigChannel+0x684>)
 80069a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069aa:	4619      	mov	r1, r3
 80069ac:	4610      	mov	r0, r2
 80069ae:	f7ff f9ca 	bl	8005d46 <LL_ADC_SetCommonPathInternalCh>
 80069b2:	e012      	b.n	80069da <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	f043 0220 	orr.w	r2, r3, #32
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80069c6:	e008      	b.n	80069da <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	f043 0220 	orr.w	r2, r3, #32
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80069e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3784      	adds	r7, #132	; 0x84
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd90      	pop	{r4, r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40022000 	.word	0x40022000
 80069f4:	40022100 	.word	0x40022100
 80069f8:	40022300 	.word	0x40022300
 80069fc:	58026300 	.word	0x58026300
 8006a00:	58026000 	.word	0x58026000
 8006a04:	cb840000 	.word	0xcb840000
 8006a08:	2400008c 	.word	0x2400008c
 8006a0c:	053e2d63 	.word	0x053e2d63
 8006a10:	c7520000 	.word	0xc7520000
 8006a14:	cfb80000 	.word	0xcfb80000

08006a18 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a79      	ldr	r2, [pc, #484]	; (8006c0c <ADC_ConfigureBoostMode+0x1f4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <ADC_ConfigureBoostMode+0x1c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a78      	ldr	r2, [pc, #480]	; (8006c10 <ADC_ConfigureBoostMode+0x1f8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d109      	bne.n	8006a48 <ADC_ConfigureBoostMode+0x30>
 8006a34:	4b77      	ldr	r3, [pc, #476]	; (8006c14 <ADC_ConfigureBoostMode+0x1fc>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bf14      	ite	ne
 8006a40:	2301      	movne	r3, #1
 8006a42:	2300      	moveq	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	e008      	b.n	8006a5a <ADC_ConfigureBoostMode+0x42>
 8006a48:	4b73      	ldr	r3, [pc, #460]	; (8006c18 <ADC_ConfigureBoostMode+0x200>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf14      	ite	ne
 8006a54:	2301      	movne	r3, #1
 8006a56:	2300      	moveq	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01c      	beq.n	8006a98 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006a5e:	f004 f957 	bl	800ad10 <HAL_RCC_GetHCLKFreq>
 8006a62:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a6c:	d010      	beq.n	8006a90 <ADC_ConfigureBoostMode+0x78>
 8006a6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a72:	d871      	bhi.n	8006b58 <ADC_ConfigureBoostMode+0x140>
 8006a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a78:	d002      	beq.n	8006a80 <ADC_ConfigureBoostMode+0x68>
 8006a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a7e:	d16b      	bne.n	8006b58 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8c:	60fb      	str	r3, [r7, #12]
        break;
 8006a8e:	e066      	b.n	8006b5e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	089b      	lsrs	r3, r3, #2
 8006a94:	60fb      	str	r3, [r7, #12]
        break;
 8006a96:	e062      	b.n	8006b5e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006a98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a9c:	f005 f916 	bl	800bccc <HAL_RCCEx_GetPeriphCLKFreq>
 8006aa0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006aaa:	d051      	beq.n	8006b50 <ADC_ConfigureBoostMode+0x138>
 8006aac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006ab0:	d854      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x144>
 8006ab2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006ab6:	d047      	beq.n	8006b48 <ADC_ConfigureBoostMode+0x130>
 8006ab8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006abc:	d84e      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x144>
 8006abe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006ac2:	d03d      	beq.n	8006b40 <ADC_ConfigureBoostMode+0x128>
 8006ac4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006ac8:	d848      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x144>
 8006aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ace:	d033      	beq.n	8006b38 <ADC_ConfigureBoostMode+0x120>
 8006ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ad4:	d842      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x144>
 8006ad6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006ada:	d029      	beq.n	8006b30 <ADC_ConfigureBoostMode+0x118>
 8006adc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006ae0:	d83c      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x144>
 8006ae2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006ae6:	d01a      	beq.n	8006b1e <ADC_ConfigureBoostMode+0x106>
 8006ae8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006aec:	d836      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x144>
 8006aee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006af2:	d014      	beq.n	8006b1e <ADC_ConfigureBoostMode+0x106>
 8006af4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006af8:	d830      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x144>
 8006afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afe:	d00e      	beq.n	8006b1e <ADC_ConfigureBoostMode+0x106>
 8006b00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b04:	d82a      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x144>
 8006b06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b0a:	d008      	beq.n	8006b1e <ADC_ConfigureBoostMode+0x106>
 8006b0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b10:	d824      	bhi.n	8006b5c <ADC_ConfigureBoostMode+0x144>
 8006b12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b16:	d002      	beq.n	8006b1e <ADC_ConfigureBoostMode+0x106>
 8006b18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b1c:	d11e      	bne.n	8006b5c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	0c9b      	lsrs	r3, r3, #18
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2c:	60fb      	str	r3, [r7, #12]
        break;
 8006b2e:	e016      	b.n	8006b5e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	091b      	lsrs	r3, r3, #4
 8006b34:	60fb      	str	r3, [r7, #12]
        break;
 8006b36:	e012      	b.n	8006b5e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	60fb      	str	r3, [r7, #12]
        break;
 8006b3e:	e00e      	b.n	8006b5e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	099b      	lsrs	r3, r3, #6
 8006b44:	60fb      	str	r3, [r7, #12]
        break;
 8006b46:	e00a      	b.n	8006b5e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	09db      	lsrs	r3, r3, #7
 8006b4c:	60fb      	str	r3, [r7, #12]
        break;
 8006b4e:	e006      	b.n	8006b5e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	0a1b      	lsrs	r3, r3, #8
 8006b54:	60fb      	str	r3, [r7, #12]
        break;
 8006b56:	e002      	b.n	8006b5e <ADC_ConfigureBoostMode+0x146>
        break;
 8006b58:	bf00      	nop
 8006b5a:	e000      	b.n	8006b5e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8006b5c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006b5e:	f7ff f8af 	bl	8005cc0 <HAL_GetREVID>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d815      	bhi.n	8006b98 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4a2b      	ldr	r2, [pc, #172]	; (8006c1c <ADC_ConfigureBoostMode+0x204>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d908      	bls.n	8006b86 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689a      	ldr	r2, [r3, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b82:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006b84:	e03e      	b.n	8006c04 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b94:	609a      	str	r2, [r3, #8]
}
 8006b96:	e035      	b.n	8006c04 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	085b      	lsrs	r3, r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <ADC_ConfigureBoostMode+0x208>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d808      	bhi.n	8006bb8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006bb4:	609a      	str	r2, [r3, #8]
}
 8006bb6:	e025      	b.n	8006c04 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <ADC_ConfigureBoostMode+0x20c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d80a      	bhi.n	8006bd6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bd2:	609a      	str	r2, [r3, #8]
}
 8006bd4:	e016      	b.n	8006c04 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4a13      	ldr	r2, [pc, #76]	; (8006c28 <ADC_ConfigureBoostMode+0x210>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d80a      	bhi.n	8006bf4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf0:	609a      	str	r2, [r3, #8]
}
 8006bf2:	e007      	b.n	8006c04 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006c02:	609a      	str	r2, [r3, #8]
}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	40022000 	.word	0x40022000
 8006c10:	40022100 	.word	0x40022100
 8006c14:	40022300 	.word	0x40022300
 8006c18:	58026300 	.word	0x58026300
 8006c1c:	01312d00 	.word	0x01312d00
 8006c20:	005f5e10 	.word	0x005f5e10
 8006c24:	00bebc20 	.word	0x00bebc20
 8006c28:	017d7840 	.word	0x017d7840

08006c2c <LL_ADC_IsEnabled>:
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <LL_ADC_IsEnabled+0x18>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <LL_ADC_IsEnabled+0x1a>
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <LL_ADC_REG_IsConversionOngoing>:
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d101      	bne.n	8006c6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006c78:	b590      	push	{r4, r7, lr}
 8006c7a:	b09f      	sub	sp, #124	; 0x7c
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e0be      	b.n	8006e14 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a5c      	ldr	r2, [pc, #368]	; (8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d102      	bne.n	8006cb6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006cb0:	4b5b      	ldr	r3, [pc, #364]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006cb2:	60bb      	str	r3, [r7, #8]
 8006cb4:	e001      	b.n	8006cba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10b      	bne.n	8006cd8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc4:	f043 0220 	orr.w	r2, r3, #32
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e09d      	b.n	8006e14 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff ffb9 	bl	8006c52 <LL_ADC_REG_IsConversionOngoing>
 8006ce0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff ffb3 	bl	8006c52 <LL_ADC_REG_IsConversionOngoing>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d17f      	bne.n	8006df2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d17c      	bne.n	8006df2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a47      	ldr	r2, [pc, #284]	; (8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d004      	beq.n	8006d0c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a46      	ldr	r2, [pc, #280]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d101      	bne.n	8006d10 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006d0c:	4b45      	ldr	r3, [pc, #276]	; (8006e24 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006d0e:	e000      	b.n	8006d12 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006d10:	4b45      	ldr	r3, [pc, #276]	; (8006e28 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006d12:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d039      	beq.n	8006d90 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a3a      	ldr	r2, [pc, #232]	; (8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d004      	beq.n	8006d42 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a38      	ldr	r2, [pc, #224]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d10e      	bne.n	8006d60 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006d42:	4836      	ldr	r0, [pc, #216]	; (8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006d44:	f7ff ff72 	bl	8006c2c <LL_ADC_IsEnabled>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	4835      	ldr	r0, [pc, #212]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006d4c:	f7ff ff6e 	bl	8006c2c <LL_ADC_IsEnabled>
 8006d50:	4603      	mov	r3, r0
 8006d52:	4323      	orrs	r3, r4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bf0c      	ite	eq
 8006d58:	2301      	moveq	r3, #1
 8006d5a:	2300      	movne	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	e008      	b.n	8006d72 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006d60:	4832      	ldr	r0, [pc, #200]	; (8006e2c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006d62:	f7ff ff63 	bl	8006c2c <LL_ADC_IsEnabled>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bf0c      	ite	eq
 8006d6c:	2301      	moveq	r3, #1
 8006d6e:	2300      	movne	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d047      	beq.n	8006e06 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	4b2d      	ldr	r3, [pc, #180]	; (8006e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	6811      	ldr	r1, [r2, #0]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	6892      	ldr	r2, [r2, #8]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d8e:	e03a      	b.n	8006e06 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d004      	beq.n	8006db0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d10e      	bne.n	8006dce <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006db0:	481a      	ldr	r0, [pc, #104]	; (8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006db2:	f7ff ff3b 	bl	8006c2c <LL_ADC_IsEnabled>
 8006db6:	4604      	mov	r4, r0
 8006db8:	4819      	ldr	r0, [pc, #100]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006dba:	f7ff ff37 	bl	8006c2c <LL_ADC_IsEnabled>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4323      	orrs	r3, r4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf0c      	ite	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	2300      	movne	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	e008      	b.n	8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006dce:	4817      	ldr	r0, [pc, #92]	; (8006e2c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006dd0:	f7ff ff2c 	bl	8006c2c <LL_ADC_IsEnabled>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bf0c      	ite	eq
 8006dda:	2301      	moveq	r3, #1
 8006ddc:	2300      	movne	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d010      	beq.n	8006e06 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	4b11      	ldr	r3, [pc, #68]	; (8006e30 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006df0:	e009      	b.n	8006e06 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df6:	f043 0220 	orr.w	r2, r3, #32
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006e04:	e000      	b.n	8006e08 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e06:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006e10:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	377c      	adds	r7, #124	; 0x7c
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd90      	pop	{r4, r7, pc}
 8006e1c:	40022000 	.word	0x40022000
 8006e20:	40022100 	.word	0x40022100
 8006e24:	40022300 	.word	0x40022300
 8006e28:	58026300 	.word	0x58026300
 8006e2c:	58026000 	.word	0x58026000
 8006e30:	fffff0e0 	.word	0xfffff0e0

08006e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e44:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <__NVIC_SetPriorityGrouping+0x40>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e50:	4013      	ands	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <__NVIC_SetPriorityGrouping+0x44>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e62:	4a04      	ldr	r2, [pc, #16]	; (8006e74 <__NVIC_SetPriorityGrouping+0x40>)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	60d3      	str	r3, [r2, #12]
}
 8006e68:	bf00      	nop
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	e000ed00 	.word	0xe000ed00
 8006e78:	05fa0000 	.word	0x05fa0000

08006e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e80:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <__NVIC_GetPriorityGrouping+0x18>)
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	0a1b      	lsrs	r3, r3, #8
 8006e86:	f003 0307 	and.w	r3, r3, #7
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	e000ed00 	.word	0xe000ed00

08006e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	db0b      	blt.n	8006ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	f003 021f 	and.w	r2, r3, #31
 8006eb0:	4907      	ldr	r1, [pc, #28]	; (8006ed0 <__NVIC_EnableIRQ+0x38>)
 8006eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	2001      	movs	r0, #1
 8006eba:	fa00 f202 	lsl.w	r2, r0, r2
 8006ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	e000e100 	.word	0xe000e100

08006ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	db0a      	blt.n	8006efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	490c      	ldr	r1, [pc, #48]	; (8006f20 <__NVIC_SetPriority+0x4c>)
 8006eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ef2:	0112      	lsls	r2, r2, #4
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006efc:	e00a      	b.n	8006f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	4908      	ldr	r1, [pc, #32]	; (8006f24 <__NVIC_SetPriority+0x50>)
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	3b04      	subs	r3, #4
 8006f0c:	0112      	lsls	r2, r2, #4
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	440b      	add	r3, r1
 8006f12:	761a      	strb	r2, [r3, #24]
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	e000e100 	.word	0xe000e100
 8006f24:	e000ed00 	.word	0xe000ed00

08006f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b089      	sub	sp, #36	; 0x24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f1c3 0307 	rsb	r3, r3, #7
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	bf28      	it	cs
 8006f46:	2304      	movcs	r3, #4
 8006f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	2b06      	cmp	r3, #6
 8006f50:	d902      	bls.n	8006f58 <NVIC_EncodePriority+0x30>
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	3b03      	subs	r3, #3
 8006f56:	e000      	b.n	8006f5a <NVIC_EncodePriority+0x32>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	43da      	mvns	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	401a      	ands	r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f70:	f04f 31ff 	mov.w	r1, #4294967295
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7a:	43d9      	mvns	r1, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f80:	4313      	orrs	r3, r2
         );
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3724      	adds	r7, #36	; 0x24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff ff4c 	bl	8006e34 <__NVIC_SetPriorityGrouping>
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006fb2:	f7ff ff63 	bl	8006e7c <__NVIC_GetPriorityGrouping>
 8006fb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	6978      	ldr	r0, [r7, #20]
 8006fbe:	f7ff ffb3 	bl	8006f28 <NVIC_EncodePriority>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7ff ff82 	bl	8006ed4 <__NVIC_SetPriority>
}
 8006fd0:	bf00      	nop
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff ff56 	bl	8006e98 <__NVIC_EnableIRQ>
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e014      	b.n	8007030 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	791b      	ldrb	r3, [r3, #4]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d105      	bne.n	800701c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7f9 fdae 	bl	8000b78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	795b      	ldrb	r3, [r3, #5]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_DAC_ConfigChannel+0x18>
 800704c:	2302      	movs	r3, #2
 800704e:	e11d      	b.n	800728c <HAL_DAC_ConfigChannel+0x254>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2202      	movs	r2, #2
 800705a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b04      	cmp	r3, #4
 8007062:	d174      	bne.n	800714e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007064:	f7fe fdfc 	bl	8005c60 <HAL_GetTick>
 8007068:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d134      	bne.n	80070da <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007070:	e011      	b.n	8007096 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007072:	f7fe fdf5 	bl	8005c60 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	d90a      	bls.n	8007096 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f043 0208 	orr.w	r2, r3, #8
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2203      	movs	r2, #3
 8007090:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e0fa      	b.n	800728c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800709c:	4b7d      	ldr	r3, [pc, #500]	; (8007294 <HAL_DAC_ConfigChannel+0x25c>)
 800709e:	4013      	ands	r3, r2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e6      	bne.n	8007072 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80070a4:	2001      	movs	r0, #1
 80070a6:	f7fe fde7 	bl	8005c78 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	6992      	ldr	r2, [r2, #24]
 80070b2:	641a      	str	r2, [r3, #64]	; 0x40
 80070b4:	e01e      	b.n	80070f4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80070b6:	f7fe fdd3 	bl	8005c60 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d90a      	bls.n	80070da <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	f043 0208 	orr.w	r2, r3, #8
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2203      	movs	r2, #3
 80070d4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e0d8      	b.n	800728c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	dbe8      	blt.n	80070b6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80070e4:	2001      	movs	r0, #1
 80070e6:	f7fe fdc7 	bl	8005c78 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	6992      	ldr	r2, [r2, #24]
 80070f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007104:	fa01 f303 	lsl.w	r3, r1, r3
 8007108:	43db      	mvns	r3, r3
 800710a:	ea02 0103 	and.w	r1, r2, r3
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	69da      	ldr	r2, [r3, #28]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	409a      	lsls	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	21ff      	movs	r1, #255	; 0xff
 8007130:	fa01 f303 	lsl.w	r3, r1, r3
 8007134:	43db      	mvns	r3, r3
 8007136:	ea02 0103 	and.w	r1, r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6a1a      	ldr	r2, [r3, #32]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f003 0310 	and.w	r3, r3, #16
 8007144:	409a      	lsls	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d11d      	bne.n	8007192 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f003 0310 	and.w	r3, r3, #16
 8007164:	221f      	movs	r2, #31
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	43db      	mvns	r3, r3
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4013      	ands	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f003 0310 	and.w	r3, r3, #16
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	fa02 f303 	lsl.w	r3, r2, r3
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007198:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f003 0310 	and.w	r3, r3, #16
 80071a0:	2207      	movs	r2, #7
 80071a2:	fa02 f303 	lsl.w	r3, r2, r3
 80071a6:	43db      	mvns	r3, r3
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4013      	ands	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d102      	bne.n	80071bc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
 80071ba:	e00f      	b.n	80071dc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d102      	bne.n	80071ca <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80071c4:	2301      	movs	r3, #1
 80071c6:	61fb      	str	r3, [r7, #28]
 80071c8:	e008      	b.n	80071dc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80071d2:	2301      	movs	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
 80071d6:	e001      	b.n	80071dc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80071d8:	2300      	movs	r3, #0
 80071da:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f003 0310 	and.w	r3, r3, #16
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	fa02 f303 	lsl.w	r3, r2, r3
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6819      	ldr	r1, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f003 0310 	and.w	r3, r3, #16
 8007212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007216:	fa02 f303 	lsl.w	r3, r2, r3
 800721a:	43da      	mvns	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	400a      	ands	r2, r1
 8007222:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f003 0310 	and.w	r3, r3, #16
 8007232:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007236:	fa02 f303 	lsl.w	r3, r2, r3
 800723a:	43db      	mvns	r3, r3
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	4013      	ands	r3, r2
 8007240:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	fa02 f303 	lsl.w	r3, r2, r3
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6819      	ldr	r1, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f003 0310 	and.w	r3, r3, #16
 800726e:	22c0      	movs	r2, #192	; 0xc0
 8007270:	fa02 f303 	lsl.w	r3, r2, r3
 8007274:	43da      	mvns	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	400a      	ands	r2, r1
 800727c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20008000 	.word	0x20008000

08007298 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80072a0:	f7fe fcde 	bl	8005c60 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e2dc      	b.n	800786a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d008      	beq.n	80072ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2280      	movs	r2, #128	; 0x80
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e2cd      	b.n	800786a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a76      	ldr	r2, [pc, #472]	; (80074ac <HAL_DMA_Abort+0x214>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d04a      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a74      	ldr	r2, [pc, #464]	; (80074b0 <HAL_DMA_Abort+0x218>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d045      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a73      	ldr	r2, [pc, #460]	; (80074b4 <HAL_DMA_Abort+0x21c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d040      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a71      	ldr	r2, [pc, #452]	; (80074b8 <HAL_DMA_Abort+0x220>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d03b      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a70      	ldr	r2, [pc, #448]	; (80074bc <HAL_DMA_Abort+0x224>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d036      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a6e      	ldr	r2, [pc, #440]	; (80074c0 <HAL_DMA_Abort+0x228>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d031      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a6d      	ldr	r2, [pc, #436]	; (80074c4 <HAL_DMA_Abort+0x22c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d02c      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a6b      	ldr	r2, [pc, #428]	; (80074c8 <HAL_DMA_Abort+0x230>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d027      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a6a      	ldr	r2, [pc, #424]	; (80074cc <HAL_DMA_Abort+0x234>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d022      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a68      	ldr	r2, [pc, #416]	; (80074d0 <HAL_DMA_Abort+0x238>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d01d      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a67      	ldr	r2, [pc, #412]	; (80074d4 <HAL_DMA_Abort+0x23c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d018      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a65      	ldr	r2, [pc, #404]	; (80074d8 <HAL_DMA_Abort+0x240>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d013      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a64      	ldr	r2, [pc, #400]	; (80074dc <HAL_DMA_Abort+0x244>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00e      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a62      	ldr	r2, [pc, #392]	; (80074e0 <HAL_DMA_Abort+0x248>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d009      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a61      	ldr	r2, [pc, #388]	; (80074e4 <HAL_DMA_Abort+0x24c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d004      	beq.n	800736e <HAL_DMA_Abort+0xd6>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a5f      	ldr	r2, [pc, #380]	; (80074e8 <HAL_DMA_Abort+0x250>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d101      	bne.n	8007372 <HAL_DMA_Abort+0xda>
 800736e:	2301      	movs	r3, #1
 8007370:	e000      	b.n	8007374 <HAL_DMA_Abort+0xdc>
 8007372:	2300      	movs	r3, #0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d013      	beq.n	80073a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 021e 	bic.w	r2, r2, #30
 8007386:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695a      	ldr	r2, [r3, #20]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007396:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	e00a      	b.n	80073b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 020e 	bic.w	r2, r2, #14
 80073ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a3c      	ldr	r2, [pc, #240]	; (80074ac <HAL_DMA_Abort+0x214>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d072      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a3a      	ldr	r2, [pc, #232]	; (80074b0 <HAL_DMA_Abort+0x218>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d06d      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a39      	ldr	r2, [pc, #228]	; (80074b4 <HAL_DMA_Abort+0x21c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d068      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a37      	ldr	r2, [pc, #220]	; (80074b8 <HAL_DMA_Abort+0x220>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d063      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a36      	ldr	r2, [pc, #216]	; (80074bc <HAL_DMA_Abort+0x224>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d05e      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a34      	ldr	r2, [pc, #208]	; (80074c0 <HAL_DMA_Abort+0x228>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d059      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a33      	ldr	r2, [pc, #204]	; (80074c4 <HAL_DMA_Abort+0x22c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d054      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a31      	ldr	r2, [pc, #196]	; (80074c8 <HAL_DMA_Abort+0x230>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d04f      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a30      	ldr	r2, [pc, #192]	; (80074cc <HAL_DMA_Abort+0x234>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d04a      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a2e      	ldr	r2, [pc, #184]	; (80074d0 <HAL_DMA_Abort+0x238>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d045      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a2d      	ldr	r2, [pc, #180]	; (80074d4 <HAL_DMA_Abort+0x23c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d040      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a2b      	ldr	r2, [pc, #172]	; (80074d8 <HAL_DMA_Abort+0x240>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d03b      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a2a      	ldr	r2, [pc, #168]	; (80074dc <HAL_DMA_Abort+0x244>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d036      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a28      	ldr	r2, [pc, #160]	; (80074e0 <HAL_DMA_Abort+0x248>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d031      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a27      	ldr	r2, [pc, #156]	; (80074e4 <HAL_DMA_Abort+0x24c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d02c      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a25      	ldr	r2, [pc, #148]	; (80074e8 <HAL_DMA_Abort+0x250>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d027      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a24      	ldr	r2, [pc, #144]	; (80074ec <HAL_DMA_Abort+0x254>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d022      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a22      	ldr	r2, [pc, #136]	; (80074f0 <HAL_DMA_Abort+0x258>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d01d      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a21      	ldr	r2, [pc, #132]	; (80074f4 <HAL_DMA_Abort+0x25c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d018      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a1f      	ldr	r2, [pc, #124]	; (80074f8 <HAL_DMA_Abort+0x260>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d013      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a1e      	ldr	r2, [pc, #120]	; (80074fc <HAL_DMA_Abort+0x264>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00e      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a1c      	ldr	r2, [pc, #112]	; (8007500 <HAL_DMA_Abort+0x268>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d009      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <HAL_DMA_Abort+0x26c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d004      	beq.n	80074a6 <HAL_DMA_Abort+0x20e>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a19      	ldr	r2, [pc, #100]	; (8007508 <HAL_DMA_Abort+0x270>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d132      	bne.n	800750c <HAL_DMA_Abort+0x274>
 80074a6:	2301      	movs	r3, #1
 80074a8:	e031      	b.n	800750e <HAL_DMA_Abort+0x276>
 80074aa:	bf00      	nop
 80074ac:	40020010 	.word	0x40020010
 80074b0:	40020028 	.word	0x40020028
 80074b4:	40020040 	.word	0x40020040
 80074b8:	40020058 	.word	0x40020058
 80074bc:	40020070 	.word	0x40020070
 80074c0:	40020088 	.word	0x40020088
 80074c4:	400200a0 	.word	0x400200a0
 80074c8:	400200b8 	.word	0x400200b8
 80074cc:	40020410 	.word	0x40020410
 80074d0:	40020428 	.word	0x40020428
 80074d4:	40020440 	.word	0x40020440
 80074d8:	40020458 	.word	0x40020458
 80074dc:	40020470 	.word	0x40020470
 80074e0:	40020488 	.word	0x40020488
 80074e4:	400204a0 	.word	0x400204a0
 80074e8:	400204b8 	.word	0x400204b8
 80074ec:	58025408 	.word	0x58025408
 80074f0:	5802541c 	.word	0x5802541c
 80074f4:	58025430 	.word	0x58025430
 80074f8:	58025444 	.word	0x58025444
 80074fc:	58025458 	.word	0x58025458
 8007500:	5802546c 	.word	0x5802546c
 8007504:	58025480 	.word	0x58025480
 8007508:	58025494 	.word	0x58025494
 800750c:	2300      	movs	r3, #0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d007      	beq.n	8007522 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007520:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a6d      	ldr	r2, [pc, #436]	; (80076dc <HAL_DMA_Abort+0x444>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d04a      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a6b      	ldr	r2, [pc, #428]	; (80076e0 <HAL_DMA_Abort+0x448>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d045      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a6a      	ldr	r2, [pc, #424]	; (80076e4 <HAL_DMA_Abort+0x44c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d040      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a68      	ldr	r2, [pc, #416]	; (80076e8 <HAL_DMA_Abort+0x450>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d03b      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a67      	ldr	r2, [pc, #412]	; (80076ec <HAL_DMA_Abort+0x454>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d036      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a65      	ldr	r2, [pc, #404]	; (80076f0 <HAL_DMA_Abort+0x458>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d031      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a64      	ldr	r2, [pc, #400]	; (80076f4 <HAL_DMA_Abort+0x45c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d02c      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a62      	ldr	r2, [pc, #392]	; (80076f8 <HAL_DMA_Abort+0x460>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d027      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a61      	ldr	r2, [pc, #388]	; (80076fc <HAL_DMA_Abort+0x464>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d022      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a5f      	ldr	r2, [pc, #380]	; (8007700 <HAL_DMA_Abort+0x468>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01d      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a5e      	ldr	r2, [pc, #376]	; (8007704 <HAL_DMA_Abort+0x46c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d018      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a5c      	ldr	r2, [pc, #368]	; (8007708 <HAL_DMA_Abort+0x470>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a5b      	ldr	r2, [pc, #364]	; (800770c <HAL_DMA_Abort+0x474>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00e      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a59      	ldr	r2, [pc, #356]	; (8007710 <HAL_DMA_Abort+0x478>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d009      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a58      	ldr	r2, [pc, #352]	; (8007714 <HAL_DMA_Abort+0x47c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d004      	beq.n	80075c2 <HAL_DMA_Abort+0x32a>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a56      	ldr	r2, [pc, #344]	; (8007718 <HAL_DMA_Abort+0x480>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d108      	bne.n	80075d4 <HAL_DMA_Abort+0x33c>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	e007      	b.n	80075e4 <HAL_DMA_Abort+0x34c>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0201 	bic.w	r2, r2, #1
 80075e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80075e4:	e013      	b.n	800760e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075e6:	f7fe fb3b 	bl	8005c60 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b05      	cmp	r3, #5
 80075f2:	d90c      	bls.n	800760e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2203      	movs	r2, #3
 8007606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e12d      	b.n	800786a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e5      	bne.n	80075e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a2f      	ldr	r2, [pc, #188]	; (80076dc <HAL_DMA_Abort+0x444>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d04a      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a2d      	ldr	r2, [pc, #180]	; (80076e0 <HAL_DMA_Abort+0x448>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d045      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2c      	ldr	r2, [pc, #176]	; (80076e4 <HAL_DMA_Abort+0x44c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d040      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a2a      	ldr	r2, [pc, #168]	; (80076e8 <HAL_DMA_Abort+0x450>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d03b      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a29      	ldr	r2, [pc, #164]	; (80076ec <HAL_DMA_Abort+0x454>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d036      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a27      	ldr	r2, [pc, #156]	; (80076f0 <HAL_DMA_Abort+0x458>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d031      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a26      	ldr	r2, [pc, #152]	; (80076f4 <HAL_DMA_Abort+0x45c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d02c      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a24      	ldr	r2, [pc, #144]	; (80076f8 <HAL_DMA_Abort+0x460>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d027      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a23      	ldr	r2, [pc, #140]	; (80076fc <HAL_DMA_Abort+0x464>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d022      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a21      	ldr	r2, [pc, #132]	; (8007700 <HAL_DMA_Abort+0x468>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d01d      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a20      	ldr	r2, [pc, #128]	; (8007704 <HAL_DMA_Abort+0x46c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d018      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1e      	ldr	r2, [pc, #120]	; (8007708 <HAL_DMA_Abort+0x470>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1d      	ldr	r2, [pc, #116]	; (800770c <HAL_DMA_Abort+0x474>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00e      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <HAL_DMA_Abort+0x478>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d009      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1a      	ldr	r2, [pc, #104]	; (8007714 <HAL_DMA_Abort+0x47c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_DMA_Abort+0x422>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a18      	ldr	r2, [pc, #96]	; (8007718 <HAL_DMA_Abort+0x480>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d101      	bne.n	80076be <HAL_DMA_Abort+0x426>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <HAL_DMA_Abort+0x428>
 80076be:	2300      	movs	r3, #0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d02b      	beq.n	800771c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ce:	f003 031f 	and.w	r3, r3, #31
 80076d2:	223f      	movs	r2, #63	; 0x3f
 80076d4:	409a      	lsls	r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	609a      	str	r2, [r3, #8]
 80076da:	e02a      	b.n	8007732 <HAL_DMA_Abort+0x49a>
 80076dc:	40020010 	.word	0x40020010
 80076e0:	40020028 	.word	0x40020028
 80076e4:	40020040 	.word	0x40020040
 80076e8:	40020058 	.word	0x40020058
 80076ec:	40020070 	.word	0x40020070
 80076f0:	40020088 	.word	0x40020088
 80076f4:	400200a0 	.word	0x400200a0
 80076f8:	400200b8 	.word	0x400200b8
 80076fc:	40020410 	.word	0x40020410
 8007700:	40020428 	.word	0x40020428
 8007704:	40020440 	.word	0x40020440
 8007708:	40020458 	.word	0x40020458
 800770c:	40020470 	.word	0x40020470
 8007710:	40020488 	.word	0x40020488
 8007714:	400204a0 	.word	0x400204a0
 8007718:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007720:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	2201      	movs	r2, #1
 800772c:	409a      	lsls	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a4f      	ldr	r2, [pc, #316]	; (8007874 <HAL_DMA_Abort+0x5dc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d072      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a4d      	ldr	r2, [pc, #308]	; (8007878 <HAL_DMA_Abort+0x5e0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d06d      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a4c      	ldr	r2, [pc, #304]	; (800787c <HAL_DMA_Abort+0x5e4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d068      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a4a      	ldr	r2, [pc, #296]	; (8007880 <HAL_DMA_Abort+0x5e8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d063      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a49      	ldr	r2, [pc, #292]	; (8007884 <HAL_DMA_Abort+0x5ec>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d05e      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a47      	ldr	r2, [pc, #284]	; (8007888 <HAL_DMA_Abort+0x5f0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d059      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a46      	ldr	r2, [pc, #280]	; (800788c <HAL_DMA_Abort+0x5f4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d054      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a44      	ldr	r2, [pc, #272]	; (8007890 <HAL_DMA_Abort+0x5f8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d04f      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a43      	ldr	r2, [pc, #268]	; (8007894 <HAL_DMA_Abort+0x5fc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d04a      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a41      	ldr	r2, [pc, #260]	; (8007898 <HAL_DMA_Abort+0x600>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d045      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a40      	ldr	r2, [pc, #256]	; (800789c <HAL_DMA_Abort+0x604>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d040      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a3e      	ldr	r2, [pc, #248]	; (80078a0 <HAL_DMA_Abort+0x608>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d03b      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a3d      	ldr	r2, [pc, #244]	; (80078a4 <HAL_DMA_Abort+0x60c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d036      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a3b      	ldr	r2, [pc, #236]	; (80078a8 <HAL_DMA_Abort+0x610>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d031      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a3a      	ldr	r2, [pc, #232]	; (80078ac <HAL_DMA_Abort+0x614>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d02c      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a38      	ldr	r2, [pc, #224]	; (80078b0 <HAL_DMA_Abort+0x618>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d027      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a37      	ldr	r2, [pc, #220]	; (80078b4 <HAL_DMA_Abort+0x61c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d022      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a35      	ldr	r2, [pc, #212]	; (80078b8 <HAL_DMA_Abort+0x620>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d01d      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a34      	ldr	r2, [pc, #208]	; (80078bc <HAL_DMA_Abort+0x624>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d018      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a32      	ldr	r2, [pc, #200]	; (80078c0 <HAL_DMA_Abort+0x628>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a31      	ldr	r2, [pc, #196]	; (80078c4 <HAL_DMA_Abort+0x62c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00e      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a2f      	ldr	r2, [pc, #188]	; (80078c8 <HAL_DMA_Abort+0x630>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d009      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a2e      	ldr	r2, [pc, #184]	; (80078cc <HAL_DMA_Abort+0x634>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d004      	beq.n	8007822 <HAL_DMA_Abort+0x58a>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a2c      	ldr	r2, [pc, #176]	; (80078d0 <HAL_DMA_Abort+0x638>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d101      	bne.n	8007826 <HAL_DMA_Abort+0x58e>
 8007822:	2301      	movs	r3, #1
 8007824:	e000      	b.n	8007828 <HAL_DMA_Abort+0x590>
 8007826:	2300      	movs	r3, #0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d015      	beq.n	8007858 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007834:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00c      	beq.n	8007858 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800784c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007856:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	40020010 	.word	0x40020010
 8007878:	40020028 	.word	0x40020028
 800787c:	40020040 	.word	0x40020040
 8007880:	40020058 	.word	0x40020058
 8007884:	40020070 	.word	0x40020070
 8007888:	40020088 	.word	0x40020088
 800788c:	400200a0 	.word	0x400200a0
 8007890:	400200b8 	.word	0x400200b8
 8007894:	40020410 	.word	0x40020410
 8007898:	40020428 	.word	0x40020428
 800789c:	40020440 	.word	0x40020440
 80078a0:	40020458 	.word	0x40020458
 80078a4:	40020470 	.word	0x40020470
 80078a8:	40020488 	.word	0x40020488
 80078ac:	400204a0 	.word	0x400204a0
 80078b0:	400204b8 	.word	0x400204b8
 80078b4:	58025408 	.word	0x58025408
 80078b8:	5802541c 	.word	0x5802541c
 80078bc:	58025430 	.word	0x58025430
 80078c0:	58025444 	.word	0x58025444
 80078c4:	58025458 	.word	0x58025458
 80078c8:	5802546c 	.word	0x5802546c
 80078cc:	58025480 	.word	0x58025480
 80078d0:	58025494 	.word	0x58025494

080078d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e205      	b.n	8007cf2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d004      	beq.n	80078fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2280      	movs	r2, #128	; 0x80
 80078f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e1fa      	b.n	8007cf2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a8c      	ldr	r2, [pc, #560]	; (8007b34 <HAL_DMA_Abort_IT+0x260>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d04a      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a8b      	ldr	r2, [pc, #556]	; (8007b38 <HAL_DMA_Abort_IT+0x264>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d045      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a89      	ldr	r2, [pc, #548]	; (8007b3c <HAL_DMA_Abort_IT+0x268>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d040      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a88      	ldr	r2, [pc, #544]	; (8007b40 <HAL_DMA_Abort_IT+0x26c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d03b      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a86      	ldr	r2, [pc, #536]	; (8007b44 <HAL_DMA_Abort_IT+0x270>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d036      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a85      	ldr	r2, [pc, #532]	; (8007b48 <HAL_DMA_Abort_IT+0x274>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d031      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a83      	ldr	r2, [pc, #524]	; (8007b4c <HAL_DMA_Abort_IT+0x278>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d02c      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a82      	ldr	r2, [pc, #520]	; (8007b50 <HAL_DMA_Abort_IT+0x27c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d027      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a80      	ldr	r2, [pc, #512]	; (8007b54 <HAL_DMA_Abort_IT+0x280>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d022      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a7f      	ldr	r2, [pc, #508]	; (8007b58 <HAL_DMA_Abort_IT+0x284>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d01d      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a7d      	ldr	r2, [pc, #500]	; (8007b5c <HAL_DMA_Abort_IT+0x288>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d018      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a7c      	ldr	r2, [pc, #496]	; (8007b60 <HAL_DMA_Abort_IT+0x28c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d013      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a7a      	ldr	r2, [pc, #488]	; (8007b64 <HAL_DMA_Abort_IT+0x290>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00e      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a79      	ldr	r2, [pc, #484]	; (8007b68 <HAL_DMA_Abort_IT+0x294>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d009      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a77      	ldr	r2, [pc, #476]	; (8007b6c <HAL_DMA_Abort_IT+0x298>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d004      	beq.n	800799c <HAL_DMA_Abort_IT+0xc8>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a76      	ldr	r2, [pc, #472]	; (8007b70 <HAL_DMA_Abort_IT+0x29c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d101      	bne.n	80079a0 <HAL_DMA_Abort_IT+0xcc>
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <HAL_DMA_Abort_IT+0xce>
 80079a0:	2300      	movs	r3, #0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d065      	beq.n	8007a72 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2204      	movs	r2, #4
 80079aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a60      	ldr	r2, [pc, #384]	; (8007b34 <HAL_DMA_Abort_IT+0x260>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d04a      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a5e      	ldr	r2, [pc, #376]	; (8007b38 <HAL_DMA_Abort_IT+0x264>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d045      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a5d      	ldr	r2, [pc, #372]	; (8007b3c <HAL_DMA_Abort_IT+0x268>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d040      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a5b      	ldr	r2, [pc, #364]	; (8007b40 <HAL_DMA_Abort_IT+0x26c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d03b      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a5a      	ldr	r2, [pc, #360]	; (8007b44 <HAL_DMA_Abort_IT+0x270>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d036      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a58      	ldr	r2, [pc, #352]	; (8007b48 <HAL_DMA_Abort_IT+0x274>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d031      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a57      	ldr	r2, [pc, #348]	; (8007b4c <HAL_DMA_Abort_IT+0x278>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d02c      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a55      	ldr	r2, [pc, #340]	; (8007b50 <HAL_DMA_Abort_IT+0x27c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d027      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a54      	ldr	r2, [pc, #336]	; (8007b54 <HAL_DMA_Abort_IT+0x280>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d022      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a52      	ldr	r2, [pc, #328]	; (8007b58 <HAL_DMA_Abort_IT+0x284>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d01d      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a51      	ldr	r2, [pc, #324]	; (8007b5c <HAL_DMA_Abort_IT+0x288>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d018      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a4f      	ldr	r2, [pc, #316]	; (8007b60 <HAL_DMA_Abort_IT+0x28c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a4e      	ldr	r2, [pc, #312]	; (8007b64 <HAL_DMA_Abort_IT+0x290>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00e      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a4c      	ldr	r2, [pc, #304]	; (8007b68 <HAL_DMA_Abort_IT+0x294>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d009      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a4b      	ldr	r2, [pc, #300]	; (8007b6c <HAL_DMA_Abort_IT+0x298>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d004      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x17a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a49      	ldr	r2, [pc, #292]	; (8007b70 <HAL_DMA_Abort_IT+0x29c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d108      	bne.n	8007a60 <HAL_DMA_Abort_IT+0x18c>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0201 	bic.w	r2, r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	e147      	b.n	8007cf0 <HAL_DMA_Abort_IT+0x41c>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0201 	bic.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	e13e      	b.n	8007cf0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 020e 	bic.w	r2, r2, #14
 8007a80:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a2b      	ldr	r2, [pc, #172]	; (8007b34 <HAL_DMA_Abort_IT+0x260>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d04a      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a29      	ldr	r2, [pc, #164]	; (8007b38 <HAL_DMA_Abort_IT+0x264>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d045      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a28      	ldr	r2, [pc, #160]	; (8007b3c <HAL_DMA_Abort_IT+0x268>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d040      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a26      	ldr	r2, [pc, #152]	; (8007b40 <HAL_DMA_Abort_IT+0x26c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d03b      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a25      	ldr	r2, [pc, #148]	; (8007b44 <HAL_DMA_Abort_IT+0x270>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d036      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a23      	ldr	r2, [pc, #140]	; (8007b48 <HAL_DMA_Abort_IT+0x274>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d031      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a22      	ldr	r2, [pc, #136]	; (8007b4c <HAL_DMA_Abort_IT+0x278>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d02c      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a20      	ldr	r2, [pc, #128]	; (8007b50 <HAL_DMA_Abort_IT+0x27c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d027      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1f      	ldr	r2, [pc, #124]	; (8007b54 <HAL_DMA_Abort_IT+0x280>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d022      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1d      	ldr	r2, [pc, #116]	; (8007b58 <HAL_DMA_Abort_IT+0x284>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d01d      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1c      	ldr	r2, [pc, #112]	; (8007b5c <HAL_DMA_Abort_IT+0x288>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d018      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a1a      	ldr	r2, [pc, #104]	; (8007b60 <HAL_DMA_Abort_IT+0x28c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d013      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a19      	ldr	r2, [pc, #100]	; (8007b64 <HAL_DMA_Abort_IT+0x290>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00e      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <HAL_DMA_Abort_IT+0x294>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d009      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a16      	ldr	r2, [pc, #88]	; (8007b6c <HAL_DMA_Abort_IT+0x298>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d004      	beq.n	8007b22 <HAL_DMA_Abort_IT+0x24e>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a14      	ldr	r2, [pc, #80]	; (8007b70 <HAL_DMA_Abort_IT+0x29c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d128      	bne.n	8007b74 <HAL_DMA_Abort_IT+0x2a0>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 0201 	bic.w	r2, r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	e027      	b.n	8007b84 <HAL_DMA_Abort_IT+0x2b0>
 8007b34:	40020010 	.word	0x40020010
 8007b38:	40020028 	.word	0x40020028
 8007b3c:	40020040 	.word	0x40020040
 8007b40:	40020058 	.word	0x40020058
 8007b44:	40020070 	.word	0x40020070
 8007b48:	40020088 	.word	0x40020088
 8007b4c:	400200a0 	.word	0x400200a0
 8007b50:	400200b8 	.word	0x400200b8
 8007b54:	40020410 	.word	0x40020410
 8007b58:	40020428 	.word	0x40020428
 8007b5c:	40020440 	.word	0x40020440
 8007b60:	40020458 	.word	0x40020458
 8007b64:	40020470 	.word	0x40020470
 8007b68:	40020488 	.word	0x40020488
 8007b6c:	400204a0 	.word	0x400204a0
 8007b70:	400204b8 	.word	0x400204b8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0201 	bic.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a5c      	ldr	r2, [pc, #368]	; (8007cfc <HAL_DMA_Abort_IT+0x428>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d072      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a5b      	ldr	r2, [pc, #364]	; (8007d00 <HAL_DMA_Abort_IT+0x42c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d06d      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a59      	ldr	r2, [pc, #356]	; (8007d04 <HAL_DMA_Abort_IT+0x430>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d068      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a58      	ldr	r2, [pc, #352]	; (8007d08 <HAL_DMA_Abort_IT+0x434>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d063      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a56      	ldr	r2, [pc, #344]	; (8007d0c <HAL_DMA_Abort_IT+0x438>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d05e      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a55      	ldr	r2, [pc, #340]	; (8007d10 <HAL_DMA_Abort_IT+0x43c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d059      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a53      	ldr	r2, [pc, #332]	; (8007d14 <HAL_DMA_Abort_IT+0x440>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d054      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a52      	ldr	r2, [pc, #328]	; (8007d18 <HAL_DMA_Abort_IT+0x444>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d04f      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a50      	ldr	r2, [pc, #320]	; (8007d1c <HAL_DMA_Abort_IT+0x448>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d04a      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a4f      	ldr	r2, [pc, #316]	; (8007d20 <HAL_DMA_Abort_IT+0x44c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d045      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a4d      	ldr	r2, [pc, #308]	; (8007d24 <HAL_DMA_Abort_IT+0x450>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d040      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a4c      	ldr	r2, [pc, #304]	; (8007d28 <HAL_DMA_Abort_IT+0x454>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d03b      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a4a      	ldr	r2, [pc, #296]	; (8007d2c <HAL_DMA_Abort_IT+0x458>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d036      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a49      	ldr	r2, [pc, #292]	; (8007d30 <HAL_DMA_Abort_IT+0x45c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d031      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a47      	ldr	r2, [pc, #284]	; (8007d34 <HAL_DMA_Abort_IT+0x460>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d02c      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a46      	ldr	r2, [pc, #280]	; (8007d38 <HAL_DMA_Abort_IT+0x464>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d027      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a44      	ldr	r2, [pc, #272]	; (8007d3c <HAL_DMA_Abort_IT+0x468>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d022      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a43      	ldr	r2, [pc, #268]	; (8007d40 <HAL_DMA_Abort_IT+0x46c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d01d      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a41      	ldr	r2, [pc, #260]	; (8007d44 <HAL_DMA_Abort_IT+0x470>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d018      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a40      	ldr	r2, [pc, #256]	; (8007d48 <HAL_DMA_Abort_IT+0x474>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d013      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a3e      	ldr	r2, [pc, #248]	; (8007d4c <HAL_DMA_Abort_IT+0x478>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00e      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a3d      	ldr	r2, [pc, #244]	; (8007d50 <HAL_DMA_Abort_IT+0x47c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d009      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a3b      	ldr	r2, [pc, #236]	; (8007d54 <HAL_DMA_Abort_IT+0x480>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d004      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x3a0>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a3a      	ldr	r2, [pc, #232]	; (8007d58 <HAL_DMA_Abort_IT+0x484>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d101      	bne.n	8007c78 <HAL_DMA_Abort_IT+0x3a4>
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <HAL_DMA_Abort_IT+0x3a6>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d028      	beq.n	8007cd0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c98:	f003 031f 	and.w	r3, r3, #31
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	409a      	lsls	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007cac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00c      	beq.n	8007cd0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cc4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007cce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40020010 	.word	0x40020010
 8007d00:	40020028 	.word	0x40020028
 8007d04:	40020040 	.word	0x40020040
 8007d08:	40020058 	.word	0x40020058
 8007d0c:	40020070 	.word	0x40020070
 8007d10:	40020088 	.word	0x40020088
 8007d14:	400200a0 	.word	0x400200a0
 8007d18:	400200b8 	.word	0x400200b8
 8007d1c:	40020410 	.word	0x40020410
 8007d20:	40020428 	.word	0x40020428
 8007d24:	40020440 	.word	0x40020440
 8007d28:	40020458 	.word	0x40020458
 8007d2c:	40020470 	.word	0x40020470
 8007d30:	40020488 	.word	0x40020488
 8007d34:	400204a0 	.word	0x400204a0
 8007d38:	400204b8 	.word	0x400204b8
 8007d3c:	58025408 	.word	0x58025408
 8007d40:	5802541c 	.word	0x5802541c
 8007d44:	58025430 	.word	0x58025430
 8007d48:	58025444 	.word	0x58025444
 8007d4c:	58025458 	.word	0x58025458
 8007d50:	5802546c 	.word	0x5802546c
 8007d54:	58025480 	.word	0x58025480
 8007d58:	58025494 	.word	0x58025494

08007d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b089      	sub	sp, #36	; 0x24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d6a:	4b89      	ldr	r3, [pc, #548]	; (8007f90 <HAL_GPIO_Init+0x234>)
 8007d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d6e:	e194      	b.n	800809a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	2101      	movs	r1, #1
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 8186 	beq.w	8008094 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d00b      	beq.n	8007da8 <HAL_GPIO_Init+0x4c>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d007      	beq.n	8007da8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d9c:	2b11      	cmp	r3, #17
 8007d9e:	d003      	beq.n	8007da8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2b12      	cmp	r3, #18
 8007da6:	d130      	bne.n	8007e0a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	2203      	movs	r2, #3
 8007db4:	fa02 f303 	lsl.w	r3, r2, r3
 8007db8:	43db      	mvns	r3, r3
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dde:	2201      	movs	r2, #1
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	43db      	mvns	r3, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	4013      	ands	r3, r2
 8007dec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	091b      	lsrs	r3, r3, #4
 8007df4:	f003 0201 	and.w	r2, r3, #1
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	2203      	movs	r2, #3
 8007e16:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d003      	beq.n	8007e4a <HAL_GPIO_Init+0xee>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b12      	cmp	r3, #18
 8007e48:	d123      	bne.n	8007e92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	08da      	lsrs	r2, r3, #3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3208      	adds	r2, #8
 8007e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	220f      	movs	r2, #15
 8007e62:	fa02 f303 	lsl.w	r3, r2, r3
 8007e66:	43db      	mvns	r3, r3
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	691a      	ldr	r2, [r3, #16]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	08da      	lsrs	r2, r3, #3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3208      	adds	r2, #8
 8007e8c:	69b9      	ldr	r1, [r7, #24]
 8007e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	2203      	movs	r2, #3
 8007e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea2:	43db      	mvns	r3, r3
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f003 0203 	and.w	r2, r3, #3
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 80e0 	beq.w	8008094 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ed4:	4b2f      	ldr	r3, [pc, #188]	; (8007f94 <HAL_GPIO_Init+0x238>)
 8007ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007eda:	4a2e      	ldr	r2, [pc, #184]	; (8007f94 <HAL_GPIO_Init+0x238>)
 8007edc:	f043 0302 	orr.w	r3, r3, #2
 8007ee0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007ee4:	4b2b      	ldr	r3, [pc, #172]	; (8007f94 <HAL_GPIO_Init+0x238>)
 8007ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ef2:	4a29      	ldr	r2, [pc, #164]	; (8007f98 <HAL_GPIO_Init+0x23c>)
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	089b      	lsrs	r3, r3, #2
 8007ef8:	3302      	adds	r3, #2
 8007efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	220f      	movs	r2, #15
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	43db      	mvns	r3, r3
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	4013      	ands	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a20      	ldr	r2, [pc, #128]	; (8007f9c <HAL_GPIO_Init+0x240>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d052      	beq.n	8007fc4 <HAL_GPIO_Init+0x268>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a1f      	ldr	r2, [pc, #124]	; (8007fa0 <HAL_GPIO_Init+0x244>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d031      	beq.n	8007f8a <HAL_GPIO_Init+0x22e>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a1e      	ldr	r2, [pc, #120]	; (8007fa4 <HAL_GPIO_Init+0x248>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d02b      	beq.n	8007f86 <HAL_GPIO_Init+0x22a>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1d      	ldr	r2, [pc, #116]	; (8007fa8 <HAL_GPIO_Init+0x24c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d025      	beq.n	8007f82 <HAL_GPIO_Init+0x226>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1c      	ldr	r2, [pc, #112]	; (8007fac <HAL_GPIO_Init+0x250>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d01f      	beq.n	8007f7e <HAL_GPIO_Init+0x222>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1b      	ldr	r2, [pc, #108]	; (8007fb0 <HAL_GPIO_Init+0x254>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d019      	beq.n	8007f7a <HAL_GPIO_Init+0x21e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1a      	ldr	r2, [pc, #104]	; (8007fb4 <HAL_GPIO_Init+0x258>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d013      	beq.n	8007f76 <HAL_GPIO_Init+0x21a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a19      	ldr	r2, [pc, #100]	; (8007fb8 <HAL_GPIO_Init+0x25c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00d      	beq.n	8007f72 <HAL_GPIO_Init+0x216>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a18      	ldr	r2, [pc, #96]	; (8007fbc <HAL_GPIO_Init+0x260>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d007      	beq.n	8007f6e <HAL_GPIO_Init+0x212>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a17      	ldr	r2, [pc, #92]	; (8007fc0 <HAL_GPIO_Init+0x264>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d101      	bne.n	8007f6a <HAL_GPIO_Init+0x20e>
 8007f66:	2309      	movs	r3, #9
 8007f68:	e02d      	b.n	8007fc6 <HAL_GPIO_Init+0x26a>
 8007f6a:	230a      	movs	r3, #10
 8007f6c:	e02b      	b.n	8007fc6 <HAL_GPIO_Init+0x26a>
 8007f6e:	2308      	movs	r3, #8
 8007f70:	e029      	b.n	8007fc6 <HAL_GPIO_Init+0x26a>
 8007f72:	2307      	movs	r3, #7
 8007f74:	e027      	b.n	8007fc6 <HAL_GPIO_Init+0x26a>
 8007f76:	2306      	movs	r3, #6
 8007f78:	e025      	b.n	8007fc6 <HAL_GPIO_Init+0x26a>
 8007f7a:	2305      	movs	r3, #5
 8007f7c:	e023      	b.n	8007fc6 <HAL_GPIO_Init+0x26a>
 8007f7e:	2304      	movs	r3, #4
 8007f80:	e021      	b.n	8007fc6 <HAL_GPIO_Init+0x26a>
 8007f82:	2303      	movs	r3, #3
 8007f84:	e01f      	b.n	8007fc6 <HAL_GPIO_Init+0x26a>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e01d      	b.n	8007fc6 <HAL_GPIO_Init+0x26a>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e01b      	b.n	8007fc6 <HAL_GPIO_Init+0x26a>
 8007f8e:	bf00      	nop
 8007f90:	58000080 	.word	0x58000080
 8007f94:	58024400 	.word	0x58024400
 8007f98:	58000400 	.word	0x58000400
 8007f9c:	58020000 	.word	0x58020000
 8007fa0:	58020400 	.word	0x58020400
 8007fa4:	58020800 	.word	0x58020800
 8007fa8:	58020c00 	.word	0x58020c00
 8007fac:	58021000 	.word	0x58021000
 8007fb0:	58021400 	.word	0x58021400
 8007fb4:	58021800 	.word	0x58021800
 8007fb8:	58021c00 	.word	0x58021c00
 8007fbc:	58022000 	.word	0x58022000
 8007fc0:	58022400 	.word	0x58022400
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	f002 0203 	and.w	r2, r2, #3
 8007fcc:	0092      	lsls	r2, r2, #2
 8007fce:	4093      	lsls	r3, r2
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fd6:	4938      	ldr	r1, [pc, #224]	; (80080b8 <HAL_GPIO_Init+0x35c>)
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	089b      	lsrs	r3, r3, #2
 8007fdc:	3302      	adds	r3, #2
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	43db      	mvns	r3, r3
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	43db      	mvns	r3, r3
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	4013      	ands	r3, r2
 800801c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	43db      	mvns	r3, r3
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	4013      	ands	r3, r2
 8008048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	4313      	orrs	r3, r2
 800805c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800805e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	43db      	mvns	r3, r3
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	4013      	ands	r3, r2
 8008076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800808c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	3301      	adds	r3, #1
 8008098:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	fa22 f303 	lsr.w	r3, r2, r3
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f47f ae63 	bne.w	8007d70 <HAL_GPIO_Init+0x14>
  }
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	3724      	adds	r7, #36	; 0x24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	58000400 	.word	0x58000400

080080bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	691a      	ldr	r2, [r3, #16]
 80080cc:	887b      	ldrh	r3, [r7, #2]
 80080ce:	4013      	ands	r3, r2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080d4:	2301      	movs	r3, #1
 80080d6:	73fb      	strb	r3, [r7, #15]
 80080d8:	e001      	b.n	80080de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	807b      	strh	r3, [r7, #2]
 80080f8:	4613      	mov	r3, r2
 80080fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080fc:	787b      	ldrb	r3, [r7, #1]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008102:	887a      	ldrh	r2, [r7, #2]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008108:	e003      	b.n	8008112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800810a:	887b      	ldrh	r3, [r7, #2]
 800810c:	041a      	lsls	r2, r3, #16
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	619a      	str	r2, [r3, #24]
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008130:	887a      	ldrh	r2, [r7, #2]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4013      	ands	r3, r2
 8008136:	041a      	lsls	r2, r3, #16
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	43d9      	mvns	r1, r3
 800813c:	887b      	ldrh	r3, [r7, #2]
 800813e:	400b      	ands	r3, r1
 8008140:	431a      	orrs	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	619a      	str	r2, [r3, #24]
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800815c:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800815e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008162:	4a0c      	ldr	r2, [pc, #48]	; (8008194 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008164:	f043 0302 	orr.w	r3, r3, #2
 8008168:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800816c:	4b09      	ldr	r3, [pc, #36]	; (8008194 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800816e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800817a:	4b07      	ldr	r3, [pc, #28]	; (8008198 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	4906      	ldr	r1, [pc, #24]	; (8008198 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4313      	orrs	r3, r2
 8008184:	604b      	str	r3, [r1, #4]
}
 8008186:	bf00      	nop
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	58024400 	.word	0x58024400
 8008198:	58000400 	.word	0x58000400

0800819c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800819c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800819e:	b08f      	sub	sp, #60	; 0x3c
 80081a0:	af0a      	add	r7, sp, #40	; 0x28
 80081a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e116      	b.n	80083dc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d106      	bne.n	80081ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f00e fa17 	bl	80165fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2203      	movs	r2, #3
 80081d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f009 fd82 	bl	8011cf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	687e      	ldr	r6, [r7, #4]
 80081fa:	466d      	mov	r5, sp
 80081fc:	f106 0410 	add.w	r4, r6, #16
 8008200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008208:	e894 0003 	ldmia.w	r4, {r0, r1}
 800820c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008210:	1d33      	adds	r3, r6, #4
 8008212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008214:	6838      	ldr	r0, [r7, #0]
 8008216:	f009 fc4d 	bl	8011ab4 <USB_CoreInit>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e0d7      	b.n	80083dc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2100      	movs	r1, #0
 8008232:	4618      	mov	r0, r3
 8008234:	f009 fd70 	bl	8011d18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
 800823c:	e04a      	b.n	80082d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800823e:	7bfa      	ldrb	r2, [r7, #15]
 8008240:	6879      	ldr	r1, [r7, #4]
 8008242:	4613      	mov	r3, r2
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	1a9b      	subs	r3, r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	440b      	add	r3, r1
 800824c:	333d      	adds	r3, #61	; 0x3d
 800824e:	2201      	movs	r2, #1
 8008250:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008252:	7bfa      	ldrb	r2, [r7, #15]
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	1a9b      	subs	r3, r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	440b      	add	r3, r1
 8008260:	333c      	adds	r3, #60	; 0x3c
 8008262:	7bfa      	ldrb	r2, [r7, #15]
 8008264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008266:	7bfa      	ldrb	r2, [r7, #15]
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	b298      	uxth	r0, r3
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	4613      	mov	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	1a9b      	subs	r3, r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	440b      	add	r3, r1
 8008278:	3342      	adds	r3, #66	; 0x42
 800827a:	4602      	mov	r2, r0
 800827c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800827e:	7bfa      	ldrb	r2, [r7, #15]
 8008280:	6879      	ldr	r1, [r7, #4]
 8008282:	4613      	mov	r3, r2
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	1a9b      	subs	r3, r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	440b      	add	r3, r1
 800828c:	333f      	adds	r3, #63	; 0x3f
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008292:	7bfa      	ldrb	r2, [r7, #15]
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	1a9b      	subs	r3, r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	3344      	adds	r3, #68	; 0x44
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80082a6:	7bfa      	ldrb	r2, [r7, #15]
 80082a8:	6879      	ldr	r1, [r7, #4]
 80082aa:	4613      	mov	r3, r2
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	440b      	add	r3, r1
 80082b4:	3348      	adds	r3, #72	; 0x48
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80082ba:	7bfa      	ldrb	r2, [r7, #15]
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	4613      	mov	r3, r2
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	1a9b      	subs	r3, r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	3350      	adds	r3, #80	; 0x50
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	3301      	adds	r3, #1
 80082d2:	73fb      	strb	r3, [r7, #15]
 80082d4:	7bfa      	ldrb	r2, [r7, #15]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d3af      	bcc.n	800823e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]
 80082e2:	e044      	b.n	800836e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80082e4:	7bfa      	ldrb	r2, [r7, #15]
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	4613      	mov	r3, r2
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	1a9b      	subs	r3, r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80082f6:	2200      	movs	r2, #0
 80082f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082fa:	7bfa      	ldrb	r2, [r7, #15]
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800830c:	7bfa      	ldrb	r2, [r7, #15]
 800830e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008310:	7bfa      	ldrb	r2, [r7, #15]
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	4613      	mov	r3, r2
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008322:	2200      	movs	r2, #0
 8008324:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008326:	7bfa      	ldrb	r2, [r7, #15]
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	4613      	mov	r3, r2
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	1a9b      	subs	r3, r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800833c:	7bfa      	ldrb	r2, [r7, #15]
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4613      	mov	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008352:	7bfa      	ldrb	r2, [r7, #15]
 8008354:	6879      	ldr	r1, [r7, #4]
 8008356:	4613      	mov	r3, r2
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	1a9b      	subs	r3, r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	440b      	add	r3, r1
 8008360:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	3301      	adds	r3, #1
 800836c:	73fb      	strb	r3, [r7, #15]
 800836e:	7bfa      	ldrb	r2, [r7, #15]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	429a      	cmp	r2, r3
 8008376:	d3b5      	bcc.n	80082e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	603b      	str	r3, [r7, #0]
 800837e:	687e      	ldr	r6, [r7, #4]
 8008380:	466d      	mov	r5, sp
 8008382:	f106 0410 	add.w	r4, r6, #16
 8008386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800838a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800838c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800838e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008392:	e885 0003 	stmia.w	r5, {r0, r1}
 8008396:	1d33      	adds	r3, r6, #4
 8008398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800839a:	6838      	ldr	r0, [r7, #0]
 800839c:	f009 fce6 	bl	8011d6c <USB_DevInit>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d005      	beq.n	80083b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2202      	movs	r2, #2
 80083aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e014      	b.n	80083dc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d102      	bne.n	80083d0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 f892 	bl	80094f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f00a fd66 	bl	8012ea6 <USB_DevDisconnect>

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d101      	bne.n	8008400 <HAL_PCD_Start+0x1c>
 80083fc:	2302      	movs	r3, #2
 80083fe:	e020      	b.n	8008442 <HAL_PCD_Start+0x5e>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	2b01      	cmp	r3, #1
 800840e:	d109      	bne.n	8008424 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008414:	2b01      	cmp	r3, #1
 8008416:	d005      	beq.n	8008424 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4618      	mov	r0, r3
 800842a:	f009 fc53 	bl	8011cd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4618      	mov	r0, r3
 8008434:	f00a fd16 	bl	8012e64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800844a:	b590      	push	{r4, r7, lr}
 800844c:	b08d      	sub	sp, #52	; 0x34
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f00a fdd4 	bl	801300e <USB_GetMode>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	f040 83ca 	bne.w	8008c02 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f00a fd38 	bl	8012ee8 <USB_ReadInterrupts>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 83c0 	beq.w	8008c00 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f00a fd2f 	bl	8012ee8 <USB_ReadInterrupts>
 800848a:	4603      	mov	r3, r0
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b02      	cmp	r3, #2
 8008492:	d107      	bne.n	80084a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	695a      	ldr	r2, [r3, #20]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f002 0202 	and.w	r2, r2, #2
 80084a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f00a fd1d 	bl	8012ee8 <USB_ReadInterrupts>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d161      	bne.n	800857c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0210 	bic.w	r2, r2, #16
 80084c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	f003 020f 	and.w	r2, r3, #15
 80084d4:	4613      	mov	r3, r2
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	1a9b      	subs	r3, r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	3304      	adds	r3, #4
 80084e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	0c5b      	lsrs	r3, r3, #17
 80084ec:	f003 030f 	and.w	r3, r3, #15
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d124      	bne.n	800853e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80084fa:	4013      	ands	r3, r2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d035      	beq.n	800856c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	091b      	lsrs	r3, r3, #4
 8008508:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800850a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800850e:	b29b      	uxth	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	6a38      	ldr	r0, [r7, #32]
 8008514:	f00a fb54 	bl	8012bc0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	091b      	lsrs	r3, r3, #4
 8008520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008524:	441a      	add	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	699a      	ldr	r2, [r3, #24]
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	091b      	lsrs	r3, r3, #4
 8008532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008536:	441a      	add	r2, r3
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	619a      	str	r2, [r3, #24]
 800853c:	e016      	b.n	800856c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	0c5b      	lsrs	r3, r3, #17
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	2b06      	cmp	r3, #6
 8008548:	d110      	bne.n	800856c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008550:	2208      	movs	r2, #8
 8008552:	4619      	mov	r1, r3
 8008554:	6a38      	ldr	r0, [r7, #32]
 8008556:	f00a fb33 	bl	8012bc0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	699a      	ldr	r2, [r3, #24]
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	091b      	lsrs	r3, r3, #4
 8008562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008566:	441a      	add	r2, r3
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699a      	ldr	r2, [r3, #24]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0210 	orr.w	r2, r2, #16
 800857a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4618      	mov	r0, r3
 8008582:	f00a fcb1 	bl	8012ee8 <USB_ReadInterrupts>
 8008586:	4603      	mov	r3, r0
 8008588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800858c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008590:	d16e      	bne.n	8008670 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f00a fcb7 	bl	8012f0e <USB_ReadDevAllOutEpInterrupt>
 80085a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80085a2:	e062      	b.n	800866a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d057      	beq.n	800865e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b4:	b2d2      	uxtb	r2, r2
 80085b6:	4611      	mov	r1, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f00a fcdc 	bl	8012f76 <USB_ReadDevOutEPInterrupt>
 80085be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d6:	461a      	mov	r2, r3
 80085d8:	2301      	movs	r3, #1
 80085da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80085dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fdde 	bl	80091a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00c      	beq.n	8008608 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fa:	461a      	mov	r2, r3
 80085fc:	2308      	movs	r3, #8
 80085fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fed8 	bl	80093b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861e:	461a      	mov	r2, r3
 8008620:	2310      	movs	r3, #16
 8008622:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b00      	cmp	r3, #0
 800862c:	d008      	beq.n	8008640 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863a:	461a      	mov	r2, r3
 800863c:	2320      	movs	r3, #32
 800863e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008656:	461a      	mov	r2, r3
 8008658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800865c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	3301      	adds	r3, #1
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d199      	bne.n	80085a4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f00a fc37 	bl	8012ee8 <USB_ReadInterrupts>
 800867a:	4603      	mov	r3, r0
 800867c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008684:	f040 80c0 	bne.w	8008808 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f00a fc58 	bl	8012f42 <USB_ReadDevAllInEpInterrupt>
 8008692:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008694:	2300      	movs	r3, #0
 8008696:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008698:	e0b2      	b.n	8008800 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 80a7 	beq.w	80087f4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ac:	b2d2      	uxtb	r2, r2
 80086ae:	4611      	mov	r1, r2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f00a fc7e 	bl	8012fb2 <USB_ReadDevInEPInterrupt>
 80086b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d057      	beq.n	8008772 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	2201      	movs	r2, #1
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	43db      	mvns	r3, r3
 80086dc:	69f9      	ldr	r1, [r7, #28]
 80086de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e2:	4013      	ands	r3, r2
 80086e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f2:	461a      	mov	r2, r3
 80086f4:	2301      	movs	r3, #1
 80086f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d132      	bne.n	8008766 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008704:	4613      	mov	r3, r2
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	1a9b      	subs	r3, r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	3348      	adds	r3, #72	; 0x48
 8008710:	6819      	ldr	r1, [r3, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008716:	4613      	mov	r3, r2
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	1a9b      	subs	r3, r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4403      	add	r3, r0
 8008720:	3344      	adds	r3, #68	; 0x44
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4419      	add	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872a:	4613      	mov	r3, r2
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	1a9b      	subs	r3, r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4403      	add	r3, r0
 8008734:	3348      	adds	r3, #72	; 0x48
 8008736:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	2b00      	cmp	r3, #0
 800873c:	d113      	bne.n	8008766 <HAL_PCD_IRQHandler+0x31c>
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008742:	4613      	mov	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	3350      	adds	r3, #80	; 0x50
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d108      	bne.n	8008766 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800875e:	461a      	mov	r2, r3
 8008760:	2101      	movs	r1, #1
 8008762:	f00a fc87 	bl	8013074 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	b2db      	uxtb	r3, r3
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f00d ffc6 	bl	80166fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f003 0308 	and.w	r3, r3, #8
 8008778:	2b00      	cmp	r3, #0
 800877a:	d008      	beq.n	800878e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008788:	461a      	mov	r2, r3
 800878a:	2308      	movs	r3, #8
 800878c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f003 0310 	and.w	r3, r3, #16
 8008794:	2b00      	cmp	r3, #0
 8008796:	d008      	beq.n	80087aa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a4:	461a      	mov	r2, r3
 80087a6:	2310      	movs	r3, #16
 80087a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d008      	beq.n	80087c6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c0:	461a      	mov	r2, r3
 80087c2:	2340      	movs	r3, #64	; 0x40
 80087c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f003 0302 	and.w	r3, r3, #2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d008      	beq.n	80087e2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087dc:	461a      	mov	r2, r3
 80087de:	2302      	movs	r3, #2
 80087e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80087ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fc48 	bl	8009084 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	3301      	adds	r3, #1
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	085b      	lsrs	r3, r3, #1
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008802:	2b00      	cmp	r3, #0
 8008804:	f47f af49 	bne.w	800869a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f00a fb6b 	bl	8012ee8 <USB_ReadInterrupts>
 8008812:	4603      	mov	r3, r0
 8008814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800881c:	d122      	bne.n	8008864 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800882c:	f023 0301 	bic.w	r3, r3, #1
 8008830:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008838:	2b01      	cmp	r3, #1
 800883a:	d108      	bne.n	800884e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008844:	2100      	movs	r1, #0
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fe78 	bl	800953c <HAL_PCDEx_LPM_Callback>
 800884c:	e002      	b.n	8008854 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f00d ffcc 	bl	80167ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	695a      	ldr	r2, [r3, #20]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4618      	mov	r0, r3
 800886a:	f00a fb3d 	bl	8012ee8 <USB_ReadInterrupts>
 800886e:	4603      	mov	r3, r0
 8008870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008878:	d112      	bne.n	80088a0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d102      	bne.n	8008890 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f00d ff88 	bl	80167a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	695a      	ldr	r2, [r3, #20]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800889e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f00a fb1f 	bl	8012ee8 <USB_ReadInterrupts>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b4:	d121      	bne.n	80088fa <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695a      	ldr	r2, [r3, #20]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80088c4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d111      	bne.n	80088f4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088de:	089b      	lsrs	r3, r3, #2
 80088e0:	f003 020f 	and.w	r2, r3, #15
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80088ea:	2101      	movs	r1, #1
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fe25 	bl	800953c <HAL_PCDEx_LPM_Callback>
 80088f2:	e002      	b.n	80088fa <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f00d ff53 	bl	80167a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f00a faf2 	bl	8012ee8 <USB_ReadInterrupts>
 8008904:	4603      	mov	r3, r0
 8008906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800890a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890e:	f040 80c7 	bne.w	8008aa0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2110      	movs	r1, #16
 800892c:	4618      	mov	r0, r3
 800892e:	f009 fb7b 	bl	8012028 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008932:	2300      	movs	r3, #0
 8008934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008936:	e056      	b.n	80089e6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008944:	461a      	mov	r2, r3
 8008946:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800894a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	440a      	add	r2, r1
 8008962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800896a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	440a      	add	r2, r1
 8008982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008986:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800898a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008998:	461a      	mov	r2, r3
 800899a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800899e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b0:	0151      	lsls	r1, r2, #5
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	440a      	add	r2, r1
 80089b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089d0:	0151      	lsls	r1, r2, #5
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	440a      	add	r2, r1
 80089d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089de:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	3301      	adds	r3, #1
 80089e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d3a3      	bcc.n	8008938 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	69fa      	ldr	r2, [r7, #28]
 80089fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089fe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008a02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d016      	beq.n	8008a3a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a1c:	f043 030b 	orr.w	r3, r3, #11
 8008a20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a32:	f043 030b 	orr.w	r3, r3, #11
 8008a36:	6453      	str	r3, [r2, #68]	; 0x44
 8008a38:	e015      	b.n	8008a66 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f242 032b 	movw	r3, #8235	; 0x202b
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	69fa      	ldr	r2, [r7, #28]
 8008a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a60:	f043 030b 	orr.w	r3, r3, #11
 8008a64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f00a faf2 	bl	8013074 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f00a fa1f 	bl	8012ee8 <USB_ReadInterrupts>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ab4:	d124      	bne.n	8008b00 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f00a fab6 	bl	801302c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f009 fb10 	bl	80120ea <USB_GetDevSpeed>
 8008aca:	4603      	mov	r3, r0
 8008acc:	461a      	mov	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681c      	ldr	r4, [r3, #0]
 8008ad6:	f002 f91b 	bl	800ad10 <HAL_RCC_GetHCLKFreq>
 8008ada:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f009 f853 	bl	8011b90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f00d fe2f 	bl	801674e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	695a      	ldr	r2, [r3, #20]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f00a f9ef 	bl	8012ee8 <USB_ReadInterrupts>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d10a      	bne.n	8008b2a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f00d fe0c 	bl	8016732 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	695a      	ldr	r2, [r3, #20]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f002 0208 	and.w	r2, r2, #8
 8008b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f00a f9da 	bl	8012ee8 <USB_ReadInterrupts>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b3e:	d10f      	bne.n	8008b60 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f00d fe6e 	bl	801682c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	695a      	ldr	r2, [r3, #20]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f00a f9bf 	bl	8012ee8 <USB_ReadInterrupts>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b74:	d10f      	bne.n	8008b96 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f00d fe41 	bl	8016808 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	695a      	ldr	r2, [r3, #20]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f00a f9a4 	bl	8012ee8 <USB_ReadInterrupts>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008baa:	d10a      	bne.n	8008bc2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f00d fe4f 	bl	8016850 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	695a      	ldr	r2, [r3, #20]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f00a f98e 	bl	8012ee8 <USB_ReadInterrupts>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d115      	bne.n	8008c02 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f00d fe3f 	bl	801686c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6859      	ldr	r1, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	e000      	b.n	8008c02 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008c00:	bf00      	nop
    }
  }
}
 8008c02:	3734      	adds	r7, #52	; 0x34
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd90      	pop	{r4, r7, pc}

08008c08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <HAL_PCD_SetAddress+0x1a>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e013      	b.n	8008c4a <HAL_PCD_SetAddress+0x42>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	78fa      	ldrb	r2, [r7, #3]
 8008c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f00a f8ec 	bl	8012e18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	4608      	mov	r0, r1
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	461a      	mov	r2, r3
 8008c60:	4603      	mov	r3, r0
 8008c62:	70fb      	strb	r3, [r7, #3]
 8008c64:	460b      	mov	r3, r1
 8008c66:	803b      	strh	r3, [r7, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	da0f      	bge.n	8008c98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	f003 020f 	and.w	r2, r3, #15
 8008c7e:	4613      	mov	r3, r2
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	1a9b      	subs	r3, r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	3338      	adds	r3, #56	; 0x38
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	705a      	strb	r2, [r3, #1]
 8008c96:	e00f      	b.n	8008cb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	f003 020f 	and.w	r2, r3, #15
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	1a9b      	subs	r3, r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	4413      	add	r3, r2
 8008cae:	3304      	adds	r3, #4
 8008cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	f003 030f 	and.w	r3, r3, #15
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008cc4:	883a      	ldrh	r2, [r7, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	78ba      	ldrb	r2, [r7, #2]
 8008cce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d004      	beq.n	8008ce2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008ce2:	78bb      	ldrb	r3, [r7, #2]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d102      	bne.n	8008cee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d101      	bne.n	8008cfc <HAL_PCD_EP_Open+0xaa>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	e00e      	b.n	8008d1a <HAL_PCD_EP_Open+0xc8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68f9      	ldr	r1, [r7, #12]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f009 fa12 	bl	8012134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008d18:	7afb      	ldrb	r3, [r7, #11]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	da0f      	bge.n	8008d56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	f003 020f 	and.w	r2, r3, #15
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	1a9b      	subs	r3, r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	3338      	adds	r3, #56	; 0x38
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	4413      	add	r3, r2
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	705a      	strb	r2, [r3, #1]
 8008d54:	e00f      	b.n	8008d76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d56:	78fb      	ldrb	r3, [r7, #3]
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	1a9b      	subs	r3, r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008d76:	78fb      	ldrb	r3, [r7, #3]
 8008d78:	f003 030f 	and.w	r3, r3, #15
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d101      	bne.n	8008d90 <HAL_PCD_EP_Close+0x6e>
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	e00e      	b.n	8008dae <HAL_PCD_EP_Close+0x8c>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68f9      	ldr	r1, [r7, #12]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f009 fa50 	bl	8012244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	f003 020f 	and.w	r2, r3, #15
 8008dcc:	4613      	mov	r3, r2
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4413      	add	r3, r2
 8008ddc:	3304      	adds	r3, #4
 8008dde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	2200      	movs	r2, #0
 8008df0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2200      	movs	r2, #0
 8008df6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008df8:	7afb      	ldrb	r3, [r7, #11]
 8008dfa:	f003 030f 	and.w	r3, r3, #15
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d102      	bne.n	8008e12 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e12:	7afb      	ldrb	r3, [r7, #11]
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d109      	bne.n	8008e30 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	6979      	ldr	r1, [r7, #20]
 8008e2a:	f009 fd33 	bl	8012894 <USB_EP0StartXfer>
 8008e2e:	e008      	b.n	8008e42 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	6979      	ldr	r1, [r7, #20]
 8008e3e:	f009 fadd 	bl	80123fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	f003 020f 	and.w	r2, r3, #15
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	4613      	mov	r3, r2
 8008e62:	00db      	lsls	r3, r3, #3
 8008e64:	1a9b      	subs	r3, r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	440b      	add	r3, r1
 8008e6a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008e6e:	681b      	ldr	r3, [r3, #0]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	607a      	str	r2, [r7, #4]
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	f003 020f 	and.w	r2, r3, #15
 8008e92:	4613      	mov	r3, r2
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	1a9b      	subs	r3, r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	3338      	adds	r3, #56	; 0x38
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ebc:	7afb      	ldrb	r3, [r7, #11]
 8008ebe:	f003 030f 	and.w	r3, r3, #15
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d102      	bne.n	8008ed6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	f003 030f 	and.w	r3, r3, #15
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d109      	bne.n	8008ef4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6818      	ldr	r0, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	461a      	mov	r2, r3
 8008eec:	6979      	ldr	r1, [r7, #20]
 8008eee:	f009 fcd1 	bl	8012894 <USB_EP0StartXfer>
 8008ef2:	e008      	b.n	8008f06 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	461a      	mov	r2, r3
 8008f00:	6979      	ldr	r1, [r7, #20]
 8008f02:	f009 fa7b 	bl	80123fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	f003 020f 	and.w	r2, r3, #15
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d901      	bls.n	8008f2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e050      	b.n	8008fd0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	da0f      	bge.n	8008f56 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	f003 020f 	and.w	r2, r3, #15
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	1a9b      	subs	r3, r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	3338      	adds	r3, #56	; 0x38
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4413      	add	r3, r2
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2201      	movs	r2, #1
 8008f52:	705a      	strb	r2, [r3, #1]
 8008f54:	e00d      	b.n	8008f72 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008f56:	78fa      	ldrb	r2, [r7, #3]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	1a9b      	subs	r3, r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4413      	add	r3, r2
 8008f68:	3304      	adds	r3, #4
 8008f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d101      	bne.n	8008f92 <HAL_PCD_EP_SetStall+0x82>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e01e      	b.n	8008fd0 <HAL_PCD_EP_SetStall+0xc0>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68f9      	ldr	r1, [r7, #12]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f009 fe65 	bl	8012c70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008fa6:	78fb      	ldrb	r3, [r7, #3]
 8008fa8:	f003 030f 	and.w	r3, r3, #15
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6818      	ldr	r0, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	b2d9      	uxtb	r1, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f00a f857 	bl	8013074 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	f003 020f 	and.w	r2, r3, #15
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d901      	bls.n	8008ff6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e042      	b.n	800907c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	da0f      	bge.n	800901e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ffe:	78fb      	ldrb	r3, [r7, #3]
 8009000:	f003 020f 	and.w	r2, r3, #15
 8009004:	4613      	mov	r3, r2
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	1a9b      	subs	r3, r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	3338      	adds	r3, #56	; 0x38
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	4413      	add	r3, r2
 8009012:	3304      	adds	r3, #4
 8009014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	705a      	strb	r2, [r3, #1]
 800901c:	e00f      	b.n	800903e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	f003 020f 	and.w	r2, r3, #15
 8009024:	4613      	mov	r3, r2
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	1a9b      	subs	r3, r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	4413      	add	r3, r2
 8009034:	3304      	adds	r3, #4
 8009036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	b2da      	uxtb	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009056:	2b01      	cmp	r3, #1
 8009058:	d101      	bne.n	800905e <HAL_PCD_EP_ClrStall+0x86>
 800905a:	2302      	movs	r3, #2
 800905c:	e00e      	b.n	800907c <HAL_PCD_EP_ClrStall+0xa4>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68f9      	ldr	r1, [r7, #12]
 800906c:	4618      	mov	r0, r3
 800906e:	f009 fe6d 	bl	8012d4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08a      	sub	sp, #40	; 0x28
 8009088:	af02      	add	r7, sp, #8
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	4613      	mov	r3, r2
 800909c:	00db      	lsls	r3, r3, #3
 800909e:	1a9b      	subs	r3, r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	3338      	adds	r3, #56	; 0x38
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	3304      	adds	r3, #4
 80090aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	699a      	ldr	r2, [r3, #24]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d901      	bls.n	80090bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e06c      	b.n	8009196 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	695a      	ldr	r2, [r3, #20]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	69fa      	ldr	r2, [r7, #28]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d902      	bls.n	80090d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	3303      	adds	r3, #3
 80090dc:	089b      	lsrs	r3, r3, #2
 80090de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090e0:	e02b      	b.n	800913a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	695a      	ldr	r2, [r3, #20]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d902      	bls.n	80090fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	3303      	adds	r3, #3
 8009102:	089b      	lsrs	r3, r3, #2
 8009104:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	68d9      	ldr	r1, [r3, #12]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	b2da      	uxtb	r2, r3
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009116:	b2db      	uxtb	r3, r3
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	4603      	mov	r3, r0
 800911c:	6978      	ldr	r0, [r7, #20]
 800911e:	f009 fd11 	bl	8012b44 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	441a      	add	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	441a      	add	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	b29b      	uxth	r3, r3
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	429a      	cmp	r2, r3
 800914e:	d809      	bhi.n	8009164 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	699a      	ldr	r2, [r3, #24]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009158:	429a      	cmp	r2, r3
 800915a:	d203      	bcs.n	8009164 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1be      	bne.n	80090e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	695a      	ldr	r2, [r3, #20]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	429a      	cmp	r2, r3
 800916e:	d811      	bhi.n	8009194 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	f003 030f 	and.w	r3, r3, #15
 8009176:	2201      	movs	r2, #1
 8009178:	fa02 f303 	lsl.w	r3, r2, r3
 800917c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	43db      	mvns	r3, r3
 800918a:	6939      	ldr	r1, [r7, #16]
 800918c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009190:	4013      	ands	r3, r2
 8009192:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3720      	adds	r7, #32
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
	...

080091a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	333c      	adds	r3, #60	; 0x3c
 80091b8:	3304      	adds	r3, #4
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	f040 80a0 	bne.w	8009318 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	f003 0308 	and.w	r3, r3, #8
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d015      	beq.n	800920e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4a72      	ldr	r2, [pc, #456]	; (80093b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	f240 80dd 	bls.w	80093a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 80d7 	beq.w	80093a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009204:	461a      	mov	r2, r3
 8009206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800920a:	6093      	str	r3, [r2, #8]
 800920c:	e0cb      	b.n	80093a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f003 0320 	and.w	r3, r3, #32
 8009214:	2b00      	cmp	r3, #0
 8009216:	d009      	beq.n	800922c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009224:	461a      	mov	r2, r3
 8009226:	2320      	movs	r3, #32
 8009228:	6093      	str	r3, [r2, #8]
 800922a:	e0bc      	b.n	80093a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009232:	2b00      	cmp	r3, #0
 8009234:	f040 80b7 	bne.w	80093a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4a5d      	ldr	r2, [pc, #372]	; (80093b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d90f      	bls.n	8009260 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009256:	461a      	mov	r2, r3
 8009258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800925c:	6093      	str	r3, [r2, #8]
 800925e:	e0a2      	b.n	80093a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009260:	6879      	ldr	r1, [r7, #4]
 8009262:	683a      	ldr	r2, [r7, #0]
 8009264:	4613      	mov	r3, r2
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	440b      	add	r3, r1
 800926e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009272:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	0159      	lsls	r1, r3, #5
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	440b      	add	r3, r1
 800927c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009286:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	4613      	mov	r3, r2
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	1a9b      	subs	r3, r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4403      	add	r3, r0
 8009296:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800929a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800929c:	6879      	ldr	r1, [r7, #4]
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	00db      	lsls	r3, r3, #3
 80092a4:	1a9b      	subs	r3, r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	440b      	add	r3, r1
 80092aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80092ae:	6819      	ldr	r1, [r3, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	4613      	mov	r3, r2
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	1a9b      	subs	r3, r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4403      	add	r3, r0
 80092be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4419      	add	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	4613      	mov	r3, r2
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	1a9b      	subs	r3, r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4403      	add	r3, r0
 80092d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80092d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d114      	bne.n	800930a <PCD_EP_OutXfrComplete_int+0x16a>
 80092e0:	6879      	ldr	r1, [r7, #4]
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	4613      	mov	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	1a9b      	subs	r3, r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	440b      	add	r3, r1
 80092ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d108      	bne.n	800930a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009302:	461a      	mov	r2, r3
 8009304:	2101      	movs	r1, #1
 8009306:	f009 feb5 	bl	8013074 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f00d f9d9 	bl	80166c8 <HAL_PCD_DataOutStageCallback>
 8009316:	e046      	b.n	80093a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4a26      	ldr	r2, [pc, #152]	; (80093b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d124      	bne.n	800936a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	015a      	lsls	r2, r3, #5
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	4413      	add	r3, r2
 8009332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009336:	461a      	mov	r2, r3
 8009338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800933c:	6093      	str	r3, [r2, #8]
 800933e:	e032      	b.n	80093a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f003 0320 	and.w	r3, r3, #32
 8009346:	2b00      	cmp	r3, #0
 8009348:	d008      	beq.n	800935c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009356:	461a      	mov	r2, r3
 8009358:	2320      	movs	r3, #32
 800935a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f00d f9b0 	bl	80166c8 <HAL_PCD_DataOutStageCallback>
 8009368:	e01d      	b.n	80093a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d114      	bne.n	800939a <PCD_EP_OutXfrComplete_int+0x1fa>
 8009370:	6879      	ldr	r1, [r7, #4]
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	4613      	mov	r3, r2
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	1a9b      	subs	r3, r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	440b      	add	r3, r1
 800937e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d108      	bne.n	800939a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009392:	461a      	mov	r2, r3
 8009394:	2100      	movs	r1, #0
 8009396:	f009 fe6d 	bl	8013074 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f00d f991 	bl	80166c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	4f54300a 	.word	0x4f54300a
 80093b4:	4f54310a 	.word	0x4f54310a

080093b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	333c      	adds	r3, #60	; 0x3c
 80093d0:	3304      	adds	r3, #4
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	4a15      	ldr	r2, [pc, #84]	; (8009440 <PCD_EP_OutSetupPacket_int+0x88>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d90e      	bls.n	800940c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d009      	beq.n	800940c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009404:	461a      	mov	r2, r3
 8009406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800940a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f00d f949 	bl	80166a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4a0a      	ldr	r2, [pc, #40]	; (8009440 <PCD_EP_OutSetupPacket_int+0x88>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d90c      	bls.n	8009434 <PCD_EP_OutSetupPacket_int+0x7c>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d108      	bne.n	8009434 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800942c:	461a      	mov	r2, r3
 800942e:	2101      	movs	r1, #1
 8009430:	f009 fe20 	bl	8013074 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	4f54300a 	.word	0x4f54300a

08009444 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
 8009450:	4613      	mov	r3, r2
 8009452:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800945c:	78fb      	ldrb	r3, [r7, #3]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d107      	bne.n	8009472 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009462:	883b      	ldrh	r3, [r7, #0]
 8009464:	0419      	lsls	r1, r3, #16
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	430a      	orrs	r2, r1
 800946e:	629a      	str	r2, [r3, #40]	; 0x28
 8009470:	e028      	b.n	80094c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009478:	0c1b      	lsrs	r3, r3, #16
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	4413      	add	r3, r2
 800947e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]
 8009484:	e00d      	b.n	80094a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	3340      	adds	r3, #64	; 0x40
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	0c1b      	lsrs	r3, r3, #16
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4413      	add	r3, r2
 800949a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	3301      	adds	r3, #1
 80094a0:	73fb      	strb	r3, [r7, #15]
 80094a2:	7bfa      	ldrb	r2, [r7, #15]
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d3ec      	bcc.n	8009486 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80094ac:	883b      	ldrh	r3, [r7, #0]
 80094ae:	0418      	lsls	r0, r3, #16
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6819      	ldr	r1, [r3, #0]
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	3b01      	subs	r3, #1
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	4302      	orrs	r2, r0
 80094bc:	3340      	adds	r3, #64	; 0x40
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	460b      	mov	r3, r1
 80094dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	887a      	ldrh	r2, [r7, #2]
 80094e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009522:	4b05      	ldr	r3, [pc, #20]	; (8009538 <HAL_PCDEx_ActivateLPM+0x44>)
 8009524:	4313      	orrs	r3, r2
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	10000003 	.word	0x10000003

0800953c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009554:	b480      	push	{r7}
 8009556:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009558:	4b05      	ldr	r3, [pc, #20]	; (8009570 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a04      	ldr	r2, [pc, #16]	; (8009570 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800955e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009562:	6013      	str	r3, [r2, #0]
}
 8009564:	bf00      	nop
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	58024800 	.word	0x58024800

08009574 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800957c:	4b19      	ldr	r3, [pc, #100]	; (80095e4 <HAL_PWREx_ConfigSupply+0x70>)
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b04      	cmp	r3, #4
 8009586:	d00a      	beq.n	800959e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009588:	4b16      	ldr	r3, [pc, #88]	; (80095e4 <HAL_PWREx_ConfigSupply+0x70>)
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	429a      	cmp	r2, r3
 8009594:	d001      	beq.n	800959a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e01f      	b.n	80095da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	e01d      	b.n	80095da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800959e:	4b11      	ldr	r3, [pc, #68]	; (80095e4 <HAL_PWREx_ConfigSupply+0x70>)
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	f023 0207 	bic.w	r2, r3, #7
 80095a6:	490f      	ldr	r1, [pc, #60]	; (80095e4 <HAL_PWREx_ConfigSupply+0x70>)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80095ae:	f7fc fb57 	bl	8005c60 <HAL_GetTick>
 80095b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095b4:	e009      	b.n	80095ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80095b6:	f7fc fb53 	bl	8005c60 <HAL_GetTick>
 80095ba:	4602      	mov	r2, r0
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095c4:	d901      	bls.n	80095ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e007      	b.n	80095da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80095ca:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <HAL_PWREx_ConfigSupply+0x70>)
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d6:	d1ee      	bne.n	80095b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	58024800 	.word	0x58024800

080095e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80095ec:	4b05      	ldr	r3, [pc, #20]	; (8009604 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	4a04      	ldr	r2, [pc, #16]	; (8009604 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80095f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095f6:	60d3      	str	r3, [r2, #12]
}
 80095f8:	bf00      	nop
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	58024800 	.word	0x58024800

08009608 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af02      	add	r7, sp, #8
 800960e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009610:	f7fc fb26 	bl	8005c60 <HAL_GetTick>
 8009614:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e05f      	b.n	80096e0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	d107      	bne.n	800963c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7f8 ffe5 	bl	80025fc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009632:	f241 3188 	movw	r1, #5000	; 0x1388
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa5e 	bl	8009af8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	3b01      	subs	r3, #1
 800964c:	021a      	lsls	r2, r3, #8
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	2120      	movs	r1, #32
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fa56 	bl	8009b14 <QSPI_WaitFlagStateUntilTimeout>
 8009668:	4603      	mov	r3, r0
 800966a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800966c:	7afb      	ldrb	r3, [r7, #11]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d135      	bne.n	80096de <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	4b1b      	ldr	r3, [pc, #108]	; (80096e8 <HAL_QSPI_Init+0xe0>)
 800967a:	4013      	ands	r3, r2
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	6852      	ldr	r2, [r2, #4]
 8009680:	0611      	lsls	r1, r2, #24
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	68d2      	ldr	r2, [r2, #12]
 8009686:	4311      	orrs	r1, r2
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	69d2      	ldr	r2, [r2, #28]
 800968c:	4311      	orrs	r1, r2
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	6a12      	ldr	r2, [r2, #32]
 8009692:	4311      	orrs	r1, r2
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	6812      	ldr	r2, [r2, #0]
 8009698:	430b      	orrs	r3, r1
 800969a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	4b12      	ldr	r3, [pc, #72]	; (80096ec <HAL_QSPI_Init+0xe4>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6912      	ldr	r2, [r2, #16]
 80096aa:	0411      	lsls	r1, r2, #16
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	6952      	ldr	r2, [r2, #20]
 80096b0:	4311      	orrs	r1, r2
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	6992      	ldr	r2, [r2, #24]
 80096b6:	4311      	orrs	r1, r2
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6812      	ldr	r2, [r2, #0]
 80096bc:	430b      	orrs	r3, r1
 80096be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0201 	orr.w	r2, r2, #1
 80096ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80096de:	7afb      	ldrb	r3, [r7, #11]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	00ffff2f 	.word	0x00ffff2f
 80096ec:	ffe0f8fe 	.word	0xffe0f8fe

080096f0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80096fc:	f7fc fab0 	bl	8005c60 <HAL_GetTick>
 8009700:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <HAL_QSPI_Command+0x22>
 800970e:	2302      	movs	r3, #2
 8009710:	e048      	b.n	80097a4 <HAL_QSPI_Command+0xb4>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b01      	cmp	r3, #1
 8009724:	d137      	bne.n	8009796 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2202      	movs	r2, #2
 8009730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2200      	movs	r2, #0
 800973c:	2120      	movs	r1, #32
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f000 f9e8 	bl	8009b14 <QSPI_WaitFlagStateUntilTimeout>
 8009744:	4603      	mov	r3, r0
 8009746:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009748:	7dfb      	ldrb	r3, [r7, #23]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d125      	bne.n	800979a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800974e:	2200      	movs	r2, #0
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 fa15 	bl	8009b82 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	2b00      	cmp	r3, #0
 800975e:	d115      	bne.n	800978c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2201      	movs	r2, #1
 8009768:	2102      	movs	r1, #2
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 f9d2 	bl	8009b14 <QSPI_WaitFlagStateUntilTimeout>
 8009770:	4603      	mov	r3, r0
 8009772:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8009774:	7dfb      	ldrb	r3, [r7, #23]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10f      	bne.n	800979a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2202      	movs	r2, #2
 8009780:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800978a:	e006      	b.n	800979a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009794:	e001      	b.n	800979a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8009796:	2302      	movs	r3, #2
 8009798:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08a      	sub	sp, #40	; 0x28
 80097b0:	af02      	add	r7, sp, #8
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80097bc:	f7fc fa50 	bl	8005c60 <HAL_GetTick>
 80097c0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3320      	adds	r3, #32
 80097c8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_QSPI_Transmit+0x2e>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e076      	b.n	80098c8 <HAL_QSPI_Transmit+0x11c>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d165      	bne.n	80098ba <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d056      	beq.n	80098a8 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2212      	movs	r2, #18
 80097fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	695a      	ldr	r2, [r3, #20]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800982e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8009830:	e01b      	b.n	800986a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2201      	movs	r2, #1
 800983a:	2104      	movs	r1, #4
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f969 	bl	8009b14 <QSPI_WaitFlagStateUntilTimeout>
 8009842:	4603      	mov	r3, r0
 8009844:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8009846:	7ffb      	ldrb	r3, [r7, #31]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d113      	bne.n	8009874 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	781a      	ldrb	r2, [r3, #0]
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009864:	1e5a      	subs	r2, r3, #1
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1df      	bne.n	8009832 <HAL_QSPI_Transmit+0x86>
 8009872:	e000      	b.n	8009876 <HAL_QSPI_Transmit+0xca>
          break;
 8009874:	bf00      	nop
      }

      if (status == HAL_OK)
 8009876:	7ffb      	ldrb	r3, [r7, #31]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d110      	bne.n	800989e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	2201      	movs	r2, #1
 8009884:	2102      	movs	r1, #2
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f944 	bl	8009b14 <QSPI_WaitFlagStateUntilTimeout>
 800988c:	4603      	mov	r3, r0
 800988e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8009890:	7ffb      	ldrb	r3, [r7, #31]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d103      	bne.n	800989e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2202      	movs	r2, #2
 800989c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098a6:	e00a      	b.n	80098be <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ac:	f043 0208 	orr.w	r2, r3, #8
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	77fb      	strb	r3, [r7, #31]
 80098b8:	e001      	b.n	80098be <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80098ba:	2302      	movs	r3, #2
 80098bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80098c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3720      	adds	r7, #32
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b08a      	sub	sp, #40	; 0x28
 80098d4:	af02      	add	r7, sp, #8
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80098e0:	f7fc f9be 	bl	8005c60 <HAL_GetTick>
 80098e4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3320      	adds	r3, #32
 80098f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d101      	bne.n	8009906 <HAL_QSPI_Receive+0x36>
 8009902:	2302      	movs	r3, #2
 8009904:	e07d      	b.n	8009a02 <HAL_QSPI_Receive+0x132>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b01      	cmp	r3, #1
 8009918:	d16c      	bne.n	80099f4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d05d      	beq.n	80099e2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2222      	movs	r2, #34	; 0x22
 800992a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	1c5a      	adds	r2, r3, #1
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800995e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8009968:	e01c      	b.n	80099a4 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	2201      	movs	r2, #1
 8009972:	2106      	movs	r1, #6
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 f8cd 	bl	8009b14 <QSPI_WaitFlagStateUntilTimeout>
 800997a:	4603      	mov	r3, r0
 800997c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800997e:	7ffb      	ldrb	r3, [r7, #31]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d114      	bne.n	80099ae <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	7812      	ldrb	r2, [r2, #0]
 800998c:	b2d2      	uxtb	r2, r2
 800998e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009994:	1c5a      	adds	r2, r3, #1
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999e:	1e5a      	subs	r2, r3, #1
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1de      	bne.n	800996a <HAL_QSPI_Receive+0x9a>
 80099ac:	e000      	b.n	80099b0 <HAL_QSPI_Receive+0xe0>
          break;
 80099ae:	bf00      	nop
      }

      if (status == HAL_OK)
 80099b0:	7ffb      	ldrb	r3, [r7, #31]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d110      	bne.n	80099d8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2201      	movs	r2, #1
 80099be:	2102      	movs	r1, #2
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 f8a7 	bl	8009b14 <QSPI_WaitFlagStateUntilTimeout>
 80099c6:	4603      	mov	r3, r0
 80099c8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80099ca:	7ffb      	ldrb	r3, [r7, #31]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d103      	bne.n	80099d8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2202      	movs	r2, #2
 80099d6:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099e0:	e00a      	b.n	80099f8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e6:	f043 0208 	orr.w	r2, r3, #8
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	77fb      	strb	r3, [r7, #31]
 80099f2:	e001      	b.n	80099f8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80099f4:	2302      	movs	r3, #2
 80099f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8009a00:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b088      	sub	sp, #32
 8009a0e:	af02      	add	r7, sp, #8
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	607a      	str	r2, [r7, #4]
 8009a16:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009a18:	f7fc f922 	bl	8005c60 <HAL_GetTick>
 8009a1c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <HAL_QSPI_AutoPolling+0x24>
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e060      	b.n	8009af0 <HAL_QSPI_AutoPolling+0xe6>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d14f      	bne.n	8009ae2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2242      	movs	r2, #66	; 0x42
 8009a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	2200      	movs	r2, #0
 8009a58:	2120      	movs	r1, #32
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 f85a 	bl	8009b14 <QSPI_WaitFlagStateUntilTimeout>
 8009a60:	4603      	mov	r3, r0
 8009a62:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d13d      	bne.n	8009ae6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	6852      	ldr	r2, [r2, #4]
 8009a7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6892      	ldr	r2, [r2, #8]
 8009a86:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	431a      	orrs	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009aa0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 f866 	bl	8009b82 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	2201      	movs	r2, #1
 8009abe:	2108      	movs	r1, #8
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 f827 	bl	8009b14 <QSPI_WaitFlagStateUntilTimeout>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10a      	bne.n	8009ae6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2208      	movs	r2, #8
 8009ad6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ae0:	e001      	b.n	8009ae6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	649a      	str	r2, [r3, #72]	; 0x48
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	603b      	str	r3, [r7, #0]
 8009b20:	4613      	mov	r3, r2
 8009b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009b24:	e01a      	b.n	8009b5c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2c:	d016      	beq.n	8009b5c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b2e:	f7fc f897 	bl	8005c60 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d302      	bcc.n	8009b44 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10b      	bne.n	8009b5c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2204      	movs	r2, #4
 8009b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b50:	f043 0201 	orr.w	r2, r3, #1
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e00e      	b.n	8009b7a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4013      	ands	r3, r2
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bf14      	ite	ne
 8009b6a:	2301      	movne	r3, #1
 8009b6c:	2300      	moveq	r3, #0
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	461a      	mov	r2, r3
 8009b72:	79fb      	ldrb	r3, [r7, #7]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d1d6      	bne.n	8009b26 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b085      	sub	sp, #20
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	60b9      	str	r1, [r7, #8]
 8009b8c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d009      	beq.n	8009baa <QSPI_Config+0x28>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009b9c:	d005      	beq.n	8009baa <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3a01      	subs	r2, #1
 8009ba8:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 80b9 	beq.w	8009d26 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d05f      	beq.n	8009c7c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	6892      	ldr	r2, [r2, #8]
 8009bc4:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d031      	beq.n	8009c32 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	431a      	orrs	r2, r3
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	049b      	lsls	r3, r3, #18
 8009bea:	431a      	orrs	r2, r3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	431a      	orrs	r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	431a      	orrs	r2, r3
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	ea42 0103 	orr.w	r1, r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009c22:	f000 812e 	beq.w	8009e82 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	6852      	ldr	r2, [r2, #4]
 8009c2e:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8009c30:	e127      	b.n	8009e82 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3a:	431a      	orrs	r2, r3
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c40:	431a      	orrs	r2, r3
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	431a      	orrs	r2, r3
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	049b      	lsls	r3, r3, #18
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	431a      	orrs	r2, r3
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	431a      	orrs	r2, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	431a      	orrs	r2, r3
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	ea42 0103 	orr.w	r1, r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	430a      	orrs	r2, r1
 8009c78:	615a      	str	r2, [r3, #20]
}
 8009c7a:	e102      	b.n	8009e82 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d02e      	beq.n	8009ce2 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8c:	431a      	orrs	r2, r3
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c92:	431a      	orrs	r2, r3
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	049b      	lsls	r3, r3, #18
 8009ca0:	431a      	orrs	r2, r3
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	431a      	orrs	r2, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	ea42 0103 	orr.w	r1, r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009cd2:	f000 80d6 	beq.w	8009e82 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	6852      	ldr	r2, [r2, #4]
 8009cde:	619a      	str	r2, [r3, #24]
}
 8009ce0:	e0cf      	b.n	8009e82 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cea:	431a      	orrs	r2, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	049b      	lsls	r3, r3, #18
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	431a      	orrs	r2, r3
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	431a      	orrs	r2, r3
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	ea42 0103 	orr.w	r1, r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	430a      	orrs	r2, r1
 8009d22:	615a      	str	r2, [r3, #20]
}
 8009d24:	e0ad      	b.n	8009e82 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d058      	beq.n	8009de0 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	6892      	ldr	r2, [r2, #8]
 8009d36:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	69db      	ldr	r3, [r3, #28]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d02d      	beq.n	8009d9c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	431a      	orrs	r2, r3
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	049b      	lsls	r3, r3, #18
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	431a      	orrs	r2, r3
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	431a      	orrs	r2, r3
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	ea42 0103 	orr.w	r1, r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	430a      	orrs	r2, r1
 8009d86:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009d8e:	d078      	beq.n	8009e82 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	6852      	ldr	r2, [r2, #4]
 8009d98:	619a      	str	r2, [r3, #24]
}
 8009d9a:	e072      	b.n	8009e82 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da4:	431a      	orrs	r2, r3
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009daa:	431a      	orrs	r2, r3
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	431a      	orrs	r2, r3
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	049b      	lsls	r3, r3, #18
 8009db8:	431a      	orrs	r2, r3
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	431a      	orrs	r2, r3
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	431a      	orrs	r2, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	ea42 0103 	orr.w	r1, r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	615a      	str	r2, [r3, #20]
}
 8009dde:	e050      	b.n	8009e82 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d02a      	beq.n	8009e3e <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df0:	431a      	orrs	r2, r3
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df6:	431a      	orrs	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	049b      	lsls	r3, r3, #18
 8009e04:	431a      	orrs	r2, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	431a      	orrs	r2, r3
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	431a      	orrs	r2, r3
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	ea42 0103 	orr.w	r1, r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009e30:	d027      	beq.n	8009e82 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	6852      	ldr	r2, [r2, #4]
 8009e3a:	619a      	str	r2, [r3, #24]
}
 8009e3c:	e021      	b.n	8009e82 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d01d      	beq.n	8009e82 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e54:	431a      	orrs	r2, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	049b      	lsls	r3, r3, #18
 8009e62:	431a      	orrs	r2, r3
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	431a      	orrs	r2, r3
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	431a      	orrs	r2, r3
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	ea42 0103 	orr.w	r1, r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	615a      	str	r2, [r3, #20]
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
	...

08009e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08c      	sub	sp, #48	; 0x30
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d101      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e3ff      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f000 8087 	beq.w	8009fbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009eb0:	4b99      	ldr	r3, [pc, #612]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009eba:	4b97      	ldr	r3, [pc, #604]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec2:	2b10      	cmp	r3, #16
 8009ec4:	d007      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x46>
 8009ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec8:	2b18      	cmp	r3, #24
 8009eca:	d110      	bne.n	8009eee <HAL_RCC_OscConfig+0x5e>
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	f003 0303 	and.w	r3, r3, #3
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d10b      	bne.n	8009eee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ed6:	4b90      	ldr	r3, [pc, #576]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d06c      	beq.n	8009fbc <HAL_RCC_OscConfig+0x12c>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d168      	bne.n	8009fbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e3d9      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef6:	d106      	bne.n	8009f06 <HAL_RCC_OscConfig+0x76>
 8009ef8:	4b87      	ldr	r3, [pc, #540]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a86      	ldr	r2, [pc, #536]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	e02e      	b.n	8009f64 <HAL_RCC_OscConfig+0xd4>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10c      	bne.n	8009f28 <HAL_RCC_OscConfig+0x98>
 8009f0e:	4b82      	ldr	r3, [pc, #520]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a81      	ldr	r2, [pc, #516]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	4b7f      	ldr	r3, [pc, #508]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a7e      	ldr	r2, [pc, #504]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	e01d      	b.n	8009f64 <HAL_RCC_OscConfig+0xd4>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f30:	d10c      	bne.n	8009f4c <HAL_RCC_OscConfig+0xbc>
 8009f32:	4b79      	ldr	r3, [pc, #484]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a78      	ldr	r2, [pc, #480]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f3c:	6013      	str	r3, [r2, #0]
 8009f3e:	4b76      	ldr	r3, [pc, #472]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a75      	ldr	r2, [pc, #468]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f48:	6013      	str	r3, [r2, #0]
 8009f4a:	e00b      	b.n	8009f64 <HAL_RCC_OscConfig+0xd4>
 8009f4c:	4b72      	ldr	r3, [pc, #456]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a71      	ldr	r2, [pc, #452]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	4b6f      	ldr	r3, [pc, #444]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a6e      	ldr	r2, [pc, #440]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d013      	beq.n	8009f94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f6c:	f7fb fe78 	bl	8005c60 <HAL_GetTick>
 8009f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f72:	e008      	b.n	8009f86 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f74:	f7fb fe74 	bl	8005c60 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	2b64      	cmp	r3, #100	; 0x64
 8009f80:	d901      	bls.n	8009f86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e38d      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f86:	4b64      	ldr	r3, [pc, #400]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d0f0      	beq.n	8009f74 <HAL_RCC_OscConfig+0xe4>
 8009f92:	e014      	b.n	8009fbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f94:	f7fb fe64 	bl	8005c60 <HAL_GetTick>
 8009f98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f9a:	e008      	b.n	8009fae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f9c:	f7fb fe60 	bl	8005c60 <HAL_GetTick>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	2b64      	cmp	r3, #100	; 0x64
 8009fa8:	d901      	bls.n	8009fae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e379      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009fae:	4b5a      	ldr	r3, [pc, #360]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1f0      	bne.n	8009f9c <HAL_RCC_OscConfig+0x10c>
 8009fba:	e000      	b.n	8009fbe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 80ae 	beq.w	800a128 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fcc:	4b52      	ldr	r3, [pc, #328]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fd6:	4b50      	ldr	r3, [pc, #320]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fda:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d007      	beq.n	8009ff2 <HAL_RCC_OscConfig+0x162>
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	2b18      	cmp	r3, #24
 8009fe6:	d13a      	bne.n	800a05e <HAL_RCC_OscConfig+0x1ce>
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f003 0303 	and.w	r3, r3, #3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d135      	bne.n	800a05e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ff2:	4b49      	ldr	r3, [pc, #292]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 0304 	and.w	r3, r3, #4
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d005      	beq.n	800a00a <HAL_RCC_OscConfig+0x17a>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e34b      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a00a:	f7fb fe59 	bl	8005cc0 <HAL_GetREVID>
 800a00e:	4603      	mov	r3, r0
 800a010:	f241 0203 	movw	r2, #4099	; 0x1003
 800a014:	4293      	cmp	r3, r2
 800a016:	d817      	bhi.n	800a048 <HAL_RCC_OscConfig+0x1b8>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	2b40      	cmp	r3, #64	; 0x40
 800a01e:	d108      	bne.n	800a032 <HAL_RCC_OscConfig+0x1a2>
 800a020:	4b3d      	ldr	r3, [pc, #244]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a028:	4a3b      	ldr	r2, [pc, #236]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a02a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a02e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a030:	e07a      	b.n	800a128 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a032:	4b39      	ldr	r3, [pc, #228]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	031b      	lsls	r3, r3, #12
 800a040:	4935      	ldr	r1, [pc, #212]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a042:	4313      	orrs	r3, r2
 800a044:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a046:	e06f      	b.n	800a128 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a048:	4b33      	ldr	r3, [pc, #204]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	061b      	lsls	r3, r3, #24
 800a056:	4930      	ldr	r1, [pc, #192]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a05c:	e064      	b.n	800a128 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d045      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a066:	4b2c      	ldr	r3, [pc, #176]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f023 0219 	bic.w	r2, r3, #25
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	4929      	ldr	r1, [pc, #164]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a074:	4313      	orrs	r3, r2
 800a076:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a078:	f7fb fdf2 	bl	8005c60 <HAL_GetTick>
 800a07c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a07e:	e008      	b.n	800a092 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a080:	f7fb fdee 	bl	8005c60 <HAL_GetTick>
 800a084:	4602      	mov	r2, r0
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d901      	bls.n	800a092 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e307      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a092:	4b21      	ldr	r3, [pc, #132]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 0304 	and.w	r3, r3, #4
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0f0      	beq.n	800a080 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a09e:	f7fb fe0f 	bl	8005cc0 <HAL_GetREVID>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d817      	bhi.n	800a0dc <HAL_RCC_OscConfig+0x24c>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	2b40      	cmp	r3, #64	; 0x40
 800a0b2:	d108      	bne.n	800a0c6 <HAL_RCC_OscConfig+0x236>
 800a0b4:	4b18      	ldr	r3, [pc, #96]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a0bc:	4a16      	ldr	r2, [pc, #88]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a0be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0c2:	6053      	str	r3, [r2, #4]
 800a0c4:	e030      	b.n	800a128 <HAL_RCC_OscConfig+0x298>
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	031b      	lsls	r3, r3, #12
 800a0d4:	4910      	ldr	r1, [pc, #64]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	604b      	str	r3, [r1, #4]
 800a0da:	e025      	b.n	800a128 <HAL_RCC_OscConfig+0x298>
 800a0dc:	4b0e      	ldr	r3, [pc, #56]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	061b      	lsls	r3, r3, #24
 800a0ea:	490b      	ldr	r1, [pc, #44]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	604b      	str	r3, [r1, #4]
 800a0f0:	e01a      	b.n	800a128 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0f2:	4b09      	ldr	r3, [pc, #36]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a08      	ldr	r2, [pc, #32]	; (800a118 <HAL_RCC_OscConfig+0x288>)
 800a0f8:	f023 0301 	bic.w	r3, r3, #1
 800a0fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0fe:	f7fb fdaf 	bl	8005c60 <HAL_GetTick>
 800a102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a104:	e00a      	b.n	800a11c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a106:	f7fb fdab 	bl	8005c60 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d903      	bls.n	800a11c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e2c4      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
 800a118:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a11c:	4ba4      	ldr	r3, [pc, #656]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1ee      	bne.n	800a106 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 80a9 	beq.w	800a288 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a136:	4b9e      	ldr	r3, [pc, #632]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a13e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a140:	4b9b      	ldr	r3, [pc, #620]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a144:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	2b08      	cmp	r3, #8
 800a14a:	d007      	beq.n	800a15c <HAL_RCC_OscConfig+0x2cc>
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	2b18      	cmp	r3, #24
 800a150:	d13a      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x338>
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f003 0303 	and.w	r3, r3, #3
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d135      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a15c:	4b94      	ldr	r3, [pc, #592]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a164:	2b00      	cmp	r3, #0
 800a166:	d005      	beq.n	800a174 <HAL_RCC_OscConfig+0x2e4>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	2b80      	cmp	r3, #128	; 0x80
 800a16e:	d001      	beq.n	800a174 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e296      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a174:	f7fb fda4 	bl	8005cc0 <HAL_GetREVID>
 800a178:	4603      	mov	r3, r0
 800a17a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a17e:	4293      	cmp	r3, r2
 800a180:	d817      	bhi.n	800a1b2 <HAL_RCC_OscConfig+0x322>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	2b20      	cmp	r3, #32
 800a188:	d108      	bne.n	800a19c <HAL_RCC_OscConfig+0x30c>
 800a18a:	4b89      	ldr	r3, [pc, #548]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a192:	4a87      	ldr	r2, [pc, #540]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a198:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a19a:	e075      	b.n	800a288 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a19c:	4b84      	ldr	r3, [pc, #528]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	069b      	lsls	r3, r3, #26
 800a1aa:	4981      	ldr	r1, [pc, #516]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a1b0:	e06a      	b.n	800a288 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1b2:	4b7f      	ldr	r3, [pc, #508]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	061b      	lsls	r3, r3, #24
 800a1c0:	497b      	ldr	r1, [pc, #492]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a1c6:	e05f      	b.n	800a288 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	69db      	ldr	r3, [r3, #28]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d042      	beq.n	800a256 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a1d0:	4b77      	ldr	r3, [pc, #476]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a76      	ldr	r2, [pc, #472]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1dc:	f7fb fd40 	bl	8005c60 <HAL_GetTick>
 800a1e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1e2:	e008      	b.n	800a1f6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a1e4:	f7fb fd3c 	bl	8005c60 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d901      	bls.n	800a1f6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e255      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1f6:	4b6e      	ldr	r3, [pc, #440]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0f0      	beq.n	800a1e4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a202:	f7fb fd5d 	bl	8005cc0 <HAL_GetREVID>
 800a206:	4603      	mov	r3, r0
 800a208:	f241 0203 	movw	r2, #4099	; 0x1003
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d817      	bhi.n	800a240 <HAL_RCC_OscConfig+0x3b0>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	2b20      	cmp	r3, #32
 800a216:	d108      	bne.n	800a22a <HAL_RCC_OscConfig+0x39a>
 800a218:	4b65      	ldr	r3, [pc, #404]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a220:	4a63      	ldr	r2, [pc, #396]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a226:	6053      	str	r3, [r2, #4]
 800a228:	e02e      	b.n	800a288 <HAL_RCC_OscConfig+0x3f8>
 800a22a:	4b61      	ldr	r3, [pc, #388]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	069b      	lsls	r3, r3, #26
 800a238:	495d      	ldr	r1, [pc, #372]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a23a:	4313      	orrs	r3, r2
 800a23c:	604b      	str	r3, [r1, #4]
 800a23e:	e023      	b.n	800a288 <HAL_RCC_OscConfig+0x3f8>
 800a240:	4b5b      	ldr	r3, [pc, #364]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a1b      	ldr	r3, [r3, #32]
 800a24c:	061b      	lsls	r3, r3, #24
 800a24e:	4958      	ldr	r1, [pc, #352]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a250:	4313      	orrs	r3, r2
 800a252:	60cb      	str	r3, [r1, #12]
 800a254:	e018      	b.n	800a288 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a256:	4b56      	ldr	r3, [pc, #344]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a55      	ldr	r2, [pc, #340]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a25c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a262:	f7fb fcfd 	bl	8005c60 <HAL_GetTick>
 800a266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a268:	e008      	b.n	800a27c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a26a:	f7fb fcf9 	bl	8005c60 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d901      	bls.n	800a27c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e212      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a27c:	4b4c      	ldr	r3, [pc, #304]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1f0      	bne.n	800a26a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0308 	and.w	r3, r3, #8
 800a290:	2b00      	cmp	r3, #0
 800a292:	d036      	beq.n	800a302 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d019      	beq.n	800a2d0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a29c:	4b44      	ldr	r3, [pc, #272]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a29e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2a0:	4a43      	ldr	r2, [pc, #268]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a2a2:	f043 0301 	orr.w	r3, r3, #1
 800a2a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2a8:	f7fb fcda 	bl	8005c60 <HAL_GetTick>
 800a2ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a2ae:	e008      	b.n	800a2c2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a2b0:	f7fb fcd6 	bl	8005c60 <HAL_GetTick>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d901      	bls.n	800a2c2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e1ef      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a2c2:	4b3b      	ldr	r3, [pc, #236]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a2c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0f0      	beq.n	800a2b0 <HAL_RCC_OscConfig+0x420>
 800a2ce:	e018      	b.n	800a302 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2d0:	4b37      	ldr	r3, [pc, #220]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a2d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2d4:	4a36      	ldr	r2, [pc, #216]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a2d6:	f023 0301 	bic.w	r3, r3, #1
 800a2da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2dc:	f7fb fcc0 	bl	8005c60 <HAL_GetTick>
 800a2e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a2e2:	e008      	b.n	800a2f6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a2e4:	f7fb fcbc 	bl	8005c60 <HAL_GetTick>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d901      	bls.n	800a2f6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e1d5      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a2f6:	4b2e      	ldr	r3, [pc, #184]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2fa:	f003 0302 	and.w	r3, r3, #2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1f0      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0320 	and.w	r3, r3, #32
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d036      	beq.n	800a37c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d019      	beq.n	800a34a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a316:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a25      	ldr	r2, [pc, #148]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a31c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a322:	f7fb fc9d 	bl	8005c60 <HAL_GetTick>
 800a326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a328:	e008      	b.n	800a33c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a32a:	f7fb fc99 	bl	8005c60 <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	2b02      	cmp	r3, #2
 800a336:	d901      	bls.n	800a33c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	e1b2      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a33c:	4b1c      	ldr	r3, [pc, #112]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d0f0      	beq.n	800a32a <HAL_RCC_OscConfig+0x49a>
 800a348:	e018      	b.n	800a37c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a34a:	4b19      	ldr	r3, [pc, #100]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a18      	ldr	r2, [pc, #96]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a354:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a356:	f7fb fc83 	bl	8005c60 <HAL_GetTick>
 800a35a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a35c:	e008      	b.n	800a370 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a35e:	f7fb fc7f 	bl	8005c60 <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d901      	bls.n	800a370 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e198      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a370:	4b0f      	ldr	r3, [pc, #60]	; (800a3b0 <HAL_RCC_OscConfig+0x520>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1f0      	bne.n	800a35e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8085 	beq.w	800a494 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a38a:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <HAL_RCC_OscConfig+0x524>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a09      	ldr	r2, [pc, #36]	; (800a3b4 <HAL_RCC_OscConfig+0x524>)
 800a390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a394:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a396:	f7fb fc63 	bl	8005c60 <HAL_GetTick>
 800a39a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a39c:	e00c      	b.n	800a3b8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a39e:	f7fb fc5f 	bl	8005c60 <HAL_GetTick>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	2b64      	cmp	r3, #100	; 0x64
 800a3aa:	d905      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e178      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3b8:	4b96      	ldr	r3, [pc, #600]	; (800a614 <HAL_RCC_OscConfig+0x784>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d0ec      	beq.n	800a39e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d106      	bne.n	800a3da <HAL_RCC_OscConfig+0x54a>
 800a3cc:	4b92      	ldr	r3, [pc, #584]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d0:	4a91      	ldr	r2, [pc, #580]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a3d2:	f043 0301 	orr.w	r3, r3, #1
 800a3d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a3d8:	e02d      	b.n	800a436 <HAL_RCC_OscConfig+0x5a6>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10c      	bne.n	800a3fc <HAL_RCC_OscConfig+0x56c>
 800a3e2:	4b8d      	ldr	r3, [pc, #564]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e6:	4a8c      	ldr	r2, [pc, #560]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a3e8:	f023 0301 	bic.w	r3, r3, #1
 800a3ec:	6713      	str	r3, [r2, #112]	; 0x70
 800a3ee:	4b8a      	ldr	r3, [pc, #552]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f2:	4a89      	ldr	r2, [pc, #548]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a3f4:	f023 0304 	bic.w	r3, r3, #4
 800a3f8:	6713      	str	r3, [r2, #112]	; 0x70
 800a3fa:	e01c      	b.n	800a436 <HAL_RCC_OscConfig+0x5a6>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	2b05      	cmp	r3, #5
 800a402:	d10c      	bne.n	800a41e <HAL_RCC_OscConfig+0x58e>
 800a404:	4b84      	ldr	r3, [pc, #528]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a408:	4a83      	ldr	r2, [pc, #524]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a40a:	f043 0304 	orr.w	r3, r3, #4
 800a40e:	6713      	str	r3, [r2, #112]	; 0x70
 800a410:	4b81      	ldr	r3, [pc, #516]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a414:	4a80      	ldr	r2, [pc, #512]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a416:	f043 0301 	orr.w	r3, r3, #1
 800a41a:	6713      	str	r3, [r2, #112]	; 0x70
 800a41c:	e00b      	b.n	800a436 <HAL_RCC_OscConfig+0x5a6>
 800a41e:	4b7e      	ldr	r3, [pc, #504]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a422:	4a7d      	ldr	r2, [pc, #500]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a424:	f023 0301 	bic.w	r3, r3, #1
 800a428:	6713      	str	r3, [r2, #112]	; 0x70
 800a42a:	4b7b      	ldr	r3, [pc, #492]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a42e:	4a7a      	ldr	r2, [pc, #488]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a430:	f023 0304 	bic.w	r3, r3, #4
 800a434:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d015      	beq.n	800a46a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a43e:	f7fb fc0f 	bl	8005c60 <HAL_GetTick>
 800a442:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a444:	e00a      	b.n	800a45c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a446:	f7fb fc0b 	bl	8005c60 <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	f241 3288 	movw	r2, #5000	; 0x1388
 800a454:	4293      	cmp	r3, r2
 800a456:	d901      	bls.n	800a45c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e122      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a45c:	4b6e      	ldr	r3, [pc, #440]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a45e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a460:	f003 0302 	and.w	r3, r3, #2
 800a464:	2b00      	cmp	r3, #0
 800a466:	d0ee      	beq.n	800a446 <HAL_RCC_OscConfig+0x5b6>
 800a468:	e014      	b.n	800a494 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a46a:	f7fb fbf9 	bl	8005c60 <HAL_GetTick>
 800a46e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a470:	e00a      	b.n	800a488 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a472:	f7fb fbf5 	bl	8005c60 <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a480:	4293      	cmp	r3, r2
 800a482:	d901      	bls.n	800a488 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a484:	2303      	movs	r3, #3
 800a486:	e10c      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a488:	4b63      	ldr	r3, [pc, #396]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48c:	f003 0302 	and.w	r3, r3, #2
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1ee      	bne.n	800a472 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 8101 	beq.w	800a6a0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a49e:	4b5e      	ldr	r3, [pc, #376]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4a6:	2b18      	cmp	r3, #24
 800a4a8:	f000 80bc 	beq.w	800a624 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	f040 8095 	bne.w	800a5e0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4b6:	4b58      	ldr	r3, [pc, #352]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a57      	ldr	r2, [pc, #348]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a4bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c2:	f7fb fbcd 	bl	8005c60 <HAL_GetTick>
 800a4c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4c8:	e008      	b.n	800a4dc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4ca:	f7fb fbc9 	bl	8005c60 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d901      	bls.n	800a4dc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e0e2      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4dc:	4b4e      	ldr	r3, [pc, #312]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1f0      	bne.n	800a4ca <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4e8:	4b4b      	ldr	r3, [pc, #300]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a4ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4ec:	4b4b      	ldr	r3, [pc, #300]	; (800a61c <HAL_RCC_OscConfig+0x78c>)
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a4f8:	0112      	lsls	r2, r2, #4
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	4946      	ldr	r1, [pc, #280]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	628b      	str	r3, [r1, #40]	; 0x28
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a506:	3b01      	subs	r3, #1
 800a508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a510:	3b01      	subs	r3, #1
 800a512:	025b      	lsls	r3, r3, #9
 800a514:	b29b      	uxth	r3, r3
 800a516:	431a      	orrs	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51c:	3b01      	subs	r3, #1
 800a51e:	041b      	lsls	r3, r3, #16
 800a520:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a524:	431a      	orrs	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52a:	3b01      	subs	r3, #1
 800a52c:	061b      	lsls	r3, r3, #24
 800a52e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a532:	4939      	ldr	r1, [pc, #228]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a534:	4313      	orrs	r3, r2
 800a536:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a538:	4b37      	ldr	r3, [pc, #220]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	4a36      	ldr	r2, [pc, #216]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a53e:	f023 0301 	bic.w	r3, r3, #1
 800a542:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a544:	4b34      	ldr	r3, [pc, #208]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a548:	4b35      	ldr	r3, [pc, #212]	; (800a620 <HAL_RCC_OscConfig+0x790>)
 800a54a:	4013      	ands	r3, r2
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a550:	00d2      	lsls	r2, r2, #3
 800a552:	4931      	ldr	r1, [pc, #196]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a554:	4313      	orrs	r3, r2
 800a556:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a558:	4b2f      	ldr	r3, [pc, #188]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	f023 020c 	bic.w	r2, r3, #12
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	492c      	ldr	r1, [pc, #176]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a566:	4313      	orrs	r3, r2
 800a568:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a56a:	4b2b      	ldr	r3, [pc, #172]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56e:	f023 0202 	bic.w	r2, r3, #2
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a576:	4928      	ldr	r1, [pc, #160]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a57c:	4b26      	ldr	r3, [pc, #152]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a580:	4a25      	ldr	r2, [pc, #148]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a586:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a588:	4b23      	ldr	r3, [pc, #140]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58c:	4a22      	ldr	r2, [pc, #136]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a58e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a594:	4b20      	ldr	r3, [pc, #128]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	4a1f      	ldr	r2, [pc, #124]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a59a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a59e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a5a0:	4b1d      	ldr	r3, [pc, #116]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	4a1c      	ldr	r2, [pc, #112]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a5a6:	f043 0301 	orr.w	r3, r3, #1
 800a5aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5ac:	4b1a      	ldr	r3, [pc, #104]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a19      	ldr	r2, [pc, #100]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a5b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5b8:	f7fb fb52 	bl	8005c60 <HAL_GetTick>
 800a5bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5be:	e008      	b.n	800a5d2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5c0:	f7fb fb4e 	bl	8005c60 <HAL_GetTick>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d901      	bls.n	800a5d2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	e067      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5d2:	4b11      	ldr	r3, [pc, #68]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d0f0      	beq.n	800a5c0 <HAL_RCC_OscConfig+0x730>
 800a5de:	e05f      	b.n	800a6a0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5e0:	4b0d      	ldr	r3, [pc, #52]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a0c      	ldr	r2, [pc, #48]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a5e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5ec:	f7fb fb38 	bl	8005c60 <HAL_GetTick>
 800a5f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5f2:	e008      	b.n	800a606 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5f4:	f7fb fb34 	bl	8005c60 <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e04d      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a606:	4b04      	ldr	r3, [pc, #16]	; (800a618 <HAL_RCC_OscConfig+0x788>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f0      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x764>
 800a612:	e045      	b.n	800a6a0 <HAL_RCC_OscConfig+0x810>
 800a614:	58024800 	.word	0x58024800
 800a618:	58024400 	.word	0x58024400
 800a61c:	fffffc0c 	.word	0xfffffc0c
 800a620:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a624:	4b21      	ldr	r3, [pc, #132]	; (800a6ac <HAL_RCC_OscConfig+0x81c>)
 800a626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a628:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a62a:	4b20      	ldr	r3, [pc, #128]	; (800a6ac <HAL_RCC_OscConfig+0x81c>)
 800a62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a634:	2b01      	cmp	r3, #1
 800a636:	d031      	beq.n	800a69c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	f003 0203 	and.w	r2, r3, #3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a642:	429a      	cmp	r2, r3
 800a644:	d12a      	bne.n	800a69c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	091b      	lsrs	r3, r3, #4
 800a64a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a652:	429a      	cmp	r2, r3
 800a654:	d122      	bne.n	800a69c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a660:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a662:	429a      	cmp	r2, r3
 800a664:	d11a      	bne.n	800a69c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	0a5b      	lsrs	r3, r3, #9
 800a66a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a672:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a674:	429a      	cmp	r2, r3
 800a676:	d111      	bne.n	800a69c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	0c1b      	lsrs	r3, r3, #16
 800a67c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a684:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a686:	429a      	cmp	r2, r3
 800a688:	d108      	bne.n	800a69c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	0e1b      	lsrs	r3, r3, #24
 800a68e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a696:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a698:	429a      	cmp	r2, r3
 800a69a:	d001      	beq.n	800a6a0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e000      	b.n	800a6a2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3730      	adds	r7, #48	; 0x30
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	58024400 	.word	0x58024400

0800a6b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e19c      	b.n	800a9fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a6c4:	4b8a      	ldr	r3, [pc, #552]	; (800a8f0 <HAL_RCC_ClockConfig+0x240>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 030f 	and.w	r3, r3, #15
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d910      	bls.n	800a6f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6d2:	4b87      	ldr	r3, [pc, #540]	; (800a8f0 <HAL_RCC_ClockConfig+0x240>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f023 020f 	bic.w	r2, r3, #15
 800a6da:	4985      	ldr	r1, [pc, #532]	; (800a8f0 <HAL_RCC_ClockConfig+0x240>)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6e2:	4b83      	ldr	r3, [pc, #524]	; (800a8f0 <HAL_RCC_ClockConfig+0x240>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 030f 	and.w	r3, r3, #15
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d001      	beq.n	800a6f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e184      	b.n	800a9fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0304 	and.w	r3, r3, #4
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d010      	beq.n	800a722 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	691a      	ldr	r2, [r3, #16]
 800a704:	4b7b      	ldr	r3, [pc, #492]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d908      	bls.n	800a722 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a710:	4b78      	ldr	r3, [pc, #480]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	4975      	ldr	r1, [pc, #468]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a71e:	4313      	orrs	r3, r2
 800a720:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0308 	and.w	r3, r3, #8
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d010      	beq.n	800a750 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	695a      	ldr	r2, [r3, #20]
 800a732:	4b70      	ldr	r3, [pc, #448]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d908      	bls.n	800a750 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a73e:	4b6d      	ldr	r3, [pc, #436]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	496a      	ldr	r1, [pc, #424]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0310 	and.w	r3, r3, #16
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d010      	beq.n	800a77e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	699a      	ldr	r2, [r3, #24]
 800a760:	4b64      	ldr	r3, [pc, #400]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a762:	69db      	ldr	r3, [r3, #28]
 800a764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a768:	429a      	cmp	r2, r3
 800a76a:	d908      	bls.n	800a77e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a76c:	4b61      	ldr	r3, [pc, #388]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	495e      	ldr	r1, [pc, #376]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0320 	and.w	r3, r3, #32
 800a786:	2b00      	cmp	r3, #0
 800a788:	d010      	beq.n	800a7ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	69da      	ldr	r2, [r3, #28]
 800a78e:	4b59      	ldr	r3, [pc, #356]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a796:	429a      	cmp	r2, r3
 800a798:	d908      	bls.n	800a7ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a79a:	4b56      	ldr	r3, [pc, #344]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	4953      	ldr	r1, [pc, #332]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0302 	and.w	r3, r3, #2
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d010      	beq.n	800a7da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68da      	ldr	r2, [r3, #12]
 800a7bc:	4b4d      	ldr	r3, [pc, #308]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	f003 030f 	and.w	r3, r3, #15
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d908      	bls.n	800a7da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7c8:	4b4a      	ldr	r3, [pc, #296]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	f023 020f 	bic.w	r2, r3, #15
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	4947      	ldr	r1, [pc, #284]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d055      	beq.n	800a892 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a7e6:	4b43      	ldr	r3, [pc, #268]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	4940      	ldr	r1, [pc, #256]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d107      	bne.n	800a810 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a800:	4b3c      	ldr	r3, [pc, #240]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d121      	bne.n	800a850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e0f6      	b.n	800a9fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	2b03      	cmp	r3, #3
 800a816:	d107      	bne.n	800a828 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a818:	4b36      	ldr	r3, [pc, #216]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d115      	bne.n	800a850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e0ea      	b.n	800a9fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d107      	bne.n	800a840 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a830:	4b30      	ldr	r3, [pc, #192]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d109      	bne.n	800a850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e0de      	b.n	800a9fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a840:	4b2c      	ldr	r3, [pc, #176]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0304 	and.w	r3, r3, #4
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e0d6      	b.n	800a9fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a850:	4b28      	ldr	r3, [pc, #160]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	f023 0207 	bic.w	r2, r3, #7
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	4925      	ldr	r1, [pc, #148]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a85e:	4313      	orrs	r3, r2
 800a860:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a862:	f7fb f9fd 	bl	8005c60 <HAL_GetTick>
 800a866:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a868:	e00a      	b.n	800a880 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a86a:	f7fb f9f9 	bl	8005c60 <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	f241 3288 	movw	r2, #5000	; 0x1388
 800a878:	4293      	cmp	r3, r2
 800a87a:	d901      	bls.n	800a880 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e0be      	b.n	800a9fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a880:	4b1c      	ldr	r3, [pc, #112]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	00db      	lsls	r3, r3, #3
 800a88e:	429a      	cmp	r2, r3
 800a890:	d1eb      	bne.n	800a86a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 0302 	and.w	r3, r3, #2
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d010      	beq.n	800a8c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68da      	ldr	r2, [r3, #12]
 800a8a2:	4b14      	ldr	r3, [pc, #80]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	f003 030f 	and.w	r3, r3, #15
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d208      	bcs.n	800a8c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8ae:	4b11      	ldr	r3, [pc, #68]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f023 020f 	bic.w	r2, r3, #15
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	490e      	ldr	r1, [pc, #56]	; (800a8f4 <HAL_RCC_ClockConfig+0x244>)
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <HAL_RCC_ClockConfig+0x240>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 030f 	and.w	r3, r3, #15
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d214      	bcs.n	800a8f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8ce:	4b08      	ldr	r3, [pc, #32]	; (800a8f0 <HAL_RCC_ClockConfig+0x240>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f023 020f 	bic.w	r2, r3, #15
 800a8d6:	4906      	ldr	r1, [pc, #24]	; (800a8f0 <HAL_RCC_ClockConfig+0x240>)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8de:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <HAL_RCC_ClockConfig+0x240>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 030f 	and.w	r3, r3, #15
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d005      	beq.n	800a8f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e086      	b.n	800a9fe <HAL_RCC_ClockConfig+0x34e>
 800a8f0:	52002000 	.word	0x52002000
 800a8f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0304 	and.w	r3, r3, #4
 800a900:	2b00      	cmp	r3, #0
 800a902:	d010      	beq.n	800a926 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	691a      	ldr	r2, [r3, #16]
 800a908:	4b3f      	ldr	r3, [pc, #252]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a910:	429a      	cmp	r2, r3
 800a912:	d208      	bcs.n	800a926 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a914:	4b3c      	ldr	r3, [pc, #240]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	4939      	ldr	r1, [pc, #228]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a922:	4313      	orrs	r3, r2
 800a924:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0308 	and.w	r3, r3, #8
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d010      	beq.n	800a954 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	695a      	ldr	r2, [r3, #20]
 800a936:	4b34      	ldr	r3, [pc, #208]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a93e:	429a      	cmp	r2, r3
 800a940:	d208      	bcs.n	800a954 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a942:	4b31      	ldr	r3, [pc, #196]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a944:	69db      	ldr	r3, [r3, #28]
 800a946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	492e      	ldr	r1, [pc, #184]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a950:	4313      	orrs	r3, r2
 800a952:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0310 	and.w	r3, r3, #16
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d010      	beq.n	800a982 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	699a      	ldr	r2, [r3, #24]
 800a964:	4b28      	ldr	r3, [pc, #160]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d208      	bcs.n	800a982 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a970:	4b25      	ldr	r3, [pc, #148]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a972:	69db      	ldr	r3, [r3, #28]
 800a974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	4922      	ldr	r1, [pc, #136]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 0320 	and.w	r3, r3, #32
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d010      	beq.n	800a9b0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	69da      	ldr	r2, [r3, #28]
 800a992:	4b1d      	ldr	r3, [pc, #116]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d208      	bcs.n	800a9b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a99e:	4b1a      	ldr	r3, [pc, #104]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	69db      	ldr	r3, [r3, #28]
 800a9aa:	4917      	ldr	r1, [pc, #92]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a9b0:	f000 f834 	bl	800aa1c <HAL_RCC_GetSysClockFreq>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	4b14      	ldr	r3, [pc, #80]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	0a1b      	lsrs	r3, r3, #8
 800a9bc:	f003 030f 	and.w	r3, r3, #15
 800a9c0:	4912      	ldr	r1, [pc, #72]	; (800aa0c <HAL_RCC_ClockConfig+0x35c>)
 800a9c2:	5ccb      	ldrb	r3, [r1, r3]
 800a9c4:	f003 031f 	and.w	r3, r3, #31
 800a9c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9ce:	4b0e      	ldr	r3, [pc, #56]	; (800aa08 <HAL_RCC_ClockConfig+0x358>)
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	f003 030f 	and.w	r3, r3, #15
 800a9d6:	4a0d      	ldr	r2, [pc, #52]	; (800aa0c <HAL_RCC_ClockConfig+0x35c>)
 800a9d8:	5cd3      	ldrb	r3, [r2, r3]
 800a9da:	f003 031f 	and.w	r3, r3, #31
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e4:	4a0a      	ldr	r2, [pc, #40]	; (800aa10 <HAL_RCC_ClockConfig+0x360>)
 800a9e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9e8:	4a0a      	ldr	r2, [pc, #40]	; (800aa14 <HAL_RCC_ClockConfig+0x364>)
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a9ee:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <HAL_RCC_ClockConfig+0x368>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7f8 f958 	bl	8002ca8 <HAL_InitTick>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	58024400 	.word	0x58024400
 800aa0c:	080184b0 	.word	0x080184b0
 800aa10:	24000090 	.word	0x24000090
 800aa14:	2400008c 	.word	0x2400008c
 800aa18:	24000128 	.word	0x24000128

0800aa1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b089      	sub	sp, #36	; 0x24
 800aa20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa22:	4bb3      	ldr	r3, [pc, #716]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa2a:	2b18      	cmp	r3, #24
 800aa2c:	f200 8155 	bhi.w	800acda <HAL_RCC_GetSysClockFreq+0x2be>
 800aa30:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aa9d 	.word	0x0800aa9d
 800aa3c:	0800acdb 	.word	0x0800acdb
 800aa40:	0800acdb 	.word	0x0800acdb
 800aa44:	0800acdb 	.word	0x0800acdb
 800aa48:	0800acdb 	.word	0x0800acdb
 800aa4c:	0800acdb 	.word	0x0800acdb
 800aa50:	0800acdb 	.word	0x0800acdb
 800aa54:	0800acdb 	.word	0x0800acdb
 800aa58:	0800aac3 	.word	0x0800aac3
 800aa5c:	0800acdb 	.word	0x0800acdb
 800aa60:	0800acdb 	.word	0x0800acdb
 800aa64:	0800acdb 	.word	0x0800acdb
 800aa68:	0800acdb 	.word	0x0800acdb
 800aa6c:	0800acdb 	.word	0x0800acdb
 800aa70:	0800acdb 	.word	0x0800acdb
 800aa74:	0800acdb 	.word	0x0800acdb
 800aa78:	0800aac9 	.word	0x0800aac9
 800aa7c:	0800acdb 	.word	0x0800acdb
 800aa80:	0800acdb 	.word	0x0800acdb
 800aa84:	0800acdb 	.word	0x0800acdb
 800aa88:	0800acdb 	.word	0x0800acdb
 800aa8c:	0800acdb 	.word	0x0800acdb
 800aa90:	0800acdb 	.word	0x0800acdb
 800aa94:	0800acdb 	.word	0x0800acdb
 800aa98:	0800aacf 	.word	0x0800aacf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa9c:	4b94      	ldr	r3, [pc, #592]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 0320 	and.w	r3, r3, #32
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d009      	beq.n	800aabc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aaa8:	4b91      	ldr	r3, [pc, #580]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	08db      	lsrs	r3, r3, #3
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	4a90      	ldr	r2, [pc, #576]	; (800acf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aab4:	fa22 f303 	lsr.w	r3, r2, r3
 800aab8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800aaba:	e111      	b.n	800ace0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aabc:	4b8d      	ldr	r3, [pc, #564]	; (800acf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aabe:	61bb      	str	r3, [r7, #24]
    break;
 800aac0:	e10e      	b.n	800ace0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800aac2:	4b8d      	ldr	r3, [pc, #564]	; (800acf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aac4:	61bb      	str	r3, [r7, #24]
    break;
 800aac6:	e10b      	b.n	800ace0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800aac8:	4b8c      	ldr	r3, [pc, #560]	; (800acfc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aaca:	61bb      	str	r3, [r7, #24]
    break;
 800aacc:	e108      	b.n	800ace0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aace:	4b88      	ldr	r3, [pc, #544]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad2:	f003 0303 	and.w	r3, r3, #3
 800aad6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800aad8:	4b85      	ldr	r3, [pc, #532]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aadc:	091b      	lsrs	r3, r3, #4
 800aade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aae2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aae4:	4b82      	ldr	r3, [pc, #520]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	f003 0301 	and.w	r3, r3, #1
 800aaec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aaee:	4b80      	ldr	r3, [pc, #512]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf2:	08db      	lsrs	r3, r3, #3
 800aaf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	fb02 f303 	mul.w	r3, r2, r3
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 80e1 	beq.w	800acd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	f000 8083 	beq.w	800ac20 <HAL_RCC_GetSysClockFreq+0x204>
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	f200 80a1 	bhi.w	800ac64 <HAL_RCC_GetSysClockFreq+0x248>
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d003      	beq.n	800ab30 <HAL_RCC_GetSysClockFreq+0x114>
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d056      	beq.n	800abdc <HAL_RCC_GetSysClockFreq+0x1c0>
 800ab2e:	e099      	b.n	800ac64 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab30:	4b6f      	ldr	r3, [pc, #444]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0320 	and.w	r3, r3, #32
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d02d      	beq.n	800ab98 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab3c:	4b6c      	ldr	r3, [pc, #432]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	08db      	lsrs	r3, r3, #3
 800ab42:	f003 0303 	and.w	r3, r3, #3
 800ab46:	4a6b      	ldr	r2, [pc, #428]	; (800acf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ab48:	fa22 f303 	lsr.w	r3, r2, r3
 800ab4c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	ee07 3a90 	vmov	s15, r3
 800ab54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab66:	4b62      	ldr	r3, [pc, #392]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab6e:	ee07 3a90 	vmov	s15, r3
 800ab72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab76:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ad00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ab96:	e087      	b.n	800aca8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	ee07 3a90 	vmov	s15, r3
 800ab9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ad04 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abaa:	4b51      	ldr	r3, [pc, #324]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb2:	ee07 3a90 	vmov	s15, r3
 800abb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abba:	ed97 6a02 	vldr	s12, [r7, #8]
 800abbe:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ad00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abda:	e065      	b.n	800aca8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ad08 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abee:	4b40      	ldr	r3, [pc, #256]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf6:	ee07 3a90 	vmov	s15, r3
 800abfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abfe:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ad00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac1e:	e043      	b.n	800aca8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	ee07 3a90 	vmov	s15, r3
 800ac26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ad0c <HAL_RCC_GetSysClockFreq+0x2f0>
 800ac2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac32:	4b2f      	ldr	r3, [pc, #188]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac42:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ad00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac62:	e021      	b.n	800aca8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ad08 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ac72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac76:	4b1e      	ldr	r3, [pc, #120]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac86:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ad00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aca6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800aca8:	4b11      	ldr	r3, [pc, #68]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	0a5b      	lsrs	r3, r3, #9
 800acae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb2:	3301      	adds	r3, #1
 800acb4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	ee07 3a90 	vmov	s15, r3
 800acbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800acc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800accc:	ee17 3a90 	vmov	r3, s15
 800acd0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800acd2:	e005      	b.n	800ace0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800acd4:	2300      	movs	r3, #0
 800acd6:	61bb      	str	r3, [r7, #24]
    break;
 800acd8:	e002      	b.n	800ace0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800acda:	4b07      	ldr	r3, [pc, #28]	; (800acf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800acdc:	61bb      	str	r3, [r7, #24]
    break;
 800acde:	bf00      	nop
  }

  return sysclockfreq;
 800ace0:	69bb      	ldr	r3, [r7, #24]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3724      	adds	r7, #36	; 0x24
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	58024400 	.word	0x58024400
 800acf4:	03d09000 	.word	0x03d09000
 800acf8:	003d0900 	.word	0x003d0900
 800acfc:	017d7840 	.word	0x017d7840
 800ad00:	46000000 	.word	0x46000000
 800ad04:	4c742400 	.word	0x4c742400
 800ad08:	4a742400 	.word	0x4a742400
 800ad0c:	4bbebc20 	.word	0x4bbebc20

0800ad10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad16:	f7ff fe81 	bl	800aa1c <HAL_RCC_GetSysClockFreq>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	4b10      	ldr	r3, [pc, #64]	; (800ad60 <HAL_RCC_GetHCLKFreq+0x50>)
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	0a1b      	lsrs	r3, r3, #8
 800ad22:	f003 030f 	and.w	r3, r3, #15
 800ad26:	490f      	ldr	r1, [pc, #60]	; (800ad64 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad28:	5ccb      	ldrb	r3, [r1, r3]
 800ad2a:	f003 031f 	and.w	r3, r3, #31
 800ad2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad34:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <HAL_RCC_GetHCLKFreq+0x50>)
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	f003 030f 	and.w	r3, r3, #15
 800ad3c:	4a09      	ldr	r2, [pc, #36]	; (800ad64 <HAL_RCC_GetHCLKFreq+0x54>)
 800ad3e:	5cd3      	ldrb	r3, [r2, r3]
 800ad40:	f003 031f 	and.w	r3, r3, #31
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	fa22 f303 	lsr.w	r3, r2, r3
 800ad4a:	4a07      	ldr	r2, [pc, #28]	; (800ad68 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad4e:	4a07      	ldr	r2, [pc, #28]	; (800ad6c <HAL_RCC_GetHCLKFreq+0x5c>)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ad54:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <HAL_RCC_GetHCLKFreq+0x58>)
 800ad56:	681b      	ldr	r3, [r3, #0]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	58024400 	.word	0x58024400
 800ad64:	080184b0 	.word	0x080184b0
 800ad68:	24000090 	.word	0x24000090
 800ad6c:	2400008c 	.word	0x2400008c

0800ad70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad74:	f7ff ffcc 	bl	800ad10 <HAL_RCC_GetHCLKFreq>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	091b      	lsrs	r3, r3, #4
 800ad80:	f003 0307 	and.w	r3, r3, #7
 800ad84:	4904      	ldr	r1, [pc, #16]	; (800ad98 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad86:	5ccb      	ldrb	r3, [r1, r3]
 800ad88:	f003 031f 	and.w	r3, r3, #31
 800ad8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	58024400 	.word	0x58024400
 800ad98:	080184b0 	.word	0x080184b0

0800ad9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ada0:	f7ff ffb6 	bl	800ad10 <HAL_RCC_GetHCLKFreq>
 800ada4:	4602      	mov	r2, r0
 800ada6:	4b06      	ldr	r3, [pc, #24]	; (800adc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ada8:	69db      	ldr	r3, [r3, #28]
 800adaa:	0a1b      	lsrs	r3, r3, #8
 800adac:	f003 0307 	and.w	r3, r3, #7
 800adb0:	4904      	ldr	r1, [pc, #16]	; (800adc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800adb2:	5ccb      	ldrb	r3, [r1, r3]
 800adb4:	f003 031f 	and.w	r3, r3, #31
 800adb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	58024400 	.word	0x58024400
 800adc4:	080184b0 	.word	0x080184b0

0800adc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	223f      	movs	r2, #63	; 0x3f
 800add6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800add8:	4b1a      	ldr	r3, [pc, #104]	; (800ae44 <HAL_RCC_GetClockConfig+0x7c>)
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	f003 0207 	and.w	r2, r3, #7
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ade4:	4b17      	ldr	r3, [pc, #92]	; (800ae44 <HAL_RCC_GetClockConfig+0x7c>)
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800adf0:	4b14      	ldr	r3, [pc, #80]	; (800ae44 <HAL_RCC_GetClockConfig+0x7c>)
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	f003 020f 	and.w	r2, r3, #15
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800adfc:	4b11      	ldr	r3, [pc, #68]	; (800ae44 <HAL_RCC_GetClockConfig+0x7c>)
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ae08:	4b0e      	ldr	r3, [pc, #56]	; (800ae44 <HAL_RCC_GetClockConfig+0x7c>)
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ae14:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <HAL_RCC_GetClockConfig+0x7c>)
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ae20:	4b08      	ldr	r3, [pc, #32]	; (800ae44 <HAL_RCC_GetClockConfig+0x7c>)
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae2c:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <HAL_RCC_GetClockConfig+0x80>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 020f 	and.w	r2, r3, #15
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	601a      	str	r2, [r3, #0]
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	58024400 	.word	0x58024400
 800ae48:	52002000 	.word	0x52002000

0800ae4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae54:	2300      	movs	r3, #0
 800ae56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae58:	2300      	movs	r3, #0
 800ae5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d03f      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae70:	d02a      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ae72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae76:	d824      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ae78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae7c:	d018      	beq.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ae7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae82:	d81e      	bhi.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d003      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ae88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae8c:	d007      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ae8e:	e018      	b.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae90:	4bab      	ldr	r3, [pc, #684]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	4aaa      	ldr	r2, [pc, #680]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ae9c:	e015      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	3304      	adds	r3, #4
 800aea2:	2102      	movs	r1, #2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f001 fff3 	bl	800ce90 <RCCEx_PLL2_Config>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aeae:	e00c      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3324      	adds	r3, #36	; 0x24
 800aeb4:	2102      	movs	r1, #2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f002 f89c 	bl	800cff4 <RCCEx_PLL3_Config>
 800aebc:	4603      	mov	r3, r0
 800aebe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aec0:	e003      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	75fb      	strb	r3, [r7, #23]
      break;
 800aec6:	e000      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800aec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d109      	bne.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aed0:	4b9b      	ldr	r3, [pc, #620]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aed4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aedc:	4998      	ldr	r1, [pc, #608]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	650b      	str	r3, [r1, #80]	; 0x50
 800aee2:	e001      	b.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d03d      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef8:	2b04      	cmp	r3, #4
 800aefa:	d826      	bhi.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800aefc:	a201      	add	r2, pc, #4	; (adr r2, 800af04 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800aefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af02:	bf00      	nop
 800af04:	0800af19 	.word	0x0800af19
 800af08:	0800af27 	.word	0x0800af27
 800af0c:	0800af39 	.word	0x0800af39
 800af10:	0800af51 	.word	0x0800af51
 800af14:	0800af51 	.word	0x0800af51
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af18:	4b89      	ldr	r3, [pc, #548]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1c:	4a88      	ldr	r2, [pc, #544]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af24:	e015      	b.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3304      	adds	r3, #4
 800af2a:	2100      	movs	r1, #0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f001 ffaf 	bl	800ce90 <RCCEx_PLL2_Config>
 800af32:	4603      	mov	r3, r0
 800af34:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af36:	e00c      	b.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3324      	adds	r3, #36	; 0x24
 800af3c:	2100      	movs	r1, #0
 800af3e:	4618      	mov	r0, r3
 800af40:	f002 f858 	bl	800cff4 <RCCEx_PLL3_Config>
 800af44:	4603      	mov	r3, r0
 800af46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af48:	e003      	b.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	75fb      	strb	r3, [r7, #23]
      break;
 800af4e:	e000      	b.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800af50:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af52:	7dfb      	ldrb	r3, [r7, #23]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d109      	bne.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af58:	4b79      	ldr	r3, [pc, #484]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af5c:	f023 0207 	bic.w	r2, r3, #7
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af64:	4976      	ldr	r1, [pc, #472]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af66:	4313      	orrs	r3, r2
 800af68:	650b      	str	r3, [r1, #80]	; 0x50
 800af6a:	e001      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af6c:	7dfb      	ldrb	r3, [r7, #23]
 800af6e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d042      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af84:	d02b      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x192>
 800af86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af8a:	d825      	bhi.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800af8c:	2bc0      	cmp	r3, #192	; 0xc0
 800af8e:	d028      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800af90:	2bc0      	cmp	r3, #192	; 0xc0
 800af92:	d821      	bhi.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800af94:	2b80      	cmp	r3, #128	; 0x80
 800af96:	d016      	beq.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800af98:	2b80      	cmp	r3, #128	; 0x80
 800af9a:	d81d      	bhi.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800afa0:	2b40      	cmp	r3, #64	; 0x40
 800afa2:	d007      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800afa4:	e018      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afa6:	4b66      	ldr	r3, [pc, #408]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	4a65      	ldr	r2, [pc, #404]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800afac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800afb2:	e017      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3304      	adds	r3, #4
 800afb8:	2100      	movs	r1, #0
 800afba:	4618      	mov	r0, r3
 800afbc:	f001 ff68 	bl	800ce90 <RCCEx_PLL2_Config>
 800afc0:	4603      	mov	r3, r0
 800afc2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800afc4:	e00e      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3324      	adds	r3, #36	; 0x24
 800afca:	2100      	movs	r1, #0
 800afcc:	4618      	mov	r0, r3
 800afce:	f002 f811 	bl	800cff4 <RCCEx_PLL3_Config>
 800afd2:	4603      	mov	r3, r0
 800afd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800afd6:	e005      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	75fb      	strb	r3, [r7, #23]
      break;
 800afdc:	e002      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800afde:	bf00      	nop
 800afe0:	e000      	b.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800afe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afe4:	7dfb      	ldrb	r3, [r7, #23]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d109      	bne.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800afea:	4b55      	ldr	r3, [pc, #340]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800afec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff6:	4952      	ldr	r1, [pc, #328]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aff8:	4313      	orrs	r3, r2
 800affa:	650b      	str	r3, [r1, #80]	; 0x50
 800affc:	e001      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affe:	7dfb      	ldrb	r3, [r7, #23]
 800b000:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d049      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b014:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b018:	d030      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b01a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b01e:	d82a      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b020:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b024:	d02c      	beq.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b026:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b02a:	d824      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b02c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b030:	d018      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b036:	d81e      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b03c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b040:	d007      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b042:	e018      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b044:	4b3e      	ldr	r3, [pc, #248]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b048:	4a3d      	ldr	r2, [pc, #244]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b04a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b04e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b050:	e017      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	3304      	adds	r3, #4
 800b056:	2100      	movs	r1, #0
 800b058:	4618      	mov	r0, r3
 800b05a:	f001 ff19 	bl	800ce90 <RCCEx_PLL2_Config>
 800b05e:	4603      	mov	r3, r0
 800b060:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b062:	e00e      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3324      	adds	r3, #36	; 0x24
 800b068:	2100      	movs	r1, #0
 800b06a:	4618      	mov	r0, r3
 800b06c:	f001 ffc2 	bl	800cff4 <RCCEx_PLL3_Config>
 800b070:	4603      	mov	r3, r0
 800b072:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b074:	e005      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	75fb      	strb	r3, [r7, #23]
      break;
 800b07a:	e002      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b07c:	bf00      	nop
 800b07e:	e000      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b080:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b082:	7dfb      	ldrb	r3, [r7, #23]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b088:	4b2d      	ldr	r3, [pc, #180]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b08c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b096:	492a      	ldr	r1, [pc, #168]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b098:	4313      	orrs	r3, r2
 800b09a:	658b      	str	r3, [r1, #88]	; 0x58
 800b09c:	e001      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09e:	7dfb      	ldrb	r3, [r7, #23]
 800b0a0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d04c      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b0b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0b8:	d030      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b0ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0be:	d82a      	bhi.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b0c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0c4:	d02c      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800b0c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0ca:	d824      	bhi.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b0cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0d0:	d018      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b0d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0d6:	d81e      	bhi.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b0dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b0e0:	d007      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b0e2:	e018      	b.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0e4:	4b16      	ldr	r3, [pc, #88]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e8:	4a15      	ldr	r2, [pc, #84]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b0ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b0f0:	e017      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f001 fec9 	bl	800ce90 <RCCEx_PLL2_Config>
 800b0fe:	4603      	mov	r3, r0
 800b100:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b102:	e00e      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3324      	adds	r3, #36	; 0x24
 800b108:	2100      	movs	r1, #0
 800b10a:	4618      	mov	r0, r3
 800b10c:	f001 ff72 	bl	800cff4 <RCCEx_PLL3_Config>
 800b110:	4603      	mov	r3, r0
 800b112:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b114:	e005      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	75fb      	strb	r3, [r7, #23]
      break;
 800b11a:	e002      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b11c:	bf00      	nop
 800b11e:	e000      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b120:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b122:	7dfb      	ldrb	r3, [r7, #23]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10d      	bne.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b128:	4b05      	ldr	r3, [pc, #20]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b12a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b12c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b136:	4902      	ldr	r1, [pc, #8]	; (800b140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b138:	4313      	orrs	r3, r2
 800b13a:	658b      	str	r3, [r1, #88]	; 0x58
 800b13c:	e004      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b13e:	bf00      	nop
 800b140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d032      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b158:	2b30      	cmp	r3, #48	; 0x30
 800b15a:	d01c      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b15c:	2b30      	cmp	r3, #48	; 0x30
 800b15e:	d817      	bhi.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b160:	2b20      	cmp	r3, #32
 800b162:	d00c      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b164:	2b20      	cmp	r3, #32
 800b166:	d813      	bhi.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d016      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b16c:	2b10      	cmp	r3, #16
 800b16e:	d10f      	bne.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b170:	4baf      	ldr	r3, [pc, #700]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	4aae      	ldr	r2, [pc, #696]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b17a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b17c:	e00e      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3304      	adds	r3, #4
 800b182:	2102      	movs	r1, #2
 800b184:	4618      	mov	r0, r3
 800b186:	f001 fe83 	bl	800ce90 <RCCEx_PLL2_Config>
 800b18a:	4603      	mov	r3, r0
 800b18c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b18e:	e005      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	75fb      	strb	r3, [r7, #23]
      break;
 800b194:	e002      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b196:	bf00      	nop
 800b198:	e000      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b19a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d109      	bne.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b1a2:	4ba3      	ldr	r3, [pc, #652]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ae:	49a0      	ldr	r1, [pc, #640]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b1b4:	e001      	b.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b6:	7dfb      	ldrb	r3, [r7, #23]
 800b1b8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d047      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1ce:	d030      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b1d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1d4:	d82a      	bhi.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b1d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1da:	d02c      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b1dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1e0:	d824      	bhi.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b1e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1e6:	d018      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b1e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1ec:	d81e      	bhi.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d003      	beq.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b1f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1f6:	d007      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b1f8:	e018      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1fa:	4b8d      	ldr	r3, [pc, #564]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fe:	4a8c      	ldr	r2, [pc, #560]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b204:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b206:	e017      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	3304      	adds	r3, #4
 800b20c:	2100      	movs	r1, #0
 800b20e:	4618      	mov	r0, r3
 800b210:	f001 fe3e 	bl	800ce90 <RCCEx_PLL2_Config>
 800b214:	4603      	mov	r3, r0
 800b216:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b218:	e00e      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3324      	adds	r3, #36	; 0x24
 800b21e:	2100      	movs	r1, #0
 800b220:	4618      	mov	r0, r3
 800b222:	f001 fee7 	bl	800cff4 <RCCEx_PLL3_Config>
 800b226:	4603      	mov	r3, r0
 800b228:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b22a:	e005      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	75fb      	strb	r3, [r7, #23]
      break;
 800b230:	e002      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b232:	bf00      	nop
 800b234:	e000      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b236:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b238:	7dfb      	ldrb	r3, [r7, #23]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d109      	bne.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b23e:	4b7c      	ldr	r3, [pc, #496]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b242:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b24a:	4979      	ldr	r1, [pc, #484]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b24c:	4313      	orrs	r3, r2
 800b24e:	650b      	str	r3, [r1, #80]	; 0x50
 800b250:	e001      	b.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b252:	7dfb      	ldrb	r3, [r7, #23]
 800b254:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d049      	beq.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b266:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b26a:	d02e      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b26c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b270:	d828      	bhi.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b272:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b276:	d02a      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b278:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b27c:	d822      	bhi.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b27e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b282:	d026      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b284:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b288:	d81c      	bhi.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b28a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b28e:	d010      	beq.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b294:	d816      	bhi.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b296:	2b00      	cmp	r3, #0
 800b298:	d01d      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b29a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b29e:	d111      	bne.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f001 fdf2 	bl	800ce90 <RCCEx_PLL2_Config>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b2b0:	e012      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3324      	adds	r3, #36	; 0x24
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f001 fe9b 	bl	800cff4 <RCCEx_PLL3_Config>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b2c2:	e009      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b2c8:	e006      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b2ca:	bf00      	nop
 800b2cc:	e004      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b2ce:	bf00      	nop
 800b2d0:	e002      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b2d2:	bf00      	nop
 800b2d4:	e000      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b2d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d109      	bne.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b2de:	4b54      	ldr	r3, [pc, #336]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b2e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ea:	4951      	ldr	r1, [pc, #324]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	650b      	str	r3, [r1, #80]	; 0x50
 800b2f0:	e001      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
 800b2f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d04b      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b30c:	d02e      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b30e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b312:	d828      	bhi.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b318:	d02a      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b31a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b31e:	d822      	bhi.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b320:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b324:	d026      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b326:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b32a:	d81c      	bhi.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b32c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b330:	d010      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b336:	d816      	bhi.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d01d      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b33c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b340:	d111      	bne.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	3304      	adds	r3, #4
 800b346:	2101      	movs	r1, #1
 800b348:	4618      	mov	r0, r3
 800b34a:	f001 fda1 	bl	800ce90 <RCCEx_PLL2_Config>
 800b34e:	4603      	mov	r3, r0
 800b350:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b352:	e012      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3324      	adds	r3, #36	; 0x24
 800b358:	2101      	movs	r1, #1
 800b35a:	4618      	mov	r0, r3
 800b35c:	f001 fe4a 	bl	800cff4 <RCCEx_PLL3_Config>
 800b360:	4603      	mov	r3, r0
 800b362:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b364:	e009      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	75fb      	strb	r3, [r7, #23]
      break;
 800b36a:	e006      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b36c:	bf00      	nop
 800b36e:	e004      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b370:	bf00      	nop
 800b372:	e002      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b374:	bf00      	nop
 800b376:	e000      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b37a:	7dfb      	ldrb	r3, [r7, #23]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10a      	bne.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b380:	4b2b      	ldr	r3, [pc, #172]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b384:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b38e:	4928      	ldr	r1, [pc, #160]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b390:	4313      	orrs	r3, r2
 800b392:	658b      	str	r3, [r1, #88]	; 0x58
 800b394:	e001      	b.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b396:	7dfb      	ldrb	r3, [r7, #23]
 800b398:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d02f      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ae:	d00e      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3b4:	d814      	bhi.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d015      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b3ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3be:	d10f      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3c0:	4b1b      	ldr	r3, [pc, #108]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	4a1a      	ldr	r2, [pc, #104]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b3c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b3cc:	e00c      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f001 fd5b 	bl	800ce90 <RCCEx_PLL2_Config>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b3de:	e003      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e4:	e000      	b.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b3e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b3ee:	4b10      	ldr	r3, [pc, #64]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3fa:	490d      	ldr	r1, [pc, #52]	; (800b430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	650b      	str	r3, [r1, #80]	; 0x50
 800b400:	e001      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b402:	7dfb      	ldrb	r3, [r7, #23]
 800b404:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d033      	beq.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b416:	2b03      	cmp	r3, #3
 800b418:	d81c      	bhi.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b41a:	a201      	add	r2, pc, #4	; (adr r2, 800b420 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b420:	0800b45b 	.word	0x0800b45b
 800b424:	0800b435 	.word	0x0800b435
 800b428:	0800b443 	.word	0x0800b443
 800b42c:	0800b45b 	.word	0x0800b45b
 800b430:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b434:	4bb8      	ldr	r3, [pc, #736]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	4ab7      	ldr	r2, [pc, #732]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b43a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b43e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b440:	e00c      	b.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3304      	adds	r3, #4
 800b446:	2102      	movs	r1, #2
 800b448:	4618      	mov	r0, r3
 800b44a:	f001 fd21 	bl	800ce90 <RCCEx_PLL2_Config>
 800b44e:	4603      	mov	r3, r0
 800b450:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b452:	e003      	b.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	75fb      	strb	r3, [r7, #23]
      break;
 800b458:	e000      	b.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b45a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b45c:	7dfb      	ldrb	r3, [r7, #23]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d109      	bne.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b462:	4bad      	ldr	r3, [pc, #692]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b466:	f023 0203 	bic.w	r2, r3, #3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b46e:	49aa      	ldr	r1, [pc, #680]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b470:	4313      	orrs	r3, r2
 800b472:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b474:	e001      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b476:	7dfb      	ldrb	r3, [r7, #23]
 800b478:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b482:	2b00      	cmp	r3, #0
 800b484:	f000 8086 	beq.w	800b594 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b488:	4ba4      	ldr	r3, [pc, #656]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4aa3      	ldr	r2, [pc, #652]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b48e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b492:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b494:	f7fa fbe4 	bl	8005c60 <HAL_GetTick>
 800b498:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b49a:	e009      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b49c:	f7fa fbe0 	bl	8005c60 <HAL_GetTick>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	2b64      	cmp	r3, #100	; 0x64
 800b4a8:	d902      	bls.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	75fb      	strb	r3, [r7, #23]
        break;
 800b4ae:	e005      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4b0:	4b9a      	ldr	r3, [pc, #616]	; (800b71c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d0ef      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d166      	bne.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b4c2:	4b95      	ldr	r3, [pc, #596]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b4c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4cc:	4053      	eors	r3, r2
 800b4ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d013      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b4d6:	4b90      	ldr	r3, [pc, #576]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b4e0:	4b8d      	ldr	r3, [pc, #564]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b4e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e4:	4a8c      	ldr	r2, [pc, #560]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b4e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b4ec:	4b8a      	ldr	r3, [pc, #552]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4f0:	4a89      	ldr	r2, [pc, #548]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b4f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b4f8:	4a87      	ldr	r2, [pc, #540]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b508:	d115      	bne.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b50a:	f7fa fba9 	bl	8005c60 <HAL_GetTick>
 800b50e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b510:	e00b      	b.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b512:	f7fa fba5 	bl	8005c60 <HAL_GetTick>
 800b516:	4602      	mov	r2, r0
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b520:	4293      	cmp	r3, r2
 800b522:	d902      	bls.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	75fb      	strb	r3, [r7, #23]
            break;
 800b528:	e005      	b.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b52a:	4b7b      	ldr	r3, [pc, #492]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b52e:	f003 0302 	and.w	r3, r3, #2
 800b532:	2b00      	cmp	r3, #0
 800b534:	d0ed      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b536:	7dfb      	ldrb	r3, [r7, #23]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d126      	bne.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b54a:	d10d      	bne.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b54c:	4b72      	ldr	r3, [pc, #456]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b55a:	0919      	lsrs	r1, r3, #4
 800b55c:	4b70      	ldr	r3, [pc, #448]	; (800b720 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b55e:	400b      	ands	r3, r1
 800b560:	496d      	ldr	r1, [pc, #436]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b562:	4313      	orrs	r3, r2
 800b564:	610b      	str	r3, [r1, #16]
 800b566:	e005      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b568:	4b6b      	ldr	r3, [pc, #428]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	4a6a      	ldr	r2, [pc, #424]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b56e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b572:	6113      	str	r3, [r2, #16]
 800b574:	4b68      	ldr	r3, [pc, #416]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b576:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b57e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b582:	4965      	ldr	r1, [pc, #404]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b584:	4313      	orrs	r3, r2
 800b586:	670b      	str	r3, [r1, #112]	; 0x70
 800b588:	e004      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b58a:	7dfb      	ldrb	r3, [r7, #23]
 800b58c:	75bb      	strb	r3, [r7, #22]
 800b58e:	e001      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b590:	7dfb      	ldrb	r3, [r7, #23]
 800b592:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f003 0301 	and.w	r3, r3, #1
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d07e      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5a4:	2b28      	cmp	r3, #40	; 0x28
 800b5a6:	d867      	bhi.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b5a8:	a201      	add	r2, pc, #4	; (adr r2, 800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ae:	bf00      	nop
 800b5b0:	0800b67f 	.word	0x0800b67f
 800b5b4:	0800b679 	.word	0x0800b679
 800b5b8:	0800b679 	.word	0x0800b679
 800b5bc:	0800b679 	.word	0x0800b679
 800b5c0:	0800b679 	.word	0x0800b679
 800b5c4:	0800b679 	.word	0x0800b679
 800b5c8:	0800b679 	.word	0x0800b679
 800b5cc:	0800b679 	.word	0x0800b679
 800b5d0:	0800b655 	.word	0x0800b655
 800b5d4:	0800b679 	.word	0x0800b679
 800b5d8:	0800b679 	.word	0x0800b679
 800b5dc:	0800b679 	.word	0x0800b679
 800b5e0:	0800b679 	.word	0x0800b679
 800b5e4:	0800b679 	.word	0x0800b679
 800b5e8:	0800b679 	.word	0x0800b679
 800b5ec:	0800b679 	.word	0x0800b679
 800b5f0:	0800b667 	.word	0x0800b667
 800b5f4:	0800b679 	.word	0x0800b679
 800b5f8:	0800b679 	.word	0x0800b679
 800b5fc:	0800b679 	.word	0x0800b679
 800b600:	0800b679 	.word	0x0800b679
 800b604:	0800b679 	.word	0x0800b679
 800b608:	0800b679 	.word	0x0800b679
 800b60c:	0800b679 	.word	0x0800b679
 800b610:	0800b67f 	.word	0x0800b67f
 800b614:	0800b679 	.word	0x0800b679
 800b618:	0800b679 	.word	0x0800b679
 800b61c:	0800b679 	.word	0x0800b679
 800b620:	0800b679 	.word	0x0800b679
 800b624:	0800b679 	.word	0x0800b679
 800b628:	0800b679 	.word	0x0800b679
 800b62c:	0800b679 	.word	0x0800b679
 800b630:	0800b67f 	.word	0x0800b67f
 800b634:	0800b679 	.word	0x0800b679
 800b638:	0800b679 	.word	0x0800b679
 800b63c:	0800b679 	.word	0x0800b679
 800b640:	0800b679 	.word	0x0800b679
 800b644:	0800b679 	.word	0x0800b679
 800b648:	0800b679 	.word	0x0800b679
 800b64c:	0800b679 	.word	0x0800b679
 800b650:	0800b67f 	.word	0x0800b67f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3304      	adds	r3, #4
 800b658:	2101      	movs	r1, #1
 800b65a:	4618      	mov	r0, r3
 800b65c:	f001 fc18 	bl	800ce90 <RCCEx_PLL2_Config>
 800b660:	4603      	mov	r3, r0
 800b662:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b664:	e00c      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	3324      	adds	r3, #36	; 0x24
 800b66a:	2101      	movs	r1, #1
 800b66c:	4618      	mov	r0, r3
 800b66e:	f001 fcc1 	bl	800cff4 <RCCEx_PLL3_Config>
 800b672:	4603      	mov	r3, r0
 800b674:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b676:	e003      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	75fb      	strb	r3, [r7, #23]
      break;
 800b67c:	e000      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b67e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b680:	7dfb      	ldrb	r3, [r7, #23]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d109      	bne.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b686:	4b24      	ldr	r3, [pc, #144]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b692:	4921      	ldr	r1, [pc, #132]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b694:	4313      	orrs	r3, r2
 800b696:	654b      	str	r3, [r1, #84]	; 0x54
 800b698:	e001      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 0302 	and.w	r3, r3, #2
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d03e      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ae:	2b05      	cmp	r3, #5
 800b6b0:	d820      	bhi.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b6b2:	a201      	add	r2, pc, #4	; (adr r2, 800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b8:	0800b6fb 	.word	0x0800b6fb
 800b6bc:	0800b6d1 	.word	0x0800b6d1
 800b6c0:	0800b6e3 	.word	0x0800b6e3
 800b6c4:	0800b6fb 	.word	0x0800b6fb
 800b6c8:	0800b6fb 	.word	0x0800b6fb
 800b6cc:	0800b6fb 	.word	0x0800b6fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f001 fbda 	bl	800ce90 <RCCEx_PLL2_Config>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b6e0:	e00c      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	3324      	adds	r3, #36	; 0x24
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f001 fc83 	bl	800cff4 <RCCEx_PLL3_Config>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b6f2:	e003      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b6f8:	e000      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b6fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d110      	bne.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b702:	4b05      	ldr	r3, [pc, #20]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b706:	f023 0207 	bic.w	r2, r3, #7
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b70e:	4902      	ldr	r1, [pc, #8]	; (800b718 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b710:	4313      	orrs	r3, r2
 800b712:	654b      	str	r3, [r1, #84]	; 0x54
 800b714:	e008      	b.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b716:	bf00      	nop
 800b718:	58024400 	.word	0x58024400
 800b71c:	58024800 	.word	0x58024800
 800b720:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 0304 	and.w	r3, r3, #4
 800b730:	2b00      	cmp	r3, #0
 800b732:	d039      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b73a:	2b05      	cmp	r3, #5
 800b73c:	d820      	bhi.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b73e:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b744:	0800b787 	.word	0x0800b787
 800b748:	0800b75d 	.word	0x0800b75d
 800b74c:	0800b76f 	.word	0x0800b76f
 800b750:	0800b787 	.word	0x0800b787
 800b754:	0800b787 	.word	0x0800b787
 800b758:	0800b787 	.word	0x0800b787
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3304      	adds	r3, #4
 800b760:	2101      	movs	r1, #1
 800b762:	4618      	mov	r0, r3
 800b764:	f001 fb94 	bl	800ce90 <RCCEx_PLL2_Config>
 800b768:	4603      	mov	r3, r0
 800b76a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b76c:	e00c      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	3324      	adds	r3, #36	; 0x24
 800b772:	2101      	movs	r1, #1
 800b774:	4618      	mov	r0, r3
 800b776:	f001 fc3d 	bl	800cff4 <RCCEx_PLL3_Config>
 800b77a:	4603      	mov	r3, r0
 800b77c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b77e:	e003      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	75fb      	strb	r3, [r7, #23]
      break;
 800b784:	e000      	b.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b786:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10a      	bne.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b78e:	4bb7      	ldr	r3, [pc, #732]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b792:	f023 0207 	bic.w	r2, r3, #7
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b79c:	49b3      	ldr	r1, [pc, #716]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	658b      	str	r3, [r1, #88]	; 0x58
 800b7a2:	e001      	b.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a4:	7dfb      	ldrb	r3, [r7, #23]
 800b7a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 0320 	and.w	r3, r3, #32
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d04b      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7be:	d02e      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b7c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7c4:	d828      	bhi.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ca:	d02a      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7d0:	d822      	bhi.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b7d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7d6:	d026      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b7d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7dc:	d81c      	bhi.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b7de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7e2:	d010      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b7e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7e8:	d816      	bhi.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d01d      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b7ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7f2:	d111      	bne.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	3304      	adds	r3, #4
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f001 fb48 	bl	800ce90 <RCCEx_PLL2_Config>
 800b800:	4603      	mov	r3, r0
 800b802:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b804:	e012      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3324      	adds	r3, #36	; 0x24
 800b80a:	2102      	movs	r1, #2
 800b80c:	4618      	mov	r0, r3
 800b80e:	f001 fbf1 	bl	800cff4 <RCCEx_PLL3_Config>
 800b812:	4603      	mov	r3, r0
 800b814:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b816:	e009      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	75fb      	strb	r3, [r7, #23]
      break;
 800b81c:	e006      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b81e:	bf00      	nop
 800b820:	e004      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b822:	bf00      	nop
 800b824:	e002      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b826:	bf00      	nop
 800b828:	e000      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b82a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10a      	bne.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b832:	4b8e      	ldr	r3, [pc, #568]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b836:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b840:	498a      	ldr	r1, [pc, #552]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b842:	4313      	orrs	r3, r2
 800b844:	654b      	str	r3, [r1, #84]	; 0x54
 800b846:	e001      	b.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b848:	7dfb      	ldrb	r3, [r7, #23]
 800b84a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b854:	2b00      	cmp	r3, #0
 800b856:	d04b      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b85e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b862:	d02e      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b864:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b868:	d828      	bhi.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b86a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b86e:	d02a      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b874:	d822      	bhi.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b87a:	d026      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b87c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b880:	d81c      	bhi.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b886:	d010      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b88c:	d816      	bhi.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d01d      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b896:	d111      	bne.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3304      	adds	r3, #4
 800b89c:	2100      	movs	r1, #0
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f001 faf6 	bl	800ce90 <RCCEx_PLL2_Config>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b8a8:	e012      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	3324      	adds	r3, #36	; 0x24
 800b8ae:	2102      	movs	r1, #2
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f001 fb9f 	bl	800cff4 <RCCEx_PLL3_Config>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b8ba:	e009      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	75fb      	strb	r3, [r7, #23]
      break;
 800b8c0:	e006      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b8c2:	bf00      	nop
 800b8c4:	e004      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b8c6:	bf00      	nop
 800b8c8:	e002      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b8ca:	bf00      	nop
 800b8cc:	e000      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b8ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10a      	bne.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b8d6:	4b65      	ldr	r3, [pc, #404]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8e4:	4961      	ldr	r1, [pc, #388]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	658b      	str	r3, [r1, #88]	; 0x58
 800b8ea:	e001      	b.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
 800b8ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d04b      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b902:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b906:	d02e      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b908:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b90c:	d828      	bhi.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b90e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b912:	d02a      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b918:	d822      	bhi.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b91a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b91e:	d026      	beq.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b920:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b924:	d81c      	bhi.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b92a:	d010      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b92c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b930:	d816      	bhi.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d01d      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b93a:	d111      	bne.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3304      	adds	r3, #4
 800b940:	2100      	movs	r1, #0
 800b942:	4618      	mov	r0, r3
 800b944:	f001 faa4 	bl	800ce90 <RCCEx_PLL2_Config>
 800b948:	4603      	mov	r3, r0
 800b94a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b94c:	e012      	b.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3324      	adds	r3, #36	; 0x24
 800b952:	2102      	movs	r1, #2
 800b954:	4618      	mov	r0, r3
 800b956:	f001 fb4d 	bl	800cff4 <RCCEx_PLL3_Config>
 800b95a:	4603      	mov	r3, r0
 800b95c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b95e:	e009      	b.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	75fb      	strb	r3, [r7, #23]
      break;
 800b964:	e006      	b.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b966:	bf00      	nop
 800b968:	e004      	b.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b96a:	bf00      	nop
 800b96c:	e002      	b.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b96e:	bf00      	nop
 800b970:	e000      	b.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b972:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10a      	bne.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b97a:	4b3c      	ldr	r3, [pc, #240]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b97c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b97e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b988:	4938      	ldr	r1, [pc, #224]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b98a:	4313      	orrs	r3, r2
 800b98c:	658b      	str	r3, [r1, #88]	; 0x58
 800b98e:	e001      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b990:	7dfb      	ldrb	r3, [r7, #23]
 800b992:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0308 	and.w	r3, r3, #8
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d01a      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9aa:	d10a      	bne.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	3324      	adds	r3, #36	; 0x24
 800b9b0:	2102      	movs	r1, #2
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 fb1e 	bl	800cff4 <RCCEx_PLL3_Config>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b9c2:	4b2a      	ldr	r3, [pc, #168]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9d0:	4926      	ldr	r1, [pc, #152]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0310 	and.w	r3, r3, #16
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d01a      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9ec:	d10a      	bne.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3324      	adds	r3, #36	; 0x24
 800b9f2:	2102      	movs	r1, #2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f001 fafd 	bl	800cff4 <RCCEx_PLL3_Config>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ba04:	4b19      	ldr	r3, [pc, #100]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ba06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba12:	4916      	ldr	r1, [pc, #88]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ba14:	4313      	orrs	r3, r2
 800ba16:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d036      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba2e:	d01f      	beq.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ba30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba34:	d817      	bhi.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800ba3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba3e:	d009      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800ba40:	e011      	b.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	3304      	adds	r3, #4
 800ba46:	2100      	movs	r1, #0
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f001 fa21 	bl	800ce90 <RCCEx_PLL2_Config>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ba52:	e00e      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	3324      	adds	r3, #36	; 0x24
 800ba58:	2102      	movs	r1, #2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f001 faca 	bl	800cff4 <RCCEx_PLL3_Config>
 800ba60:	4603      	mov	r3, r0
 800ba62:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ba64:	e005      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	75fb      	strb	r3, [r7, #23]
      break;
 800ba6a:	e002      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800ba6c:	58024400 	.word	0x58024400
      break;
 800ba70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10a      	bne.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ba78:	4b93      	ldr	r3, [pc, #588]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba86:	4990      	ldr	r1, [pc, #576]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	658b      	str	r3, [r1, #88]	; 0x58
 800ba8c:	e001      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d033      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800baa8:	d01c      	beq.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800baaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800baae:	d816      	bhi.n	800bade <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800bab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bab4:	d003      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800bab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800baba:	d007      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800babc:	e00f      	b.n	800bade <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800babe:	4b82      	ldr	r3, [pc, #520]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac2:	4a81      	ldr	r2, [pc, #516]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bac8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800baca:	e00c      	b.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3324      	adds	r3, #36	; 0x24
 800bad0:	2101      	movs	r1, #1
 800bad2:	4618      	mov	r0, r3
 800bad4:	f001 fa8e 	bl	800cff4 <RCCEx_PLL3_Config>
 800bad8:	4603      	mov	r3, r0
 800bada:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800badc:	e003      	b.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	75fb      	strb	r3, [r7, #23]
      break;
 800bae2:	e000      	b.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800bae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10a      	bne.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800baec:	4b76      	ldr	r3, [pc, #472]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800baee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bafa:	4973      	ldr	r1, [pc, #460]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bafc:	4313      	orrs	r3, r2
 800bafe:	654b      	str	r3, [r1, #84]	; 0x54
 800bb00:	e001      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb02:	7dfb      	ldrb	r3, [r7, #23]
 800bb04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d029      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d003      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800bb1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb1e:	d007      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800bb20:	e00f      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb22:	4b69      	ldr	r3, [pc, #420]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb26:	4a68      	ldr	r2, [pc, #416]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bb2e:	e00b      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3304      	adds	r3, #4
 800bb34:	2102      	movs	r1, #2
 800bb36:	4618      	mov	r0, r3
 800bb38:	f001 f9aa 	bl	800ce90 <RCCEx_PLL2_Config>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bb40:	e002      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	75fb      	strb	r3, [r7, #23]
      break;
 800bb46:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb48:	7dfb      	ldrb	r3, [r7, #23]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d109      	bne.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bb4e:	4b5e      	ldr	r3, [pc, #376]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb5a:	495b      	ldr	r1, [pc, #364]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bb60:	e001      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
 800bb64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00a      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	3324      	adds	r3, #36	; 0x24
 800bb76:	2102      	movs	r1, #2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f001 fa3b 	bl	800cff4 <RCCEx_PLL3_Config>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d030      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb9c:	d017      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800bb9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bba2:	d811      	bhi.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800bba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bba8:	d013      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800bbaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbae:	d80b      	bhi.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d010      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800bbb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbb8:	d106      	bne.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbba:	4b43      	ldr	r3, [pc, #268]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbbe:	4a42      	ldr	r2, [pc, #264]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bbc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bbc6:	e007      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	75fb      	strb	r3, [r7, #23]
      break;
 800bbcc:	e004      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bbce:	bf00      	nop
 800bbd0:	e002      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bbd2:	bf00      	nop
 800bbd4:	e000      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bbd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d109      	bne.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bbde:	4b3a      	ldr	r3, [pc, #232]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbea:	4937      	ldr	r1, [pc, #220]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bbec:	4313      	orrs	r3, r2
 800bbee:	654b      	str	r3, [r1, #84]	; 0x54
 800bbf0:	e001      	b.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf2:	7dfb      	ldrb	r3, [r7, #23]
 800bbf4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d008      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bc02:	4b31      	ldr	r3, [pc, #196]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc0e:	492e      	ldr	r1, [pc, #184]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc10:	4313      	orrs	r3, r2
 800bc12:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d009      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bc20:	4b29      	ldr	r3, [pc, #164]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc22:	691b      	ldr	r3, [r3, #16]
 800bc24:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc2e:	4926      	ldr	r1, [pc, #152]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc30:	4313      	orrs	r3, r2
 800bc32:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d008      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc40:	4b21      	ldr	r3, [pc, #132]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc4c:	491e      	ldr	r1, [pc, #120]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00d      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc5e:	4b1a      	ldr	r3, [pc, #104]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	4a19      	ldr	r2, [pc, #100]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc68:	6113      	str	r3, [r2, #16]
 800bc6a:	4b17      	ldr	r3, [pc, #92]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc6c:	691a      	ldr	r2, [r3, #16]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bc74:	4914      	ldr	r1, [pc, #80]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc76:	4313      	orrs	r3, r2
 800bc78:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	da08      	bge.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc82:	4b11      	ldr	r3, [pc, #68]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc8e:	490e      	ldr	r1, [pc, #56]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bc90:	4313      	orrs	r3, r2
 800bc92:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d009      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bca0:	4b09      	ldr	r3, [pc, #36]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcae:	4906      	ldr	r1, [pc, #24]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bcb4:	7dbb      	ldrb	r3, [r7, #22]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e000      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3718      	adds	r7, #24
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	58024400 	.word	0x58024400

0800bccc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b090      	sub	sp, #64	; 0x40
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcda:	f040 8095 	bne.w	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800bcde:	4bae      	ldr	r3, [pc, #696]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bce2:	f003 0307 	and.w	r3, r3, #7
 800bce6:	633b      	str	r3, [r7, #48]	; 0x30
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	f200 8088 	bhi.w	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800bcf0:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800bcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf6:	bf00      	nop
 800bcf8:	0800bd0d 	.word	0x0800bd0d
 800bcfc:	0800bd35 	.word	0x0800bd35
 800bd00:	0800bd5d 	.word	0x0800bd5d
 800bd04:	0800bdf9 	.word	0x0800bdf9
 800bd08:	0800bd85 	.word	0x0800bd85

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd0c:	4ba2      	ldr	r3, [pc, #648]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd18:	d108      	bne.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f000 ff64 	bl	800cbec <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bd28:	f000 bc95 	b.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd30:	f000 bc91 	b.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd34:	4b98      	ldr	r3, [pc, #608]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd40:	d108      	bne.n	800bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd42:	f107 0318 	add.w	r3, r7, #24
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 fca8 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bd50:	f000 bc81 	b.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd58:	f000 bc7d 	b.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd5c:	4b8e      	ldr	r3, [pc, #568]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd68:	d108      	bne.n	800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd6a:	f107 030c 	add.w	r3, r7, #12
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 fde8 	bl	800c944 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bd78:	f000 bc6d 	b.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd80:	f000 bc69 	b.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bd84:	4b84      	ldr	r3, [pc, #528]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bd86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd8c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd8e:	4b82      	ldr	r3, [pc, #520]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f003 0304 	and.w	r3, r3, #4
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	d10c      	bne.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800bd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d109      	bne.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bda0:	4b7d      	ldr	r3, [pc, #500]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	08db      	lsrs	r3, r3, #3
 800bda6:	f003 0303 	and.w	r3, r3, #3
 800bdaa:	4a7c      	ldr	r2, [pc, #496]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800bdac:	fa22 f303 	lsr.w	r3, r2, r3
 800bdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdb2:	e01f      	b.n	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdb4:	4b78      	ldr	r3, [pc, #480]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc0:	d106      	bne.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800bdc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdc8:	d102      	bne.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bdca:	4b75      	ldr	r3, [pc, #468]	; (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800bdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdce:	e011      	b.n	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdd0:	4b71      	ldr	r3, [pc, #452]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bddc:	d106      	bne.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800bdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bde4:	d102      	bne.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bde6:	4b6f      	ldr	r3, [pc, #444]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800bde8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdea:	e003      	b.n	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bdec:	2300      	movs	r3, #0
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bdf0:	f000 bc31 	b.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdf4:	f000 bc2f 	b.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bdf8:	4b6b      	ldr	r3, [pc, #428]	; (800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800bdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdfc:	f000 bc2b 	b.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be04:	f000 bc27 	b.w	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be0e:	f040 8095 	bne.w	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800be12:	4b61      	ldr	r3, [pc, #388]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800be14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be16:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800be1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be22:	d04d      	beq.n	800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be2a:	f200 8084 	bhi.w	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	2bc0      	cmp	r3, #192	; 0xc0
 800be32:	d07d      	beq.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	2bc0      	cmp	r3, #192	; 0xc0
 800be38:	d87d      	bhi.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	2b80      	cmp	r3, #128	; 0x80
 800be3e:	d02d      	beq.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800be40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be42:	2b80      	cmp	r3, #128	; 0x80
 800be44:	d877      	bhi.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800be46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d003      	beq.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	2b40      	cmp	r3, #64	; 0x40
 800be50:	d012      	beq.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800be52:	e070      	b.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be54:	4b50      	ldr	r3, [pc, #320]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be60:	d107      	bne.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be66:	4618      	mov	r0, r3
 800be68:	f000 fec0 	bl	800cbec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be70:	e3f1      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be76:	e3ee      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be78:	4b47      	ldr	r3, [pc, #284]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be84:	d107      	bne.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be86:	f107 0318 	add.w	r3, r7, #24
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 fc06 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be94:	e3df      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800be96:	2300      	movs	r3, #0
 800be98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be9a:	e3dc      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be9c:	4b3e      	ldr	r3, [pc, #248]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bea8:	d107      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beaa:	f107 030c 	add.w	r3, r7, #12
 800beae:	4618      	mov	r0, r3
 800beb0:	f000 fd48 	bl	800c944 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800beb8:	e3cd      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bebe:	e3ca      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bec0:	4b35      	ldr	r3, [pc, #212]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bec8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800beca:	4b33      	ldr	r3, [pc, #204]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 0304 	and.w	r3, r3, #4
 800bed2:	2b04      	cmp	r3, #4
 800bed4:	d10c      	bne.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800bed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d109      	bne.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bedc:	4b2e      	ldr	r3, [pc, #184]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	08db      	lsrs	r3, r3, #3
 800bee2:	f003 0303 	and.w	r3, r3, #3
 800bee6:	4a2d      	ldr	r2, [pc, #180]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800bee8:	fa22 f303 	lsr.w	r3, r2, r3
 800beec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beee:	e01e      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bef0:	4b29      	ldr	r3, [pc, #164]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800befc:	d106      	bne.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800befe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf04:	d102      	bne.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bf06:	4b26      	ldr	r3, [pc, #152]	; (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800bf08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf0a:	e010      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf0c:	4b22      	ldr	r3, [pc, #136]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf18:	d106      	bne.n	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800bf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf20:	d102      	bne.n	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bf22:	4b20      	ldr	r3, [pc, #128]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800bf24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf26:	e002      	b.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bf2c:	e393      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf2e:	e392      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bf30:	4b1d      	ldr	r3, [pc, #116]	; (800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf34:	e38f      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf3a:	e38c      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf42:	f040 80a7 	bne.w	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800bf46:	4b14      	ldr	r3, [pc, #80]	; (800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf4a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bf4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf56:	d05f      	beq.n	800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf5e:	f200 8096 	bhi.w	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bf68:	f000 808e 	beq.w	800c088 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bf72:	f200 808c 	bhi.w	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf7c:	d03a      	beq.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf84:	f200 8083 	bhi.w	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00e      	beq.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf94:	d01c      	beq.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800bf96:	e07a      	b.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800bf98:	58024400 	.word	0x58024400
 800bf9c:	03d09000 	.word	0x03d09000
 800bfa0:	003d0900 	.word	0x003d0900
 800bfa4:	017d7840 	.word	0x017d7840
 800bfa8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfac:	4baa      	ldr	r3, [pc, #680]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfb8:	d107      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 fe14 	bl	800cbec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bfc8:	e345      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfce:	e342      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfd0:	4ba1      	ldr	r3, [pc, #644]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfdc:	d107      	bne.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfde:	f107 0318 	add.w	r3, r7, #24
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 fb5a 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bfec:	e333      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bff2:	e330      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bff4:	4b98      	ldr	r3, [pc, #608]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c000:	d107      	bne.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c002:	f107 030c 	add.w	r3, r7, #12
 800c006:	4618      	mov	r0, r3
 800c008:	f000 fc9c 	bl	800c944 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c010:	e321      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c016:	e31e      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c018:	4b8f      	ldr	r3, [pc, #572]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c01a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c01c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c020:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c022:	4b8d      	ldr	r3, [pc, #564]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f003 0304 	and.w	r3, r3, #4
 800c02a:	2b04      	cmp	r3, #4
 800c02c:	d10c      	bne.n	800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800c02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c030:	2b00      	cmp	r3, #0
 800c032:	d109      	bne.n	800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c034:	4b88      	ldr	r3, [pc, #544]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	08db      	lsrs	r3, r3, #3
 800c03a:	f003 0303 	and.w	r3, r3, #3
 800c03e:	4a87      	ldr	r2, [pc, #540]	; (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c040:	fa22 f303 	lsr.w	r3, r2, r3
 800c044:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c046:	e01e      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c048:	4b83      	ldr	r3, [pc, #524]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c054:	d106      	bne.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800c056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c05c:	d102      	bne.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c05e:	4b80      	ldr	r3, [pc, #512]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c060:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c062:	e010      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c064:	4b7c      	ldr	r3, [pc, #496]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c06c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c070:	d106      	bne.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800c072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c078:	d102      	bne.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c07a:	4b7a      	ldr	r3, [pc, #488]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c07c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c07e:	e002      	b.n	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c084:	e2e7      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c086:	e2e6      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c088:	4b77      	ldr	r3, [pc, #476]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800c08a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c08c:	e2e3      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c08e:	2300      	movs	r3, #0
 800c090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c092:	e2e0      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c09a:	f040 809c 	bne.w	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800c09e:	4b6e      	ldr	r3, [pc, #440]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0a2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c0a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0ae:	d054      	beq.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800c0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0b6:	f200 808b 	bhi.w	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c0c0:	f000 8083 	beq.w	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c0ca:	f200 8081 	bhi.w	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0d4:	d02f      	beq.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0dc:	d878      	bhi.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d004      	beq.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c0ea:	d012      	beq.n	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800c0ec:	e070      	b.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0ee:	4b5a      	ldr	r3, [pc, #360]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0fa:	d107      	bne.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c100:	4618      	mov	r0, r3
 800c102:	f000 fd73 	bl	800cbec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c108:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c10a:	e2a4      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c110:	e2a1      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c112:	4b51      	ldr	r3, [pc, #324]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c11a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c11e:	d107      	bne.n	800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c120:	f107 0318 	add.w	r3, r7, #24
 800c124:	4618      	mov	r0, r3
 800c126:	f000 fab9 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800c12e:	e292      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c134:	e28f      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c136:	4b48      	ldr	r3, [pc, #288]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c13e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c142:	d107      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c144:	f107 030c 	add.w	r3, r7, #12
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 fbfb 	bl	800c944 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c152:	e280      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c154:	2300      	movs	r3, #0
 800c156:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c158:	e27d      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c15a:	4b3f      	ldr	r3, [pc, #252]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c15e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c162:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c164:	4b3c      	ldr	r3, [pc, #240]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f003 0304 	and.w	r3, r3, #4
 800c16c:	2b04      	cmp	r3, #4
 800c16e:	d10c      	bne.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800c170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c172:	2b00      	cmp	r3, #0
 800c174:	d109      	bne.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c176:	4b38      	ldr	r3, [pc, #224]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	08db      	lsrs	r3, r3, #3
 800c17c:	f003 0303 	and.w	r3, r3, #3
 800c180:	4a36      	ldr	r2, [pc, #216]	; (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c182:	fa22 f303 	lsr.w	r3, r2, r3
 800c186:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c188:	e01e      	b.n	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c18a:	4b33      	ldr	r3, [pc, #204]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c196:	d106      	bne.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800c198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c19e:	d102      	bne.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c1a0:	4b2f      	ldr	r3, [pc, #188]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1a4:	e010      	b.n	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1a6:	4b2c      	ldr	r3, [pc, #176]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1b2:	d106      	bne.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800c1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1ba:	d102      	bne.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c1bc:	4b29      	ldr	r3, [pc, #164]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c0:	e002      	b.n	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c1c6:	e246      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1c8:	e245      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c1ca:	4b27      	ldr	r3, [pc, #156]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800c1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1ce:	e242      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1d4:	e23f      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1dc:	f040 80a8 	bne.w	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800c1e0:	4b1d      	ldr	r3, [pc, #116]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c1e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1e4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c1e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1f0:	d060      	beq.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800c1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1f8:	f200 8097 	bhi.w	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c202:	f000 808f 	beq.w	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800c206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c208:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c20c:	f200 808d 	bhi.w	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c216:	d03b      	beq.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c21e:	f200 8084 	bhi.w	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c224:	2b00      	cmp	r3, #0
 800c226:	d004      	beq.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800c228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c22e:	d01d      	beq.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800c230:	e07b      	b.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c232:	4b09      	ldr	r3, [pc, #36]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c23a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c23e:	d107      	bne.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c244:	4618      	mov	r0, r3
 800c246:	f000 fcd1 	bl	800cbec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c24e:	e202      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c250:	2300      	movs	r3, #0
 800c252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c254:	e1ff      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c256:	bf00      	nop
 800c258:	58024400 	.word	0x58024400
 800c25c:	03d09000 	.word	0x03d09000
 800c260:	003d0900 	.word	0x003d0900
 800c264:	017d7840 	.word	0x017d7840
 800c268:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c26c:	4ba3      	ldr	r3, [pc, #652]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c278:	d107      	bne.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c27a:	f107 0318 	add.w	r3, r7, #24
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 fa0c 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c288:	e1e5      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c28e:	e1e2      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c290:	4b9a      	ldr	r3, [pc, #616]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c29c:	d107      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c29e:	f107 030c 	add.w	r3, r7, #12
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 fb4e 	bl	800c944 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c2ac:	e1d3      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c2b2:	e1d0      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c2b4:	4b91      	ldr	r3, [pc, #580]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2bc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2be:	4b8f      	ldr	r3, [pc, #572]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0304 	and.w	r3, r3, #4
 800c2c6:	2b04      	cmp	r3, #4
 800c2c8:	d10c      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800c2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d109      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c2d0:	4b8a      	ldr	r3, [pc, #552]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	08db      	lsrs	r3, r3, #3
 800c2d6:	f003 0303 	and.w	r3, r3, #3
 800c2da:	4a89      	ldr	r2, [pc, #548]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2e2:	e01e      	b.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2e4:	4b85      	ldr	r3, [pc, #532]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2f0:	d106      	bne.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800c2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2f8:	d102      	bne.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c2fa:	4b82      	ldr	r3, [pc, #520]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2fe:	e010      	b.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c300:	4b7e      	ldr	r3, [pc, #504]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c30c:	d106      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c314:	d102      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c316:	4b7c      	ldr	r3, [pc, #496]	; (800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c31a:	e002      	b.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c320:	e199      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c322:	e198      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c324:	4b79      	ldr	r3, [pc, #484]	; (800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c328:	e195      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c32e:	e192      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c336:	d173      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800c338:	4b70      	ldr	r3, [pc, #448]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c33a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c340:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c348:	d02f      	beq.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800c34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c350:	d863      	bhi.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800c352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c354:	2b00      	cmp	r3, #0
 800c356:	d004      	beq.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800c358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c35e:	d012      	beq.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800c360:	e05b      	b.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c362:	4b66      	ldr	r3, [pc, #408]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c36a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c36e:	d107      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c370:	f107 0318 	add.w	r3, r7, #24
 800c374:	4618      	mov	r0, r3
 800c376:	f000 f991 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c37e:	e16a      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c384:	e167      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c386:	4b5d      	ldr	r3, [pc, #372]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c38e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c392:	d107      	bne.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c394:	f107 030c 	add.w	r3, r7, #12
 800c398:	4618      	mov	r0, r3
 800c39a:	f000 fad3 	bl	800c944 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c3a2:	e158      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3a8:	e155      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c3aa:	4b54      	ldr	r3, [pc, #336]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3b2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3b4:	4b51      	ldr	r3, [pc, #324]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 0304 	and.w	r3, r3, #4
 800c3bc:	2b04      	cmp	r3, #4
 800c3be:	d10c      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d109      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c3c6:	4b4d      	ldr	r3, [pc, #308]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	08db      	lsrs	r3, r3, #3
 800c3cc:	f003 0303 	and.w	r3, r3, #3
 800c3d0:	4a4b      	ldr	r2, [pc, #300]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c3d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3d8:	e01e      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3da:	4b48      	ldr	r3, [pc, #288]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3e6:	d106      	bne.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800c3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3ee:	d102      	bne.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c3f0:	4b44      	ldr	r3, [pc, #272]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3f4:	e010      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3f6:	4b41      	ldr	r3, [pc, #260]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c402:	d106      	bne.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800c404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c40a:	d102      	bne.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c40c:	4b3e      	ldr	r3, [pc, #248]	; (800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c410:	e002      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c416:	e11e      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c418:	e11d      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c41e:	e11a      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c426:	d133      	bne.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800c428:	4b34      	ldr	r3, [pc, #208]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c42a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c42c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c430:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c434:	2b00      	cmp	r3, #0
 800c436:	d004      	beq.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c43e:	d012      	beq.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800c440:	e023      	b.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c442:	4b2e      	ldr	r3, [pc, #184]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c44a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c44e:	d107      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c454:	4618      	mov	r0, r3
 800c456:	f000 fbc9 	bl	800cbec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c45e:	e0fa      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c464:	e0f7      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c466:	4b25      	ldr	r3, [pc, #148]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c46e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c472:	d107      	bne.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c474:	f107 0318 	add.w	r3, r7, #24
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 f90f 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c47e:	6a3b      	ldr	r3, [r7, #32]
 800c480:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c482:	e0e8      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c488:	e0e5      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c48e:	e0e2      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c496:	f040 808f 	bne.w	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800c49a:	4b18      	ldr	r3, [pc, #96]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c49e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c4a2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4aa:	d075      	beq.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4b2:	d87e      	bhi.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4ba:	d060      	beq.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800c4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4c2:	d876      	bhi.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c4ca:	d045      	beq.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c4d2:	d86e      	bhi.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4da:	d02b      	beq.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e2:	d866      	bhi.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d004      	beq.n	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4f0:	d00e      	beq.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800c4f2:	e05e      	b.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c4f4:	f000 f8bc 	bl	800c670 <HAL_RCCEx_GetD3PCLK1Freq>
 800c4f8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800c4fa:	e0ac      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4fc:	58024400 	.word	0x58024400
 800c500:	03d09000 	.word	0x03d09000
 800c504:	003d0900 	.word	0x003d0900
 800c508:	017d7840 	.word	0x017d7840
 800c50c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c510:	4b53      	ldr	r3, [pc, #332]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c51c:	d107      	bne.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c51e:	f107 0318 	add.w	r3, r7, #24
 800c522:	4618      	mov	r0, r3
 800c524:	f000 f8ba 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c52c:	e093      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c532:	e090      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c534:	4b4a      	ldr	r3, [pc, #296]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c53c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c540:	d107      	bne.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c542:	f107 030c 	add.w	r3, r7, #12
 800c546:	4618      	mov	r0, r3
 800c548:	f000 f9fc 	bl	800c944 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c550:	e081      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c552:	2300      	movs	r3, #0
 800c554:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c556:	e07e      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c558:	4b41      	ldr	r3, [pc, #260]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 0304 	and.w	r3, r3, #4
 800c560:	2b04      	cmp	r3, #4
 800c562:	d109      	bne.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c564:	4b3e      	ldr	r3, [pc, #248]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	08db      	lsrs	r3, r3, #3
 800c56a:	f003 0303 	and.w	r3, r3, #3
 800c56e:	4a3d      	ldr	r2, [pc, #244]	; (800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c570:	fa22 f303 	lsr.w	r3, r2, r3
 800c574:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c576:	e06e      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c578:	2300      	movs	r3, #0
 800c57a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c57c:	e06b      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c57e:	4b38      	ldr	r3, [pc, #224]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c58a:	d102      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800c58c:	4b36      	ldr	r3, [pc, #216]	; (800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c590:	e061      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c596:	e05e      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c598:	4b31      	ldr	r3, [pc, #196]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5a4:	d102      	bne.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800c5a6:	4b31      	ldr	r3, [pc, #196]	; (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c5aa:	e054      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c5b0:	e051      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c5b6:	e04e      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5be:	d148      	bne.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800c5c0:	4b27      	ldr	r3, [pc, #156]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5d0:	d02a      	beq.n	800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5d8:	d838      	bhi.n	800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d004      	beq.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5e6:	d00d      	beq.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c5e8:	e030      	b.n	800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5ea:	4b1d      	ldr	r3, [pc, #116]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5f6:	d102      	bne.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800c5f8:	4b1c      	ldr	r3, [pc, #112]	; (800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c5fc:	e02b      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c602:	e028      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c604:	4b16      	ldr	r3, [pc, #88]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c60c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c610:	d107      	bne.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c616:	4618      	mov	r0, r3
 800c618:	f000 fae8 	bl	800cbec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c620:	e019      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c622:	2300      	movs	r3, #0
 800c624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c626:	e016      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c628:	4b0d      	ldr	r3, [pc, #52]	; (800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c634:	d107      	bne.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c636:	f107 0318 	add.w	r3, r7, #24
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 f82e 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c644:	e007      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c64a:	e004      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c650:	e001      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3740      	adds	r7, #64	; 0x40
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	58024400 	.word	0x58024400
 800c664:	03d09000 	.word	0x03d09000
 800c668:	003d0900 	.word	0x003d0900
 800c66c:	017d7840 	.word	0x017d7840

0800c670 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c674:	f7fe fb4c 	bl	800ad10 <HAL_RCC_GetHCLKFreq>
 800c678:	4602      	mov	r2, r0
 800c67a:	4b06      	ldr	r3, [pc, #24]	; (800c694 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c67c:	6a1b      	ldr	r3, [r3, #32]
 800c67e:	091b      	lsrs	r3, r3, #4
 800c680:	f003 0307 	and.w	r3, r3, #7
 800c684:	4904      	ldr	r1, [pc, #16]	; (800c698 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c686:	5ccb      	ldrb	r3, [r1, r3]
 800c688:	f003 031f 	and.w	r3, r3, #31
 800c68c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c690:	4618      	mov	r0, r3
 800c692:	bd80      	pop	{r7, pc}
 800c694:	58024400 	.word	0x58024400
 800c698:	080184b0 	.word	0x080184b0

0800c69c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b089      	sub	sp, #36	; 0x24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6a4:	4ba1      	ldr	r3, [pc, #644]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a8:	f003 0303 	and.w	r3, r3, #3
 800c6ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c6ae:	4b9f      	ldr	r3, [pc, #636]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b2:	0b1b      	lsrs	r3, r3, #12
 800c6b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c6ba:	4b9c      	ldr	r3, [pc, #624]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6be:	091b      	lsrs	r3, r3, #4
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c6c6:	4b99      	ldr	r3, [pc, #612]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ca:	08db      	lsrs	r3, r3, #3
 800c6cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	fb02 f303 	mul.w	r3, r2, r3
 800c6d6:	ee07 3a90 	vmov	s15, r3
 800c6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 8111 	beq.w	800c90c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	f000 8083 	beq.w	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	f200 80a1 	bhi.w	800c83c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d003      	beq.n	800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d056      	beq.n	800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c706:	e099      	b.n	800c83c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c708:	4b88      	ldr	r3, [pc, #544]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 0320 	and.w	r3, r3, #32
 800c710:	2b00      	cmp	r3, #0
 800c712:	d02d      	beq.n	800c770 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c714:	4b85      	ldr	r3, [pc, #532]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	08db      	lsrs	r3, r3, #3
 800c71a:	f003 0303 	and.w	r3, r3, #3
 800c71e:	4a84      	ldr	r2, [pc, #528]	; (800c930 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c720:	fa22 f303 	lsr.w	r3, r2, r3
 800c724:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	ee07 3a90 	vmov	s15, r3
 800c72c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	ee07 3a90 	vmov	s15, r3
 800c736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c73e:	4b7b      	ldr	r3, [pc, #492]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c74e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c752:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c75e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c76a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c76e:	e087      	b.n	800c880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	ee07 3a90 	vmov	s15, r3
 800c776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c77a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c938 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c782:	4b6a      	ldr	r3, [pc, #424]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c78a:	ee07 3a90 	vmov	s15, r3
 800c78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c792:	ed97 6a03 	vldr	s12, [r7, #12]
 800c796:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7b2:	e065      	b.n	800c880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	ee07 3a90 	vmov	s15, r3
 800c7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7c6:	4b59      	ldr	r3, [pc, #356]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ce:	ee07 3a90 	vmov	s15, r3
 800c7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7f6:	e043      	b.n	800c880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	ee07 3a90 	vmov	s15, r3
 800c7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c802:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c80a:	4b48      	ldr	r3, [pc, #288]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c812:	ee07 3a90 	vmov	s15, r3
 800c816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c81a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c81e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c82a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c836:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c83a:	e021      	b.n	800c880 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	ee07 3a90 	vmov	s15, r3
 800c842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c846:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c93c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c84e:	4b37      	ldr	r3, [pc, #220]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c85e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c862:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c934 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c87a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c87e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c880:	4b2a      	ldr	r3, [pc, #168]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c884:	0a5b      	lsrs	r3, r3, #9
 800c886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c88a:	ee07 3a90 	vmov	s15, r3
 800c88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c89a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c89e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8a6:	ee17 2a90 	vmov	r2, s15
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c8ae:	4b1f      	ldr	r3, [pc, #124]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b2:	0c1b      	lsrs	r3, r3, #16
 800c8b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b8:	ee07 3a90 	vmov	s15, r3
 800c8bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8d4:	ee17 2a90 	vmov	r2, s15
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c8dc:	4b13      	ldr	r3, [pc, #76]	; (800c92c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e0:	0e1b      	lsrs	r3, r3, #24
 800c8e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8e6:	ee07 3a90 	vmov	s15, r3
 800c8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c902:	ee17 2a90 	vmov	r2, s15
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c90a:	e008      	b.n	800c91e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	609a      	str	r2, [r3, #8]
}
 800c91e:	bf00      	nop
 800c920:	3724      	adds	r7, #36	; 0x24
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	58024400 	.word	0x58024400
 800c930:	03d09000 	.word	0x03d09000
 800c934:	46000000 	.word	0x46000000
 800c938:	4c742400 	.word	0x4c742400
 800c93c:	4a742400 	.word	0x4a742400
 800c940:	4bbebc20 	.word	0x4bbebc20

0800c944 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c944:	b480      	push	{r7}
 800c946:	b089      	sub	sp, #36	; 0x24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c94c:	4ba1      	ldr	r3, [pc, #644]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c950:	f003 0303 	and.w	r3, r3, #3
 800c954:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c956:	4b9f      	ldr	r3, [pc, #636]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95a:	0d1b      	lsrs	r3, r3, #20
 800c95c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c960:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c962:	4b9c      	ldr	r3, [pc, #624]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c966:	0a1b      	lsrs	r3, r3, #8
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c96e:	4b99      	ldr	r3, [pc, #612]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c972:	08db      	lsrs	r3, r3, #3
 800c974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c978:	693a      	ldr	r2, [r7, #16]
 800c97a:	fb02 f303 	mul.w	r3, r2, r3
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c986:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 8111 	beq.w	800cbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	2b02      	cmp	r3, #2
 800c996:	f000 8083 	beq.w	800caa0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	f200 80a1 	bhi.w	800cae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d003      	beq.n	800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d056      	beq.n	800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c9ae:	e099      	b.n	800cae4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9b0:	4b88      	ldr	r3, [pc, #544]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 0320 	and.w	r3, r3, #32
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d02d      	beq.n	800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c9bc:	4b85      	ldr	r3, [pc, #532]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	08db      	lsrs	r3, r3, #3
 800c9c2:	f003 0303 	and.w	r3, r3, #3
 800c9c6:	4a84      	ldr	r2, [pc, #528]	; (800cbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c9c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	ee07 3a90 	vmov	s15, r3
 800c9d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	ee07 3a90 	vmov	s15, r3
 800c9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9e6:	4b7b      	ldr	r3, [pc, #492]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ca16:	e087      	b.n	800cb28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ca26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca2a:	4b6a      	ldr	r3, [pc, #424]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca5a:	e065      	b.n	800cb28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca6e:	4b59      	ldr	r3, [pc, #356]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca76:	ee07 3a90 	vmov	s15, r3
 800ca7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca82:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca9e:	e043      	b.n	800cb28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	ee07 3a90 	vmov	s15, r3
 800caa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cbe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800caae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cab2:	4b48      	ldr	r3, [pc, #288]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caba:	ee07 3a90 	vmov	s15, r3
 800cabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cac2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cac6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cade:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cae2:	e021      	b.n	800cb28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	ee07 3a90 	vmov	s15, r3
 800caea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800caf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caf6:	4b37      	ldr	r3, [pc, #220]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cafe:	ee07 3a90 	vmov	s15, r3
 800cb02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cbdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800cb28:	4b2a      	ldr	r3, [pc, #168]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb2c:	0a5b      	lsrs	r3, r3, #9
 800cb2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb32:	ee07 3a90 	vmov	s15, r3
 800cb36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb42:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb4e:	ee17 2a90 	vmov	r2, s15
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800cb56:	4b1f      	ldr	r3, [pc, #124]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5a:	0c1b      	lsrs	r3, r3, #16
 800cb5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb60:	ee07 3a90 	vmov	s15, r3
 800cb64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb70:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb7c:	ee17 2a90 	vmov	r2, s15
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cb84:	4b13      	ldr	r3, [pc, #76]	; (800cbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb88:	0e1b      	lsrs	r3, r3, #24
 800cb8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb8e:	ee07 3a90 	vmov	s15, r3
 800cb92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbaa:	ee17 2a90 	vmov	r2, s15
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cbb2:	e008      	b.n	800cbc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	609a      	str	r2, [r3, #8]
}
 800cbc6:	bf00      	nop
 800cbc8:	3724      	adds	r7, #36	; 0x24
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	58024400 	.word	0x58024400
 800cbd8:	03d09000 	.word	0x03d09000
 800cbdc:	46000000 	.word	0x46000000
 800cbe0:	4c742400 	.word	0x4c742400
 800cbe4:	4a742400 	.word	0x4a742400
 800cbe8:	4bbebc20 	.word	0x4bbebc20

0800cbec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b089      	sub	sp, #36	; 0x24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cbf4:	4ba0      	ldr	r3, [pc, #640]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbf8:	f003 0303 	and.w	r3, r3, #3
 800cbfc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800cbfe:	4b9e      	ldr	r3, [pc, #632]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc02:	091b      	lsrs	r3, r3, #4
 800cc04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc08:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cc0a:	4b9b      	ldr	r3, [pc, #620]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0e:	f003 0301 	and.w	r3, r3, #1
 800cc12:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800cc14:	4b98      	ldr	r3, [pc, #608]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc18:	08db      	lsrs	r3, r3, #3
 800cc1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc1e:	693a      	ldr	r2, [r7, #16]
 800cc20:	fb02 f303 	mul.w	r3, r2, r3
 800cc24:	ee07 3a90 	vmov	s15, r3
 800cc28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f000 8111 	beq.w	800ce5a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	f000 8083 	beq.w	800cd46 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	f200 80a1 	bhi.w	800cd8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d003      	beq.n	800cc56 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d056      	beq.n	800cd02 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cc54:	e099      	b.n	800cd8a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc56:	4b88      	ldr	r3, [pc, #544]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f003 0320 	and.w	r3, r3, #32
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d02d      	beq.n	800ccbe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cc62:	4b85      	ldr	r3, [pc, #532]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	08db      	lsrs	r3, r3, #3
 800cc68:	f003 0303 	and.w	r3, r3, #3
 800cc6c:	4a83      	ldr	r2, [pc, #524]	; (800ce7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cc6e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc72:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	ee07 3a90 	vmov	s15, r3
 800cc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	ee07 3a90 	vmov	s15, r3
 800cc84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc8c:	4b7a      	ldr	r3, [pc, #488]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cca0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ce80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccb8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ccbc:	e087      	b.n	800cdce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	ee07 3a90 	vmov	s15, r3
 800ccc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccc8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ce84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccd0:	4b69      	ldr	r3, [pc, #420]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccd8:	ee07 3a90 	vmov	s15, r3
 800ccdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cce0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cce4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ce80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd00:	e065      	b.n	800cdce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	ee07 3a90 	vmov	s15, r3
 800cd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ce88 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cd10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd14:	4b58      	ldr	r3, [pc, #352]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd1c:	ee07 3a90 	vmov	s15, r3
 800cd20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd24:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd28:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ce80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd44:	e043      	b.n	800cdce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	ee07 3a90 	vmov	s15, r3
 800cd4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd50:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ce8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cd54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd58:	4b47      	ldr	r3, [pc, #284]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd60:	ee07 3a90 	vmov	s15, r3
 800cd64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd68:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd6c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ce80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd88:	e021      	b.n	800cdce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	ee07 3a90 	vmov	s15, r3
 800cd90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd94:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ce84 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cd98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd9c:	4b36      	ldr	r3, [pc, #216]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda4:	ee07 3a90 	vmov	s15, r3
 800cda8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdac:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdb0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ce80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cdb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cdcc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800cdce:	4b2a      	ldr	r3, [pc, #168]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd2:	0a5b      	lsrs	r3, r3, #9
 800cdd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdd8:	ee07 3a90 	vmov	s15, r3
 800cddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cde0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cde4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cde8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdf4:	ee17 2a90 	vmov	r2, s15
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800cdfc:	4b1e      	ldr	r3, [pc, #120]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce00:	0c1b      	lsrs	r3, r3, #16
 800ce02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce06:	ee07 3a90 	vmov	s15, r3
 800ce0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce16:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce22:	ee17 2a90 	vmov	r2, s15
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800ce2a:	4b13      	ldr	r3, [pc, #76]	; (800ce78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2e:	0e1b      	lsrs	r3, r3, #24
 800ce30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce34:	ee07 3a90 	vmov	s15, r3
 800ce38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce44:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce50:	ee17 2a90 	vmov	r2, s15
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ce58:	e008      	b.n	800ce6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	609a      	str	r2, [r3, #8]
}
 800ce6c:	bf00      	nop
 800ce6e:	3724      	adds	r7, #36	; 0x24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	58024400 	.word	0x58024400
 800ce7c:	03d09000 	.word	0x03d09000
 800ce80:	46000000 	.word	0x46000000
 800ce84:	4c742400 	.word	0x4c742400
 800ce88:	4a742400 	.word	0x4a742400
 800ce8c:	4bbebc20 	.word	0x4bbebc20

0800ce90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce9e:	4b53      	ldr	r3, [pc, #332]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea2:	f003 0303 	and.w	r3, r3, #3
 800cea6:	2b03      	cmp	r3, #3
 800cea8:	d101      	bne.n	800ceae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e099      	b.n	800cfe2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ceae:	4b4f      	ldr	r3, [pc, #316]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a4e      	ldr	r2, [pc, #312]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800ceb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ceb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceba:	f7f8 fed1 	bl	8005c60 <HAL_GetTick>
 800cebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cec0:	e008      	b.n	800ced4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cec2:	f7f8 fecd 	bl	8005c60 <HAL_GetTick>
 800cec6:	4602      	mov	r2, r0
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	2b02      	cmp	r3, #2
 800cece:	d901      	bls.n	800ced4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ced0:	2303      	movs	r3, #3
 800ced2:	e086      	b.n	800cfe2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ced4:	4b45      	ldr	r3, [pc, #276]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1f0      	bne.n	800cec2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cee0:	4b42      	ldr	r3, [pc, #264]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	031b      	lsls	r3, r3, #12
 800ceee:	493f      	ldr	r1, [pc, #252]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cef0:	4313      	orrs	r3, r2
 800cef2:	628b      	str	r3, [r1, #40]	; 0x28
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	3b01      	subs	r3, #1
 800cf04:	025b      	lsls	r3, r3, #9
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	431a      	orrs	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	041b      	lsls	r3, r3, #16
 800cf12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf16:	431a      	orrs	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	691b      	ldr	r3, [r3, #16]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	061b      	lsls	r3, r3, #24
 800cf20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf24:	4931      	ldr	r1, [pc, #196]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf26:	4313      	orrs	r3, r2
 800cf28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cf2a:	4b30      	ldr	r3, [pc, #192]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	695b      	ldr	r3, [r3, #20]
 800cf36:	492d      	ldr	r1, [pc, #180]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cf3c:	4b2b      	ldr	r3, [pc, #172]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf40:	f023 0220 	bic.w	r2, r3, #32
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	699b      	ldr	r3, [r3, #24]
 800cf48:	4928      	ldr	r1, [pc, #160]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cf4e:	4b27      	ldr	r3, [pc, #156]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf52:	4a26      	ldr	r2, [pc, #152]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf54:	f023 0310 	bic.w	r3, r3, #16
 800cf58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf5a:	4b24      	ldr	r3, [pc, #144]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf5e:	4b24      	ldr	r3, [pc, #144]	; (800cff0 <RCCEx_PLL2_Config+0x160>)
 800cf60:	4013      	ands	r3, r2
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	69d2      	ldr	r2, [r2, #28]
 800cf66:	00d2      	lsls	r2, r2, #3
 800cf68:	4920      	ldr	r1, [pc, #128]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf6e:	4b1f      	ldr	r3, [pc, #124]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf72:	4a1e      	ldr	r2, [pc, #120]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf74:	f043 0310 	orr.w	r3, r3, #16
 800cf78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d106      	bne.n	800cf8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf80:	4b1a      	ldr	r3, [pc, #104]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf84:	4a19      	ldr	r2, [pc, #100]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf8c:	e00f      	b.n	800cfae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d106      	bne.n	800cfa2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf94:	4b15      	ldr	r3, [pc, #84]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf98:	4a14      	ldr	r2, [pc, #80]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cf9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfa0:	e005      	b.n	800cfae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cfa2:	4b12      	ldr	r3, [pc, #72]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa6:	4a11      	ldr	r2, [pc, #68]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cfa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cfac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cfae:	4b0f      	ldr	r3, [pc, #60]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a0e      	ldr	r2, [pc, #56]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cfb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cfb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfba:	f7f8 fe51 	bl	8005c60 <HAL_GetTick>
 800cfbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cfc0:	e008      	b.n	800cfd4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cfc2:	f7f8 fe4d 	bl	8005c60 <HAL_GetTick>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d901      	bls.n	800cfd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	e006      	b.n	800cfe2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cfd4:	4b05      	ldr	r3, [pc, #20]	; (800cfec <RCCEx_PLL2_Config+0x15c>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d0f0      	beq.n	800cfc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	58024400 	.word	0x58024400
 800cff0:	ffff0007 	.word	0xffff0007

0800cff4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d002:	4b53      	ldr	r3, [pc, #332]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d006:	f003 0303 	and.w	r3, r3, #3
 800d00a:	2b03      	cmp	r3, #3
 800d00c:	d101      	bne.n	800d012 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d00e:	2301      	movs	r3, #1
 800d010:	e099      	b.n	800d146 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d012:	4b4f      	ldr	r3, [pc, #316]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a4e      	ldr	r2, [pc, #312]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d01c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d01e:	f7f8 fe1f 	bl	8005c60 <HAL_GetTick>
 800d022:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d024:	e008      	b.n	800d038 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d026:	f7f8 fe1b 	bl	8005c60 <HAL_GetTick>
 800d02a:	4602      	mov	r2, r0
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	2b02      	cmp	r3, #2
 800d032:	d901      	bls.n	800d038 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d034:	2303      	movs	r3, #3
 800d036:	e086      	b.n	800d146 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d038:	4b45      	ldr	r3, [pc, #276]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1f0      	bne.n	800d026 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d044:	4b42      	ldr	r3, [pc, #264]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d048:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	051b      	lsls	r3, r3, #20
 800d052:	493f      	ldr	r1, [pc, #252]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d054:	4313      	orrs	r3, r2
 800d056:	628b      	str	r3, [r1, #40]	; 0x28
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	3b01      	subs	r3, #1
 800d05e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	3b01      	subs	r3, #1
 800d068:	025b      	lsls	r3, r3, #9
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	431a      	orrs	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	3b01      	subs	r3, #1
 800d074:	041b      	lsls	r3, r3, #16
 800d076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d07a:	431a      	orrs	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	3b01      	subs	r3, #1
 800d082:	061b      	lsls	r3, r3, #24
 800d084:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d088:	4931      	ldr	r1, [pc, #196]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d08a:	4313      	orrs	r3, r2
 800d08c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d08e:	4b30      	ldr	r3, [pc, #192]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d092:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	492d      	ldr	r1, [pc, #180]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d09c:	4313      	orrs	r3, r2
 800d09e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d0a0:	4b2b      	ldr	r3, [pc, #172]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	699b      	ldr	r3, [r3, #24]
 800d0ac:	4928      	ldr	r1, [pc, #160]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d0b2:	4b27      	ldr	r3, [pc, #156]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b6:	4a26      	ldr	r2, [pc, #152]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d0be:	4b24      	ldr	r3, [pc, #144]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0c2:	4b24      	ldr	r3, [pc, #144]	; (800d154 <RCCEx_PLL3_Config+0x160>)
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	69d2      	ldr	r2, [r2, #28]
 800d0ca:	00d2      	lsls	r2, r2, #3
 800d0cc:	4920      	ldr	r1, [pc, #128]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d0d2:	4b1f      	ldr	r3, [pc, #124]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d6:	4a1e      	ldr	r2, [pc, #120]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d106      	bne.n	800d0f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d0e4:	4b1a      	ldr	r3, [pc, #104]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e8:	4a19      	ldr	r2, [pc, #100]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d0ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0f0:	e00f      	b.n	800d112 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d106      	bne.n	800d106 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d0f8:	4b15      	ldr	r3, [pc, #84]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fc:	4a14      	ldr	r2, [pc, #80]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d0fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d102:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d104:	e005      	b.n	800d112 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d106:	4b12      	ldr	r3, [pc, #72]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10a:	4a11      	ldr	r2, [pc, #68]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d10c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d110:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d112:	4b0f      	ldr	r3, [pc, #60]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4a0e      	ldr	r2, [pc, #56]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d11c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d11e:	f7f8 fd9f 	bl	8005c60 <HAL_GetTick>
 800d122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d124:	e008      	b.n	800d138 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d126:	f7f8 fd9b 	bl	8005c60 <HAL_GetTick>
 800d12a:	4602      	mov	r2, r0
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	2b02      	cmp	r3, #2
 800d132:	d901      	bls.n	800d138 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d134:	2303      	movs	r3, #3
 800d136:	e006      	b.n	800d146 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d138:	4b05      	ldr	r3, [pc, #20]	; (800d150 <RCCEx_PLL3_Config+0x15c>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d0f0      	beq.n	800d126 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d144:	7bfb      	ldrb	r3, [r7, #15]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	58024400 	.word	0x58024400
 800d154:	ffff0007 	.word	0xffff0007

0800d158 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d067      	beq.n	800d23a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	d106      	bne.n	800d184 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7f5 fb42 	bl	8002808 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2202      	movs	r2, #2
 800d188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	22ca      	movs	r2, #202	; 0xca
 800d192:	625a      	str	r2, [r3, #36]	; 0x24
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2253      	movs	r2, #83	; 0x53
 800d19a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 fa49 	bl	800d634 <RTC_EnterInitMode>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800d1a6:	7bfb      	ldrb	r3, [r7, #15]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d13b      	bne.n	800d224 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6899      	ldr	r1, [r3, #8]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	4b23      	ldr	r3, [pc, #140]	; (800d244 <HAL_RTC_Init+0xec>)
 800d1b8:	400b      	ands	r3, r1
 800d1ba:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6899      	ldr	r1, [r3, #8]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	691b      	ldr	r3, [r3, #16]
 800d1ca:	431a      	orrs	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	699b      	ldr	r3, [r3, #24]
 800d1d0:	431a      	orrs	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	430a      	orrs	r2, r1
 800d1d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	0419      	lsls	r1, r3, #16
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68da      	ldr	r2, [r3, #12]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	430a      	orrs	r2, r1
 800d1ea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 fa51 	bl	800d694 <RTC_ExitInitMode>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d113      	bne.n	800d224 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f022 0203 	bic.w	r2, r2, #3
 800d20a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	69da      	ldr	r2, [r3, #28]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	695b      	ldr	r3, [r3, #20]
 800d21a:	431a      	orrs	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	430a      	orrs	r2, r1
 800d222:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	22ff      	movs	r2, #255	; 0xff
 800d22a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d103      	bne.n	800d23a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	ff8fffbf 	.word	0xff8fffbf

0800d248 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d248:	b590      	push	{r4, r7, lr}
 800d24a:	b087      	sub	sp, #28
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d101      	bne.n	800d262 <HAL_RTC_SetTime+0x1a>
 800d25e:	2302      	movs	r3, #2
 800d260:	e089      	b.n	800d376 <HAL_RTC_SetTime+0x12e>
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2201      	movs	r2, #1
 800d266:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2202      	movs	r2, #2
 800d26e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	22ca      	movs	r2, #202	; 0xca
 800d278:	625a      	str	r2, [r3, #36]	; 0x24
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2253      	movs	r2, #83	; 0x53
 800d280:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	f000 f9d6 	bl	800d634 <RTC_EnterInitMode>
 800d288:	4603      	mov	r3, r0
 800d28a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d28c:	7cfb      	ldrb	r3, [r7, #19]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d161      	bne.n	800d356 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d126      	bne.n	800d2e6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d102      	bne.n	800d2ac <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 fa2d 	bl	800d710 <RTC_ByteToBcd2>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	785b      	ldrb	r3, [r3, #1]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 fa26 	bl	800d710 <RTC_ByteToBcd2>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2c8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	789b      	ldrb	r3, [r3, #2]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 fa1e 	bl	800d710 <RTC_ByteToBcd2>
 800d2d4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d2d6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	78db      	ldrb	r3, [r3, #3]
 800d2de:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	617b      	str	r3, [r7, #20]
 800d2e4:	e018      	b.n	800d318 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d102      	bne.n	800d2fa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	785b      	ldrb	r3, [r3, #1]
 800d304:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d306:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d30c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	78db      	ldrb	r3, [r3, #3]
 800d312:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d314:	4313      	orrs	r3, r2
 800d316:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	6979      	ldr	r1, [r7, #20]
 800d31e:	4b18      	ldr	r3, [pc, #96]	; (800d380 <HAL_RTC_SetTime+0x138>)
 800d320:	400b      	ands	r3, r1
 800d322:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	689a      	ldr	r2, [r3, #8]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d332:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	6899      	ldr	r1, [r3, #8]
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	68da      	ldr	r2, [r3, #12]
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	431a      	orrs	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	430a      	orrs	r2, r1
 800d34a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d34c:	68f8      	ldr	r0, [r7, #12]
 800d34e:	f000 f9a1 	bl	800d694 <RTC_ExitInitMode>
 800d352:	4603      	mov	r3, r0
 800d354:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	22ff      	movs	r2, #255	; 0xff
 800d35c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d35e:	7cfb      	ldrb	r3, [r7, #19]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d103      	bne.n	800d36c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d374:	7cfb      	ldrb	r3, [r7, #19]
}
 800d376:	4618      	mov	r0, r3
 800d378:	371c      	adds	r7, #28
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd90      	pop	{r4, r7, pc}
 800d37e:	bf00      	nop
 800d380:	007f7f7f 	.word	0x007f7f7f

0800d384 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	4b22      	ldr	r3, [pc, #136]	; (800d438 <HAL_RTC_GetTime+0xb4>)
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	0c1b      	lsrs	r3, r3, #16
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	0a1b      	lsrs	r3, r3, #8
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	0d9b      	lsrs	r3, r3, #22
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	f003 0301 	and.w	r3, r3, #1
 800d3ec:	b2da      	uxtb	r2, r3
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d11a      	bne.n	800d42e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 f9a7 	bl	800d750 <RTC_Bcd2ToByte>
 800d402:	4603      	mov	r3, r0
 800d404:	461a      	mov	r2, r3
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	785b      	ldrb	r3, [r3, #1]
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 f99e 	bl	800d750 <RTC_Bcd2ToByte>
 800d414:	4603      	mov	r3, r0
 800d416:	461a      	mov	r2, r3
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	789b      	ldrb	r3, [r3, #2]
 800d420:	4618      	mov	r0, r3
 800d422:	f000 f995 	bl	800d750 <RTC_Bcd2ToByte>
 800d426:	4603      	mov	r3, r0
 800d428:	461a      	mov	r2, r3
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3718      	adds	r7, #24
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	007f7f7f 	.word	0x007f7f7f

0800d43c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d43c:	b590      	push	{r4, r7, lr}
 800d43e:	b087      	sub	sp, #28
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d101      	bne.n	800d456 <HAL_RTC_SetDate+0x1a>
 800d452:	2302      	movs	r3, #2
 800d454:	e073      	b.n	800d53e <HAL_RTC_SetDate+0x102>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2201      	movs	r2, #1
 800d45a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2202      	movs	r2, #2
 800d462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10e      	bne.n	800d48a <HAL_RTC_SetDate+0x4e>
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	785b      	ldrb	r3, [r3, #1]
 800d470:	f003 0310 	and.w	r3, r3, #16
 800d474:	2b00      	cmp	r3, #0
 800d476:	d008      	beq.n	800d48a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	785b      	ldrb	r3, [r3, #1]
 800d47c:	f023 0310 	bic.w	r3, r3, #16
 800d480:	b2db      	uxtb	r3, r3
 800d482:	330a      	adds	r3, #10
 800d484:	b2da      	uxtb	r2, r3
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d11c      	bne.n	800d4ca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	78db      	ldrb	r3, [r3, #3]
 800d494:	4618      	mov	r0, r3
 800d496:	f000 f93b 	bl	800d710 <RTC_ByteToBcd2>
 800d49a:	4603      	mov	r3, r0
 800d49c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	785b      	ldrb	r3, [r3, #1]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 f934 	bl	800d710 <RTC_ByteToBcd2>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d4ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	789b      	ldrb	r3, [r3, #2]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f000 f92c 	bl	800d710 <RTC_ByteToBcd2>
 800d4b8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d4ba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	617b      	str	r3, [r7, #20]
 800d4c8:	e00e      	b.n	800d4e8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	78db      	ldrb	r3, [r3, #3]
 800d4ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	785b      	ldrb	r3, [r3, #1]
 800d4d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d4d6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d4dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	22ca      	movs	r2, #202	; 0xca
 800d4ee:	625a      	str	r2, [r3, #36]	; 0x24
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2253      	movs	r2, #83	; 0x53
 800d4f6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f000 f89b 	bl	800d634 <RTC_EnterInitMode>
 800d4fe:	4603      	mov	r3, r0
 800d500:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d502:	7cfb      	ldrb	r3, [r7, #19]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10a      	bne.n	800d51e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	6979      	ldr	r1, [r7, #20]
 800d50e:	4b0e      	ldr	r3, [pc, #56]	; (800d548 <HAL_RTC_SetDate+0x10c>)
 800d510:	400b      	ands	r3, r1
 800d512:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f000 f8bd 	bl	800d694 <RTC_ExitInitMode>
 800d51a:	4603      	mov	r3, r0
 800d51c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	22ff      	movs	r2, #255	; 0xff
 800d524:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d526:	7cfb      	ldrb	r3, [r7, #19]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d103      	bne.n	800d534 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2200      	movs	r2, #0
 800d538:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d53c:	7cfb      	ldrb	r3, [r7, #19]


}
 800d53e:	4618      	mov	r0, r3
 800d540:	371c      	adds	r7, #28
 800d542:	46bd      	mov	sp, r7
 800d544:	bd90      	pop	{r4, r7, pc}
 800d546:	bf00      	nop
 800d548:	00ffff3f 	.word	0x00ffff3f

0800d54c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	685a      	ldr	r2, [r3, #4]
 800d55e:	4b21      	ldr	r3, [pc, #132]	; (800d5e4 <HAL_RTC_GetDate+0x98>)
 800d560:	4013      	ands	r3, r2
 800d562:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	0c1b      	lsrs	r3, r3, #16
 800d568:	b2da      	uxtb	r2, r3
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	0a1b      	lsrs	r3, r3, #8
 800d572:	b2db      	uxtb	r3, r3
 800d574:	f003 031f 	and.w	r3, r3, #31
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	b2db      	uxtb	r3, r3
 800d582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d586:	b2da      	uxtb	r2, r3
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	0b5b      	lsrs	r3, r3, #13
 800d590:	b2db      	uxtb	r3, r3
 800d592:	f003 0307 	and.w	r3, r3, #7
 800d596:	b2da      	uxtb	r2, r3
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d11a      	bne.n	800d5d8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	78db      	ldrb	r3, [r3, #3]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 f8d2 	bl	800d750 <RTC_Bcd2ToByte>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	785b      	ldrb	r3, [r3, #1]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f000 f8c9 	bl	800d750 <RTC_Bcd2ToByte>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	789b      	ldrb	r3, [r3, #2]
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f000 f8c0 	bl	800d750 <RTC_Bcd2ToByte>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	00ffff3f 	.word	0x00ffff3f

0800d5e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	68da      	ldr	r2, [r3, #12]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d5fe:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800d600:	f7f8 fb2e 	bl	8005c60 <HAL_GetTick>
 800d604:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d606:	e009      	b.n	800d61c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d608:	f7f8 fb2a 	bl	8005c60 <HAL_GetTick>
 800d60c:	4602      	mov	r2, r0
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d616:	d901      	bls.n	800d61c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800d618:	2303      	movs	r3, #3
 800d61a:	e007      	b.n	800d62c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	f003 0320 	and.w	r3, r3, #32
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0ee      	beq.n	800d608 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800d62a:	2300      	movs	r3, #0
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d11d      	bne.n	800d68a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f04f 32ff 	mov.w	r2, #4294967295
 800d656:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d658:	f7f8 fb02 	bl	8005c60 <HAL_GetTick>
 800d65c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d65e:	e00d      	b.n	800d67c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d660:	f7f8 fafe 	bl	8005c60 <HAL_GetTick>
 800d664:	4602      	mov	r2, r0
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	1ad3      	subs	r3, r2, r3
 800d66a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d66e:	d905      	bls.n	800d67c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d670:	2303      	movs	r3, #3
 800d672:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2203      	movs	r2, #3
 800d678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0ea      	beq.n	800d660 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d69c:	2300      	movs	r3, #0
 800d69e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800d6a0:	4b1a      	ldr	r3, [pc, #104]	; (800d70c <RTC_ExitInitMode+0x78>)
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	4a19      	ldr	r2, [pc, #100]	; (800d70c <RTC_ExitInitMode+0x78>)
 800d6a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6aa:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d6ac:	4b17      	ldr	r3, [pc, #92]	; (800d70c <RTC_ExitInitMode+0x78>)
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	f003 0320 	and.w	r3, r3, #32
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10c      	bne.n	800d6d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f7ff ff95 	bl	800d5e8 <HAL_RTC_WaitForSynchro>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d01e      	beq.n	800d702 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2203      	movs	r2, #3
 800d6c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d6cc:	2303      	movs	r3, #3
 800d6ce:	73fb      	strb	r3, [r7, #15]
 800d6d0:	e017      	b.n	800d702 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d6d2:	4b0e      	ldr	r3, [pc, #56]	; (800d70c <RTC_ExitInitMode+0x78>)
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	4a0d      	ldr	r2, [pc, #52]	; (800d70c <RTC_ExitInitMode+0x78>)
 800d6d8:	f023 0320 	bic.w	r3, r3, #32
 800d6dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff ff82 	bl	800d5e8 <HAL_RTC_WaitForSynchro>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d005      	beq.n	800d6f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2203      	movs	r2, #3
 800d6ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d6f6:	4b05      	ldr	r3, [pc, #20]	; (800d70c <RTC_ExitInitMode+0x78>)
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	4a04      	ldr	r2, [pc, #16]	; (800d70c <RTC_ExitInitMode+0x78>)
 800d6fc:	f043 0320 	orr.w	r3, r3, #32
 800d700:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d702:	7bfb      	ldrb	r3, [r7, #15]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3710      	adds	r7, #16
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	58004000 	.word	0x58004000

0800d710 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	4603      	mov	r3, r0
 800d718:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d71a:	2300      	movs	r3, #0
 800d71c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d71e:	79fb      	ldrb	r3, [r7, #7]
 800d720:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d722:	e005      	b.n	800d730 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	3301      	adds	r3, #1
 800d728:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d72a:	7afb      	ldrb	r3, [r7, #11]
 800d72c:	3b0a      	subs	r3, #10
 800d72e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d730:	7afb      	ldrb	r3, [r7, #11]
 800d732:	2b09      	cmp	r3, #9
 800d734:	d8f6      	bhi.n	800d724 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	011b      	lsls	r3, r3, #4
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	7afb      	ldrb	r3, [r7, #11]
 800d740:	4313      	orrs	r3, r2
 800d742:	b2db      	uxtb	r3, r3
}
 800d744:	4618      	mov	r0, r3
 800d746:	3714      	adds	r7, #20
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	4603      	mov	r3, r0
 800d758:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d75a:	79fb      	ldrb	r3, [r7, #7]
 800d75c:	091b      	lsrs	r3, r3, #4
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	461a      	mov	r2, r3
 800d762:	0092      	lsls	r2, r2, #2
 800d764:	4413      	add	r3, r2
 800d766:	005b      	lsls	r3, r3, #1
 800d768:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d76a:	79fb      	ldrb	r3, [r7, #7]
 800d76c:	f003 030f 	and.w	r3, r3, #15
 800d770:	b2da      	uxtb	r2, r3
 800d772:	7bfb      	ldrb	r3, [r7, #15]
 800d774:	4413      	add	r3, r2
 800d776:	b2db      	uxtb	r3, r3
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3714      	adds	r7, #20
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800d78c:	2300      	movs	r3, #0
 800d78e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800d796:	2301      	movs	r3, #1
 800d798:	e0eb      	b.n	800d972 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a75      	ldr	r2, [pc, #468]	; (800d97c <HAL_SPI_Init+0x1f8>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d00f      	beq.n	800d7ca <HAL_SPI_Init+0x46>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a74      	ldr	r2, [pc, #464]	; (800d980 <HAL_SPI_Init+0x1fc>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d00a      	beq.n	800d7ca <HAL_SPI_Init+0x46>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a72      	ldr	r2, [pc, #456]	; (800d984 <HAL_SPI_Init+0x200>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d005      	beq.n	800d7ca <HAL_SPI_Init+0x46>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	2b0f      	cmp	r3, #15
 800d7c4:	d901      	bls.n	800d7ca <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e0d3      	b.n	800d972 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f001 f87a 	bl	800e8c4 <SPI_GetPacketSize>
 800d7d0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a69      	ldr	r2, [pc, #420]	; (800d97c <HAL_SPI_Init+0x1f8>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d00c      	beq.n	800d7f6 <HAL_SPI_Init+0x72>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a67      	ldr	r2, [pc, #412]	; (800d980 <HAL_SPI_Init+0x1fc>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d007      	beq.n	800d7f6 <HAL_SPI_Init+0x72>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a66      	ldr	r2, [pc, #408]	; (800d984 <HAL_SPI_Init+0x200>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d002      	beq.n	800d7f6 <HAL_SPI_Init+0x72>
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	2b08      	cmp	r3, #8
 800d7f4:	d811      	bhi.n	800d81a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d7fa:	4a60      	ldr	r2, [pc, #384]	; (800d97c <HAL_SPI_Init+0x1f8>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d009      	beq.n	800d814 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a5e      	ldr	r2, [pc, #376]	; (800d980 <HAL_SPI_Init+0x1fc>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d004      	beq.n	800d814 <HAL_SPI_Init+0x90>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4a5d      	ldr	r2, [pc, #372]	; (800d984 <HAL_SPI_Init+0x200>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d104      	bne.n	800d81e <HAL_SPI_Init+0x9a>
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	2b10      	cmp	r3, #16
 800d818:	d901      	bls.n	800d81e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e0a9      	b.n	800d972 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d824:	b2db      	uxtb	r3, r3
 800d826:	2b00      	cmp	r3, #0
 800d828:	d106      	bne.n	800d838 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7f5 f952 	bl	8002adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2202      	movs	r2, #2
 800d83c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f022 0201 	bic.w	r2, r2, #1
 800d84e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	699b      	ldr	r3, [r3, #24]
 800d854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d858:	d119      	bne.n	800d88e <HAL_SPI_Init+0x10a>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d862:	d103      	bne.n	800d86c <HAL_SPI_Init+0xe8>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d008      	beq.n	800d87e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d870:	2b00      	cmp	r3, #0
 800d872:	d10c      	bne.n	800d88e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d87c:	d107      	bne.n	800d88e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d88c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	69da      	ldr	r2, [r3, #28]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d896:	431a      	orrs	r2, r3
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	431a      	orrs	r2, r3
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8a0:	ea42 0103 	orr.w	r1, r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	68da      	ldr	r2, [r3, #12]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	430a      	orrs	r2, r1
 800d8ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b8:	431a      	orrs	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8be:	431a      	orrs	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	699b      	ldr	r3, [r3, #24]
 800d8c4:	431a      	orrs	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	691b      	ldr	r3, [r3, #16]
 800d8ca:	431a      	orrs	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6a1b      	ldr	r3, [r3, #32]
 800d8d6:	431a      	orrs	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	431a      	orrs	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8e2:	431a      	orrs	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	431a      	orrs	r2, r3
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8ee:	ea42 0103 	orr.w	r1, r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	430a      	orrs	r2, r1
 800d8fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d113      	bne.n	800d92e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d918:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d92c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f022 0201 	bic.w	r2, r2, #1
 800d93c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	430a      	orrs	r2, r1
 800d95e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d970:	2300      	movs	r3, #0
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	40013000 	.word	0x40013000
 800d980:	40003800 	.word	0x40003800
 800d984:	40003c00 	.word	0x40003c00

0800d988 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b08a      	sub	sp, #40	; 0x28
 800d98c:	af02      	add	r7, sp, #8
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	603b      	str	r3, [r7, #0]
 800d994:	4613      	mov	r3, r2
 800d996:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	3320      	adds	r3, #32
 800d99e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d101      	bne.n	800d9b2 <HAL_SPI_Transmit+0x2a>
 800d9ae:	2302      	movs	r3, #2
 800d9b0:	e1d7      	b.n	800dd62 <HAL_SPI_Transmit+0x3da>
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d9ba:	f7f8 f951 	bl	8005c60 <HAL_GetTick>
 800d9be:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d007      	beq.n	800d9dc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d9cc:	2302      	movs	r3, #2
 800d9ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d9d8:	7efb      	ldrb	r3, [r7, #27]
 800d9da:	e1c2      	b.n	800dd62 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d002      	beq.n	800d9e8 <HAL_SPI_Transmit+0x60>
 800d9e2:	88fb      	ldrh	r3, [r7, #6]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d107      	bne.n	800d9f8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d9f4:	7efb      	ldrb	r3, [r7, #27]
 800d9f6:	e1b4      	b.n	800dd62 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2203      	movs	r2, #3
 800d9fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	68ba      	ldr	r2, [r7, #8]
 800da0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	88fa      	ldrh	r2, [r7, #6]
 800da12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	88fa      	ldrh	r2, [r7, #6]
 800da1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2200      	movs	r2, #0
 800da22:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2200      	movs	r2, #0
 800da30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2200      	movs	r2, #0
 800da38:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800da48:	d107      	bne.n	800da5a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da58:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	685a      	ldr	r2, [r3, #4]
 800da60:	4b96      	ldr	r3, [pc, #600]	; (800dcbc <HAL_SPI_Transmit+0x334>)
 800da62:	4013      	ands	r3, r2
 800da64:	88f9      	ldrh	r1, [r7, #6]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	6812      	ldr	r2, [r2, #0]
 800da6a:	430b      	orrs	r3, r1
 800da6c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f042 0201 	orr.w	r2, r2, #1
 800da7c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da86:	d107      	bne.n	800da98 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	2b0f      	cmp	r3, #15
 800da9e:	d947      	bls.n	800db30 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800daa0:	e03f      	b.n	800db22 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	f003 0302 	and.w	r3, r3, #2
 800daac:	2b02      	cmp	r3, #2
 800daae:	d114      	bne.n	800dada <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	6812      	ldr	r2, [r2, #0]
 800daba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dac0:	1d1a      	adds	r2, r3, #4
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dacc:	b29b      	uxth	r3, r3
 800dace:	3b01      	subs	r3, #1
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dad8:	e023      	b.n	800db22 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dada:	f7f8 f8c1 	bl	8005c60 <HAL_GetTick>
 800dade:	4602      	mov	r2, r0
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	1ad3      	subs	r3, r2, r3
 800dae4:	683a      	ldr	r2, [r7, #0]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d803      	bhi.n	800daf2 <HAL_SPI_Transmit+0x16a>
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf0:	d102      	bne.n	800daf8 <HAL_SPI_Transmit+0x170>
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d114      	bne.n	800db22 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f000 fe15 	bl	800e728 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2201      	movs	r2, #1
 800db1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800db1e:	2301      	movs	r3, #1
 800db20:	e11f      	b.n	800dd62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db28:	b29b      	uxth	r3, r3
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1b9      	bne.n	800daa2 <HAL_SPI_Transmit+0x11a>
 800db2e:	e0f2      	b.n	800dd16 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	2b07      	cmp	r3, #7
 800db36:	f240 80e7 	bls.w	800dd08 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800db3a:	e05d      	b.n	800dbf8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	695b      	ldr	r3, [r3, #20]
 800db42:	f003 0302 	and.w	r3, r3, #2
 800db46:	2b02      	cmp	r3, #2
 800db48:	d132      	bne.n	800dbb0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db50:	b29b      	uxth	r3, r3
 800db52:	2b01      	cmp	r3, #1
 800db54:	d918      	bls.n	800db88 <HAL_SPI_Transmit+0x200>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d014      	beq.n	800db88 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6812      	ldr	r2, [r2, #0]
 800db68:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db6e:	1d1a      	adds	r2, r3, #4
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	3b02      	subs	r3, #2
 800db7e:	b29a      	uxth	r2, r3
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800db86:	e037      	b.n	800dbf8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db8c:	881a      	ldrh	r2, [r3, #0]
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db96:	1c9a      	adds	r2, r3, #2
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	3b01      	subs	r3, #1
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dbae:	e023      	b.n	800dbf8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbb0:	f7f8 f856 	bl	8005c60 <HAL_GetTick>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	683a      	ldr	r2, [r7, #0]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d803      	bhi.n	800dbc8 <HAL_SPI_Transmit+0x240>
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc6:	d102      	bne.n	800dbce <HAL_SPI_Transmit+0x246>
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d114      	bne.n	800dbf8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f000 fdaa 	bl	800e728 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbe2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e0b4      	b.n	800dd62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d19b      	bne.n	800db3c <HAL_SPI_Transmit+0x1b4>
 800dc04:	e087      	b.n	800dd16 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	695b      	ldr	r3, [r3, #20]
 800dc0c:	f003 0302 	and.w	r3, r3, #2
 800dc10:	2b02      	cmp	r3, #2
 800dc12:	d155      	bne.n	800dcc0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	2b03      	cmp	r3, #3
 800dc1e:	d918      	bls.n	800dc52 <HAL_SPI_Transmit+0x2ca>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc24:	2b40      	cmp	r3, #64	; 0x40
 800dc26:	d914      	bls.n	800dc52 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	6812      	ldr	r2, [r2, #0]
 800dc32:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc38:	1d1a      	adds	r2, r3, #4
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	3b04      	subs	r3, #4
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dc50:	e05a      	b.n	800dd08 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d917      	bls.n	800dc8e <HAL_SPI_Transmit+0x306>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d013      	beq.n	800dc8e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc6a:	881a      	ldrh	r2, [r3, #0]
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc74:	1c9a      	adds	r2, r3, #2
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	3b02      	subs	r3, #2
 800dc84:	b29a      	uxth	r2, r3
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dc8c:	e03c      	b.n	800dd08 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3320      	adds	r3, #32
 800dc98:	7812      	ldrb	r2, [r2, #0]
 800dc9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dca0:	1c5a      	adds	r2, r3, #1
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dcb8:	e026      	b.n	800dd08 <HAL_SPI_Transmit+0x380>
 800dcba:	bf00      	nop
 800dcbc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcc0:	f7f7 ffce 	bl	8005c60 <HAL_GetTick>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	683a      	ldr	r2, [r7, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d803      	bhi.n	800dcd8 <HAL_SPI_Transmit+0x350>
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd6:	d102      	bne.n	800dcde <HAL_SPI_Transmit+0x356>
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d114      	bne.n	800dd08 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f000 fd22 	bl	800e728 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e02c      	b.n	800dd62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f47f af78 	bne.w	800dc06 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2108      	movs	r1, #8
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f000 fda1 	bl	800e868 <SPI_WaitOnFlagUntilTimeout>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d007      	beq.n	800dd3c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd32:	f043 0220 	orr.w	r2, r3, #32
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f000 fcf3 	bl	800e728 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d001      	beq.n	800dd60 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e000      	b.n	800dd62 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800dd60:	7efb      	ldrb	r3, [r7, #27]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3720      	adds	r7, #32
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop

0800dd6c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08a      	sub	sp, #40	; 0x28
 800dd70:	af02      	add	r7, sp, #8
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	603b      	str	r3, [r7, #0]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	3330      	adds	r3, #48	; 0x30
 800dd86:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd90:	d112      	bne.n	800ddb8 <HAL_SPI_Receive+0x4c>
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d10e      	bne.n	800ddb8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2204      	movs	r2, #4
 800dd9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dda2:	88fa      	ldrh	r2, [r7, #6]
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	9300      	str	r3, [sp, #0]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	68b9      	ldr	r1, [r7, #8]
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	f000 f9ce 	bl	800e150 <HAL_SPI_TransmitReceive>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	e1c7      	b.n	800e148 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d101      	bne.n	800ddc6 <HAL_SPI_Receive+0x5a>
 800ddc2:	2302      	movs	r3, #2
 800ddc4:	e1c0      	b.n	800e148 <HAL_SPI_Receive+0x3dc>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ddce:	f7f7 ff47 	bl	8005c60 <HAL_GetTick>
 800ddd2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d007      	beq.n	800ddf0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800dde0:	2302      	movs	r3, #2
 800dde2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ddec:	7ffb      	ldrb	r3, [r7, #31]
 800ddee:	e1ab      	b.n	800e148 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <HAL_SPI_Receive+0x90>
 800ddf6:	88fb      	ldrh	r3, [r7, #6]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d107      	bne.n	800de0c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800de08:	7ffb      	ldrb	r3, [r7, #31]
 800de0a:	e19d      	b.n	800e148 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2204      	movs	r2, #4
 800de10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2200      	movs	r2, #0
 800de18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	68ba      	ldr	r2, [r7, #8]
 800de20:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	88fa      	ldrh	r2, [r7, #6]
 800de26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	88fa      	ldrh	r2, [r7, #6]
 800de2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2200      	movs	r2, #0
 800de3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2200      	movs	r2, #0
 800de44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2200      	movs	r2, #0
 800de4c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2200      	movs	r2, #0
 800de52:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800de5c:	d107      	bne.n	800de6e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800de6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	685a      	ldr	r2, [r3, #4]
 800de74:	4b94      	ldr	r3, [pc, #592]	; (800e0c8 <HAL_SPI_Receive+0x35c>)
 800de76:	4013      	ands	r3, r2
 800de78:	88f9      	ldrh	r1, [r7, #6]
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	6812      	ldr	r2, [r2, #0]
 800de7e:	430b      	orrs	r3, r1
 800de80:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f042 0201 	orr.w	r2, r2, #1
 800de90:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de9a:	d107      	bne.n	800deac <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800deaa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	68db      	ldr	r3, [r3, #12]
 800deb0:	2b0f      	cmp	r3, #15
 800deb2:	d948      	bls.n	800df46 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800deb4:	e040      	b.n	800df38 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	695a      	ldr	r2, [r3, #20]
 800debc:	f248 0308 	movw	r3, #32776	; 0x8008
 800dec0:	4013      	ands	r3, r2
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d014      	beq.n	800def0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dece:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ded0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ded6:	1d1a      	adds	r2, r3, #4
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	3b01      	subs	r3, #1
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800deee:	e023      	b.n	800df38 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800def0:	f7f7 feb6 	bl	8005c60 <HAL_GetTick>
 800def4:	4602      	mov	r2, r0
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	1ad3      	subs	r3, r2, r3
 800defa:	683a      	ldr	r2, [r7, #0]
 800defc:	429a      	cmp	r2, r3
 800defe:	d803      	bhi.n	800df08 <HAL_SPI_Receive+0x19c>
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df06:	d102      	bne.n	800df0e <HAL_SPI_Receive+0x1a2>
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d114      	bne.n	800df38 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f000 fc0a 	bl	800e728 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2200      	movs	r2, #0
 800df18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800df34:	2301      	movs	r3, #1
 800df36:	e107      	b.n	800e148 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df3e:	b29b      	uxth	r3, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1b8      	bne.n	800deb6 <HAL_SPI_Receive+0x14a>
 800df44:	e0ed      	b.n	800e122 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	2b07      	cmp	r3, #7
 800df4c:	f240 80e2 	bls.w	800e114 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800df50:	e05b      	b.n	800e00a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	695b      	ldr	r3, [r3, #20]
 800df58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d030      	beq.n	800dfc2 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	695b      	ldr	r3, [r3, #20]
 800df66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d014      	beq.n	800df98 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800df78:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df7e:	1d1a      	adds	r2, r3, #4
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	3b02      	subs	r3, #2
 800df8e:	b29a      	uxth	r2, r3
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df96:	e038      	b.n	800e00a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df9c:	69ba      	ldr	r2, [r7, #24]
 800df9e:	8812      	ldrh	r2, [r2, #0]
 800dfa0:	b292      	uxth	r2, r2
 800dfa2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfa8:	1c9a      	adds	r2, r3, #2
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfc0:	e023      	b.n	800e00a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfc2:	f7f7 fe4d 	bl	8005c60 <HAL_GetTick>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	1ad3      	subs	r3, r2, r3
 800dfcc:	683a      	ldr	r2, [r7, #0]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d803      	bhi.n	800dfda <HAL_SPI_Receive+0x26e>
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfd8:	d102      	bne.n	800dfe0 <HAL_SPI_Receive+0x274>
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d114      	bne.n	800e00a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dfe0:	68f8      	ldr	r0, [r7, #12]
 800dfe2:	f000 fba1 	bl	800e728 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dff4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e006:	2301      	movs	r3, #1
 800e008:	e09e      	b.n	800e148 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e010:	b29b      	uxth	r3, r3
 800e012:	2b00      	cmp	r3, #0
 800e014:	d19d      	bne.n	800df52 <HAL_SPI_Receive+0x1e6>
 800e016:	e084      	b.n	800e122 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e022:	2b00      	cmp	r3, #0
 800e024:	d052      	beq.n	800e0cc <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	695b      	ldr	r3, [r3, #20]
 800e02c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e030:	2b00      	cmp	r3, #0
 800e032:	d014      	beq.n	800e05e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e03c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e03e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e044:	1d1a      	adds	r2, r3, #4
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e050:	b29b      	uxth	r3, r3
 800e052:	3b04      	subs	r3, #4
 800e054:	b29a      	uxth	r2, r3
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e05c:	e05a      	b.n	800e114 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	695b      	ldr	r3, [r3, #20]
 800e064:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e06c:	d914      	bls.n	800e098 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e072:	69ba      	ldr	r2, [r7, #24]
 800e074:	8812      	ldrh	r2, [r2, #0]
 800e076:	b292      	uxth	r2, r2
 800e078:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e07e:	1c9a      	adds	r2, r3, #2
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	3b02      	subs	r3, #2
 800e08e:	b29a      	uxth	r2, r3
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e096:	e03d      	b.n	800e114 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0a4:	7812      	ldrb	r2, [r2, #0]
 800e0a6:	b2d2      	uxtb	r2, r2
 800e0a8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0c6:	e025      	b.n	800e114 <HAL_SPI_Receive+0x3a8>
 800e0c8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0cc:	f7f7 fdc8 	bl	8005c60 <HAL_GetTick>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	683a      	ldr	r2, [r7, #0]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d803      	bhi.n	800e0e4 <HAL_SPI_Receive+0x378>
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e2:	d102      	bne.n	800e0ea <HAL_SPI_Receive+0x37e>
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d114      	bne.n	800e114 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f000 fb1c 	bl	800e728 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2201      	movs	r2, #1
 800e10c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e019      	b.n	800e148 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f47f af7b 	bne.w	800e018 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	f000 fb00 	bl	800e728 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	e000      	b.n	800e148 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e146:	7ffb      	ldrb	r3, [r7, #31]
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3720      	adds	r7, #32
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b08e      	sub	sp, #56	; 0x38
 800e154:	af02      	add	r7, sp, #8
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
 800e15c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e15e:	2300      	movs	r3, #0
 800e160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	3320      	adds	r3, #32
 800e16a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	3330      	adds	r3, #48	; 0x30
 800e172:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d101      	bne.n	800e182 <HAL_SPI_TransmitReceive+0x32>
 800e17e:	2302      	movs	r3, #2
 800e180:	e2ce      	b.n	800e720 <HAL_SPI_TransmitReceive+0x5d0>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2201      	movs	r2, #1
 800e186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e18a:	f7f7 fd69 	bl	8005c60 <HAL_GetTick>
 800e18e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e190:	887b      	ldrh	r3, [r7, #2]
 800e192:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e194:	887b      	ldrh	r3, [r7, #2]
 800e196:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e19e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e1a6:	7efb      	ldrb	r3, [r7, #27]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d014      	beq.n	800e1d6 <HAL_SPI_TransmitReceive+0x86>
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1b2:	d106      	bne.n	800e1c2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	689b      	ldr	r3, [r3, #8]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d102      	bne.n	800e1c2 <HAL_SPI_TransmitReceive+0x72>
 800e1bc:	7efb      	ldrb	r3, [r7, #27]
 800e1be:	2b04      	cmp	r3, #4
 800e1c0:	d009      	beq.n	800e1d6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e1d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e1d4:	e2a4      	b.n	800e720 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d005      	beq.n	800e1e8 <HAL_SPI_TransmitReceive+0x98>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d002      	beq.n	800e1e8 <HAL_SPI_TransmitReceive+0x98>
 800e1e2:	887b      	ldrh	r3, [r7, #2]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d109      	bne.n	800e1fc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e1f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e1fa:	e291      	b.n	800e720 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b04      	cmp	r3, #4
 800e206:	d003      	beq.n	800e210 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2205      	movs	r2, #5
 800e20c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2200      	movs	r2, #0
 800e214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	887a      	ldrh	r2, [r7, #2]
 800e222:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	887a      	ldrh	r2, [r7, #2]
 800e22a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	887a      	ldrh	r2, [r7, #2]
 800e238:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	887a      	ldrh	r2, [r7, #2]
 800e240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2200      	movs	r2, #0
 800e248:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2200      	movs	r2, #0
 800e24e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	685a      	ldr	r2, [r3, #4]
 800e256:	4b9f      	ldr	r3, [pc, #636]	; (800e4d4 <HAL_SPI_TransmitReceive+0x384>)
 800e258:	4013      	ands	r3, r2
 800e25a:	8879      	ldrh	r1, [r7, #2]
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	6812      	ldr	r2, [r2, #0]
 800e260:	430b      	orrs	r3, r1
 800e262:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f042 0201 	orr.w	r2, r2, #1
 800e272:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e27c:	d107      	bne.n	800e28e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e28c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	2b0f      	cmp	r3, #15
 800e294:	d970      	bls.n	800e378 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e296:	e068      	b.n	800e36a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	f003 0302 	and.w	r3, r3, #2
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	d11a      	bne.n	800e2dc <HAL_SPI_TransmitReceive+0x18c>
 800e2a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d017      	beq.n	800e2dc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	6812      	ldr	r2, [r2, #0]
 800e2b6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2bc:	1d1a      	adds	r2, r3, #4
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e2da:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	695a      	ldr	r2, [r3, #20]
 800e2e2:	f248 0308 	movw	r3, #32776	; 0x8008
 800e2e6:	4013      	ands	r3, r2
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d01a      	beq.n	800e322 <HAL_SPI_TransmitReceive+0x1d2>
 800e2ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d017      	beq.n	800e322 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e2fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e302:	1d1a      	adds	r2, r3, #4
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e30e:	b29b      	uxth	r3, r3
 800e310:	3b01      	subs	r3, #1
 800e312:	b29a      	uxth	r2, r3
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e320:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e322:	f7f7 fc9d 	bl	8005c60 <HAL_GetTick>
 800e326:	4602      	mov	r2, r0
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e32e:	429a      	cmp	r2, r3
 800e330:	d803      	bhi.n	800e33a <HAL_SPI_TransmitReceive+0x1ea>
 800e332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e338:	d102      	bne.n	800e340 <HAL_SPI_TransmitReceive+0x1f0>
 800e33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d114      	bne.n	800e36a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f000 f9f1 	bl	800e728 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2200      	movs	r2, #0
 800e34a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e354:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2201      	movs	r2, #1
 800e362:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e366:	2301      	movs	r3, #1
 800e368:	e1da      	b.n	800e720 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e36a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d193      	bne.n	800e298 <HAL_SPI_TransmitReceive+0x148>
 800e370:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e372:	2b00      	cmp	r3, #0
 800e374:	d190      	bne.n	800e298 <HAL_SPI_TransmitReceive+0x148>
 800e376:	e1ac      	b.n	800e6d2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	2b07      	cmp	r3, #7
 800e37e:	f240 81a0 	bls.w	800e6c2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e382:	e0a9      	b.n	800e4d8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	695b      	ldr	r3, [r3, #20]
 800e38a:	f003 0302 	and.w	r3, r3, #2
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d139      	bne.n	800e406 <HAL_SPI_TransmitReceive+0x2b6>
 800e392:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e394:	2b00      	cmp	r3, #0
 800e396:	d036      	beq.n	800e406 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e398:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d91c      	bls.n	800e3d8 <HAL_SPI_TransmitReceive+0x288>
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d018      	beq.n	800e3d8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	6812      	ldr	r2, [r2, #0]
 800e3b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3b6:	1d1a      	adds	r2, r3, #4
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	3b02      	subs	r3, #2
 800e3c6:	b29a      	uxth	r2, r3
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e3d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e3d6:	e016      	b.n	800e406 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3dc:	881a      	ldrh	r2, [r3, #0]
 800e3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3e6:	1c9a      	adds	r2, r3, #2
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	3b01      	subs	r3, #1
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e404:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	695b      	ldr	r3, [r3, #20]
 800e40c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e410:	2b00      	cmp	r3, #0
 800e412:	d03a      	beq.n	800e48a <HAL_SPI_TransmitReceive+0x33a>
 800e414:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e416:	2b00      	cmp	r3, #0
 800e418:	d037      	beq.n	800e48a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	695b      	ldr	r3, [r3, #20]
 800e420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e424:	2b00      	cmp	r3, #0
 800e426:	d018      	beq.n	800e45a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e432:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e438:	1d1a      	adds	r2, r3, #4
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e444:	b29b      	uxth	r3, r3
 800e446:	3b02      	subs	r3, #2
 800e448:	b29a      	uxth	r2, r3
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e456:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e458:	e017      	b.n	800e48a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e45e:	6a3a      	ldr	r2, [r7, #32]
 800e460:	8812      	ldrh	r2, [r2, #0]
 800e462:	b292      	uxth	r2, r2
 800e464:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e46a:	1c9a      	adds	r2, r3, #2
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e476:	b29b      	uxth	r3, r3
 800e478:	3b01      	subs	r3, #1
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e488:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e48a:	f7f7 fbe9 	bl	8005c60 <HAL_GetTick>
 800e48e:	4602      	mov	r2, r0
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	1ad3      	subs	r3, r2, r3
 800e494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e496:	429a      	cmp	r2, r3
 800e498:	d803      	bhi.n	800e4a2 <HAL_SPI_TransmitReceive+0x352>
 800e49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a0:	d102      	bne.n	800e4a8 <HAL_SPI_TransmitReceive+0x358>
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d117      	bne.n	800e4d8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f000 f93d 	bl	800e728 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e126      	b.n	800e720 <HAL_SPI_TransmitReceive+0x5d0>
 800e4d2:	bf00      	nop
 800e4d4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e4d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f47f af52 	bne.w	800e384 <HAL_SPI_TransmitReceive+0x234>
 800e4e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f47f af4e 	bne.w	800e384 <HAL_SPI_TransmitReceive+0x234>
 800e4e8:	e0f3      	b.n	800e6d2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	695b      	ldr	r3, [r3, #20]
 800e4f0:	f003 0302 	and.w	r3, r3, #2
 800e4f4:	2b02      	cmp	r3, #2
 800e4f6:	d15a      	bne.n	800e5ae <HAL_SPI_TransmitReceive+0x45e>
 800e4f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d057      	beq.n	800e5ae <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e4fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e500:	2b03      	cmp	r3, #3
 800e502:	d91c      	bls.n	800e53e <HAL_SPI_TransmitReceive+0x3ee>
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e508:	2b40      	cmp	r3, #64	; 0x40
 800e50a:	d918      	bls.n	800e53e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	6812      	ldr	r2, [r2, #0]
 800e516:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e51c:	1d1a      	adds	r2, r3, #4
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e528:	b29b      	uxth	r3, r3
 800e52a:	3b04      	subs	r3, #4
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e53a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e53c:	e037      	b.n	800e5ae <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e53e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e540:	2b01      	cmp	r3, #1
 800e542:	d91b      	bls.n	800e57c <HAL_SPI_TransmitReceive+0x42c>
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d017      	beq.n	800e57c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e550:	881a      	ldrh	r2, [r3, #0]
 800e552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e554:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e55a:	1c9a      	adds	r2, r3, #2
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e566:	b29b      	uxth	r3, r3
 800e568:	3b02      	subs	r3, #2
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e578:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e57a:	e018      	b.n	800e5ae <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3320      	adds	r3, #32
 800e586:	7812      	ldrb	r2, [r2, #0]
 800e588:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e58e:	1c5a      	adds	r2, r3, #1
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	3b01      	subs	r3, #1
 800e59e:	b29a      	uxth	r2, r3
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	695b      	ldr	r3, [r3, #20]
 800e5b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d05e      	beq.n	800e67a <HAL_SPI_TransmitReceive+0x52a>
 800e5bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d05b      	beq.n	800e67a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	695b      	ldr	r3, [r3, #20]
 800e5c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d018      	beq.n	800e602 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e5da:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5e0:	1d1a      	adds	r2, r3, #4
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	3b04      	subs	r3, #4
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e600:	e03b      	b.n	800e67a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	695b      	ldr	r3, [r3, #20]
 800e608:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e60c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e610:	d918      	bls.n	800e644 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e616:	6a3a      	ldr	r2, [r7, #32]
 800e618:	8812      	ldrh	r2, [r2, #0]
 800e61a:	b292      	uxth	r2, r2
 800e61c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e622:	1c9a      	adds	r2, r3, #2
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e62e:	b29b      	uxth	r3, r3
 800e630:	3b02      	subs	r3, #2
 800e632:	b29a      	uxth	r2, r3
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e640:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e642:	e01a      	b.n	800e67a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e650:	7812      	ldrb	r2, [r2, #0]
 800e652:	b2d2      	uxtb	r2, r2
 800e654:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e666:	b29b      	uxth	r3, r3
 800e668:	3b01      	subs	r3, #1
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e678:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e67a:	f7f7 faf1 	bl	8005c60 <HAL_GetTick>
 800e67e:	4602      	mov	r2, r0
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	1ad3      	subs	r3, r2, r3
 800e684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e686:	429a      	cmp	r2, r3
 800e688:	d803      	bhi.n	800e692 <HAL_SPI_TransmitReceive+0x542>
 800e68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e690:	d102      	bne.n	800e698 <HAL_SPI_TransmitReceive+0x548>
 800e692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e694:	2b00      	cmp	r3, #0
 800e696:	d114      	bne.n	800e6c2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e698:	68f8      	ldr	r0, [r7, #12]
 800e69a:	f000 f845 	bl	800e728 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e02e      	b.n	800e720 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e6c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	f47f af10 	bne.w	800e4ea <HAL_SPI_TransmitReceive+0x39a>
 800e6ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f47f af0c 	bne.w	800e4ea <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d4:	9300      	str	r3, [sp, #0]
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	2108      	movs	r1, #8
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 f8c3 	bl	800e868 <SPI_WaitOnFlagUntilTimeout>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d007      	beq.n	800e6f8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6ee:	f043 0220 	orr.w	r2, r3, #32
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f000 f815 	bl	800e728 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2201      	movs	r2, #1
 800e70a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e714:	2b00      	cmp	r3, #0
 800e716:	d001      	beq.n	800e71c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800e718:	2301      	movs	r3, #1
 800e71a:	e001      	b.n	800e720 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800e71c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e720:	4618      	mov	r0, r3
 800e722:	3730      	adds	r7, #48	; 0x30
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	695b      	ldr	r3, [r3, #20]
 800e736:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	699a      	ldr	r2, [r3, #24]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f042 0208 	orr.w	r2, r2, #8
 800e746:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	699a      	ldr	r2, [r3, #24]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f042 0210 	orr.w	r2, r2, #16
 800e756:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f022 0201 	bic.w	r2, r2, #1
 800e766:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	6919      	ldr	r1, [r3, #16]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	4b3c      	ldr	r3, [pc, #240]	; (800e864 <SPI_CloseTransfer+0x13c>)
 800e774:	400b      	ands	r3, r1
 800e776:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	689a      	ldr	r2, [r3, #8]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e786:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b04      	cmp	r3, #4
 800e792:	d014      	beq.n	800e7be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f003 0320 	and.w	r3, r3, #32
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00f      	beq.n	800e7be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	699a      	ldr	r2, [r3, #24]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f042 0220 	orr.w	r2, r2, #32
 800e7bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2b03      	cmp	r3, #3
 800e7c8:	d014      	beq.n	800e7f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d00f      	beq.n	800e7f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7da:	f043 0204 	orr.w	r2, r3, #4
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	699a      	ldr	r2, [r3, #24]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00f      	beq.n	800e81e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e804:	f043 0201 	orr.w	r2, r3, #1
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	699a      	ldr	r2, [r3, #24]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e81c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00f      	beq.n	800e848 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e82e:	f043 0208 	orr.w	r2, r3, #8
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	699a      	ldr	r2, [r3, #24]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e846:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e858:	bf00      	nop
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr
 800e864:	fffffc90 	.word	0xfffffc90

0800e868 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	603b      	str	r3, [r7, #0]
 800e874:	4613      	mov	r3, r2
 800e876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e878:	e010      	b.n	800e89c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e87a:	f7f7 f9f1 	bl	8005c60 <HAL_GetTick>
 800e87e:	4602      	mov	r2, r0
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	69ba      	ldr	r2, [r7, #24]
 800e886:	429a      	cmp	r2, r3
 800e888:	d803      	bhi.n	800e892 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e890:	d102      	bne.n	800e898 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d101      	bne.n	800e89c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e898:	2303      	movs	r3, #3
 800e89a:	e00f      	b.n	800e8bc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	695a      	ldr	r2, [r3, #20]
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	4013      	ands	r3, r2
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	bf0c      	ite	eq
 800e8ac:	2301      	moveq	r3, #1
 800e8ae:	2300      	movne	r3, #0
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	79fb      	ldrb	r3, [r7, #7]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d0df      	beq.n	800e87a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3710      	adds	r7, #16
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8d0:	095b      	lsrs	r3, r3, #5
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	3307      	adds	r3, #7
 800e8e2:	08db      	lsrs	r3, r3, #3
 800e8e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3714      	adds	r7, #20
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr

0800e8fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b082      	sub	sp, #8
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d101      	bne.n	800e90c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e908:	2301      	movs	r3, #1
 800e90a:	e049      	b.n	800e9a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e912:	b2db      	uxtb	r3, r3
 800e914:	2b00      	cmp	r3, #0
 800e916:	d106      	bne.n	800e926 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 f841 	bl	800e9a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2202      	movs	r2, #2
 800e92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	3304      	adds	r3, #4
 800e936:	4619      	mov	r1, r3
 800e938:	4610      	mov	r0, r2
 800e93a:	f000 fb5d 	bl	800eff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2201      	movs	r2, #1
 800e942:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2201      	movs	r2, #1
 800e94a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2201      	movs	r2, #1
 800e952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2201      	movs	r2, #1
 800e95a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2201      	movs	r2, #1
 800e962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2201      	movs	r2, #1
 800e96a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2201      	movs	r2, #1
 800e972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2201      	movs	r2, #1
 800e97a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2201      	movs	r2, #1
 800e982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2201      	movs	r2, #1
 800e98a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2201      	movs	r2, #1
 800e992:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2201      	movs	r2, #1
 800e99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e99e:	2300      	movs	r3, #0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3708      	adds	r7, #8
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e9b0:	bf00      	nop
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d001      	beq.n	800e9d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e04f      	b.n	800ea74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2202      	movs	r2, #2
 800e9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	68da      	ldr	r2, [r3, #12]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f042 0201 	orr.w	r2, r2, #1
 800e9ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a23      	ldr	r2, [pc, #140]	; (800ea80 <HAL_TIM_Base_Start_IT+0xc4>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d01d      	beq.n	800ea32 <HAL_TIM_Base_Start_IT+0x76>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9fe:	d018      	beq.n	800ea32 <HAL_TIM_Base_Start_IT+0x76>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a1f      	ldr	r2, [pc, #124]	; (800ea84 <HAL_TIM_Base_Start_IT+0xc8>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d013      	beq.n	800ea32 <HAL_TIM_Base_Start_IT+0x76>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a1e      	ldr	r2, [pc, #120]	; (800ea88 <HAL_TIM_Base_Start_IT+0xcc>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d00e      	beq.n	800ea32 <HAL_TIM_Base_Start_IT+0x76>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4a1c      	ldr	r2, [pc, #112]	; (800ea8c <HAL_TIM_Base_Start_IT+0xd0>)
 800ea1a:	4293      	cmp	r3, r2
 800ea1c:	d009      	beq.n	800ea32 <HAL_TIM_Base_Start_IT+0x76>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4a1b      	ldr	r2, [pc, #108]	; (800ea90 <HAL_TIM_Base_Start_IT+0xd4>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d004      	beq.n	800ea32 <HAL_TIM_Base_Start_IT+0x76>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a19      	ldr	r2, [pc, #100]	; (800ea94 <HAL_TIM_Base_Start_IT+0xd8>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d115      	bne.n	800ea5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	689a      	ldr	r2, [r3, #8]
 800ea38:	4b17      	ldr	r3, [pc, #92]	; (800ea98 <HAL_TIM_Base_Start_IT+0xdc>)
 800ea3a:	4013      	ands	r3, r2
 800ea3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2b06      	cmp	r3, #6
 800ea42:	d015      	beq.n	800ea70 <HAL_TIM_Base_Start_IT+0xb4>
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea4a:	d011      	beq.n	800ea70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f042 0201 	orr.w	r2, r2, #1
 800ea5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea5c:	e008      	b.n	800ea70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f042 0201 	orr.w	r2, r2, #1
 800ea6c:	601a      	str	r2, [r3, #0]
 800ea6e:	e000      	b.n	800ea72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	40010000 	.word	0x40010000
 800ea84:	40000400 	.word	0x40000400
 800ea88:	40000800 	.word	0x40000800
 800ea8c:	40000c00 	.word	0x40000c00
 800ea90:	40010400 	.word	0x40010400
 800ea94:	40001800 	.word	0x40001800
 800ea98:	00010007 	.word	0x00010007

0800ea9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d101      	bne.n	800eaae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e049      	b.n	800eb42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d106      	bne.n	800eac8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7f4 fb5e 	bl	8003184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2202      	movs	r2, #2
 800eacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	3304      	adds	r3, #4
 800ead8:	4619      	mov	r1, r3
 800eada:	4610      	mov	r0, r2
 800eadc:	f000 fa8c 	bl	800eff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2201      	movs	r2, #1
 800eafc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2201      	movs	r2, #1
 800eb04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2201      	movs	r2, #1
 800eb14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b082      	sub	sp, #8
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	691b      	ldr	r3, [r3, #16]
 800eb58:	f003 0302 	and.w	r3, r3, #2
 800eb5c:	2b02      	cmp	r3, #2
 800eb5e:	d122      	bne.n	800eba6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	f003 0302 	and.w	r3, r3, #2
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d11b      	bne.n	800eba6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f06f 0202 	mvn.w	r2, #2
 800eb76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	699b      	ldr	r3, [r3, #24]
 800eb84:	f003 0303 	and.w	r3, r3, #3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d003      	beq.n	800eb94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 fa15 	bl	800efbc <HAL_TIM_IC_CaptureCallback>
 800eb92:	e005      	b.n	800eba0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f000 fa07 	bl	800efa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 fa18 	bl	800efd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2200      	movs	r2, #0
 800eba4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	f003 0304 	and.w	r3, r3, #4
 800ebb0:	2b04      	cmp	r3, #4
 800ebb2:	d122      	bne.n	800ebfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	f003 0304 	and.w	r3, r3, #4
 800ebbe:	2b04      	cmp	r3, #4
 800ebc0:	d11b      	bne.n	800ebfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f06f 0204 	mvn.w	r2, #4
 800ebca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2202      	movs	r2, #2
 800ebd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	699b      	ldr	r3, [r3, #24]
 800ebd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d003      	beq.n	800ebe8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 f9eb 	bl	800efbc <HAL_TIM_IC_CaptureCallback>
 800ebe6:	e005      	b.n	800ebf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 f9dd 	bl	800efa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f9ee 	bl	800efd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	f003 0308 	and.w	r3, r3, #8
 800ec04:	2b08      	cmp	r3, #8
 800ec06:	d122      	bne.n	800ec4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	f003 0308 	and.w	r3, r3, #8
 800ec12:	2b08      	cmp	r3, #8
 800ec14:	d11b      	bne.n	800ec4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f06f 0208 	mvn.w	r2, #8
 800ec1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2204      	movs	r2, #4
 800ec24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	69db      	ldr	r3, [r3, #28]
 800ec2c:	f003 0303 	and.w	r3, r3, #3
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d003      	beq.n	800ec3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 f9c1 	bl	800efbc <HAL_TIM_IC_CaptureCallback>
 800ec3a:	e005      	b.n	800ec48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 f9b3 	bl	800efa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 f9c4 	bl	800efd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	f003 0310 	and.w	r3, r3, #16
 800ec58:	2b10      	cmp	r3, #16
 800ec5a:	d122      	bne.n	800eca2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	f003 0310 	and.w	r3, r3, #16
 800ec66:	2b10      	cmp	r3, #16
 800ec68:	d11b      	bne.n	800eca2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f06f 0210 	mvn.w	r2, #16
 800ec72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2208      	movs	r2, #8
 800ec78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	69db      	ldr	r3, [r3, #28]
 800ec80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d003      	beq.n	800ec90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 f997 	bl	800efbc <HAL_TIM_IC_CaptureCallback>
 800ec8e:	e005      	b.n	800ec9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f000 f989 	bl	800efa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 f99a 	bl	800efd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	f003 0301 	and.w	r3, r3, #1
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d10e      	bne.n	800ecce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	f003 0301 	and.w	r3, r3, #1
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d107      	bne.n	800ecce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f06f 0201 	mvn.w	r2, #1
 800ecc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f7f3 fc53 	bl	8002574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	691b      	ldr	r3, [r3, #16]
 800ecd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecd8:	2b80      	cmp	r3, #128	; 0x80
 800ecda:	d10e      	bne.n	800ecfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ece6:	2b80      	cmp	r3, #128	; 0x80
 800ece8:	d107      	bne.n	800ecfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ecf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 feb1 	bl	800fa5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	691b      	ldr	r3, [r3, #16]
 800ed00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed08:	d10e      	bne.n	800ed28 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed14:	2b80      	cmp	r3, #128	; 0x80
 800ed16:	d107      	bne.n	800ed28 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ed20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 fea4 	bl	800fa70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	691b      	ldr	r3, [r3, #16]
 800ed2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed32:	2b40      	cmp	r3, #64	; 0x40
 800ed34:	d10e      	bne.n	800ed54 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed40:	2b40      	cmp	r3, #64	; 0x40
 800ed42:	d107      	bne.n	800ed54 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 f948 	bl	800efe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	691b      	ldr	r3, [r3, #16]
 800ed5a:	f003 0320 	and.w	r3, r3, #32
 800ed5e:	2b20      	cmp	r3, #32
 800ed60:	d10e      	bne.n	800ed80 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	f003 0320 	and.w	r3, r3, #32
 800ed6c:	2b20      	cmp	r3, #32
 800ed6e:	d107      	bne.n	800ed80 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f06f 0220 	mvn.w	r2, #32
 800ed78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fe64 	bl	800fa48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed80:	bf00      	nop
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d101      	bne.n	800eda2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ed9e:	2302      	movs	r3, #2
 800eda0:	e0fd      	b.n	800ef9e <HAL_TIM_PWM_ConfigChannel+0x216>
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2201      	movs	r2, #1
 800eda6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b14      	cmp	r3, #20
 800edae:	f200 80f0 	bhi.w	800ef92 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800edb2:	a201      	add	r2, pc, #4	; (adr r2, 800edb8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800edb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb8:	0800ee0d 	.word	0x0800ee0d
 800edbc:	0800ef93 	.word	0x0800ef93
 800edc0:	0800ef93 	.word	0x0800ef93
 800edc4:	0800ef93 	.word	0x0800ef93
 800edc8:	0800ee4d 	.word	0x0800ee4d
 800edcc:	0800ef93 	.word	0x0800ef93
 800edd0:	0800ef93 	.word	0x0800ef93
 800edd4:	0800ef93 	.word	0x0800ef93
 800edd8:	0800ee8f 	.word	0x0800ee8f
 800eddc:	0800ef93 	.word	0x0800ef93
 800ede0:	0800ef93 	.word	0x0800ef93
 800ede4:	0800ef93 	.word	0x0800ef93
 800ede8:	0800eecf 	.word	0x0800eecf
 800edec:	0800ef93 	.word	0x0800ef93
 800edf0:	0800ef93 	.word	0x0800ef93
 800edf4:	0800ef93 	.word	0x0800ef93
 800edf8:	0800ef11 	.word	0x0800ef11
 800edfc:	0800ef93 	.word	0x0800ef93
 800ee00:	0800ef93 	.word	0x0800ef93
 800ee04:	0800ef93 	.word	0x0800ef93
 800ee08:	0800ef51 	.word	0x0800ef51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	68b9      	ldr	r1, [r7, #8]
 800ee12:	4618      	mov	r0, r3
 800ee14:	f000 f98a 	bl	800f12c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	699a      	ldr	r2, [r3, #24]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f042 0208 	orr.w	r2, r2, #8
 800ee26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	699a      	ldr	r2, [r3, #24]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f022 0204 	bic.w	r2, r2, #4
 800ee36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	6999      	ldr	r1, [r3, #24]
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	691a      	ldr	r2, [r3, #16]
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	430a      	orrs	r2, r1
 800ee48:	619a      	str	r2, [r3, #24]
      break;
 800ee4a:	e0a3      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68b9      	ldr	r1, [r7, #8]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f000 f9fa 	bl	800f24c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	699a      	ldr	r2, [r3, #24]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	699a      	ldr	r2, [r3, #24]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	6999      	ldr	r1, [r3, #24]
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	691b      	ldr	r3, [r3, #16]
 800ee82:	021a      	lsls	r2, r3, #8
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	430a      	orrs	r2, r1
 800ee8a:	619a      	str	r2, [r3, #24]
      break;
 800ee8c:	e082      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	68b9      	ldr	r1, [r7, #8]
 800ee94:	4618      	mov	r0, r3
 800ee96:	f000 fa63 	bl	800f360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	69da      	ldr	r2, [r3, #28]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f042 0208 	orr.w	r2, r2, #8
 800eea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	69da      	ldr	r2, [r3, #28]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f022 0204 	bic.w	r2, r2, #4
 800eeb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	69d9      	ldr	r1, [r3, #28]
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	691a      	ldr	r2, [r3, #16]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	430a      	orrs	r2, r1
 800eeca:	61da      	str	r2, [r3, #28]
      break;
 800eecc:	e062      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	68b9      	ldr	r1, [r7, #8]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f000 fac9 	bl	800f46c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	69da      	ldr	r2, [r3, #28]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	69da      	ldr	r2, [r3, #28]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	69d9      	ldr	r1, [r3, #28]
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	021a      	lsls	r2, r3, #8
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	430a      	orrs	r2, r1
 800ef0c:	61da      	str	r2, [r3, #28]
      break;
 800ef0e:	e041      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68b9      	ldr	r1, [r7, #8]
 800ef16:	4618      	mov	r0, r3
 800ef18:	f000 fb10 	bl	800f53c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f042 0208 	orr.w	r2, r2, #8
 800ef2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f022 0204 	bic.w	r2, r2, #4
 800ef3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	691a      	ldr	r2, [r3, #16]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	430a      	orrs	r2, r1
 800ef4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ef4e:	e021      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	68b9      	ldr	r1, [r7, #8]
 800ef56:	4618      	mov	r0, r3
 800ef58:	f000 fb52 	bl	800f600 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	691b      	ldr	r3, [r3, #16]
 800ef86:	021a      	lsls	r2, r3, #8
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	430a      	orrs	r2, r1
 800ef8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ef90:	e000      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ef92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop

0800efa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800efb0:	bf00      	nop
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800efc4:	bf00      	nop
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800efd8:	bf00      	nop
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efec:	bf00      	nop
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4a40      	ldr	r2, [pc, #256]	; (800f10c <TIM_Base_SetConfig+0x114>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d013      	beq.n	800f038 <TIM_Base_SetConfig+0x40>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f016:	d00f      	beq.n	800f038 <TIM_Base_SetConfig+0x40>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4a3d      	ldr	r2, [pc, #244]	; (800f110 <TIM_Base_SetConfig+0x118>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d00b      	beq.n	800f038 <TIM_Base_SetConfig+0x40>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a3c      	ldr	r2, [pc, #240]	; (800f114 <TIM_Base_SetConfig+0x11c>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d007      	beq.n	800f038 <TIM_Base_SetConfig+0x40>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a3b      	ldr	r2, [pc, #236]	; (800f118 <TIM_Base_SetConfig+0x120>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d003      	beq.n	800f038 <TIM_Base_SetConfig+0x40>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a3a      	ldr	r2, [pc, #232]	; (800f11c <TIM_Base_SetConfig+0x124>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d108      	bne.n	800f04a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f03e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	4313      	orrs	r3, r2
 800f048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4a2f      	ldr	r2, [pc, #188]	; (800f10c <TIM_Base_SetConfig+0x114>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d01f      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f058:	d01b      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4a2c      	ldr	r2, [pc, #176]	; (800f110 <TIM_Base_SetConfig+0x118>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d017      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4a2b      	ldr	r2, [pc, #172]	; (800f114 <TIM_Base_SetConfig+0x11c>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d013      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4a2a      	ldr	r2, [pc, #168]	; (800f118 <TIM_Base_SetConfig+0x120>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d00f      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4a29      	ldr	r2, [pc, #164]	; (800f11c <TIM_Base_SetConfig+0x124>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d00b      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4a28      	ldr	r2, [pc, #160]	; (800f120 <TIM_Base_SetConfig+0x128>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d007      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4a27      	ldr	r2, [pc, #156]	; (800f124 <TIM_Base_SetConfig+0x12c>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d003      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a26      	ldr	r2, [pc, #152]	; (800f128 <TIM_Base_SetConfig+0x130>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d108      	bne.n	800f0a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	68fa      	ldr	r2, [r7, #12]
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	695b      	ldr	r3, [r3, #20]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	689a      	ldr	r2, [r3, #8]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4a10      	ldr	r2, [pc, #64]	; (800f10c <TIM_Base_SetConfig+0x114>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d00f      	beq.n	800f0f0 <TIM_Base_SetConfig+0xf8>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4a12      	ldr	r2, [pc, #72]	; (800f11c <TIM_Base_SetConfig+0x124>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d00b      	beq.n	800f0f0 <TIM_Base_SetConfig+0xf8>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4a11      	ldr	r2, [pc, #68]	; (800f120 <TIM_Base_SetConfig+0x128>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d007      	beq.n	800f0f0 <TIM_Base_SetConfig+0xf8>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4a10      	ldr	r2, [pc, #64]	; (800f124 <TIM_Base_SetConfig+0x12c>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d003      	beq.n	800f0f0 <TIM_Base_SetConfig+0xf8>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4a0f      	ldr	r2, [pc, #60]	; (800f128 <TIM_Base_SetConfig+0x130>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d103      	bne.n	800f0f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	691a      	ldr	r2, [r3, #16]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	615a      	str	r2, [r3, #20]
}
 800f0fe:	bf00      	nop
 800f100:	3714      	adds	r7, #20
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr
 800f10a:	bf00      	nop
 800f10c:	40010000 	.word	0x40010000
 800f110:	40000400 	.word	0x40000400
 800f114:	40000800 	.word	0x40000800
 800f118:	40000c00 	.word	0x40000c00
 800f11c:	40010400 	.word	0x40010400
 800f120:	40014000 	.word	0x40014000
 800f124:	40014400 	.word	0x40014400
 800f128:	40014800 	.word	0x40014800

0800f12c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b087      	sub	sp, #28
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6a1b      	ldr	r3, [r3, #32]
 800f13a:	f023 0201 	bic.w	r2, r3, #1
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a1b      	ldr	r3, [r3, #32]
 800f146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	699b      	ldr	r3, [r3, #24]
 800f152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	4b37      	ldr	r3, [pc, #220]	; (800f234 <TIM_OC1_SetConfig+0x108>)
 800f158:	4013      	ands	r3, r2
 800f15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f023 0303 	bic.w	r3, r3, #3
 800f162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	4313      	orrs	r3, r2
 800f16c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	f023 0302 	bic.w	r3, r3, #2
 800f174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	697a      	ldr	r2, [r7, #20]
 800f17c:	4313      	orrs	r3, r2
 800f17e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	4a2d      	ldr	r2, [pc, #180]	; (800f238 <TIM_OC1_SetConfig+0x10c>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d00f      	beq.n	800f1a8 <TIM_OC1_SetConfig+0x7c>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	4a2c      	ldr	r2, [pc, #176]	; (800f23c <TIM_OC1_SetConfig+0x110>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d00b      	beq.n	800f1a8 <TIM_OC1_SetConfig+0x7c>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4a2b      	ldr	r2, [pc, #172]	; (800f240 <TIM_OC1_SetConfig+0x114>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d007      	beq.n	800f1a8 <TIM_OC1_SetConfig+0x7c>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a2a      	ldr	r2, [pc, #168]	; (800f244 <TIM_OC1_SetConfig+0x118>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d003      	beq.n	800f1a8 <TIM_OC1_SetConfig+0x7c>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a29      	ldr	r2, [pc, #164]	; (800f248 <TIM_OC1_SetConfig+0x11c>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d10c      	bne.n	800f1c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	f023 0308 	bic.w	r3, r3, #8
 800f1ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	697a      	ldr	r2, [r7, #20]
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	f023 0304 	bic.w	r3, r3, #4
 800f1c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	4a1c      	ldr	r2, [pc, #112]	; (800f238 <TIM_OC1_SetConfig+0x10c>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d00f      	beq.n	800f1ea <TIM_OC1_SetConfig+0xbe>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	4a1b      	ldr	r2, [pc, #108]	; (800f23c <TIM_OC1_SetConfig+0x110>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d00b      	beq.n	800f1ea <TIM_OC1_SetConfig+0xbe>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	4a1a      	ldr	r2, [pc, #104]	; (800f240 <TIM_OC1_SetConfig+0x114>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d007      	beq.n	800f1ea <TIM_OC1_SetConfig+0xbe>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4a19      	ldr	r2, [pc, #100]	; (800f244 <TIM_OC1_SetConfig+0x118>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d003      	beq.n	800f1ea <TIM_OC1_SetConfig+0xbe>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4a18      	ldr	r2, [pc, #96]	; (800f248 <TIM_OC1_SetConfig+0x11c>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d111      	bne.n	800f20e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f1f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f1f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	695b      	ldr	r3, [r3, #20]
 800f1fe:	693a      	ldr	r2, [r7, #16]
 800f200:	4313      	orrs	r3, r2
 800f202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	699b      	ldr	r3, [r3, #24]
 800f208:	693a      	ldr	r2, [r7, #16]
 800f20a:	4313      	orrs	r3, r2
 800f20c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	693a      	ldr	r2, [r7, #16]
 800f212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	68fa      	ldr	r2, [r7, #12]
 800f218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	685a      	ldr	r2, [r3, #4]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	697a      	ldr	r2, [r7, #20]
 800f226:	621a      	str	r2, [r3, #32]
}
 800f228:	bf00      	nop
 800f22a:	371c      	adds	r7, #28
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr
 800f234:	fffeff8f 	.word	0xfffeff8f
 800f238:	40010000 	.word	0x40010000
 800f23c:	40010400 	.word	0x40010400
 800f240:	40014000 	.word	0x40014000
 800f244:	40014400 	.word	0x40014400
 800f248:	40014800 	.word	0x40014800

0800f24c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b087      	sub	sp, #28
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a1b      	ldr	r3, [r3, #32]
 800f25a:	f023 0210 	bic.w	r2, r3, #16
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6a1b      	ldr	r3, [r3, #32]
 800f266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	699b      	ldr	r3, [r3, #24]
 800f272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	4b34      	ldr	r3, [pc, #208]	; (800f348 <TIM_OC2_SetConfig+0xfc>)
 800f278:	4013      	ands	r3, r2
 800f27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	021b      	lsls	r3, r3, #8
 800f28a:	68fa      	ldr	r2, [r7, #12]
 800f28c:	4313      	orrs	r3, r2
 800f28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	f023 0320 	bic.w	r3, r3, #32
 800f296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	011b      	lsls	r3, r3, #4
 800f29e:	697a      	ldr	r2, [r7, #20]
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a29      	ldr	r2, [pc, #164]	; (800f34c <TIM_OC2_SetConfig+0x100>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d003      	beq.n	800f2b4 <TIM_OC2_SetConfig+0x68>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a28      	ldr	r2, [pc, #160]	; (800f350 <TIM_OC2_SetConfig+0x104>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d10d      	bne.n	800f2d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	011b      	lsls	r3, r3, #4
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4a1e      	ldr	r2, [pc, #120]	; (800f34c <TIM_OC2_SetConfig+0x100>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d00f      	beq.n	800f2f8 <TIM_OC2_SetConfig+0xac>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4a1d      	ldr	r2, [pc, #116]	; (800f350 <TIM_OC2_SetConfig+0x104>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d00b      	beq.n	800f2f8 <TIM_OC2_SetConfig+0xac>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4a1c      	ldr	r2, [pc, #112]	; (800f354 <TIM_OC2_SetConfig+0x108>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d007      	beq.n	800f2f8 <TIM_OC2_SetConfig+0xac>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	4a1b      	ldr	r2, [pc, #108]	; (800f358 <TIM_OC2_SetConfig+0x10c>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d003      	beq.n	800f2f8 <TIM_OC2_SetConfig+0xac>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	4a1a      	ldr	r2, [pc, #104]	; (800f35c <TIM_OC2_SetConfig+0x110>)
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	d113      	bne.n	800f320 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	695b      	ldr	r3, [r3, #20]
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	693a      	ldr	r2, [r7, #16]
 800f310:	4313      	orrs	r3, r2
 800f312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	699b      	ldr	r3, [r3, #24]
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	693a      	ldr	r2, [r7, #16]
 800f31c:	4313      	orrs	r3, r2
 800f31e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	693a      	ldr	r2, [r7, #16]
 800f324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	685a      	ldr	r2, [r3, #4]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	697a      	ldr	r2, [r7, #20]
 800f338:	621a      	str	r2, [r3, #32]
}
 800f33a:	bf00      	nop
 800f33c:	371c      	adds	r7, #28
 800f33e:	46bd      	mov	sp, r7
 800f340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop
 800f348:	feff8fff 	.word	0xfeff8fff
 800f34c:	40010000 	.word	0x40010000
 800f350:	40010400 	.word	0x40010400
 800f354:	40014000 	.word	0x40014000
 800f358:	40014400 	.word	0x40014400
 800f35c:	40014800 	.word	0x40014800

0800f360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f360:	b480      	push	{r7}
 800f362:	b087      	sub	sp, #28
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6a1b      	ldr	r3, [r3, #32]
 800f36e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a1b      	ldr	r3, [r3, #32]
 800f37a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	69db      	ldr	r3, [r3, #28]
 800f386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f023 0303 	bic.w	r3, r3, #3
 800f396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f3a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	021b      	lsls	r3, r3, #8
 800f3b0:	697a      	ldr	r2, [r7, #20]
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4a27      	ldr	r2, [pc, #156]	; (800f458 <TIM_OC3_SetConfig+0xf8>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d003      	beq.n	800f3c6 <TIM_OC3_SetConfig+0x66>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a26      	ldr	r2, [pc, #152]	; (800f45c <TIM_OC3_SetConfig+0xfc>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d10d      	bne.n	800f3e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	021b      	lsls	r3, r3, #8
 800f3d4:	697a      	ldr	r2, [r7, #20]
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	4a1c      	ldr	r2, [pc, #112]	; (800f458 <TIM_OC3_SetConfig+0xf8>)
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d00f      	beq.n	800f40a <TIM_OC3_SetConfig+0xaa>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4a1b      	ldr	r2, [pc, #108]	; (800f45c <TIM_OC3_SetConfig+0xfc>)
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d00b      	beq.n	800f40a <TIM_OC3_SetConfig+0xaa>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4a1a      	ldr	r2, [pc, #104]	; (800f460 <TIM_OC3_SetConfig+0x100>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d007      	beq.n	800f40a <TIM_OC3_SetConfig+0xaa>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4a19      	ldr	r2, [pc, #100]	; (800f464 <TIM_OC3_SetConfig+0x104>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d003      	beq.n	800f40a <TIM_OC3_SetConfig+0xaa>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4a18      	ldr	r2, [pc, #96]	; (800f468 <TIM_OC3_SetConfig+0x108>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d113      	bne.n	800f432 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	695b      	ldr	r3, [r3, #20]
 800f41e:	011b      	lsls	r3, r3, #4
 800f420:	693a      	ldr	r2, [r7, #16]
 800f422:	4313      	orrs	r3, r2
 800f424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	699b      	ldr	r3, [r3, #24]
 800f42a:	011b      	lsls	r3, r3, #4
 800f42c:	693a      	ldr	r2, [r7, #16]
 800f42e:	4313      	orrs	r3, r2
 800f430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	693a      	ldr	r2, [r7, #16]
 800f436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	685a      	ldr	r2, [r3, #4]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	697a      	ldr	r2, [r7, #20]
 800f44a:	621a      	str	r2, [r3, #32]
}
 800f44c:	bf00      	nop
 800f44e:	371c      	adds	r7, #28
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr
 800f458:	40010000 	.word	0x40010000
 800f45c:	40010400 	.word	0x40010400
 800f460:	40014000 	.word	0x40014000
 800f464:	40014400 	.word	0x40014400
 800f468:	40014800 	.word	0x40014800

0800f46c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b087      	sub	sp, #28
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6a1b      	ldr	r3, [r3, #32]
 800f47a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6a1b      	ldr	r3, [r3, #32]
 800f486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	69db      	ldr	r3, [r3, #28]
 800f492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f49a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	021b      	lsls	r3, r3, #8
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f4b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	689b      	ldr	r3, [r3, #8]
 800f4bc:	031b      	lsls	r3, r3, #12
 800f4be:	693a      	ldr	r2, [r7, #16]
 800f4c0:	4313      	orrs	r3, r2
 800f4c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	4a18      	ldr	r2, [pc, #96]	; (800f528 <TIM_OC4_SetConfig+0xbc>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d00f      	beq.n	800f4ec <TIM_OC4_SetConfig+0x80>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	4a17      	ldr	r2, [pc, #92]	; (800f52c <TIM_OC4_SetConfig+0xc0>)
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d00b      	beq.n	800f4ec <TIM_OC4_SetConfig+0x80>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	4a16      	ldr	r2, [pc, #88]	; (800f530 <TIM_OC4_SetConfig+0xc4>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d007      	beq.n	800f4ec <TIM_OC4_SetConfig+0x80>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4a15      	ldr	r2, [pc, #84]	; (800f534 <TIM_OC4_SetConfig+0xc8>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d003      	beq.n	800f4ec <TIM_OC4_SetConfig+0x80>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	4a14      	ldr	r2, [pc, #80]	; (800f538 <TIM_OC4_SetConfig+0xcc>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d109      	bne.n	800f500 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	695b      	ldr	r3, [r3, #20]
 800f4f8:	019b      	lsls	r3, r3, #6
 800f4fa:	697a      	ldr	r2, [r7, #20]
 800f4fc:	4313      	orrs	r3, r2
 800f4fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	697a      	ldr	r2, [r7, #20]
 800f504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	68fa      	ldr	r2, [r7, #12]
 800f50a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	685a      	ldr	r2, [r3, #4]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	693a      	ldr	r2, [r7, #16]
 800f518:	621a      	str	r2, [r3, #32]
}
 800f51a:	bf00      	nop
 800f51c:	371c      	adds	r7, #28
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	40010000 	.word	0x40010000
 800f52c:	40010400 	.word	0x40010400
 800f530:	40014000 	.word	0x40014000
 800f534:	40014400 	.word	0x40014400
 800f538:	40014800 	.word	0x40014800

0800f53c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b087      	sub	sp, #28
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6a1b      	ldr	r3, [r3, #32]
 800f54a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6a1b      	ldr	r3, [r3, #32]
 800f556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f56a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	68fa      	ldr	r2, [r7, #12]
 800f572:	4313      	orrs	r3, r2
 800f574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f57c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	041b      	lsls	r3, r3, #16
 800f584:	693a      	ldr	r2, [r7, #16]
 800f586:	4313      	orrs	r3, r2
 800f588:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	4a17      	ldr	r2, [pc, #92]	; (800f5ec <TIM_OC5_SetConfig+0xb0>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d00f      	beq.n	800f5b2 <TIM_OC5_SetConfig+0x76>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	4a16      	ldr	r2, [pc, #88]	; (800f5f0 <TIM_OC5_SetConfig+0xb4>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d00b      	beq.n	800f5b2 <TIM_OC5_SetConfig+0x76>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4a15      	ldr	r2, [pc, #84]	; (800f5f4 <TIM_OC5_SetConfig+0xb8>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d007      	beq.n	800f5b2 <TIM_OC5_SetConfig+0x76>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4a14      	ldr	r2, [pc, #80]	; (800f5f8 <TIM_OC5_SetConfig+0xbc>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d003      	beq.n	800f5b2 <TIM_OC5_SetConfig+0x76>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4a13      	ldr	r2, [pc, #76]	; (800f5fc <TIM_OC5_SetConfig+0xc0>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d109      	bne.n	800f5c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f5b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	695b      	ldr	r3, [r3, #20]
 800f5be:	021b      	lsls	r3, r3, #8
 800f5c0:	697a      	ldr	r2, [r7, #20]
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	697a      	ldr	r2, [r7, #20]
 800f5ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	685a      	ldr	r2, [r3, #4]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	693a      	ldr	r2, [r7, #16]
 800f5de:	621a      	str	r2, [r3, #32]
}
 800f5e0:	bf00      	nop
 800f5e2:	371c      	adds	r7, #28
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr
 800f5ec:	40010000 	.word	0x40010000
 800f5f0:	40010400 	.word	0x40010400
 800f5f4:	40014000 	.word	0x40014000
 800f5f8:	40014400 	.word	0x40014400
 800f5fc:	40014800 	.word	0x40014800

0800f600 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f600:	b480      	push	{r7}
 800f602:	b087      	sub	sp, #28
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6a1b      	ldr	r3, [r3, #32]
 800f60e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a1b      	ldr	r3, [r3, #32]
 800f61a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f62e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	021b      	lsls	r3, r3, #8
 800f636:	68fa      	ldr	r2, [r7, #12]
 800f638:	4313      	orrs	r3, r2
 800f63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	051b      	lsls	r3, r3, #20
 800f64a:	693a      	ldr	r2, [r7, #16]
 800f64c:	4313      	orrs	r3, r2
 800f64e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a18      	ldr	r2, [pc, #96]	; (800f6b4 <TIM_OC6_SetConfig+0xb4>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d00f      	beq.n	800f678 <TIM_OC6_SetConfig+0x78>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a17      	ldr	r2, [pc, #92]	; (800f6b8 <TIM_OC6_SetConfig+0xb8>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d00b      	beq.n	800f678 <TIM_OC6_SetConfig+0x78>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4a16      	ldr	r2, [pc, #88]	; (800f6bc <TIM_OC6_SetConfig+0xbc>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d007      	beq.n	800f678 <TIM_OC6_SetConfig+0x78>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	4a15      	ldr	r2, [pc, #84]	; (800f6c0 <TIM_OC6_SetConfig+0xc0>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d003      	beq.n	800f678 <TIM_OC6_SetConfig+0x78>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a14      	ldr	r2, [pc, #80]	; (800f6c4 <TIM_OC6_SetConfig+0xc4>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d109      	bne.n	800f68c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f67e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	695b      	ldr	r3, [r3, #20]
 800f684:	029b      	lsls	r3, r3, #10
 800f686:	697a      	ldr	r2, [r7, #20]
 800f688:	4313      	orrs	r3, r2
 800f68a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	697a      	ldr	r2, [r7, #20]
 800f690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	685a      	ldr	r2, [r3, #4]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	693a      	ldr	r2, [r7, #16]
 800f6a4:	621a      	str	r2, [r3, #32]
}
 800f6a6:	bf00      	nop
 800f6a8:	371c      	adds	r7, #28
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr
 800f6b2:	bf00      	nop
 800f6b4:	40010000 	.word	0x40010000
 800f6b8:	40010400 	.word	0x40010400
 800f6bc:	40014000 	.word	0x40014000
 800f6c0:	40014400 	.word	0x40014400
 800f6c4:	40014800 	.word	0x40014800

0800f6c8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d109      	bne.n	800f6ec <HAL_TIMEx_PWMN_Start+0x24>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	bf14      	ite	ne
 800f6e4:	2301      	movne	r3, #1
 800f6e6:	2300      	moveq	r3, #0
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	e022      	b.n	800f732 <HAL_TIMEx_PWMN_Start+0x6a>
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	2b04      	cmp	r3, #4
 800f6f0:	d109      	bne.n	800f706 <HAL_TIMEx_PWMN_Start+0x3e>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	bf14      	ite	ne
 800f6fe:	2301      	movne	r3, #1
 800f700:	2300      	moveq	r3, #0
 800f702:	b2db      	uxtb	r3, r3
 800f704:	e015      	b.n	800f732 <HAL_TIMEx_PWMN_Start+0x6a>
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	2b08      	cmp	r3, #8
 800f70a:	d109      	bne.n	800f720 <HAL_TIMEx_PWMN_Start+0x58>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f712:	b2db      	uxtb	r3, r3
 800f714:	2b01      	cmp	r3, #1
 800f716:	bf14      	ite	ne
 800f718:	2301      	movne	r3, #1
 800f71a:	2300      	moveq	r3, #0
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	e008      	b.n	800f732 <HAL_TIMEx_PWMN_Start+0x6a>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f726:	b2db      	uxtb	r3, r3
 800f728:	2b01      	cmp	r3, #1
 800f72a:	bf14      	ite	ne
 800f72c:	2301      	movne	r3, #1
 800f72e:	2300      	moveq	r3, #0
 800f730:	b2db      	uxtb	r3, r3
 800f732:	2b00      	cmp	r3, #0
 800f734:	d001      	beq.n	800f73a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800f736:	2301      	movs	r3, #1
 800f738:	e06e      	b.n	800f818 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d104      	bne.n	800f74a <HAL_TIMEx_PWMN_Start+0x82>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2202      	movs	r2, #2
 800f744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f748:	e013      	b.n	800f772 <HAL_TIMEx_PWMN_Start+0xaa>
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	2b04      	cmp	r3, #4
 800f74e:	d104      	bne.n	800f75a <HAL_TIMEx_PWMN_Start+0x92>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2202      	movs	r2, #2
 800f754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f758:	e00b      	b.n	800f772 <HAL_TIMEx_PWMN_Start+0xaa>
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	2b08      	cmp	r3, #8
 800f75e:	d104      	bne.n	800f76a <HAL_TIMEx_PWMN_Start+0xa2>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2202      	movs	r2, #2
 800f764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f768:	e003      	b.n	800f772 <HAL_TIMEx_PWMN_Start+0xaa>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2202      	movs	r2, #2
 800f76e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2204      	movs	r2, #4
 800f778:	6839      	ldr	r1, [r7, #0]
 800f77a:	4618      	mov	r0, r3
 800f77c:	f000 f982 	bl	800fa84 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f78e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a22      	ldr	r2, [pc, #136]	; (800f820 <HAL_TIMEx_PWMN_Start+0x158>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d01d      	beq.n	800f7d6 <HAL_TIMEx_PWMN_Start+0x10e>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7a2:	d018      	beq.n	800f7d6 <HAL_TIMEx_PWMN_Start+0x10e>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a1e      	ldr	r2, [pc, #120]	; (800f824 <HAL_TIMEx_PWMN_Start+0x15c>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d013      	beq.n	800f7d6 <HAL_TIMEx_PWMN_Start+0x10e>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4a1d      	ldr	r2, [pc, #116]	; (800f828 <HAL_TIMEx_PWMN_Start+0x160>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d00e      	beq.n	800f7d6 <HAL_TIMEx_PWMN_Start+0x10e>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a1b      	ldr	r2, [pc, #108]	; (800f82c <HAL_TIMEx_PWMN_Start+0x164>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d009      	beq.n	800f7d6 <HAL_TIMEx_PWMN_Start+0x10e>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4a1a      	ldr	r2, [pc, #104]	; (800f830 <HAL_TIMEx_PWMN_Start+0x168>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d004      	beq.n	800f7d6 <HAL_TIMEx_PWMN_Start+0x10e>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	4a18      	ldr	r2, [pc, #96]	; (800f834 <HAL_TIMEx_PWMN_Start+0x16c>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d115      	bne.n	800f802 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	689a      	ldr	r2, [r3, #8]
 800f7dc:	4b16      	ldr	r3, [pc, #88]	; (800f838 <HAL_TIMEx_PWMN_Start+0x170>)
 800f7de:	4013      	ands	r3, r2
 800f7e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2b06      	cmp	r3, #6
 800f7e6:	d015      	beq.n	800f814 <HAL_TIMEx_PWMN_Start+0x14c>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7ee:	d011      	beq.n	800f814 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f042 0201 	orr.w	r2, r2, #1
 800f7fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f800:	e008      	b.n	800f814 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f042 0201 	orr.w	r2, r2, #1
 800f810:	601a      	str	r2, [r3, #0]
 800f812:	e000      	b.n	800f816 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f814:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f816:	2300      	movs	r3, #0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3710      	adds	r7, #16
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	40010000 	.word	0x40010000
 800f824:	40000400 	.word	0x40000400
 800f828:	40000800 	.word	0x40000800
 800f82c:	40000c00 	.word	0x40000c00
 800f830:	40010400 	.word	0x40010400
 800f834:	40001800 	.word	0x40001800
 800f838:	00010007 	.word	0x00010007

0800f83c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b085      	sub	sp, #20
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d101      	bne.n	800f854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f850:	2302      	movs	r3, #2
 800f852:	e068      	b.n	800f926 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2201      	movs	r2, #1
 800f858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2202      	movs	r2, #2
 800f860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a2e      	ldr	r2, [pc, #184]	; (800f934 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d004      	beq.n	800f888 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a2d      	ldr	r2, [pc, #180]	; (800f938 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d108      	bne.n	800f89a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f88e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	68fa      	ldr	r2, [r7, #12]
 800f896:	4313      	orrs	r3, r2
 800f898:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	68fa      	ldr	r2, [r7, #12]
 800f8b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a1e      	ldr	r2, [pc, #120]	; (800f934 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d01d      	beq.n	800f8fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8c6:	d018      	beq.n	800f8fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a1b      	ldr	r2, [pc, #108]	; (800f93c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d013      	beq.n	800f8fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a1a      	ldr	r2, [pc, #104]	; (800f940 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d00e      	beq.n	800f8fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a18      	ldr	r2, [pc, #96]	; (800f944 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d009      	beq.n	800f8fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4a13      	ldr	r2, [pc, #76]	; (800f938 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d004      	beq.n	800f8fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a14      	ldr	r2, [pc, #80]	; (800f948 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d10c      	bne.n	800f914 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	689b      	ldr	r3, [r3, #8]
 800f906:	68ba      	ldr	r2, [r7, #8]
 800f908:	4313      	orrs	r3, r2
 800f90a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	68ba      	ldr	r2, [r7, #8]
 800f912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2201      	movs	r2, #1
 800f918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f924:	2300      	movs	r3, #0
}
 800f926:	4618      	mov	r0, r3
 800f928:	3714      	adds	r7, #20
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop
 800f934:	40010000 	.word	0x40010000
 800f938:	40010400 	.word	0x40010400
 800f93c:	40000400 	.word	0x40000400
 800f940:	40000800 	.word	0x40000800
 800f944:	40000c00 	.word	0x40000c00
 800f948:	40001800 	.word	0x40001800

0800f94c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b085      	sub	sp, #20
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f956:	2300      	movs	r3, #0
 800f958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f960:	2b01      	cmp	r3, #1
 800f962:	d101      	bne.n	800f968 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f964:	2302      	movs	r3, #2
 800f966:	e065      	b.n	800fa34 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2201      	movs	r2, #1
 800f96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	4313      	orrs	r3, r2
 800f97c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	689b      	ldr	r3, [r3, #8]
 800f988:	4313      	orrs	r3, r2
 800f98a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	4313      	orrs	r3, r2
 800f998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	695b      	ldr	r3, [r3, #20]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	699b      	ldr	r3, [r3, #24]
 800f9dc:	041b      	lsls	r3, r3, #16
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4a16      	ldr	r2, [pc, #88]	; (800fa40 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d004      	beq.n	800f9f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4a14      	ldr	r2, [pc, #80]	; (800fa44 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d115      	bne.n	800fa22 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa00:	051b      	lsls	r3, r3, #20
 800fa02:	4313      	orrs	r3, r2
 800fa04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	69db      	ldr	r3, [r3, #28]
 800fa10:	4313      	orrs	r3, r2
 800fa12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	6a1b      	ldr	r3, [r3, #32]
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3714      	adds	r7, #20
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr
 800fa40:	40010000 	.word	0x40010000
 800fa44:	40010400 	.word	0x40010400

0800fa48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa50:	bf00      	nop
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fa64:	bf00      	nop
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fa78:	bf00      	nop
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b087      	sub	sp, #28
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	f003 031f 	and.w	r3, r3, #31
 800fa96:	2204      	movs	r2, #4
 800fa98:	fa02 f303 	lsl.w	r3, r2, r3
 800fa9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6a1a      	ldr	r2, [r3, #32]
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	43db      	mvns	r3, r3
 800faa6:	401a      	ands	r2, r3
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	6a1a      	ldr	r2, [r3, #32]
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	f003 031f 	and.w	r3, r3, #31
 800fab6:	6879      	ldr	r1, [r7, #4]
 800fab8:	fa01 f303 	lsl.w	r3, r1, r3
 800fabc:	431a      	orrs	r2, r3
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	621a      	str	r2, [r3, #32]
}
 800fac2:	bf00      	nop
 800fac4:	371c      	adds	r7, #28
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b082      	sub	sp, #8
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d101      	bne.n	800fae0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fadc:	2301      	movs	r3, #1
 800fade:	e042      	b.n	800fb66 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d106      	bne.n	800faf8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2200      	movs	r2, #0
 800faee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f7f3 fc88 	bl	8003408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2224      	movs	r2, #36	; 0x24
 800fafc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f022 0201 	bic.w	r2, r2, #1
 800fb0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 fbe3 	bl	80102dc <UART_SetConfig>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d101      	bne.n	800fb20 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e022      	b.n	800fb66 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d002      	beq.n	800fb2e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f001 f937 	bl	8010d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	685a      	ldr	r2, [r3, #4]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fb3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	689a      	ldr	r2, [r3, #8]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	681a      	ldr	r2, [r3, #0]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f042 0201 	orr.w	r2, r2, #1
 800fb5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f001 f9be 	bl	8010ee0 <UART_CheckIdleState>
 800fb64:	4603      	mov	r3, r0
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b08a      	sub	sp, #40	; 0x28
 800fb72:	af02      	add	r7, sp, #8
 800fb74:	60f8      	str	r0, [r7, #12]
 800fb76:	60b9      	str	r1, [r7, #8]
 800fb78:	603b      	str	r3, [r7, #0]
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb84:	2b20      	cmp	r3, #32
 800fb86:	f040 8083 	bne.w	800fc90 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d002      	beq.n	800fb96 <HAL_UART_Transmit+0x28>
 800fb90:	88fb      	ldrh	r3, [r7, #6]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d101      	bne.n	800fb9a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fb96:	2301      	movs	r3, #1
 800fb98:	e07b      	b.n	800fc92 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d101      	bne.n	800fba8 <HAL_UART_Transmit+0x3a>
 800fba4:	2302      	movs	r3, #2
 800fba6:	e074      	b.n	800fc92 <HAL_UART_Transmit+0x124>
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2221      	movs	r2, #33	; 0x21
 800fbbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fbc0:	f7f6 f84e 	bl	8005c60 <HAL_GetTick>
 800fbc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	88fa      	ldrh	r2, [r7, #6]
 800fbca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	88fa      	ldrh	r2, [r7, #6]
 800fbd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	689b      	ldr	r3, [r3, #8]
 800fbda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbde:	d108      	bne.n	800fbf2 <HAL_UART_Transmit+0x84>
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	691b      	ldr	r3, [r3, #16]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d104      	bne.n	800fbf2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	61bb      	str	r3, [r7, #24]
 800fbf0:	e003      	b.n	800fbfa <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800fc02:	e02c      	b.n	800fc5e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	9300      	str	r3, [sp, #0]
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	2180      	movs	r1, #128	; 0x80
 800fc0e:	68f8      	ldr	r0, [r7, #12]
 800fc10:	f001 f9b1 	bl	8010f76 <UART_WaitOnFlagUntilTimeout>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d001      	beq.n	800fc1e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800fc1a:	2303      	movs	r3, #3
 800fc1c:	e039      	b.n	800fc92 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d10b      	bne.n	800fc3c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	881b      	ldrh	r3, [r3, #0]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	3302      	adds	r3, #2
 800fc38:	61bb      	str	r3, [r7, #24]
 800fc3a:	e007      	b.n	800fc4c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	781a      	ldrb	r2, [r3, #0]
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	3301      	adds	r3, #1
 800fc4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	3b01      	subs	r3, #1
 800fc56:	b29a      	uxth	r2, r3
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d1cc      	bne.n	800fc04 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	2200      	movs	r2, #0
 800fc72:	2140      	movs	r1, #64	; 0x40
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	f001 f97e 	bl	8010f76 <UART_WaitOnFlagUntilTimeout>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fc80:	2303      	movs	r3, #3
 800fc82:	e006      	b.n	800fc92 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2220      	movs	r2, #32
 800fc88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	e000      	b.n	800fc92 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fc90:	2302      	movs	r3, #2
  }
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3720      	adds	r7, #32
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
	...

0800fc9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	4613      	mov	r3, r2
 800fca8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcb0:	2b20      	cmp	r3, #32
 800fcb2:	d131      	bne.n	800fd18 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d002      	beq.n	800fcc0 <HAL_UART_Receive_IT+0x24>
 800fcba:	88fb      	ldrh	r3, [r7, #6]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d101      	bne.n	800fcc4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e02a      	b.n	800fd1a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d101      	bne.n	800fcd2 <HAL_UART_Receive_IT+0x36>
 800fcce:	2302      	movs	r3, #2
 800fcd0:	e023      	b.n	800fd1a <HAL_UART_Receive_IT+0x7e>
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2201      	movs	r2, #1
 800fcd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	4a0f      	ldr	r2, [pc, #60]	; (800fd24 <HAL_UART_Receive_IT+0x88>)
 800fce6:	4293      	cmp	r3, r2
 800fce8:	d00e      	beq.n	800fd08 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d007      	beq.n	800fd08 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	681a      	ldr	r2, [r3, #0]
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800fd06:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fd08:	88fb      	ldrh	r3, [r7, #6]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	68b9      	ldr	r1, [r7, #8]
 800fd0e:	68f8      	ldr	r0, [r7, #12]
 800fd10:	f001 f9b2 	bl	8011078 <UART_Start_Receive_IT>
 800fd14:	4603      	mov	r3, r0
 800fd16:	e000      	b.n	800fd1a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800fd18:	2302      	movs	r3, #2
  }
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3710      	adds	r7, #16
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop
 800fd24:	58000c00 	.word	0x58000c00

0800fd28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b088      	sub	sp, #32
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	69db      	ldr	r3, [r3, #28]
 800fd36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	689b      	ldr	r3, [r3, #8]
 800fd46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fd48:	69fa      	ldr	r2, [r7, #28]
 800fd4a:	f640 030f 	movw	r3, #2063	; 0x80f
 800fd4e:	4013      	ands	r3, r2
 800fd50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d118      	bne.n	800fd8a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	f003 0320 	and.w	r3, r3, #32
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d013      	beq.n	800fd8a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	f003 0320 	and.w	r3, r3, #32
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d104      	bne.n	800fd76 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d009      	beq.n	800fd8a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f000 8282 	beq.w	8010284 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	4798      	blx	r3
      }
      return;
 800fd88:	e27c      	b.n	8010284 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	f000 80ef 	beq.w	800ff70 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fd92:	697a      	ldr	r2, [r7, #20]
 800fd94:	4b73      	ldr	r3, [pc, #460]	; (800ff64 <HAL_UART_IRQHandler+0x23c>)
 800fd96:	4013      	ands	r3, r2
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d105      	bne.n	800fda8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fd9c:	69ba      	ldr	r2, [r7, #24]
 800fd9e:	4b72      	ldr	r3, [pc, #456]	; (800ff68 <HAL_UART_IRQHandler+0x240>)
 800fda0:	4013      	ands	r3, r2
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f000 80e4 	beq.w	800ff70 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	f003 0301 	and.w	r3, r3, #1
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d010      	beq.n	800fdd4 <HAL_UART_IRQHandler+0xac>
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00b      	beq.n	800fdd4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdca:	f043 0201 	orr.w	r2, r3, #1
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	f003 0302 	and.w	r3, r3, #2
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d010      	beq.n	800fe00 <HAL_UART_IRQHandler+0xd8>
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	f003 0301 	and.w	r3, r3, #1
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d00b      	beq.n	800fe00 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2202      	movs	r2, #2
 800fdee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdf6:	f043 0204 	orr.w	r2, r3, #4
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	f003 0304 	and.w	r3, r3, #4
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d010      	beq.n	800fe2c <HAL_UART_IRQHandler+0x104>
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f003 0301 	and.w	r3, r3, #1
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00b      	beq.n	800fe2c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	2204      	movs	r2, #4
 800fe1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe22:	f043 0202 	orr.w	r2, r3, #2
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	f003 0308 	and.w	r3, r3, #8
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d015      	beq.n	800fe62 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	f003 0320 	and.w	r3, r3, #32
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d104      	bne.n	800fe4a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fe40:	697a      	ldr	r2, [r7, #20]
 800fe42:	4b48      	ldr	r3, [pc, #288]	; (800ff64 <HAL_UART_IRQHandler+0x23c>)
 800fe44:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00b      	beq.n	800fe62 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2208      	movs	r2, #8
 800fe50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe58:	f043 0208 	orr.w	r2, r3, #8
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fe62:	69fb      	ldr	r3, [r7, #28]
 800fe64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d011      	beq.n	800fe90 <HAL_UART_IRQHandler+0x168>
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00c      	beq.n	800fe90 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe86:	f043 0220 	orr.w	r2, r3, #32
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	f000 81f6 	beq.w	8010288 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	f003 0320 	and.w	r3, r3, #32
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d011      	beq.n	800feca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	f003 0320 	and.w	r3, r3, #32
 800feac:	2b00      	cmp	r3, #0
 800feae:	d104      	bne.n	800feba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d007      	beq.n	800feca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d003      	beq.n	800feca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fed0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	689b      	ldr	r3, [r3, #8]
 800fed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fedc:	2b40      	cmp	r3, #64	; 0x40
 800fede:	d004      	beq.n	800feea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d031      	beq.n	800ff4e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f001 f982 	bl	80111f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	689b      	ldr	r3, [r3, #8]
 800fef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fefa:	2b40      	cmp	r3, #64	; 0x40
 800fefc:	d123      	bne.n	800ff46 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	689a      	ldr	r2, [r3, #8]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ff0c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d013      	beq.n	800ff3e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff1a:	4a14      	ldr	r2, [pc, #80]	; (800ff6c <HAL_UART_IRQHandler+0x244>)
 800ff1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7f7 fcd6 	bl	80078d4 <HAL_DMA_Abort_IT>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d017      	beq.n	800ff5e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ff38:	4610      	mov	r0, r2
 800ff3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff3c:	e00f      	b.n	800ff5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f000 f9b6 	bl	80102b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff44:	e00b      	b.n	800ff5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 f9b2 	bl	80102b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff4c:	e007      	b.n	800ff5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 f9ae 	bl	80102b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2200      	movs	r2, #0
 800ff58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ff5c:	e194      	b.n	8010288 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff5e:	bf00      	nop
    return;
 800ff60:	e192      	b.n	8010288 <HAL_UART_IRQHandler+0x560>
 800ff62:	bf00      	nop
 800ff64:	10000001 	.word	0x10000001
 800ff68:	04000120 	.word	0x04000120
 800ff6c:	08011259 	.word	0x08011259

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	f040 810f 	bne.w	8010198 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	f003 0310 	and.w	r3, r3, #16
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f000 8109 	beq.w	8010198 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ff86:	69bb      	ldr	r3, [r7, #24]
 800ff88:	f003 0310 	and.w	r3, r3, #16
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	f000 8103 	beq.w	8010198 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	2210      	movs	r2, #16
 800ff98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	689b      	ldr	r3, [r3, #8]
 800ffa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffa4:	2b40      	cmp	r3, #64	; 0x40
 800ffa6:	f040 80bb 	bne.w	8010120 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4a96      	ldr	r2, [pc, #600]	; (801020c <HAL_UART_IRQHandler+0x4e4>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d059      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a94      	ldr	r2, [pc, #592]	; (8010210 <HAL_UART_IRQHandler+0x4e8>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d053      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4a92      	ldr	r2, [pc, #584]	; (8010214 <HAL_UART_IRQHandler+0x4ec>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d04d      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	4a90      	ldr	r2, [pc, #576]	; (8010218 <HAL_UART_IRQHandler+0x4f0>)
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d047      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a8e      	ldr	r2, [pc, #568]	; (801021c <HAL_UART_IRQHandler+0x4f4>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d041      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a8c      	ldr	r2, [pc, #560]	; (8010220 <HAL_UART_IRQHandler+0x4f8>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d03b      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4a8a      	ldr	r2, [pc, #552]	; (8010224 <HAL_UART_IRQHandler+0x4fc>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d035      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4a88      	ldr	r2, [pc, #544]	; (8010228 <HAL_UART_IRQHandler+0x500>)
 8010006:	4293      	cmp	r3, r2
 8010008:	d02f      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4a86      	ldr	r2, [pc, #536]	; (801022c <HAL_UART_IRQHandler+0x504>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d029      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	4a84      	ldr	r2, [pc, #528]	; (8010230 <HAL_UART_IRQHandler+0x508>)
 801001e:	4293      	cmp	r3, r2
 8010020:	d023      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4a82      	ldr	r2, [pc, #520]	; (8010234 <HAL_UART_IRQHandler+0x50c>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d01d      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4a80      	ldr	r2, [pc, #512]	; (8010238 <HAL_UART_IRQHandler+0x510>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d017      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4a7e      	ldr	r2, [pc, #504]	; (801023c <HAL_UART_IRQHandler+0x514>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d011      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a7c      	ldr	r2, [pc, #496]	; (8010240 <HAL_UART_IRQHandler+0x518>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d00b      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a7a      	ldr	r2, [pc, #488]	; (8010244 <HAL_UART_IRQHandler+0x51c>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d005      	beq.n	801006a <HAL_UART_IRQHandler+0x342>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4a78      	ldr	r2, [pc, #480]	; (8010248 <HAL_UART_IRQHandler+0x520>)
 8010066:	4293      	cmp	r3, r2
 8010068:	d105      	bne.n	8010076 <HAL_UART_IRQHandler+0x34e>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	b29b      	uxth	r3, r3
 8010074:	e004      	b.n	8010080 <HAL_UART_IRQHandler+0x358>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	b29b      	uxth	r3, r3
 8010080:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8010082:	893b      	ldrh	r3, [r7, #8]
 8010084:	2b00      	cmp	r3, #0
 8010086:	f000 8101 	beq.w	801028c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010090:	893a      	ldrh	r2, [r7, #8]
 8010092:	429a      	cmp	r2, r3
 8010094:	f080 80fa 	bcs.w	801028c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	893a      	ldrh	r2, [r7, #8]
 801009c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100a4:	69db      	ldr	r3, [r3, #28]
 80100a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100aa:	d02b      	beq.n	8010104 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80100ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	689a      	ldr	r2, [r3, #8]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f022 0201 	bic.w	r2, r2, #1
 80100ca:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	689a      	ldr	r2, [r3, #8]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80100da:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2220      	movs	r2, #32
 80100e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f022 0210 	bic.w	r2, r2, #16
 80100f8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100fe:	4618      	mov	r0, r3
 8010100:	f7f7 f8ca 	bl	8007298 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010110:	b29b      	uxth	r3, r3
 8010112:	1ad3      	subs	r3, r2, r3
 8010114:	b29b      	uxth	r3, r3
 8010116:	4619      	mov	r1, r3
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 f8d3 	bl	80102c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801011e:	e0b5      	b.n	801028c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801012c:	b29b      	uxth	r3, r3
 801012e:	1ad3      	subs	r3, r2, r3
 8010130:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010138:	b29b      	uxth	r3, r3
 801013a:	2b00      	cmp	r3, #0
 801013c:	f000 80a8 	beq.w	8010290 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8010140:	897b      	ldrh	r3, [r7, #10]
 8010142:	2b00      	cmp	r3, #0
 8010144:	f000 80a4 	beq.w	8010290 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010156:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	6899      	ldr	r1, [r3, #8]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	4b3a      	ldr	r3, [pc, #232]	; (801024c <HAL_UART_IRQHandler+0x524>)
 8010164:	400b      	ands	r3, r1
 8010166:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2220      	movs	r2, #32
 801016c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f022 0210 	bic.w	r2, r2, #16
 801018a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801018c:	897b      	ldrh	r3, [r7, #10]
 801018e:	4619      	mov	r1, r3
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f000 f897 	bl	80102c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010196:	e07b      	b.n	8010290 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00d      	beq.n	80101be <HAL_UART_IRQHandler+0x496>
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d008      	beq.n	80101be <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80101b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f001 fb5a 	bl	8011870 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101bc:	e06b      	b.n	8010296 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d012      	beq.n	80101ee <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d104      	bne.n	80101dc <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d008      	beq.n	80101ee <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d057      	beq.n	8010294 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	4798      	blx	r3
    }
    return;
 80101ec:	e052      	b.n	8010294 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d02b      	beq.n	8010250 <HAL_UART_IRQHandler+0x528>
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d026      	beq.n	8010250 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f001 f83e 	bl	8011284 <UART_EndTransmit_IT>
    return;
 8010208:	e045      	b.n	8010296 <HAL_UART_IRQHandler+0x56e>
 801020a:	bf00      	nop
 801020c:	40020010 	.word	0x40020010
 8010210:	40020028 	.word	0x40020028
 8010214:	40020040 	.word	0x40020040
 8010218:	40020058 	.word	0x40020058
 801021c:	40020070 	.word	0x40020070
 8010220:	40020088 	.word	0x40020088
 8010224:	400200a0 	.word	0x400200a0
 8010228:	400200b8 	.word	0x400200b8
 801022c:	40020410 	.word	0x40020410
 8010230:	40020428 	.word	0x40020428
 8010234:	40020440 	.word	0x40020440
 8010238:	40020458 	.word	0x40020458
 801023c:	40020470 	.word	0x40020470
 8010240:	40020488 	.word	0x40020488
 8010244:	400204a0 	.word	0x400204a0
 8010248:	400204b8 	.word	0x400204b8
 801024c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010256:	2b00      	cmp	r3, #0
 8010258:	d008      	beq.n	801026c <HAL_UART_IRQHandler+0x544>
 801025a:	69bb      	ldr	r3, [r7, #24]
 801025c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010260:	2b00      	cmp	r3, #0
 8010262:	d003      	beq.n	801026c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f001 fb17 	bl	8011898 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801026a:	e014      	b.n	8010296 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00f      	beq.n	8010296 <HAL_UART_IRQHandler+0x56e>
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	2b00      	cmp	r3, #0
 801027a:	da0c      	bge.n	8010296 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f001 fb01 	bl	8011884 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010282:	e008      	b.n	8010296 <HAL_UART_IRQHandler+0x56e>
      return;
 8010284:	bf00      	nop
 8010286:	e006      	b.n	8010296 <HAL_UART_IRQHandler+0x56e>
    return;
 8010288:	bf00      	nop
 801028a:	e004      	b.n	8010296 <HAL_UART_IRQHandler+0x56e>
      return;
 801028c:	bf00      	nop
 801028e:	e002      	b.n	8010296 <HAL_UART_IRQHandler+0x56e>
      return;
 8010290:	bf00      	nop
 8010292:	e000      	b.n	8010296 <HAL_UART_IRQHandler+0x56e>
    return;
 8010294:	bf00      	nop
  }
}
 8010296:	3720      	adds	r7, #32
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80102a4:	bf00      	nop
 80102a6:	370c      	adds	r7, #12
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80102b8:	bf00      	nop
 80102ba:	370c      	adds	r7, #12
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr

080102c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	460b      	mov	r3, r1
 80102ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80102d0:	bf00      	nop
 80102d2:	370c      	adds	r7, #12
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr

080102dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80102dc:	b5b0      	push	{r4, r5, r7, lr}
 80102de:	b08e      	sub	sp, #56	; 0x38
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80102e4:	2300      	movs	r3, #0
 80102e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	689a      	ldr	r2, [r3, #8]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	691b      	ldr	r3, [r3, #16]
 80102f2:	431a      	orrs	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	695b      	ldr	r3, [r3, #20]
 80102f8:	431a      	orrs	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	69db      	ldr	r3, [r3, #28]
 80102fe:	4313      	orrs	r3, r2
 8010300:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	4bbf      	ldr	r3, [pc, #764]	; (8010608 <UART_SetConfig+0x32c>)
 801030a:	4013      	ands	r3, r2
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	6812      	ldr	r2, [r2, #0]
 8010310:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010312:	430b      	orrs	r3, r1
 8010314:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	68da      	ldr	r2, [r3, #12]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	430a      	orrs	r2, r1
 801032a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4ab5      	ldr	r2, [pc, #724]	; (801060c <UART_SetConfig+0x330>)
 8010338:	4293      	cmp	r3, r2
 801033a:	d004      	beq.n	8010346 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6a1b      	ldr	r3, [r3, #32]
 8010340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010342:	4313      	orrs	r3, r2
 8010344:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	689a      	ldr	r2, [r3, #8]
 801034c:	4bb0      	ldr	r3, [pc, #704]	; (8010610 <UART_SetConfig+0x334>)
 801034e:	4013      	ands	r3, r2
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	6812      	ldr	r2, [r2, #0]
 8010354:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010356:	430b      	orrs	r3, r1
 8010358:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010360:	f023 010f 	bic.w	r1, r3, #15
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	430a      	orrs	r2, r1
 801036e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4aa7      	ldr	r2, [pc, #668]	; (8010614 <UART_SetConfig+0x338>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d176      	bne.n	8010468 <UART_SetConfig+0x18c>
 801037a:	4ba7      	ldr	r3, [pc, #668]	; (8010618 <UART_SetConfig+0x33c>)
 801037c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801037e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010382:	2b28      	cmp	r3, #40	; 0x28
 8010384:	d86c      	bhi.n	8010460 <UART_SetConfig+0x184>
 8010386:	a201      	add	r2, pc, #4	; (adr r2, 801038c <UART_SetConfig+0xb0>)
 8010388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801038c:	08010431 	.word	0x08010431
 8010390:	08010461 	.word	0x08010461
 8010394:	08010461 	.word	0x08010461
 8010398:	08010461 	.word	0x08010461
 801039c:	08010461 	.word	0x08010461
 80103a0:	08010461 	.word	0x08010461
 80103a4:	08010461 	.word	0x08010461
 80103a8:	08010461 	.word	0x08010461
 80103ac:	08010439 	.word	0x08010439
 80103b0:	08010461 	.word	0x08010461
 80103b4:	08010461 	.word	0x08010461
 80103b8:	08010461 	.word	0x08010461
 80103bc:	08010461 	.word	0x08010461
 80103c0:	08010461 	.word	0x08010461
 80103c4:	08010461 	.word	0x08010461
 80103c8:	08010461 	.word	0x08010461
 80103cc:	08010441 	.word	0x08010441
 80103d0:	08010461 	.word	0x08010461
 80103d4:	08010461 	.word	0x08010461
 80103d8:	08010461 	.word	0x08010461
 80103dc:	08010461 	.word	0x08010461
 80103e0:	08010461 	.word	0x08010461
 80103e4:	08010461 	.word	0x08010461
 80103e8:	08010461 	.word	0x08010461
 80103ec:	08010449 	.word	0x08010449
 80103f0:	08010461 	.word	0x08010461
 80103f4:	08010461 	.word	0x08010461
 80103f8:	08010461 	.word	0x08010461
 80103fc:	08010461 	.word	0x08010461
 8010400:	08010461 	.word	0x08010461
 8010404:	08010461 	.word	0x08010461
 8010408:	08010461 	.word	0x08010461
 801040c:	08010451 	.word	0x08010451
 8010410:	08010461 	.word	0x08010461
 8010414:	08010461 	.word	0x08010461
 8010418:	08010461 	.word	0x08010461
 801041c:	08010461 	.word	0x08010461
 8010420:	08010461 	.word	0x08010461
 8010424:	08010461 	.word	0x08010461
 8010428:	08010461 	.word	0x08010461
 801042c:	08010459 	.word	0x08010459
 8010430:	2301      	movs	r3, #1
 8010432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010436:	e222      	b.n	801087e <UART_SetConfig+0x5a2>
 8010438:	2304      	movs	r3, #4
 801043a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801043e:	e21e      	b.n	801087e <UART_SetConfig+0x5a2>
 8010440:	2308      	movs	r3, #8
 8010442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010446:	e21a      	b.n	801087e <UART_SetConfig+0x5a2>
 8010448:	2310      	movs	r3, #16
 801044a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801044e:	e216      	b.n	801087e <UART_SetConfig+0x5a2>
 8010450:	2320      	movs	r3, #32
 8010452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010456:	e212      	b.n	801087e <UART_SetConfig+0x5a2>
 8010458:	2340      	movs	r3, #64	; 0x40
 801045a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801045e:	e20e      	b.n	801087e <UART_SetConfig+0x5a2>
 8010460:	2380      	movs	r3, #128	; 0x80
 8010462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010466:	e20a      	b.n	801087e <UART_SetConfig+0x5a2>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4a6b      	ldr	r2, [pc, #428]	; (801061c <UART_SetConfig+0x340>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d130      	bne.n	80104d4 <UART_SetConfig+0x1f8>
 8010472:	4b69      	ldr	r3, [pc, #420]	; (8010618 <UART_SetConfig+0x33c>)
 8010474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010476:	f003 0307 	and.w	r3, r3, #7
 801047a:	2b05      	cmp	r3, #5
 801047c:	d826      	bhi.n	80104cc <UART_SetConfig+0x1f0>
 801047e:	a201      	add	r2, pc, #4	; (adr r2, 8010484 <UART_SetConfig+0x1a8>)
 8010480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010484:	0801049d 	.word	0x0801049d
 8010488:	080104a5 	.word	0x080104a5
 801048c:	080104ad 	.word	0x080104ad
 8010490:	080104b5 	.word	0x080104b5
 8010494:	080104bd 	.word	0x080104bd
 8010498:	080104c5 	.word	0x080104c5
 801049c:	2300      	movs	r3, #0
 801049e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104a2:	e1ec      	b.n	801087e <UART_SetConfig+0x5a2>
 80104a4:	2304      	movs	r3, #4
 80104a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104aa:	e1e8      	b.n	801087e <UART_SetConfig+0x5a2>
 80104ac:	2308      	movs	r3, #8
 80104ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104b2:	e1e4      	b.n	801087e <UART_SetConfig+0x5a2>
 80104b4:	2310      	movs	r3, #16
 80104b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104ba:	e1e0      	b.n	801087e <UART_SetConfig+0x5a2>
 80104bc:	2320      	movs	r3, #32
 80104be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104c2:	e1dc      	b.n	801087e <UART_SetConfig+0x5a2>
 80104c4:	2340      	movs	r3, #64	; 0x40
 80104c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104ca:	e1d8      	b.n	801087e <UART_SetConfig+0x5a2>
 80104cc:	2380      	movs	r3, #128	; 0x80
 80104ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80104d2:	e1d4      	b.n	801087e <UART_SetConfig+0x5a2>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a51      	ldr	r2, [pc, #324]	; (8010620 <UART_SetConfig+0x344>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d130      	bne.n	8010540 <UART_SetConfig+0x264>
 80104de:	4b4e      	ldr	r3, [pc, #312]	; (8010618 <UART_SetConfig+0x33c>)
 80104e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104e2:	f003 0307 	and.w	r3, r3, #7
 80104e6:	2b05      	cmp	r3, #5
 80104e8:	d826      	bhi.n	8010538 <UART_SetConfig+0x25c>
 80104ea:	a201      	add	r2, pc, #4	; (adr r2, 80104f0 <UART_SetConfig+0x214>)
 80104ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f0:	08010509 	.word	0x08010509
 80104f4:	08010511 	.word	0x08010511
 80104f8:	08010519 	.word	0x08010519
 80104fc:	08010521 	.word	0x08010521
 8010500:	08010529 	.word	0x08010529
 8010504:	08010531 	.word	0x08010531
 8010508:	2300      	movs	r3, #0
 801050a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801050e:	e1b6      	b.n	801087e <UART_SetConfig+0x5a2>
 8010510:	2304      	movs	r3, #4
 8010512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010516:	e1b2      	b.n	801087e <UART_SetConfig+0x5a2>
 8010518:	2308      	movs	r3, #8
 801051a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801051e:	e1ae      	b.n	801087e <UART_SetConfig+0x5a2>
 8010520:	2310      	movs	r3, #16
 8010522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010526:	e1aa      	b.n	801087e <UART_SetConfig+0x5a2>
 8010528:	2320      	movs	r3, #32
 801052a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801052e:	e1a6      	b.n	801087e <UART_SetConfig+0x5a2>
 8010530:	2340      	movs	r3, #64	; 0x40
 8010532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010536:	e1a2      	b.n	801087e <UART_SetConfig+0x5a2>
 8010538:	2380      	movs	r3, #128	; 0x80
 801053a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801053e:	e19e      	b.n	801087e <UART_SetConfig+0x5a2>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4a37      	ldr	r2, [pc, #220]	; (8010624 <UART_SetConfig+0x348>)
 8010546:	4293      	cmp	r3, r2
 8010548:	d130      	bne.n	80105ac <UART_SetConfig+0x2d0>
 801054a:	4b33      	ldr	r3, [pc, #204]	; (8010618 <UART_SetConfig+0x33c>)
 801054c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801054e:	f003 0307 	and.w	r3, r3, #7
 8010552:	2b05      	cmp	r3, #5
 8010554:	d826      	bhi.n	80105a4 <UART_SetConfig+0x2c8>
 8010556:	a201      	add	r2, pc, #4	; (adr r2, 801055c <UART_SetConfig+0x280>)
 8010558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801055c:	08010575 	.word	0x08010575
 8010560:	0801057d 	.word	0x0801057d
 8010564:	08010585 	.word	0x08010585
 8010568:	0801058d 	.word	0x0801058d
 801056c:	08010595 	.word	0x08010595
 8010570:	0801059d 	.word	0x0801059d
 8010574:	2300      	movs	r3, #0
 8010576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801057a:	e180      	b.n	801087e <UART_SetConfig+0x5a2>
 801057c:	2304      	movs	r3, #4
 801057e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010582:	e17c      	b.n	801087e <UART_SetConfig+0x5a2>
 8010584:	2308      	movs	r3, #8
 8010586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801058a:	e178      	b.n	801087e <UART_SetConfig+0x5a2>
 801058c:	2310      	movs	r3, #16
 801058e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010592:	e174      	b.n	801087e <UART_SetConfig+0x5a2>
 8010594:	2320      	movs	r3, #32
 8010596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801059a:	e170      	b.n	801087e <UART_SetConfig+0x5a2>
 801059c:	2340      	movs	r3, #64	; 0x40
 801059e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105a2:	e16c      	b.n	801087e <UART_SetConfig+0x5a2>
 80105a4:	2380      	movs	r3, #128	; 0x80
 80105a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105aa:	e168      	b.n	801087e <UART_SetConfig+0x5a2>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4a1d      	ldr	r2, [pc, #116]	; (8010628 <UART_SetConfig+0x34c>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d142      	bne.n	801063c <UART_SetConfig+0x360>
 80105b6:	4b18      	ldr	r3, [pc, #96]	; (8010618 <UART_SetConfig+0x33c>)
 80105b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105ba:	f003 0307 	and.w	r3, r3, #7
 80105be:	2b05      	cmp	r3, #5
 80105c0:	d838      	bhi.n	8010634 <UART_SetConfig+0x358>
 80105c2:	a201      	add	r2, pc, #4	; (adr r2, 80105c8 <UART_SetConfig+0x2ec>)
 80105c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105c8:	080105e1 	.word	0x080105e1
 80105cc:	080105e9 	.word	0x080105e9
 80105d0:	080105f1 	.word	0x080105f1
 80105d4:	080105f9 	.word	0x080105f9
 80105d8:	08010601 	.word	0x08010601
 80105dc:	0801062d 	.word	0x0801062d
 80105e0:	2300      	movs	r3, #0
 80105e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105e6:	e14a      	b.n	801087e <UART_SetConfig+0x5a2>
 80105e8:	2304      	movs	r3, #4
 80105ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105ee:	e146      	b.n	801087e <UART_SetConfig+0x5a2>
 80105f0:	2308      	movs	r3, #8
 80105f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105f6:	e142      	b.n	801087e <UART_SetConfig+0x5a2>
 80105f8:	2310      	movs	r3, #16
 80105fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80105fe:	e13e      	b.n	801087e <UART_SetConfig+0x5a2>
 8010600:	2320      	movs	r3, #32
 8010602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010606:	e13a      	b.n	801087e <UART_SetConfig+0x5a2>
 8010608:	cfff69f3 	.word	0xcfff69f3
 801060c:	58000c00 	.word	0x58000c00
 8010610:	11fff4ff 	.word	0x11fff4ff
 8010614:	40011000 	.word	0x40011000
 8010618:	58024400 	.word	0x58024400
 801061c:	40004400 	.word	0x40004400
 8010620:	40004800 	.word	0x40004800
 8010624:	40004c00 	.word	0x40004c00
 8010628:	40005000 	.word	0x40005000
 801062c:	2340      	movs	r3, #64	; 0x40
 801062e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010632:	e124      	b.n	801087e <UART_SetConfig+0x5a2>
 8010634:	2380      	movs	r3, #128	; 0x80
 8010636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801063a:	e120      	b.n	801087e <UART_SetConfig+0x5a2>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4acc      	ldr	r2, [pc, #816]	; (8010974 <UART_SetConfig+0x698>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d176      	bne.n	8010734 <UART_SetConfig+0x458>
 8010646:	4bcc      	ldr	r3, [pc, #816]	; (8010978 <UART_SetConfig+0x69c>)
 8010648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801064a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801064e:	2b28      	cmp	r3, #40	; 0x28
 8010650:	d86c      	bhi.n	801072c <UART_SetConfig+0x450>
 8010652:	a201      	add	r2, pc, #4	; (adr r2, 8010658 <UART_SetConfig+0x37c>)
 8010654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010658:	080106fd 	.word	0x080106fd
 801065c:	0801072d 	.word	0x0801072d
 8010660:	0801072d 	.word	0x0801072d
 8010664:	0801072d 	.word	0x0801072d
 8010668:	0801072d 	.word	0x0801072d
 801066c:	0801072d 	.word	0x0801072d
 8010670:	0801072d 	.word	0x0801072d
 8010674:	0801072d 	.word	0x0801072d
 8010678:	08010705 	.word	0x08010705
 801067c:	0801072d 	.word	0x0801072d
 8010680:	0801072d 	.word	0x0801072d
 8010684:	0801072d 	.word	0x0801072d
 8010688:	0801072d 	.word	0x0801072d
 801068c:	0801072d 	.word	0x0801072d
 8010690:	0801072d 	.word	0x0801072d
 8010694:	0801072d 	.word	0x0801072d
 8010698:	0801070d 	.word	0x0801070d
 801069c:	0801072d 	.word	0x0801072d
 80106a0:	0801072d 	.word	0x0801072d
 80106a4:	0801072d 	.word	0x0801072d
 80106a8:	0801072d 	.word	0x0801072d
 80106ac:	0801072d 	.word	0x0801072d
 80106b0:	0801072d 	.word	0x0801072d
 80106b4:	0801072d 	.word	0x0801072d
 80106b8:	08010715 	.word	0x08010715
 80106bc:	0801072d 	.word	0x0801072d
 80106c0:	0801072d 	.word	0x0801072d
 80106c4:	0801072d 	.word	0x0801072d
 80106c8:	0801072d 	.word	0x0801072d
 80106cc:	0801072d 	.word	0x0801072d
 80106d0:	0801072d 	.word	0x0801072d
 80106d4:	0801072d 	.word	0x0801072d
 80106d8:	0801071d 	.word	0x0801071d
 80106dc:	0801072d 	.word	0x0801072d
 80106e0:	0801072d 	.word	0x0801072d
 80106e4:	0801072d 	.word	0x0801072d
 80106e8:	0801072d 	.word	0x0801072d
 80106ec:	0801072d 	.word	0x0801072d
 80106f0:	0801072d 	.word	0x0801072d
 80106f4:	0801072d 	.word	0x0801072d
 80106f8:	08010725 	.word	0x08010725
 80106fc:	2301      	movs	r3, #1
 80106fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010702:	e0bc      	b.n	801087e <UART_SetConfig+0x5a2>
 8010704:	2304      	movs	r3, #4
 8010706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801070a:	e0b8      	b.n	801087e <UART_SetConfig+0x5a2>
 801070c:	2308      	movs	r3, #8
 801070e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010712:	e0b4      	b.n	801087e <UART_SetConfig+0x5a2>
 8010714:	2310      	movs	r3, #16
 8010716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801071a:	e0b0      	b.n	801087e <UART_SetConfig+0x5a2>
 801071c:	2320      	movs	r3, #32
 801071e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010722:	e0ac      	b.n	801087e <UART_SetConfig+0x5a2>
 8010724:	2340      	movs	r3, #64	; 0x40
 8010726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801072a:	e0a8      	b.n	801087e <UART_SetConfig+0x5a2>
 801072c:	2380      	movs	r3, #128	; 0x80
 801072e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010732:	e0a4      	b.n	801087e <UART_SetConfig+0x5a2>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	4a90      	ldr	r2, [pc, #576]	; (801097c <UART_SetConfig+0x6a0>)
 801073a:	4293      	cmp	r3, r2
 801073c:	d130      	bne.n	80107a0 <UART_SetConfig+0x4c4>
 801073e:	4b8e      	ldr	r3, [pc, #568]	; (8010978 <UART_SetConfig+0x69c>)
 8010740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010742:	f003 0307 	and.w	r3, r3, #7
 8010746:	2b05      	cmp	r3, #5
 8010748:	d826      	bhi.n	8010798 <UART_SetConfig+0x4bc>
 801074a:	a201      	add	r2, pc, #4	; (adr r2, 8010750 <UART_SetConfig+0x474>)
 801074c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010750:	08010769 	.word	0x08010769
 8010754:	08010771 	.word	0x08010771
 8010758:	08010779 	.word	0x08010779
 801075c:	08010781 	.word	0x08010781
 8010760:	08010789 	.word	0x08010789
 8010764:	08010791 	.word	0x08010791
 8010768:	2300      	movs	r3, #0
 801076a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801076e:	e086      	b.n	801087e <UART_SetConfig+0x5a2>
 8010770:	2304      	movs	r3, #4
 8010772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010776:	e082      	b.n	801087e <UART_SetConfig+0x5a2>
 8010778:	2308      	movs	r3, #8
 801077a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801077e:	e07e      	b.n	801087e <UART_SetConfig+0x5a2>
 8010780:	2310      	movs	r3, #16
 8010782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010786:	e07a      	b.n	801087e <UART_SetConfig+0x5a2>
 8010788:	2320      	movs	r3, #32
 801078a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801078e:	e076      	b.n	801087e <UART_SetConfig+0x5a2>
 8010790:	2340      	movs	r3, #64	; 0x40
 8010792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010796:	e072      	b.n	801087e <UART_SetConfig+0x5a2>
 8010798:	2380      	movs	r3, #128	; 0x80
 801079a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801079e:	e06e      	b.n	801087e <UART_SetConfig+0x5a2>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	4a76      	ldr	r2, [pc, #472]	; (8010980 <UART_SetConfig+0x6a4>)
 80107a6:	4293      	cmp	r3, r2
 80107a8:	d130      	bne.n	801080c <UART_SetConfig+0x530>
 80107aa:	4b73      	ldr	r3, [pc, #460]	; (8010978 <UART_SetConfig+0x69c>)
 80107ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107ae:	f003 0307 	and.w	r3, r3, #7
 80107b2:	2b05      	cmp	r3, #5
 80107b4:	d826      	bhi.n	8010804 <UART_SetConfig+0x528>
 80107b6:	a201      	add	r2, pc, #4	; (adr r2, 80107bc <UART_SetConfig+0x4e0>)
 80107b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107bc:	080107d5 	.word	0x080107d5
 80107c0:	080107dd 	.word	0x080107dd
 80107c4:	080107e5 	.word	0x080107e5
 80107c8:	080107ed 	.word	0x080107ed
 80107cc:	080107f5 	.word	0x080107f5
 80107d0:	080107fd 	.word	0x080107fd
 80107d4:	2300      	movs	r3, #0
 80107d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107da:	e050      	b.n	801087e <UART_SetConfig+0x5a2>
 80107dc:	2304      	movs	r3, #4
 80107de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107e2:	e04c      	b.n	801087e <UART_SetConfig+0x5a2>
 80107e4:	2308      	movs	r3, #8
 80107e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107ea:	e048      	b.n	801087e <UART_SetConfig+0x5a2>
 80107ec:	2310      	movs	r3, #16
 80107ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107f2:	e044      	b.n	801087e <UART_SetConfig+0x5a2>
 80107f4:	2320      	movs	r3, #32
 80107f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107fa:	e040      	b.n	801087e <UART_SetConfig+0x5a2>
 80107fc:	2340      	movs	r3, #64	; 0x40
 80107fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010802:	e03c      	b.n	801087e <UART_SetConfig+0x5a2>
 8010804:	2380      	movs	r3, #128	; 0x80
 8010806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801080a:	e038      	b.n	801087e <UART_SetConfig+0x5a2>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a5c      	ldr	r2, [pc, #368]	; (8010984 <UART_SetConfig+0x6a8>)
 8010812:	4293      	cmp	r3, r2
 8010814:	d130      	bne.n	8010878 <UART_SetConfig+0x59c>
 8010816:	4b58      	ldr	r3, [pc, #352]	; (8010978 <UART_SetConfig+0x69c>)
 8010818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801081a:	f003 0307 	and.w	r3, r3, #7
 801081e:	2b05      	cmp	r3, #5
 8010820:	d826      	bhi.n	8010870 <UART_SetConfig+0x594>
 8010822:	a201      	add	r2, pc, #4	; (adr r2, 8010828 <UART_SetConfig+0x54c>)
 8010824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010828:	08010841 	.word	0x08010841
 801082c:	08010849 	.word	0x08010849
 8010830:	08010851 	.word	0x08010851
 8010834:	08010859 	.word	0x08010859
 8010838:	08010861 	.word	0x08010861
 801083c:	08010869 	.word	0x08010869
 8010840:	2302      	movs	r3, #2
 8010842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010846:	e01a      	b.n	801087e <UART_SetConfig+0x5a2>
 8010848:	2304      	movs	r3, #4
 801084a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801084e:	e016      	b.n	801087e <UART_SetConfig+0x5a2>
 8010850:	2308      	movs	r3, #8
 8010852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010856:	e012      	b.n	801087e <UART_SetConfig+0x5a2>
 8010858:	2310      	movs	r3, #16
 801085a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801085e:	e00e      	b.n	801087e <UART_SetConfig+0x5a2>
 8010860:	2320      	movs	r3, #32
 8010862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010866:	e00a      	b.n	801087e <UART_SetConfig+0x5a2>
 8010868:	2340      	movs	r3, #64	; 0x40
 801086a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801086e:	e006      	b.n	801087e <UART_SetConfig+0x5a2>
 8010870:	2380      	movs	r3, #128	; 0x80
 8010872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010876:	e002      	b.n	801087e <UART_SetConfig+0x5a2>
 8010878:	2380      	movs	r3, #128	; 0x80
 801087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	4a40      	ldr	r2, [pc, #256]	; (8010984 <UART_SetConfig+0x6a8>)
 8010884:	4293      	cmp	r3, r2
 8010886:	f040 80ef 	bne.w	8010a68 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801088a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801088e:	2b20      	cmp	r3, #32
 8010890:	dc46      	bgt.n	8010920 <UART_SetConfig+0x644>
 8010892:	2b02      	cmp	r3, #2
 8010894:	f2c0 8081 	blt.w	801099a <UART_SetConfig+0x6be>
 8010898:	3b02      	subs	r3, #2
 801089a:	2b1e      	cmp	r3, #30
 801089c:	d87d      	bhi.n	801099a <UART_SetConfig+0x6be>
 801089e:	a201      	add	r2, pc, #4	; (adr r2, 80108a4 <UART_SetConfig+0x5c8>)
 80108a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a4:	08010927 	.word	0x08010927
 80108a8:	0801099b 	.word	0x0801099b
 80108ac:	0801092f 	.word	0x0801092f
 80108b0:	0801099b 	.word	0x0801099b
 80108b4:	0801099b 	.word	0x0801099b
 80108b8:	0801099b 	.word	0x0801099b
 80108bc:	0801093f 	.word	0x0801093f
 80108c0:	0801099b 	.word	0x0801099b
 80108c4:	0801099b 	.word	0x0801099b
 80108c8:	0801099b 	.word	0x0801099b
 80108cc:	0801099b 	.word	0x0801099b
 80108d0:	0801099b 	.word	0x0801099b
 80108d4:	0801099b 	.word	0x0801099b
 80108d8:	0801099b 	.word	0x0801099b
 80108dc:	0801094f 	.word	0x0801094f
 80108e0:	0801099b 	.word	0x0801099b
 80108e4:	0801099b 	.word	0x0801099b
 80108e8:	0801099b 	.word	0x0801099b
 80108ec:	0801099b 	.word	0x0801099b
 80108f0:	0801099b 	.word	0x0801099b
 80108f4:	0801099b 	.word	0x0801099b
 80108f8:	0801099b 	.word	0x0801099b
 80108fc:	0801099b 	.word	0x0801099b
 8010900:	0801099b 	.word	0x0801099b
 8010904:	0801099b 	.word	0x0801099b
 8010908:	0801099b 	.word	0x0801099b
 801090c:	0801099b 	.word	0x0801099b
 8010910:	0801099b 	.word	0x0801099b
 8010914:	0801099b 	.word	0x0801099b
 8010918:	0801099b 	.word	0x0801099b
 801091c:	0801098d 	.word	0x0801098d
 8010920:	2b40      	cmp	r3, #64	; 0x40
 8010922:	d036      	beq.n	8010992 <UART_SetConfig+0x6b6>
 8010924:	e039      	b.n	801099a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010926:	f7fb fea3 	bl	800c670 <HAL_RCCEx_GetD3PCLK1Freq>
 801092a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801092c:	e03b      	b.n	80109a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801092e:	f107 0314 	add.w	r3, r7, #20
 8010932:	4618      	mov	r0, r3
 8010934:	f7fb feb2 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801093c:	e033      	b.n	80109a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801093e:	f107 0308 	add.w	r3, r7, #8
 8010942:	4618      	mov	r0, r3
 8010944:	f7fb fffe 	bl	800c944 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801094c:	e02b      	b.n	80109a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801094e:	4b0a      	ldr	r3, [pc, #40]	; (8010978 <UART_SetConfig+0x69c>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f003 0320 	and.w	r3, r3, #32
 8010956:	2b00      	cmp	r3, #0
 8010958:	d009      	beq.n	801096e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801095a:	4b07      	ldr	r3, [pc, #28]	; (8010978 <UART_SetConfig+0x69c>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	08db      	lsrs	r3, r3, #3
 8010960:	f003 0303 	and.w	r3, r3, #3
 8010964:	4a08      	ldr	r2, [pc, #32]	; (8010988 <UART_SetConfig+0x6ac>)
 8010966:	fa22 f303 	lsr.w	r3, r2, r3
 801096a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801096c:	e01b      	b.n	80109a6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 801096e:	4b06      	ldr	r3, [pc, #24]	; (8010988 <UART_SetConfig+0x6ac>)
 8010970:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010972:	e018      	b.n	80109a6 <UART_SetConfig+0x6ca>
 8010974:	40011400 	.word	0x40011400
 8010978:	58024400 	.word	0x58024400
 801097c:	40007800 	.word	0x40007800
 8010980:	40007c00 	.word	0x40007c00
 8010984:	58000c00 	.word	0x58000c00
 8010988:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801098c:	4bc4      	ldr	r3, [pc, #784]	; (8010ca0 <UART_SetConfig+0x9c4>)
 801098e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010990:	e009      	b.n	80109a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010996:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010998:	e005      	b.n	80109a6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 801099a:	2300      	movs	r3, #0
 801099c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801099e:	2301      	movs	r3, #1
 80109a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80109a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80109a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f000 81da 	beq.w	8010d62 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109b2:	4abc      	ldr	r2, [pc, #752]	; (8010ca4 <UART_SetConfig+0x9c8>)
 80109b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109b8:	461a      	mov	r2, r3
 80109ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80109c0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	685a      	ldr	r2, [r3, #4]
 80109c6:	4613      	mov	r3, r2
 80109c8:	005b      	lsls	r3, r3, #1
 80109ca:	4413      	add	r3, r2
 80109cc:	6a3a      	ldr	r2, [r7, #32]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d305      	bcc.n	80109de <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80109d8:	6a3a      	ldr	r2, [r7, #32]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d903      	bls.n	80109e6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80109de:	2301      	movs	r3, #1
 80109e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80109e4:	e1bd      	b.n	8010d62 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80109e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e8:	4618      	mov	r0, r3
 80109ea:	f04f 0100 	mov.w	r1, #0
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109f2:	4aac      	ldr	r2, [pc, #688]	; (8010ca4 <UART_SetConfig+0x9c8>)
 80109f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	f04f 0300 	mov.w	r3, #0
 80109fe:	f7ef fcbf 	bl	8000380 <__aeabi_uldivmod>
 8010a02:	4602      	mov	r2, r0
 8010a04:	460b      	mov	r3, r1
 8010a06:	4610      	mov	r0, r2
 8010a08:	4619      	mov	r1, r3
 8010a0a:	f04f 0200 	mov.w	r2, #0
 8010a0e:	f04f 0300 	mov.w	r3, #0
 8010a12:	020b      	lsls	r3, r1, #8
 8010a14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010a18:	0202      	lsls	r2, r0, #8
 8010a1a:	6879      	ldr	r1, [r7, #4]
 8010a1c:	6849      	ldr	r1, [r1, #4]
 8010a1e:	0849      	lsrs	r1, r1, #1
 8010a20:	4608      	mov	r0, r1
 8010a22:	f04f 0100 	mov.w	r1, #0
 8010a26:	1814      	adds	r4, r2, r0
 8010a28:	eb43 0501 	adc.w	r5, r3, r1
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	461a      	mov	r2, r3
 8010a32:	f04f 0300 	mov.w	r3, #0
 8010a36:	4620      	mov	r0, r4
 8010a38:	4629      	mov	r1, r5
 8010a3a:	f7ef fca1 	bl	8000380 <__aeabi_uldivmod>
 8010a3e:	4602      	mov	r2, r0
 8010a40:	460b      	mov	r3, r1
 8010a42:	4613      	mov	r3, r2
 8010a44:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010a4c:	d308      	bcc.n	8010a60 <UART_SetConfig+0x784>
 8010a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a54:	d204      	bcs.n	8010a60 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a5c:	60da      	str	r2, [r3, #12]
 8010a5e:	e180      	b.n	8010d62 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8010a60:	2301      	movs	r3, #1
 8010a62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010a66:	e17c      	b.n	8010d62 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	69db      	ldr	r3, [r3, #28]
 8010a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a70:	f040 80bf 	bne.w	8010bf2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8010a74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010a78:	2b20      	cmp	r3, #32
 8010a7a:	dc49      	bgt.n	8010b10 <UART_SetConfig+0x834>
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	db7c      	blt.n	8010b7a <UART_SetConfig+0x89e>
 8010a80:	2b20      	cmp	r3, #32
 8010a82:	d87a      	bhi.n	8010b7a <UART_SetConfig+0x89e>
 8010a84:	a201      	add	r2, pc, #4	; (adr r2, 8010a8c <UART_SetConfig+0x7b0>)
 8010a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a8a:	bf00      	nop
 8010a8c:	08010b17 	.word	0x08010b17
 8010a90:	08010b1f 	.word	0x08010b1f
 8010a94:	08010b7b 	.word	0x08010b7b
 8010a98:	08010b7b 	.word	0x08010b7b
 8010a9c:	08010b27 	.word	0x08010b27
 8010aa0:	08010b7b 	.word	0x08010b7b
 8010aa4:	08010b7b 	.word	0x08010b7b
 8010aa8:	08010b7b 	.word	0x08010b7b
 8010aac:	08010b37 	.word	0x08010b37
 8010ab0:	08010b7b 	.word	0x08010b7b
 8010ab4:	08010b7b 	.word	0x08010b7b
 8010ab8:	08010b7b 	.word	0x08010b7b
 8010abc:	08010b7b 	.word	0x08010b7b
 8010ac0:	08010b7b 	.word	0x08010b7b
 8010ac4:	08010b7b 	.word	0x08010b7b
 8010ac8:	08010b7b 	.word	0x08010b7b
 8010acc:	08010b47 	.word	0x08010b47
 8010ad0:	08010b7b 	.word	0x08010b7b
 8010ad4:	08010b7b 	.word	0x08010b7b
 8010ad8:	08010b7b 	.word	0x08010b7b
 8010adc:	08010b7b 	.word	0x08010b7b
 8010ae0:	08010b7b 	.word	0x08010b7b
 8010ae4:	08010b7b 	.word	0x08010b7b
 8010ae8:	08010b7b 	.word	0x08010b7b
 8010aec:	08010b7b 	.word	0x08010b7b
 8010af0:	08010b7b 	.word	0x08010b7b
 8010af4:	08010b7b 	.word	0x08010b7b
 8010af8:	08010b7b 	.word	0x08010b7b
 8010afc:	08010b7b 	.word	0x08010b7b
 8010b00:	08010b7b 	.word	0x08010b7b
 8010b04:	08010b7b 	.word	0x08010b7b
 8010b08:	08010b7b 	.word	0x08010b7b
 8010b0c:	08010b6d 	.word	0x08010b6d
 8010b10:	2b40      	cmp	r3, #64	; 0x40
 8010b12:	d02e      	beq.n	8010b72 <UART_SetConfig+0x896>
 8010b14:	e031      	b.n	8010b7a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b16:	f7fa f92b 	bl	800ad70 <HAL_RCC_GetPCLK1Freq>
 8010b1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010b1c:	e033      	b.n	8010b86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010b1e:	f7fa f93d 	bl	800ad9c <HAL_RCC_GetPCLK2Freq>
 8010b22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010b24:	e02f      	b.n	8010b86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b26:	f107 0314 	add.w	r3, r7, #20
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7fb fdb6 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010b30:	69bb      	ldr	r3, [r7, #24]
 8010b32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010b34:	e027      	b.n	8010b86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b36:	f107 0308 	add.w	r3, r7, #8
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fb ff02 	bl	800c944 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010b44:	e01f      	b.n	8010b86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b46:	4b58      	ldr	r3, [pc, #352]	; (8010ca8 <UART_SetConfig+0x9cc>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	f003 0320 	and.w	r3, r3, #32
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d009      	beq.n	8010b66 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010b52:	4b55      	ldr	r3, [pc, #340]	; (8010ca8 <UART_SetConfig+0x9cc>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	08db      	lsrs	r3, r3, #3
 8010b58:	f003 0303 	and.w	r3, r3, #3
 8010b5c:	4a53      	ldr	r2, [pc, #332]	; (8010cac <UART_SetConfig+0x9d0>)
 8010b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8010b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010b64:	e00f      	b.n	8010b86 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8010b66:	4b51      	ldr	r3, [pc, #324]	; (8010cac <UART_SetConfig+0x9d0>)
 8010b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010b6a:	e00c      	b.n	8010b86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010b6c:	4b4c      	ldr	r3, [pc, #304]	; (8010ca0 <UART_SetConfig+0x9c4>)
 8010b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010b70:	e009      	b.n	8010b86 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010b78:	e005      	b.n	8010b86 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010b84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f000 80ea 	beq.w	8010d62 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b92:	4a44      	ldr	r2, [pc, #272]	; (8010ca4 <UART_SetConfig+0x9c8>)
 8010b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b98:	461a      	mov	r2, r3
 8010b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ba0:	005a      	lsls	r2, r3, #1
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	085b      	lsrs	r3, r3, #1
 8010ba8:	441a      	add	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bb2:	b29b      	uxth	r3, r3
 8010bb4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb8:	2b0f      	cmp	r3, #15
 8010bba:	d916      	bls.n	8010bea <UART_SetConfig+0x90e>
 8010bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bc2:	d212      	bcs.n	8010bea <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	f023 030f 	bic.w	r3, r3, #15
 8010bcc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd0:	085b      	lsrs	r3, r3, #1
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	f003 0307 	and.w	r3, r3, #7
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010be6:	60da      	str	r2, [r3, #12]
 8010be8:	e0bb      	b.n	8010d62 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010bea:	2301      	movs	r3, #1
 8010bec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010bf0:	e0b7      	b.n	8010d62 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010bf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010bf6:	2b20      	cmp	r3, #32
 8010bf8:	dc4a      	bgt.n	8010c90 <UART_SetConfig+0x9b4>
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	f2c0 8086 	blt.w	8010d0c <UART_SetConfig+0xa30>
 8010c00:	2b20      	cmp	r3, #32
 8010c02:	f200 8083 	bhi.w	8010d0c <UART_SetConfig+0xa30>
 8010c06:	a201      	add	r2, pc, #4	; (adr r2, 8010c0c <UART_SetConfig+0x930>)
 8010c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c0c:	08010c97 	.word	0x08010c97
 8010c10:	08010cb1 	.word	0x08010cb1
 8010c14:	08010d0d 	.word	0x08010d0d
 8010c18:	08010d0d 	.word	0x08010d0d
 8010c1c:	08010cb9 	.word	0x08010cb9
 8010c20:	08010d0d 	.word	0x08010d0d
 8010c24:	08010d0d 	.word	0x08010d0d
 8010c28:	08010d0d 	.word	0x08010d0d
 8010c2c:	08010cc9 	.word	0x08010cc9
 8010c30:	08010d0d 	.word	0x08010d0d
 8010c34:	08010d0d 	.word	0x08010d0d
 8010c38:	08010d0d 	.word	0x08010d0d
 8010c3c:	08010d0d 	.word	0x08010d0d
 8010c40:	08010d0d 	.word	0x08010d0d
 8010c44:	08010d0d 	.word	0x08010d0d
 8010c48:	08010d0d 	.word	0x08010d0d
 8010c4c:	08010cd9 	.word	0x08010cd9
 8010c50:	08010d0d 	.word	0x08010d0d
 8010c54:	08010d0d 	.word	0x08010d0d
 8010c58:	08010d0d 	.word	0x08010d0d
 8010c5c:	08010d0d 	.word	0x08010d0d
 8010c60:	08010d0d 	.word	0x08010d0d
 8010c64:	08010d0d 	.word	0x08010d0d
 8010c68:	08010d0d 	.word	0x08010d0d
 8010c6c:	08010d0d 	.word	0x08010d0d
 8010c70:	08010d0d 	.word	0x08010d0d
 8010c74:	08010d0d 	.word	0x08010d0d
 8010c78:	08010d0d 	.word	0x08010d0d
 8010c7c:	08010d0d 	.word	0x08010d0d
 8010c80:	08010d0d 	.word	0x08010d0d
 8010c84:	08010d0d 	.word	0x08010d0d
 8010c88:	08010d0d 	.word	0x08010d0d
 8010c8c:	08010cff 	.word	0x08010cff
 8010c90:	2b40      	cmp	r3, #64	; 0x40
 8010c92:	d037      	beq.n	8010d04 <UART_SetConfig+0xa28>
 8010c94:	e03a      	b.n	8010d0c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c96:	f7fa f86b 	bl	800ad70 <HAL_RCC_GetPCLK1Freq>
 8010c9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010c9c:	e03c      	b.n	8010d18 <UART_SetConfig+0xa3c>
 8010c9e:	bf00      	nop
 8010ca0:	003d0900 	.word	0x003d0900
 8010ca4:	08023768 	.word	0x08023768
 8010ca8:	58024400 	.word	0x58024400
 8010cac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010cb0:	f7fa f874 	bl	800ad9c <HAL_RCC_GetPCLK2Freq>
 8010cb4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010cb6:	e02f      	b.n	8010d18 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010cb8:	f107 0314 	add.w	r3, r7, #20
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fb fced 	bl	800c69c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010cc2:	69bb      	ldr	r3, [r7, #24]
 8010cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010cc6:	e027      	b.n	8010d18 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010cc8:	f107 0308 	add.w	r3, r7, #8
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fb fe39 	bl	800c944 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010cd6:	e01f      	b.n	8010d18 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010cd8:	4b2c      	ldr	r3, [pc, #176]	; (8010d8c <UART_SetConfig+0xab0>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f003 0320 	and.w	r3, r3, #32
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d009      	beq.n	8010cf8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010ce4:	4b29      	ldr	r3, [pc, #164]	; (8010d8c <UART_SetConfig+0xab0>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	08db      	lsrs	r3, r3, #3
 8010cea:	f003 0303 	and.w	r3, r3, #3
 8010cee:	4a28      	ldr	r2, [pc, #160]	; (8010d90 <UART_SetConfig+0xab4>)
 8010cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8010cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010cf6:	e00f      	b.n	8010d18 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8010cf8:	4b25      	ldr	r3, [pc, #148]	; (8010d90 <UART_SetConfig+0xab4>)
 8010cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010cfc:	e00c      	b.n	8010d18 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010cfe:	4b25      	ldr	r3, [pc, #148]	; (8010d94 <UART_SetConfig+0xab8>)
 8010d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d02:	e009      	b.n	8010d18 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010d0a:	e005      	b.n	8010d18 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010d10:	2301      	movs	r3, #1
 8010d12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010d16:	bf00      	nop
    }

    if (pclk != 0U)
 8010d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d021      	beq.n	8010d62 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d22:	4a1d      	ldr	r2, [pc, #116]	; (8010d98 <UART_SetConfig+0xabc>)
 8010d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d28:	461a      	mov	r2, r3
 8010d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	085b      	lsrs	r3, r3, #1
 8010d36:	441a      	add	r2, r3
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d46:	2b0f      	cmp	r3, #15
 8010d48:	d908      	bls.n	8010d5c <UART_SetConfig+0xa80>
 8010d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d50:	d204      	bcs.n	8010d5c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d58:	60da      	str	r2, [r3, #12]
 8010d5a:	e002      	b.n	8010d62 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2201      	movs	r2, #1
 8010d66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2201      	movs	r2, #1
 8010d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2200      	movs	r2, #0
 8010d76:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010d7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3738      	adds	r7, #56	; 0x38
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bdb0      	pop	{r4, r5, r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	58024400 	.word	0x58024400
 8010d90:	03d09000 	.word	0x03d09000
 8010d94:	003d0900 	.word	0x003d0900
 8010d98:	08023768 	.word	0x08023768

08010d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010da8:	f003 0301 	and.w	r3, r3, #1
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d00a      	beq.n	8010dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	430a      	orrs	r2, r1
 8010dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dca:	f003 0302 	and.w	r3, r3, #2
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d00a      	beq.n	8010de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	430a      	orrs	r2, r1
 8010de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dec:	f003 0304 	and.w	r3, r3, #4
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00a      	beq.n	8010e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	430a      	orrs	r2, r1
 8010e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e0e:	f003 0308 	and.w	r3, r3, #8
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00a      	beq.n	8010e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	430a      	orrs	r2, r1
 8010e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e30:	f003 0310 	and.w	r3, r3, #16
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d00a      	beq.n	8010e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	689b      	ldr	r3, [r3, #8]
 8010e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	430a      	orrs	r2, r1
 8010e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e52:	f003 0320 	and.w	r3, r3, #32
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00a      	beq.n	8010e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	689b      	ldr	r3, [r3, #8]
 8010e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	430a      	orrs	r2, r1
 8010e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d01a      	beq.n	8010eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	430a      	orrs	r2, r1
 8010e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e9a:	d10a      	bne.n	8010eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	685b      	ldr	r3, [r3, #4]
 8010ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	430a      	orrs	r2, r1
 8010eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d00a      	beq.n	8010ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	685b      	ldr	r3, [r3, #4]
 8010ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	430a      	orrs	r2, r1
 8010ed2:	605a      	str	r2, [r3, #4]
  }
}
 8010ed4:	bf00      	nop
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b086      	sub	sp, #24
 8010ee4:	af02      	add	r7, sp, #8
 8010ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2200      	movs	r2, #0
 8010eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010ef0:	f7f4 feb6 	bl	8005c60 <HAL_GetTick>
 8010ef4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f003 0308 	and.w	r3, r3, #8
 8010f00:	2b08      	cmp	r3, #8
 8010f02:	d10e      	bne.n	8010f22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010f08:	9300      	str	r3, [sp, #0]
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 f82f 	bl	8010f76 <UART_WaitOnFlagUntilTimeout>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d001      	beq.n	8010f22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	e025      	b.n	8010f6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f003 0304 	and.w	r3, r3, #4
 8010f2c:	2b04      	cmp	r3, #4
 8010f2e:	d10e      	bne.n	8010f4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010f34:	9300      	str	r3, [sp, #0]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 f819 	bl	8010f76 <UART_WaitOnFlagUntilTimeout>
 8010f44:	4603      	mov	r3, r0
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d001      	beq.n	8010f4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	e00f      	b.n	8010f6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2220      	movs	r2, #32
 8010f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2220      	movs	r2, #32
 8010f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2200      	movs	r2, #0
 8010f62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2200      	movs	r2, #0
 8010f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010f6c:	2300      	movs	r3, #0
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b084      	sub	sp, #16
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	60f8      	str	r0, [r7, #12]
 8010f7e:	60b9      	str	r1, [r7, #8]
 8010f80:	603b      	str	r3, [r7, #0]
 8010f82:	4613      	mov	r3, r2
 8010f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f86:	e062      	b.n	801104e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f8e:	d05e      	beq.n	801104e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f90:	f7f4 fe66 	bl	8005c60 <HAL_GetTick>
 8010f94:	4602      	mov	r2, r0
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	69ba      	ldr	r2, [r7, #24]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d302      	bcc.n	8010fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d11d      	bne.n	8010fe2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	681a      	ldr	r2, [r3, #0]
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010fb4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	689a      	ldr	r2, [r3, #8]
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f022 0201 	bic.w	r2, r2, #1
 8010fc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2220      	movs	r2, #32
 8010fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	2220      	movs	r2, #32
 8010fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010fde:	2303      	movs	r3, #3
 8010fe0:	e045      	b.n	801106e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f003 0304 	and.w	r3, r3, #4
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d02e      	beq.n	801104e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	69db      	ldr	r3, [r3, #28]
 8010ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ffe:	d126      	bne.n	801104e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011008:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011018:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	689a      	ldr	r2, [r3, #8]
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	f022 0201 	bic.w	r2, r2, #1
 8011028:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2220      	movs	r2, #32
 801102e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2220      	movs	r2, #32
 8011036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2220      	movs	r2, #32
 801103e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2200      	movs	r2, #0
 8011046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801104a:	2303      	movs	r3, #3
 801104c:	e00f      	b.n	801106e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	69da      	ldr	r2, [r3, #28]
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	4013      	ands	r3, r2
 8011058:	68ba      	ldr	r2, [r7, #8]
 801105a:	429a      	cmp	r2, r3
 801105c:	bf0c      	ite	eq
 801105e:	2301      	moveq	r3, #1
 8011060:	2300      	movne	r3, #0
 8011062:	b2db      	uxtb	r3, r3
 8011064:	461a      	mov	r2, r3
 8011066:	79fb      	ldrb	r3, [r7, #7]
 8011068:	429a      	cmp	r2, r3
 801106a:	d08d      	beq.n	8010f88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801106c:	2300      	movs	r3, #0
}
 801106e:	4618      	mov	r0, r3
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
	...

08011078 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011078:	b480      	push	{r7}
 801107a:	b085      	sub	sp, #20
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	4613      	mov	r3, r2
 8011084:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	68ba      	ldr	r2, [r7, #8]
 801108a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	88fa      	ldrh	r2, [r7, #6]
 8011090:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	88fa      	ldrh	r2, [r7, #6]
 8011098:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2200      	movs	r2, #0
 80110a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110aa:	d10e      	bne.n	80110ca <UART_Start_Receive_IT+0x52>
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	691b      	ldr	r3, [r3, #16]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d105      	bne.n	80110c0 <UART_Start_Receive_IT+0x48>
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80110ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80110be:	e02d      	b.n	801111c <UART_Start_Receive_IT+0xa4>
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	22ff      	movs	r2, #255	; 0xff
 80110c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80110c8:	e028      	b.n	801111c <UART_Start_Receive_IT+0xa4>
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	689b      	ldr	r3, [r3, #8]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d10d      	bne.n	80110ee <UART_Start_Receive_IT+0x76>
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	691b      	ldr	r3, [r3, #16]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d104      	bne.n	80110e4 <UART_Start_Receive_IT+0x6c>
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	22ff      	movs	r2, #255	; 0xff
 80110de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80110e2:	e01b      	b.n	801111c <UART_Start_Receive_IT+0xa4>
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	227f      	movs	r2, #127	; 0x7f
 80110e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80110ec:	e016      	b.n	801111c <UART_Start_Receive_IT+0xa4>
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	689b      	ldr	r3, [r3, #8]
 80110f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80110f6:	d10d      	bne.n	8011114 <UART_Start_Receive_IT+0x9c>
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	691b      	ldr	r3, [r3, #16]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d104      	bne.n	801110a <UART_Start_Receive_IT+0x92>
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	227f      	movs	r2, #127	; 0x7f
 8011104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011108:	e008      	b.n	801111c <UART_Start_Receive_IT+0xa4>
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	223f      	movs	r2, #63	; 0x3f
 801110e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011112:	e003      	b.n	801111c <UART_Start_Receive_IT+0xa4>
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2200      	movs	r2, #0
 8011118:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2200      	movs	r2, #0
 8011120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2222      	movs	r2, #34	; 0x22
 8011128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	689a      	ldr	r2, [r3, #8]
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	f042 0201 	orr.w	r2, r2, #1
 801113a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011144:	d12a      	bne.n	801119c <UART_Start_Receive_IT+0x124>
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801114c:	88fa      	ldrh	r2, [r7, #6]
 801114e:	429a      	cmp	r2, r3
 8011150:	d324      	bcc.n	801119c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	689b      	ldr	r3, [r3, #8]
 8011156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801115a:	d107      	bne.n	801116c <UART_Start_Receive_IT+0xf4>
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	691b      	ldr	r3, [r3, #16]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d103      	bne.n	801116c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	4a1f      	ldr	r2, [pc, #124]	; (80111e4 <UART_Start_Receive_IT+0x16c>)
 8011168:	671a      	str	r2, [r3, #112]	; 0x70
 801116a:	e002      	b.n	8011172 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	4a1e      	ldr	r2, [pc, #120]	; (80111e8 <UART_Start_Receive_IT+0x170>)
 8011170:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2200      	movs	r2, #0
 8011176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011188:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	689a      	ldr	r2, [r3, #8]
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011198:	609a      	str	r2, [r3, #8]
 801119a:	e01b      	b.n	80111d4 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	689b      	ldr	r3, [r3, #8]
 80111a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111a4:	d107      	bne.n	80111b6 <UART_Start_Receive_IT+0x13e>
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	691b      	ldr	r3, [r3, #16]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d103      	bne.n	80111b6 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	4a0e      	ldr	r2, [pc, #56]	; (80111ec <UART_Start_Receive_IT+0x174>)
 80111b2:	671a      	str	r2, [r3, #112]	; 0x70
 80111b4:	e002      	b.n	80111bc <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	4a0d      	ldr	r2, [pc, #52]	; (80111f0 <UART_Start_Receive_IT+0x178>)
 80111ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2200      	movs	r2, #0
 80111c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80111d2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80111d4:	2300      	movs	r3, #0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3714      	adds	r7, #20
 80111da:	46bd      	mov	sp, r7
 80111dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	0801166d 	.word	0x0801166d
 80111e8:	08011469 	.word	0x08011469
 80111ec:	08011391 	.word	0x08011391
 80111f0:	080112b9 	.word	0x080112b9

080111f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b083      	sub	sp, #12
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801120a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	6899      	ldr	r1, [r3, #8]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681a      	ldr	r2, [r3, #0]
 8011216:	4b0f      	ldr	r3, [pc, #60]	; (8011254 <UART_EndRxTransfer+0x60>)
 8011218:	400b      	ands	r3, r1
 801121a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011220:	2b01      	cmp	r3, #1
 8011222:	d107      	bne.n	8011234 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	681a      	ldr	r2, [r3, #0]
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f022 0210 	bic.w	r2, r2, #16
 8011232:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2220      	movs	r2, #32
 8011238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2200      	movs	r2, #0
 8011240:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2200      	movs	r2, #0
 8011246:	671a      	str	r2, [r3, #112]	; 0x70
}
 8011248:	bf00      	nop
 801124a:	370c      	adds	r7, #12
 801124c:	46bd      	mov	sp, r7
 801124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011252:	4770      	bx	lr
 8011254:	effffffe 	.word	0xeffffffe

08011258 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	2200      	movs	r2, #0
 801126a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	2200      	movs	r2, #0
 8011272:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011276:	68f8      	ldr	r0, [r7, #12]
 8011278:	f7ff f81a 	bl	80102b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801127c:	bf00      	nop
 801127e:	3710      	adds	r7, #16
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801129a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2220      	movs	r2, #32
 80112a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2200      	movs	r2, #0
 80112a8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7fe fff6 	bl	801029c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80112b0:	bf00      	nop
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112c6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80112ce:	2b22      	cmp	r3, #34	; 0x22
 80112d0:	d152      	bne.n	8011378 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112d8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80112da:	89bb      	ldrh	r3, [r7, #12]
 80112dc:	b2d9      	uxtb	r1, r3
 80112de:	89fb      	ldrh	r3, [r7, #14]
 80112e0:	b2da      	uxtb	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112e6:	400a      	ands	r2, r1
 80112e8:	b2d2      	uxtb	r2, r2
 80112ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112f0:	1c5a      	adds	r2, r3, #1
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80112fc:	b29b      	uxth	r3, r3
 80112fe:	3b01      	subs	r3, #1
 8011300:	b29a      	uxth	r2, r3
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801130e:	b29b      	uxth	r3, r3
 8011310:	2b00      	cmp	r3, #0
 8011312:	d139      	bne.n	8011388 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011322:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	689a      	ldr	r2, [r3, #8]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f022 0201 	bic.w	r2, r2, #1
 8011332:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2220      	movs	r2, #32
 8011338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011346:	2b01      	cmp	r3, #1
 8011348:	d10f      	bne.n	801136a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f022 0210 	bic.w	r2, r2, #16
 8011358:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011360:	4619      	mov	r1, r3
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f7fe ffae 	bl	80102c4 <HAL_UARTEx_RxEventCallback>
 8011368:	e002      	b.n	8011370 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f7f0 fdf4 	bl	8001f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2200      	movs	r2, #0
 8011374:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011376:	e007      	b.n	8011388 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	699a      	ldr	r2, [r3, #24]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f042 0208 	orr.w	r2, r2, #8
 8011386:	619a      	str	r2, [r3, #24]
}
 8011388:	bf00      	nop
 801138a:	3710      	adds	r7, #16
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b084      	sub	sp, #16
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801139e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113a6:	2b22      	cmp	r3, #34	; 0x22
 80113a8:	d152      	bne.n	8011450 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113b6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80113b8:	89ba      	ldrh	r2, [r7, #12]
 80113ba:	89fb      	ldrh	r3, [r7, #14]
 80113bc:	4013      	ands	r3, r2
 80113be:	b29a      	uxth	r2, r3
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113c8:	1c9a      	adds	r2, r3, #2
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	3b01      	subs	r3, #1
 80113d8:	b29a      	uxth	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d139      	bne.n	8011460 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	681a      	ldr	r2, [r3, #0]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80113fa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	689a      	ldr	r2, [r3, #8]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f022 0201 	bic.w	r2, r2, #1
 801140a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2220      	movs	r2, #32
 8011410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801141e:	2b01      	cmp	r3, #1
 8011420:	d10f      	bne.n	8011442 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	681a      	ldr	r2, [r3, #0]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f022 0210 	bic.w	r2, r2, #16
 8011430:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011438:	4619      	mov	r1, r3
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f7fe ff42 	bl	80102c4 <HAL_UARTEx_RxEventCallback>
 8011440:	e002      	b.n	8011448 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f7f0 fd88 	bl	8001f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2200      	movs	r2, #0
 801144c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801144e:	e007      	b.n	8011460 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	699a      	ldr	r2, [r3, #24]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	f042 0208 	orr.w	r2, r2, #8
 801145e:	619a      	str	r2, [r3, #24]
}
 8011460:	bf00      	nop
 8011462:	3710      	adds	r7, #16
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b088      	sub	sp, #32
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011476:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	69db      	ldr	r3, [r3, #28]
 801147e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	689b      	ldr	r3, [r3, #8]
 801148e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011496:	2b22      	cmp	r3, #34	; 0x22
 8011498:	f040 80d8 	bne.w	801164c <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80114a2:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80114a4:	e0a8      	b.n	80115f8 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ac:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80114ae:	89bb      	ldrh	r3, [r7, #12]
 80114b0:	b2d9      	uxtb	r1, r3
 80114b2:	8b7b      	ldrh	r3, [r7, #26]
 80114b4:	b2da      	uxtb	r2, r3
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114ba:	400a      	ands	r2, r1
 80114bc:	b2d2      	uxtb	r2, r2
 80114be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114c4:	1c5a      	adds	r2, r3, #1
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	3b01      	subs	r3, #1
 80114d4:	b29a      	uxth	r2, r3
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	69db      	ldr	r3, [r3, #28]
 80114e2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80114e4:	69fb      	ldr	r3, [r7, #28]
 80114e6:	f003 0307 	and.w	r3, r3, #7
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d04d      	beq.n	801158a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80114ee:	69fb      	ldr	r3, [r7, #28]
 80114f0:	f003 0301 	and.w	r3, r3, #1
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d010      	beq.n	801151a <UART_RxISR_8BIT_FIFOEN+0xb2>
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d00b      	beq.n	801151a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2201      	movs	r2, #1
 8011508:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011510:	f043 0201 	orr.w	r2, r3, #1
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801151a:	69fb      	ldr	r3, [r7, #28]
 801151c:	f003 0302 	and.w	r3, r3, #2
 8011520:	2b00      	cmp	r3, #0
 8011522:	d010      	beq.n	8011546 <UART_RxISR_8BIT_FIFOEN+0xde>
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	f003 0301 	and.w	r3, r3, #1
 801152a:	2b00      	cmp	r3, #0
 801152c:	d00b      	beq.n	8011546 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	2202      	movs	r2, #2
 8011534:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801153c:	f043 0204 	orr.w	r2, r3, #4
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011546:	69fb      	ldr	r3, [r7, #28]
 8011548:	f003 0304 	and.w	r3, r3, #4
 801154c:	2b00      	cmp	r3, #0
 801154e:	d010      	beq.n	8011572 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	f003 0301 	and.w	r3, r3, #1
 8011556:	2b00      	cmp	r3, #0
 8011558:	d00b      	beq.n	8011572 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	2204      	movs	r2, #4
 8011560:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011568:	f043 0202 	orr.w	r2, r3, #2
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011578:	2b00      	cmp	r3, #0
 801157a:	d006      	beq.n	801158a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f7fe fe97 	bl	80102b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2200      	movs	r2, #0
 8011586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011590:	b29b      	uxth	r3, r3
 8011592:	2b00      	cmp	r3, #0
 8011594:	d130      	bne.n	80115f8 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	681a      	ldr	r2, [r3, #0]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80115a4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	6899      	ldr	r1, [r3, #8]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	4b2c      	ldr	r3, [pc, #176]	; (8011664 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 80115b2:	400b      	ands	r3, r1
 80115b4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2220      	movs	r2, #32
 80115ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2200      	movs	r2, #0
 80115c2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	d10f      	bne.n	80115ec <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	f022 0210 	bic.w	r2, r2, #16
 80115da:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80115e2:	4619      	mov	r1, r3
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7fe fe6d 	bl	80102c4 <HAL_UARTEx_RxEventCallback>
 80115ea:	e002      	b.n	80115f2 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7f0 fcb3 	bl	8001f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2200      	movs	r2, #0
 80115f6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80115f8:	89fb      	ldrh	r3, [r7, #14]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d005      	beq.n	801160a <UART_RxISR_8BIT_FIFOEN+0x1a2>
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	f003 0320 	and.w	r3, r3, #32
 8011604:	2b00      	cmp	r3, #0
 8011606:	f47f af4e 	bne.w	80114a6 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011610:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011612:	897b      	ldrh	r3, [r7, #10]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d021      	beq.n	801165c <UART_RxISR_8BIT_FIFOEN+0x1f4>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801161e:	897a      	ldrh	r2, [r7, #10]
 8011620:	429a      	cmp	r2, r3
 8011622:	d21b      	bcs.n	801165c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	689a      	ldr	r2, [r3, #8]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8011632:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4a0c      	ldr	r2, [pc, #48]	; (8011668 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8011638:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	f042 0220 	orr.w	r2, r2, #32
 8011648:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801164a:	e007      	b.n	801165c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	699a      	ldr	r2, [r3, #24]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f042 0208 	orr.w	r2, r2, #8
 801165a:	619a      	str	r2, [r3, #24]
}
 801165c:	bf00      	nop
 801165e:	3720      	adds	r7, #32
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	effffffe 	.word	0xeffffffe
 8011668:	080112b9 	.word	0x080112b9

0801166c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b08a      	sub	sp, #40	; 0x28
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801167a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	69db      	ldr	r3, [r3, #28]
 8011682:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	689b      	ldr	r3, [r3, #8]
 8011692:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801169a:	2b22      	cmp	r3, #34	; 0x22
 801169c:	f040 80d8 	bne.w	8011850 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80116a6:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80116a8:	e0a8      	b.n	80117fc <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b0:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80116b8:	8aba      	ldrh	r2, [r7, #20]
 80116ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116bc:	4013      	ands	r3, r2
 80116be:	b29a      	uxth	r2, r3
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116c8:	1c9a      	adds	r2, r3, #2
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	3b01      	subs	r3, #1
 80116d8:	b29a      	uxth	r2, r3
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	69db      	ldr	r3, [r3, #28]
 80116e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80116e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ea:	f003 0307 	and.w	r3, r3, #7
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d04d      	beq.n	801178e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80116f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f4:	f003 0301 	and.w	r3, r3, #1
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d010      	beq.n	801171e <UART_RxISR_16BIT_FIFOEN+0xb2>
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011702:	2b00      	cmp	r3, #0
 8011704:	d00b      	beq.n	801171e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	2201      	movs	r2, #1
 801170c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011714:	f043 0201 	orr.w	r2, r3, #1
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011720:	f003 0302 	and.w	r3, r3, #2
 8011724:	2b00      	cmp	r3, #0
 8011726:	d010      	beq.n	801174a <UART_RxISR_16BIT_FIFOEN+0xde>
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	f003 0301 	and.w	r3, r3, #1
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00b      	beq.n	801174a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	2202      	movs	r2, #2
 8011738:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011740:	f043 0204 	orr.w	r2, r3, #4
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174c:	f003 0304 	and.w	r3, r3, #4
 8011750:	2b00      	cmp	r3, #0
 8011752:	d010      	beq.n	8011776 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	f003 0301 	and.w	r3, r3, #1
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00b      	beq.n	8011776 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2204      	movs	r2, #4
 8011764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801176c:	f043 0202 	orr.w	r2, r3, #2
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801177c:	2b00      	cmp	r3, #0
 801177e:	d006      	beq.n	801178e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f7fe fd95 	bl	80102b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2200      	movs	r2, #0
 801178a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011794:	b29b      	uxth	r3, r3
 8011796:	2b00      	cmp	r3, #0
 8011798:	d130      	bne.n	80117fc <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80117a8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	6899      	ldr	r1, [r3, #8]
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	4b2c      	ldr	r3, [pc, #176]	; (8011868 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 80117b6:	400b      	ands	r3, r1
 80117b8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2220      	movs	r2, #32
 80117be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2200      	movs	r2, #0
 80117c6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d10f      	bne.n	80117f0 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	681a      	ldr	r2, [r3, #0]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f022 0210 	bic.w	r2, r2, #16
 80117de:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80117e6:	4619      	mov	r1, r3
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f7fe fd6b 	bl	80102c4 <HAL_UARTEx_RxEventCallback>
 80117ee:	e002      	b.n	80117f6 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7f0 fbb1 	bl	8001f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2200      	movs	r2, #0
 80117fa:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80117fc:	8afb      	ldrh	r3, [r7, #22]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d005      	beq.n	801180e <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8011802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011804:	f003 0320 	and.w	r3, r3, #32
 8011808:	2b00      	cmp	r3, #0
 801180a:	f47f af4e 	bne.w	80116aa <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011814:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011816:	89fb      	ldrh	r3, [r7, #14]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d021      	beq.n	8011860 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011822:	89fa      	ldrh	r2, [r7, #14]
 8011824:	429a      	cmp	r2, r3
 8011826:	d21b      	bcs.n	8011860 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	689a      	ldr	r2, [r3, #8]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8011836:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	4a0c      	ldr	r2, [pc, #48]	; (801186c <UART_RxISR_16BIT_FIFOEN+0x200>)
 801183c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	f042 0220 	orr.w	r2, r2, #32
 801184c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801184e:	e007      	b.n	8011860 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	699a      	ldr	r2, [r3, #24]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	f042 0208 	orr.w	r2, r2, #8
 801185e:	619a      	str	r2, [r3, #24]
}
 8011860:	bf00      	nop
 8011862:	3728      	adds	r7, #40	; 0x28
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	effffffe 	.word	0xeffffffe
 801186c:	08011391 	.word	0x08011391

08011870 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011878:	bf00      	nop
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801188c:	bf00      	nop
 801188e:	370c      	adds	r7, #12
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr

08011898 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011898:	b480      	push	{r7}
 801189a:	b083      	sub	sp, #12
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80118a0:	bf00      	nop
 80118a2:	370c      	adds	r7, #12
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr

080118ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b085      	sub	sp, #20
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d101      	bne.n	80118c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80118be:	2302      	movs	r3, #2
 80118c0:	e027      	b.n	8011912 <HAL_UARTEx_DisableFifoMode+0x66>
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2201      	movs	r2, #1
 80118c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2224      	movs	r2, #36	; 0x24
 80118ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	681a      	ldr	r2, [r3, #0]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f022 0201 	bic.w	r2, r2, #1
 80118e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80118f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2200      	movs	r2, #0
 80118f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	68fa      	ldr	r2, [r7, #12]
 80118fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2220      	movs	r2, #32
 8011904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011910:	2300      	movs	r3, #0
}
 8011912:	4618      	mov	r0, r3
 8011914:	3714      	adds	r7, #20
 8011916:	46bd      	mov	sp, r7
 8011918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191c:	4770      	bx	lr

0801191e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801191e:	b580      	push	{r7, lr}
 8011920:	b084      	sub	sp, #16
 8011922:	af00      	add	r7, sp, #0
 8011924:	6078      	str	r0, [r7, #4]
 8011926:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801192e:	2b01      	cmp	r3, #1
 8011930:	d101      	bne.n	8011936 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011932:	2302      	movs	r3, #2
 8011934:	e02d      	b.n	8011992 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2201      	movs	r2, #1
 801193a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2224      	movs	r2, #36	; 0x24
 8011942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	681a      	ldr	r2, [r3, #0]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	f022 0201 	bic.w	r2, r2, #1
 801195c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	689b      	ldr	r3, [r3, #8]
 8011964:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	683a      	ldr	r2, [r7, #0]
 801196e:	430a      	orrs	r2, r1
 8011970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f000 f850 	bl	8011a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	68fa      	ldr	r2, [r7, #12]
 801197e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2220      	movs	r2, #32
 8011984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2200      	movs	r2, #0
 801198c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011990:	2300      	movs	r3, #0
}
 8011992:	4618      	mov	r0, r3
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}

0801199a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801199a:	b580      	push	{r7, lr}
 801199c:	b084      	sub	sp, #16
 801199e:	af00      	add	r7, sp, #0
 80119a0:	6078      	str	r0, [r7, #4]
 80119a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d101      	bne.n	80119b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80119ae:	2302      	movs	r3, #2
 80119b0:	e02d      	b.n	8011a0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2201      	movs	r2, #1
 80119b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2224      	movs	r2, #36	; 0x24
 80119be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f022 0201 	bic.w	r2, r2, #1
 80119d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	689b      	ldr	r3, [r3, #8]
 80119e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	683a      	ldr	r2, [r7, #0]
 80119ea:	430a      	orrs	r2, r1
 80119ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 f812 	bl	8011a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	68fa      	ldr	r2, [r7, #12]
 80119fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2220      	movs	r2, #32
 8011a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2200      	movs	r2, #0
 8011a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011a0c:	2300      	movs	r3, #0
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3710      	adds	r7, #16
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
	...

08011a18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b085      	sub	sp, #20
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d108      	bne.n	8011a3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2201      	movs	r2, #1
 8011a34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a38:	e031      	b.n	8011a9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a3a:	2310      	movs	r3, #16
 8011a3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a3e:	2310      	movs	r3, #16
 8011a40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	689b      	ldr	r3, [r3, #8]
 8011a48:	0e5b      	lsrs	r3, r3, #25
 8011a4a:	b2db      	uxtb	r3, r3
 8011a4c:	f003 0307 	and.w	r3, r3, #7
 8011a50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	689b      	ldr	r3, [r3, #8]
 8011a58:	0f5b      	lsrs	r3, r3, #29
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	f003 0307 	and.w	r3, r3, #7
 8011a60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a62:	7bbb      	ldrb	r3, [r7, #14]
 8011a64:	7b3a      	ldrb	r2, [r7, #12]
 8011a66:	4911      	ldr	r1, [pc, #68]	; (8011aac <UARTEx_SetNbDataToProcess+0x94>)
 8011a68:	5c8a      	ldrb	r2, [r1, r2]
 8011a6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011a6e:	7b3a      	ldrb	r2, [r7, #12]
 8011a70:	490f      	ldr	r1, [pc, #60]	; (8011ab0 <UARTEx_SetNbDataToProcess+0x98>)
 8011a72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a74:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a80:	7bfb      	ldrb	r3, [r7, #15]
 8011a82:	7b7a      	ldrb	r2, [r7, #13]
 8011a84:	4909      	ldr	r1, [pc, #36]	; (8011aac <UARTEx_SetNbDataToProcess+0x94>)
 8011a86:	5c8a      	ldrb	r2, [r1, r2]
 8011a88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011a8c:	7b7a      	ldrb	r2, [r7, #13]
 8011a8e:	4908      	ldr	r1, [pc, #32]	; (8011ab0 <UARTEx_SetNbDataToProcess+0x98>)
 8011a90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011a92:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011a9e:	bf00      	nop
 8011aa0:	3714      	adds	r7, #20
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa8:	4770      	bx	lr
 8011aaa:	bf00      	nop
 8011aac:	08023780 	.word	0x08023780
 8011ab0:	08023788 	.word	0x08023788

08011ab4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011ab4:	b084      	sub	sp, #16
 8011ab6:	b580      	push	{r7, lr}
 8011ab8:	b084      	sub	sp, #16
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	6078      	str	r0, [r7, #4]
 8011abe:	f107 001c 	add.w	r0, r7, #28
 8011ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d120      	bne.n	8011b0e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	68da      	ldr	r2, [r3, #12]
 8011adc:	4b2a      	ldr	r3, [pc, #168]	; (8011b88 <USB_CoreInit+0xd4>)
 8011ade:	4013      	ands	r3, r2
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	68db      	ldr	r3, [r3, #12]
 8011ae8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d105      	bne.n	8011b02 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	68db      	ldr	r3, [r3, #12]
 8011afa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f001 fb14 	bl	8013130 <USB_CoreReset>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	73fb      	strb	r3, [r7, #15]
 8011b0c:	e01a      	b.n	8011b44 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	68db      	ldr	r3, [r3, #12]
 8011b12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f001 fb08 	bl	8013130 <USB_CoreReset>
 8011b20:	4603      	mov	r3, r0
 8011b22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d106      	bne.n	8011b38 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	639a      	str	r2, [r3, #56]	; 0x38
 8011b36:	e005      	b.n	8011b44 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d116      	bne.n	8011b78 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011b58:	4b0c      	ldr	r3, [pc, #48]	; (8011b8c <USB_CoreInit+0xd8>)
 8011b5a:	4313      	orrs	r3, r2
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	689b      	ldr	r3, [r3, #8]
 8011b64:	f043 0206 	orr.w	r2, r3, #6
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	689b      	ldr	r3, [r3, #8]
 8011b70:	f043 0220 	orr.w	r2, r3, #32
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3710      	adds	r7, #16
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b84:	b004      	add	sp, #16
 8011b86:	4770      	bx	lr
 8011b88:	ffbdffbf 	.word	0xffbdffbf
 8011b8c:	03ee0000 	.word	0x03ee0000

08011b90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011b90:	b480      	push	{r7}
 8011b92:	b087      	sub	sp, #28
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	60f8      	str	r0, [r7, #12]
 8011b98:	60b9      	str	r1, [r7, #8]
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011b9e:	79fb      	ldrb	r3, [r7, #7]
 8011ba0:	2b02      	cmp	r3, #2
 8011ba2:	d165      	bne.n	8011c70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	4a41      	ldr	r2, [pc, #260]	; (8011cac <USB_SetTurnaroundTime+0x11c>)
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d906      	bls.n	8011bba <USB_SetTurnaroundTime+0x2a>
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	4a40      	ldr	r2, [pc, #256]	; (8011cb0 <USB_SetTurnaroundTime+0x120>)
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d202      	bcs.n	8011bba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011bb4:	230f      	movs	r3, #15
 8011bb6:	617b      	str	r3, [r7, #20]
 8011bb8:	e062      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	4a3c      	ldr	r2, [pc, #240]	; (8011cb0 <USB_SetTurnaroundTime+0x120>)
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	d306      	bcc.n	8011bd0 <USB_SetTurnaroundTime+0x40>
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	4a3b      	ldr	r2, [pc, #236]	; (8011cb4 <USB_SetTurnaroundTime+0x124>)
 8011bc6:	4293      	cmp	r3, r2
 8011bc8:	d202      	bcs.n	8011bd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011bca:	230e      	movs	r3, #14
 8011bcc:	617b      	str	r3, [r7, #20]
 8011bce:	e057      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	4a38      	ldr	r2, [pc, #224]	; (8011cb4 <USB_SetTurnaroundTime+0x124>)
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	d306      	bcc.n	8011be6 <USB_SetTurnaroundTime+0x56>
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	4a37      	ldr	r2, [pc, #220]	; (8011cb8 <USB_SetTurnaroundTime+0x128>)
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d202      	bcs.n	8011be6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011be0:	230d      	movs	r3, #13
 8011be2:	617b      	str	r3, [r7, #20]
 8011be4:	e04c      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	4a33      	ldr	r2, [pc, #204]	; (8011cb8 <USB_SetTurnaroundTime+0x128>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d306      	bcc.n	8011bfc <USB_SetTurnaroundTime+0x6c>
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	4a32      	ldr	r2, [pc, #200]	; (8011cbc <USB_SetTurnaroundTime+0x12c>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d802      	bhi.n	8011bfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011bf6:	230c      	movs	r3, #12
 8011bf8:	617b      	str	r3, [r7, #20]
 8011bfa:	e041      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	4a2f      	ldr	r2, [pc, #188]	; (8011cbc <USB_SetTurnaroundTime+0x12c>)
 8011c00:	4293      	cmp	r3, r2
 8011c02:	d906      	bls.n	8011c12 <USB_SetTurnaroundTime+0x82>
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	4a2e      	ldr	r2, [pc, #184]	; (8011cc0 <USB_SetTurnaroundTime+0x130>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d802      	bhi.n	8011c12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011c0c:	230b      	movs	r3, #11
 8011c0e:	617b      	str	r3, [r7, #20]
 8011c10:	e036      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	4a2a      	ldr	r2, [pc, #168]	; (8011cc0 <USB_SetTurnaroundTime+0x130>)
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d906      	bls.n	8011c28 <USB_SetTurnaroundTime+0x98>
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	4a29      	ldr	r2, [pc, #164]	; (8011cc4 <USB_SetTurnaroundTime+0x134>)
 8011c1e:	4293      	cmp	r3, r2
 8011c20:	d802      	bhi.n	8011c28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011c22:	230a      	movs	r3, #10
 8011c24:	617b      	str	r3, [r7, #20]
 8011c26:	e02b      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	4a26      	ldr	r2, [pc, #152]	; (8011cc4 <USB_SetTurnaroundTime+0x134>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	d906      	bls.n	8011c3e <USB_SetTurnaroundTime+0xae>
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	4a25      	ldr	r2, [pc, #148]	; (8011cc8 <USB_SetTurnaroundTime+0x138>)
 8011c34:	4293      	cmp	r3, r2
 8011c36:	d202      	bcs.n	8011c3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011c38:	2309      	movs	r3, #9
 8011c3a:	617b      	str	r3, [r7, #20]
 8011c3c:	e020      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	4a21      	ldr	r2, [pc, #132]	; (8011cc8 <USB_SetTurnaroundTime+0x138>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	d306      	bcc.n	8011c54 <USB_SetTurnaroundTime+0xc4>
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	4a20      	ldr	r2, [pc, #128]	; (8011ccc <USB_SetTurnaroundTime+0x13c>)
 8011c4a:	4293      	cmp	r3, r2
 8011c4c:	d802      	bhi.n	8011c54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011c4e:	2308      	movs	r3, #8
 8011c50:	617b      	str	r3, [r7, #20]
 8011c52:	e015      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	4a1d      	ldr	r2, [pc, #116]	; (8011ccc <USB_SetTurnaroundTime+0x13c>)
 8011c58:	4293      	cmp	r3, r2
 8011c5a:	d906      	bls.n	8011c6a <USB_SetTurnaroundTime+0xda>
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	4a1c      	ldr	r2, [pc, #112]	; (8011cd0 <USB_SetTurnaroundTime+0x140>)
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d202      	bcs.n	8011c6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011c64:	2307      	movs	r3, #7
 8011c66:	617b      	str	r3, [r7, #20]
 8011c68:	e00a      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011c6a:	2306      	movs	r3, #6
 8011c6c:	617b      	str	r3, [r7, #20]
 8011c6e:	e007      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011c70:	79fb      	ldrb	r3, [r7, #7]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d102      	bne.n	8011c7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011c76:	2309      	movs	r3, #9
 8011c78:	617b      	str	r3, [r7, #20]
 8011c7a:	e001      	b.n	8011c80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011c7c:	2309      	movs	r3, #9
 8011c7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	68da      	ldr	r2, [r3, #12]
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	029b      	lsls	r3, r3, #10
 8011c94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011c98:	431a      	orrs	r2, r3
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011c9e:	2300      	movs	r3, #0
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	371c      	adds	r7, #28
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr
 8011cac:	00d8acbf 	.word	0x00d8acbf
 8011cb0:	00e4e1c0 	.word	0x00e4e1c0
 8011cb4:	00f42400 	.word	0x00f42400
 8011cb8:	01067380 	.word	0x01067380
 8011cbc:	011a499f 	.word	0x011a499f
 8011cc0:	01312cff 	.word	0x01312cff
 8011cc4:	014ca43f 	.word	0x014ca43f
 8011cc8:	016e3600 	.word	0x016e3600
 8011ccc:	01a6ab1f 	.word	0x01a6ab1f
 8011cd0:	01e84800 	.word	0x01e84800

08011cd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b083      	sub	sp, #12
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	689b      	ldr	r3, [r3, #8]
 8011ce0:	f043 0201 	orr.w	r2, r3, #1
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011ce8:	2300      	movs	r3, #0
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	370c      	adds	r7, #12
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr

08011cf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011cf6:	b480      	push	{r7}
 8011cf8:	b083      	sub	sp, #12
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	689b      	ldr	r3, [r3, #8]
 8011d02:	f023 0201 	bic.w	r2, r3, #1
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011d0a:	2300      	movs	r3, #0
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	460b      	mov	r3, r1
 8011d22:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011d30:	78fb      	ldrb	r3, [r7, #3]
 8011d32:	2b01      	cmp	r3, #1
 8011d34:	d106      	bne.n	8011d44 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	60da      	str	r2, [r3, #12]
 8011d42:	e00b      	b.n	8011d5c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011d44:	78fb      	ldrb	r3, [r7, #3]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d106      	bne.n	8011d58 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	60da      	str	r2, [r3, #12]
 8011d56:	e001      	b.n	8011d5c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	e003      	b.n	8011d64 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011d5c:	2032      	movs	r0, #50	; 0x32
 8011d5e:	f7f3 ff8b 	bl	8005c78 <HAL_Delay>

  return HAL_OK;
 8011d62:	2300      	movs	r3, #0
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3708      	adds	r7, #8
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011d6c:	b084      	sub	sp, #16
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b086      	sub	sp, #24
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
 8011d76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011d86:	2300      	movs	r3, #0
 8011d88:	613b      	str	r3, [r7, #16]
 8011d8a:	e009      	b.n	8011da0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	3340      	adds	r3, #64	; 0x40
 8011d92:	009b      	lsls	r3, r3, #2
 8011d94:	4413      	add	r3, r2
 8011d96:	2200      	movs	r2, #0
 8011d98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	613b      	str	r3, [r7, #16]
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	2b0e      	cmp	r3, #14
 8011da4:	d9f2      	bls.n	8011d8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d11c      	bne.n	8011de6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	68fa      	ldr	r2, [r7, #12]
 8011db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011dba:	f043 0302 	orr.w	r3, r3, #2
 8011dbe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	601a      	str	r2, [r3, #0]
 8011de4:	e005      	b.n	8011df2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011df8:	461a      	mov	r2, r3
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e04:	4619      	mov	r1, r3
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	680b      	ldr	r3, [r1, #0]
 8011e10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	d10c      	bne.n	8011e32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d104      	bne.n	8011e28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011e1e:	2100      	movs	r1, #0
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f000 f949 	bl	80120b8 <USB_SetDevSpeed>
 8011e26:	e008      	b.n	8011e3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011e28:	2101      	movs	r1, #1
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f000 f944 	bl	80120b8 <USB_SetDevSpeed>
 8011e30:	e003      	b.n	8011e3a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011e32:	2103      	movs	r1, #3
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 f93f 	bl	80120b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011e3a:	2110      	movs	r1, #16
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f000 f8f3 	bl	8012028 <USB_FlushTxFifo>
 8011e42:	4603      	mov	r3, r0
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d001      	beq.n	8011e4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f000 f911 	bl	8012074 <USB_FlushRxFifo>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d001      	beq.n	8011e5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011e58:	2301      	movs	r3, #1
 8011e5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e62:	461a      	mov	r2, r3
 8011e64:	2300      	movs	r3, #0
 8011e66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e6e:	461a      	mov	r2, r3
 8011e70:	2300      	movs	r3, #0
 8011e72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011e80:	2300      	movs	r3, #0
 8011e82:	613b      	str	r3, [r7, #16]
 8011e84:	e043      	b.n	8011f0e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	015a      	lsls	r2, r3, #5
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e9c:	d118      	bne.n	8011ed0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d10a      	bne.n	8011eba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	015a      	lsls	r2, r3, #5
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	4413      	add	r3, r2
 8011eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011eb6:	6013      	str	r3, [r2, #0]
 8011eb8:	e013      	b.n	8011ee2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	015a      	lsls	r2, r3, #5
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011ecc:	6013      	str	r3, [r2, #0]
 8011ece:	e008      	b.n	8011ee2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	015a      	lsls	r2, r3, #5
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	4413      	add	r3, r2
 8011ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011edc:	461a      	mov	r2, r3
 8011ede:	2300      	movs	r3, #0
 8011ee0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	015a      	lsls	r2, r3, #5
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	4413      	add	r3, r2
 8011eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011eee:	461a      	mov	r2, r3
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	015a      	lsls	r2, r3, #5
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	4413      	add	r3, r2
 8011efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f00:	461a      	mov	r2, r3
 8011f02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011f06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	613b      	str	r3, [r7, #16]
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f10:	693a      	ldr	r2, [r7, #16]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d3b7      	bcc.n	8011e86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f16:	2300      	movs	r3, #0
 8011f18:	613b      	str	r3, [r7, #16]
 8011f1a:	e043      	b.n	8011fa4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	015a      	lsls	r2, r3, #5
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	4413      	add	r3, r2
 8011f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f32:	d118      	bne.n	8011f66 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d10a      	bne.n	8011f50 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	015a      	lsls	r2, r3, #5
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	4413      	add	r3, r2
 8011f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f46:	461a      	mov	r2, r3
 8011f48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011f4c:	6013      	str	r3, [r2, #0]
 8011f4e:	e013      	b.n	8011f78 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	015a      	lsls	r2, r3, #5
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	4413      	add	r3, r2
 8011f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011f62:	6013      	str	r3, [r2, #0]
 8011f64:	e008      	b.n	8011f78 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	015a      	lsls	r2, r3, #5
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	4413      	add	r3, r2
 8011f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f72:	461a      	mov	r2, r3
 8011f74:	2300      	movs	r3, #0
 8011f76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	015a      	lsls	r2, r3, #5
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	4413      	add	r3, r2
 8011f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f84:	461a      	mov	r2, r3
 8011f86:	2300      	movs	r3, #0
 8011f88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	015a      	lsls	r2, r3, #5
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	4413      	add	r3, r2
 8011f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f96:	461a      	mov	r2, r3
 8011f98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011f9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	613b      	str	r3, [r7, #16]
 8011fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa6:	693a      	ldr	r2, [r7, #16]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d3b7      	bcc.n	8011f1c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fb2:	691b      	ldr	r3, [r3, #16]
 8011fb4:	68fa      	ldr	r2, [r7, #12]
 8011fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011fbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011fcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d105      	bne.n	8011fe0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	699b      	ldr	r3, [r3, #24]
 8011fd8:	f043 0210 	orr.w	r2, r3, #16
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	699a      	ldr	r2, [r3, #24]
 8011fe4:	4b0e      	ldr	r3, [pc, #56]	; (8012020 <USB_DevInit+0x2b4>)
 8011fe6:	4313      	orrs	r3, r2
 8011fe8:	687a      	ldr	r2, [r7, #4]
 8011fea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d005      	beq.n	8011ffe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	699b      	ldr	r3, [r3, #24]
 8011ff6:	f043 0208 	orr.w	r2, r3, #8
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012000:	2b01      	cmp	r3, #1
 8012002:	d105      	bne.n	8012010 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	699a      	ldr	r2, [r3, #24]
 8012008:	4b06      	ldr	r3, [pc, #24]	; (8012024 <USB_DevInit+0x2b8>)
 801200a:	4313      	orrs	r3, r2
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012010:	7dfb      	ldrb	r3, [r7, #23]
}
 8012012:	4618      	mov	r0, r3
 8012014:	3718      	adds	r7, #24
 8012016:	46bd      	mov	sp, r7
 8012018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801201c:	b004      	add	sp, #16
 801201e:	4770      	bx	lr
 8012020:	803c3800 	.word	0x803c3800
 8012024:	40000004 	.word	0x40000004

08012028 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012028:	b480      	push	{r7}
 801202a:	b085      	sub	sp, #20
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8012032:	2300      	movs	r3, #0
 8012034:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	019b      	lsls	r3, r3, #6
 801203a:	f043 0220 	orr.w	r2, r3, #32
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	3301      	adds	r3, #1
 8012046:	60fb      	str	r3, [r7, #12]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	4a09      	ldr	r2, [pc, #36]	; (8012070 <USB_FlushTxFifo+0x48>)
 801204c:	4293      	cmp	r3, r2
 801204e:	d901      	bls.n	8012054 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012050:	2303      	movs	r3, #3
 8012052:	e006      	b.n	8012062 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	691b      	ldr	r3, [r3, #16]
 8012058:	f003 0320 	and.w	r3, r3, #32
 801205c:	2b20      	cmp	r3, #32
 801205e:	d0f0      	beq.n	8012042 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012060:	2300      	movs	r3, #0
}
 8012062:	4618      	mov	r0, r3
 8012064:	3714      	adds	r7, #20
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr
 801206e:	bf00      	nop
 8012070:	00030d40 	.word	0x00030d40

08012074 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012074:	b480      	push	{r7}
 8012076:	b085      	sub	sp, #20
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801207c:	2300      	movs	r3, #0
 801207e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2210      	movs	r2, #16
 8012084:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	3301      	adds	r3, #1
 801208a:	60fb      	str	r3, [r7, #12]
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	4a09      	ldr	r2, [pc, #36]	; (80120b4 <USB_FlushRxFifo+0x40>)
 8012090:	4293      	cmp	r3, r2
 8012092:	d901      	bls.n	8012098 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012094:	2303      	movs	r3, #3
 8012096:	e006      	b.n	80120a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	691b      	ldr	r3, [r3, #16]
 801209c:	f003 0310 	and.w	r3, r3, #16
 80120a0:	2b10      	cmp	r3, #16
 80120a2:	d0f0      	beq.n	8012086 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3714      	adds	r7, #20
 80120aa:	46bd      	mov	sp, r7
 80120ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	00030d40 	.word	0x00030d40

080120b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80120b8:	b480      	push	{r7}
 80120ba:	b085      	sub	sp, #20
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
 80120c0:	460b      	mov	r3, r1
 80120c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	78fb      	ldrb	r3, [r7, #3]
 80120d2:	68f9      	ldr	r1, [r7, #12]
 80120d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80120d8:	4313      	orrs	r3, r2
 80120da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80120dc:	2300      	movs	r3, #0
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3714      	adds	r7, #20
 80120e2:	46bd      	mov	sp, r7
 80120e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e8:	4770      	bx	lr

080120ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80120ea:	b480      	push	{r7}
 80120ec:	b087      	sub	sp, #28
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120fc:	689b      	ldr	r3, [r3, #8]
 80120fe:	f003 0306 	and.w	r3, r3, #6
 8012102:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d102      	bne.n	8012110 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801210a:	2300      	movs	r3, #0
 801210c:	75fb      	strb	r3, [r7, #23]
 801210e:	e00a      	b.n	8012126 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2b02      	cmp	r3, #2
 8012114:	d002      	beq.n	801211c <USB_GetDevSpeed+0x32>
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2b06      	cmp	r3, #6
 801211a:	d102      	bne.n	8012122 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801211c:	2302      	movs	r3, #2
 801211e:	75fb      	strb	r3, [r7, #23]
 8012120:	e001      	b.n	8012126 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012122:	230f      	movs	r3, #15
 8012124:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012126:	7dfb      	ldrb	r3, [r7, #23]
}
 8012128:	4618      	mov	r0, r3
 801212a:	371c      	adds	r7, #28
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr

08012134 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012134:	b480      	push	{r7}
 8012136:	b085      	sub	sp, #20
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	781b      	ldrb	r3, [r3, #0]
 8012146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	785b      	ldrb	r3, [r3, #1]
 801214c:	2b01      	cmp	r3, #1
 801214e:	d139      	bne.n	80121c4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012156:	69da      	ldr	r2, [r3, #28]
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	f003 030f 	and.w	r3, r3, #15
 8012160:	2101      	movs	r1, #1
 8012162:	fa01 f303 	lsl.w	r3, r1, r3
 8012166:	b29b      	uxth	r3, r3
 8012168:	68f9      	ldr	r1, [r7, #12]
 801216a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801216e:	4313      	orrs	r3, r2
 8012170:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	015a      	lsls	r2, r3, #5
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	4413      	add	r3, r2
 801217a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012184:	2b00      	cmp	r3, #0
 8012186:	d153      	bne.n	8012230 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	015a      	lsls	r2, r3, #5
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	4413      	add	r3, r2
 8012190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	689b      	ldr	r3, [r3, #8]
 801219a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	78db      	ldrb	r3, [r3, #3]
 80121a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80121a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	059b      	lsls	r3, r3, #22
 80121aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80121ac:	431a      	orrs	r2, r3
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	0159      	lsls	r1, r3, #5
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	440b      	add	r3, r1
 80121b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121ba:	4619      	mov	r1, r3
 80121bc:	4b20      	ldr	r3, [pc, #128]	; (8012240 <USB_ActivateEndpoint+0x10c>)
 80121be:	4313      	orrs	r3, r2
 80121c0:	600b      	str	r3, [r1, #0]
 80121c2:	e035      	b.n	8012230 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ca:	69da      	ldr	r2, [r3, #28]
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	f003 030f 	and.w	r3, r3, #15
 80121d4:	2101      	movs	r1, #1
 80121d6:	fa01 f303 	lsl.w	r3, r1, r3
 80121da:	041b      	lsls	r3, r3, #16
 80121dc:	68f9      	ldr	r1, [r7, #12]
 80121de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121e2:	4313      	orrs	r3, r2
 80121e4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	015a      	lsls	r2, r3, #5
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	4413      	add	r3, r2
 80121ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d119      	bne.n	8012230 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	015a      	lsls	r2, r3, #5
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	4413      	add	r3, r2
 8012204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	689b      	ldr	r3, [r3, #8]
 801220e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	78db      	ldrb	r3, [r3, #3]
 8012216:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012218:	430b      	orrs	r3, r1
 801221a:	431a      	orrs	r2, r3
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	0159      	lsls	r1, r3, #5
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	440b      	add	r3, r1
 8012224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012228:	4619      	mov	r1, r3
 801222a:	4b05      	ldr	r3, [pc, #20]	; (8012240 <USB_ActivateEndpoint+0x10c>)
 801222c:	4313      	orrs	r3, r2
 801222e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012230:	2300      	movs	r3, #0
}
 8012232:	4618      	mov	r0, r3
 8012234:	3714      	adds	r7, #20
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop
 8012240:	10008000 	.word	0x10008000

08012244 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012244:	b480      	push	{r7}
 8012246:	b085      	sub	sp, #20
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	785b      	ldrb	r3, [r3, #1]
 801225c:	2b01      	cmp	r3, #1
 801225e:	d161      	bne.n	8012324 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	015a      	lsls	r2, r3, #5
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	4413      	add	r3, r2
 8012268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012276:	d11f      	bne.n	80122b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	015a      	lsls	r2, r3, #5
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	4413      	add	r3, r2
 8012280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	68ba      	ldr	r2, [r7, #8]
 8012288:	0151      	lsls	r1, r2, #5
 801228a:	68fa      	ldr	r2, [r7, #12]
 801228c:	440a      	add	r2, r1
 801228e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012292:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012296:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	015a      	lsls	r2, r3, #5
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	4413      	add	r3, r2
 80122a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	68ba      	ldr	r2, [r7, #8]
 80122a8:	0151      	lsls	r1, r2, #5
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	440a      	add	r2, r1
 80122ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80122b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80122b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	f003 030f 	and.w	r3, r3, #15
 80122c8:	2101      	movs	r1, #1
 80122ca:	fa01 f303 	lsl.w	r3, r1, r3
 80122ce:	b29b      	uxth	r3, r3
 80122d0:	43db      	mvns	r3, r3
 80122d2:	68f9      	ldr	r1, [r7, #12]
 80122d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122d8:	4013      	ands	r3, r2
 80122da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122e2:	69da      	ldr	r2, [r3, #28]
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	781b      	ldrb	r3, [r3, #0]
 80122e8:	f003 030f 	and.w	r3, r3, #15
 80122ec:	2101      	movs	r1, #1
 80122ee:	fa01 f303 	lsl.w	r3, r1, r3
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	43db      	mvns	r3, r3
 80122f6:	68f9      	ldr	r1, [r7, #12]
 80122f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122fc:	4013      	ands	r3, r2
 80122fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	015a      	lsls	r2, r3, #5
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	4413      	add	r3, r2
 8012308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	0159      	lsls	r1, r3, #5
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	440b      	add	r3, r1
 8012316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801231a:	4619      	mov	r1, r3
 801231c:	4b35      	ldr	r3, [pc, #212]	; (80123f4 <USB_DeactivateEndpoint+0x1b0>)
 801231e:	4013      	ands	r3, r2
 8012320:	600b      	str	r3, [r1, #0]
 8012322:	e060      	b.n	80123e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	015a      	lsls	r2, r3, #5
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	4413      	add	r3, r2
 801232c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801233a:	d11f      	bne.n	801237c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	015a      	lsls	r2, r3, #5
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	4413      	add	r3, r2
 8012344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	68ba      	ldr	r2, [r7, #8]
 801234c:	0151      	lsls	r1, r2, #5
 801234e:	68fa      	ldr	r2, [r7, #12]
 8012350:	440a      	add	r2, r1
 8012352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012356:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801235a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	015a      	lsls	r2, r3, #5
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	4413      	add	r3, r2
 8012364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	68ba      	ldr	r2, [r7, #8]
 801236c:	0151      	lsls	r1, r2, #5
 801236e:	68fa      	ldr	r2, [r7, #12]
 8012370:	440a      	add	r2, r1
 8012372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801237a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	781b      	ldrb	r3, [r3, #0]
 8012388:	f003 030f 	and.w	r3, r3, #15
 801238c:	2101      	movs	r1, #1
 801238e:	fa01 f303 	lsl.w	r3, r1, r3
 8012392:	041b      	lsls	r3, r3, #16
 8012394:	43db      	mvns	r3, r3
 8012396:	68f9      	ldr	r1, [r7, #12]
 8012398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801239c:	4013      	ands	r3, r2
 801239e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123a6:	69da      	ldr	r2, [r3, #28]
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	f003 030f 	and.w	r3, r3, #15
 80123b0:	2101      	movs	r1, #1
 80123b2:	fa01 f303 	lsl.w	r3, r1, r3
 80123b6:	041b      	lsls	r3, r3, #16
 80123b8:	43db      	mvns	r3, r3
 80123ba:	68f9      	ldr	r1, [r7, #12]
 80123bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123c0:	4013      	ands	r3, r2
 80123c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	015a      	lsls	r2, r3, #5
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	4413      	add	r3, r2
 80123cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123d0:	681a      	ldr	r2, [r3, #0]
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	0159      	lsls	r1, r3, #5
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	440b      	add	r3, r1
 80123da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123de:	4619      	mov	r1, r3
 80123e0:	4b05      	ldr	r3, [pc, #20]	; (80123f8 <USB_DeactivateEndpoint+0x1b4>)
 80123e2:	4013      	ands	r3, r2
 80123e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80123e6:	2300      	movs	r3, #0
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3714      	adds	r7, #20
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr
 80123f4:	ec337800 	.word	0xec337800
 80123f8:	eff37800 	.word	0xeff37800

080123fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b08a      	sub	sp, #40	; 0x28
 8012400:	af02      	add	r7, sp, #8
 8012402:	60f8      	str	r0, [r7, #12]
 8012404:	60b9      	str	r1, [r7, #8]
 8012406:	4613      	mov	r3, r2
 8012408:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	781b      	ldrb	r3, [r3, #0]
 8012412:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	785b      	ldrb	r3, [r3, #1]
 8012418:	2b01      	cmp	r3, #1
 801241a:	f040 8163 	bne.w	80126e4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	695b      	ldr	r3, [r3, #20]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d132      	bne.n	801248c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012426:	69bb      	ldr	r3, [r7, #24]
 8012428:	015a      	lsls	r2, r3, #5
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	4413      	add	r3, r2
 801242e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012432:	691a      	ldr	r2, [r3, #16]
 8012434:	69bb      	ldr	r3, [r7, #24]
 8012436:	0159      	lsls	r1, r3, #5
 8012438:	69fb      	ldr	r3, [r7, #28]
 801243a:	440b      	add	r3, r1
 801243c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012440:	4619      	mov	r1, r3
 8012442:	4ba5      	ldr	r3, [pc, #660]	; (80126d8 <USB_EPStartXfer+0x2dc>)
 8012444:	4013      	ands	r3, r2
 8012446:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012448:	69bb      	ldr	r3, [r7, #24]
 801244a:	015a      	lsls	r2, r3, #5
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	4413      	add	r3, r2
 8012450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012454:	691b      	ldr	r3, [r3, #16]
 8012456:	69ba      	ldr	r2, [r7, #24]
 8012458:	0151      	lsls	r1, r2, #5
 801245a:	69fa      	ldr	r2, [r7, #28]
 801245c:	440a      	add	r2, r1
 801245e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012466:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012468:	69bb      	ldr	r3, [r7, #24]
 801246a:	015a      	lsls	r2, r3, #5
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	4413      	add	r3, r2
 8012470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012474:	691a      	ldr	r2, [r3, #16]
 8012476:	69bb      	ldr	r3, [r7, #24]
 8012478:	0159      	lsls	r1, r3, #5
 801247a:	69fb      	ldr	r3, [r7, #28]
 801247c:	440b      	add	r3, r1
 801247e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012482:	4619      	mov	r1, r3
 8012484:	4b95      	ldr	r3, [pc, #596]	; (80126dc <USB_EPStartXfer+0x2e0>)
 8012486:	4013      	ands	r3, r2
 8012488:	610b      	str	r3, [r1, #16]
 801248a:	e074      	b.n	8012576 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801248c:	69bb      	ldr	r3, [r7, #24]
 801248e:	015a      	lsls	r2, r3, #5
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	4413      	add	r3, r2
 8012494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012498:	691a      	ldr	r2, [r3, #16]
 801249a:	69bb      	ldr	r3, [r7, #24]
 801249c:	0159      	lsls	r1, r3, #5
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	440b      	add	r3, r1
 80124a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124a6:	4619      	mov	r1, r3
 80124a8:	4b8c      	ldr	r3, [pc, #560]	; (80126dc <USB_EPStartXfer+0x2e0>)
 80124aa:	4013      	ands	r3, r2
 80124ac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	015a      	lsls	r2, r3, #5
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	4413      	add	r3, r2
 80124b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ba:	691a      	ldr	r2, [r3, #16]
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	0159      	lsls	r1, r3, #5
 80124c0:	69fb      	ldr	r3, [r7, #28]
 80124c2:	440b      	add	r3, r1
 80124c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124c8:	4619      	mov	r1, r3
 80124ca:	4b83      	ldr	r3, [pc, #524]	; (80126d8 <USB_EPStartXfer+0x2dc>)
 80124cc:	4013      	ands	r3, r2
 80124ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80124d0:	69bb      	ldr	r3, [r7, #24]
 80124d2:	015a      	lsls	r2, r3, #5
 80124d4:	69fb      	ldr	r3, [r7, #28]
 80124d6:	4413      	add	r3, r2
 80124d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124dc:	691a      	ldr	r2, [r3, #16]
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	6959      	ldr	r1, [r3, #20]
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	689b      	ldr	r3, [r3, #8]
 80124e6:	440b      	add	r3, r1
 80124e8:	1e59      	subs	r1, r3, #1
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	689b      	ldr	r3, [r3, #8]
 80124ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80124f2:	04d9      	lsls	r1, r3, #19
 80124f4:	4b7a      	ldr	r3, [pc, #488]	; (80126e0 <USB_EPStartXfer+0x2e4>)
 80124f6:	400b      	ands	r3, r1
 80124f8:	69b9      	ldr	r1, [r7, #24]
 80124fa:	0148      	lsls	r0, r1, #5
 80124fc:	69f9      	ldr	r1, [r7, #28]
 80124fe:	4401      	add	r1, r0
 8012500:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012504:	4313      	orrs	r3, r2
 8012506:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012508:	69bb      	ldr	r3, [r7, #24]
 801250a:	015a      	lsls	r2, r3, #5
 801250c:	69fb      	ldr	r3, [r7, #28]
 801250e:	4413      	add	r3, r2
 8012510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012514:	691a      	ldr	r2, [r3, #16]
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	695b      	ldr	r3, [r3, #20]
 801251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801251e:	69b9      	ldr	r1, [r7, #24]
 8012520:	0148      	lsls	r0, r1, #5
 8012522:	69f9      	ldr	r1, [r7, #28]
 8012524:	4401      	add	r1, r0
 8012526:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801252a:	4313      	orrs	r3, r2
 801252c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	78db      	ldrb	r3, [r3, #3]
 8012532:	2b01      	cmp	r3, #1
 8012534:	d11f      	bne.n	8012576 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	015a      	lsls	r2, r3, #5
 801253a:	69fb      	ldr	r3, [r7, #28]
 801253c:	4413      	add	r3, r2
 801253e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012542:	691b      	ldr	r3, [r3, #16]
 8012544:	69ba      	ldr	r2, [r7, #24]
 8012546:	0151      	lsls	r1, r2, #5
 8012548:	69fa      	ldr	r2, [r7, #28]
 801254a:	440a      	add	r2, r1
 801254c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012550:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012554:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012556:	69bb      	ldr	r3, [r7, #24]
 8012558:	015a      	lsls	r2, r3, #5
 801255a:	69fb      	ldr	r3, [r7, #28]
 801255c:	4413      	add	r3, r2
 801255e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012562:	691b      	ldr	r3, [r3, #16]
 8012564:	69ba      	ldr	r2, [r7, #24]
 8012566:	0151      	lsls	r1, r2, #5
 8012568:	69fa      	ldr	r2, [r7, #28]
 801256a:	440a      	add	r2, r1
 801256c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012570:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012574:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012576:	79fb      	ldrb	r3, [r7, #7]
 8012578:	2b01      	cmp	r3, #1
 801257a:	d14b      	bne.n	8012614 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	691b      	ldr	r3, [r3, #16]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d009      	beq.n	8012598 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012584:	69bb      	ldr	r3, [r7, #24]
 8012586:	015a      	lsls	r2, r3, #5
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	4413      	add	r3, r2
 801258c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012590:	461a      	mov	r2, r3
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	691b      	ldr	r3, [r3, #16]
 8012596:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	78db      	ldrb	r3, [r3, #3]
 801259c:	2b01      	cmp	r3, #1
 801259e:	d128      	bne.n	80125f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125a6:	689b      	ldr	r3, [r3, #8]
 80125a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d110      	bne.n	80125d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	015a      	lsls	r2, r3, #5
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	4413      	add	r3, r2
 80125b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	69ba      	ldr	r2, [r7, #24]
 80125c0:	0151      	lsls	r1, r2, #5
 80125c2:	69fa      	ldr	r2, [r7, #28]
 80125c4:	440a      	add	r2, r1
 80125c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80125ce:	6013      	str	r3, [r2, #0]
 80125d0:	e00f      	b.n	80125f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	015a      	lsls	r2, r3, #5
 80125d6:	69fb      	ldr	r3, [r7, #28]
 80125d8:	4413      	add	r3, r2
 80125da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	69ba      	ldr	r2, [r7, #24]
 80125e2:	0151      	lsls	r1, r2, #5
 80125e4:	69fa      	ldr	r2, [r7, #28]
 80125e6:	440a      	add	r2, r1
 80125e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80125f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	015a      	lsls	r2, r3, #5
 80125f6:	69fb      	ldr	r3, [r7, #28]
 80125f8:	4413      	add	r3, r2
 80125fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	69ba      	ldr	r2, [r7, #24]
 8012602:	0151      	lsls	r1, r2, #5
 8012604:	69fa      	ldr	r2, [r7, #28]
 8012606:	440a      	add	r2, r1
 8012608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801260c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012610:	6013      	str	r3, [r2, #0]
 8012612:	e133      	b.n	801287c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012614:	69bb      	ldr	r3, [r7, #24]
 8012616:	015a      	lsls	r2, r3, #5
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	4413      	add	r3, r2
 801261c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	69ba      	ldr	r2, [r7, #24]
 8012624:	0151      	lsls	r1, r2, #5
 8012626:	69fa      	ldr	r2, [r7, #28]
 8012628:	440a      	add	r2, r1
 801262a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801262e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012632:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	78db      	ldrb	r3, [r3, #3]
 8012638:	2b01      	cmp	r3, #1
 801263a:	d015      	beq.n	8012668 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	695b      	ldr	r3, [r3, #20]
 8012640:	2b00      	cmp	r3, #0
 8012642:	f000 811b 	beq.w	801287c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801264c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	f003 030f 	and.w	r3, r3, #15
 8012656:	2101      	movs	r1, #1
 8012658:	fa01 f303 	lsl.w	r3, r1, r3
 801265c:	69f9      	ldr	r1, [r7, #28]
 801265e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012662:	4313      	orrs	r3, r2
 8012664:	634b      	str	r3, [r1, #52]	; 0x34
 8012666:	e109      	b.n	801287c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012668:	69fb      	ldr	r3, [r7, #28]
 801266a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801266e:	689b      	ldr	r3, [r3, #8]
 8012670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012674:	2b00      	cmp	r3, #0
 8012676:	d110      	bne.n	801269a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012678:	69bb      	ldr	r3, [r7, #24]
 801267a:	015a      	lsls	r2, r3, #5
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	4413      	add	r3, r2
 8012680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	69ba      	ldr	r2, [r7, #24]
 8012688:	0151      	lsls	r1, r2, #5
 801268a:	69fa      	ldr	r2, [r7, #28]
 801268c:	440a      	add	r2, r1
 801268e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012696:	6013      	str	r3, [r2, #0]
 8012698:	e00f      	b.n	80126ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	015a      	lsls	r2, r3, #5
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	4413      	add	r3, r2
 80126a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	69ba      	ldr	r2, [r7, #24]
 80126aa:	0151      	lsls	r1, r2, #5
 80126ac:	69fa      	ldr	r2, [r7, #28]
 80126ae:	440a      	add	r2, r1
 80126b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80126b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	68d9      	ldr	r1, [r3, #12]
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	781a      	ldrb	r2, [r3, #0]
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	695b      	ldr	r3, [r3, #20]
 80126c6:	b298      	uxth	r0, r3
 80126c8:	79fb      	ldrb	r3, [r7, #7]
 80126ca:	9300      	str	r3, [sp, #0]
 80126cc:	4603      	mov	r3, r0
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	f000 fa38 	bl	8012b44 <USB_WritePacket>
 80126d4:	e0d2      	b.n	801287c <USB_EPStartXfer+0x480>
 80126d6:	bf00      	nop
 80126d8:	e007ffff 	.word	0xe007ffff
 80126dc:	fff80000 	.word	0xfff80000
 80126e0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	015a      	lsls	r2, r3, #5
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	4413      	add	r3, r2
 80126ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126f0:	691a      	ldr	r2, [r3, #16]
 80126f2:	69bb      	ldr	r3, [r7, #24]
 80126f4:	0159      	lsls	r1, r3, #5
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	440b      	add	r3, r1
 80126fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126fe:	4619      	mov	r1, r3
 8012700:	4b61      	ldr	r3, [pc, #388]	; (8012888 <USB_EPStartXfer+0x48c>)
 8012702:	4013      	ands	r3, r2
 8012704:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	015a      	lsls	r2, r3, #5
 801270a:	69fb      	ldr	r3, [r7, #28]
 801270c:	4413      	add	r3, r2
 801270e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012712:	691a      	ldr	r2, [r3, #16]
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	0159      	lsls	r1, r3, #5
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	440b      	add	r3, r1
 801271c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012720:	4619      	mov	r1, r3
 8012722:	4b5a      	ldr	r3, [pc, #360]	; (801288c <USB_EPStartXfer+0x490>)
 8012724:	4013      	ands	r3, r2
 8012726:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	695b      	ldr	r3, [r3, #20]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d123      	bne.n	8012778 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012730:	69bb      	ldr	r3, [r7, #24]
 8012732:	015a      	lsls	r2, r3, #5
 8012734:	69fb      	ldr	r3, [r7, #28]
 8012736:	4413      	add	r3, r2
 8012738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801273c:	691a      	ldr	r2, [r3, #16]
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	689b      	ldr	r3, [r3, #8]
 8012742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012746:	69b9      	ldr	r1, [r7, #24]
 8012748:	0148      	lsls	r0, r1, #5
 801274a:	69f9      	ldr	r1, [r7, #28]
 801274c:	4401      	add	r1, r0
 801274e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012752:	4313      	orrs	r3, r2
 8012754:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012756:	69bb      	ldr	r3, [r7, #24]
 8012758:	015a      	lsls	r2, r3, #5
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	4413      	add	r3, r2
 801275e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012762:	691b      	ldr	r3, [r3, #16]
 8012764:	69ba      	ldr	r2, [r7, #24]
 8012766:	0151      	lsls	r1, r2, #5
 8012768:	69fa      	ldr	r2, [r7, #28]
 801276a:	440a      	add	r2, r1
 801276c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012774:	6113      	str	r3, [r2, #16]
 8012776:	e033      	b.n	80127e0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	695a      	ldr	r2, [r3, #20]
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	689b      	ldr	r3, [r3, #8]
 8012780:	4413      	add	r3, r2
 8012782:	1e5a      	subs	r2, r3, #1
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	689b      	ldr	r3, [r3, #8]
 8012788:	fbb2 f3f3 	udiv	r3, r2, r3
 801278c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801278e:	69bb      	ldr	r3, [r7, #24]
 8012790:	015a      	lsls	r2, r3, #5
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	4413      	add	r3, r2
 8012796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801279a:	691a      	ldr	r2, [r3, #16]
 801279c:	8afb      	ldrh	r3, [r7, #22]
 801279e:	04d9      	lsls	r1, r3, #19
 80127a0:	4b3b      	ldr	r3, [pc, #236]	; (8012890 <USB_EPStartXfer+0x494>)
 80127a2:	400b      	ands	r3, r1
 80127a4:	69b9      	ldr	r1, [r7, #24]
 80127a6:	0148      	lsls	r0, r1, #5
 80127a8:	69f9      	ldr	r1, [r7, #28]
 80127aa:	4401      	add	r1, r0
 80127ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80127b0:	4313      	orrs	r3, r2
 80127b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80127b4:	69bb      	ldr	r3, [r7, #24]
 80127b6:	015a      	lsls	r2, r3, #5
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	4413      	add	r3, r2
 80127bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127c0:	691a      	ldr	r2, [r3, #16]
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	689b      	ldr	r3, [r3, #8]
 80127c6:	8af9      	ldrh	r1, [r7, #22]
 80127c8:	fb01 f303 	mul.w	r3, r1, r3
 80127cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80127d0:	69b9      	ldr	r1, [r7, #24]
 80127d2:	0148      	lsls	r0, r1, #5
 80127d4:	69f9      	ldr	r1, [r7, #28]
 80127d6:	4401      	add	r1, r0
 80127d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80127dc:	4313      	orrs	r3, r2
 80127de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80127e0:	79fb      	ldrb	r3, [r7, #7]
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d10d      	bne.n	8012802 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	68db      	ldr	r3, [r3, #12]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d009      	beq.n	8012802 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	68d9      	ldr	r1, [r3, #12]
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	015a      	lsls	r2, r3, #5
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	4413      	add	r3, r2
 80127fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127fe:	460a      	mov	r2, r1
 8012800:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	78db      	ldrb	r3, [r3, #3]
 8012806:	2b01      	cmp	r3, #1
 8012808:	d128      	bne.n	801285c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012810:	689b      	ldr	r3, [r3, #8]
 8012812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012816:	2b00      	cmp	r3, #0
 8012818:	d110      	bne.n	801283c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801281a:	69bb      	ldr	r3, [r7, #24]
 801281c:	015a      	lsls	r2, r3, #5
 801281e:	69fb      	ldr	r3, [r7, #28]
 8012820:	4413      	add	r3, r2
 8012822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	69ba      	ldr	r2, [r7, #24]
 801282a:	0151      	lsls	r1, r2, #5
 801282c:	69fa      	ldr	r2, [r7, #28]
 801282e:	440a      	add	r2, r1
 8012830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012838:	6013      	str	r3, [r2, #0]
 801283a:	e00f      	b.n	801285c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801283c:	69bb      	ldr	r3, [r7, #24]
 801283e:	015a      	lsls	r2, r3, #5
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	4413      	add	r3, r2
 8012844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	69ba      	ldr	r2, [r7, #24]
 801284c:	0151      	lsls	r1, r2, #5
 801284e:	69fa      	ldr	r2, [r7, #28]
 8012850:	440a      	add	r2, r1
 8012852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801285a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801285c:	69bb      	ldr	r3, [r7, #24]
 801285e:	015a      	lsls	r2, r3, #5
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	4413      	add	r3, r2
 8012864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	69ba      	ldr	r2, [r7, #24]
 801286c:	0151      	lsls	r1, r2, #5
 801286e:	69fa      	ldr	r2, [r7, #28]
 8012870:	440a      	add	r2, r1
 8012872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801287a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801287c:	2300      	movs	r3, #0
}
 801287e:	4618      	mov	r0, r3
 8012880:	3720      	adds	r7, #32
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
 8012886:	bf00      	nop
 8012888:	fff80000 	.word	0xfff80000
 801288c:	e007ffff 	.word	0xe007ffff
 8012890:	1ff80000 	.word	0x1ff80000

08012894 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012894:	b480      	push	{r7}
 8012896:	b087      	sub	sp, #28
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	4613      	mov	r3, r2
 80128a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	785b      	ldrb	r3, [r3, #1]
 80128b0:	2b01      	cmp	r3, #1
 80128b2:	f040 80cd 	bne.w	8012a50 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	695b      	ldr	r3, [r3, #20]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d132      	bne.n	8012924 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	015a      	lsls	r2, r3, #5
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	4413      	add	r3, r2
 80128c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128ca:	691a      	ldr	r2, [r3, #16]
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	0159      	lsls	r1, r3, #5
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	440b      	add	r3, r1
 80128d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128d8:	4619      	mov	r1, r3
 80128da:	4b98      	ldr	r3, [pc, #608]	; (8012b3c <USB_EP0StartXfer+0x2a8>)
 80128dc:	4013      	ands	r3, r2
 80128de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	015a      	lsls	r2, r3, #5
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	4413      	add	r3, r2
 80128e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128ec:	691b      	ldr	r3, [r3, #16]
 80128ee:	693a      	ldr	r2, [r7, #16]
 80128f0:	0151      	lsls	r1, r2, #5
 80128f2:	697a      	ldr	r2, [r7, #20]
 80128f4:	440a      	add	r2, r1
 80128f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80128fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	015a      	lsls	r2, r3, #5
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	4413      	add	r3, r2
 8012908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801290c:	691a      	ldr	r2, [r3, #16]
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	0159      	lsls	r1, r3, #5
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	440b      	add	r3, r1
 8012916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801291a:	4619      	mov	r1, r3
 801291c:	4b88      	ldr	r3, [pc, #544]	; (8012b40 <USB_EP0StartXfer+0x2ac>)
 801291e:	4013      	ands	r3, r2
 8012920:	610b      	str	r3, [r1, #16]
 8012922:	e04e      	b.n	80129c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	015a      	lsls	r2, r3, #5
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	4413      	add	r3, r2
 801292c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012930:	691a      	ldr	r2, [r3, #16]
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	0159      	lsls	r1, r3, #5
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	440b      	add	r3, r1
 801293a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801293e:	4619      	mov	r1, r3
 8012940:	4b7f      	ldr	r3, [pc, #508]	; (8012b40 <USB_EP0StartXfer+0x2ac>)
 8012942:	4013      	ands	r3, r2
 8012944:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012946:	693b      	ldr	r3, [r7, #16]
 8012948:	015a      	lsls	r2, r3, #5
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	4413      	add	r3, r2
 801294e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012952:	691a      	ldr	r2, [r3, #16]
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	0159      	lsls	r1, r3, #5
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	440b      	add	r3, r1
 801295c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012960:	4619      	mov	r1, r3
 8012962:	4b76      	ldr	r3, [pc, #472]	; (8012b3c <USB_EP0StartXfer+0x2a8>)
 8012964:	4013      	ands	r3, r2
 8012966:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	695a      	ldr	r2, [r3, #20]
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	689b      	ldr	r3, [r3, #8]
 8012970:	429a      	cmp	r2, r3
 8012972:	d903      	bls.n	801297c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	689a      	ldr	r2, [r3, #8]
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	015a      	lsls	r2, r3, #5
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	4413      	add	r3, r2
 8012984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012988:	691b      	ldr	r3, [r3, #16]
 801298a:	693a      	ldr	r2, [r7, #16]
 801298c:	0151      	lsls	r1, r2, #5
 801298e:	697a      	ldr	r2, [r7, #20]
 8012990:	440a      	add	r2, r1
 8012992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801299a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	015a      	lsls	r2, r3, #5
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	4413      	add	r3, r2
 80129a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129a8:	691a      	ldr	r2, [r3, #16]
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	695b      	ldr	r3, [r3, #20]
 80129ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80129b2:	6939      	ldr	r1, [r7, #16]
 80129b4:	0148      	lsls	r0, r1, #5
 80129b6:	6979      	ldr	r1, [r7, #20]
 80129b8:	4401      	add	r1, r0
 80129ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80129be:	4313      	orrs	r3, r2
 80129c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80129c2:	79fb      	ldrb	r3, [r7, #7]
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d11e      	bne.n	8012a06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	691b      	ldr	r3, [r3, #16]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d009      	beq.n	80129e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	015a      	lsls	r2, r3, #5
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	4413      	add	r3, r2
 80129d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129dc:	461a      	mov	r2, r3
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	691b      	ldr	r3, [r3, #16]
 80129e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	015a      	lsls	r2, r3, #5
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	4413      	add	r3, r2
 80129ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	693a      	ldr	r2, [r7, #16]
 80129f4:	0151      	lsls	r1, r2, #5
 80129f6:	697a      	ldr	r2, [r7, #20]
 80129f8:	440a      	add	r2, r1
 80129fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a02:	6013      	str	r3, [r2, #0]
 8012a04:	e092      	b.n	8012b2c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	015a      	lsls	r2, r3, #5
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	693a      	ldr	r2, [r7, #16]
 8012a16:	0151      	lsls	r1, r2, #5
 8012a18:	697a      	ldr	r2, [r7, #20]
 8012a1a:	440a      	add	r2, r1
 8012a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	695b      	ldr	r3, [r3, #20]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d07e      	beq.n	8012b2c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	f003 030f 	and.w	r3, r3, #15
 8012a3e:	2101      	movs	r1, #1
 8012a40:	fa01 f303 	lsl.w	r3, r1, r3
 8012a44:	6979      	ldr	r1, [r7, #20]
 8012a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a4a:	4313      	orrs	r3, r2
 8012a4c:	634b      	str	r3, [r1, #52]	; 0x34
 8012a4e:	e06d      	b.n	8012b2c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	015a      	lsls	r2, r3, #5
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	4413      	add	r3, r2
 8012a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a5c:	691a      	ldr	r2, [r3, #16]
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	0159      	lsls	r1, r3, #5
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	440b      	add	r3, r1
 8012a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	4b34      	ldr	r3, [pc, #208]	; (8012b40 <USB_EP0StartXfer+0x2ac>)
 8012a6e:	4013      	ands	r3, r2
 8012a70:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	015a      	lsls	r2, r3, #5
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	4413      	add	r3, r2
 8012a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a7e:	691a      	ldr	r2, [r3, #16]
 8012a80:	693b      	ldr	r3, [r7, #16]
 8012a82:	0159      	lsls	r1, r3, #5
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	440b      	add	r3, r1
 8012a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	4b2b      	ldr	r3, [pc, #172]	; (8012b3c <USB_EP0StartXfer+0x2a8>)
 8012a90:	4013      	ands	r3, r2
 8012a92:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	695b      	ldr	r3, [r3, #20]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d003      	beq.n	8012aa4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	689a      	ldr	r2, [r3, #8]
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	015a      	lsls	r2, r3, #5
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	4413      	add	r3, r2
 8012aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ab0:	691b      	ldr	r3, [r3, #16]
 8012ab2:	693a      	ldr	r2, [r7, #16]
 8012ab4:	0151      	lsls	r1, r2, #5
 8012ab6:	697a      	ldr	r2, [r7, #20]
 8012ab8:	440a      	add	r2, r1
 8012aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ac2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	015a      	lsls	r2, r3, #5
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	4413      	add	r3, r2
 8012acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ad0:	691a      	ldr	r2, [r3, #16]
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	689b      	ldr	r3, [r3, #8]
 8012ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012ada:	6939      	ldr	r1, [r7, #16]
 8012adc:	0148      	lsls	r0, r1, #5
 8012ade:	6979      	ldr	r1, [r7, #20]
 8012ae0:	4401      	add	r1, r0
 8012ae2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012ae6:	4313      	orrs	r3, r2
 8012ae8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012aea:	79fb      	ldrb	r3, [r7, #7]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d10d      	bne.n	8012b0c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	68db      	ldr	r3, [r3, #12]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d009      	beq.n	8012b0c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	68d9      	ldr	r1, [r3, #12]
 8012afc:	693b      	ldr	r3, [r7, #16]
 8012afe:	015a      	lsls	r2, r3, #5
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	4413      	add	r3, r2
 8012b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b08:	460a      	mov	r2, r1
 8012b0a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	015a      	lsls	r2, r3, #5
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	4413      	add	r3, r2
 8012b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	693a      	ldr	r2, [r7, #16]
 8012b1c:	0151      	lsls	r1, r2, #5
 8012b1e:	697a      	ldr	r2, [r7, #20]
 8012b20:	440a      	add	r2, r1
 8012b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012b2c:	2300      	movs	r3, #0
}
 8012b2e:	4618      	mov	r0, r3
 8012b30:	371c      	adds	r7, #28
 8012b32:	46bd      	mov	sp, r7
 8012b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b38:	4770      	bx	lr
 8012b3a:	bf00      	nop
 8012b3c:	e007ffff 	.word	0xe007ffff
 8012b40:	fff80000 	.word	0xfff80000

08012b44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012b44:	b480      	push	{r7}
 8012b46:	b089      	sub	sp, #36	; 0x24
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	60b9      	str	r1, [r7, #8]
 8012b4e:	4611      	mov	r1, r2
 8012b50:	461a      	mov	r2, r3
 8012b52:	460b      	mov	r3, r1
 8012b54:	71fb      	strb	r3, [r7, #7]
 8012b56:	4613      	mov	r3, r2
 8012b58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012b62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d123      	bne.n	8012bb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012b6a:	88bb      	ldrh	r3, [r7, #4]
 8012b6c:	3303      	adds	r3, #3
 8012b6e:	089b      	lsrs	r3, r3, #2
 8012b70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012b72:	2300      	movs	r3, #0
 8012b74:	61bb      	str	r3, [r7, #24]
 8012b76:	e018      	b.n	8012baa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012b78:	79fb      	ldrb	r3, [r7, #7]
 8012b7a:	031a      	lsls	r2, r3, #12
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	4413      	add	r3, r2
 8012b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012b84:	461a      	mov	r2, r3
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012b8c:	69fb      	ldr	r3, [r7, #28]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	3301      	adds	r3, #1
 8012b96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012b98:	69fb      	ldr	r3, [r7, #28]
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012b9e:	69fb      	ldr	r3, [r7, #28]
 8012ba0:	3301      	adds	r3, #1
 8012ba2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012ba4:	69bb      	ldr	r3, [r7, #24]
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	61bb      	str	r3, [r7, #24]
 8012baa:	69ba      	ldr	r2, [r7, #24]
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d3e2      	bcc.n	8012b78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012bb2:	2300      	movs	r3, #0
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3724      	adds	r7, #36	; 0x24
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr

08012bc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b08b      	sub	sp, #44	; 0x2c
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	4613      	mov	r3, r2
 8012bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012bd6:	88fb      	ldrh	r3, [r7, #6]
 8012bd8:	089b      	lsrs	r3, r3, #2
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012bde:	88fb      	ldrh	r3, [r7, #6]
 8012be0:	f003 0303 	and.w	r3, r3, #3
 8012be4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012be6:	2300      	movs	r3, #0
 8012be8:	623b      	str	r3, [r7, #32]
 8012bea:	e014      	b.n	8012c16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012bf2:	681a      	ldr	r2, [r3, #0]
 8012bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf6:	601a      	str	r2, [r3, #0]
    pDest++;
 8012bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c00:	3301      	adds	r3, #1
 8012c02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c06:	3301      	adds	r3, #1
 8012c08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012c10:	6a3b      	ldr	r3, [r7, #32]
 8012c12:	3301      	adds	r3, #1
 8012c14:	623b      	str	r3, [r7, #32]
 8012c16:	6a3a      	ldr	r2, [r7, #32]
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d3e6      	bcc.n	8012bec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012c1e:	8bfb      	ldrh	r3, [r7, #30]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d01e      	beq.n	8012c62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012c24:	2300      	movs	r3, #0
 8012c26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c2e:	461a      	mov	r2, r3
 8012c30:	f107 0310 	add.w	r3, r7, #16
 8012c34:	6812      	ldr	r2, [r2, #0]
 8012c36:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012c38:	693a      	ldr	r2, [r7, #16]
 8012c3a:	6a3b      	ldr	r3, [r7, #32]
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	00db      	lsls	r3, r3, #3
 8012c40:	fa22 f303 	lsr.w	r3, r2, r3
 8012c44:	b2da      	uxtb	r2, r3
 8012c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c48:	701a      	strb	r2, [r3, #0]
      i++;
 8012c4a:	6a3b      	ldr	r3, [r7, #32]
 8012c4c:	3301      	adds	r3, #1
 8012c4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8012c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c52:	3301      	adds	r3, #1
 8012c54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8012c56:	8bfb      	ldrh	r3, [r7, #30]
 8012c58:	3b01      	subs	r3, #1
 8012c5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012c5c:	8bfb      	ldrh	r3, [r7, #30]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d1ea      	bne.n	8012c38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	372c      	adds	r7, #44	; 0x2c
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr

08012c70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b085      	sub	sp, #20
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	785b      	ldrb	r3, [r3, #1]
 8012c88:	2b01      	cmp	r3, #1
 8012c8a:	d12c      	bne.n	8012ce6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	015a      	lsls	r2, r3, #5
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	4413      	add	r3, r2
 8012c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	db12      	blt.n	8012cc4 <USB_EPSetStall+0x54>
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d00f      	beq.n	8012cc4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	015a      	lsls	r2, r3, #5
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	4413      	add	r3, r2
 8012cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	68ba      	ldr	r2, [r7, #8]
 8012cb4:	0151      	lsls	r1, r2, #5
 8012cb6:	68fa      	ldr	r2, [r7, #12]
 8012cb8:	440a      	add	r2, r1
 8012cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012cc2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	015a      	lsls	r2, r3, #5
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	4413      	add	r3, r2
 8012ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	68ba      	ldr	r2, [r7, #8]
 8012cd4:	0151      	lsls	r1, r2, #5
 8012cd6:	68fa      	ldr	r2, [r7, #12]
 8012cd8:	440a      	add	r2, r1
 8012cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012ce2:	6013      	str	r3, [r2, #0]
 8012ce4:	e02b      	b.n	8012d3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	015a      	lsls	r2, r3, #5
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	4413      	add	r3, r2
 8012cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	db12      	blt.n	8012d1e <USB_EPSetStall+0xae>
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d00f      	beq.n	8012d1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	015a      	lsls	r2, r3, #5
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	4413      	add	r3, r2
 8012d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	68ba      	ldr	r2, [r7, #8]
 8012d0e:	0151      	lsls	r1, r2, #5
 8012d10:	68fa      	ldr	r2, [r7, #12]
 8012d12:	440a      	add	r2, r1
 8012d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	015a      	lsls	r2, r3, #5
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	4413      	add	r3, r2
 8012d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	68ba      	ldr	r2, [r7, #8]
 8012d2e:	0151      	lsls	r1, r2, #5
 8012d30:	68fa      	ldr	r2, [r7, #12]
 8012d32:	440a      	add	r2, r1
 8012d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012d3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012d3e:	2300      	movs	r3, #0
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3714      	adds	r7, #20
 8012d44:	46bd      	mov	sp, r7
 8012d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4a:	4770      	bx	lr

08012d4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b085      	sub	sp, #20
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	785b      	ldrb	r3, [r3, #1]
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d128      	bne.n	8012dba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	015a      	lsls	r2, r3, #5
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	4413      	add	r3, r2
 8012d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	68ba      	ldr	r2, [r7, #8]
 8012d78:	0151      	lsls	r1, r2, #5
 8012d7a:	68fa      	ldr	r2, [r7, #12]
 8012d7c:	440a      	add	r2, r1
 8012d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012d86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	78db      	ldrb	r3, [r3, #3]
 8012d8c:	2b03      	cmp	r3, #3
 8012d8e:	d003      	beq.n	8012d98 <USB_EPClearStall+0x4c>
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	78db      	ldrb	r3, [r3, #3]
 8012d94:	2b02      	cmp	r3, #2
 8012d96:	d138      	bne.n	8012e0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	015a      	lsls	r2, r3, #5
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	4413      	add	r3, r2
 8012da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	0151      	lsls	r1, r2, #5
 8012daa:	68fa      	ldr	r2, [r7, #12]
 8012dac:	440a      	add	r2, r1
 8012dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012db6:	6013      	str	r3, [r2, #0]
 8012db8:	e027      	b.n	8012e0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	015a      	lsls	r2, r3, #5
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	4413      	add	r3, r2
 8012dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	68ba      	ldr	r2, [r7, #8]
 8012dca:	0151      	lsls	r1, r2, #5
 8012dcc:	68fa      	ldr	r2, [r7, #12]
 8012dce:	440a      	add	r2, r1
 8012dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012dd8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	78db      	ldrb	r3, [r3, #3]
 8012dde:	2b03      	cmp	r3, #3
 8012de0:	d003      	beq.n	8012dea <USB_EPClearStall+0x9e>
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	78db      	ldrb	r3, [r3, #3]
 8012de6:	2b02      	cmp	r3, #2
 8012de8:	d10f      	bne.n	8012e0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	015a      	lsls	r2, r3, #5
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	4413      	add	r3, r2
 8012df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	68ba      	ldr	r2, [r7, #8]
 8012dfa:	0151      	lsls	r1, r2, #5
 8012dfc:	68fa      	ldr	r2, [r7, #12]
 8012dfe:	440a      	add	r2, r1
 8012e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012e0a:	2300      	movs	r3, #0
}
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	3714      	adds	r7, #20
 8012e10:	46bd      	mov	sp, r7
 8012e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e16:	4770      	bx	lr

08012e18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b085      	sub	sp, #20
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
 8012e20:	460b      	mov	r3, r1
 8012e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	68fa      	ldr	r2, [r7, #12]
 8012e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012e3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	78fb      	ldrb	r3, [r7, #3]
 8012e46:	011b      	lsls	r3, r3, #4
 8012e48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012e4c:	68f9      	ldr	r1, [r7, #12]
 8012e4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e52:	4313      	orrs	r3, r2
 8012e54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012e56:	2300      	movs	r3, #0
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3714      	adds	r7, #20
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr

08012e64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012e64:	b480      	push	{r7}
 8012e66:	b085      	sub	sp, #20
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012e7e:	f023 0303 	bic.w	r3, r3, #3
 8012e82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	68fa      	ldr	r2, [r7, #12]
 8012e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e92:	f023 0302 	bic.w	r3, r3, #2
 8012e96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012e98:	2300      	movs	r3, #0
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3714      	adds	r7, #20
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea4:	4770      	bx	lr

08012ea6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012ea6:	b480      	push	{r7}
 8012ea8:	b085      	sub	sp, #20
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	68fa      	ldr	r2, [r7, #12]
 8012ebc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012ec0:	f023 0303 	bic.w	r3, r3, #3
 8012ec4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ecc:	685b      	ldr	r3, [r3, #4]
 8012ece:	68fa      	ldr	r2, [r7, #12]
 8012ed0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012ed4:	f043 0302 	orr.w	r3, r3, #2
 8012ed8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012eda:	2300      	movs	r3, #0
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3714      	adds	r7, #20
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr

08012ee8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b085      	sub	sp, #20
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	695b      	ldr	r3, [r3, #20]
 8012ef4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	699b      	ldr	r3, [r3, #24]
 8012efa:	68fa      	ldr	r2, [r7, #12]
 8012efc:	4013      	ands	r3, r2
 8012efe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012f00:	68fb      	ldr	r3, [r7, #12]
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3714      	adds	r7, #20
 8012f06:	46bd      	mov	sp, r7
 8012f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0c:	4770      	bx	lr

08012f0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f0e:	b480      	push	{r7}
 8012f10:	b085      	sub	sp, #20
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f20:	699b      	ldr	r3, [r3, #24]
 8012f22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f2a:	69db      	ldr	r3, [r3, #28]
 8012f2c:	68ba      	ldr	r2, [r7, #8]
 8012f2e:	4013      	ands	r3, r2
 8012f30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	0c1b      	lsrs	r3, r3, #16
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3714      	adds	r7, #20
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr

08012f42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f42:	b480      	push	{r7}
 8012f44:	b085      	sub	sp, #20
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f54:	699b      	ldr	r3, [r3, #24]
 8012f56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f5e:	69db      	ldr	r3, [r3, #28]
 8012f60:	68ba      	ldr	r2, [r7, #8]
 8012f62:	4013      	ands	r3, r2
 8012f64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	b29b      	uxth	r3, r3
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3714      	adds	r7, #20
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f74:	4770      	bx	lr

08012f76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012f76:	b480      	push	{r7}
 8012f78:	b085      	sub	sp, #20
 8012f7a:	af00      	add	r7, sp, #0
 8012f7c:	6078      	str	r0, [r7, #4]
 8012f7e:	460b      	mov	r3, r1
 8012f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012f86:	78fb      	ldrb	r3, [r7, #3]
 8012f88:	015a      	lsls	r2, r3, #5
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f92:	689b      	ldr	r3, [r3, #8]
 8012f94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f9c:	695b      	ldr	r3, [r3, #20]
 8012f9e:	68ba      	ldr	r2, [r7, #8]
 8012fa0:	4013      	ands	r3, r2
 8012fa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012fa4:	68bb      	ldr	r3, [r7, #8]
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3714      	adds	r7, #20
 8012faa:	46bd      	mov	sp, r7
 8012fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb0:	4770      	bx	lr

08012fb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012fb2:	b480      	push	{r7}
 8012fb4:	b087      	sub	sp, #28
 8012fb6:	af00      	add	r7, sp, #0
 8012fb8:	6078      	str	r0, [r7, #4]
 8012fba:	460b      	mov	r3, r1
 8012fbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fc8:	691b      	ldr	r3, [r3, #16]
 8012fca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012fd6:	78fb      	ldrb	r3, [r7, #3]
 8012fd8:	f003 030f 	and.w	r3, r3, #15
 8012fdc:	68fa      	ldr	r2, [r7, #12]
 8012fde:	fa22 f303 	lsr.w	r3, r2, r3
 8012fe2:	01db      	lsls	r3, r3, #7
 8012fe4:	b2db      	uxtb	r3, r3
 8012fe6:	693a      	ldr	r2, [r7, #16]
 8012fe8:	4313      	orrs	r3, r2
 8012fea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012fec:	78fb      	ldrb	r3, [r7, #3]
 8012fee:	015a      	lsls	r2, r3, #5
 8012ff0:	697b      	ldr	r3, [r7, #20]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	693a      	ldr	r2, [r7, #16]
 8012ffc:	4013      	ands	r3, r2
 8012ffe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013000:	68bb      	ldr	r3, [r7, #8]
}
 8013002:	4618      	mov	r0, r3
 8013004:	371c      	adds	r7, #28
 8013006:	46bd      	mov	sp, r7
 8013008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300c:	4770      	bx	lr

0801300e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801300e:	b480      	push	{r7}
 8013010:	b083      	sub	sp, #12
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	695b      	ldr	r3, [r3, #20]
 801301a:	f003 0301 	and.w	r3, r3, #1
}
 801301e:	4618      	mov	r0, r3
 8013020:	370c      	adds	r7, #12
 8013022:	46bd      	mov	sp, r7
 8013024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013028:	4770      	bx	lr
	...

0801302c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801302c:	b480      	push	{r7}
 801302e:	b085      	sub	sp, #20
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013046:	4619      	mov	r1, r3
 8013048:	4b09      	ldr	r3, [pc, #36]	; (8013070 <USB_ActivateSetup+0x44>)
 801304a:	4013      	ands	r3, r2
 801304c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	68fa      	ldr	r2, [r7, #12]
 8013058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801305c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013060:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013062:	2300      	movs	r3, #0
}
 8013064:	4618      	mov	r0, r3
 8013066:	3714      	adds	r7, #20
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr
 8013070:	fffff800 	.word	0xfffff800

08013074 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013074:	b480      	push	{r7}
 8013076:	b087      	sub	sp, #28
 8013078:	af00      	add	r7, sp, #0
 801307a:	60f8      	str	r0, [r7, #12]
 801307c:	460b      	mov	r3, r1
 801307e:	607a      	str	r2, [r7, #4]
 8013080:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	333c      	adds	r3, #60	; 0x3c
 801308a:	3304      	adds	r3, #4
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	4a26      	ldr	r2, [pc, #152]	; (801312c <USB_EP0_OutStart+0xb8>)
 8013094:	4293      	cmp	r3, r2
 8013096:	d90a      	bls.n	80130ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80130a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80130a8:	d101      	bne.n	80130ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80130aa:	2300      	movs	r3, #0
 80130ac:	e037      	b.n	801311e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130b4:	461a      	mov	r2, r3
 80130b6:	2300      	movs	r3, #0
 80130b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130c0:	691b      	ldr	r3, [r3, #16]
 80130c2:	697a      	ldr	r2, [r7, #20]
 80130c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80130cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130d4:	691b      	ldr	r3, [r3, #16]
 80130d6:	697a      	ldr	r2, [r7, #20]
 80130d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130dc:	f043 0318 	orr.w	r3, r3, #24
 80130e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130e8:	691b      	ldr	r3, [r3, #16]
 80130ea:	697a      	ldr	r2, [r7, #20]
 80130ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80130f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80130f6:	7afb      	ldrb	r3, [r7, #11]
 80130f8:	2b01      	cmp	r3, #1
 80130fa:	d10f      	bne.n	801311c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013102:	461a      	mov	r2, r3
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	697a      	ldr	r2, [r7, #20]
 8013112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013116:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801311a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801311c:	2300      	movs	r3, #0
}
 801311e:	4618      	mov	r0, r3
 8013120:	371c      	adds	r7, #28
 8013122:	46bd      	mov	sp, r7
 8013124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013128:	4770      	bx	lr
 801312a:	bf00      	nop
 801312c:	4f54300a 	.word	0x4f54300a

08013130 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013130:	b480      	push	{r7}
 8013132:	b085      	sub	sp, #20
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8013138:	2300      	movs	r3, #0
 801313a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	3301      	adds	r3, #1
 8013140:	60fb      	str	r3, [r7, #12]
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	4a13      	ldr	r2, [pc, #76]	; (8013194 <USB_CoreReset+0x64>)
 8013146:	4293      	cmp	r3, r2
 8013148:	d901      	bls.n	801314e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801314a:	2303      	movs	r3, #3
 801314c:	e01b      	b.n	8013186 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	691b      	ldr	r3, [r3, #16]
 8013152:	2b00      	cmp	r3, #0
 8013154:	daf2      	bge.n	801313c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013156:	2300      	movs	r3, #0
 8013158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	691b      	ldr	r3, [r3, #16]
 801315e:	f043 0201 	orr.w	r2, r3, #1
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	3301      	adds	r3, #1
 801316a:	60fb      	str	r3, [r7, #12]
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	4a09      	ldr	r2, [pc, #36]	; (8013194 <USB_CoreReset+0x64>)
 8013170:	4293      	cmp	r3, r2
 8013172:	d901      	bls.n	8013178 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013174:	2303      	movs	r3, #3
 8013176:	e006      	b.n	8013186 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	691b      	ldr	r3, [r3, #16]
 801317c:	f003 0301 	and.w	r3, r3, #1
 8013180:	2b01      	cmp	r3, #1
 8013182:	d0f0      	beq.n	8013166 <USB_CoreReset+0x36>

  return HAL_OK;
 8013184:	2300      	movs	r3, #0
}
 8013186:	4618      	mov	r0, r3
 8013188:	3714      	adds	r7, #20
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	00030d40 	.word	0x00030d40

08013198 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	460b      	mov	r3, r1
 80131a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80131a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80131a8:	f003 fcfc 	bl	8016ba4 <USBD_static_malloc>
 80131ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d105      	bne.n	80131c0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2200      	movs	r2, #0
 80131b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80131bc:	2302      	movs	r3, #2
 80131be:	e066      	b.n	801328e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	68fa      	ldr	r2, [r7, #12]
 80131c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	7c1b      	ldrb	r3, [r3, #16]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d119      	bne.n	8013204 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80131d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80131d4:	2202      	movs	r2, #2
 80131d6:	2181      	movs	r1, #129	; 0x81
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f003 fbc0 	bl	801695e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2201      	movs	r2, #1
 80131e2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80131e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80131e8:	2202      	movs	r2, #2
 80131ea:	2101      	movs	r1, #1
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f003 fbb6 	bl	801695e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2201      	movs	r2, #1
 80131f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2210      	movs	r2, #16
 80131fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013202:	e016      	b.n	8013232 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013204:	2340      	movs	r3, #64	; 0x40
 8013206:	2202      	movs	r2, #2
 8013208:	2181      	movs	r1, #129	; 0x81
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f003 fba7 	bl	801695e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2201      	movs	r2, #1
 8013214:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013216:	2340      	movs	r3, #64	; 0x40
 8013218:	2202      	movs	r2, #2
 801321a:	2101      	movs	r1, #1
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f003 fb9e 	bl	801695e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2201      	movs	r2, #1
 8013226:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2210      	movs	r2, #16
 801322e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013232:	2308      	movs	r3, #8
 8013234:	2203      	movs	r2, #3
 8013236:	2182      	movs	r1, #130	; 0x82
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f003 fb90 	bl	801695e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2201      	movs	r2, #1
 8013242:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	2200      	movs	r2, #0
 8013254:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2200      	movs	r2, #0
 801325c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	7c1b      	ldrb	r3, [r3, #16]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d109      	bne.n	801327c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801326e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013272:	2101      	movs	r1, #1
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f003 fc61 	bl	8016b3c <USBD_LL_PrepareReceive>
 801327a:	e007      	b.n	801328c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013282:	2340      	movs	r3, #64	; 0x40
 8013284:	2101      	movs	r1, #1
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f003 fc58 	bl	8016b3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801328c:	2300      	movs	r3, #0
}
 801328e:	4618      	mov	r0, r3
 8013290:	3710      	adds	r7, #16
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}

08013296 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013296:	b580      	push	{r7, lr}
 8013298:	b082      	sub	sp, #8
 801329a:	af00      	add	r7, sp, #0
 801329c:	6078      	str	r0, [r7, #4]
 801329e:	460b      	mov	r3, r1
 80132a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80132a2:	2181      	movs	r1, #129	; 0x81
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f003 fb80 	bl	80169aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2200      	movs	r2, #0
 80132ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80132b0:	2101      	movs	r1, #1
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f003 fb79 	bl	80169aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2200      	movs	r2, #0
 80132bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80132c0:	2182      	movs	r1, #130	; 0x82
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f003 fb71 	bl	80169aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2200      	movs	r2, #0
 80132cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2200      	movs	r2, #0
 80132d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d00e      	beq.n	8013300 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132f2:	4618      	mov	r0, r3
 80132f4:	f003 fc64 	bl	8016bc0 <USBD_static_free>
    pdev->pClassData = NULL;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2200      	movs	r2, #0
 80132fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013300:	2300      	movs	r3, #0
}
 8013302:	4618      	mov	r0, r3
 8013304:	3708      	adds	r7, #8
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}
	...

0801330c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b086      	sub	sp, #24
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801331c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801331e:	2300      	movs	r3, #0
 8013320:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013322:	2300      	movs	r3, #0
 8013324:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013326:	2300      	movs	r3, #0
 8013328:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d101      	bne.n	8013334 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013330:	2303      	movs	r3, #3
 8013332:	e0af      	b.n	8013494 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801333c:	2b00      	cmp	r3, #0
 801333e:	d03f      	beq.n	80133c0 <USBD_CDC_Setup+0xb4>
 8013340:	2b20      	cmp	r3, #32
 8013342:	f040 809f 	bne.w	8013484 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	88db      	ldrh	r3, [r3, #6]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d02e      	beq.n	80133ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	781b      	ldrb	r3, [r3, #0]
 8013352:	b25b      	sxtb	r3, r3
 8013354:	2b00      	cmp	r3, #0
 8013356:	da16      	bge.n	8013386 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801335e:	689b      	ldr	r3, [r3, #8]
 8013360:	683a      	ldr	r2, [r7, #0]
 8013362:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8013364:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013366:	683a      	ldr	r2, [r7, #0]
 8013368:	88d2      	ldrh	r2, [r2, #6]
 801336a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	88db      	ldrh	r3, [r3, #6]
 8013370:	2b07      	cmp	r3, #7
 8013372:	bf28      	it	cs
 8013374:	2307      	movcs	r3, #7
 8013376:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	89fa      	ldrh	r2, [r7, #14]
 801337c:	4619      	mov	r1, r3
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f001 fb19 	bl	80149b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8013384:	e085      	b.n	8013492 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	785a      	ldrb	r2, [r3, #1]
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	88db      	ldrh	r3, [r3, #6]
 8013394:	b2da      	uxtb	r2, r3
 8013396:	693b      	ldr	r3, [r7, #16]
 8013398:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801339c:	6939      	ldr	r1, [r7, #16]
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	88db      	ldrh	r3, [r3, #6]
 80133a2:	461a      	mov	r2, r3
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f001 fb32 	bl	8014a0e <USBD_CtlPrepareRx>
      break;
 80133aa:	e072      	b.n	8013492 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80133b2:	689b      	ldr	r3, [r3, #8]
 80133b4:	683a      	ldr	r2, [r7, #0]
 80133b6:	7850      	ldrb	r0, [r2, #1]
 80133b8:	2200      	movs	r2, #0
 80133ba:	6839      	ldr	r1, [r7, #0]
 80133bc:	4798      	blx	r3
      break;
 80133be:	e068      	b.n	8013492 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	785b      	ldrb	r3, [r3, #1]
 80133c4:	2b0b      	cmp	r3, #11
 80133c6:	d852      	bhi.n	801346e <USBD_CDC_Setup+0x162>
 80133c8:	a201      	add	r2, pc, #4	; (adr r2, 80133d0 <USBD_CDC_Setup+0xc4>)
 80133ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ce:	bf00      	nop
 80133d0:	08013401 	.word	0x08013401
 80133d4:	0801347d 	.word	0x0801347d
 80133d8:	0801346f 	.word	0x0801346f
 80133dc:	0801346f 	.word	0x0801346f
 80133e0:	0801346f 	.word	0x0801346f
 80133e4:	0801346f 	.word	0x0801346f
 80133e8:	0801346f 	.word	0x0801346f
 80133ec:	0801346f 	.word	0x0801346f
 80133f0:	0801346f 	.word	0x0801346f
 80133f4:	0801346f 	.word	0x0801346f
 80133f8:	0801342b 	.word	0x0801342b
 80133fc:	08013455 	.word	0x08013455
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013406:	b2db      	uxtb	r3, r3
 8013408:	2b03      	cmp	r3, #3
 801340a:	d107      	bne.n	801341c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801340c:	f107 030a 	add.w	r3, r7, #10
 8013410:	2202      	movs	r2, #2
 8013412:	4619      	mov	r1, r3
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f001 face 	bl	80149b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801341a:	e032      	b.n	8013482 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801341c:	6839      	ldr	r1, [r7, #0]
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f001 fa58 	bl	80148d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8013424:	2303      	movs	r3, #3
 8013426:	75fb      	strb	r3, [r7, #23]
          break;
 8013428:	e02b      	b.n	8013482 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013430:	b2db      	uxtb	r3, r3
 8013432:	2b03      	cmp	r3, #3
 8013434:	d107      	bne.n	8013446 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013436:	f107 030d 	add.w	r3, r7, #13
 801343a:	2201      	movs	r2, #1
 801343c:	4619      	mov	r1, r3
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f001 fab9 	bl	80149b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013444:	e01d      	b.n	8013482 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013446:	6839      	ldr	r1, [r7, #0]
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f001 fa43 	bl	80148d4 <USBD_CtlError>
            ret = USBD_FAIL;
 801344e:	2303      	movs	r3, #3
 8013450:	75fb      	strb	r3, [r7, #23]
          break;
 8013452:	e016      	b.n	8013482 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801345a:	b2db      	uxtb	r3, r3
 801345c:	2b03      	cmp	r3, #3
 801345e:	d00f      	beq.n	8013480 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8013460:	6839      	ldr	r1, [r7, #0]
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f001 fa36 	bl	80148d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8013468:	2303      	movs	r3, #3
 801346a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801346c:	e008      	b.n	8013480 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801346e:	6839      	ldr	r1, [r7, #0]
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f001 fa2f 	bl	80148d4 <USBD_CtlError>
          ret = USBD_FAIL;
 8013476:	2303      	movs	r3, #3
 8013478:	75fb      	strb	r3, [r7, #23]
          break;
 801347a:	e002      	b.n	8013482 <USBD_CDC_Setup+0x176>
          break;
 801347c:	bf00      	nop
 801347e:	e008      	b.n	8013492 <USBD_CDC_Setup+0x186>
          break;
 8013480:	bf00      	nop
      }
      break;
 8013482:	e006      	b.n	8013492 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8013484:	6839      	ldr	r1, [r7, #0]
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f001 fa24 	bl	80148d4 <USBD_CtlError>
      ret = USBD_FAIL;
 801348c:	2303      	movs	r3, #3
 801348e:	75fb      	strb	r3, [r7, #23]
      break;
 8013490:	bf00      	nop
  }

  return (uint8_t)ret;
 8013492:	7dfb      	ldrb	r3, [r7, #23]
}
 8013494:	4618      	mov	r0, r3
 8013496:	3718      	adds	r7, #24
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}

0801349c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b084      	sub	sp, #16
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	460b      	mov	r3, r1
 80134a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d101      	bne.n	80134be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80134ba:	2303      	movs	r3, #3
 80134bc:	e04f      	b.n	801355e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80134c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80134c6:	78fa      	ldrb	r2, [r7, #3]
 80134c8:	6879      	ldr	r1, [r7, #4]
 80134ca:	4613      	mov	r3, r2
 80134cc:	009b      	lsls	r3, r3, #2
 80134ce:	4413      	add	r3, r2
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	440b      	add	r3, r1
 80134d4:	3318      	adds	r3, #24
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d029      	beq.n	8013530 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80134dc:	78fa      	ldrb	r2, [r7, #3]
 80134de:	6879      	ldr	r1, [r7, #4]
 80134e0:	4613      	mov	r3, r2
 80134e2:	009b      	lsls	r3, r3, #2
 80134e4:	4413      	add	r3, r2
 80134e6:	009b      	lsls	r3, r3, #2
 80134e8:	440b      	add	r3, r1
 80134ea:	3318      	adds	r3, #24
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	78f9      	ldrb	r1, [r7, #3]
 80134f0:	68f8      	ldr	r0, [r7, #12]
 80134f2:	460b      	mov	r3, r1
 80134f4:	00db      	lsls	r3, r3, #3
 80134f6:	1a5b      	subs	r3, r3, r1
 80134f8:	009b      	lsls	r3, r3, #2
 80134fa:	4403      	add	r3, r0
 80134fc:	3344      	adds	r3, #68	; 0x44
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	fbb2 f1f3 	udiv	r1, r2, r3
 8013504:	fb03 f301 	mul.w	r3, r3, r1
 8013508:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801350a:	2b00      	cmp	r3, #0
 801350c:	d110      	bne.n	8013530 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801350e:	78fa      	ldrb	r2, [r7, #3]
 8013510:	6879      	ldr	r1, [r7, #4]
 8013512:	4613      	mov	r3, r2
 8013514:	009b      	lsls	r3, r3, #2
 8013516:	4413      	add	r3, r2
 8013518:	009b      	lsls	r3, r3, #2
 801351a:	440b      	add	r3, r1
 801351c:	3318      	adds	r3, #24
 801351e:	2200      	movs	r2, #0
 8013520:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013522:	78f9      	ldrb	r1, [r7, #3]
 8013524:	2300      	movs	r3, #0
 8013526:	2200      	movs	r2, #0
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f003 fae6 	bl	8016afa <USBD_LL_Transmit>
 801352e:	e015      	b.n	801355c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	2200      	movs	r2, #0
 8013534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801353e:	691b      	ldr	r3, [r3, #16]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d00b      	beq.n	801355c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801354a:	691b      	ldr	r3, [r3, #16]
 801354c:	68ba      	ldr	r2, [r7, #8]
 801354e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013552:	68ba      	ldr	r2, [r7, #8]
 8013554:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013558:	78fa      	ldrb	r2, [r7, #3]
 801355a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801355c:	2300      	movs	r3, #0
}
 801355e:	4618      	mov	r0, r3
 8013560:	3710      	adds	r7, #16
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}

08013566 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013566:	b580      	push	{r7, lr}
 8013568:	b084      	sub	sp, #16
 801356a:	af00      	add	r7, sp, #0
 801356c:	6078      	str	r0, [r7, #4]
 801356e:	460b      	mov	r3, r1
 8013570:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013578:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013580:	2b00      	cmp	r3, #0
 8013582:	d101      	bne.n	8013588 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013584:	2303      	movs	r3, #3
 8013586:	e015      	b.n	80135b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013588:	78fb      	ldrb	r3, [r7, #3]
 801358a:	4619      	mov	r1, r3
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f003 faf6 	bl	8016b7e <USBD_LL_GetRxDataSize>
 8013592:	4602      	mov	r2, r0
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	68fa      	ldr	r2, [r7, #12]
 80135a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80135a8:	68fa      	ldr	r2, [r7, #12]
 80135aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80135ae:	4611      	mov	r1, r2
 80135b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80135b2:	2300      	movs	r3, #0
}
 80135b4:	4618      	mov	r0, r3
 80135b6:	3710      	adds	r7, #16
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80135ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d101      	bne.n	80135d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80135d2:	2303      	movs	r3, #3
 80135d4:	e01b      	b.n	801360e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d015      	beq.n	801360c <USBD_CDC_EP0_RxReady+0x50>
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80135e6:	2bff      	cmp	r3, #255	; 0xff
 80135e8:	d010      	beq.n	801360c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80135f0:	689b      	ldr	r3, [r3, #8]
 80135f2:	68fa      	ldr	r2, [r7, #12]
 80135f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80135f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80135fa:	68fa      	ldr	r2, [r7, #12]
 80135fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013600:	b292      	uxth	r2, r2
 8013602:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	22ff      	movs	r2, #255	; 0xff
 8013608:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801360c:	2300      	movs	r3, #0
}
 801360e:	4618      	mov	r0, r3
 8013610:	3710      	adds	r7, #16
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
	...

08013618 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013618:	b480      	push	{r7}
 801361a:	b083      	sub	sp, #12
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2243      	movs	r2, #67	; 0x43
 8013624:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8013626:	4b03      	ldr	r3, [pc, #12]	; (8013634 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013628:	4618      	mov	r0, r3
 801362a:	370c      	adds	r7, #12
 801362c:	46bd      	mov	sp, r7
 801362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013632:	4770      	bx	lr
 8013634:	240001b8 	.word	0x240001b8

08013638 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013638:	b480      	push	{r7}
 801363a:	b083      	sub	sp, #12
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	2243      	movs	r2, #67	; 0x43
 8013644:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8013646:	4b03      	ldr	r3, [pc, #12]	; (8013654 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8013648:	4618      	mov	r0, r3
 801364a:	370c      	adds	r7, #12
 801364c:	46bd      	mov	sp, r7
 801364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013652:	4770      	bx	lr
 8013654:	24000174 	.word	0x24000174

08013658 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013658:	b480      	push	{r7}
 801365a:	b083      	sub	sp, #12
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2243      	movs	r2, #67	; 0x43
 8013664:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8013666:	4b03      	ldr	r3, [pc, #12]	; (8013674 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013668:	4618      	mov	r0, r3
 801366a:	370c      	adds	r7, #12
 801366c:	46bd      	mov	sp, r7
 801366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013672:	4770      	bx	lr
 8013674:	240001fc 	.word	0x240001fc

08013678 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013678:	b480      	push	{r7}
 801367a:	b083      	sub	sp, #12
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	220a      	movs	r2, #10
 8013684:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013686:	4b03      	ldr	r3, [pc, #12]	; (8013694 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013688:	4618      	mov	r0, r3
 801368a:	370c      	adds	r7, #12
 801368c:	46bd      	mov	sp, r7
 801368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013692:	4770      	bx	lr
 8013694:	24000130 	.word	0x24000130

08013698 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013698:	b480      	push	{r7}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d101      	bne.n	80136ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80136a8:	2303      	movs	r3, #3
 80136aa:	e004      	b.n	80136b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	683a      	ldr	r2, [r7, #0]
 80136b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80136b4:	2300      	movs	r3, #0
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	370c      	adds	r7, #12
 80136ba:	46bd      	mov	sp, r7
 80136bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c0:	4770      	bx	lr

080136c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80136c2:	b480      	push	{r7}
 80136c4:	b087      	sub	sp, #28
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	60f8      	str	r0, [r7, #12]
 80136ca:	60b9      	str	r1, [r7, #8]
 80136cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d101      	bne.n	80136e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80136dc:	2303      	movs	r3, #3
 80136de:	e008      	b.n	80136f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	68ba      	ldr	r2, [r7, #8]
 80136e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	687a      	ldr	r2, [r7, #4]
 80136ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	371c      	adds	r7, #28
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr

080136fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80136fe:	b480      	push	{r7}
 8013700:	b085      	sub	sp, #20
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
 8013706:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801370e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d101      	bne.n	801371a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8013716:	2303      	movs	r3, #3
 8013718:	e004      	b.n	8013724 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	683a      	ldr	r2, [r7, #0]
 801371e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013722:	2300      	movs	r3, #0
}
 8013724:	4618      	mov	r0, r3
 8013726:	3714      	adds	r7, #20
 8013728:	46bd      	mov	sp, r7
 801372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372e:	4770      	bx	lr

08013730 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b084      	sub	sp, #16
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801373e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8013740:	2301      	movs	r3, #1
 8013742:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801374a:	2b00      	cmp	r3, #0
 801374c:	d101      	bne.n	8013752 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801374e:	2303      	movs	r3, #3
 8013750:	e01a      	b.n	8013788 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013758:	2b00      	cmp	r3, #0
 801375a:	d114      	bne.n	8013786 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	2201      	movs	r2, #1
 8013760:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801377a:	2181      	movs	r1, #129	; 0x81
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f003 f9bc 	bl	8016afa <USBD_LL_Transmit>

    ret = USBD_OK;
 8013782:	2300      	movs	r3, #0
 8013784:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013786:	7bfb      	ldrb	r3, [r7, #15]
}
 8013788:	4618      	mov	r0, r3
 801378a:	3710      	adds	r7, #16
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}

08013790 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b084      	sub	sp, #16
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801379e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d101      	bne.n	80137ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80137aa:	2303      	movs	r3, #3
 80137ac:	e016      	b.n	80137dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	7c1b      	ldrb	r3, [r3, #16]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d109      	bne.n	80137ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80137bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137c0:	2101      	movs	r1, #1
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f003 f9ba 	bl	8016b3c <USBD_LL_PrepareReceive>
 80137c8:	e007      	b.n	80137da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80137d0:	2340      	movs	r3, #64	; 0x40
 80137d2:	2101      	movs	r1, #1
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f003 f9b1 	bl	8016b3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80137da:	2300      	movs	r3, #0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3710      	adds	r7, #16
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b086      	sub	sp, #24
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	4613      	mov	r3, r2
 80137f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d101      	bne.n	80137fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80137f8:	2303      	movs	r3, #3
 80137fa:	e01f      	b.n	801383c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	2200      	movs	r2, #0
 8013800:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2200      	movs	r2, #0
 8013808:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2200      	movs	r2, #0
 8013810:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d003      	beq.n	8013822 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	68ba      	ldr	r2, [r7, #8]
 801381e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	2201      	movs	r2, #1
 8013826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	79fa      	ldrb	r2, [r7, #7]
 801382e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013830:	68f8      	ldr	r0, [r7, #12]
 8013832:	f003 f829 	bl	8016888 <USBD_LL_Init>
 8013836:	4603      	mov	r3, r0
 8013838:	75fb      	strb	r3, [r7, #23]

  return ret;
 801383a:	7dfb      	ldrb	r3, [r7, #23]
}
 801383c:	4618      	mov	r0, r3
 801383e:	3718      	adds	r7, #24
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b084      	sub	sp, #16
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801384e:	2300      	movs	r3, #0
 8013850:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d101      	bne.n	801385c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013858:	2303      	movs	r3, #3
 801385a:	e016      	b.n	801388a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	683a      	ldr	r2, [r7, #0]
 8013860:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00b      	beq.n	8013888 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013878:	f107 020e 	add.w	r2, r7, #14
 801387c:	4610      	mov	r0, r2
 801387e:	4798      	blx	r3
 8013880:	4602      	mov	r2, r0
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013888:	2300      	movs	r3, #0
}
 801388a:	4618      	mov	r0, r3
 801388c:	3710      	adds	r7, #16
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}

08013892 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013892:	b580      	push	{r7, lr}
 8013894:	b082      	sub	sp, #8
 8013896:	af00      	add	r7, sp, #0
 8013898:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f003 f844 	bl	8016928 <USBD_LL_Start>
 80138a0:	4603      	mov	r3, r0
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3708      	adds	r7, #8
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}

080138aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80138aa:	b480      	push	{r7}
 80138ac:	b083      	sub	sp, #12
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80138b2:	2300      	movs	r3, #0
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	370c      	adds	r7, #12
 80138b8:	46bd      	mov	sp, r7
 80138ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138be:	4770      	bx	lr

080138c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	460b      	mov	r3, r1
 80138ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80138cc:	2303      	movs	r3, #3
 80138ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d009      	beq.n	80138ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	78fa      	ldrb	r2, [r7, #3]
 80138e4:	4611      	mov	r1, r2
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	4798      	blx	r3
 80138ea:	4603      	mov	r3, r0
 80138ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80138ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	3710      	adds	r7, #16
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	460b      	mov	r3, r1
 8013902:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801390a:	2b00      	cmp	r3, #0
 801390c:	d007      	beq.n	801391e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	78fa      	ldrb	r2, [r7, #3]
 8013918:	4611      	mov	r1, r2
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	4798      	blx	r3
  }

  return USBD_OK;
 801391e:	2300      	movs	r3, #0
}
 8013920:	4618      	mov	r0, r3
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013938:	6839      	ldr	r1, [r7, #0]
 801393a:	4618      	mov	r0, r3
 801393c:	f000 ff90 	bl	8014860 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2201      	movs	r2, #1
 8013944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801394e:	461a      	mov	r2, r3
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801395c:	f003 031f 	and.w	r3, r3, #31
 8013960:	2b02      	cmp	r3, #2
 8013962:	d01a      	beq.n	801399a <USBD_LL_SetupStage+0x72>
 8013964:	2b02      	cmp	r3, #2
 8013966:	d822      	bhi.n	80139ae <USBD_LL_SetupStage+0x86>
 8013968:	2b00      	cmp	r3, #0
 801396a:	d002      	beq.n	8013972 <USBD_LL_SetupStage+0x4a>
 801396c:	2b01      	cmp	r3, #1
 801396e:	d00a      	beq.n	8013986 <USBD_LL_SetupStage+0x5e>
 8013970:	e01d      	b.n	80139ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013978:	4619      	mov	r1, r3
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f000 fa62 	bl	8013e44 <USBD_StdDevReq>
 8013980:	4603      	mov	r3, r0
 8013982:	73fb      	strb	r3, [r7, #15]
      break;
 8013984:	e020      	b.n	80139c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801398c:	4619      	mov	r1, r3
 801398e:	6878      	ldr	r0, [r7, #4]
 8013990:	f000 fac6 	bl	8013f20 <USBD_StdItfReq>
 8013994:	4603      	mov	r3, r0
 8013996:	73fb      	strb	r3, [r7, #15]
      break;
 8013998:	e016      	b.n	80139c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80139a0:	4619      	mov	r1, r3
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f000 fb05 	bl	8013fb2 <USBD_StdEPReq>
 80139a8:	4603      	mov	r3, r0
 80139aa:	73fb      	strb	r3, [r7, #15]
      break;
 80139ac:	e00c      	b.n	80139c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80139b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80139b8:	b2db      	uxtb	r3, r3
 80139ba:	4619      	mov	r1, r3
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f003 f813 	bl	80169e8 <USBD_LL_StallEP>
 80139c2:	4603      	mov	r3, r0
 80139c4:	73fb      	strb	r3, [r7, #15]
      break;
 80139c6:	bf00      	nop
  }

  return ret;
 80139c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3710      	adds	r7, #16
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}

080139d2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b086      	sub	sp, #24
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	60f8      	str	r0, [r7, #12]
 80139da:	460b      	mov	r3, r1
 80139dc:	607a      	str	r2, [r7, #4]
 80139de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80139e0:	7afb      	ldrb	r3, [r7, #11]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d138      	bne.n	8013a58 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80139ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80139f4:	2b03      	cmp	r3, #3
 80139f6:	d14a      	bne.n	8013a8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	689a      	ldr	r2, [r3, #8]
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	68db      	ldr	r3, [r3, #12]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d913      	bls.n	8013a2c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	689a      	ldr	r2, [r3, #8]
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	68db      	ldr	r3, [r3, #12]
 8013a0c:	1ad2      	subs	r2, r2, r3
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	68da      	ldr	r2, [r3, #12]
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	689b      	ldr	r3, [r3, #8]
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	bf28      	it	cs
 8013a1e:	4613      	movcs	r3, r2
 8013a20:	461a      	mov	r2, r3
 8013a22:	6879      	ldr	r1, [r7, #4]
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f001 f80f 	bl	8014a48 <USBD_CtlContinueRx>
 8013a2a:	e030      	b.n	8013a8e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	2b03      	cmp	r3, #3
 8013a36:	d10b      	bne.n	8013a50 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a3e:	691b      	ldr	r3, [r3, #16]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d005      	beq.n	8013a50 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a4a:	691b      	ldr	r3, [r3, #16]
 8013a4c:	68f8      	ldr	r0, [r7, #12]
 8013a4e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013a50:	68f8      	ldr	r0, [r7, #12]
 8013a52:	f001 f80a 	bl	8014a6a <USBD_CtlSendStatus>
 8013a56:	e01a      	b.n	8013a8e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a5e:	b2db      	uxtb	r3, r3
 8013a60:	2b03      	cmp	r3, #3
 8013a62:	d114      	bne.n	8013a8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a6a:	699b      	ldr	r3, [r3, #24]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d00e      	beq.n	8013a8e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a76:	699b      	ldr	r3, [r3, #24]
 8013a78:	7afa      	ldrb	r2, [r7, #11]
 8013a7a:	4611      	mov	r1, r2
 8013a7c:	68f8      	ldr	r0, [r7, #12]
 8013a7e:	4798      	blx	r3
 8013a80:	4603      	mov	r3, r0
 8013a82:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013a84:	7dfb      	ldrb	r3, [r7, #23]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d001      	beq.n	8013a8e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013a8a:	7dfb      	ldrb	r3, [r7, #23]
 8013a8c:	e000      	b.n	8013a90 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013a8e:	2300      	movs	r3, #0
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3718      	adds	r7, #24
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b086      	sub	sp, #24
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	60f8      	str	r0, [r7, #12]
 8013aa0:	460b      	mov	r3, r1
 8013aa2:	607a      	str	r2, [r7, #4]
 8013aa4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013aa6:	7afb      	ldrb	r3, [r7, #11]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d16b      	bne.n	8013b84 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	3314      	adds	r3, #20
 8013ab0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013ab8:	2b02      	cmp	r3, #2
 8013aba:	d156      	bne.n	8013b6a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013abc:	693b      	ldr	r3, [r7, #16]
 8013abe:	689a      	ldr	r2, [r3, #8]
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	68db      	ldr	r3, [r3, #12]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d914      	bls.n	8013af2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013ac8:	693b      	ldr	r3, [r7, #16]
 8013aca:	689a      	ldr	r2, [r3, #8]
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	68db      	ldr	r3, [r3, #12]
 8013ad0:	1ad2      	subs	r2, r2, r3
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	689b      	ldr	r3, [r3, #8]
 8013ada:	461a      	mov	r2, r3
 8013adc:	6879      	ldr	r1, [r7, #4]
 8013ade:	68f8      	ldr	r0, [r7, #12]
 8013ae0:	f000 ff84 	bl	80149ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	2100      	movs	r1, #0
 8013aea:	68f8      	ldr	r0, [r7, #12]
 8013aec:	f003 f826 	bl	8016b3c <USBD_LL_PrepareReceive>
 8013af0:	e03b      	b.n	8013b6a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	68da      	ldr	r2, [r3, #12]
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	689b      	ldr	r3, [r3, #8]
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d11c      	bne.n	8013b38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	685a      	ldr	r2, [r3, #4]
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d316      	bcc.n	8013b38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	685a      	ldr	r2, [r3, #4]
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d20f      	bcs.n	8013b38 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013b18:	2200      	movs	r2, #0
 8013b1a:	2100      	movs	r1, #0
 8013b1c:	68f8      	ldr	r0, [r7, #12]
 8013b1e:	f000 ff65 	bl	80149ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2200      	movs	r2, #0
 8013b26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	2100      	movs	r1, #0
 8013b30:	68f8      	ldr	r0, [r7, #12]
 8013b32:	f003 f803 	bl	8016b3c <USBD_LL_PrepareReceive>
 8013b36:	e018      	b.n	8013b6a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b3e:	b2db      	uxtb	r3, r3
 8013b40:	2b03      	cmp	r3, #3
 8013b42:	d10b      	bne.n	8013b5c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b4a:	68db      	ldr	r3, [r3, #12]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d005      	beq.n	8013b5c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	68f8      	ldr	r0, [r7, #12]
 8013b5a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013b5c:	2180      	movs	r1, #128	; 0x80
 8013b5e:	68f8      	ldr	r0, [r7, #12]
 8013b60:	f002 ff42 	bl	80169e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013b64:	68f8      	ldr	r0, [r7, #12]
 8013b66:	f000 ff93 	bl	8014a90 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013b70:	2b01      	cmp	r3, #1
 8013b72:	d122      	bne.n	8013bba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f7ff fe98 	bl	80138aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013b82:	e01a      	b.n	8013bba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b8a:	b2db      	uxtb	r3, r3
 8013b8c:	2b03      	cmp	r3, #3
 8013b8e:	d114      	bne.n	8013bba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b96:	695b      	ldr	r3, [r3, #20]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d00e      	beq.n	8013bba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ba2:	695b      	ldr	r3, [r3, #20]
 8013ba4:	7afa      	ldrb	r2, [r7, #11]
 8013ba6:	4611      	mov	r1, r2
 8013ba8:	68f8      	ldr	r0, [r7, #12]
 8013baa:	4798      	blx	r3
 8013bac:	4603      	mov	r3, r0
 8013bae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013bb0:	7dfb      	ldrb	r3, [r7, #23]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d001      	beq.n	8013bba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8013bb6:	7dfb      	ldrb	r3, [r7, #23]
 8013bb8:	e000      	b.n	8013bbc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8013bba:	2300      	movs	r3, #0
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3718      	adds	r7, #24
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b082      	sub	sp, #8
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2201      	movs	r2, #1
 8013bd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2200      	movs	r2, #0
 8013be0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2200      	movs	r2, #0
 8013be6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d101      	bne.n	8013bf8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8013bf4:	2303      	movs	r3, #3
 8013bf6:	e02f      	b.n	8013c58 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d00f      	beq.n	8013c22 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d009      	beq.n	8013c22 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	6852      	ldr	r2, [r2, #4]
 8013c1a:	b2d2      	uxtb	r2, r2
 8013c1c:	4611      	mov	r1, r2
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c22:	2340      	movs	r3, #64	; 0x40
 8013c24:	2200      	movs	r2, #0
 8013c26:	2100      	movs	r1, #0
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	f002 fe98 	bl	801695e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2201      	movs	r2, #1
 8013c32:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2240      	movs	r2, #64	; 0x40
 8013c3a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c3e:	2340      	movs	r3, #64	; 0x40
 8013c40:	2200      	movs	r2, #0
 8013c42:	2180      	movs	r1, #128	; 0x80
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f002 fe8a 	bl	801695e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2240      	movs	r2, #64	; 0x40
 8013c54:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8013c56:	2300      	movs	r3, #0
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b083      	sub	sp, #12
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	460b      	mov	r3, r1
 8013c6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	78fa      	ldrb	r2, [r7, #3]
 8013c70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013c72:	2300      	movs	r3, #0
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	370c      	adds	r7, #12
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7e:	4770      	bx	lr

08013c80 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013c80:	b480      	push	{r7}
 8013c82:	b083      	sub	sp, #12
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c8e:	b2da      	uxtb	r2, r3
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2204      	movs	r2, #4
 8013c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013c9e:	2300      	movs	r3, #0
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	370c      	adds	r7, #12
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013caa:	4770      	bx	lr

08013cac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	2b04      	cmp	r3, #4
 8013cbe:	d106      	bne.n	8013cce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013cc6:	b2da      	uxtb	r2, r3
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013cce:	2300      	movs	r3, #0
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr

08013cdc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d101      	bne.n	8013cf2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8013cee:	2303      	movs	r3, #3
 8013cf0:	e012      	b.n	8013d18 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	2b03      	cmp	r3, #3
 8013cfc:	d10b      	bne.n	8013d16 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d04:	69db      	ldr	r3, [r3, #28]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d005      	beq.n	8013d16 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d10:	69db      	ldr	r3, [r3, #28]
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013d16:	2300      	movs	r3, #0
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3708      	adds	r7, #8
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}

08013d20 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b082      	sub	sp, #8
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
 8013d28:	460b      	mov	r3, r1
 8013d2a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d101      	bne.n	8013d3a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8013d36:	2303      	movs	r3, #3
 8013d38:	e014      	b.n	8013d64 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d40:	b2db      	uxtb	r3, r3
 8013d42:	2b03      	cmp	r3, #3
 8013d44:	d10d      	bne.n	8013d62 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d4c:	6a1b      	ldr	r3, [r3, #32]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d007      	beq.n	8013d62 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d58:	6a1b      	ldr	r3, [r3, #32]
 8013d5a:	78fa      	ldrb	r2, [r7, #3]
 8013d5c:	4611      	mov	r1, r2
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013d62:	2300      	movs	r3, #0
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3708      	adds	r7, #8
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}

08013d6c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	460b      	mov	r3, r1
 8013d76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d101      	bne.n	8013d86 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8013d82:	2303      	movs	r3, #3
 8013d84:	e014      	b.n	8013db0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d8c:	b2db      	uxtb	r3, r3
 8013d8e:	2b03      	cmp	r3, #3
 8013d90:	d10d      	bne.n	8013dae <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d007      	beq.n	8013dae <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013da6:	78fa      	ldrb	r2, [r7, #3]
 8013da8:	4611      	mov	r1, r2
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013dae:	2300      	movs	r3, #0
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	3708      	adds	r7, #8
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}

08013db8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013dc0:	2300      	movs	r3, #0
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	370c      	adds	r7, #12
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr

08013dce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013dce:	b580      	push	{r7, lr}
 8013dd0:	b082      	sub	sp, #8
 8013dd2:	af00      	add	r7, sp, #0
 8013dd4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2201      	movs	r2, #1
 8013dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d009      	beq.n	8013dfc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dee:	685b      	ldr	r3, [r3, #4]
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	6852      	ldr	r2, [r2, #4]
 8013df4:	b2d2      	uxtb	r2, r2
 8013df6:	4611      	mov	r1, r2
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	4798      	blx	r3
  }

  return USBD_OK;
 8013dfc:	2300      	movs	r3, #0
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3708      	adds	r7, #8
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}

08013e06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013e06:	b480      	push	{r7}
 8013e08:	b087      	sub	sp, #28
 8013e0a:	af00      	add	r7, sp, #0
 8013e0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	3301      	adds	r3, #1
 8013e1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013e24:	8a3b      	ldrh	r3, [r7, #16]
 8013e26:	021b      	lsls	r3, r3, #8
 8013e28:	b21a      	sxth	r2, r3
 8013e2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	b21b      	sxth	r3, r3
 8013e32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013e34:	89fb      	ldrh	r3, [r7, #14]
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	371c      	adds	r7, #28
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e40:	4770      	bx	lr
	...

08013e44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b084      	sub	sp, #16
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
 8013e4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013e5a:	2b40      	cmp	r3, #64	; 0x40
 8013e5c:	d005      	beq.n	8013e6a <USBD_StdDevReq+0x26>
 8013e5e:	2b40      	cmp	r3, #64	; 0x40
 8013e60:	d853      	bhi.n	8013f0a <USBD_StdDevReq+0xc6>
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d00b      	beq.n	8013e7e <USBD_StdDevReq+0x3a>
 8013e66:	2b20      	cmp	r3, #32
 8013e68:	d14f      	bne.n	8013f0a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e70:	689b      	ldr	r3, [r3, #8]
 8013e72:	6839      	ldr	r1, [r7, #0]
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	4798      	blx	r3
 8013e78:	4603      	mov	r3, r0
 8013e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8013e7c:	e04a      	b.n	8013f14 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	785b      	ldrb	r3, [r3, #1]
 8013e82:	2b09      	cmp	r3, #9
 8013e84:	d83b      	bhi.n	8013efe <USBD_StdDevReq+0xba>
 8013e86:	a201      	add	r2, pc, #4	; (adr r2, 8013e8c <USBD_StdDevReq+0x48>)
 8013e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e8c:	08013ee1 	.word	0x08013ee1
 8013e90:	08013ef5 	.word	0x08013ef5
 8013e94:	08013eff 	.word	0x08013eff
 8013e98:	08013eeb 	.word	0x08013eeb
 8013e9c:	08013eff 	.word	0x08013eff
 8013ea0:	08013ebf 	.word	0x08013ebf
 8013ea4:	08013eb5 	.word	0x08013eb5
 8013ea8:	08013eff 	.word	0x08013eff
 8013eac:	08013ed7 	.word	0x08013ed7
 8013eb0:	08013ec9 	.word	0x08013ec9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013eb4:	6839      	ldr	r1, [r7, #0]
 8013eb6:	6878      	ldr	r0, [r7, #4]
 8013eb8:	f000 f9de 	bl	8014278 <USBD_GetDescriptor>
          break;
 8013ebc:	e024      	b.n	8013f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013ebe:	6839      	ldr	r1, [r7, #0]
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f000 fb43 	bl	801454c <USBD_SetAddress>
          break;
 8013ec6:	e01f      	b.n	8013f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013ec8:	6839      	ldr	r1, [r7, #0]
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 fb82 	bl	80145d4 <USBD_SetConfig>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	73fb      	strb	r3, [r7, #15]
          break;
 8013ed4:	e018      	b.n	8013f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013ed6:	6839      	ldr	r1, [r7, #0]
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	f000 fc21 	bl	8014720 <USBD_GetConfig>
          break;
 8013ede:	e013      	b.n	8013f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013ee0:	6839      	ldr	r1, [r7, #0]
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 fc52 	bl	801478c <USBD_GetStatus>
          break;
 8013ee8:	e00e      	b.n	8013f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013eea:	6839      	ldr	r1, [r7, #0]
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f000 fc81 	bl	80147f4 <USBD_SetFeature>
          break;
 8013ef2:	e009      	b.n	8013f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013ef4:	6839      	ldr	r1, [r7, #0]
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f000 fc90 	bl	801481c <USBD_ClrFeature>
          break;
 8013efc:	e004      	b.n	8013f08 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8013efe:	6839      	ldr	r1, [r7, #0]
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f000 fce7 	bl	80148d4 <USBD_CtlError>
          break;
 8013f06:	bf00      	nop
      }
      break;
 8013f08:	e004      	b.n	8013f14 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8013f0a:	6839      	ldr	r1, [r7, #0]
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f000 fce1 	bl	80148d4 <USBD_CtlError>
      break;
 8013f12:	bf00      	nop
  }

  return ret;
 8013f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop

08013f20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b084      	sub	sp, #16
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
 8013f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	781b      	ldrb	r3, [r3, #0]
 8013f32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f36:	2b40      	cmp	r3, #64	; 0x40
 8013f38:	d005      	beq.n	8013f46 <USBD_StdItfReq+0x26>
 8013f3a:	2b40      	cmp	r3, #64	; 0x40
 8013f3c:	d82f      	bhi.n	8013f9e <USBD_StdItfReq+0x7e>
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d001      	beq.n	8013f46 <USBD_StdItfReq+0x26>
 8013f42:	2b20      	cmp	r3, #32
 8013f44:	d12b      	bne.n	8013f9e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f4c:	b2db      	uxtb	r3, r3
 8013f4e:	3b01      	subs	r3, #1
 8013f50:	2b02      	cmp	r3, #2
 8013f52:	d81d      	bhi.n	8013f90 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	889b      	ldrh	r3, [r3, #4]
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d813      	bhi.n	8013f86 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f64:	689b      	ldr	r3, [r3, #8]
 8013f66:	6839      	ldr	r1, [r7, #0]
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	4798      	blx	r3
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	88db      	ldrh	r3, [r3, #6]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d110      	bne.n	8013f9a <USBD_StdItfReq+0x7a>
 8013f78:	7bfb      	ldrb	r3, [r7, #15]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d10d      	bne.n	8013f9a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f000 fd73 	bl	8014a6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013f84:	e009      	b.n	8013f9a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8013f86:	6839      	ldr	r1, [r7, #0]
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f000 fca3 	bl	80148d4 <USBD_CtlError>
          break;
 8013f8e:	e004      	b.n	8013f9a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013f90:	6839      	ldr	r1, [r7, #0]
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	f000 fc9e 	bl	80148d4 <USBD_CtlError>
          break;
 8013f98:	e000      	b.n	8013f9c <USBD_StdItfReq+0x7c>
          break;
 8013f9a:	bf00      	nop
      }
      break;
 8013f9c:	e004      	b.n	8013fa8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013f9e:	6839      	ldr	r1, [r7, #0]
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f000 fc97 	bl	80148d4 <USBD_CtlError>
      break;
 8013fa6:	bf00      	nop
  }

  return ret;
 8013fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3710      	adds	r7, #16
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}

08013fb2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fb2:	b580      	push	{r7, lr}
 8013fb4:	b084      	sub	sp, #16
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6078      	str	r0, [r7, #4]
 8013fba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	889b      	ldrh	r3, [r3, #4]
 8013fc4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	781b      	ldrb	r3, [r3, #0]
 8013fca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013fce:	2b40      	cmp	r3, #64	; 0x40
 8013fd0:	d007      	beq.n	8013fe2 <USBD_StdEPReq+0x30>
 8013fd2:	2b40      	cmp	r3, #64	; 0x40
 8013fd4:	f200 8145 	bhi.w	8014262 <USBD_StdEPReq+0x2b0>
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d00c      	beq.n	8013ff6 <USBD_StdEPReq+0x44>
 8013fdc:	2b20      	cmp	r3, #32
 8013fde:	f040 8140 	bne.w	8014262 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fe8:	689b      	ldr	r3, [r3, #8]
 8013fea:	6839      	ldr	r1, [r7, #0]
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	4798      	blx	r3
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8013ff4:	e13a      	b.n	801426c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	785b      	ldrb	r3, [r3, #1]
 8013ffa:	2b03      	cmp	r3, #3
 8013ffc:	d007      	beq.n	801400e <USBD_StdEPReq+0x5c>
 8013ffe:	2b03      	cmp	r3, #3
 8014000:	f300 8129 	bgt.w	8014256 <USBD_StdEPReq+0x2a4>
 8014004:	2b00      	cmp	r3, #0
 8014006:	d07f      	beq.n	8014108 <USBD_StdEPReq+0x156>
 8014008:	2b01      	cmp	r3, #1
 801400a:	d03c      	beq.n	8014086 <USBD_StdEPReq+0xd4>
 801400c:	e123      	b.n	8014256 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014014:	b2db      	uxtb	r3, r3
 8014016:	2b02      	cmp	r3, #2
 8014018:	d002      	beq.n	8014020 <USBD_StdEPReq+0x6e>
 801401a:	2b03      	cmp	r3, #3
 801401c:	d016      	beq.n	801404c <USBD_StdEPReq+0x9a>
 801401e:	e02c      	b.n	801407a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014020:	7bbb      	ldrb	r3, [r7, #14]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d00d      	beq.n	8014042 <USBD_StdEPReq+0x90>
 8014026:	7bbb      	ldrb	r3, [r7, #14]
 8014028:	2b80      	cmp	r3, #128	; 0x80
 801402a:	d00a      	beq.n	8014042 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801402c:	7bbb      	ldrb	r3, [r7, #14]
 801402e:	4619      	mov	r1, r3
 8014030:	6878      	ldr	r0, [r7, #4]
 8014032:	f002 fcd9 	bl	80169e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014036:	2180      	movs	r1, #128	; 0x80
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f002 fcd5 	bl	80169e8 <USBD_LL_StallEP>
 801403e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014040:	e020      	b.n	8014084 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8014042:	6839      	ldr	r1, [r7, #0]
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f000 fc45 	bl	80148d4 <USBD_CtlError>
              break;
 801404a:	e01b      	b.n	8014084 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	885b      	ldrh	r3, [r3, #2]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d10e      	bne.n	8014072 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014054:	7bbb      	ldrb	r3, [r7, #14]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d00b      	beq.n	8014072 <USBD_StdEPReq+0xc0>
 801405a:	7bbb      	ldrb	r3, [r7, #14]
 801405c:	2b80      	cmp	r3, #128	; 0x80
 801405e:	d008      	beq.n	8014072 <USBD_StdEPReq+0xc0>
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	88db      	ldrh	r3, [r3, #6]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d104      	bne.n	8014072 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014068:	7bbb      	ldrb	r3, [r7, #14]
 801406a:	4619      	mov	r1, r3
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f002 fcbb 	bl	80169e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014072:	6878      	ldr	r0, [r7, #4]
 8014074:	f000 fcf9 	bl	8014a6a <USBD_CtlSendStatus>

              break;
 8014078:	e004      	b.n	8014084 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801407a:	6839      	ldr	r1, [r7, #0]
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f000 fc29 	bl	80148d4 <USBD_CtlError>
              break;
 8014082:	bf00      	nop
          }
          break;
 8014084:	e0ec      	b.n	8014260 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801408c:	b2db      	uxtb	r3, r3
 801408e:	2b02      	cmp	r3, #2
 8014090:	d002      	beq.n	8014098 <USBD_StdEPReq+0xe6>
 8014092:	2b03      	cmp	r3, #3
 8014094:	d016      	beq.n	80140c4 <USBD_StdEPReq+0x112>
 8014096:	e030      	b.n	80140fa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014098:	7bbb      	ldrb	r3, [r7, #14]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d00d      	beq.n	80140ba <USBD_StdEPReq+0x108>
 801409e:	7bbb      	ldrb	r3, [r7, #14]
 80140a0:	2b80      	cmp	r3, #128	; 0x80
 80140a2:	d00a      	beq.n	80140ba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80140a4:	7bbb      	ldrb	r3, [r7, #14]
 80140a6:	4619      	mov	r1, r3
 80140a8:	6878      	ldr	r0, [r7, #4]
 80140aa:	f002 fc9d 	bl	80169e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80140ae:	2180      	movs	r1, #128	; 0x80
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f002 fc99 	bl	80169e8 <USBD_LL_StallEP>
 80140b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80140b8:	e025      	b.n	8014106 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80140ba:	6839      	ldr	r1, [r7, #0]
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f000 fc09 	bl	80148d4 <USBD_CtlError>
              break;
 80140c2:	e020      	b.n	8014106 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	885b      	ldrh	r3, [r3, #2]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d11b      	bne.n	8014104 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80140cc:	7bbb      	ldrb	r3, [r7, #14]
 80140ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d004      	beq.n	80140e0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80140d6:	7bbb      	ldrb	r3, [r7, #14]
 80140d8:	4619      	mov	r1, r3
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f002 fca3 	bl	8016a26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f000 fcc2 	bl	8014a6a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140ec:	689b      	ldr	r3, [r3, #8]
 80140ee:	6839      	ldr	r1, [r7, #0]
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	4798      	blx	r3
 80140f4:	4603      	mov	r3, r0
 80140f6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80140f8:	e004      	b.n	8014104 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80140fa:	6839      	ldr	r1, [r7, #0]
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f000 fbe9 	bl	80148d4 <USBD_CtlError>
              break;
 8014102:	e000      	b.n	8014106 <USBD_StdEPReq+0x154>
              break;
 8014104:	bf00      	nop
          }
          break;
 8014106:	e0ab      	b.n	8014260 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801410e:	b2db      	uxtb	r3, r3
 8014110:	2b02      	cmp	r3, #2
 8014112:	d002      	beq.n	801411a <USBD_StdEPReq+0x168>
 8014114:	2b03      	cmp	r3, #3
 8014116:	d032      	beq.n	801417e <USBD_StdEPReq+0x1cc>
 8014118:	e097      	b.n	801424a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801411a:	7bbb      	ldrb	r3, [r7, #14]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d007      	beq.n	8014130 <USBD_StdEPReq+0x17e>
 8014120:	7bbb      	ldrb	r3, [r7, #14]
 8014122:	2b80      	cmp	r3, #128	; 0x80
 8014124:	d004      	beq.n	8014130 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014126:	6839      	ldr	r1, [r7, #0]
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f000 fbd3 	bl	80148d4 <USBD_CtlError>
                break;
 801412e:	e091      	b.n	8014254 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014134:	2b00      	cmp	r3, #0
 8014136:	da0b      	bge.n	8014150 <USBD_StdEPReq+0x19e>
 8014138:	7bbb      	ldrb	r3, [r7, #14]
 801413a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801413e:	4613      	mov	r3, r2
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	4413      	add	r3, r2
 8014144:	009b      	lsls	r3, r3, #2
 8014146:	3310      	adds	r3, #16
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	4413      	add	r3, r2
 801414c:	3304      	adds	r3, #4
 801414e:	e00b      	b.n	8014168 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014150:	7bbb      	ldrb	r3, [r7, #14]
 8014152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014156:	4613      	mov	r3, r2
 8014158:	009b      	lsls	r3, r3, #2
 801415a:	4413      	add	r3, r2
 801415c:	009b      	lsls	r3, r3, #2
 801415e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	4413      	add	r3, r2
 8014166:	3304      	adds	r3, #4
 8014168:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	2200      	movs	r2, #0
 801416e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	2202      	movs	r2, #2
 8014174:	4619      	mov	r1, r3
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f000 fc1d 	bl	80149b6 <USBD_CtlSendData>
              break;
 801417c:	e06a      	b.n	8014254 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801417e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014182:	2b00      	cmp	r3, #0
 8014184:	da11      	bge.n	80141aa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014186:	7bbb      	ldrb	r3, [r7, #14]
 8014188:	f003 020f 	and.w	r2, r3, #15
 801418c:	6879      	ldr	r1, [r7, #4]
 801418e:	4613      	mov	r3, r2
 8014190:	009b      	lsls	r3, r3, #2
 8014192:	4413      	add	r3, r2
 8014194:	009b      	lsls	r3, r3, #2
 8014196:	440b      	add	r3, r1
 8014198:	3324      	adds	r3, #36	; 0x24
 801419a:	881b      	ldrh	r3, [r3, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d117      	bne.n	80141d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80141a0:	6839      	ldr	r1, [r7, #0]
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f000 fb96 	bl	80148d4 <USBD_CtlError>
                  break;
 80141a8:	e054      	b.n	8014254 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80141aa:	7bbb      	ldrb	r3, [r7, #14]
 80141ac:	f003 020f 	and.w	r2, r3, #15
 80141b0:	6879      	ldr	r1, [r7, #4]
 80141b2:	4613      	mov	r3, r2
 80141b4:	009b      	lsls	r3, r3, #2
 80141b6:	4413      	add	r3, r2
 80141b8:	009b      	lsls	r3, r3, #2
 80141ba:	440b      	add	r3, r1
 80141bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80141c0:	881b      	ldrh	r3, [r3, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d104      	bne.n	80141d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80141c6:	6839      	ldr	r1, [r7, #0]
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f000 fb83 	bl	80148d4 <USBD_CtlError>
                  break;
 80141ce:	e041      	b.n	8014254 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	da0b      	bge.n	80141f0 <USBD_StdEPReq+0x23e>
 80141d8:	7bbb      	ldrb	r3, [r7, #14]
 80141da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80141de:	4613      	mov	r3, r2
 80141e0:	009b      	lsls	r3, r3, #2
 80141e2:	4413      	add	r3, r2
 80141e4:	009b      	lsls	r3, r3, #2
 80141e6:	3310      	adds	r3, #16
 80141e8:	687a      	ldr	r2, [r7, #4]
 80141ea:	4413      	add	r3, r2
 80141ec:	3304      	adds	r3, #4
 80141ee:	e00b      	b.n	8014208 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80141f0:	7bbb      	ldrb	r3, [r7, #14]
 80141f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80141f6:	4613      	mov	r3, r2
 80141f8:	009b      	lsls	r3, r3, #2
 80141fa:	4413      	add	r3, r2
 80141fc:	009b      	lsls	r3, r3, #2
 80141fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014202:	687a      	ldr	r2, [r7, #4]
 8014204:	4413      	add	r3, r2
 8014206:	3304      	adds	r3, #4
 8014208:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801420a:	7bbb      	ldrb	r3, [r7, #14]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d002      	beq.n	8014216 <USBD_StdEPReq+0x264>
 8014210:	7bbb      	ldrb	r3, [r7, #14]
 8014212:	2b80      	cmp	r3, #128	; 0x80
 8014214:	d103      	bne.n	801421e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	2200      	movs	r2, #0
 801421a:	601a      	str	r2, [r3, #0]
 801421c:	e00e      	b.n	801423c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801421e:	7bbb      	ldrb	r3, [r7, #14]
 8014220:	4619      	mov	r1, r3
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	f002 fc1e 	bl	8016a64 <USBD_LL_IsStallEP>
 8014228:	4603      	mov	r3, r0
 801422a:	2b00      	cmp	r3, #0
 801422c:	d003      	beq.n	8014236 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	2201      	movs	r2, #1
 8014232:	601a      	str	r2, [r3, #0]
 8014234:	e002      	b.n	801423c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	2200      	movs	r2, #0
 801423a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	2202      	movs	r2, #2
 8014240:	4619      	mov	r1, r3
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f000 fbb7 	bl	80149b6 <USBD_CtlSendData>
              break;
 8014248:	e004      	b.n	8014254 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801424a:	6839      	ldr	r1, [r7, #0]
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f000 fb41 	bl	80148d4 <USBD_CtlError>
              break;
 8014252:	bf00      	nop
          }
          break;
 8014254:	e004      	b.n	8014260 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014256:	6839      	ldr	r1, [r7, #0]
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f000 fb3b 	bl	80148d4 <USBD_CtlError>
          break;
 801425e:	bf00      	nop
      }
      break;
 8014260:	e004      	b.n	801426c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8014262:	6839      	ldr	r1, [r7, #0]
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f000 fb35 	bl	80148d4 <USBD_CtlError>
      break;
 801426a:	bf00      	nop
  }

  return ret;
 801426c:	7bfb      	ldrb	r3, [r7, #15]
}
 801426e:	4618      	mov	r0, r3
 8014270:	3710      	adds	r7, #16
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
	...

08014278 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
 8014280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014282:	2300      	movs	r3, #0
 8014284:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014286:	2300      	movs	r3, #0
 8014288:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801428a:	2300      	movs	r3, #0
 801428c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	885b      	ldrh	r3, [r3, #2]
 8014292:	0a1b      	lsrs	r3, r3, #8
 8014294:	b29b      	uxth	r3, r3
 8014296:	3b01      	subs	r3, #1
 8014298:	2b06      	cmp	r3, #6
 801429a:	f200 8128 	bhi.w	80144ee <USBD_GetDescriptor+0x276>
 801429e:	a201      	add	r2, pc, #4	; (adr r2, 80142a4 <USBD_GetDescriptor+0x2c>)
 80142a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142a4:	080142c1 	.word	0x080142c1
 80142a8:	080142d9 	.word	0x080142d9
 80142ac:	08014319 	.word	0x08014319
 80142b0:	080144ef 	.word	0x080144ef
 80142b4:	080144ef 	.word	0x080144ef
 80142b8:	0801448f 	.word	0x0801448f
 80142bc:	080144bb 	.word	0x080144bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	687a      	ldr	r2, [r7, #4]
 80142ca:	7c12      	ldrb	r2, [r2, #16]
 80142cc:	f107 0108 	add.w	r1, r7, #8
 80142d0:	4610      	mov	r0, r2
 80142d2:	4798      	blx	r3
 80142d4:	60f8      	str	r0, [r7, #12]
      break;
 80142d6:	e112      	b.n	80144fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	7c1b      	ldrb	r3, [r3, #16]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d10d      	bne.n	80142fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142e8:	f107 0208 	add.w	r2, r7, #8
 80142ec:	4610      	mov	r0, r2
 80142ee:	4798      	blx	r3
 80142f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	3301      	adds	r3, #1
 80142f6:	2202      	movs	r2, #2
 80142f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80142fa:	e100      	b.n	80144fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014304:	f107 0208 	add.w	r2, r7, #8
 8014308:	4610      	mov	r0, r2
 801430a:	4798      	blx	r3
 801430c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	3301      	adds	r3, #1
 8014312:	2202      	movs	r2, #2
 8014314:	701a      	strb	r2, [r3, #0]
      break;
 8014316:	e0f2      	b.n	80144fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	885b      	ldrh	r3, [r3, #2]
 801431c:	b2db      	uxtb	r3, r3
 801431e:	2b05      	cmp	r3, #5
 8014320:	f200 80ac 	bhi.w	801447c <USBD_GetDescriptor+0x204>
 8014324:	a201      	add	r2, pc, #4	; (adr r2, 801432c <USBD_GetDescriptor+0xb4>)
 8014326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801432a:	bf00      	nop
 801432c:	08014345 	.word	0x08014345
 8014330:	08014379 	.word	0x08014379
 8014334:	080143ad 	.word	0x080143ad
 8014338:	080143e1 	.word	0x080143e1
 801433c:	08014415 	.word	0x08014415
 8014340:	08014449 	.word	0x08014449
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d00b      	beq.n	8014368 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	687a      	ldr	r2, [r7, #4]
 801435a:	7c12      	ldrb	r2, [r2, #16]
 801435c:	f107 0108 	add.w	r1, r7, #8
 8014360:	4610      	mov	r0, r2
 8014362:	4798      	blx	r3
 8014364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014366:	e091      	b.n	801448c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014368:	6839      	ldr	r1, [r7, #0]
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f000 fab2 	bl	80148d4 <USBD_CtlError>
            err++;
 8014370:	7afb      	ldrb	r3, [r7, #11]
 8014372:	3301      	adds	r3, #1
 8014374:	72fb      	strb	r3, [r7, #11]
          break;
 8014376:	e089      	b.n	801448c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801437e:	689b      	ldr	r3, [r3, #8]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d00b      	beq.n	801439c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801438a:	689b      	ldr	r3, [r3, #8]
 801438c:	687a      	ldr	r2, [r7, #4]
 801438e:	7c12      	ldrb	r2, [r2, #16]
 8014390:	f107 0108 	add.w	r1, r7, #8
 8014394:	4610      	mov	r0, r2
 8014396:	4798      	blx	r3
 8014398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801439a:	e077      	b.n	801448c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801439c:	6839      	ldr	r1, [r7, #0]
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f000 fa98 	bl	80148d4 <USBD_CtlError>
            err++;
 80143a4:	7afb      	ldrb	r3, [r7, #11]
 80143a6:	3301      	adds	r3, #1
 80143a8:	72fb      	strb	r3, [r7, #11]
          break;
 80143aa:	e06f      	b.n	801448c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143b2:	68db      	ldr	r3, [r3, #12]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d00b      	beq.n	80143d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143be:	68db      	ldr	r3, [r3, #12]
 80143c0:	687a      	ldr	r2, [r7, #4]
 80143c2:	7c12      	ldrb	r2, [r2, #16]
 80143c4:	f107 0108 	add.w	r1, r7, #8
 80143c8:	4610      	mov	r0, r2
 80143ca:	4798      	blx	r3
 80143cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143ce:	e05d      	b.n	801448c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80143d0:	6839      	ldr	r1, [r7, #0]
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 fa7e 	bl	80148d4 <USBD_CtlError>
            err++;
 80143d8:	7afb      	ldrb	r3, [r7, #11]
 80143da:	3301      	adds	r3, #1
 80143dc:	72fb      	strb	r3, [r7, #11]
          break;
 80143de:	e055      	b.n	801448c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143e6:	691b      	ldr	r3, [r3, #16]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d00b      	beq.n	8014404 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80143f2:	691b      	ldr	r3, [r3, #16]
 80143f4:	687a      	ldr	r2, [r7, #4]
 80143f6:	7c12      	ldrb	r2, [r2, #16]
 80143f8:	f107 0108 	add.w	r1, r7, #8
 80143fc:	4610      	mov	r0, r2
 80143fe:	4798      	blx	r3
 8014400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014402:	e043      	b.n	801448c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014404:	6839      	ldr	r1, [r7, #0]
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f000 fa64 	bl	80148d4 <USBD_CtlError>
            err++;
 801440c:	7afb      	ldrb	r3, [r7, #11]
 801440e:	3301      	adds	r3, #1
 8014410:	72fb      	strb	r3, [r7, #11]
          break;
 8014412:	e03b      	b.n	801448c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801441a:	695b      	ldr	r3, [r3, #20]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d00b      	beq.n	8014438 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014426:	695b      	ldr	r3, [r3, #20]
 8014428:	687a      	ldr	r2, [r7, #4]
 801442a:	7c12      	ldrb	r2, [r2, #16]
 801442c:	f107 0108 	add.w	r1, r7, #8
 8014430:	4610      	mov	r0, r2
 8014432:	4798      	blx	r3
 8014434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014436:	e029      	b.n	801448c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014438:	6839      	ldr	r1, [r7, #0]
 801443a:	6878      	ldr	r0, [r7, #4]
 801443c:	f000 fa4a 	bl	80148d4 <USBD_CtlError>
            err++;
 8014440:	7afb      	ldrb	r3, [r7, #11]
 8014442:	3301      	adds	r3, #1
 8014444:	72fb      	strb	r3, [r7, #11]
          break;
 8014446:	e021      	b.n	801448c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801444e:	699b      	ldr	r3, [r3, #24]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d00b      	beq.n	801446c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801445a:	699b      	ldr	r3, [r3, #24]
 801445c:	687a      	ldr	r2, [r7, #4]
 801445e:	7c12      	ldrb	r2, [r2, #16]
 8014460:	f107 0108 	add.w	r1, r7, #8
 8014464:	4610      	mov	r0, r2
 8014466:	4798      	blx	r3
 8014468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801446a:	e00f      	b.n	801448c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801446c:	6839      	ldr	r1, [r7, #0]
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f000 fa30 	bl	80148d4 <USBD_CtlError>
            err++;
 8014474:	7afb      	ldrb	r3, [r7, #11]
 8014476:	3301      	adds	r3, #1
 8014478:	72fb      	strb	r3, [r7, #11]
          break;
 801447a:	e007      	b.n	801448c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801447c:	6839      	ldr	r1, [r7, #0]
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f000 fa28 	bl	80148d4 <USBD_CtlError>
          err++;
 8014484:	7afb      	ldrb	r3, [r7, #11]
 8014486:	3301      	adds	r3, #1
 8014488:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801448a:	bf00      	nop
      }
      break;
 801448c:	e037      	b.n	80144fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	7c1b      	ldrb	r3, [r3, #16]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d109      	bne.n	80144aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801449e:	f107 0208 	add.w	r2, r7, #8
 80144a2:	4610      	mov	r0, r2
 80144a4:	4798      	blx	r3
 80144a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80144a8:	e029      	b.n	80144fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80144aa:	6839      	ldr	r1, [r7, #0]
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f000 fa11 	bl	80148d4 <USBD_CtlError>
        err++;
 80144b2:	7afb      	ldrb	r3, [r7, #11]
 80144b4:	3301      	adds	r3, #1
 80144b6:	72fb      	strb	r3, [r7, #11]
      break;
 80144b8:	e021      	b.n	80144fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	7c1b      	ldrb	r3, [r3, #16]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d10d      	bne.n	80144de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144ca:	f107 0208 	add.w	r2, r7, #8
 80144ce:	4610      	mov	r0, r2
 80144d0:	4798      	blx	r3
 80144d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	3301      	adds	r3, #1
 80144d8:	2207      	movs	r2, #7
 80144da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80144dc:	e00f      	b.n	80144fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80144de:	6839      	ldr	r1, [r7, #0]
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f000 f9f7 	bl	80148d4 <USBD_CtlError>
        err++;
 80144e6:	7afb      	ldrb	r3, [r7, #11]
 80144e8:	3301      	adds	r3, #1
 80144ea:	72fb      	strb	r3, [r7, #11]
      break;
 80144ec:	e007      	b.n	80144fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80144ee:	6839      	ldr	r1, [r7, #0]
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f000 f9ef 	bl	80148d4 <USBD_CtlError>
      err++;
 80144f6:	7afb      	ldrb	r3, [r7, #11]
 80144f8:	3301      	adds	r3, #1
 80144fa:	72fb      	strb	r3, [r7, #11]
      break;
 80144fc:	bf00      	nop
  }

  if (err != 0U)
 80144fe:	7afb      	ldrb	r3, [r7, #11]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d11e      	bne.n	8014542 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	88db      	ldrh	r3, [r3, #6]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d016      	beq.n	801453a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801450c:	893b      	ldrh	r3, [r7, #8]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d00e      	beq.n	8014530 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	88da      	ldrh	r2, [r3, #6]
 8014516:	893b      	ldrh	r3, [r7, #8]
 8014518:	4293      	cmp	r3, r2
 801451a:	bf28      	it	cs
 801451c:	4613      	movcs	r3, r2
 801451e:	b29b      	uxth	r3, r3
 8014520:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014522:	893b      	ldrh	r3, [r7, #8]
 8014524:	461a      	mov	r2, r3
 8014526:	68f9      	ldr	r1, [r7, #12]
 8014528:	6878      	ldr	r0, [r7, #4]
 801452a:	f000 fa44 	bl	80149b6 <USBD_CtlSendData>
 801452e:	e009      	b.n	8014544 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014530:	6839      	ldr	r1, [r7, #0]
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f000 f9ce 	bl	80148d4 <USBD_CtlError>
 8014538:	e004      	b.n	8014544 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f000 fa95 	bl	8014a6a <USBD_CtlSendStatus>
 8014540:	e000      	b.n	8014544 <USBD_GetDescriptor+0x2cc>
    return;
 8014542:	bf00      	nop
  }
}
 8014544:	3710      	adds	r7, #16
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop

0801454c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b084      	sub	sp, #16
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	889b      	ldrh	r3, [r3, #4]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d131      	bne.n	80145c2 <USBD_SetAddress+0x76>
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	88db      	ldrh	r3, [r3, #6]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d12d      	bne.n	80145c2 <USBD_SetAddress+0x76>
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	885b      	ldrh	r3, [r3, #2]
 801456a:	2b7f      	cmp	r3, #127	; 0x7f
 801456c:	d829      	bhi.n	80145c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801456e:	683b      	ldr	r3, [r7, #0]
 8014570:	885b      	ldrh	r3, [r3, #2]
 8014572:	b2db      	uxtb	r3, r3
 8014574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014580:	b2db      	uxtb	r3, r3
 8014582:	2b03      	cmp	r3, #3
 8014584:	d104      	bne.n	8014590 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014586:	6839      	ldr	r1, [r7, #0]
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f000 f9a3 	bl	80148d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801458e:	e01d      	b.n	80145cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	7bfa      	ldrb	r2, [r7, #15]
 8014594:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014598:	7bfb      	ldrb	r3, [r7, #15]
 801459a:	4619      	mov	r1, r3
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f002 fa8d 	bl	8016abc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	f000 fa61 	bl	8014a6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80145a8:	7bfb      	ldrb	r3, [r7, #15]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d004      	beq.n	80145b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2202      	movs	r2, #2
 80145b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145b6:	e009      	b.n	80145cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	2201      	movs	r2, #1
 80145bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145c0:	e004      	b.n	80145cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80145c2:	6839      	ldr	r1, [r7, #0]
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f000 f985 	bl	80148d4 <USBD_CtlError>
  }
}
 80145ca:	bf00      	nop
 80145cc:	bf00      	nop
 80145ce:	3710      	adds	r7, #16
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b084      	sub	sp, #16
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80145de:	2300      	movs	r3, #0
 80145e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	885b      	ldrh	r3, [r3, #2]
 80145e6:	b2da      	uxtb	r2, r3
 80145e8:	4b4c      	ldr	r3, [pc, #304]	; (801471c <USBD_SetConfig+0x148>)
 80145ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80145ec:	4b4b      	ldr	r3, [pc, #300]	; (801471c <USBD_SetConfig+0x148>)
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d905      	bls.n	8014600 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80145f4:	6839      	ldr	r1, [r7, #0]
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f000 f96c 	bl	80148d4 <USBD_CtlError>
    return USBD_FAIL;
 80145fc:	2303      	movs	r3, #3
 80145fe:	e088      	b.n	8014712 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014606:	b2db      	uxtb	r3, r3
 8014608:	2b02      	cmp	r3, #2
 801460a:	d002      	beq.n	8014612 <USBD_SetConfig+0x3e>
 801460c:	2b03      	cmp	r3, #3
 801460e:	d025      	beq.n	801465c <USBD_SetConfig+0x88>
 8014610:	e071      	b.n	80146f6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014612:	4b42      	ldr	r3, [pc, #264]	; (801471c <USBD_SetConfig+0x148>)
 8014614:	781b      	ldrb	r3, [r3, #0]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d01c      	beq.n	8014654 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801461a:	4b40      	ldr	r3, [pc, #256]	; (801471c <USBD_SetConfig+0x148>)
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	461a      	mov	r2, r3
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014624:	4b3d      	ldr	r3, [pc, #244]	; (801471c <USBD_SetConfig+0x148>)
 8014626:	781b      	ldrb	r3, [r3, #0]
 8014628:	4619      	mov	r1, r3
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f7ff f948 	bl	80138c0 <USBD_SetClassConfig>
 8014630:	4603      	mov	r3, r0
 8014632:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014634:	7bfb      	ldrb	r3, [r7, #15]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d004      	beq.n	8014644 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801463a:	6839      	ldr	r1, [r7, #0]
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f000 f949 	bl	80148d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014642:	e065      	b.n	8014710 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f000 fa10 	bl	8014a6a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	2203      	movs	r2, #3
 801464e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014652:	e05d      	b.n	8014710 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f000 fa08 	bl	8014a6a <USBD_CtlSendStatus>
      break;
 801465a:	e059      	b.n	8014710 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801465c:	4b2f      	ldr	r3, [pc, #188]	; (801471c <USBD_SetConfig+0x148>)
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d112      	bne.n	801468a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2202      	movs	r2, #2
 8014668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801466c:	4b2b      	ldr	r3, [pc, #172]	; (801471c <USBD_SetConfig+0x148>)
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	461a      	mov	r2, r3
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014676:	4b29      	ldr	r3, [pc, #164]	; (801471c <USBD_SetConfig+0x148>)
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	4619      	mov	r1, r3
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f7ff f93b 	bl	80138f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f000 f9f1 	bl	8014a6a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014688:	e042      	b.n	8014710 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801468a:	4b24      	ldr	r3, [pc, #144]	; (801471c <USBD_SetConfig+0x148>)
 801468c:	781b      	ldrb	r3, [r3, #0]
 801468e:	461a      	mov	r2, r3
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	429a      	cmp	r2, r3
 8014696:	d02a      	beq.n	80146ee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	b2db      	uxtb	r3, r3
 801469e:	4619      	mov	r1, r3
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f7ff f929 	bl	80138f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80146a6:	4b1d      	ldr	r3, [pc, #116]	; (801471c <USBD_SetConfig+0x148>)
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	461a      	mov	r2, r3
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80146b0:	4b1a      	ldr	r3, [pc, #104]	; (801471c <USBD_SetConfig+0x148>)
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	4619      	mov	r1, r3
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f7ff f902 	bl	80138c0 <USBD_SetClassConfig>
 80146bc:	4603      	mov	r3, r0
 80146be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80146c0:	7bfb      	ldrb	r3, [r7, #15]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d00f      	beq.n	80146e6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80146c6:	6839      	ldr	r1, [r7, #0]
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f000 f903 	bl	80148d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	b2db      	uxtb	r3, r3
 80146d4:	4619      	mov	r1, r3
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f7ff f90e 	bl	80138f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2202      	movs	r2, #2
 80146e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80146e4:	e014      	b.n	8014710 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f000 f9bf 	bl	8014a6a <USBD_CtlSendStatus>
      break;
 80146ec:	e010      	b.n	8014710 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 f9bb 	bl	8014a6a <USBD_CtlSendStatus>
      break;
 80146f4:	e00c      	b.n	8014710 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80146f6:	6839      	ldr	r1, [r7, #0]
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f000 f8eb 	bl	80148d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80146fe:	4b07      	ldr	r3, [pc, #28]	; (801471c <USBD_SetConfig+0x148>)
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	4619      	mov	r1, r3
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f7ff f8f7 	bl	80138f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801470a:	2303      	movs	r3, #3
 801470c:	73fb      	strb	r3, [r7, #15]
      break;
 801470e:	bf00      	nop
  }

  return ret;
 8014710:	7bfb      	ldrb	r3, [r7, #15]
}
 8014712:	4618      	mov	r0, r3
 8014714:	3710      	adds	r7, #16
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}
 801471a:	bf00      	nop
 801471c:	24002b04 	.word	0x24002b04

08014720 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	88db      	ldrh	r3, [r3, #6]
 801472e:	2b01      	cmp	r3, #1
 8014730:	d004      	beq.n	801473c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014732:	6839      	ldr	r1, [r7, #0]
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	f000 f8cd 	bl	80148d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801473a:	e023      	b.n	8014784 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014742:	b2db      	uxtb	r3, r3
 8014744:	2b02      	cmp	r3, #2
 8014746:	dc02      	bgt.n	801474e <USBD_GetConfig+0x2e>
 8014748:	2b00      	cmp	r3, #0
 801474a:	dc03      	bgt.n	8014754 <USBD_GetConfig+0x34>
 801474c:	e015      	b.n	801477a <USBD_GetConfig+0x5a>
 801474e:	2b03      	cmp	r3, #3
 8014750:	d00b      	beq.n	801476a <USBD_GetConfig+0x4a>
 8014752:	e012      	b.n	801477a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2200      	movs	r2, #0
 8014758:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	3308      	adds	r3, #8
 801475e:	2201      	movs	r2, #1
 8014760:	4619      	mov	r1, r3
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f000 f927 	bl	80149b6 <USBD_CtlSendData>
        break;
 8014768:	e00c      	b.n	8014784 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	3304      	adds	r3, #4
 801476e:	2201      	movs	r2, #1
 8014770:	4619      	mov	r1, r3
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f000 f91f 	bl	80149b6 <USBD_CtlSendData>
        break;
 8014778:	e004      	b.n	8014784 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801477a:	6839      	ldr	r1, [r7, #0]
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f000 f8a9 	bl	80148d4 <USBD_CtlError>
        break;
 8014782:	bf00      	nop
}
 8014784:	bf00      	nop
 8014786:	3708      	adds	r7, #8
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}

0801478c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b082      	sub	sp, #8
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
 8014794:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801479c:	b2db      	uxtb	r3, r3
 801479e:	3b01      	subs	r3, #1
 80147a0:	2b02      	cmp	r3, #2
 80147a2:	d81e      	bhi.n	80147e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	88db      	ldrh	r3, [r3, #6]
 80147a8:	2b02      	cmp	r3, #2
 80147aa:	d004      	beq.n	80147b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80147ac:	6839      	ldr	r1, [r7, #0]
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f000 f890 	bl	80148d4 <USBD_CtlError>
        break;
 80147b4:	e01a      	b.n	80147ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2201      	movs	r2, #1
 80147ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d005      	beq.n	80147d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	f043 0202 	orr.w	r2, r3, #2
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	330c      	adds	r3, #12
 80147d6:	2202      	movs	r2, #2
 80147d8:	4619      	mov	r1, r3
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f000 f8eb 	bl	80149b6 <USBD_CtlSendData>
      break;
 80147e0:	e004      	b.n	80147ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80147e2:	6839      	ldr	r1, [r7, #0]
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f000 f875 	bl	80148d4 <USBD_CtlError>
      break;
 80147ea:	bf00      	nop
  }
}
 80147ec:	bf00      	nop
 80147ee:	3708      	adds	r7, #8
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}

080147f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
 80147fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	885b      	ldrh	r3, [r3, #2]
 8014802:	2b01      	cmp	r3, #1
 8014804:	d106      	bne.n	8014814 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2201      	movs	r2, #1
 801480a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f000 f92b 	bl	8014a6a <USBD_CtlSendStatus>
  }
}
 8014814:	bf00      	nop
 8014816:	3708      	adds	r7, #8
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}

0801481c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801482c:	b2db      	uxtb	r3, r3
 801482e:	3b01      	subs	r3, #1
 8014830:	2b02      	cmp	r3, #2
 8014832:	d80b      	bhi.n	801484c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	885b      	ldrh	r3, [r3, #2]
 8014838:	2b01      	cmp	r3, #1
 801483a:	d10c      	bne.n	8014856 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2200      	movs	r2, #0
 8014840:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f000 f910 	bl	8014a6a <USBD_CtlSendStatus>
      }
      break;
 801484a:	e004      	b.n	8014856 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801484c:	6839      	ldr	r1, [r7, #0]
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f000 f840 	bl	80148d4 <USBD_CtlError>
      break;
 8014854:	e000      	b.n	8014858 <USBD_ClrFeature+0x3c>
      break;
 8014856:	bf00      	nop
  }
}
 8014858:	bf00      	nop
 801485a:	3708      	adds	r7, #8
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}

08014860 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b084      	sub	sp, #16
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	781a      	ldrb	r2, [r3, #0]
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	3301      	adds	r3, #1
 801487a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	781a      	ldrb	r2, [r3, #0]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	3301      	adds	r3, #1
 8014888:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801488a:	68f8      	ldr	r0, [r7, #12]
 801488c:	f7ff fabb 	bl	8013e06 <SWAPBYTE>
 8014890:	4603      	mov	r3, r0
 8014892:	461a      	mov	r2, r3
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	3301      	adds	r3, #1
 801489c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	3301      	adds	r3, #1
 80148a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80148a4:	68f8      	ldr	r0, [r7, #12]
 80148a6:	f7ff faae 	bl	8013e06 <SWAPBYTE>
 80148aa:	4603      	mov	r3, r0
 80148ac:	461a      	mov	r2, r3
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	3301      	adds	r3, #1
 80148b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	3301      	adds	r3, #1
 80148bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80148be:	68f8      	ldr	r0, [r7, #12]
 80148c0:	f7ff faa1 	bl	8013e06 <SWAPBYTE>
 80148c4:	4603      	mov	r3, r0
 80148c6:	461a      	mov	r2, r3
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	80da      	strh	r2, [r3, #6]
}
 80148cc:	bf00      	nop
 80148ce:	3710      	adds	r7, #16
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80148de:	2180      	movs	r1, #128	; 0x80
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f002 f881 	bl	80169e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80148e6:	2100      	movs	r1, #0
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f002 f87d 	bl	80169e8 <USBD_LL_StallEP>
}
 80148ee:	bf00      	nop
 80148f0:	3708      	adds	r7, #8
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}

080148f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80148f6:	b580      	push	{r7, lr}
 80148f8:	b086      	sub	sp, #24
 80148fa:	af00      	add	r7, sp, #0
 80148fc:	60f8      	str	r0, [r7, #12]
 80148fe:	60b9      	str	r1, [r7, #8]
 8014900:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014902:	2300      	movs	r3, #0
 8014904:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d036      	beq.n	801497a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014910:	6938      	ldr	r0, [r7, #16]
 8014912:	f000 f836 	bl	8014982 <USBD_GetLen>
 8014916:	4603      	mov	r3, r0
 8014918:	3301      	adds	r3, #1
 801491a:	b29b      	uxth	r3, r3
 801491c:	005b      	lsls	r3, r3, #1
 801491e:	b29a      	uxth	r2, r3
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014924:	7dfb      	ldrb	r3, [r7, #23]
 8014926:	68ba      	ldr	r2, [r7, #8]
 8014928:	4413      	add	r3, r2
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	7812      	ldrb	r2, [r2, #0]
 801492e:	701a      	strb	r2, [r3, #0]
  idx++;
 8014930:	7dfb      	ldrb	r3, [r7, #23]
 8014932:	3301      	adds	r3, #1
 8014934:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014936:	7dfb      	ldrb	r3, [r7, #23]
 8014938:	68ba      	ldr	r2, [r7, #8]
 801493a:	4413      	add	r3, r2
 801493c:	2203      	movs	r2, #3
 801493e:	701a      	strb	r2, [r3, #0]
  idx++;
 8014940:	7dfb      	ldrb	r3, [r7, #23]
 8014942:	3301      	adds	r3, #1
 8014944:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014946:	e013      	b.n	8014970 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014948:	7dfb      	ldrb	r3, [r7, #23]
 801494a:	68ba      	ldr	r2, [r7, #8]
 801494c:	4413      	add	r3, r2
 801494e:	693a      	ldr	r2, [r7, #16]
 8014950:	7812      	ldrb	r2, [r2, #0]
 8014952:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	3301      	adds	r3, #1
 8014958:	613b      	str	r3, [r7, #16]
    idx++;
 801495a:	7dfb      	ldrb	r3, [r7, #23]
 801495c:	3301      	adds	r3, #1
 801495e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014960:	7dfb      	ldrb	r3, [r7, #23]
 8014962:	68ba      	ldr	r2, [r7, #8]
 8014964:	4413      	add	r3, r2
 8014966:	2200      	movs	r2, #0
 8014968:	701a      	strb	r2, [r3, #0]
    idx++;
 801496a:	7dfb      	ldrb	r3, [r7, #23]
 801496c:	3301      	adds	r3, #1
 801496e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d1e7      	bne.n	8014948 <USBD_GetString+0x52>
 8014978:	e000      	b.n	801497c <USBD_GetString+0x86>
    return;
 801497a:	bf00      	nop
  }
}
 801497c:	3718      	adds	r7, #24
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}

08014982 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014982:	b480      	push	{r7}
 8014984:	b085      	sub	sp, #20
 8014986:	af00      	add	r7, sp, #0
 8014988:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801498a:	2300      	movs	r3, #0
 801498c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014992:	e005      	b.n	80149a0 <USBD_GetLen+0x1e>
  {
    len++;
 8014994:	7bfb      	ldrb	r3, [r7, #15]
 8014996:	3301      	adds	r3, #1
 8014998:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	3301      	adds	r3, #1
 801499e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	781b      	ldrb	r3, [r3, #0]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d1f5      	bne.n	8014994 <USBD_GetLen+0x12>
  }

  return len;
 80149a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3714      	adds	r7, #20
 80149ae:	46bd      	mov	sp, r7
 80149b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b4:	4770      	bx	lr

080149b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80149b6:	b580      	push	{r7, lr}
 80149b8:	b084      	sub	sp, #16
 80149ba:	af00      	add	r7, sp, #0
 80149bc:	60f8      	str	r0, [r7, #12]
 80149be:	60b9      	str	r1, [r7, #8]
 80149c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	2202      	movs	r2, #2
 80149c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	68ba      	ldr	r2, [r7, #8]
 80149da:	2100      	movs	r1, #0
 80149dc:	68f8      	ldr	r0, [r7, #12]
 80149de:	f002 f88c 	bl	8016afa <USBD_LL_Transmit>

  return USBD_OK;
 80149e2:	2300      	movs	r3, #0
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3710      	adds	r7, #16
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}

080149ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b084      	sub	sp, #16
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	60b9      	str	r1, [r7, #8]
 80149f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	68ba      	ldr	r2, [r7, #8]
 80149fc:	2100      	movs	r1, #0
 80149fe:	68f8      	ldr	r0, [r7, #12]
 8014a00:	f002 f87b 	bl	8016afa <USBD_LL_Transmit>

  return USBD_OK;
 8014a04:	2300      	movs	r3, #0
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	3710      	adds	r7, #16
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}

08014a0e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014a0e:	b580      	push	{r7, lr}
 8014a10:	b084      	sub	sp, #16
 8014a12:	af00      	add	r7, sp, #0
 8014a14:	60f8      	str	r0, [r7, #12]
 8014a16:	60b9      	str	r1, [r7, #8]
 8014a18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	2203      	movs	r2, #3
 8014a1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	687a      	ldr	r2, [r7, #4]
 8014a26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	687a      	ldr	r2, [r7, #4]
 8014a2e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	68ba      	ldr	r2, [r7, #8]
 8014a36:	2100      	movs	r1, #0
 8014a38:	68f8      	ldr	r0, [r7, #12]
 8014a3a:	f002 f87f 	bl	8016b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a3e:	2300      	movs	r3, #0
}
 8014a40:	4618      	mov	r0, r3
 8014a42:	3710      	adds	r7, #16
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b084      	sub	sp, #16
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	60f8      	str	r0, [r7, #12]
 8014a50:	60b9      	str	r1, [r7, #8]
 8014a52:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	68ba      	ldr	r2, [r7, #8]
 8014a58:	2100      	movs	r1, #0
 8014a5a:	68f8      	ldr	r0, [r7, #12]
 8014a5c:	f002 f86e 	bl	8016b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014a60:	2300      	movs	r3, #0
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3710      	adds	r7, #16
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}

08014a6a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014a6a:	b580      	push	{r7, lr}
 8014a6c:	b082      	sub	sp, #8
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	2204      	movs	r2, #4
 8014a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	2100      	movs	r1, #0
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f002 f83a 	bl	8016afa <USBD_LL_Transmit>

  return USBD_OK;
 8014a86:	2300      	movs	r3, #0
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3708      	adds	r7, #8
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}

08014a90 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b082      	sub	sp, #8
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2205      	movs	r2, #5
 8014a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	2100      	movs	r1, #0
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f002 f848 	bl	8016b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014aac:	2300      	movs	r3, #0
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3708      	adds	r7, #8
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}

08014ab6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014ab6:	b480      	push	{r7}
 8014ab8:	b085      	sub	sp, #20
 8014aba:	af00      	add	r7, sp, #0
 8014abc:	4603      	mov	r3, r0
 8014abe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ac8:	2b84      	cmp	r3, #132	; 0x84
 8014aca:	d005      	beq.n	8014ad8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014acc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	4413      	add	r3, r2
 8014ad4:	3303      	adds	r3, #3
 8014ad6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3714      	adds	r7, #20
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae4:	4770      	bx	lr

08014ae6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014ae6:	b580      	push	{r7, lr}
 8014ae8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014aea:	f000 fc17 	bl	801531c <vTaskStartScheduler>
  
  return osOK;
 8014aee:	2300      	movs	r3, #0
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	bd80      	pop	{r7, pc}

08014af4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014af6:	b089      	sub	sp, #36	; 0x24
 8014af8:	af04      	add	r7, sp, #16
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	695b      	ldr	r3, [r3, #20]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d020      	beq.n	8014b48 <osThreadCreate+0x54>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	699b      	ldr	r3, [r3, #24]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d01c      	beq.n	8014b48 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	685c      	ldr	r4, [r3, #4]
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	681d      	ldr	r5, [r3, #0]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	691e      	ldr	r6, [r3, #16]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7ff ffc8 	bl	8014ab6 <makeFreeRtosPriority>
 8014b26:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	695b      	ldr	r3, [r3, #20]
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014b30:	9202      	str	r2, [sp, #8]
 8014b32:	9301      	str	r3, [sp, #4]
 8014b34:	9100      	str	r1, [sp, #0]
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	4632      	mov	r2, r6
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f000 f8ed 	bl	8014d1c <xTaskCreateStatic>
 8014b42:	4603      	mov	r3, r0
 8014b44:	60fb      	str	r3, [r7, #12]
 8014b46:	e01c      	b.n	8014b82 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	685c      	ldr	r4, [r3, #4]
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014b54:	b29e      	uxth	r6, r3
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7ff ffaa 	bl	8014ab6 <makeFreeRtosPriority>
 8014b62:	4602      	mov	r2, r0
 8014b64:	f107 030c 	add.w	r3, r7, #12
 8014b68:	9301      	str	r3, [sp, #4]
 8014b6a:	9200      	str	r2, [sp, #0]
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	4632      	mov	r2, r6
 8014b70:	4629      	mov	r1, r5
 8014b72:	4620      	mov	r0, r4
 8014b74:	f000 f92f 	bl	8014dd6 <xTaskCreate>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2b01      	cmp	r3, #1
 8014b7c:	d001      	beq.n	8014b82 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	e000      	b.n	8014b84 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014b82:	68fb      	ldr	r3, [r7, #12]
}
 8014b84:	4618      	mov	r0, r3
 8014b86:	3714      	adds	r7, #20
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014b8c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b084      	sub	sp, #16
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d001      	beq.n	8014ba2 <osDelay+0x16>
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	e000      	b.n	8014ba4 <osDelay+0x18>
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f000 fa63 	bl	8015070 <vTaskDelay>
  
  return osOK;
 8014baa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3710      	adds	r7, #16
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}

08014bb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	f103 0208 	add.w	r2, r3, #8
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8014bcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f103 0208 	add.w	r2, r3, #8
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f103 0208 	add.w	r2, r3, #8
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2200      	movs	r2, #0
 8014be6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014be8:	bf00      	nop
 8014bea:	370c      	adds	r7, #12
 8014bec:	46bd      	mov	sp, r7
 8014bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf2:	4770      	bx	lr

08014bf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b083      	sub	sp, #12
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014c02:	bf00      	nop
 8014c04:	370c      	adds	r7, #12
 8014c06:	46bd      	mov	sp, r7
 8014c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0c:	4770      	bx	lr

08014c0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014c0e:	b480      	push	{r7}
 8014c10:	b085      	sub	sp, #20
 8014c12:	af00      	add	r7, sp, #0
 8014c14:	6078      	str	r0, [r7, #4]
 8014c16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	685b      	ldr	r3, [r3, #4]
 8014c1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	68fa      	ldr	r2, [r7, #12]
 8014c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	689a      	ldr	r2, [r3, #8]
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	689b      	ldr	r3, [r3, #8]
 8014c30:	683a      	ldr	r2, [r7, #0]
 8014c32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	683a      	ldr	r2, [r7, #0]
 8014c38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	687a      	ldr	r2, [r7, #4]
 8014c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	1c5a      	adds	r2, r3, #1
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	601a      	str	r2, [r3, #0]
}
 8014c4a:	bf00      	nop
 8014c4c:	3714      	adds	r7, #20
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c54:	4770      	bx	lr

08014c56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014c56:	b480      	push	{r7}
 8014c58:	b085      	sub	sp, #20
 8014c5a:	af00      	add	r7, sp, #0
 8014c5c:	6078      	str	r0, [r7, #4]
 8014c5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c6c:	d103      	bne.n	8014c76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	691b      	ldr	r3, [r3, #16]
 8014c72:	60fb      	str	r3, [r7, #12]
 8014c74:	e00c      	b.n	8014c90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	3308      	adds	r3, #8
 8014c7a:	60fb      	str	r3, [r7, #12]
 8014c7c:	e002      	b.n	8014c84 <vListInsert+0x2e>
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	685b      	ldr	r3, [r3, #4]
 8014c82:	60fb      	str	r3, [r7, #12]
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	685b      	ldr	r3, [r3, #4]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	68ba      	ldr	r2, [r7, #8]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d2f6      	bcs.n	8014c7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	685a      	ldr	r2, [r3, #4]
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	683a      	ldr	r2, [r7, #0]
 8014c9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	68fa      	ldr	r2, [r7, #12]
 8014ca4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	683a      	ldr	r2, [r7, #0]
 8014caa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	1c5a      	adds	r2, r3, #1
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	601a      	str	r2, [r3, #0]
}
 8014cbc:	bf00      	nop
 8014cbe:	3714      	adds	r7, #20
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr

08014cc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b085      	sub	sp, #20
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	691b      	ldr	r3, [r3, #16]
 8014cd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	685b      	ldr	r3, [r3, #4]
 8014cda:	687a      	ldr	r2, [r7, #4]
 8014cdc:	6892      	ldr	r2, [r2, #8]
 8014cde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	689b      	ldr	r3, [r3, #8]
 8014ce4:	687a      	ldr	r2, [r7, #4]
 8014ce6:	6852      	ldr	r2, [r2, #4]
 8014ce8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	d103      	bne.n	8014cfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	689a      	ldr	r2, [r3, #8]
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	1e5a      	subs	r2, r3, #1
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	681b      	ldr	r3, [r3, #0]
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3714      	adds	r7, #20
 8014d14:	46bd      	mov	sp, r7
 8014d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1a:	4770      	bx	lr

08014d1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b08e      	sub	sp, #56	; 0x38
 8014d20:	af04      	add	r7, sp, #16
 8014d22:	60f8      	str	r0, [r7, #12]
 8014d24:	60b9      	str	r1, [r7, #8]
 8014d26:	607a      	str	r2, [r7, #4]
 8014d28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d10a      	bne.n	8014d46 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d34:	f383 8811 	msr	BASEPRI, r3
 8014d38:	f3bf 8f6f 	isb	sy
 8014d3c:	f3bf 8f4f 	dsb	sy
 8014d40:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014d42:	bf00      	nop
 8014d44:	e7fe      	b.n	8014d44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d10a      	bne.n	8014d62 <xTaskCreateStatic+0x46>
	__asm volatile
 8014d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d50:	f383 8811 	msr	BASEPRI, r3
 8014d54:	f3bf 8f6f 	isb	sy
 8014d58:	f3bf 8f4f 	dsb	sy
 8014d5c:	61fb      	str	r3, [r7, #28]
}
 8014d5e:	bf00      	nop
 8014d60:	e7fe      	b.n	8014d60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014d62:	23b4      	movs	r3, #180	; 0xb4
 8014d64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	2bb4      	cmp	r3, #180	; 0xb4
 8014d6a:	d00a      	beq.n	8014d82 <xTaskCreateStatic+0x66>
	__asm volatile
 8014d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d70:	f383 8811 	msr	BASEPRI, r3
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	f3bf 8f4f 	dsb	sy
 8014d7c:	61bb      	str	r3, [r7, #24]
}
 8014d7e:	bf00      	nop
 8014d80:	e7fe      	b.n	8014d80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014d82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d01e      	beq.n	8014dc8 <xTaskCreateStatic+0xac>
 8014d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d01b      	beq.n	8014dc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d9c:	2202      	movs	r2, #2
 8014d9e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014da2:	2300      	movs	r3, #0
 8014da4:	9303      	str	r3, [sp, #12]
 8014da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da8:	9302      	str	r3, [sp, #8]
 8014daa:	f107 0314 	add.w	r3, r7, #20
 8014dae:	9301      	str	r3, [sp, #4]
 8014db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db2:	9300      	str	r3, [sp, #0]
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	687a      	ldr	r2, [r7, #4]
 8014db8:	68b9      	ldr	r1, [r7, #8]
 8014dba:	68f8      	ldr	r0, [r7, #12]
 8014dbc:	f000 f850 	bl	8014e60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014dc2:	f000 f8eb 	bl	8014f9c <prvAddNewTaskToReadyList>
 8014dc6:	e001      	b.n	8014dcc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014dc8:	2300      	movs	r3, #0
 8014dca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014dcc:	697b      	ldr	r3, [r7, #20]
	}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3728      	adds	r7, #40	; 0x28
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}

08014dd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014dd6:	b580      	push	{r7, lr}
 8014dd8:	b08c      	sub	sp, #48	; 0x30
 8014dda:	af04      	add	r7, sp, #16
 8014ddc:	60f8      	str	r0, [r7, #12]
 8014dde:	60b9      	str	r1, [r7, #8]
 8014de0:	603b      	str	r3, [r7, #0]
 8014de2:	4613      	mov	r3, r2
 8014de4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014de6:	88fb      	ldrh	r3, [r7, #6]
 8014de8:	009b      	lsls	r3, r3, #2
 8014dea:	4618      	mov	r0, r3
 8014dec:	f001 f814 	bl	8015e18 <pvPortMalloc>
 8014df0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d00e      	beq.n	8014e16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014df8:	20b4      	movs	r0, #180	; 0xb4
 8014dfa:	f001 f80d 	bl	8015e18 <pvPortMalloc>
 8014dfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014e00:	69fb      	ldr	r3, [r7, #28]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d003      	beq.n	8014e0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014e06:	69fb      	ldr	r3, [r7, #28]
 8014e08:	697a      	ldr	r2, [r7, #20]
 8014e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8014e0c:	e005      	b.n	8014e1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014e0e:	6978      	ldr	r0, [r7, #20]
 8014e10:	f001 f8ce 	bl	8015fb0 <vPortFree>
 8014e14:	e001      	b.n	8014e1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014e16:	2300      	movs	r3, #0
 8014e18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014e1a:	69fb      	ldr	r3, [r7, #28]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d017      	beq.n	8014e50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014e20:	69fb      	ldr	r3, [r7, #28]
 8014e22:	2200      	movs	r2, #0
 8014e24:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014e28:	88fa      	ldrh	r2, [r7, #6]
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	9303      	str	r3, [sp, #12]
 8014e2e:	69fb      	ldr	r3, [r7, #28]
 8014e30:	9302      	str	r3, [sp, #8]
 8014e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e34:	9301      	str	r3, [sp, #4]
 8014e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e38:	9300      	str	r3, [sp, #0]
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	68b9      	ldr	r1, [r7, #8]
 8014e3e:	68f8      	ldr	r0, [r7, #12]
 8014e40:	f000 f80e 	bl	8014e60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014e44:	69f8      	ldr	r0, [r7, #28]
 8014e46:	f000 f8a9 	bl	8014f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	61bb      	str	r3, [r7, #24]
 8014e4e:	e002      	b.n	8014e56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014e50:	f04f 33ff 	mov.w	r3, #4294967295
 8014e54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014e56:	69bb      	ldr	r3, [r7, #24]
	}
 8014e58:	4618      	mov	r0, r3
 8014e5a:	3720      	adds	r7, #32
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	bd80      	pop	{r7, pc}

08014e60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b088      	sub	sp, #32
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	60f8      	str	r0, [r7, #12]
 8014e68:	60b9      	str	r1, [r7, #8]
 8014e6a:	607a      	str	r2, [r7, #4]
 8014e6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014e72:	6879      	ldr	r1, [r7, #4]
 8014e74:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014e78:	440b      	add	r3, r1
 8014e7a:	009b      	lsls	r3, r3, #2
 8014e7c:	4413      	add	r3, r2
 8014e7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014e80:	69bb      	ldr	r3, [r7, #24]
 8014e82:	f023 0307 	bic.w	r3, r3, #7
 8014e86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014e88:	69bb      	ldr	r3, [r7, #24]
 8014e8a:	f003 0307 	and.w	r3, r3, #7
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d00a      	beq.n	8014ea8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8014e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e96:	f383 8811 	msr	BASEPRI, r3
 8014e9a:	f3bf 8f6f 	isb	sy
 8014e9e:	f3bf 8f4f 	dsb	sy
 8014ea2:	617b      	str	r3, [r7, #20]
}
 8014ea4:	bf00      	nop
 8014ea6:	e7fe      	b.n	8014ea6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d01f      	beq.n	8014eee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014eae:	2300      	movs	r3, #0
 8014eb0:	61fb      	str	r3, [r7, #28]
 8014eb2:	e012      	b.n	8014eda <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014eb4:	68ba      	ldr	r2, [r7, #8]
 8014eb6:	69fb      	ldr	r3, [r7, #28]
 8014eb8:	4413      	add	r3, r2
 8014eba:	7819      	ldrb	r1, [r3, #0]
 8014ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ebe:	69fb      	ldr	r3, [r7, #28]
 8014ec0:	4413      	add	r3, r2
 8014ec2:	3334      	adds	r3, #52	; 0x34
 8014ec4:	460a      	mov	r2, r1
 8014ec6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014ec8:	68ba      	ldr	r2, [r7, #8]
 8014eca:	69fb      	ldr	r3, [r7, #28]
 8014ecc:	4413      	add	r3, r2
 8014ece:	781b      	ldrb	r3, [r3, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d006      	beq.n	8014ee2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014ed4:	69fb      	ldr	r3, [r7, #28]
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	61fb      	str	r3, [r7, #28]
 8014eda:	69fb      	ldr	r3, [r7, #28]
 8014edc:	2b0f      	cmp	r3, #15
 8014ede:	d9e9      	bls.n	8014eb4 <prvInitialiseNewTask+0x54>
 8014ee0:	e000      	b.n	8014ee4 <prvInitialiseNewTask+0x84>
			{
				break;
 8014ee2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014eec:	e003      	b.n	8014ef6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef8:	2b06      	cmp	r3, #6
 8014efa:	d901      	bls.n	8014f00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014efc:	2306      	movs	r3, #6
 8014efe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f0e:	2200      	movs	r2, #0
 8014f10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f14:	3304      	adds	r3, #4
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7ff fe6c 	bl	8014bf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f1e:	3318      	adds	r3, #24
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7ff fe67 	bl	8014bf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f2e:	f1c3 0207 	rsb	r2, r3, #7
 8014f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f3e:	2200      	movs	r2, #0
 8014f40:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f46:	2200      	movs	r2, #0
 8014f48:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f4e:	334c      	adds	r3, #76	; 0x4c
 8014f50:	2260      	movs	r2, #96	; 0x60
 8014f52:	2100      	movs	r1, #0
 8014f54:	4618      	mov	r0, r3
 8014f56:	f001 ff9e 	bl	8016e96 <memset>
 8014f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f5c:	4a0c      	ldr	r2, [pc, #48]	; (8014f90 <prvInitialiseNewTask+0x130>)
 8014f5e:	651a      	str	r2, [r3, #80]	; 0x50
 8014f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f62:	4a0c      	ldr	r2, [pc, #48]	; (8014f94 <prvInitialiseNewTask+0x134>)
 8014f64:	655a      	str	r2, [r3, #84]	; 0x54
 8014f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f68:	4a0b      	ldr	r2, [pc, #44]	; (8014f98 <prvInitialiseNewTask+0x138>)
 8014f6a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014f6c:	683a      	ldr	r2, [r7, #0]
 8014f6e:	68f9      	ldr	r1, [r7, #12]
 8014f70:	69b8      	ldr	r0, [r7, #24]
 8014f72:	f000 fd41 	bl	80159f8 <pxPortInitialiseStack>
 8014f76:	4602      	mov	r2, r0
 8014f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d002      	beq.n	8014f88 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014f88:	bf00      	nop
 8014f8a:	3720      	adds	r7, #32
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	080237b0 	.word	0x080237b0
 8014f94:	080237d0 	.word	0x080237d0
 8014f98:	08023790 	.word	0x08023790

08014f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014fa4:	f000 fe56 	bl	8015c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014fa8:	4b2a      	ldr	r3, [pc, #168]	; (8015054 <prvAddNewTaskToReadyList+0xb8>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	3301      	adds	r3, #1
 8014fae:	4a29      	ldr	r2, [pc, #164]	; (8015054 <prvAddNewTaskToReadyList+0xb8>)
 8014fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014fb2:	4b29      	ldr	r3, [pc, #164]	; (8015058 <prvAddNewTaskToReadyList+0xbc>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d109      	bne.n	8014fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014fba:	4a27      	ldr	r2, [pc, #156]	; (8015058 <prvAddNewTaskToReadyList+0xbc>)
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014fc0:	4b24      	ldr	r3, [pc, #144]	; (8015054 <prvAddNewTaskToReadyList+0xb8>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	2b01      	cmp	r3, #1
 8014fc6:	d110      	bne.n	8014fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014fc8:	f000 fbee 	bl	80157a8 <prvInitialiseTaskLists>
 8014fcc:	e00d      	b.n	8014fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014fce:	4b23      	ldr	r3, [pc, #140]	; (801505c <prvAddNewTaskToReadyList+0xc0>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d109      	bne.n	8014fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014fd6:	4b20      	ldr	r3, [pc, #128]	; (8015058 <prvAddNewTaskToReadyList+0xbc>)
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d802      	bhi.n	8014fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014fe4:	4a1c      	ldr	r2, [pc, #112]	; (8015058 <prvAddNewTaskToReadyList+0xbc>)
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014fea:	4b1d      	ldr	r3, [pc, #116]	; (8015060 <prvAddNewTaskToReadyList+0xc4>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	3301      	adds	r3, #1
 8014ff0:	4a1b      	ldr	r2, [pc, #108]	; (8015060 <prvAddNewTaskToReadyList+0xc4>)
 8014ff2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ff8:	2201      	movs	r2, #1
 8014ffa:	409a      	lsls	r2, r3
 8014ffc:	4b19      	ldr	r3, [pc, #100]	; (8015064 <prvAddNewTaskToReadyList+0xc8>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	4313      	orrs	r3, r2
 8015002:	4a18      	ldr	r2, [pc, #96]	; (8015064 <prvAddNewTaskToReadyList+0xc8>)
 8015004:	6013      	str	r3, [r2, #0]
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801500a:	4613      	mov	r3, r2
 801500c:	009b      	lsls	r3, r3, #2
 801500e:	4413      	add	r3, r2
 8015010:	009b      	lsls	r3, r3, #2
 8015012:	4a15      	ldr	r2, [pc, #84]	; (8015068 <prvAddNewTaskToReadyList+0xcc>)
 8015014:	441a      	add	r2, r3
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	3304      	adds	r3, #4
 801501a:	4619      	mov	r1, r3
 801501c:	4610      	mov	r0, r2
 801501e:	f7ff fdf6 	bl	8014c0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015022:	f000 fe47 	bl	8015cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015026:	4b0d      	ldr	r3, [pc, #52]	; (801505c <prvAddNewTaskToReadyList+0xc0>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d00e      	beq.n	801504c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801502e:	4b0a      	ldr	r3, [pc, #40]	; (8015058 <prvAddNewTaskToReadyList+0xbc>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015038:	429a      	cmp	r2, r3
 801503a:	d207      	bcs.n	801504c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801503c:	4b0b      	ldr	r3, [pc, #44]	; (801506c <prvAddNewTaskToReadyList+0xd0>)
 801503e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015042:	601a      	str	r2, [r3, #0]
 8015044:	f3bf 8f4f 	dsb	sy
 8015048:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801504c:	bf00      	nop
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	24002c08 	.word	0x24002c08
 8015058:	24002b08 	.word	0x24002b08
 801505c:	24002c14 	.word	0x24002c14
 8015060:	24002c24 	.word	0x24002c24
 8015064:	24002c10 	.word	0x24002c10
 8015068:	24002b0c 	.word	0x24002b0c
 801506c:	e000ed04 	.word	0xe000ed04

08015070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015070:	b580      	push	{r7, lr}
 8015072:	b084      	sub	sp, #16
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015078:	2300      	movs	r3, #0
 801507a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d017      	beq.n	80150b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015082:	4b13      	ldr	r3, [pc, #76]	; (80150d0 <vTaskDelay+0x60>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d00a      	beq.n	80150a0 <vTaskDelay+0x30>
	__asm volatile
 801508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801508e:	f383 8811 	msr	BASEPRI, r3
 8015092:	f3bf 8f6f 	isb	sy
 8015096:	f3bf 8f4f 	dsb	sy
 801509a:	60bb      	str	r3, [r7, #8]
}
 801509c:	bf00      	nop
 801509e:	e7fe      	b.n	801509e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80150a0:	f000 f9a6 	bl	80153f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80150a4:	2100      	movs	r1, #0
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f000 fc40 	bl	801592c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80150ac:	f000 f9ae 	bl	801540c <xTaskResumeAll>
 80150b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d107      	bne.n	80150c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80150b8:	4b06      	ldr	r3, [pc, #24]	; (80150d4 <vTaskDelay+0x64>)
 80150ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150be:	601a      	str	r2, [r3, #0]
 80150c0:	f3bf 8f4f 	dsb	sy
 80150c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80150c8:	bf00      	nop
 80150ca:	3710      	adds	r7, #16
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}
 80150d0:	24002c30 	.word	0x24002c30
 80150d4:	e000ed04 	.word	0xe000ed04

080150d8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b084      	sub	sp, #16
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80150e0:	f000 fdb8 	bl	8015c54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d102      	bne.n	80150f0 <vTaskSuspend+0x18>
 80150ea:	4b3c      	ldr	r3, [pc, #240]	; (80151dc <vTaskSuspend+0x104>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	e000      	b.n	80150f2 <vTaskSuspend+0x1a>
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	3304      	adds	r3, #4
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7ff fde5 	bl	8014cc8 <uxListRemove>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d115      	bne.n	8015130 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015108:	4935      	ldr	r1, [pc, #212]	; (80151e0 <vTaskSuspend+0x108>)
 801510a:	4613      	mov	r3, r2
 801510c:	009b      	lsls	r3, r3, #2
 801510e:	4413      	add	r3, r2
 8015110:	009b      	lsls	r3, r3, #2
 8015112:	440b      	add	r3, r1
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d10a      	bne.n	8015130 <vTaskSuspend+0x58>
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801511e:	2201      	movs	r2, #1
 8015120:	fa02 f303 	lsl.w	r3, r2, r3
 8015124:	43da      	mvns	r2, r3
 8015126:	4b2f      	ldr	r3, [pc, #188]	; (80151e4 <vTaskSuspend+0x10c>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	4013      	ands	r3, r2
 801512c:	4a2d      	ldr	r2, [pc, #180]	; (80151e4 <vTaskSuspend+0x10c>)
 801512e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015134:	2b00      	cmp	r3, #0
 8015136:	d004      	beq.n	8015142 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	3318      	adds	r3, #24
 801513c:	4618      	mov	r0, r3
 801513e:	f7ff fdc3 	bl	8014cc8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	3304      	adds	r3, #4
 8015146:	4619      	mov	r1, r3
 8015148:	4827      	ldr	r0, [pc, #156]	; (80151e8 <vTaskSuspend+0x110>)
 801514a:	f7ff fd60 	bl	8014c0e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8015154:	b2db      	uxtb	r3, r3
 8015156:	2b01      	cmp	r3, #1
 8015158:	d103      	bne.n	8015162 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	2200      	movs	r2, #0
 801515e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8015162:	f000 fda7 	bl	8015cb4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8015166:	4b21      	ldr	r3, [pc, #132]	; (80151ec <vTaskSuspend+0x114>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d005      	beq.n	801517a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801516e:	f000 fd71 	bl	8015c54 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8015172:	f000 fbbb 	bl	80158ec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8015176:	f000 fd9d 	bl	8015cb4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801517a:	4b18      	ldr	r3, [pc, #96]	; (80151dc <vTaskSuspend+0x104>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	68fa      	ldr	r2, [r7, #12]
 8015180:	429a      	cmp	r2, r3
 8015182:	d127      	bne.n	80151d4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8015184:	4b19      	ldr	r3, [pc, #100]	; (80151ec <vTaskSuspend+0x114>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d017      	beq.n	80151bc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801518c:	4b18      	ldr	r3, [pc, #96]	; (80151f0 <vTaskSuspend+0x118>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d00a      	beq.n	80151aa <vTaskSuspend+0xd2>
	__asm volatile
 8015194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015198:	f383 8811 	msr	BASEPRI, r3
 801519c:	f3bf 8f6f 	isb	sy
 80151a0:	f3bf 8f4f 	dsb	sy
 80151a4:	60bb      	str	r3, [r7, #8]
}
 80151a6:	bf00      	nop
 80151a8:	e7fe      	b.n	80151a8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80151aa:	4b12      	ldr	r3, [pc, #72]	; (80151f4 <vTaskSuspend+0x11c>)
 80151ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80151b0:	601a      	str	r2, [r3, #0]
 80151b2:	f3bf 8f4f 	dsb	sy
 80151b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80151ba:	e00b      	b.n	80151d4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80151bc:	4b0a      	ldr	r3, [pc, #40]	; (80151e8 <vTaskSuspend+0x110>)
 80151be:	681a      	ldr	r2, [r3, #0]
 80151c0:	4b0d      	ldr	r3, [pc, #52]	; (80151f8 <vTaskSuspend+0x120>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d103      	bne.n	80151d0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80151c8:	4b04      	ldr	r3, [pc, #16]	; (80151dc <vTaskSuspend+0x104>)
 80151ca:	2200      	movs	r2, #0
 80151cc:	601a      	str	r2, [r3, #0]
	}
 80151ce:	e001      	b.n	80151d4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80151d0:	f000 fa70 	bl	80156b4 <vTaskSwitchContext>
	}
 80151d4:	bf00      	nop
 80151d6:	3710      	adds	r7, #16
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	24002b08 	.word	0x24002b08
 80151e0:	24002b0c 	.word	0x24002b0c
 80151e4:	24002c10 	.word	0x24002c10
 80151e8:	24002bf4 	.word	0x24002bf4
 80151ec:	24002c14 	.word	0x24002c14
 80151f0:	24002c30 	.word	0x24002c30
 80151f4:	e000ed04 	.word	0xe000ed04
 80151f8:	24002c08 	.word	0x24002c08

080151fc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80151fc:	b480      	push	{r7}
 80151fe:	b087      	sub	sp, #28
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8015204:	2300      	movs	r3, #0
 8015206:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d10a      	bne.n	8015228 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8015212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015216:	f383 8811 	msr	BASEPRI, r3
 801521a:	f3bf 8f6f 	isb	sy
 801521e:	f3bf 8f4f 	dsb	sy
 8015222:	60fb      	str	r3, [r7, #12]
}
 8015224:	bf00      	nop
 8015226:	e7fe      	b.n	8015226 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	695b      	ldr	r3, [r3, #20]
 801522c:	4a0a      	ldr	r2, [pc, #40]	; (8015258 <prvTaskIsTaskSuspended+0x5c>)
 801522e:	4293      	cmp	r3, r2
 8015230:	d10a      	bne.n	8015248 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8015232:	693b      	ldr	r3, [r7, #16]
 8015234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015236:	4a09      	ldr	r2, [pc, #36]	; (801525c <prvTaskIsTaskSuspended+0x60>)
 8015238:	4293      	cmp	r3, r2
 801523a:	d005      	beq.n	8015248 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015240:	2b00      	cmp	r3, #0
 8015242:	d101      	bne.n	8015248 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8015244:	2301      	movs	r3, #1
 8015246:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015248:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801524a:	4618      	mov	r0, r3
 801524c:	371c      	adds	r7, #28
 801524e:	46bd      	mov	sp, r7
 8015250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015254:	4770      	bx	lr
 8015256:	bf00      	nop
 8015258:	24002bf4 	.word	0x24002bf4
 801525c:	24002bc8 	.word	0x24002bc8

08015260 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8015260:	b580      	push	{r7, lr}
 8015262:	b084      	sub	sp, #16
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d10a      	bne.n	8015288 <vTaskResume+0x28>
	__asm volatile
 8015272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015276:	f383 8811 	msr	BASEPRI, r3
 801527a:	f3bf 8f6f 	isb	sy
 801527e:	f3bf 8f4f 	dsb	sy
 8015282:	60bb      	str	r3, [r7, #8]
}
 8015284:	bf00      	nop
 8015286:	e7fe      	b.n	8015286 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8015288:	4b20      	ldr	r3, [pc, #128]	; (801530c <vTaskResume+0xac>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	68fa      	ldr	r2, [r7, #12]
 801528e:	429a      	cmp	r2, r3
 8015290:	d037      	beq.n	8015302 <vTaskResume+0xa2>
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d034      	beq.n	8015302 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8015298:	f000 fcdc 	bl	8015c54 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801529c:	68f8      	ldr	r0, [r7, #12]
 801529e:	f7ff ffad 	bl	80151fc <prvTaskIsTaskSuspended>
 80152a2:	4603      	mov	r3, r0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d02a      	beq.n	80152fe <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	3304      	adds	r3, #4
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7ff fd0b 	bl	8014cc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152b6:	2201      	movs	r2, #1
 80152b8:	409a      	lsls	r2, r3
 80152ba:	4b15      	ldr	r3, [pc, #84]	; (8015310 <vTaskResume+0xb0>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	4313      	orrs	r3, r2
 80152c0:	4a13      	ldr	r2, [pc, #76]	; (8015310 <vTaskResume+0xb0>)
 80152c2:	6013      	str	r3, [r2, #0]
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152c8:	4613      	mov	r3, r2
 80152ca:	009b      	lsls	r3, r3, #2
 80152cc:	4413      	add	r3, r2
 80152ce:	009b      	lsls	r3, r3, #2
 80152d0:	4a10      	ldr	r2, [pc, #64]	; (8015314 <vTaskResume+0xb4>)
 80152d2:	441a      	add	r2, r3
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	3304      	adds	r3, #4
 80152d8:	4619      	mov	r1, r3
 80152da:	4610      	mov	r0, r2
 80152dc:	f7ff fc97 	bl	8014c0e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152e4:	4b09      	ldr	r3, [pc, #36]	; (801530c <vTaskResume+0xac>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d307      	bcc.n	80152fe <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80152ee:	4b0a      	ldr	r3, [pc, #40]	; (8015318 <vTaskResume+0xb8>)
 80152f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152f4:	601a      	str	r2, [r3, #0]
 80152f6:	f3bf 8f4f 	dsb	sy
 80152fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80152fe:	f000 fcd9 	bl	8015cb4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015302:	bf00      	nop
 8015304:	3710      	adds	r7, #16
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
 801530a:	bf00      	nop
 801530c:	24002b08 	.word	0x24002b08
 8015310:	24002c10 	.word	0x24002c10
 8015314:	24002b0c 	.word	0x24002b0c
 8015318:	e000ed04 	.word	0xe000ed04

0801531c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b08a      	sub	sp, #40	; 0x28
 8015320:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015322:	2300      	movs	r3, #0
 8015324:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015326:	2300      	movs	r3, #0
 8015328:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801532a:	463a      	mov	r2, r7
 801532c:	1d39      	adds	r1, r7, #4
 801532e:	f107 0308 	add.w	r3, r7, #8
 8015332:	4618      	mov	r0, r3
 8015334:	f7eb ff38 	bl	80011a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015338:	6839      	ldr	r1, [r7, #0]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	68ba      	ldr	r2, [r7, #8]
 801533e:	9202      	str	r2, [sp, #8]
 8015340:	9301      	str	r3, [sp, #4]
 8015342:	2300      	movs	r3, #0
 8015344:	9300      	str	r3, [sp, #0]
 8015346:	2300      	movs	r3, #0
 8015348:	460a      	mov	r2, r1
 801534a:	4921      	ldr	r1, [pc, #132]	; (80153d0 <vTaskStartScheduler+0xb4>)
 801534c:	4821      	ldr	r0, [pc, #132]	; (80153d4 <vTaskStartScheduler+0xb8>)
 801534e:	f7ff fce5 	bl	8014d1c <xTaskCreateStatic>
 8015352:	4603      	mov	r3, r0
 8015354:	4a20      	ldr	r2, [pc, #128]	; (80153d8 <vTaskStartScheduler+0xbc>)
 8015356:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015358:	4b1f      	ldr	r3, [pc, #124]	; (80153d8 <vTaskStartScheduler+0xbc>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d002      	beq.n	8015366 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015360:	2301      	movs	r3, #1
 8015362:	617b      	str	r3, [r7, #20]
 8015364:	e001      	b.n	801536a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015366:	2300      	movs	r3, #0
 8015368:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801536a:	697b      	ldr	r3, [r7, #20]
 801536c:	2b01      	cmp	r3, #1
 801536e:	d11b      	bne.n	80153a8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8015370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015374:	f383 8811 	msr	BASEPRI, r3
 8015378:	f3bf 8f6f 	isb	sy
 801537c:	f3bf 8f4f 	dsb	sy
 8015380:	613b      	str	r3, [r7, #16]
}
 8015382:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015384:	4b15      	ldr	r3, [pc, #84]	; (80153dc <vTaskStartScheduler+0xc0>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	334c      	adds	r3, #76	; 0x4c
 801538a:	4a15      	ldr	r2, [pc, #84]	; (80153e0 <vTaskStartScheduler+0xc4>)
 801538c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801538e:	4b15      	ldr	r3, [pc, #84]	; (80153e4 <vTaskStartScheduler+0xc8>)
 8015390:	f04f 32ff 	mov.w	r2, #4294967295
 8015394:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015396:	4b14      	ldr	r3, [pc, #80]	; (80153e8 <vTaskStartScheduler+0xcc>)
 8015398:	2201      	movs	r2, #1
 801539a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801539c:	4b13      	ldr	r3, [pc, #76]	; (80153ec <vTaskStartScheduler+0xd0>)
 801539e:	2200      	movs	r2, #0
 80153a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80153a2:	f000 fbb5 	bl	8015b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80153a6:	e00e      	b.n	80153c6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153ae:	d10a      	bne.n	80153c6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80153b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153b4:	f383 8811 	msr	BASEPRI, r3
 80153b8:	f3bf 8f6f 	isb	sy
 80153bc:	f3bf 8f4f 	dsb	sy
 80153c0:	60fb      	str	r3, [r7, #12]
}
 80153c2:	bf00      	nop
 80153c4:	e7fe      	b.n	80153c4 <vTaskStartScheduler+0xa8>
}
 80153c6:	bf00      	nop
 80153c8:	3718      	adds	r7, #24
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	bf00      	nop
 80153d0:	08018460 	.word	0x08018460
 80153d4:	08015779 	.word	0x08015779
 80153d8:	24002c2c 	.word	0x24002c2c
 80153dc:	24002b08 	.word	0x24002b08
 80153e0:	240002a8 	.word	0x240002a8
 80153e4:	24002c28 	.word	0x24002c28
 80153e8:	24002c14 	.word	0x24002c14
 80153ec:	24002c0c 	.word	0x24002c0c

080153f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80153f0:	b480      	push	{r7}
 80153f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80153f4:	4b04      	ldr	r3, [pc, #16]	; (8015408 <vTaskSuspendAll+0x18>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	3301      	adds	r3, #1
 80153fa:	4a03      	ldr	r2, [pc, #12]	; (8015408 <vTaskSuspendAll+0x18>)
 80153fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80153fe:	bf00      	nop
 8015400:	46bd      	mov	sp, r7
 8015402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015406:	4770      	bx	lr
 8015408:	24002c30 	.word	0x24002c30

0801540c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b084      	sub	sp, #16
 8015410:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015412:	2300      	movs	r3, #0
 8015414:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015416:	2300      	movs	r3, #0
 8015418:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801541a:	4b41      	ldr	r3, [pc, #260]	; (8015520 <xTaskResumeAll+0x114>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d10a      	bne.n	8015438 <xTaskResumeAll+0x2c>
	__asm volatile
 8015422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015426:	f383 8811 	msr	BASEPRI, r3
 801542a:	f3bf 8f6f 	isb	sy
 801542e:	f3bf 8f4f 	dsb	sy
 8015432:	603b      	str	r3, [r7, #0]
}
 8015434:	bf00      	nop
 8015436:	e7fe      	b.n	8015436 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015438:	f000 fc0c 	bl	8015c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801543c:	4b38      	ldr	r3, [pc, #224]	; (8015520 <xTaskResumeAll+0x114>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	3b01      	subs	r3, #1
 8015442:	4a37      	ldr	r2, [pc, #220]	; (8015520 <xTaskResumeAll+0x114>)
 8015444:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015446:	4b36      	ldr	r3, [pc, #216]	; (8015520 <xTaskResumeAll+0x114>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d161      	bne.n	8015512 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801544e:	4b35      	ldr	r3, [pc, #212]	; (8015524 <xTaskResumeAll+0x118>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d05d      	beq.n	8015512 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015456:	e02e      	b.n	80154b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015458:	4b33      	ldr	r3, [pc, #204]	; (8015528 <xTaskResumeAll+0x11c>)
 801545a:	68db      	ldr	r3, [r3, #12]
 801545c:	68db      	ldr	r3, [r3, #12]
 801545e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	3318      	adds	r3, #24
 8015464:	4618      	mov	r0, r3
 8015466:	f7ff fc2f 	bl	8014cc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	3304      	adds	r3, #4
 801546e:	4618      	mov	r0, r3
 8015470:	f7ff fc2a 	bl	8014cc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015478:	2201      	movs	r2, #1
 801547a:	409a      	lsls	r2, r3
 801547c:	4b2b      	ldr	r3, [pc, #172]	; (801552c <xTaskResumeAll+0x120>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	4313      	orrs	r3, r2
 8015482:	4a2a      	ldr	r2, [pc, #168]	; (801552c <xTaskResumeAll+0x120>)
 8015484:	6013      	str	r3, [r2, #0]
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801548a:	4613      	mov	r3, r2
 801548c:	009b      	lsls	r3, r3, #2
 801548e:	4413      	add	r3, r2
 8015490:	009b      	lsls	r3, r3, #2
 8015492:	4a27      	ldr	r2, [pc, #156]	; (8015530 <xTaskResumeAll+0x124>)
 8015494:	441a      	add	r2, r3
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	3304      	adds	r3, #4
 801549a:	4619      	mov	r1, r3
 801549c:	4610      	mov	r0, r2
 801549e:	f7ff fbb6 	bl	8014c0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154a6:	4b23      	ldr	r3, [pc, #140]	; (8015534 <xTaskResumeAll+0x128>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d302      	bcc.n	80154b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80154b0:	4b21      	ldr	r3, [pc, #132]	; (8015538 <xTaskResumeAll+0x12c>)
 80154b2:	2201      	movs	r2, #1
 80154b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80154b6:	4b1c      	ldr	r3, [pc, #112]	; (8015528 <xTaskResumeAll+0x11c>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d1cc      	bne.n	8015458 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d001      	beq.n	80154c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80154c4:	f000 fa12 	bl	80158ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80154c8:	4b1c      	ldr	r3, [pc, #112]	; (801553c <xTaskResumeAll+0x130>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d010      	beq.n	80154f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80154d4:	f000 f836 	bl	8015544 <xTaskIncrementTick>
 80154d8:	4603      	mov	r3, r0
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d002      	beq.n	80154e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80154de:	4b16      	ldr	r3, [pc, #88]	; (8015538 <xTaskResumeAll+0x12c>)
 80154e0:	2201      	movs	r2, #1
 80154e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	3b01      	subs	r3, #1
 80154e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d1f1      	bne.n	80154d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80154f0:	4b12      	ldr	r3, [pc, #72]	; (801553c <xTaskResumeAll+0x130>)
 80154f2:	2200      	movs	r2, #0
 80154f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80154f6:	4b10      	ldr	r3, [pc, #64]	; (8015538 <xTaskResumeAll+0x12c>)
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d009      	beq.n	8015512 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80154fe:	2301      	movs	r3, #1
 8015500:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015502:	4b0f      	ldr	r3, [pc, #60]	; (8015540 <xTaskResumeAll+0x134>)
 8015504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015508:	601a      	str	r2, [r3, #0]
 801550a:	f3bf 8f4f 	dsb	sy
 801550e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015512:	f000 fbcf 	bl	8015cb4 <vPortExitCritical>

	return xAlreadyYielded;
 8015516:	68bb      	ldr	r3, [r7, #8]
}
 8015518:	4618      	mov	r0, r3
 801551a:	3710      	adds	r7, #16
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	24002c30 	.word	0x24002c30
 8015524:	24002c08 	.word	0x24002c08
 8015528:	24002bc8 	.word	0x24002bc8
 801552c:	24002c10 	.word	0x24002c10
 8015530:	24002b0c 	.word	0x24002b0c
 8015534:	24002b08 	.word	0x24002b08
 8015538:	24002c1c 	.word	0x24002c1c
 801553c:	24002c18 	.word	0x24002c18
 8015540:	e000ed04 	.word	0xe000ed04

08015544 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b086      	sub	sp, #24
 8015548:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801554a:	2300      	movs	r3, #0
 801554c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801554e:	4b4e      	ldr	r3, [pc, #312]	; (8015688 <xTaskIncrementTick+0x144>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	2b00      	cmp	r3, #0
 8015554:	f040 808e 	bne.w	8015674 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015558:	4b4c      	ldr	r3, [pc, #304]	; (801568c <xTaskIncrementTick+0x148>)
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	3301      	adds	r3, #1
 801555e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015560:	4a4a      	ldr	r2, [pc, #296]	; (801568c <xTaskIncrementTick+0x148>)
 8015562:	693b      	ldr	r3, [r7, #16]
 8015564:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015566:	693b      	ldr	r3, [r7, #16]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d120      	bne.n	80155ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801556c:	4b48      	ldr	r3, [pc, #288]	; (8015690 <xTaskIncrementTick+0x14c>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d00a      	beq.n	801558c <xTaskIncrementTick+0x48>
	__asm volatile
 8015576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801557a:	f383 8811 	msr	BASEPRI, r3
 801557e:	f3bf 8f6f 	isb	sy
 8015582:	f3bf 8f4f 	dsb	sy
 8015586:	603b      	str	r3, [r7, #0]
}
 8015588:	bf00      	nop
 801558a:	e7fe      	b.n	801558a <xTaskIncrementTick+0x46>
 801558c:	4b40      	ldr	r3, [pc, #256]	; (8015690 <xTaskIncrementTick+0x14c>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	60fb      	str	r3, [r7, #12]
 8015592:	4b40      	ldr	r3, [pc, #256]	; (8015694 <xTaskIncrementTick+0x150>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	4a3e      	ldr	r2, [pc, #248]	; (8015690 <xTaskIncrementTick+0x14c>)
 8015598:	6013      	str	r3, [r2, #0]
 801559a:	4a3e      	ldr	r2, [pc, #248]	; (8015694 <xTaskIncrementTick+0x150>)
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	6013      	str	r3, [r2, #0]
 80155a0:	4b3d      	ldr	r3, [pc, #244]	; (8015698 <xTaskIncrementTick+0x154>)
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	3301      	adds	r3, #1
 80155a6:	4a3c      	ldr	r2, [pc, #240]	; (8015698 <xTaskIncrementTick+0x154>)
 80155a8:	6013      	str	r3, [r2, #0]
 80155aa:	f000 f99f 	bl	80158ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80155ae:	4b3b      	ldr	r3, [pc, #236]	; (801569c <xTaskIncrementTick+0x158>)
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	693a      	ldr	r2, [r7, #16]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d348      	bcc.n	801564a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80155b8:	4b35      	ldr	r3, [pc, #212]	; (8015690 <xTaskIncrementTick+0x14c>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d104      	bne.n	80155cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155c2:	4b36      	ldr	r3, [pc, #216]	; (801569c <xTaskIncrementTick+0x158>)
 80155c4:	f04f 32ff 	mov.w	r2, #4294967295
 80155c8:	601a      	str	r2, [r3, #0]
					break;
 80155ca:	e03e      	b.n	801564a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155cc:	4b30      	ldr	r3, [pc, #192]	; (8015690 <xTaskIncrementTick+0x14c>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	68db      	ldr	r3, [r3, #12]
 80155d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	685b      	ldr	r3, [r3, #4]
 80155da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80155dc:	693a      	ldr	r2, [r7, #16]
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d203      	bcs.n	80155ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80155e4:	4a2d      	ldr	r2, [pc, #180]	; (801569c <xTaskIncrementTick+0x158>)
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80155ea:	e02e      	b.n	801564a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	3304      	adds	r3, #4
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7ff fb69 	bl	8014cc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d004      	beq.n	8015608 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	3318      	adds	r3, #24
 8015602:	4618      	mov	r0, r3
 8015604:	f7ff fb60 	bl	8014cc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801560c:	2201      	movs	r2, #1
 801560e:	409a      	lsls	r2, r3
 8015610:	4b23      	ldr	r3, [pc, #140]	; (80156a0 <xTaskIncrementTick+0x15c>)
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	4313      	orrs	r3, r2
 8015616:	4a22      	ldr	r2, [pc, #136]	; (80156a0 <xTaskIncrementTick+0x15c>)
 8015618:	6013      	str	r3, [r2, #0]
 801561a:	68bb      	ldr	r3, [r7, #8]
 801561c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801561e:	4613      	mov	r3, r2
 8015620:	009b      	lsls	r3, r3, #2
 8015622:	4413      	add	r3, r2
 8015624:	009b      	lsls	r3, r3, #2
 8015626:	4a1f      	ldr	r2, [pc, #124]	; (80156a4 <xTaskIncrementTick+0x160>)
 8015628:	441a      	add	r2, r3
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	3304      	adds	r3, #4
 801562e:	4619      	mov	r1, r3
 8015630:	4610      	mov	r0, r2
 8015632:	f7ff faec 	bl	8014c0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801563a:	4b1b      	ldr	r3, [pc, #108]	; (80156a8 <xTaskIncrementTick+0x164>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015640:	429a      	cmp	r2, r3
 8015642:	d3b9      	bcc.n	80155b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8015644:	2301      	movs	r3, #1
 8015646:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015648:	e7b6      	b.n	80155b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801564a:	4b17      	ldr	r3, [pc, #92]	; (80156a8 <xTaskIncrementTick+0x164>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015650:	4914      	ldr	r1, [pc, #80]	; (80156a4 <xTaskIncrementTick+0x160>)
 8015652:	4613      	mov	r3, r2
 8015654:	009b      	lsls	r3, r3, #2
 8015656:	4413      	add	r3, r2
 8015658:	009b      	lsls	r3, r3, #2
 801565a:	440b      	add	r3, r1
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	2b01      	cmp	r3, #1
 8015660:	d901      	bls.n	8015666 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8015662:	2301      	movs	r3, #1
 8015664:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015666:	4b11      	ldr	r3, [pc, #68]	; (80156ac <xTaskIncrementTick+0x168>)
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d007      	beq.n	801567e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801566e:	2301      	movs	r3, #1
 8015670:	617b      	str	r3, [r7, #20]
 8015672:	e004      	b.n	801567e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015674:	4b0e      	ldr	r3, [pc, #56]	; (80156b0 <xTaskIncrementTick+0x16c>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	3301      	adds	r3, #1
 801567a:	4a0d      	ldr	r2, [pc, #52]	; (80156b0 <xTaskIncrementTick+0x16c>)
 801567c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801567e:	697b      	ldr	r3, [r7, #20]
}
 8015680:	4618      	mov	r0, r3
 8015682:	3718      	adds	r7, #24
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	24002c30 	.word	0x24002c30
 801568c:	24002c0c 	.word	0x24002c0c
 8015690:	24002bc0 	.word	0x24002bc0
 8015694:	24002bc4 	.word	0x24002bc4
 8015698:	24002c20 	.word	0x24002c20
 801569c:	24002c28 	.word	0x24002c28
 80156a0:	24002c10 	.word	0x24002c10
 80156a4:	24002b0c 	.word	0x24002b0c
 80156a8:	24002b08 	.word	0x24002b08
 80156ac:	24002c1c 	.word	0x24002c1c
 80156b0:	24002c18 	.word	0x24002c18

080156b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80156b4:	b480      	push	{r7}
 80156b6:	b087      	sub	sp, #28
 80156b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80156ba:	4b29      	ldr	r3, [pc, #164]	; (8015760 <vTaskSwitchContext+0xac>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d003      	beq.n	80156ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80156c2:	4b28      	ldr	r3, [pc, #160]	; (8015764 <vTaskSwitchContext+0xb0>)
 80156c4:	2201      	movs	r2, #1
 80156c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80156c8:	e044      	b.n	8015754 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80156ca:	4b26      	ldr	r3, [pc, #152]	; (8015764 <vTaskSwitchContext+0xb0>)
 80156cc:	2200      	movs	r2, #0
 80156ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156d0:	4b25      	ldr	r3, [pc, #148]	; (8015768 <vTaskSwitchContext+0xb4>)
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	fab3 f383 	clz	r3, r3
 80156dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80156de:	7afb      	ldrb	r3, [r7, #11]
 80156e0:	f1c3 031f 	rsb	r3, r3, #31
 80156e4:	617b      	str	r3, [r7, #20]
 80156e6:	4921      	ldr	r1, [pc, #132]	; (801576c <vTaskSwitchContext+0xb8>)
 80156e8:	697a      	ldr	r2, [r7, #20]
 80156ea:	4613      	mov	r3, r2
 80156ec:	009b      	lsls	r3, r3, #2
 80156ee:	4413      	add	r3, r2
 80156f0:	009b      	lsls	r3, r3, #2
 80156f2:	440b      	add	r3, r1
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d10a      	bne.n	8015710 <vTaskSwitchContext+0x5c>
	__asm volatile
 80156fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156fe:	f383 8811 	msr	BASEPRI, r3
 8015702:	f3bf 8f6f 	isb	sy
 8015706:	f3bf 8f4f 	dsb	sy
 801570a:	607b      	str	r3, [r7, #4]
}
 801570c:	bf00      	nop
 801570e:	e7fe      	b.n	801570e <vTaskSwitchContext+0x5a>
 8015710:	697a      	ldr	r2, [r7, #20]
 8015712:	4613      	mov	r3, r2
 8015714:	009b      	lsls	r3, r3, #2
 8015716:	4413      	add	r3, r2
 8015718:	009b      	lsls	r3, r3, #2
 801571a:	4a14      	ldr	r2, [pc, #80]	; (801576c <vTaskSwitchContext+0xb8>)
 801571c:	4413      	add	r3, r2
 801571e:	613b      	str	r3, [r7, #16]
 8015720:	693b      	ldr	r3, [r7, #16]
 8015722:	685b      	ldr	r3, [r3, #4]
 8015724:	685a      	ldr	r2, [r3, #4]
 8015726:	693b      	ldr	r3, [r7, #16]
 8015728:	605a      	str	r2, [r3, #4]
 801572a:	693b      	ldr	r3, [r7, #16]
 801572c:	685a      	ldr	r2, [r3, #4]
 801572e:	693b      	ldr	r3, [r7, #16]
 8015730:	3308      	adds	r3, #8
 8015732:	429a      	cmp	r2, r3
 8015734:	d104      	bne.n	8015740 <vTaskSwitchContext+0x8c>
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	685a      	ldr	r2, [r3, #4]
 801573c:	693b      	ldr	r3, [r7, #16]
 801573e:	605a      	str	r2, [r3, #4]
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	685b      	ldr	r3, [r3, #4]
 8015744:	68db      	ldr	r3, [r3, #12]
 8015746:	4a0a      	ldr	r2, [pc, #40]	; (8015770 <vTaskSwitchContext+0xbc>)
 8015748:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801574a:	4b09      	ldr	r3, [pc, #36]	; (8015770 <vTaskSwitchContext+0xbc>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	334c      	adds	r3, #76	; 0x4c
 8015750:	4a08      	ldr	r2, [pc, #32]	; (8015774 <vTaskSwitchContext+0xc0>)
 8015752:	6013      	str	r3, [r2, #0]
}
 8015754:	bf00      	nop
 8015756:	371c      	adds	r7, #28
 8015758:	46bd      	mov	sp, r7
 801575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575e:	4770      	bx	lr
 8015760:	24002c30 	.word	0x24002c30
 8015764:	24002c1c 	.word	0x24002c1c
 8015768:	24002c10 	.word	0x24002c10
 801576c:	24002b0c 	.word	0x24002b0c
 8015770:	24002b08 	.word	0x24002b08
 8015774:	240002a8 	.word	0x240002a8

08015778 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015780:	f000 f852 	bl	8015828 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015784:	4b06      	ldr	r3, [pc, #24]	; (80157a0 <prvIdleTask+0x28>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	2b01      	cmp	r3, #1
 801578a:	d9f9      	bls.n	8015780 <prvIdleTask+0x8>
			{
				taskYIELD();
 801578c:	4b05      	ldr	r3, [pc, #20]	; (80157a4 <prvIdleTask+0x2c>)
 801578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015792:	601a      	str	r2, [r3, #0]
 8015794:	f3bf 8f4f 	dsb	sy
 8015798:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801579c:	e7f0      	b.n	8015780 <prvIdleTask+0x8>
 801579e:	bf00      	nop
 80157a0:	24002b0c 	.word	0x24002b0c
 80157a4:	e000ed04 	.word	0xe000ed04

080157a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80157ae:	2300      	movs	r3, #0
 80157b0:	607b      	str	r3, [r7, #4]
 80157b2:	e00c      	b.n	80157ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80157b4:	687a      	ldr	r2, [r7, #4]
 80157b6:	4613      	mov	r3, r2
 80157b8:	009b      	lsls	r3, r3, #2
 80157ba:	4413      	add	r3, r2
 80157bc:	009b      	lsls	r3, r3, #2
 80157be:	4a12      	ldr	r2, [pc, #72]	; (8015808 <prvInitialiseTaskLists+0x60>)
 80157c0:	4413      	add	r3, r2
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7ff f9f6 	bl	8014bb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	3301      	adds	r3, #1
 80157cc:	607b      	str	r3, [r7, #4]
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	2b06      	cmp	r3, #6
 80157d2:	d9ef      	bls.n	80157b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80157d4:	480d      	ldr	r0, [pc, #52]	; (801580c <prvInitialiseTaskLists+0x64>)
 80157d6:	f7ff f9ed 	bl	8014bb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80157da:	480d      	ldr	r0, [pc, #52]	; (8015810 <prvInitialiseTaskLists+0x68>)
 80157dc:	f7ff f9ea 	bl	8014bb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80157e0:	480c      	ldr	r0, [pc, #48]	; (8015814 <prvInitialiseTaskLists+0x6c>)
 80157e2:	f7ff f9e7 	bl	8014bb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80157e6:	480c      	ldr	r0, [pc, #48]	; (8015818 <prvInitialiseTaskLists+0x70>)
 80157e8:	f7ff f9e4 	bl	8014bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80157ec:	480b      	ldr	r0, [pc, #44]	; (801581c <prvInitialiseTaskLists+0x74>)
 80157ee:	f7ff f9e1 	bl	8014bb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80157f2:	4b0b      	ldr	r3, [pc, #44]	; (8015820 <prvInitialiseTaskLists+0x78>)
 80157f4:	4a05      	ldr	r2, [pc, #20]	; (801580c <prvInitialiseTaskLists+0x64>)
 80157f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80157f8:	4b0a      	ldr	r3, [pc, #40]	; (8015824 <prvInitialiseTaskLists+0x7c>)
 80157fa:	4a05      	ldr	r2, [pc, #20]	; (8015810 <prvInitialiseTaskLists+0x68>)
 80157fc:	601a      	str	r2, [r3, #0]
}
 80157fe:	bf00      	nop
 8015800:	3708      	adds	r7, #8
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}
 8015806:	bf00      	nop
 8015808:	24002b0c 	.word	0x24002b0c
 801580c:	24002b98 	.word	0x24002b98
 8015810:	24002bac 	.word	0x24002bac
 8015814:	24002bc8 	.word	0x24002bc8
 8015818:	24002bdc 	.word	0x24002bdc
 801581c:	24002bf4 	.word	0x24002bf4
 8015820:	24002bc0 	.word	0x24002bc0
 8015824:	24002bc4 	.word	0x24002bc4

08015828 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801582e:	e019      	b.n	8015864 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015830:	f000 fa10 	bl	8015c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015834:	4b10      	ldr	r3, [pc, #64]	; (8015878 <prvCheckTasksWaitingTermination+0x50>)
 8015836:	68db      	ldr	r3, [r3, #12]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	3304      	adds	r3, #4
 8015840:	4618      	mov	r0, r3
 8015842:	f7ff fa41 	bl	8014cc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015846:	4b0d      	ldr	r3, [pc, #52]	; (801587c <prvCheckTasksWaitingTermination+0x54>)
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	3b01      	subs	r3, #1
 801584c:	4a0b      	ldr	r2, [pc, #44]	; (801587c <prvCheckTasksWaitingTermination+0x54>)
 801584e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015850:	4b0b      	ldr	r3, [pc, #44]	; (8015880 <prvCheckTasksWaitingTermination+0x58>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	3b01      	subs	r3, #1
 8015856:	4a0a      	ldr	r2, [pc, #40]	; (8015880 <prvCheckTasksWaitingTermination+0x58>)
 8015858:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801585a:	f000 fa2b 	bl	8015cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f000 f810 	bl	8015884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015864:	4b06      	ldr	r3, [pc, #24]	; (8015880 <prvCheckTasksWaitingTermination+0x58>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d1e1      	bne.n	8015830 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801586c:	bf00      	nop
 801586e:	bf00      	nop
 8015870:	3708      	adds	r7, #8
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}
 8015876:	bf00      	nop
 8015878:	24002bdc 	.word	0x24002bdc
 801587c:	24002c08 	.word	0x24002c08
 8015880:	24002bf0 	.word	0x24002bf0

08015884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015884:	b580      	push	{r7, lr}
 8015886:	b084      	sub	sp, #16
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	334c      	adds	r3, #76	; 0x4c
 8015890:	4618      	mov	r0, r3
 8015892:	f001 fb89 	bl	8016fa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801589c:	2b00      	cmp	r3, #0
 801589e:	d108      	bne.n	80158b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158a4:	4618      	mov	r0, r3
 80158a6:	f000 fb83 	bl	8015fb0 <vPortFree>
				vPortFree( pxTCB );
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f000 fb80 	bl	8015fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80158b0:	e018      	b.n	80158e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80158b8:	2b01      	cmp	r3, #1
 80158ba:	d103      	bne.n	80158c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80158bc:	6878      	ldr	r0, [r7, #4]
 80158be:	f000 fb77 	bl	8015fb0 <vPortFree>
	}
 80158c2:	e00f      	b.n	80158e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80158ca:	2b02      	cmp	r3, #2
 80158cc:	d00a      	beq.n	80158e4 <prvDeleteTCB+0x60>
	__asm volatile
 80158ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158d2:	f383 8811 	msr	BASEPRI, r3
 80158d6:	f3bf 8f6f 	isb	sy
 80158da:	f3bf 8f4f 	dsb	sy
 80158de:	60fb      	str	r3, [r7, #12]
}
 80158e0:	bf00      	nop
 80158e2:	e7fe      	b.n	80158e2 <prvDeleteTCB+0x5e>
	}
 80158e4:	bf00      	nop
 80158e6:	3710      	adds	r7, #16
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}

080158ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80158ec:	b480      	push	{r7}
 80158ee:	b083      	sub	sp, #12
 80158f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80158f2:	4b0c      	ldr	r3, [pc, #48]	; (8015924 <prvResetNextTaskUnblockTime+0x38>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d104      	bne.n	8015906 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80158fc:	4b0a      	ldr	r3, [pc, #40]	; (8015928 <prvResetNextTaskUnblockTime+0x3c>)
 80158fe:	f04f 32ff 	mov.w	r2, #4294967295
 8015902:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015904:	e008      	b.n	8015918 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015906:	4b07      	ldr	r3, [pc, #28]	; (8015924 <prvResetNextTaskUnblockTime+0x38>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	68db      	ldr	r3, [r3, #12]
 801590c:	68db      	ldr	r3, [r3, #12]
 801590e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	4a04      	ldr	r2, [pc, #16]	; (8015928 <prvResetNextTaskUnblockTime+0x3c>)
 8015916:	6013      	str	r3, [r2, #0]
}
 8015918:	bf00      	nop
 801591a:	370c      	adds	r7, #12
 801591c:	46bd      	mov	sp, r7
 801591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015922:	4770      	bx	lr
 8015924:	24002bc0 	.word	0x24002bc0
 8015928:	24002c28 	.word	0x24002c28

0801592c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b084      	sub	sp, #16
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015936:	4b29      	ldr	r3, [pc, #164]	; (80159dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801593c:	4b28      	ldr	r3, [pc, #160]	; (80159e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	3304      	adds	r3, #4
 8015942:	4618      	mov	r0, r3
 8015944:	f7ff f9c0 	bl	8014cc8 <uxListRemove>
 8015948:	4603      	mov	r3, r0
 801594a:	2b00      	cmp	r3, #0
 801594c:	d10b      	bne.n	8015966 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801594e:	4b24      	ldr	r3, [pc, #144]	; (80159e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015954:	2201      	movs	r2, #1
 8015956:	fa02 f303 	lsl.w	r3, r2, r3
 801595a:	43da      	mvns	r2, r3
 801595c:	4b21      	ldr	r3, [pc, #132]	; (80159e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	4013      	ands	r3, r2
 8015962:	4a20      	ldr	r2, [pc, #128]	; (80159e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015964:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f1b3 3fff 	cmp.w	r3, #4294967295
 801596c:	d10a      	bne.n	8015984 <prvAddCurrentTaskToDelayedList+0x58>
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d007      	beq.n	8015984 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015974:	4b1a      	ldr	r3, [pc, #104]	; (80159e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	3304      	adds	r3, #4
 801597a:	4619      	mov	r1, r3
 801597c:	481a      	ldr	r0, [pc, #104]	; (80159e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801597e:	f7ff f946 	bl	8014c0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015982:	e026      	b.n	80159d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015984:	68fa      	ldr	r2, [r7, #12]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	4413      	add	r3, r2
 801598a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801598c:	4b14      	ldr	r3, [pc, #80]	; (80159e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	68ba      	ldr	r2, [r7, #8]
 8015992:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015994:	68ba      	ldr	r2, [r7, #8]
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	429a      	cmp	r2, r3
 801599a:	d209      	bcs.n	80159b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801599c:	4b13      	ldr	r3, [pc, #76]	; (80159ec <prvAddCurrentTaskToDelayedList+0xc0>)
 801599e:	681a      	ldr	r2, [r3, #0]
 80159a0:	4b0f      	ldr	r3, [pc, #60]	; (80159e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	3304      	adds	r3, #4
 80159a6:	4619      	mov	r1, r3
 80159a8:	4610      	mov	r0, r2
 80159aa:	f7ff f954 	bl	8014c56 <vListInsert>
}
 80159ae:	e010      	b.n	80159d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80159b0:	4b0f      	ldr	r3, [pc, #60]	; (80159f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80159b2:	681a      	ldr	r2, [r3, #0]
 80159b4:	4b0a      	ldr	r3, [pc, #40]	; (80159e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	3304      	adds	r3, #4
 80159ba:	4619      	mov	r1, r3
 80159bc:	4610      	mov	r0, r2
 80159be:	f7ff f94a 	bl	8014c56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80159c2:	4b0c      	ldr	r3, [pc, #48]	; (80159f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	68ba      	ldr	r2, [r7, #8]
 80159c8:	429a      	cmp	r2, r3
 80159ca:	d202      	bcs.n	80159d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80159cc:	4a09      	ldr	r2, [pc, #36]	; (80159f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80159ce:	68bb      	ldr	r3, [r7, #8]
 80159d0:	6013      	str	r3, [r2, #0]
}
 80159d2:	bf00      	nop
 80159d4:	3710      	adds	r7, #16
 80159d6:	46bd      	mov	sp, r7
 80159d8:	bd80      	pop	{r7, pc}
 80159da:	bf00      	nop
 80159dc:	24002c0c 	.word	0x24002c0c
 80159e0:	24002b08 	.word	0x24002b08
 80159e4:	24002c10 	.word	0x24002c10
 80159e8:	24002bf4 	.word	0x24002bf4
 80159ec:	24002bc4 	.word	0x24002bc4
 80159f0:	24002bc0 	.word	0x24002bc0
 80159f4:	24002c28 	.word	0x24002c28

080159f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80159f8:	b480      	push	{r7}
 80159fa:	b085      	sub	sp, #20
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	60f8      	str	r0, [r7, #12]
 8015a00:	60b9      	str	r1, [r7, #8]
 8015a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	3b04      	subs	r3, #4
 8015a08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	3b04      	subs	r3, #4
 8015a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	f023 0201 	bic.w	r2, r3, #1
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	3b04      	subs	r3, #4
 8015a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015a28:	4a0c      	ldr	r2, [pc, #48]	; (8015a5c <pxPortInitialiseStack+0x64>)
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	3b14      	subs	r3, #20
 8015a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015a34:	687a      	ldr	r2, [r7, #4]
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	3b04      	subs	r3, #4
 8015a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	f06f 0202 	mvn.w	r2, #2
 8015a46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	3b20      	subs	r3, #32
 8015a4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015a4e:	68fb      	ldr	r3, [r7, #12]
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3714      	adds	r7, #20
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr
 8015a5c:	08015a61 	.word	0x08015a61

08015a60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015a60:	b480      	push	{r7}
 8015a62:	b085      	sub	sp, #20
 8015a64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015a66:	2300      	movs	r3, #0
 8015a68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015a6a:	4b12      	ldr	r3, [pc, #72]	; (8015ab4 <prvTaskExitError+0x54>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a72:	d00a      	beq.n	8015a8a <prvTaskExitError+0x2a>
	__asm volatile
 8015a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a78:	f383 8811 	msr	BASEPRI, r3
 8015a7c:	f3bf 8f6f 	isb	sy
 8015a80:	f3bf 8f4f 	dsb	sy
 8015a84:	60fb      	str	r3, [r7, #12]
}
 8015a86:	bf00      	nop
 8015a88:	e7fe      	b.n	8015a88 <prvTaskExitError+0x28>
	__asm volatile
 8015a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a8e:	f383 8811 	msr	BASEPRI, r3
 8015a92:	f3bf 8f6f 	isb	sy
 8015a96:	f3bf 8f4f 	dsb	sy
 8015a9a:	60bb      	str	r3, [r7, #8]
}
 8015a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015a9e:	bf00      	nop
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d0fc      	beq.n	8015aa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015aa6:	bf00      	nop
 8015aa8:	bf00      	nop
 8015aaa:	3714      	adds	r7, #20
 8015aac:	46bd      	mov	sp, r7
 8015aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab2:	4770      	bx	lr
 8015ab4:	24000240 	.word	0x24000240
	...

08015ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015ac0:	4b07      	ldr	r3, [pc, #28]	; (8015ae0 <pxCurrentTCBConst2>)
 8015ac2:	6819      	ldr	r1, [r3, #0]
 8015ac4:	6808      	ldr	r0, [r1, #0]
 8015ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aca:	f380 8809 	msr	PSP, r0
 8015ace:	f3bf 8f6f 	isb	sy
 8015ad2:	f04f 0000 	mov.w	r0, #0
 8015ad6:	f380 8811 	msr	BASEPRI, r0
 8015ada:	4770      	bx	lr
 8015adc:	f3af 8000 	nop.w

08015ae0 <pxCurrentTCBConst2>:
 8015ae0:	24002b08 	.word	0x24002b08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015ae4:	bf00      	nop
 8015ae6:	bf00      	nop

08015ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015ae8:	4808      	ldr	r0, [pc, #32]	; (8015b0c <prvPortStartFirstTask+0x24>)
 8015aea:	6800      	ldr	r0, [r0, #0]
 8015aec:	6800      	ldr	r0, [r0, #0]
 8015aee:	f380 8808 	msr	MSP, r0
 8015af2:	f04f 0000 	mov.w	r0, #0
 8015af6:	f380 8814 	msr	CONTROL, r0
 8015afa:	b662      	cpsie	i
 8015afc:	b661      	cpsie	f
 8015afe:	f3bf 8f4f 	dsb	sy
 8015b02:	f3bf 8f6f 	isb	sy
 8015b06:	df00      	svc	0
 8015b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015b0a:	bf00      	nop
 8015b0c:	e000ed08 	.word	0xe000ed08

08015b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015b16:	4b46      	ldr	r3, [pc, #280]	; (8015c30 <xPortStartScheduler+0x120>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	4a46      	ldr	r2, [pc, #280]	; (8015c34 <xPortStartScheduler+0x124>)
 8015b1c:	4293      	cmp	r3, r2
 8015b1e:	d10a      	bne.n	8015b36 <xPortStartScheduler+0x26>
	__asm volatile
 8015b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b24:	f383 8811 	msr	BASEPRI, r3
 8015b28:	f3bf 8f6f 	isb	sy
 8015b2c:	f3bf 8f4f 	dsb	sy
 8015b30:	613b      	str	r3, [r7, #16]
}
 8015b32:	bf00      	nop
 8015b34:	e7fe      	b.n	8015b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015b36:	4b3e      	ldr	r3, [pc, #248]	; (8015c30 <xPortStartScheduler+0x120>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	4a3f      	ldr	r2, [pc, #252]	; (8015c38 <xPortStartScheduler+0x128>)
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	d10a      	bne.n	8015b56 <xPortStartScheduler+0x46>
	__asm volatile
 8015b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b44:	f383 8811 	msr	BASEPRI, r3
 8015b48:	f3bf 8f6f 	isb	sy
 8015b4c:	f3bf 8f4f 	dsb	sy
 8015b50:	60fb      	str	r3, [r7, #12]
}
 8015b52:	bf00      	nop
 8015b54:	e7fe      	b.n	8015b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015b56:	4b39      	ldr	r3, [pc, #228]	; (8015c3c <xPortStartScheduler+0x12c>)
 8015b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	b2db      	uxtb	r3, r3
 8015b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	22ff      	movs	r2, #255	; 0xff
 8015b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	781b      	ldrb	r3, [r3, #0]
 8015b6c:	b2db      	uxtb	r3, r3
 8015b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015b70:	78fb      	ldrb	r3, [r7, #3]
 8015b72:	b2db      	uxtb	r3, r3
 8015b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015b78:	b2da      	uxtb	r2, r3
 8015b7a:	4b31      	ldr	r3, [pc, #196]	; (8015c40 <xPortStartScheduler+0x130>)
 8015b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015b7e:	4b31      	ldr	r3, [pc, #196]	; (8015c44 <xPortStartScheduler+0x134>)
 8015b80:	2207      	movs	r2, #7
 8015b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b84:	e009      	b.n	8015b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015b86:	4b2f      	ldr	r3, [pc, #188]	; (8015c44 <xPortStartScheduler+0x134>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	3b01      	subs	r3, #1
 8015b8c:	4a2d      	ldr	r2, [pc, #180]	; (8015c44 <xPortStartScheduler+0x134>)
 8015b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015b90:	78fb      	ldrb	r3, [r7, #3]
 8015b92:	b2db      	uxtb	r3, r3
 8015b94:	005b      	lsls	r3, r3, #1
 8015b96:	b2db      	uxtb	r3, r3
 8015b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b9a:	78fb      	ldrb	r3, [r7, #3]
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015ba2:	2b80      	cmp	r3, #128	; 0x80
 8015ba4:	d0ef      	beq.n	8015b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015ba6:	4b27      	ldr	r3, [pc, #156]	; (8015c44 <xPortStartScheduler+0x134>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	f1c3 0307 	rsb	r3, r3, #7
 8015bae:	2b04      	cmp	r3, #4
 8015bb0:	d00a      	beq.n	8015bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb6:	f383 8811 	msr	BASEPRI, r3
 8015bba:	f3bf 8f6f 	isb	sy
 8015bbe:	f3bf 8f4f 	dsb	sy
 8015bc2:	60bb      	str	r3, [r7, #8]
}
 8015bc4:	bf00      	nop
 8015bc6:	e7fe      	b.n	8015bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015bc8:	4b1e      	ldr	r3, [pc, #120]	; (8015c44 <xPortStartScheduler+0x134>)
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	021b      	lsls	r3, r3, #8
 8015bce:	4a1d      	ldr	r2, [pc, #116]	; (8015c44 <xPortStartScheduler+0x134>)
 8015bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015bd2:	4b1c      	ldr	r3, [pc, #112]	; (8015c44 <xPortStartScheduler+0x134>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015bda:	4a1a      	ldr	r2, [pc, #104]	; (8015c44 <xPortStartScheduler+0x134>)
 8015bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	b2da      	uxtb	r2, r3
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015be6:	4b18      	ldr	r3, [pc, #96]	; (8015c48 <xPortStartScheduler+0x138>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	4a17      	ldr	r2, [pc, #92]	; (8015c48 <xPortStartScheduler+0x138>)
 8015bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015bf2:	4b15      	ldr	r3, [pc, #84]	; (8015c48 <xPortStartScheduler+0x138>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	4a14      	ldr	r2, [pc, #80]	; (8015c48 <xPortStartScheduler+0x138>)
 8015bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015bfe:	f000 f8dd 	bl	8015dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015c02:	4b12      	ldr	r3, [pc, #72]	; (8015c4c <xPortStartScheduler+0x13c>)
 8015c04:	2200      	movs	r2, #0
 8015c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015c08:	f000 f8fc 	bl	8015e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015c0c:	4b10      	ldr	r3, [pc, #64]	; (8015c50 <xPortStartScheduler+0x140>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	4a0f      	ldr	r2, [pc, #60]	; (8015c50 <xPortStartScheduler+0x140>)
 8015c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015c18:	f7ff ff66 	bl	8015ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015c1c:	f7ff fd4a 	bl	80156b4 <vTaskSwitchContext>
	prvTaskExitError();
 8015c20:	f7ff ff1e 	bl	8015a60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015c24:	2300      	movs	r3, #0
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3718      	adds	r7, #24
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}
 8015c2e:	bf00      	nop
 8015c30:	e000ed00 	.word	0xe000ed00
 8015c34:	410fc271 	.word	0x410fc271
 8015c38:	410fc270 	.word	0x410fc270
 8015c3c:	e000e400 	.word	0xe000e400
 8015c40:	24002c34 	.word	0x24002c34
 8015c44:	24002c38 	.word	0x24002c38
 8015c48:	e000ed20 	.word	0xe000ed20
 8015c4c:	24000240 	.word	0x24000240
 8015c50:	e000ef34 	.word	0xe000ef34

08015c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015c54:	b480      	push	{r7}
 8015c56:	b083      	sub	sp, #12
 8015c58:	af00      	add	r7, sp, #0
	__asm volatile
 8015c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c5e:	f383 8811 	msr	BASEPRI, r3
 8015c62:	f3bf 8f6f 	isb	sy
 8015c66:	f3bf 8f4f 	dsb	sy
 8015c6a:	607b      	str	r3, [r7, #4]
}
 8015c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015c6e:	4b0f      	ldr	r3, [pc, #60]	; (8015cac <vPortEnterCritical+0x58>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	3301      	adds	r3, #1
 8015c74:	4a0d      	ldr	r2, [pc, #52]	; (8015cac <vPortEnterCritical+0x58>)
 8015c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015c78:	4b0c      	ldr	r3, [pc, #48]	; (8015cac <vPortEnterCritical+0x58>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	2b01      	cmp	r3, #1
 8015c7e:	d10f      	bne.n	8015ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015c80:	4b0b      	ldr	r3, [pc, #44]	; (8015cb0 <vPortEnterCritical+0x5c>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	b2db      	uxtb	r3, r3
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d00a      	beq.n	8015ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8015c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c8e:	f383 8811 	msr	BASEPRI, r3
 8015c92:	f3bf 8f6f 	isb	sy
 8015c96:	f3bf 8f4f 	dsb	sy
 8015c9a:	603b      	str	r3, [r7, #0]
}
 8015c9c:	bf00      	nop
 8015c9e:	e7fe      	b.n	8015c9e <vPortEnterCritical+0x4a>
	}
}
 8015ca0:	bf00      	nop
 8015ca2:	370c      	adds	r7, #12
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015caa:	4770      	bx	lr
 8015cac:	24000240 	.word	0x24000240
 8015cb0:	e000ed04 	.word	0xe000ed04

08015cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015cb4:	b480      	push	{r7}
 8015cb6:	b083      	sub	sp, #12
 8015cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015cba:	4b12      	ldr	r3, [pc, #72]	; (8015d04 <vPortExitCritical+0x50>)
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d10a      	bne.n	8015cd8 <vPortExitCritical+0x24>
	__asm volatile
 8015cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc6:	f383 8811 	msr	BASEPRI, r3
 8015cca:	f3bf 8f6f 	isb	sy
 8015cce:	f3bf 8f4f 	dsb	sy
 8015cd2:	607b      	str	r3, [r7, #4]
}
 8015cd4:	bf00      	nop
 8015cd6:	e7fe      	b.n	8015cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015cd8:	4b0a      	ldr	r3, [pc, #40]	; (8015d04 <vPortExitCritical+0x50>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	3b01      	subs	r3, #1
 8015cde:	4a09      	ldr	r2, [pc, #36]	; (8015d04 <vPortExitCritical+0x50>)
 8015ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015ce2:	4b08      	ldr	r3, [pc, #32]	; (8015d04 <vPortExitCritical+0x50>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d105      	bne.n	8015cf6 <vPortExitCritical+0x42>
 8015cea:	2300      	movs	r3, #0
 8015cec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015cf6:	bf00      	nop
 8015cf8:	370c      	adds	r7, #12
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d00:	4770      	bx	lr
 8015d02:	bf00      	nop
 8015d04:	24000240 	.word	0x24000240
	...

08015d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015d10:	f3ef 8009 	mrs	r0, PSP
 8015d14:	f3bf 8f6f 	isb	sy
 8015d18:	4b15      	ldr	r3, [pc, #84]	; (8015d70 <pxCurrentTCBConst>)
 8015d1a:	681a      	ldr	r2, [r3, #0]
 8015d1c:	f01e 0f10 	tst.w	lr, #16
 8015d20:	bf08      	it	eq
 8015d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d2a:	6010      	str	r0, [r2, #0]
 8015d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015d34:	f380 8811 	msr	BASEPRI, r0
 8015d38:	f3bf 8f4f 	dsb	sy
 8015d3c:	f3bf 8f6f 	isb	sy
 8015d40:	f7ff fcb8 	bl	80156b4 <vTaskSwitchContext>
 8015d44:	f04f 0000 	mov.w	r0, #0
 8015d48:	f380 8811 	msr	BASEPRI, r0
 8015d4c:	bc09      	pop	{r0, r3}
 8015d4e:	6819      	ldr	r1, [r3, #0]
 8015d50:	6808      	ldr	r0, [r1, #0]
 8015d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d56:	f01e 0f10 	tst.w	lr, #16
 8015d5a:	bf08      	it	eq
 8015d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015d60:	f380 8809 	msr	PSP, r0
 8015d64:	f3bf 8f6f 	isb	sy
 8015d68:	4770      	bx	lr
 8015d6a:	bf00      	nop
 8015d6c:	f3af 8000 	nop.w

08015d70 <pxCurrentTCBConst>:
 8015d70:	24002b08 	.word	0x24002b08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d74:	bf00      	nop
 8015d76:	bf00      	nop

08015d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b082      	sub	sp, #8
 8015d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d82:	f383 8811 	msr	BASEPRI, r3
 8015d86:	f3bf 8f6f 	isb	sy
 8015d8a:	f3bf 8f4f 	dsb	sy
 8015d8e:	607b      	str	r3, [r7, #4]
}
 8015d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015d92:	f7ff fbd7 	bl	8015544 <xTaskIncrementTick>
 8015d96:	4603      	mov	r3, r0
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d003      	beq.n	8015da4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015d9c:	4b06      	ldr	r3, [pc, #24]	; (8015db8 <SysTick_Handler+0x40>)
 8015d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015da2:	601a      	str	r2, [r3, #0]
 8015da4:	2300      	movs	r3, #0
 8015da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	f383 8811 	msr	BASEPRI, r3
}
 8015dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015db0:	bf00      	nop
 8015db2:	3708      	adds	r7, #8
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}
 8015db8:	e000ed04 	.word	0xe000ed04

08015dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015dbc:	b480      	push	{r7}
 8015dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015dc0:	4b0b      	ldr	r3, [pc, #44]	; (8015df0 <vPortSetupTimerInterrupt+0x34>)
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015dc6:	4b0b      	ldr	r3, [pc, #44]	; (8015df4 <vPortSetupTimerInterrupt+0x38>)
 8015dc8:	2200      	movs	r2, #0
 8015dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015dcc:	4b0a      	ldr	r3, [pc, #40]	; (8015df8 <vPortSetupTimerInterrupt+0x3c>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4a0a      	ldr	r2, [pc, #40]	; (8015dfc <vPortSetupTimerInterrupt+0x40>)
 8015dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8015dd6:	099b      	lsrs	r3, r3, #6
 8015dd8:	4a09      	ldr	r2, [pc, #36]	; (8015e00 <vPortSetupTimerInterrupt+0x44>)
 8015dda:	3b01      	subs	r3, #1
 8015ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015dde:	4b04      	ldr	r3, [pc, #16]	; (8015df0 <vPortSetupTimerInterrupt+0x34>)
 8015de0:	2207      	movs	r2, #7
 8015de2:	601a      	str	r2, [r3, #0]
}
 8015de4:	bf00      	nop
 8015de6:	46bd      	mov	sp, r7
 8015de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dec:	4770      	bx	lr
 8015dee:	bf00      	nop
 8015df0:	e000e010 	.word	0xe000e010
 8015df4:	e000e018 	.word	0xe000e018
 8015df8:	2400008c 	.word	0x2400008c
 8015dfc:	10624dd3 	.word	0x10624dd3
 8015e00:	e000e014 	.word	0xe000e014

08015e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015e14 <vPortEnableVFP+0x10>
 8015e08:	6801      	ldr	r1, [r0, #0]
 8015e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015e0e:	6001      	str	r1, [r0, #0]
 8015e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015e12:	bf00      	nop
 8015e14:	e000ed88 	.word	0xe000ed88

08015e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b08a      	sub	sp, #40	; 0x28
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015e20:	2300      	movs	r3, #0
 8015e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015e24:	f7ff fae4 	bl	80153f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015e28:	4b5b      	ldr	r3, [pc, #364]	; (8015f98 <pvPortMalloc+0x180>)
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d101      	bne.n	8015e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015e30:	f000 f920 	bl	8016074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015e34:	4b59      	ldr	r3, [pc, #356]	; (8015f9c <pvPortMalloc+0x184>)
 8015e36:	681a      	ldr	r2, [r3, #0]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	4013      	ands	r3, r2
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	f040 8093 	bne.w	8015f68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d01d      	beq.n	8015e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015e48:	2208      	movs	r2, #8
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	4413      	add	r3, r2
 8015e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f003 0307 	and.w	r3, r3, #7
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d014      	beq.n	8015e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	f023 0307 	bic.w	r3, r3, #7
 8015e60:	3308      	adds	r3, #8
 8015e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f003 0307 	and.w	r3, r3, #7
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d00a      	beq.n	8015e84 <pvPortMalloc+0x6c>
	__asm volatile
 8015e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e72:	f383 8811 	msr	BASEPRI, r3
 8015e76:	f3bf 8f6f 	isb	sy
 8015e7a:	f3bf 8f4f 	dsb	sy
 8015e7e:	617b      	str	r3, [r7, #20]
}
 8015e80:	bf00      	nop
 8015e82:	e7fe      	b.n	8015e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d06e      	beq.n	8015f68 <pvPortMalloc+0x150>
 8015e8a:	4b45      	ldr	r3, [pc, #276]	; (8015fa0 <pvPortMalloc+0x188>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	687a      	ldr	r2, [r7, #4]
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d869      	bhi.n	8015f68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015e94:	4b43      	ldr	r3, [pc, #268]	; (8015fa4 <pvPortMalloc+0x18c>)
 8015e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015e98:	4b42      	ldr	r3, [pc, #264]	; (8015fa4 <pvPortMalloc+0x18c>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e9e:	e004      	b.n	8015eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	687a      	ldr	r2, [r7, #4]
 8015eb0:	429a      	cmp	r2, r3
 8015eb2:	d903      	bls.n	8015ebc <pvPortMalloc+0xa4>
 8015eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d1f1      	bne.n	8015ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015ebc:	4b36      	ldr	r3, [pc, #216]	; (8015f98 <pvPortMalloc+0x180>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	d050      	beq.n	8015f68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015ec6:	6a3b      	ldr	r3, [r7, #32]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	2208      	movs	r2, #8
 8015ecc:	4413      	add	r3, r2
 8015ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed2:	681a      	ldr	r2, [r3, #0]
 8015ed4:	6a3b      	ldr	r3, [r7, #32]
 8015ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eda:	685a      	ldr	r2, [r3, #4]
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	1ad2      	subs	r2, r2, r3
 8015ee0:	2308      	movs	r3, #8
 8015ee2:	005b      	lsls	r3, r3, #1
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d91f      	bls.n	8015f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	4413      	add	r3, r2
 8015eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ef0:	69bb      	ldr	r3, [r7, #24]
 8015ef2:	f003 0307 	and.w	r3, r3, #7
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d00a      	beq.n	8015f10 <pvPortMalloc+0xf8>
	__asm volatile
 8015efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015efe:	f383 8811 	msr	BASEPRI, r3
 8015f02:	f3bf 8f6f 	isb	sy
 8015f06:	f3bf 8f4f 	dsb	sy
 8015f0a:	613b      	str	r3, [r7, #16]
}
 8015f0c:	bf00      	nop
 8015f0e:	e7fe      	b.n	8015f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f12:	685a      	ldr	r2, [r3, #4]
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	1ad2      	subs	r2, r2, r3
 8015f18:	69bb      	ldr	r3, [r7, #24]
 8015f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1e:	687a      	ldr	r2, [r7, #4]
 8015f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015f22:	69b8      	ldr	r0, [r7, #24]
 8015f24:	f000 f908 	bl	8016138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015f28:	4b1d      	ldr	r3, [pc, #116]	; (8015fa0 <pvPortMalloc+0x188>)
 8015f2a:	681a      	ldr	r2, [r3, #0]
 8015f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f2e:	685b      	ldr	r3, [r3, #4]
 8015f30:	1ad3      	subs	r3, r2, r3
 8015f32:	4a1b      	ldr	r2, [pc, #108]	; (8015fa0 <pvPortMalloc+0x188>)
 8015f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015f36:	4b1a      	ldr	r3, [pc, #104]	; (8015fa0 <pvPortMalloc+0x188>)
 8015f38:	681a      	ldr	r2, [r3, #0]
 8015f3a:	4b1b      	ldr	r3, [pc, #108]	; (8015fa8 <pvPortMalloc+0x190>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d203      	bcs.n	8015f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015f42:	4b17      	ldr	r3, [pc, #92]	; (8015fa0 <pvPortMalloc+0x188>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	4a18      	ldr	r2, [pc, #96]	; (8015fa8 <pvPortMalloc+0x190>)
 8015f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4c:	685a      	ldr	r2, [r3, #4]
 8015f4e:	4b13      	ldr	r3, [pc, #76]	; (8015f9c <pvPortMalloc+0x184>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	431a      	orrs	r2, r3
 8015f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015f5e:	4b13      	ldr	r3, [pc, #76]	; (8015fac <pvPortMalloc+0x194>)
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	3301      	adds	r3, #1
 8015f64:	4a11      	ldr	r2, [pc, #68]	; (8015fac <pvPortMalloc+0x194>)
 8015f66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015f68:	f7ff fa50 	bl	801540c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f6c:	69fb      	ldr	r3, [r7, #28]
 8015f6e:	f003 0307 	and.w	r3, r3, #7
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d00a      	beq.n	8015f8c <pvPortMalloc+0x174>
	__asm volatile
 8015f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f7a:	f383 8811 	msr	BASEPRI, r3
 8015f7e:	f3bf 8f6f 	isb	sy
 8015f82:	f3bf 8f4f 	dsb	sy
 8015f86:	60fb      	str	r3, [r7, #12]
}
 8015f88:	bf00      	nop
 8015f8a:	e7fe      	b.n	8015f8a <pvPortMalloc+0x172>
	return pvReturn;
 8015f8c:	69fb      	ldr	r3, [r7, #28]
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3728      	adds	r7, #40	; 0x28
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
 8015f96:	bf00      	nop
 8015f98:	24006844 	.word	0x24006844
 8015f9c:	24006858 	.word	0x24006858
 8015fa0:	24006848 	.word	0x24006848
 8015fa4:	2400683c 	.word	0x2400683c
 8015fa8:	2400684c 	.word	0x2400684c
 8015fac:	24006850 	.word	0x24006850

08015fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b086      	sub	sp, #24
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d04d      	beq.n	801605e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015fc2:	2308      	movs	r3, #8
 8015fc4:	425b      	negs	r3, r3
 8015fc6:	697a      	ldr	r2, [r7, #20]
 8015fc8:	4413      	add	r3, r2
 8015fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	685a      	ldr	r2, [r3, #4]
 8015fd4:	4b24      	ldr	r3, [pc, #144]	; (8016068 <vPortFree+0xb8>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	4013      	ands	r3, r2
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d10a      	bne.n	8015ff4 <vPortFree+0x44>
	__asm volatile
 8015fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe2:	f383 8811 	msr	BASEPRI, r3
 8015fe6:	f3bf 8f6f 	isb	sy
 8015fea:	f3bf 8f4f 	dsb	sy
 8015fee:	60fb      	str	r3, [r7, #12]
}
 8015ff0:	bf00      	nop
 8015ff2:	e7fe      	b.n	8015ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d00a      	beq.n	8016012 <vPortFree+0x62>
	__asm volatile
 8015ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016000:	f383 8811 	msr	BASEPRI, r3
 8016004:	f3bf 8f6f 	isb	sy
 8016008:	f3bf 8f4f 	dsb	sy
 801600c:	60bb      	str	r3, [r7, #8]
}
 801600e:	bf00      	nop
 8016010:	e7fe      	b.n	8016010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	685a      	ldr	r2, [r3, #4]
 8016016:	4b14      	ldr	r3, [pc, #80]	; (8016068 <vPortFree+0xb8>)
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	4013      	ands	r3, r2
 801601c:	2b00      	cmp	r3, #0
 801601e:	d01e      	beq.n	801605e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d11a      	bne.n	801605e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	685a      	ldr	r2, [r3, #4]
 801602c:	4b0e      	ldr	r3, [pc, #56]	; (8016068 <vPortFree+0xb8>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	43db      	mvns	r3, r3
 8016032:	401a      	ands	r2, r3
 8016034:	693b      	ldr	r3, [r7, #16]
 8016036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016038:	f7ff f9da 	bl	80153f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801603c:	693b      	ldr	r3, [r7, #16]
 801603e:	685a      	ldr	r2, [r3, #4]
 8016040:	4b0a      	ldr	r3, [pc, #40]	; (801606c <vPortFree+0xbc>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	4413      	add	r3, r2
 8016046:	4a09      	ldr	r2, [pc, #36]	; (801606c <vPortFree+0xbc>)
 8016048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801604a:	6938      	ldr	r0, [r7, #16]
 801604c:	f000 f874 	bl	8016138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016050:	4b07      	ldr	r3, [pc, #28]	; (8016070 <vPortFree+0xc0>)
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	3301      	adds	r3, #1
 8016056:	4a06      	ldr	r2, [pc, #24]	; (8016070 <vPortFree+0xc0>)
 8016058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801605a:	f7ff f9d7 	bl	801540c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801605e:	bf00      	nop
 8016060:	3718      	adds	r7, #24
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}
 8016066:	bf00      	nop
 8016068:	24006858 	.word	0x24006858
 801606c:	24006848 	.word	0x24006848
 8016070:	24006854 	.word	0x24006854

08016074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016074:	b480      	push	{r7}
 8016076:	b085      	sub	sp, #20
 8016078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801607a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801607e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016080:	4b27      	ldr	r3, [pc, #156]	; (8016120 <prvHeapInit+0xac>)
 8016082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	f003 0307 	and.w	r3, r3, #7
 801608a:	2b00      	cmp	r3, #0
 801608c:	d00c      	beq.n	80160a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	3307      	adds	r3, #7
 8016092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f023 0307 	bic.w	r3, r3, #7
 801609a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801609c:	68ba      	ldr	r2, [r7, #8]
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	1ad3      	subs	r3, r2, r3
 80160a2:	4a1f      	ldr	r2, [pc, #124]	; (8016120 <prvHeapInit+0xac>)
 80160a4:	4413      	add	r3, r2
 80160a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80160ac:	4a1d      	ldr	r2, [pc, #116]	; (8016124 <prvHeapInit+0xb0>)
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80160b2:	4b1c      	ldr	r3, [pc, #112]	; (8016124 <prvHeapInit+0xb0>)
 80160b4:	2200      	movs	r2, #0
 80160b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	68ba      	ldr	r2, [r7, #8]
 80160bc:	4413      	add	r3, r2
 80160be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80160c0:	2208      	movs	r2, #8
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	1a9b      	subs	r3, r3, r2
 80160c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	f023 0307 	bic.w	r3, r3, #7
 80160ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	4a15      	ldr	r2, [pc, #84]	; (8016128 <prvHeapInit+0xb4>)
 80160d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80160d6:	4b14      	ldr	r3, [pc, #80]	; (8016128 <prvHeapInit+0xb4>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2200      	movs	r2, #0
 80160dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80160de:	4b12      	ldr	r3, [pc, #72]	; (8016128 <prvHeapInit+0xb4>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	2200      	movs	r2, #0
 80160e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	68fa      	ldr	r2, [r7, #12]
 80160ee:	1ad2      	subs	r2, r2, r3
 80160f0:	683b      	ldr	r3, [r7, #0]
 80160f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80160f4:	4b0c      	ldr	r3, [pc, #48]	; (8016128 <prvHeapInit+0xb4>)
 80160f6:	681a      	ldr	r2, [r3, #0]
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80160fc:	683b      	ldr	r3, [r7, #0]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	4a0a      	ldr	r2, [pc, #40]	; (801612c <prvHeapInit+0xb8>)
 8016102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	685b      	ldr	r3, [r3, #4]
 8016108:	4a09      	ldr	r2, [pc, #36]	; (8016130 <prvHeapInit+0xbc>)
 801610a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801610c:	4b09      	ldr	r3, [pc, #36]	; (8016134 <prvHeapInit+0xc0>)
 801610e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016112:	601a      	str	r2, [r3, #0]
}
 8016114:	bf00      	nop
 8016116:	3714      	adds	r7, #20
 8016118:	46bd      	mov	sp, r7
 801611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611e:	4770      	bx	lr
 8016120:	24002c3c 	.word	0x24002c3c
 8016124:	2400683c 	.word	0x2400683c
 8016128:	24006844 	.word	0x24006844
 801612c:	2400684c 	.word	0x2400684c
 8016130:	24006848 	.word	0x24006848
 8016134:	24006858 	.word	0x24006858

08016138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016138:	b480      	push	{r7}
 801613a:	b085      	sub	sp, #20
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016140:	4b28      	ldr	r3, [pc, #160]	; (80161e4 <prvInsertBlockIntoFreeList+0xac>)
 8016142:	60fb      	str	r3, [r7, #12]
 8016144:	e002      	b.n	801614c <prvInsertBlockIntoFreeList+0x14>
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	60fb      	str	r3, [r7, #12]
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	687a      	ldr	r2, [r7, #4]
 8016152:	429a      	cmp	r2, r3
 8016154:	d8f7      	bhi.n	8016146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	68ba      	ldr	r2, [r7, #8]
 8016160:	4413      	add	r3, r2
 8016162:	687a      	ldr	r2, [r7, #4]
 8016164:	429a      	cmp	r2, r3
 8016166:	d108      	bne.n	801617a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	685a      	ldr	r2, [r3, #4]
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	685b      	ldr	r3, [r3, #4]
 8016170:	441a      	add	r2, r3
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	68ba      	ldr	r2, [r7, #8]
 8016184:	441a      	add	r2, r3
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	429a      	cmp	r2, r3
 801618c:	d118      	bne.n	80161c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	681a      	ldr	r2, [r3, #0]
 8016192:	4b15      	ldr	r3, [pc, #84]	; (80161e8 <prvInsertBlockIntoFreeList+0xb0>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	429a      	cmp	r2, r3
 8016198:	d00d      	beq.n	80161b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	685a      	ldr	r2, [r3, #4]
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	441a      	add	r2, r3
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	681a      	ldr	r2, [r3, #0]
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	601a      	str	r2, [r3, #0]
 80161b4:	e008      	b.n	80161c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80161b6:	4b0c      	ldr	r3, [pc, #48]	; (80161e8 <prvInsertBlockIntoFreeList+0xb0>)
 80161b8:	681a      	ldr	r2, [r3, #0]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	601a      	str	r2, [r3, #0]
 80161be:	e003      	b.n	80161c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	681a      	ldr	r2, [r3, #0]
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80161c8:	68fa      	ldr	r2, [r7, #12]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	429a      	cmp	r2, r3
 80161ce:	d002      	beq.n	80161d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80161d6:	bf00      	nop
 80161d8:	3714      	adds	r7, #20
 80161da:	46bd      	mov	sp, r7
 80161dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e0:	4770      	bx	lr
 80161e2:	bf00      	nop
 80161e4:	2400683c 	.word	0x2400683c
 80161e8:	24006844 	.word	0x24006844

080161ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80161f0:	2200      	movs	r2, #0
 80161f2:	4913      	ldr	r1, [pc, #76]	; (8016240 <MX_USB_DEVICE_Init+0x54>)
 80161f4:	4813      	ldr	r0, [pc, #76]	; (8016244 <MX_USB_DEVICE_Init+0x58>)
 80161f6:	f7fd faf5 	bl	80137e4 <USBD_Init>
 80161fa:	4603      	mov	r3, r0
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d001      	beq.n	8016204 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016200:	f7ec f9ca 	bl	8002598 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016204:	4910      	ldr	r1, [pc, #64]	; (8016248 <MX_USB_DEVICE_Init+0x5c>)
 8016206:	480f      	ldr	r0, [pc, #60]	; (8016244 <MX_USB_DEVICE_Init+0x58>)
 8016208:	f7fd fb1c 	bl	8013844 <USBD_RegisterClass>
 801620c:	4603      	mov	r3, r0
 801620e:	2b00      	cmp	r3, #0
 8016210:	d001      	beq.n	8016216 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016212:	f7ec f9c1 	bl	8002598 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016216:	490d      	ldr	r1, [pc, #52]	; (801624c <MX_USB_DEVICE_Init+0x60>)
 8016218:	480a      	ldr	r0, [pc, #40]	; (8016244 <MX_USB_DEVICE_Init+0x58>)
 801621a:	f7fd fa3d 	bl	8013698 <USBD_CDC_RegisterInterface>
 801621e:	4603      	mov	r3, r0
 8016220:	2b00      	cmp	r3, #0
 8016222:	d001      	beq.n	8016228 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016224:	f7ec f9b8 	bl	8002598 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016228:	4806      	ldr	r0, [pc, #24]	; (8016244 <MX_USB_DEVICE_Init+0x58>)
 801622a:	f7fd fb32 	bl	8013892 <USBD_Start>
 801622e:	4603      	mov	r3, r0
 8016230:	2b00      	cmp	r3, #0
 8016232:	d001      	beq.n	8016238 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016234:	f7ec f9b0 	bl	8002598 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016238:	f7f3 f9d6 	bl	80095e8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801623c:	bf00      	nop
 801623e:	bd80      	pop	{r7, pc}
 8016240:	24000258 	.word	0x24000258
 8016244:	240071b4 	.word	0x240071b4
 8016248:	2400013c 	.word	0x2400013c
 801624c:	24000244 	.word	0x24000244

08016250 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016254:	2200      	movs	r2, #0
 8016256:	4905      	ldr	r1, [pc, #20]	; (801626c <CDC_Init_FS+0x1c>)
 8016258:	4805      	ldr	r0, [pc, #20]	; (8016270 <CDC_Init_FS+0x20>)
 801625a:	f7fd fa32 	bl	80136c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801625e:	4905      	ldr	r1, [pc, #20]	; (8016274 <CDC_Init_FS+0x24>)
 8016260:	4803      	ldr	r0, [pc, #12]	; (8016270 <CDC_Init_FS+0x20>)
 8016262:	f7fd fa4c 	bl	80136fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016266:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016268:	4618      	mov	r0, r3
 801626a:	bd80      	pop	{r7, pc}
 801626c:	24007c84 	.word	0x24007c84
 8016270:	240071b4 	.word	0x240071b4
 8016274:	24007484 	.word	0x24007484

08016278 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016278:	b480      	push	{r7}
 801627a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801627c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801627e:	4618      	mov	r0, r3
 8016280:	46bd      	mov	sp, r7
 8016282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016286:	4770      	bx	lr

08016288 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016288:	b480      	push	{r7}
 801628a:	b083      	sub	sp, #12
 801628c:	af00      	add	r7, sp, #0
 801628e:	4603      	mov	r3, r0
 8016290:	6039      	str	r1, [r7, #0]
 8016292:	71fb      	strb	r3, [r7, #7]
 8016294:	4613      	mov	r3, r2
 8016296:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016298:	79fb      	ldrb	r3, [r7, #7]
 801629a:	2b23      	cmp	r3, #35	; 0x23
 801629c:	d84a      	bhi.n	8016334 <CDC_Control_FS+0xac>
 801629e:	a201      	add	r2, pc, #4	; (adr r2, 80162a4 <CDC_Control_FS+0x1c>)
 80162a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162a4:	08016335 	.word	0x08016335
 80162a8:	08016335 	.word	0x08016335
 80162ac:	08016335 	.word	0x08016335
 80162b0:	08016335 	.word	0x08016335
 80162b4:	08016335 	.word	0x08016335
 80162b8:	08016335 	.word	0x08016335
 80162bc:	08016335 	.word	0x08016335
 80162c0:	08016335 	.word	0x08016335
 80162c4:	08016335 	.word	0x08016335
 80162c8:	08016335 	.word	0x08016335
 80162cc:	08016335 	.word	0x08016335
 80162d0:	08016335 	.word	0x08016335
 80162d4:	08016335 	.word	0x08016335
 80162d8:	08016335 	.word	0x08016335
 80162dc:	08016335 	.word	0x08016335
 80162e0:	08016335 	.word	0x08016335
 80162e4:	08016335 	.word	0x08016335
 80162e8:	08016335 	.word	0x08016335
 80162ec:	08016335 	.word	0x08016335
 80162f0:	08016335 	.word	0x08016335
 80162f4:	08016335 	.word	0x08016335
 80162f8:	08016335 	.word	0x08016335
 80162fc:	08016335 	.word	0x08016335
 8016300:	08016335 	.word	0x08016335
 8016304:	08016335 	.word	0x08016335
 8016308:	08016335 	.word	0x08016335
 801630c:	08016335 	.word	0x08016335
 8016310:	08016335 	.word	0x08016335
 8016314:	08016335 	.word	0x08016335
 8016318:	08016335 	.word	0x08016335
 801631c:	08016335 	.word	0x08016335
 8016320:	08016335 	.word	0x08016335
 8016324:	08016335 	.word	0x08016335
 8016328:	08016335 	.word	0x08016335
 801632c:	08016335 	.word	0x08016335
 8016330:	08016335 	.word	0x08016335
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016334:	bf00      	nop
  }

  return (USBD_OK);
 8016336:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016338:	4618      	mov	r0, r3
 801633a:	370c      	adds	r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr

08016344 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b082      	sub	sp, #8
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801634e:	6879      	ldr	r1, [r7, #4]
 8016350:	4805      	ldr	r0, [pc, #20]	; (8016368 <CDC_Receive_FS+0x24>)
 8016352:	f7fd f9d4 	bl	80136fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016356:	4804      	ldr	r0, [pc, #16]	; (8016368 <CDC_Receive_FS+0x24>)
 8016358:	f7fd fa1a 	bl	8013790 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801635c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801635e:	4618      	mov	r0, r3
 8016360:	3708      	adds	r7, #8
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
 8016366:	bf00      	nop
 8016368:	240071b4 	.word	0x240071b4

0801636c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b084      	sub	sp, #16
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	460b      	mov	r3, r1
 8016376:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016378:	2300      	movs	r3, #0
 801637a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801637c:	4b0d      	ldr	r3, [pc, #52]	; (80163b4 <CDC_Transmit_FS+0x48>)
 801637e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016382:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801638a:	2b00      	cmp	r3, #0
 801638c:	d001      	beq.n	8016392 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801638e:	2301      	movs	r3, #1
 8016390:	e00b      	b.n	80163aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016392:	887b      	ldrh	r3, [r7, #2]
 8016394:	461a      	mov	r2, r3
 8016396:	6879      	ldr	r1, [r7, #4]
 8016398:	4806      	ldr	r0, [pc, #24]	; (80163b4 <CDC_Transmit_FS+0x48>)
 801639a:	f7fd f992 	bl	80136c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801639e:	4805      	ldr	r0, [pc, #20]	; (80163b4 <CDC_Transmit_FS+0x48>)
 80163a0:	f7fd f9c6 	bl	8013730 <USBD_CDC_TransmitPacket>
 80163a4:	4603      	mov	r3, r0
 80163a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80163a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3710      	adds	r7, #16
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	240071b4 	.word	0x240071b4

080163b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80163b8:	b480      	push	{r7}
 80163ba:	b087      	sub	sp, #28
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	4613      	mov	r3, r2
 80163c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80163c6:	2300      	movs	r3, #0
 80163c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80163ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80163ce:	4618      	mov	r0, r3
 80163d0:	371c      	adds	r7, #28
 80163d2:	46bd      	mov	sp, r7
 80163d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d8:	4770      	bx	lr
	...

080163dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163dc:	b480      	push	{r7}
 80163de:	b083      	sub	sp, #12
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	4603      	mov	r3, r0
 80163e4:	6039      	str	r1, [r7, #0]
 80163e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	2212      	movs	r2, #18
 80163ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80163ee:	4b03      	ldr	r3, [pc, #12]	; (80163fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80163f0:	4618      	mov	r0, r3
 80163f2:	370c      	adds	r7, #12
 80163f4:	46bd      	mov	sp, r7
 80163f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fa:	4770      	bx	lr
 80163fc:	24000274 	.word	0x24000274

08016400 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016400:	b480      	push	{r7}
 8016402:	b083      	sub	sp, #12
 8016404:	af00      	add	r7, sp, #0
 8016406:	4603      	mov	r3, r0
 8016408:	6039      	str	r1, [r7, #0]
 801640a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	2204      	movs	r2, #4
 8016410:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016412:	4b03      	ldr	r3, [pc, #12]	; (8016420 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016414:	4618      	mov	r0, r3
 8016416:	370c      	adds	r7, #12
 8016418:	46bd      	mov	sp, r7
 801641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641e:	4770      	bx	lr
 8016420:	24000288 	.word	0x24000288

08016424 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b082      	sub	sp, #8
 8016428:	af00      	add	r7, sp, #0
 801642a:	4603      	mov	r3, r0
 801642c:	6039      	str	r1, [r7, #0]
 801642e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016430:	79fb      	ldrb	r3, [r7, #7]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d105      	bne.n	8016442 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016436:	683a      	ldr	r2, [r7, #0]
 8016438:	4907      	ldr	r1, [pc, #28]	; (8016458 <USBD_FS_ProductStrDescriptor+0x34>)
 801643a:	4808      	ldr	r0, [pc, #32]	; (801645c <USBD_FS_ProductStrDescriptor+0x38>)
 801643c:	f7fe fa5b 	bl	80148f6 <USBD_GetString>
 8016440:	e004      	b.n	801644c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016442:	683a      	ldr	r2, [r7, #0]
 8016444:	4904      	ldr	r1, [pc, #16]	; (8016458 <USBD_FS_ProductStrDescriptor+0x34>)
 8016446:	4805      	ldr	r0, [pc, #20]	; (801645c <USBD_FS_ProductStrDescriptor+0x38>)
 8016448:	f7fe fa55 	bl	80148f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 801644c:	4b02      	ldr	r3, [pc, #8]	; (8016458 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801644e:	4618      	mov	r0, r3
 8016450:	3708      	adds	r7, #8
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}
 8016456:	bf00      	nop
 8016458:	24008484 	.word	0x24008484
 801645c:	08018468 	.word	0x08018468

08016460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b082      	sub	sp, #8
 8016464:	af00      	add	r7, sp, #0
 8016466:	4603      	mov	r3, r0
 8016468:	6039      	str	r1, [r7, #0]
 801646a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801646c:	683a      	ldr	r2, [r7, #0]
 801646e:	4904      	ldr	r1, [pc, #16]	; (8016480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016470:	4804      	ldr	r0, [pc, #16]	; (8016484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016472:	f7fe fa40 	bl	80148f6 <USBD_GetString>
  return USBD_StrDesc;
 8016476:	4b02      	ldr	r3, [pc, #8]	; (8016480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016478:	4618      	mov	r0, r3
 801647a:	3708      	adds	r7, #8
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}
 8016480:	24008484 	.word	0x24008484
 8016484:	08018480 	.word	0x08018480

08016488 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b082      	sub	sp, #8
 801648c:	af00      	add	r7, sp, #0
 801648e:	4603      	mov	r3, r0
 8016490:	6039      	str	r1, [r7, #0]
 8016492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	221a      	movs	r2, #26
 8016498:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801649a:	f000 f843 	bl	8016524 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801649e:	4b02      	ldr	r3, [pc, #8]	; (80164a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3708      	adds	r7, #8
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}
 80164a8:	2400028c 	.word	0x2400028c

080164ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b082      	sub	sp, #8
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	4603      	mov	r3, r0
 80164b4:	6039      	str	r1, [r7, #0]
 80164b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80164b8:	79fb      	ldrb	r3, [r7, #7]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d105      	bne.n	80164ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80164be:	683a      	ldr	r2, [r7, #0]
 80164c0:	4907      	ldr	r1, [pc, #28]	; (80164e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80164c2:	4808      	ldr	r0, [pc, #32]	; (80164e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80164c4:	f7fe fa17 	bl	80148f6 <USBD_GetString>
 80164c8:	e004      	b.n	80164d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80164ca:	683a      	ldr	r2, [r7, #0]
 80164cc:	4904      	ldr	r1, [pc, #16]	; (80164e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80164ce:	4805      	ldr	r0, [pc, #20]	; (80164e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80164d0:	f7fe fa11 	bl	80148f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80164d4:	4b02      	ldr	r3, [pc, #8]	; (80164e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3708      	adds	r7, #8
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}
 80164de:	bf00      	nop
 80164e0:	24008484 	.word	0x24008484
 80164e4:	08018494 	.word	0x08018494

080164e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b082      	sub	sp, #8
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	4603      	mov	r3, r0
 80164f0:	6039      	str	r1, [r7, #0]
 80164f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80164f4:	79fb      	ldrb	r3, [r7, #7]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d105      	bne.n	8016506 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80164fa:	683a      	ldr	r2, [r7, #0]
 80164fc:	4907      	ldr	r1, [pc, #28]	; (801651c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80164fe:	4808      	ldr	r0, [pc, #32]	; (8016520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016500:	f7fe f9f9 	bl	80148f6 <USBD_GetString>
 8016504:	e004      	b.n	8016510 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016506:	683a      	ldr	r2, [r7, #0]
 8016508:	4904      	ldr	r1, [pc, #16]	; (801651c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801650a:	4805      	ldr	r0, [pc, #20]	; (8016520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801650c:	f7fe f9f3 	bl	80148f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016510:	4b02      	ldr	r3, [pc, #8]	; (801651c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016512:	4618      	mov	r0, r3
 8016514:	3708      	adds	r7, #8
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}
 801651a:	bf00      	nop
 801651c:	24008484 	.word	0x24008484
 8016520:	080184a0 	.word	0x080184a0

08016524 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b084      	sub	sp, #16
 8016528:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801652a:	4b0f      	ldr	r3, [pc, #60]	; (8016568 <Get_SerialNum+0x44>)
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016530:	4b0e      	ldr	r3, [pc, #56]	; (801656c <Get_SerialNum+0x48>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016536:	4b0e      	ldr	r3, [pc, #56]	; (8016570 <Get_SerialNum+0x4c>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801653c:	68fa      	ldr	r2, [r7, #12]
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	4413      	add	r3, r2
 8016542:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d009      	beq.n	801655e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801654a:	2208      	movs	r2, #8
 801654c:	4909      	ldr	r1, [pc, #36]	; (8016574 <Get_SerialNum+0x50>)
 801654e:	68f8      	ldr	r0, [r7, #12]
 8016550:	f000 f814 	bl	801657c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016554:	2204      	movs	r2, #4
 8016556:	4908      	ldr	r1, [pc, #32]	; (8016578 <Get_SerialNum+0x54>)
 8016558:	68b8      	ldr	r0, [r7, #8]
 801655a:	f000 f80f 	bl	801657c <IntToUnicode>
  }
}
 801655e:	bf00      	nop
 8016560:	3710      	adds	r7, #16
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}
 8016566:	bf00      	nop
 8016568:	1ff1e800 	.word	0x1ff1e800
 801656c:	1ff1e804 	.word	0x1ff1e804
 8016570:	1ff1e808 	.word	0x1ff1e808
 8016574:	2400028e 	.word	0x2400028e
 8016578:	2400029e 	.word	0x2400029e

0801657c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801657c:	b480      	push	{r7}
 801657e:	b087      	sub	sp, #28
 8016580:	af00      	add	r7, sp, #0
 8016582:	60f8      	str	r0, [r7, #12]
 8016584:	60b9      	str	r1, [r7, #8]
 8016586:	4613      	mov	r3, r2
 8016588:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801658a:	2300      	movs	r3, #0
 801658c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801658e:	2300      	movs	r3, #0
 8016590:	75fb      	strb	r3, [r7, #23]
 8016592:	e027      	b.n	80165e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	0f1b      	lsrs	r3, r3, #28
 8016598:	2b09      	cmp	r3, #9
 801659a:	d80b      	bhi.n	80165b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	0f1b      	lsrs	r3, r3, #28
 80165a0:	b2da      	uxtb	r2, r3
 80165a2:	7dfb      	ldrb	r3, [r7, #23]
 80165a4:	005b      	lsls	r3, r3, #1
 80165a6:	4619      	mov	r1, r3
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	440b      	add	r3, r1
 80165ac:	3230      	adds	r2, #48	; 0x30
 80165ae:	b2d2      	uxtb	r2, r2
 80165b0:	701a      	strb	r2, [r3, #0]
 80165b2:	e00a      	b.n	80165ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	0f1b      	lsrs	r3, r3, #28
 80165b8:	b2da      	uxtb	r2, r3
 80165ba:	7dfb      	ldrb	r3, [r7, #23]
 80165bc:	005b      	lsls	r3, r3, #1
 80165be:	4619      	mov	r1, r3
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	440b      	add	r3, r1
 80165c4:	3237      	adds	r2, #55	; 0x37
 80165c6:	b2d2      	uxtb	r2, r2
 80165c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	011b      	lsls	r3, r3, #4
 80165ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80165d0:	7dfb      	ldrb	r3, [r7, #23]
 80165d2:	005b      	lsls	r3, r3, #1
 80165d4:	3301      	adds	r3, #1
 80165d6:	68ba      	ldr	r2, [r7, #8]
 80165d8:	4413      	add	r3, r2
 80165da:	2200      	movs	r2, #0
 80165dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80165de:	7dfb      	ldrb	r3, [r7, #23]
 80165e0:	3301      	adds	r3, #1
 80165e2:	75fb      	strb	r3, [r7, #23]
 80165e4:	7dfa      	ldrb	r2, [r7, #23]
 80165e6:	79fb      	ldrb	r3, [r7, #7]
 80165e8:	429a      	cmp	r2, r3
 80165ea:	d3d3      	bcc.n	8016594 <IntToUnicode+0x18>
  }
}
 80165ec:	bf00      	nop
 80165ee:	bf00      	nop
 80165f0:	371c      	adds	r7, #28
 80165f2:	46bd      	mov	sp, r7
 80165f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f8:	4770      	bx	lr
	...

080165fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b08a      	sub	sp, #40	; 0x28
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016604:	f107 0314 	add.w	r3, r7, #20
 8016608:	2200      	movs	r2, #0
 801660a:	601a      	str	r2, [r3, #0]
 801660c:	605a      	str	r2, [r3, #4]
 801660e:	609a      	str	r2, [r3, #8]
 8016610:	60da      	str	r2, [r3, #12]
 8016612:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	4a1f      	ldr	r2, [pc, #124]	; (8016698 <HAL_PCD_MspInit+0x9c>)
 801661a:	4293      	cmp	r3, r2
 801661c:	d138      	bne.n	8016690 <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801661e:	f7f2 ffe3 	bl	80095e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016622:	4b1e      	ldr	r3, [pc, #120]	; (801669c <HAL_PCD_MspInit+0xa0>)
 8016624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016628:	4a1c      	ldr	r2, [pc, #112]	; (801669c <HAL_PCD_MspInit+0xa0>)
 801662a:	f043 0301 	orr.w	r3, r3, #1
 801662e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8016632:	4b1a      	ldr	r3, [pc, #104]	; (801669c <HAL_PCD_MspInit+0xa0>)
 8016634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016638:	f003 0301 	and.w	r3, r3, #1
 801663c:	613b      	str	r3, [r7, #16]
 801663e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016640:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016646:	2302      	movs	r3, #2
 8016648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801664a:	2300      	movs	r3, #0
 801664c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801664e:	2300      	movs	r3, #0
 8016650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8016652:	230a      	movs	r3, #10
 8016654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016656:	f107 0314 	add.w	r3, r7, #20
 801665a:	4619      	mov	r1, r3
 801665c:	4810      	ldr	r0, [pc, #64]	; (80166a0 <HAL_PCD_MspInit+0xa4>)
 801665e:	f7f1 fb7d 	bl	8007d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016662:	4b0e      	ldr	r3, [pc, #56]	; (801669c <HAL_PCD_MspInit+0xa0>)
 8016664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016668:	4a0c      	ldr	r2, [pc, #48]	; (801669c <HAL_PCD_MspInit+0xa0>)
 801666a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801666e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016672:	4b0a      	ldr	r3, [pc, #40]	; (801669c <HAL_PCD_MspInit+0xa0>)
 8016674:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801667c:	60fb      	str	r3, [r7, #12]
 801667e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016680:	2200      	movs	r2, #0
 8016682:	2105      	movs	r1, #5
 8016684:	2065      	movs	r0, #101	; 0x65
 8016686:	f7f0 fc8d 	bl	8006fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801668a:	2065      	movs	r0, #101	; 0x65
 801668c:	f7f0 fca4 	bl	8006fd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016690:	bf00      	nop
 8016692:	3728      	adds	r7, #40	; 0x28
 8016694:	46bd      	mov	sp, r7
 8016696:	bd80      	pop	{r7, pc}
 8016698:	40080000 	.word	0x40080000
 801669c:	58024400 	.word	0x58024400
 80166a0:	58020000 	.word	0x58020000

080166a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b082      	sub	sp, #8
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80166b8:	4619      	mov	r1, r3
 80166ba:	4610      	mov	r0, r2
 80166bc:	f7fd f934 	bl	8013928 <USBD_LL_SetupStage>
}
 80166c0:	bf00      	nop
 80166c2:	3708      	adds	r7, #8
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}

080166c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
 80166d0:	460b      	mov	r3, r1
 80166d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80166da:	78fa      	ldrb	r2, [r7, #3]
 80166dc:	6879      	ldr	r1, [r7, #4]
 80166de:	4613      	mov	r3, r2
 80166e0:	00db      	lsls	r3, r3, #3
 80166e2:	1a9b      	subs	r3, r3, r2
 80166e4:	009b      	lsls	r3, r3, #2
 80166e6:	440b      	add	r3, r1
 80166e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80166ec:	681a      	ldr	r2, [r3, #0]
 80166ee:	78fb      	ldrb	r3, [r7, #3]
 80166f0:	4619      	mov	r1, r3
 80166f2:	f7fd f96e 	bl	80139d2 <USBD_LL_DataOutStage>
}
 80166f6:	bf00      	nop
 80166f8:	3708      	adds	r7, #8
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}

080166fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166fe:	b580      	push	{r7, lr}
 8016700:	b082      	sub	sp, #8
 8016702:	af00      	add	r7, sp, #0
 8016704:	6078      	str	r0, [r7, #4]
 8016706:	460b      	mov	r3, r1
 8016708:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016710:	78fa      	ldrb	r2, [r7, #3]
 8016712:	6879      	ldr	r1, [r7, #4]
 8016714:	4613      	mov	r3, r2
 8016716:	00db      	lsls	r3, r3, #3
 8016718:	1a9b      	subs	r3, r3, r2
 801671a:	009b      	lsls	r3, r3, #2
 801671c:	440b      	add	r3, r1
 801671e:	3348      	adds	r3, #72	; 0x48
 8016720:	681a      	ldr	r2, [r3, #0]
 8016722:	78fb      	ldrb	r3, [r7, #3]
 8016724:	4619      	mov	r1, r3
 8016726:	f7fd f9b7 	bl	8013a98 <USBD_LL_DataInStage>
}
 801672a:	bf00      	nop
 801672c:	3708      	adds	r7, #8
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}

08016732 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016732:	b580      	push	{r7, lr}
 8016734:	b082      	sub	sp, #8
 8016736:	af00      	add	r7, sp, #0
 8016738:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016740:	4618      	mov	r0, r3
 8016742:	f7fd facb 	bl	8013cdc <USBD_LL_SOF>
}
 8016746:	bf00      	nop
 8016748:	3708      	adds	r7, #8
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}

0801674e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801674e:	b580      	push	{r7, lr}
 8016750:	b084      	sub	sp, #16
 8016752:	af00      	add	r7, sp, #0
 8016754:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016756:	2301      	movs	r3, #1
 8016758:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	68db      	ldr	r3, [r3, #12]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d102      	bne.n	8016768 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016762:	2300      	movs	r3, #0
 8016764:	73fb      	strb	r3, [r7, #15]
 8016766:	e008      	b.n	801677a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	68db      	ldr	r3, [r3, #12]
 801676c:	2b02      	cmp	r3, #2
 801676e:	d102      	bne.n	8016776 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016770:	2301      	movs	r3, #1
 8016772:	73fb      	strb	r3, [r7, #15]
 8016774:	e001      	b.n	801677a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016776:	f7eb ff0f 	bl	8002598 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016780:	7bfa      	ldrb	r2, [r7, #15]
 8016782:	4611      	mov	r1, r2
 8016784:	4618      	mov	r0, r3
 8016786:	f7fd fa6b 	bl	8013c60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016790:	4618      	mov	r0, r3
 8016792:	f7fd fa17 	bl	8013bc4 <USBD_LL_Reset>
}
 8016796:	bf00      	nop
 8016798:	3710      	adds	r7, #16
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}
	...

080167a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b082      	sub	sp, #8
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80167ae:	4618      	mov	r0, r3
 80167b0:	f7fd fa66 	bl	8013c80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	687a      	ldr	r2, [r7, #4]
 80167c0:	6812      	ldr	r2, [r2, #0]
 80167c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80167c6:	f043 0301 	orr.w	r3, r3, #1
 80167ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	6a1b      	ldr	r3, [r3, #32]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d005      	beq.n	80167e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80167d4:	4b04      	ldr	r3, [pc, #16]	; (80167e8 <HAL_PCD_SuspendCallback+0x48>)
 80167d6:	691b      	ldr	r3, [r3, #16]
 80167d8:	4a03      	ldr	r2, [pc, #12]	; (80167e8 <HAL_PCD_SuspendCallback+0x48>)
 80167da:	f043 0306 	orr.w	r3, r3, #6
 80167de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80167e0:	bf00      	nop
 80167e2:	3708      	adds	r7, #8
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	e000ed00 	.word	0xe000ed00

080167ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b082      	sub	sp, #8
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80167fa:	4618      	mov	r0, r3
 80167fc:	f7fd fa56 	bl	8013cac <USBD_LL_Resume>
}
 8016800:	bf00      	nop
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}

08016808 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	460b      	mov	r3, r1
 8016812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801681a:	78fa      	ldrb	r2, [r7, #3]
 801681c:	4611      	mov	r1, r2
 801681e:	4618      	mov	r0, r3
 8016820:	f7fd faa4 	bl	8013d6c <USBD_LL_IsoOUTIncomplete>
}
 8016824:	bf00      	nop
 8016826:	3708      	adds	r7, #8
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}

0801682c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	460b      	mov	r3, r1
 8016836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801683e:	78fa      	ldrb	r2, [r7, #3]
 8016840:	4611      	mov	r1, r2
 8016842:	4618      	mov	r0, r3
 8016844:	f7fd fa6c 	bl	8013d20 <USBD_LL_IsoINIncomplete>
}
 8016848:	bf00      	nop
 801684a:	3708      	adds	r7, #8
 801684c:	46bd      	mov	sp, r7
 801684e:	bd80      	pop	{r7, pc}

08016850 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801685e:	4618      	mov	r0, r3
 8016860:	f7fd faaa 	bl	8013db8 <USBD_LL_DevConnected>
}
 8016864:	bf00      	nop
 8016866:	3708      	adds	r7, #8
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}

0801686c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801687a:	4618      	mov	r0, r3
 801687c:	f7fd faa7 	bl	8013dce <USBD_LL_DevDisconnected>
}
 8016880:	bf00      	nop
 8016882:	3708      	adds	r7, #8
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}

08016888 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b082      	sub	sp, #8
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	781b      	ldrb	r3, [r3, #0]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d13e      	bne.n	8016916 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016898:	4a21      	ldr	r2, [pc, #132]	; (8016920 <USBD_LL_Init+0x98>)
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	4a1f      	ldr	r2, [pc, #124]	; (8016920 <USBD_LL_Init+0x98>)
 80168a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80168a8:	4b1d      	ldr	r3, [pc, #116]	; (8016920 <USBD_LL_Init+0x98>)
 80168aa:	4a1e      	ldr	r2, [pc, #120]	; (8016924 <USBD_LL_Init+0x9c>)
 80168ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80168ae:	4b1c      	ldr	r3, [pc, #112]	; (8016920 <USBD_LL_Init+0x98>)
 80168b0:	2209      	movs	r2, #9
 80168b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80168b4:	4b1a      	ldr	r3, [pc, #104]	; (8016920 <USBD_LL_Init+0x98>)
 80168b6:	2202      	movs	r2, #2
 80168b8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 80168ba:	4b19      	ldr	r3, [pc, #100]	; (8016920 <USBD_LL_Init+0x98>)
 80168bc:	2201      	movs	r2, #1
 80168be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80168c0:	4b17      	ldr	r3, [pc, #92]	; (8016920 <USBD_LL_Init+0x98>)
 80168c2:	2202      	movs	r2, #2
 80168c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80168c6:	4b16      	ldr	r3, [pc, #88]	; (8016920 <USBD_LL_Init+0x98>)
 80168c8:	2200      	movs	r2, #0
 80168ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80168cc:	4b14      	ldr	r3, [pc, #80]	; (8016920 <USBD_LL_Init+0x98>)
 80168ce:	2200      	movs	r2, #0
 80168d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80168d2:	4b13      	ldr	r3, [pc, #76]	; (8016920 <USBD_LL_Init+0x98>)
 80168d4:	2200      	movs	r2, #0
 80168d6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80168d8:	4b11      	ldr	r3, [pc, #68]	; (8016920 <USBD_LL_Init+0x98>)
 80168da:	2200      	movs	r2, #0
 80168dc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80168de:	4b10      	ldr	r3, [pc, #64]	; (8016920 <USBD_LL_Init+0x98>)
 80168e0:	2200      	movs	r2, #0
 80168e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80168e4:	4b0e      	ldr	r3, [pc, #56]	; (8016920 <USBD_LL_Init+0x98>)
 80168e6:	2200      	movs	r2, #0
 80168e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80168ea:	480d      	ldr	r0, [pc, #52]	; (8016920 <USBD_LL_Init+0x98>)
 80168ec:	f7f1 fc56 	bl	800819c <HAL_PCD_Init>
 80168f0:	4603      	mov	r3, r0
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d001      	beq.n	80168fa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80168f6:	f7eb fe4f 	bl	8002598 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80168fa:	2180      	movs	r1, #128	; 0x80
 80168fc:	4808      	ldr	r0, [pc, #32]	; (8016920 <USBD_LL_Init+0x98>)
 80168fe:	f7f2 fde8 	bl	80094d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016902:	2240      	movs	r2, #64	; 0x40
 8016904:	2100      	movs	r1, #0
 8016906:	4806      	ldr	r0, [pc, #24]	; (8016920 <USBD_LL_Init+0x98>)
 8016908:	f7f2 fd9c 	bl	8009444 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801690c:	2280      	movs	r2, #128	; 0x80
 801690e:	2101      	movs	r1, #1
 8016910:	4803      	ldr	r0, [pc, #12]	; (8016920 <USBD_LL_Init+0x98>)
 8016912:	f7f2 fd97 	bl	8009444 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8016916:	2300      	movs	r3, #0
}
 8016918:	4618      	mov	r0, r3
 801691a:	3708      	adds	r7, #8
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}
 8016920:	24008684 	.word	0x24008684
 8016924:	40080000 	.word	0x40080000

08016928 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b084      	sub	sp, #16
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016930:	2300      	movs	r3, #0
 8016932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016934:	2300      	movs	r3, #0
 8016936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801693e:	4618      	mov	r0, r3
 8016940:	f7f1 fd50 	bl	80083e4 <HAL_PCD_Start>
 8016944:	4603      	mov	r3, r0
 8016946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016948:	7bfb      	ldrb	r3, [r7, #15]
 801694a:	4618      	mov	r0, r3
 801694c:	f000 f942 	bl	8016bd4 <USBD_Get_USB_Status>
 8016950:	4603      	mov	r3, r0
 8016952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016954:	7bbb      	ldrb	r3, [r7, #14]
}
 8016956:	4618      	mov	r0, r3
 8016958:	3710      	adds	r7, #16
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}

0801695e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801695e:	b580      	push	{r7, lr}
 8016960:	b084      	sub	sp, #16
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
 8016966:	4608      	mov	r0, r1
 8016968:	4611      	mov	r1, r2
 801696a:	461a      	mov	r2, r3
 801696c:	4603      	mov	r3, r0
 801696e:	70fb      	strb	r3, [r7, #3]
 8016970:	460b      	mov	r3, r1
 8016972:	70bb      	strb	r3, [r7, #2]
 8016974:	4613      	mov	r3, r2
 8016976:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016978:	2300      	movs	r3, #0
 801697a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801697c:	2300      	movs	r3, #0
 801697e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016986:	78bb      	ldrb	r3, [r7, #2]
 8016988:	883a      	ldrh	r2, [r7, #0]
 801698a:	78f9      	ldrb	r1, [r7, #3]
 801698c:	f7f2 f961 	bl	8008c52 <HAL_PCD_EP_Open>
 8016990:	4603      	mov	r3, r0
 8016992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016994:	7bfb      	ldrb	r3, [r7, #15]
 8016996:	4618      	mov	r0, r3
 8016998:	f000 f91c 	bl	8016bd4 <USBD_Get_USB_Status>
 801699c:	4603      	mov	r3, r0
 801699e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	3710      	adds	r7, #16
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}

080169aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169aa:	b580      	push	{r7, lr}
 80169ac:	b084      	sub	sp, #16
 80169ae:	af00      	add	r7, sp, #0
 80169b0:	6078      	str	r0, [r7, #4]
 80169b2:	460b      	mov	r3, r1
 80169b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169b6:	2300      	movs	r3, #0
 80169b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169ba:	2300      	movs	r3, #0
 80169bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80169c4:	78fa      	ldrb	r2, [r7, #3]
 80169c6:	4611      	mov	r1, r2
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7f2 f9aa 	bl	8008d22 <HAL_PCD_EP_Close>
 80169ce:	4603      	mov	r3, r0
 80169d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169d2:	7bfb      	ldrb	r3, [r7, #15]
 80169d4:	4618      	mov	r0, r3
 80169d6:	f000 f8fd 	bl	8016bd4 <USBD_Get_USB_Status>
 80169da:	4603      	mov	r3, r0
 80169dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169de:	7bbb      	ldrb	r3, [r7, #14]
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	3710      	adds	r7, #16
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}

080169e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b084      	sub	sp, #16
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	460b      	mov	r3, r1
 80169f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169f4:	2300      	movs	r3, #0
 80169f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169f8:	2300      	movs	r3, #0
 80169fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a02:	78fa      	ldrb	r2, [r7, #3]
 8016a04:	4611      	mov	r1, r2
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7f2 fa82 	bl	8008f10 <HAL_PCD_EP_SetStall>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a10:	7bfb      	ldrb	r3, [r7, #15]
 8016a12:	4618      	mov	r0, r3
 8016a14:	f000 f8de 	bl	8016bd4 <USBD_Get_USB_Status>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3710      	adds	r7, #16
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}

08016a26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a26:	b580      	push	{r7, lr}
 8016a28:	b084      	sub	sp, #16
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	6078      	str	r0, [r7, #4]
 8016a2e:	460b      	mov	r3, r1
 8016a30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a32:	2300      	movs	r3, #0
 8016a34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a36:	2300      	movs	r3, #0
 8016a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a40:	78fa      	ldrb	r2, [r7, #3]
 8016a42:	4611      	mov	r1, r2
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7f2 fac7 	bl	8008fd8 <HAL_PCD_EP_ClrStall>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a4e:	7bfb      	ldrb	r3, [r7, #15]
 8016a50:	4618      	mov	r0, r3
 8016a52:	f000 f8bf 	bl	8016bd4 <USBD_Get_USB_Status>
 8016a56:	4603      	mov	r3, r0
 8016a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3710      	adds	r7, #16
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a64:	b480      	push	{r7}
 8016a66:	b085      	sub	sp, #20
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	da0b      	bge.n	8016a98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016a80:	78fb      	ldrb	r3, [r7, #3]
 8016a82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a86:	68f9      	ldr	r1, [r7, #12]
 8016a88:	4613      	mov	r3, r2
 8016a8a:	00db      	lsls	r3, r3, #3
 8016a8c:	1a9b      	subs	r3, r3, r2
 8016a8e:	009b      	lsls	r3, r3, #2
 8016a90:	440b      	add	r3, r1
 8016a92:	333e      	adds	r3, #62	; 0x3e
 8016a94:	781b      	ldrb	r3, [r3, #0]
 8016a96:	e00b      	b.n	8016ab0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016a98:	78fb      	ldrb	r3, [r7, #3]
 8016a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a9e:	68f9      	ldr	r1, [r7, #12]
 8016aa0:	4613      	mov	r3, r2
 8016aa2:	00db      	lsls	r3, r3, #3
 8016aa4:	1a9b      	subs	r3, r3, r2
 8016aa6:	009b      	lsls	r3, r3, #2
 8016aa8:	440b      	add	r3, r1
 8016aaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016aae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	3714      	adds	r7, #20
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aba:	4770      	bx	lr

08016abc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b084      	sub	sp, #16
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	460b      	mov	r3, r1
 8016ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016acc:	2300      	movs	r3, #0
 8016ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016ad6:	78fa      	ldrb	r2, [r7, #3]
 8016ad8:	4611      	mov	r1, r2
 8016ada:	4618      	mov	r0, r3
 8016adc:	f7f2 f894 	bl	8008c08 <HAL_PCD_SetAddress>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ae4:	7bfb      	ldrb	r3, [r7, #15]
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	f000 f874 	bl	8016bd4 <USBD_Get_USB_Status>
 8016aec:	4603      	mov	r3, r0
 8016aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016af2:	4618      	mov	r0, r3
 8016af4:	3710      	adds	r7, #16
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}

08016afa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016afa:	b580      	push	{r7, lr}
 8016afc:	b086      	sub	sp, #24
 8016afe:	af00      	add	r7, sp, #0
 8016b00:	60f8      	str	r0, [r7, #12]
 8016b02:	607a      	str	r2, [r7, #4]
 8016b04:	603b      	str	r3, [r7, #0]
 8016b06:	460b      	mov	r3, r1
 8016b08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016b18:	7af9      	ldrb	r1, [r7, #11]
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	687a      	ldr	r2, [r7, #4]
 8016b1e:	f7f2 f9ad 	bl	8008e7c <HAL_PCD_EP_Transmit>
 8016b22:	4603      	mov	r3, r0
 8016b24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b26:	7dfb      	ldrb	r3, [r7, #23]
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f000 f853 	bl	8016bd4 <USBD_Get_USB_Status>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8016b34:	4618      	mov	r0, r3
 8016b36:	3718      	adds	r7, #24
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b086      	sub	sp, #24
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	60f8      	str	r0, [r7, #12]
 8016b44:	607a      	str	r2, [r7, #4]
 8016b46:	603b      	str	r3, [r7, #0]
 8016b48:	460b      	mov	r3, r1
 8016b4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b50:	2300      	movs	r3, #0
 8016b52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016b5a:	7af9      	ldrb	r1, [r7, #11]
 8016b5c:	683b      	ldr	r3, [r7, #0]
 8016b5e:	687a      	ldr	r2, [r7, #4]
 8016b60:	f7f2 f929 	bl	8008db6 <HAL_PCD_EP_Receive>
 8016b64:	4603      	mov	r3, r0
 8016b66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b68:	7dfb      	ldrb	r3, [r7, #23]
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f000 f832 	bl	8016bd4 <USBD_Get_USB_Status>
 8016b70:	4603      	mov	r3, r0
 8016b72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016b74:	7dbb      	ldrb	r3, [r7, #22]
}
 8016b76:	4618      	mov	r0, r3
 8016b78:	3718      	adds	r7, #24
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bd80      	pop	{r7, pc}

08016b7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b7e:	b580      	push	{r7, lr}
 8016b80:	b082      	sub	sp, #8
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
 8016b86:	460b      	mov	r3, r1
 8016b88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b90:	78fa      	ldrb	r2, [r7, #3]
 8016b92:	4611      	mov	r1, r2
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7f2 f959 	bl	8008e4c <HAL_PCD_EP_GetRxCount>
 8016b9a:	4603      	mov	r3, r0
}
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	3708      	adds	r7, #8
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b083      	sub	sp, #12
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016bac:	4b03      	ldr	r3, [pc, #12]	; (8016bbc <USBD_static_malloc+0x18>)
}
 8016bae:	4618      	mov	r0, r3
 8016bb0:	370c      	adds	r7, #12
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb8:	4770      	bx	lr
 8016bba:	bf00      	nop
 8016bbc:	2400685c 	.word	0x2400685c

08016bc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016bc0:	b480      	push	{r7}
 8016bc2:	b083      	sub	sp, #12
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]

}
 8016bc8:	bf00      	nop
 8016bca:	370c      	adds	r7, #12
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd2:	4770      	bx	lr

08016bd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016bd4:	b480      	push	{r7}
 8016bd6:	b085      	sub	sp, #20
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	4603      	mov	r3, r0
 8016bdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bde:	2300      	movs	r3, #0
 8016be0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016be2:	79fb      	ldrb	r3, [r7, #7]
 8016be4:	2b03      	cmp	r3, #3
 8016be6:	d817      	bhi.n	8016c18 <USBD_Get_USB_Status+0x44>
 8016be8:	a201      	add	r2, pc, #4	; (adr r2, 8016bf0 <USBD_Get_USB_Status+0x1c>)
 8016bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bee:	bf00      	nop
 8016bf0:	08016c01 	.word	0x08016c01
 8016bf4:	08016c07 	.word	0x08016c07
 8016bf8:	08016c0d 	.word	0x08016c0d
 8016bfc:	08016c13 	.word	0x08016c13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016c00:	2300      	movs	r3, #0
 8016c02:	73fb      	strb	r3, [r7, #15]
    break;
 8016c04:	e00b      	b.n	8016c1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016c06:	2303      	movs	r3, #3
 8016c08:	73fb      	strb	r3, [r7, #15]
    break;
 8016c0a:	e008      	b.n	8016c1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8016c10:	e005      	b.n	8016c1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016c12:	2303      	movs	r3, #3
 8016c14:	73fb      	strb	r3, [r7, #15]
    break;
 8016c16:	e002      	b.n	8016c1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016c18:	2303      	movs	r3, #3
 8016c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8016c1c:	bf00      	nop
  }
  return usb_status;
 8016c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c20:	4618      	mov	r0, r3
 8016c22:	3714      	adds	r7, #20
 8016c24:	46bd      	mov	sp, r7
 8016c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2a:	4770      	bx	lr

08016c2c <atoi>:
 8016c2c:	220a      	movs	r2, #10
 8016c2e:	2100      	movs	r1, #0
 8016c30:	f000 bb6a 	b.w	8017308 <strtol>

08016c34 <__errno>:
 8016c34:	4b01      	ldr	r3, [pc, #4]	; (8016c3c <__errno+0x8>)
 8016c36:	6818      	ldr	r0, [r3, #0]
 8016c38:	4770      	bx	lr
 8016c3a:	bf00      	nop
 8016c3c:	240002a8 	.word	0x240002a8

08016c40 <std>:
 8016c40:	2300      	movs	r3, #0
 8016c42:	b510      	push	{r4, lr}
 8016c44:	4604      	mov	r4, r0
 8016c46:	e9c0 3300 	strd	r3, r3, [r0]
 8016c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c4e:	6083      	str	r3, [r0, #8]
 8016c50:	8181      	strh	r1, [r0, #12]
 8016c52:	6643      	str	r3, [r0, #100]	; 0x64
 8016c54:	81c2      	strh	r2, [r0, #14]
 8016c56:	6183      	str	r3, [r0, #24]
 8016c58:	4619      	mov	r1, r3
 8016c5a:	2208      	movs	r2, #8
 8016c5c:	305c      	adds	r0, #92	; 0x5c
 8016c5e:	f000 f91a 	bl	8016e96 <memset>
 8016c62:	4b05      	ldr	r3, [pc, #20]	; (8016c78 <std+0x38>)
 8016c64:	6263      	str	r3, [r4, #36]	; 0x24
 8016c66:	4b05      	ldr	r3, [pc, #20]	; (8016c7c <std+0x3c>)
 8016c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8016c6a:	4b05      	ldr	r3, [pc, #20]	; (8016c80 <std+0x40>)
 8016c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016c6e:	4b05      	ldr	r3, [pc, #20]	; (8016c84 <std+0x44>)
 8016c70:	6224      	str	r4, [r4, #32]
 8016c72:	6323      	str	r3, [r4, #48]	; 0x30
 8016c74:	bd10      	pop	{r4, pc}
 8016c76:	bf00      	nop
 8016c78:	080170c1 	.word	0x080170c1
 8016c7c:	080170e3 	.word	0x080170e3
 8016c80:	0801711b 	.word	0x0801711b
 8016c84:	0801713f 	.word	0x0801713f

08016c88 <_cleanup_r>:
 8016c88:	4901      	ldr	r1, [pc, #4]	; (8016c90 <_cleanup_r+0x8>)
 8016c8a:	f000 b8af 	b.w	8016dec <_fwalk_reent>
 8016c8e:	bf00      	nop
 8016c90:	080174a9 	.word	0x080174a9

08016c94 <__sfmoreglue>:
 8016c94:	b570      	push	{r4, r5, r6, lr}
 8016c96:	1e4a      	subs	r2, r1, #1
 8016c98:	2568      	movs	r5, #104	; 0x68
 8016c9a:	4355      	muls	r5, r2
 8016c9c:	460e      	mov	r6, r1
 8016c9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016ca2:	f000 f901 	bl	8016ea8 <_malloc_r>
 8016ca6:	4604      	mov	r4, r0
 8016ca8:	b140      	cbz	r0, 8016cbc <__sfmoreglue+0x28>
 8016caa:	2100      	movs	r1, #0
 8016cac:	e9c0 1600 	strd	r1, r6, [r0]
 8016cb0:	300c      	adds	r0, #12
 8016cb2:	60a0      	str	r0, [r4, #8]
 8016cb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016cb8:	f000 f8ed 	bl	8016e96 <memset>
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	bd70      	pop	{r4, r5, r6, pc}

08016cc0 <__sfp_lock_acquire>:
 8016cc0:	4801      	ldr	r0, [pc, #4]	; (8016cc8 <__sfp_lock_acquire+0x8>)
 8016cc2:	f000 b8d8 	b.w	8016e76 <__retarget_lock_acquire_recursive>
 8016cc6:	bf00      	nop
 8016cc8:	24008a94 	.word	0x24008a94

08016ccc <__sfp_lock_release>:
 8016ccc:	4801      	ldr	r0, [pc, #4]	; (8016cd4 <__sfp_lock_release+0x8>)
 8016cce:	f000 b8d3 	b.w	8016e78 <__retarget_lock_release_recursive>
 8016cd2:	bf00      	nop
 8016cd4:	24008a94 	.word	0x24008a94

08016cd8 <__sinit_lock_acquire>:
 8016cd8:	4801      	ldr	r0, [pc, #4]	; (8016ce0 <__sinit_lock_acquire+0x8>)
 8016cda:	f000 b8cc 	b.w	8016e76 <__retarget_lock_acquire_recursive>
 8016cde:	bf00      	nop
 8016ce0:	24008a8f 	.word	0x24008a8f

08016ce4 <__sinit_lock_release>:
 8016ce4:	4801      	ldr	r0, [pc, #4]	; (8016cec <__sinit_lock_release+0x8>)
 8016ce6:	f000 b8c7 	b.w	8016e78 <__retarget_lock_release_recursive>
 8016cea:	bf00      	nop
 8016cec:	24008a8f 	.word	0x24008a8f

08016cf0 <__sinit>:
 8016cf0:	b510      	push	{r4, lr}
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	f7ff fff0 	bl	8016cd8 <__sinit_lock_acquire>
 8016cf8:	69a3      	ldr	r3, [r4, #24]
 8016cfa:	b11b      	cbz	r3, 8016d04 <__sinit+0x14>
 8016cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d00:	f7ff bff0 	b.w	8016ce4 <__sinit_lock_release>
 8016d04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016d08:	6523      	str	r3, [r4, #80]	; 0x50
 8016d0a:	4b13      	ldr	r3, [pc, #76]	; (8016d58 <__sinit+0x68>)
 8016d0c:	4a13      	ldr	r2, [pc, #76]	; (8016d5c <__sinit+0x6c>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	62a2      	str	r2, [r4, #40]	; 0x28
 8016d12:	42a3      	cmp	r3, r4
 8016d14:	bf04      	itt	eq
 8016d16:	2301      	moveq	r3, #1
 8016d18:	61a3      	streq	r3, [r4, #24]
 8016d1a:	4620      	mov	r0, r4
 8016d1c:	f000 f820 	bl	8016d60 <__sfp>
 8016d20:	6060      	str	r0, [r4, #4]
 8016d22:	4620      	mov	r0, r4
 8016d24:	f000 f81c 	bl	8016d60 <__sfp>
 8016d28:	60a0      	str	r0, [r4, #8]
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	f000 f818 	bl	8016d60 <__sfp>
 8016d30:	2200      	movs	r2, #0
 8016d32:	60e0      	str	r0, [r4, #12]
 8016d34:	2104      	movs	r1, #4
 8016d36:	6860      	ldr	r0, [r4, #4]
 8016d38:	f7ff ff82 	bl	8016c40 <std>
 8016d3c:	68a0      	ldr	r0, [r4, #8]
 8016d3e:	2201      	movs	r2, #1
 8016d40:	2109      	movs	r1, #9
 8016d42:	f7ff ff7d 	bl	8016c40 <std>
 8016d46:	68e0      	ldr	r0, [r4, #12]
 8016d48:	2202      	movs	r2, #2
 8016d4a:	2112      	movs	r1, #18
 8016d4c:	f7ff ff78 	bl	8016c40 <std>
 8016d50:	2301      	movs	r3, #1
 8016d52:	61a3      	str	r3, [r4, #24]
 8016d54:	e7d2      	b.n	8016cfc <__sinit+0xc>
 8016d56:	bf00      	nop
 8016d58:	080237f0 	.word	0x080237f0
 8016d5c:	08016c89 	.word	0x08016c89

08016d60 <__sfp>:
 8016d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d62:	4607      	mov	r7, r0
 8016d64:	f7ff ffac 	bl	8016cc0 <__sfp_lock_acquire>
 8016d68:	4b1e      	ldr	r3, [pc, #120]	; (8016de4 <__sfp+0x84>)
 8016d6a:	681e      	ldr	r6, [r3, #0]
 8016d6c:	69b3      	ldr	r3, [r6, #24]
 8016d6e:	b913      	cbnz	r3, 8016d76 <__sfp+0x16>
 8016d70:	4630      	mov	r0, r6
 8016d72:	f7ff ffbd 	bl	8016cf0 <__sinit>
 8016d76:	3648      	adds	r6, #72	; 0x48
 8016d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016d7c:	3b01      	subs	r3, #1
 8016d7e:	d503      	bpl.n	8016d88 <__sfp+0x28>
 8016d80:	6833      	ldr	r3, [r6, #0]
 8016d82:	b30b      	cbz	r3, 8016dc8 <__sfp+0x68>
 8016d84:	6836      	ldr	r6, [r6, #0]
 8016d86:	e7f7      	b.n	8016d78 <__sfp+0x18>
 8016d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016d8c:	b9d5      	cbnz	r5, 8016dc4 <__sfp+0x64>
 8016d8e:	4b16      	ldr	r3, [pc, #88]	; (8016de8 <__sfp+0x88>)
 8016d90:	60e3      	str	r3, [r4, #12]
 8016d92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016d96:	6665      	str	r5, [r4, #100]	; 0x64
 8016d98:	f000 f86c 	bl	8016e74 <__retarget_lock_init_recursive>
 8016d9c:	f7ff ff96 	bl	8016ccc <__sfp_lock_release>
 8016da0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016da4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016da8:	6025      	str	r5, [r4, #0]
 8016daa:	61a5      	str	r5, [r4, #24]
 8016dac:	2208      	movs	r2, #8
 8016dae:	4629      	mov	r1, r5
 8016db0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016db4:	f000 f86f 	bl	8016e96 <memset>
 8016db8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016dbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dc4:	3468      	adds	r4, #104	; 0x68
 8016dc6:	e7d9      	b.n	8016d7c <__sfp+0x1c>
 8016dc8:	2104      	movs	r1, #4
 8016dca:	4638      	mov	r0, r7
 8016dcc:	f7ff ff62 	bl	8016c94 <__sfmoreglue>
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	6030      	str	r0, [r6, #0]
 8016dd4:	2800      	cmp	r0, #0
 8016dd6:	d1d5      	bne.n	8016d84 <__sfp+0x24>
 8016dd8:	f7ff ff78 	bl	8016ccc <__sfp_lock_release>
 8016ddc:	230c      	movs	r3, #12
 8016dde:	603b      	str	r3, [r7, #0]
 8016de0:	e7ee      	b.n	8016dc0 <__sfp+0x60>
 8016de2:	bf00      	nop
 8016de4:	080237f0 	.word	0x080237f0
 8016de8:	ffff0001 	.word	0xffff0001

08016dec <_fwalk_reent>:
 8016dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016df0:	4606      	mov	r6, r0
 8016df2:	4688      	mov	r8, r1
 8016df4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016df8:	2700      	movs	r7, #0
 8016dfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016dfe:	f1b9 0901 	subs.w	r9, r9, #1
 8016e02:	d505      	bpl.n	8016e10 <_fwalk_reent+0x24>
 8016e04:	6824      	ldr	r4, [r4, #0]
 8016e06:	2c00      	cmp	r4, #0
 8016e08:	d1f7      	bne.n	8016dfa <_fwalk_reent+0xe>
 8016e0a:	4638      	mov	r0, r7
 8016e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e10:	89ab      	ldrh	r3, [r5, #12]
 8016e12:	2b01      	cmp	r3, #1
 8016e14:	d907      	bls.n	8016e26 <_fwalk_reent+0x3a>
 8016e16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e1a:	3301      	adds	r3, #1
 8016e1c:	d003      	beq.n	8016e26 <_fwalk_reent+0x3a>
 8016e1e:	4629      	mov	r1, r5
 8016e20:	4630      	mov	r0, r6
 8016e22:	47c0      	blx	r8
 8016e24:	4307      	orrs	r7, r0
 8016e26:	3568      	adds	r5, #104	; 0x68
 8016e28:	e7e9      	b.n	8016dfe <_fwalk_reent+0x12>
	...

08016e2c <__libc_init_array>:
 8016e2c:	b570      	push	{r4, r5, r6, lr}
 8016e2e:	4d0d      	ldr	r5, [pc, #52]	; (8016e64 <__libc_init_array+0x38>)
 8016e30:	4c0d      	ldr	r4, [pc, #52]	; (8016e68 <__libc_init_array+0x3c>)
 8016e32:	1b64      	subs	r4, r4, r5
 8016e34:	10a4      	asrs	r4, r4, #2
 8016e36:	2600      	movs	r6, #0
 8016e38:	42a6      	cmp	r6, r4
 8016e3a:	d109      	bne.n	8016e50 <__libc_init_array+0x24>
 8016e3c:	4d0b      	ldr	r5, [pc, #44]	; (8016e6c <__libc_init_array+0x40>)
 8016e3e:	4c0c      	ldr	r4, [pc, #48]	; (8016e70 <__libc_init_array+0x44>)
 8016e40:	f001 fa2c 	bl	801829c <_init>
 8016e44:	1b64      	subs	r4, r4, r5
 8016e46:	10a4      	asrs	r4, r4, #2
 8016e48:	2600      	movs	r6, #0
 8016e4a:	42a6      	cmp	r6, r4
 8016e4c:	d105      	bne.n	8016e5a <__libc_init_array+0x2e>
 8016e4e:	bd70      	pop	{r4, r5, r6, pc}
 8016e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e54:	4798      	blx	r3
 8016e56:	3601      	adds	r6, #1
 8016e58:	e7ee      	b.n	8016e38 <__libc_init_array+0xc>
 8016e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e5e:	4798      	blx	r3
 8016e60:	3601      	adds	r6, #1
 8016e62:	e7f2      	b.n	8016e4a <__libc_init_array+0x1e>
 8016e64:	080239e4 	.word	0x080239e4
 8016e68:	080239e4 	.word	0x080239e4
 8016e6c:	080239e4 	.word	0x080239e4
 8016e70:	080239e8 	.word	0x080239e8

08016e74 <__retarget_lock_init_recursive>:
 8016e74:	4770      	bx	lr

08016e76 <__retarget_lock_acquire_recursive>:
 8016e76:	4770      	bx	lr

08016e78 <__retarget_lock_release_recursive>:
 8016e78:	4770      	bx	lr

08016e7a <memcpy>:
 8016e7a:	440a      	add	r2, r1
 8016e7c:	4291      	cmp	r1, r2
 8016e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e82:	d100      	bne.n	8016e86 <memcpy+0xc>
 8016e84:	4770      	bx	lr
 8016e86:	b510      	push	{r4, lr}
 8016e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e90:	4291      	cmp	r1, r2
 8016e92:	d1f9      	bne.n	8016e88 <memcpy+0xe>
 8016e94:	bd10      	pop	{r4, pc}

08016e96 <memset>:
 8016e96:	4402      	add	r2, r0
 8016e98:	4603      	mov	r3, r0
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	d100      	bne.n	8016ea0 <memset+0xa>
 8016e9e:	4770      	bx	lr
 8016ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8016ea4:	e7f9      	b.n	8016e9a <memset+0x4>
	...

08016ea8 <_malloc_r>:
 8016ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eaa:	1ccd      	adds	r5, r1, #3
 8016eac:	f025 0503 	bic.w	r5, r5, #3
 8016eb0:	3508      	adds	r5, #8
 8016eb2:	2d0c      	cmp	r5, #12
 8016eb4:	bf38      	it	cc
 8016eb6:	250c      	movcc	r5, #12
 8016eb8:	2d00      	cmp	r5, #0
 8016eba:	4606      	mov	r6, r0
 8016ebc:	db01      	blt.n	8016ec2 <_malloc_r+0x1a>
 8016ebe:	42a9      	cmp	r1, r5
 8016ec0:	d903      	bls.n	8016eca <_malloc_r+0x22>
 8016ec2:	230c      	movs	r3, #12
 8016ec4:	6033      	str	r3, [r6, #0]
 8016ec6:	2000      	movs	r0, #0
 8016ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016eca:	f000 fb55 	bl	8017578 <__malloc_lock>
 8016ece:	4921      	ldr	r1, [pc, #132]	; (8016f54 <_malloc_r+0xac>)
 8016ed0:	680a      	ldr	r2, [r1, #0]
 8016ed2:	4614      	mov	r4, r2
 8016ed4:	b99c      	cbnz	r4, 8016efe <_malloc_r+0x56>
 8016ed6:	4f20      	ldr	r7, [pc, #128]	; (8016f58 <_malloc_r+0xb0>)
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	b923      	cbnz	r3, 8016ee6 <_malloc_r+0x3e>
 8016edc:	4621      	mov	r1, r4
 8016ede:	4630      	mov	r0, r6
 8016ee0:	f000 f8be 	bl	8017060 <_sbrk_r>
 8016ee4:	6038      	str	r0, [r7, #0]
 8016ee6:	4629      	mov	r1, r5
 8016ee8:	4630      	mov	r0, r6
 8016eea:	f000 f8b9 	bl	8017060 <_sbrk_r>
 8016eee:	1c43      	adds	r3, r0, #1
 8016ef0:	d123      	bne.n	8016f3a <_malloc_r+0x92>
 8016ef2:	230c      	movs	r3, #12
 8016ef4:	6033      	str	r3, [r6, #0]
 8016ef6:	4630      	mov	r0, r6
 8016ef8:	f000 fb44 	bl	8017584 <__malloc_unlock>
 8016efc:	e7e3      	b.n	8016ec6 <_malloc_r+0x1e>
 8016efe:	6823      	ldr	r3, [r4, #0]
 8016f00:	1b5b      	subs	r3, r3, r5
 8016f02:	d417      	bmi.n	8016f34 <_malloc_r+0x8c>
 8016f04:	2b0b      	cmp	r3, #11
 8016f06:	d903      	bls.n	8016f10 <_malloc_r+0x68>
 8016f08:	6023      	str	r3, [r4, #0]
 8016f0a:	441c      	add	r4, r3
 8016f0c:	6025      	str	r5, [r4, #0]
 8016f0e:	e004      	b.n	8016f1a <_malloc_r+0x72>
 8016f10:	6863      	ldr	r3, [r4, #4]
 8016f12:	42a2      	cmp	r2, r4
 8016f14:	bf0c      	ite	eq
 8016f16:	600b      	streq	r3, [r1, #0]
 8016f18:	6053      	strne	r3, [r2, #4]
 8016f1a:	4630      	mov	r0, r6
 8016f1c:	f000 fb32 	bl	8017584 <__malloc_unlock>
 8016f20:	f104 000b 	add.w	r0, r4, #11
 8016f24:	1d23      	adds	r3, r4, #4
 8016f26:	f020 0007 	bic.w	r0, r0, #7
 8016f2a:	1ac2      	subs	r2, r0, r3
 8016f2c:	d0cc      	beq.n	8016ec8 <_malloc_r+0x20>
 8016f2e:	1a1b      	subs	r3, r3, r0
 8016f30:	50a3      	str	r3, [r4, r2]
 8016f32:	e7c9      	b.n	8016ec8 <_malloc_r+0x20>
 8016f34:	4622      	mov	r2, r4
 8016f36:	6864      	ldr	r4, [r4, #4]
 8016f38:	e7cc      	b.n	8016ed4 <_malloc_r+0x2c>
 8016f3a:	1cc4      	adds	r4, r0, #3
 8016f3c:	f024 0403 	bic.w	r4, r4, #3
 8016f40:	42a0      	cmp	r0, r4
 8016f42:	d0e3      	beq.n	8016f0c <_malloc_r+0x64>
 8016f44:	1a21      	subs	r1, r4, r0
 8016f46:	4630      	mov	r0, r6
 8016f48:	f000 f88a 	bl	8017060 <_sbrk_r>
 8016f4c:	3001      	adds	r0, #1
 8016f4e:	d1dd      	bne.n	8016f0c <_malloc_r+0x64>
 8016f50:	e7cf      	b.n	8016ef2 <_malloc_r+0x4a>
 8016f52:	bf00      	nop
 8016f54:	24006a7c 	.word	0x24006a7c
 8016f58:	24006a80 	.word	0x24006a80

08016f5c <iprintf>:
 8016f5c:	b40f      	push	{r0, r1, r2, r3}
 8016f5e:	4b0a      	ldr	r3, [pc, #40]	; (8016f88 <iprintf+0x2c>)
 8016f60:	b513      	push	{r0, r1, r4, lr}
 8016f62:	681c      	ldr	r4, [r3, #0]
 8016f64:	b124      	cbz	r4, 8016f70 <iprintf+0x14>
 8016f66:	69a3      	ldr	r3, [r4, #24]
 8016f68:	b913      	cbnz	r3, 8016f70 <iprintf+0x14>
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	f7ff fec0 	bl	8016cf0 <__sinit>
 8016f70:	ab05      	add	r3, sp, #20
 8016f72:	9a04      	ldr	r2, [sp, #16]
 8016f74:	68a1      	ldr	r1, [r4, #8]
 8016f76:	9301      	str	r3, [sp, #4]
 8016f78:	4620      	mov	r0, r4
 8016f7a:	f000 fcdf 	bl	801793c <_vfiprintf_r>
 8016f7e:	b002      	add	sp, #8
 8016f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f84:	b004      	add	sp, #16
 8016f86:	4770      	bx	lr
 8016f88:	240002a8 	.word	0x240002a8

08016f8c <cleanup_glue>:
 8016f8c:	b538      	push	{r3, r4, r5, lr}
 8016f8e:	460c      	mov	r4, r1
 8016f90:	6809      	ldr	r1, [r1, #0]
 8016f92:	4605      	mov	r5, r0
 8016f94:	b109      	cbz	r1, 8016f9a <cleanup_glue+0xe>
 8016f96:	f7ff fff9 	bl	8016f8c <cleanup_glue>
 8016f9a:	4621      	mov	r1, r4
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fa2:	f000 baf5 	b.w	8017590 <_free_r>
	...

08016fa8 <_reclaim_reent>:
 8016fa8:	4b2c      	ldr	r3, [pc, #176]	; (801705c <_reclaim_reent+0xb4>)
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	4283      	cmp	r3, r0
 8016fae:	b570      	push	{r4, r5, r6, lr}
 8016fb0:	4604      	mov	r4, r0
 8016fb2:	d051      	beq.n	8017058 <_reclaim_reent+0xb0>
 8016fb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016fb6:	b143      	cbz	r3, 8016fca <_reclaim_reent+0x22>
 8016fb8:	68db      	ldr	r3, [r3, #12]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d14a      	bne.n	8017054 <_reclaim_reent+0xac>
 8016fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016fc0:	6819      	ldr	r1, [r3, #0]
 8016fc2:	b111      	cbz	r1, 8016fca <_reclaim_reent+0x22>
 8016fc4:	4620      	mov	r0, r4
 8016fc6:	f000 fae3 	bl	8017590 <_free_r>
 8016fca:	6961      	ldr	r1, [r4, #20]
 8016fcc:	b111      	cbz	r1, 8016fd4 <_reclaim_reent+0x2c>
 8016fce:	4620      	mov	r0, r4
 8016fd0:	f000 fade 	bl	8017590 <_free_r>
 8016fd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016fd6:	b111      	cbz	r1, 8016fde <_reclaim_reent+0x36>
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f000 fad9 	bl	8017590 <_free_r>
 8016fde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016fe0:	b111      	cbz	r1, 8016fe8 <_reclaim_reent+0x40>
 8016fe2:	4620      	mov	r0, r4
 8016fe4:	f000 fad4 	bl	8017590 <_free_r>
 8016fe8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016fea:	b111      	cbz	r1, 8016ff2 <_reclaim_reent+0x4a>
 8016fec:	4620      	mov	r0, r4
 8016fee:	f000 facf 	bl	8017590 <_free_r>
 8016ff2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016ff4:	b111      	cbz	r1, 8016ffc <_reclaim_reent+0x54>
 8016ff6:	4620      	mov	r0, r4
 8016ff8:	f000 faca 	bl	8017590 <_free_r>
 8016ffc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016ffe:	b111      	cbz	r1, 8017006 <_reclaim_reent+0x5e>
 8017000:	4620      	mov	r0, r4
 8017002:	f000 fac5 	bl	8017590 <_free_r>
 8017006:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017008:	b111      	cbz	r1, 8017010 <_reclaim_reent+0x68>
 801700a:	4620      	mov	r0, r4
 801700c:	f000 fac0 	bl	8017590 <_free_r>
 8017010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017012:	b111      	cbz	r1, 801701a <_reclaim_reent+0x72>
 8017014:	4620      	mov	r0, r4
 8017016:	f000 fabb 	bl	8017590 <_free_r>
 801701a:	69a3      	ldr	r3, [r4, #24]
 801701c:	b1e3      	cbz	r3, 8017058 <_reclaim_reent+0xb0>
 801701e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017020:	4620      	mov	r0, r4
 8017022:	4798      	blx	r3
 8017024:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017026:	b1b9      	cbz	r1, 8017058 <_reclaim_reent+0xb0>
 8017028:	4620      	mov	r0, r4
 801702a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801702e:	f7ff bfad 	b.w	8016f8c <cleanup_glue>
 8017032:	5949      	ldr	r1, [r1, r5]
 8017034:	b941      	cbnz	r1, 8017048 <_reclaim_reent+0xa0>
 8017036:	3504      	adds	r5, #4
 8017038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801703a:	2d80      	cmp	r5, #128	; 0x80
 801703c:	68d9      	ldr	r1, [r3, #12]
 801703e:	d1f8      	bne.n	8017032 <_reclaim_reent+0x8a>
 8017040:	4620      	mov	r0, r4
 8017042:	f000 faa5 	bl	8017590 <_free_r>
 8017046:	e7ba      	b.n	8016fbe <_reclaim_reent+0x16>
 8017048:	680e      	ldr	r6, [r1, #0]
 801704a:	4620      	mov	r0, r4
 801704c:	f000 faa0 	bl	8017590 <_free_r>
 8017050:	4631      	mov	r1, r6
 8017052:	e7ef      	b.n	8017034 <_reclaim_reent+0x8c>
 8017054:	2500      	movs	r5, #0
 8017056:	e7ef      	b.n	8017038 <_reclaim_reent+0x90>
 8017058:	bd70      	pop	{r4, r5, r6, pc}
 801705a:	bf00      	nop
 801705c:	240002a8 	.word	0x240002a8

08017060 <_sbrk_r>:
 8017060:	b538      	push	{r3, r4, r5, lr}
 8017062:	4d06      	ldr	r5, [pc, #24]	; (801707c <_sbrk_r+0x1c>)
 8017064:	2300      	movs	r3, #0
 8017066:	4604      	mov	r4, r0
 8017068:	4608      	mov	r0, r1
 801706a:	602b      	str	r3, [r5, #0]
 801706c:	f7eb ff3a 	bl	8002ee4 <_sbrk>
 8017070:	1c43      	adds	r3, r0, #1
 8017072:	d102      	bne.n	801707a <_sbrk_r+0x1a>
 8017074:	682b      	ldr	r3, [r5, #0]
 8017076:	b103      	cbz	r3, 801707a <_sbrk_r+0x1a>
 8017078:	6023      	str	r3, [r4, #0]
 801707a:	bd38      	pop	{r3, r4, r5, pc}
 801707c:	24008a98 	.word	0x24008a98

08017080 <siprintf>:
 8017080:	b40e      	push	{r1, r2, r3}
 8017082:	b500      	push	{lr}
 8017084:	b09c      	sub	sp, #112	; 0x70
 8017086:	ab1d      	add	r3, sp, #116	; 0x74
 8017088:	9002      	str	r0, [sp, #8]
 801708a:	9006      	str	r0, [sp, #24]
 801708c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017090:	4809      	ldr	r0, [pc, #36]	; (80170b8 <siprintf+0x38>)
 8017092:	9107      	str	r1, [sp, #28]
 8017094:	9104      	str	r1, [sp, #16]
 8017096:	4909      	ldr	r1, [pc, #36]	; (80170bc <siprintf+0x3c>)
 8017098:	f853 2b04 	ldr.w	r2, [r3], #4
 801709c:	9105      	str	r1, [sp, #20]
 801709e:	6800      	ldr	r0, [r0, #0]
 80170a0:	9301      	str	r3, [sp, #4]
 80170a2:	a902      	add	r1, sp, #8
 80170a4:	f000 fb20 	bl	80176e8 <_svfiprintf_r>
 80170a8:	9b02      	ldr	r3, [sp, #8]
 80170aa:	2200      	movs	r2, #0
 80170ac:	701a      	strb	r2, [r3, #0]
 80170ae:	b01c      	add	sp, #112	; 0x70
 80170b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80170b4:	b003      	add	sp, #12
 80170b6:	4770      	bx	lr
 80170b8:	240002a8 	.word	0x240002a8
 80170bc:	ffff0208 	.word	0xffff0208

080170c0 <__sread>:
 80170c0:	b510      	push	{r4, lr}
 80170c2:	460c      	mov	r4, r1
 80170c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170c8:	f000 fefc 	bl	8017ec4 <_read_r>
 80170cc:	2800      	cmp	r0, #0
 80170ce:	bfab      	itete	ge
 80170d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80170d2:	89a3      	ldrhlt	r3, [r4, #12]
 80170d4:	181b      	addge	r3, r3, r0
 80170d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80170da:	bfac      	ite	ge
 80170dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80170de:	81a3      	strhlt	r3, [r4, #12]
 80170e0:	bd10      	pop	{r4, pc}

080170e2 <__swrite>:
 80170e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170e6:	461f      	mov	r7, r3
 80170e8:	898b      	ldrh	r3, [r1, #12]
 80170ea:	05db      	lsls	r3, r3, #23
 80170ec:	4605      	mov	r5, r0
 80170ee:	460c      	mov	r4, r1
 80170f0:	4616      	mov	r6, r2
 80170f2:	d505      	bpl.n	8017100 <__swrite+0x1e>
 80170f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170f8:	2302      	movs	r3, #2
 80170fa:	2200      	movs	r2, #0
 80170fc:	f000 fa22 	bl	8017544 <_lseek_r>
 8017100:	89a3      	ldrh	r3, [r4, #12]
 8017102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801710a:	81a3      	strh	r3, [r4, #12]
 801710c:	4632      	mov	r2, r6
 801710e:	463b      	mov	r3, r7
 8017110:	4628      	mov	r0, r5
 8017112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017116:	f000 b901 	b.w	801731c <_write_r>

0801711a <__sseek>:
 801711a:	b510      	push	{r4, lr}
 801711c:	460c      	mov	r4, r1
 801711e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017122:	f000 fa0f 	bl	8017544 <_lseek_r>
 8017126:	1c43      	adds	r3, r0, #1
 8017128:	89a3      	ldrh	r3, [r4, #12]
 801712a:	bf15      	itete	ne
 801712c:	6560      	strne	r0, [r4, #84]	; 0x54
 801712e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017136:	81a3      	strheq	r3, [r4, #12]
 8017138:	bf18      	it	ne
 801713a:	81a3      	strhne	r3, [r4, #12]
 801713c:	bd10      	pop	{r4, pc}

0801713e <__sclose>:
 801713e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017142:	f000 b91b 	b.w	801737c <_close_r>
	...

08017148 <strtok>:
 8017148:	4b16      	ldr	r3, [pc, #88]	; (80171a4 <strtok+0x5c>)
 801714a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801714c:	681e      	ldr	r6, [r3, #0]
 801714e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8017150:	4605      	mov	r5, r0
 8017152:	b9fc      	cbnz	r4, 8017194 <strtok+0x4c>
 8017154:	2050      	movs	r0, #80	; 0x50
 8017156:	9101      	str	r1, [sp, #4]
 8017158:	f000 fa06 	bl	8017568 <malloc>
 801715c:	9901      	ldr	r1, [sp, #4]
 801715e:	65b0      	str	r0, [r6, #88]	; 0x58
 8017160:	4602      	mov	r2, r0
 8017162:	b920      	cbnz	r0, 801716e <strtok+0x26>
 8017164:	4b10      	ldr	r3, [pc, #64]	; (80171a8 <strtok+0x60>)
 8017166:	4811      	ldr	r0, [pc, #68]	; (80171ac <strtok+0x64>)
 8017168:	2157      	movs	r1, #87	; 0x57
 801716a:	f000 f8e9 	bl	8017340 <__assert_func>
 801716e:	e9c0 4400 	strd	r4, r4, [r0]
 8017172:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8017176:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801717a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801717e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8017182:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8017186:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801718a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801718e:	6184      	str	r4, [r0, #24]
 8017190:	7704      	strb	r4, [r0, #28]
 8017192:	6244      	str	r4, [r0, #36]	; 0x24
 8017194:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8017196:	2301      	movs	r3, #1
 8017198:	4628      	mov	r0, r5
 801719a:	b002      	add	sp, #8
 801719c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171a0:	f000 b806 	b.w	80171b0 <__strtok_r>
 80171a4:	240002a8 	.word	0x240002a8
 80171a8:	080237f4 	.word	0x080237f4
 80171ac:	0802380b 	.word	0x0802380b

080171b0 <__strtok_r>:
 80171b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171b2:	b908      	cbnz	r0, 80171b8 <__strtok_r+0x8>
 80171b4:	6810      	ldr	r0, [r2, #0]
 80171b6:	b188      	cbz	r0, 80171dc <__strtok_r+0x2c>
 80171b8:	4604      	mov	r4, r0
 80171ba:	4620      	mov	r0, r4
 80171bc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80171c0:	460f      	mov	r7, r1
 80171c2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80171c6:	b91e      	cbnz	r6, 80171d0 <__strtok_r+0x20>
 80171c8:	b965      	cbnz	r5, 80171e4 <__strtok_r+0x34>
 80171ca:	6015      	str	r5, [r2, #0]
 80171cc:	4628      	mov	r0, r5
 80171ce:	e005      	b.n	80171dc <__strtok_r+0x2c>
 80171d0:	42b5      	cmp	r5, r6
 80171d2:	d1f6      	bne.n	80171c2 <__strtok_r+0x12>
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d1f0      	bne.n	80171ba <__strtok_r+0xa>
 80171d8:	6014      	str	r4, [r2, #0]
 80171da:	7003      	strb	r3, [r0, #0]
 80171dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171de:	461c      	mov	r4, r3
 80171e0:	e00c      	b.n	80171fc <__strtok_r+0x4c>
 80171e2:	b915      	cbnz	r5, 80171ea <__strtok_r+0x3a>
 80171e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80171e8:	460e      	mov	r6, r1
 80171ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 80171ee:	42ab      	cmp	r3, r5
 80171f0:	d1f7      	bne.n	80171e2 <__strtok_r+0x32>
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d0f3      	beq.n	80171de <__strtok_r+0x2e>
 80171f6:	2300      	movs	r3, #0
 80171f8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80171fc:	6014      	str	r4, [r2, #0]
 80171fe:	e7ed      	b.n	80171dc <__strtok_r+0x2c>

08017200 <_strtol_l.isra.0>:
 8017200:	2b01      	cmp	r3, #1
 8017202:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017206:	d001      	beq.n	801720c <_strtol_l.isra.0+0xc>
 8017208:	2b24      	cmp	r3, #36	; 0x24
 801720a:	d906      	bls.n	801721a <_strtol_l.isra.0+0x1a>
 801720c:	f7ff fd12 	bl	8016c34 <__errno>
 8017210:	2316      	movs	r3, #22
 8017212:	6003      	str	r3, [r0, #0]
 8017214:	2000      	movs	r0, #0
 8017216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801721a:	4f3a      	ldr	r7, [pc, #232]	; (8017304 <_strtol_l.isra.0+0x104>)
 801721c:	468e      	mov	lr, r1
 801721e:	4676      	mov	r6, lr
 8017220:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017224:	5de5      	ldrb	r5, [r4, r7]
 8017226:	f015 0508 	ands.w	r5, r5, #8
 801722a:	d1f8      	bne.n	801721e <_strtol_l.isra.0+0x1e>
 801722c:	2c2d      	cmp	r4, #45	; 0x2d
 801722e:	d134      	bne.n	801729a <_strtol_l.isra.0+0x9a>
 8017230:	f89e 4000 	ldrb.w	r4, [lr]
 8017234:	f04f 0801 	mov.w	r8, #1
 8017238:	f106 0e02 	add.w	lr, r6, #2
 801723c:	2b00      	cmp	r3, #0
 801723e:	d05c      	beq.n	80172fa <_strtol_l.isra.0+0xfa>
 8017240:	2b10      	cmp	r3, #16
 8017242:	d10c      	bne.n	801725e <_strtol_l.isra.0+0x5e>
 8017244:	2c30      	cmp	r4, #48	; 0x30
 8017246:	d10a      	bne.n	801725e <_strtol_l.isra.0+0x5e>
 8017248:	f89e 4000 	ldrb.w	r4, [lr]
 801724c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017250:	2c58      	cmp	r4, #88	; 0x58
 8017252:	d14d      	bne.n	80172f0 <_strtol_l.isra.0+0xf0>
 8017254:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017258:	2310      	movs	r3, #16
 801725a:	f10e 0e02 	add.w	lr, lr, #2
 801725e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8017262:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017266:	2600      	movs	r6, #0
 8017268:	fbbc f9f3 	udiv	r9, ip, r3
 801726c:	4635      	mov	r5, r6
 801726e:	fb03 ca19 	mls	sl, r3, r9, ip
 8017272:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017276:	2f09      	cmp	r7, #9
 8017278:	d818      	bhi.n	80172ac <_strtol_l.isra.0+0xac>
 801727a:	463c      	mov	r4, r7
 801727c:	42a3      	cmp	r3, r4
 801727e:	dd24      	ble.n	80172ca <_strtol_l.isra.0+0xca>
 8017280:	2e00      	cmp	r6, #0
 8017282:	db1f      	blt.n	80172c4 <_strtol_l.isra.0+0xc4>
 8017284:	45a9      	cmp	r9, r5
 8017286:	d31d      	bcc.n	80172c4 <_strtol_l.isra.0+0xc4>
 8017288:	d101      	bne.n	801728e <_strtol_l.isra.0+0x8e>
 801728a:	45a2      	cmp	sl, r4
 801728c:	db1a      	blt.n	80172c4 <_strtol_l.isra.0+0xc4>
 801728e:	fb05 4503 	mla	r5, r5, r3, r4
 8017292:	2601      	movs	r6, #1
 8017294:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017298:	e7eb      	b.n	8017272 <_strtol_l.isra.0+0x72>
 801729a:	2c2b      	cmp	r4, #43	; 0x2b
 801729c:	bf08      	it	eq
 801729e:	f89e 4000 	ldrbeq.w	r4, [lr]
 80172a2:	46a8      	mov	r8, r5
 80172a4:	bf08      	it	eq
 80172a6:	f106 0e02 	addeq.w	lr, r6, #2
 80172aa:	e7c7      	b.n	801723c <_strtol_l.isra.0+0x3c>
 80172ac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80172b0:	2f19      	cmp	r7, #25
 80172b2:	d801      	bhi.n	80172b8 <_strtol_l.isra.0+0xb8>
 80172b4:	3c37      	subs	r4, #55	; 0x37
 80172b6:	e7e1      	b.n	801727c <_strtol_l.isra.0+0x7c>
 80172b8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80172bc:	2f19      	cmp	r7, #25
 80172be:	d804      	bhi.n	80172ca <_strtol_l.isra.0+0xca>
 80172c0:	3c57      	subs	r4, #87	; 0x57
 80172c2:	e7db      	b.n	801727c <_strtol_l.isra.0+0x7c>
 80172c4:	f04f 36ff 	mov.w	r6, #4294967295
 80172c8:	e7e4      	b.n	8017294 <_strtol_l.isra.0+0x94>
 80172ca:	2e00      	cmp	r6, #0
 80172cc:	da05      	bge.n	80172da <_strtol_l.isra.0+0xda>
 80172ce:	2322      	movs	r3, #34	; 0x22
 80172d0:	6003      	str	r3, [r0, #0]
 80172d2:	4665      	mov	r5, ip
 80172d4:	b942      	cbnz	r2, 80172e8 <_strtol_l.isra.0+0xe8>
 80172d6:	4628      	mov	r0, r5
 80172d8:	e79d      	b.n	8017216 <_strtol_l.isra.0+0x16>
 80172da:	f1b8 0f00 	cmp.w	r8, #0
 80172de:	d000      	beq.n	80172e2 <_strtol_l.isra.0+0xe2>
 80172e0:	426d      	negs	r5, r5
 80172e2:	2a00      	cmp	r2, #0
 80172e4:	d0f7      	beq.n	80172d6 <_strtol_l.isra.0+0xd6>
 80172e6:	b10e      	cbz	r6, 80172ec <_strtol_l.isra.0+0xec>
 80172e8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80172ec:	6011      	str	r1, [r2, #0]
 80172ee:	e7f2      	b.n	80172d6 <_strtol_l.isra.0+0xd6>
 80172f0:	2430      	movs	r4, #48	; 0x30
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d1b3      	bne.n	801725e <_strtol_l.isra.0+0x5e>
 80172f6:	2308      	movs	r3, #8
 80172f8:	e7b1      	b.n	801725e <_strtol_l.isra.0+0x5e>
 80172fa:	2c30      	cmp	r4, #48	; 0x30
 80172fc:	d0a4      	beq.n	8017248 <_strtol_l.isra.0+0x48>
 80172fe:	230a      	movs	r3, #10
 8017300:	e7ad      	b.n	801725e <_strtol_l.isra.0+0x5e>
 8017302:	bf00      	nop
 8017304:	080238a9 	.word	0x080238a9

08017308 <strtol>:
 8017308:	4613      	mov	r3, r2
 801730a:	460a      	mov	r2, r1
 801730c:	4601      	mov	r1, r0
 801730e:	4802      	ldr	r0, [pc, #8]	; (8017318 <strtol+0x10>)
 8017310:	6800      	ldr	r0, [r0, #0]
 8017312:	f7ff bf75 	b.w	8017200 <_strtol_l.isra.0>
 8017316:	bf00      	nop
 8017318:	240002a8 	.word	0x240002a8

0801731c <_write_r>:
 801731c:	b538      	push	{r3, r4, r5, lr}
 801731e:	4d07      	ldr	r5, [pc, #28]	; (801733c <_write_r+0x20>)
 8017320:	4604      	mov	r4, r0
 8017322:	4608      	mov	r0, r1
 8017324:	4611      	mov	r1, r2
 8017326:	2200      	movs	r2, #0
 8017328:	602a      	str	r2, [r5, #0]
 801732a:	461a      	mov	r2, r3
 801732c:	f7ea ff90 	bl	8002250 <_write>
 8017330:	1c43      	adds	r3, r0, #1
 8017332:	d102      	bne.n	801733a <_write_r+0x1e>
 8017334:	682b      	ldr	r3, [r5, #0]
 8017336:	b103      	cbz	r3, 801733a <_write_r+0x1e>
 8017338:	6023      	str	r3, [r4, #0]
 801733a:	bd38      	pop	{r3, r4, r5, pc}
 801733c:	24008a98 	.word	0x24008a98

08017340 <__assert_func>:
 8017340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017342:	4614      	mov	r4, r2
 8017344:	461a      	mov	r2, r3
 8017346:	4b09      	ldr	r3, [pc, #36]	; (801736c <__assert_func+0x2c>)
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	4605      	mov	r5, r0
 801734c:	68d8      	ldr	r0, [r3, #12]
 801734e:	b14c      	cbz	r4, 8017364 <__assert_func+0x24>
 8017350:	4b07      	ldr	r3, [pc, #28]	; (8017370 <__assert_func+0x30>)
 8017352:	9100      	str	r1, [sp, #0]
 8017354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017358:	4906      	ldr	r1, [pc, #24]	; (8017374 <__assert_func+0x34>)
 801735a:	462b      	mov	r3, r5
 801735c:	f000 f8e0 	bl	8017520 <fiprintf>
 8017360:	f000 fe82 	bl	8018068 <abort>
 8017364:	4b04      	ldr	r3, [pc, #16]	; (8017378 <__assert_func+0x38>)
 8017366:	461c      	mov	r4, r3
 8017368:	e7f3      	b.n	8017352 <__assert_func+0x12>
 801736a:	bf00      	nop
 801736c:	240002a8 	.word	0x240002a8
 8017370:	0802386c 	.word	0x0802386c
 8017374:	08023879 	.word	0x08023879
 8017378:	080238a7 	.word	0x080238a7

0801737c <_close_r>:
 801737c:	b538      	push	{r3, r4, r5, lr}
 801737e:	4d06      	ldr	r5, [pc, #24]	; (8017398 <_close_r+0x1c>)
 8017380:	2300      	movs	r3, #0
 8017382:	4604      	mov	r4, r0
 8017384:	4608      	mov	r0, r1
 8017386:	602b      	str	r3, [r5, #0]
 8017388:	f7eb fd77 	bl	8002e7a <_close>
 801738c:	1c43      	adds	r3, r0, #1
 801738e:	d102      	bne.n	8017396 <_close_r+0x1a>
 8017390:	682b      	ldr	r3, [r5, #0]
 8017392:	b103      	cbz	r3, 8017396 <_close_r+0x1a>
 8017394:	6023      	str	r3, [r4, #0]
 8017396:	bd38      	pop	{r3, r4, r5, pc}
 8017398:	24008a98 	.word	0x24008a98

0801739c <__sflush_r>:
 801739c:	898a      	ldrh	r2, [r1, #12]
 801739e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173a2:	4605      	mov	r5, r0
 80173a4:	0710      	lsls	r0, r2, #28
 80173a6:	460c      	mov	r4, r1
 80173a8:	d458      	bmi.n	801745c <__sflush_r+0xc0>
 80173aa:	684b      	ldr	r3, [r1, #4]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	dc05      	bgt.n	80173bc <__sflush_r+0x20>
 80173b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	dc02      	bgt.n	80173bc <__sflush_r+0x20>
 80173b6:	2000      	movs	r0, #0
 80173b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80173be:	2e00      	cmp	r6, #0
 80173c0:	d0f9      	beq.n	80173b6 <__sflush_r+0x1a>
 80173c2:	2300      	movs	r3, #0
 80173c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80173c8:	682f      	ldr	r7, [r5, #0]
 80173ca:	602b      	str	r3, [r5, #0]
 80173cc:	d032      	beq.n	8017434 <__sflush_r+0x98>
 80173ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80173d0:	89a3      	ldrh	r3, [r4, #12]
 80173d2:	075a      	lsls	r2, r3, #29
 80173d4:	d505      	bpl.n	80173e2 <__sflush_r+0x46>
 80173d6:	6863      	ldr	r3, [r4, #4]
 80173d8:	1ac0      	subs	r0, r0, r3
 80173da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80173dc:	b10b      	cbz	r3, 80173e2 <__sflush_r+0x46>
 80173de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80173e0:	1ac0      	subs	r0, r0, r3
 80173e2:	2300      	movs	r3, #0
 80173e4:	4602      	mov	r2, r0
 80173e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80173e8:	6a21      	ldr	r1, [r4, #32]
 80173ea:	4628      	mov	r0, r5
 80173ec:	47b0      	blx	r6
 80173ee:	1c43      	adds	r3, r0, #1
 80173f0:	89a3      	ldrh	r3, [r4, #12]
 80173f2:	d106      	bne.n	8017402 <__sflush_r+0x66>
 80173f4:	6829      	ldr	r1, [r5, #0]
 80173f6:	291d      	cmp	r1, #29
 80173f8:	d82c      	bhi.n	8017454 <__sflush_r+0xb8>
 80173fa:	4a2a      	ldr	r2, [pc, #168]	; (80174a4 <__sflush_r+0x108>)
 80173fc:	40ca      	lsrs	r2, r1
 80173fe:	07d6      	lsls	r6, r2, #31
 8017400:	d528      	bpl.n	8017454 <__sflush_r+0xb8>
 8017402:	2200      	movs	r2, #0
 8017404:	6062      	str	r2, [r4, #4]
 8017406:	04d9      	lsls	r1, r3, #19
 8017408:	6922      	ldr	r2, [r4, #16]
 801740a:	6022      	str	r2, [r4, #0]
 801740c:	d504      	bpl.n	8017418 <__sflush_r+0x7c>
 801740e:	1c42      	adds	r2, r0, #1
 8017410:	d101      	bne.n	8017416 <__sflush_r+0x7a>
 8017412:	682b      	ldr	r3, [r5, #0]
 8017414:	b903      	cbnz	r3, 8017418 <__sflush_r+0x7c>
 8017416:	6560      	str	r0, [r4, #84]	; 0x54
 8017418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801741a:	602f      	str	r7, [r5, #0]
 801741c:	2900      	cmp	r1, #0
 801741e:	d0ca      	beq.n	80173b6 <__sflush_r+0x1a>
 8017420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017424:	4299      	cmp	r1, r3
 8017426:	d002      	beq.n	801742e <__sflush_r+0x92>
 8017428:	4628      	mov	r0, r5
 801742a:	f000 f8b1 	bl	8017590 <_free_r>
 801742e:	2000      	movs	r0, #0
 8017430:	6360      	str	r0, [r4, #52]	; 0x34
 8017432:	e7c1      	b.n	80173b8 <__sflush_r+0x1c>
 8017434:	6a21      	ldr	r1, [r4, #32]
 8017436:	2301      	movs	r3, #1
 8017438:	4628      	mov	r0, r5
 801743a:	47b0      	blx	r6
 801743c:	1c41      	adds	r1, r0, #1
 801743e:	d1c7      	bne.n	80173d0 <__sflush_r+0x34>
 8017440:	682b      	ldr	r3, [r5, #0]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d0c4      	beq.n	80173d0 <__sflush_r+0x34>
 8017446:	2b1d      	cmp	r3, #29
 8017448:	d001      	beq.n	801744e <__sflush_r+0xb2>
 801744a:	2b16      	cmp	r3, #22
 801744c:	d101      	bne.n	8017452 <__sflush_r+0xb6>
 801744e:	602f      	str	r7, [r5, #0]
 8017450:	e7b1      	b.n	80173b6 <__sflush_r+0x1a>
 8017452:	89a3      	ldrh	r3, [r4, #12]
 8017454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017458:	81a3      	strh	r3, [r4, #12]
 801745a:	e7ad      	b.n	80173b8 <__sflush_r+0x1c>
 801745c:	690f      	ldr	r7, [r1, #16]
 801745e:	2f00      	cmp	r7, #0
 8017460:	d0a9      	beq.n	80173b6 <__sflush_r+0x1a>
 8017462:	0793      	lsls	r3, r2, #30
 8017464:	680e      	ldr	r6, [r1, #0]
 8017466:	bf08      	it	eq
 8017468:	694b      	ldreq	r3, [r1, #20]
 801746a:	600f      	str	r7, [r1, #0]
 801746c:	bf18      	it	ne
 801746e:	2300      	movne	r3, #0
 8017470:	eba6 0807 	sub.w	r8, r6, r7
 8017474:	608b      	str	r3, [r1, #8]
 8017476:	f1b8 0f00 	cmp.w	r8, #0
 801747a:	dd9c      	ble.n	80173b6 <__sflush_r+0x1a>
 801747c:	6a21      	ldr	r1, [r4, #32]
 801747e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017480:	4643      	mov	r3, r8
 8017482:	463a      	mov	r2, r7
 8017484:	4628      	mov	r0, r5
 8017486:	47b0      	blx	r6
 8017488:	2800      	cmp	r0, #0
 801748a:	dc06      	bgt.n	801749a <__sflush_r+0xfe>
 801748c:	89a3      	ldrh	r3, [r4, #12]
 801748e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017492:	81a3      	strh	r3, [r4, #12]
 8017494:	f04f 30ff 	mov.w	r0, #4294967295
 8017498:	e78e      	b.n	80173b8 <__sflush_r+0x1c>
 801749a:	4407      	add	r7, r0
 801749c:	eba8 0800 	sub.w	r8, r8, r0
 80174a0:	e7e9      	b.n	8017476 <__sflush_r+0xda>
 80174a2:	bf00      	nop
 80174a4:	20400001 	.word	0x20400001

080174a8 <_fflush_r>:
 80174a8:	b538      	push	{r3, r4, r5, lr}
 80174aa:	690b      	ldr	r3, [r1, #16]
 80174ac:	4605      	mov	r5, r0
 80174ae:	460c      	mov	r4, r1
 80174b0:	b913      	cbnz	r3, 80174b8 <_fflush_r+0x10>
 80174b2:	2500      	movs	r5, #0
 80174b4:	4628      	mov	r0, r5
 80174b6:	bd38      	pop	{r3, r4, r5, pc}
 80174b8:	b118      	cbz	r0, 80174c2 <_fflush_r+0x1a>
 80174ba:	6983      	ldr	r3, [r0, #24]
 80174bc:	b90b      	cbnz	r3, 80174c2 <_fflush_r+0x1a>
 80174be:	f7ff fc17 	bl	8016cf0 <__sinit>
 80174c2:	4b14      	ldr	r3, [pc, #80]	; (8017514 <_fflush_r+0x6c>)
 80174c4:	429c      	cmp	r4, r3
 80174c6:	d11b      	bne.n	8017500 <_fflush_r+0x58>
 80174c8:	686c      	ldr	r4, [r5, #4]
 80174ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d0ef      	beq.n	80174b2 <_fflush_r+0xa>
 80174d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80174d4:	07d0      	lsls	r0, r2, #31
 80174d6:	d404      	bmi.n	80174e2 <_fflush_r+0x3a>
 80174d8:	0599      	lsls	r1, r3, #22
 80174da:	d402      	bmi.n	80174e2 <_fflush_r+0x3a>
 80174dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174de:	f7ff fcca 	bl	8016e76 <__retarget_lock_acquire_recursive>
 80174e2:	4628      	mov	r0, r5
 80174e4:	4621      	mov	r1, r4
 80174e6:	f7ff ff59 	bl	801739c <__sflush_r>
 80174ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80174ec:	07da      	lsls	r2, r3, #31
 80174ee:	4605      	mov	r5, r0
 80174f0:	d4e0      	bmi.n	80174b4 <_fflush_r+0xc>
 80174f2:	89a3      	ldrh	r3, [r4, #12]
 80174f4:	059b      	lsls	r3, r3, #22
 80174f6:	d4dd      	bmi.n	80174b4 <_fflush_r+0xc>
 80174f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174fa:	f7ff fcbd 	bl	8016e78 <__retarget_lock_release_recursive>
 80174fe:	e7d9      	b.n	80174b4 <_fflush_r+0xc>
 8017500:	4b05      	ldr	r3, [pc, #20]	; (8017518 <_fflush_r+0x70>)
 8017502:	429c      	cmp	r4, r3
 8017504:	d101      	bne.n	801750a <_fflush_r+0x62>
 8017506:	68ac      	ldr	r4, [r5, #8]
 8017508:	e7df      	b.n	80174ca <_fflush_r+0x22>
 801750a:	4b04      	ldr	r3, [pc, #16]	; (801751c <_fflush_r+0x74>)
 801750c:	429c      	cmp	r4, r3
 801750e:	bf08      	it	eq
 8017510:	68ec      	ldreq	r4, [r5, #12]
 8017512:	e7da      	b.n	80174ca <_fflush_r+0x22>
 8017514:	080237b0 	.word	0x080237b0
 8017518:	080237d0 	.word	0x080237d0
 801751c:	08023790 	.word	0x08023790

08017520 <fiprintf>:
 8017520:	b40e      	push	{r1, r2, r3}
 8017522:	b503      	push	{r0, r1, lr}
 8017524:	4601      	mov	r1, r0
 8017526:	ab03      	add	r3, sp, #12
 8017528:	4805      	ldr	r0, [pc, #20]	; (8017540 <fiprintf+0x20>)
 801752a:	f853 2b04 	ldr.w	r2, [r3], #4
 801752e:	6800      	ldr	r0, [r0, #0]
 8017530:	9301      	str	r3, [sp, #4]
 8017532:	f000 fa03 	bl	801793c <_vfiprintf_r>
 8017536:	b002      	add	sp, #8
 8017538:	f85d eb04 	ldr.w	lr, [sp], #4
 801753c:	b003      	add	sp, #12
 801753e:	4770      	bx	lr
 8017540:	240002a8 	.word	0x240002a8

08017544 <_lseek_r>:
 8017544:	b538      	push	{r3, r4, r5, lr}
 8017546:	4d07      	ldr	r5, [pc, #28]	; (8017564 <_lseek_r+0x20>)
 8017548:	4604      	mov	r4, r0
 801754a:	4608      	mov	r0, r1
 801754c:	4611      	mov	r1, r2
 801754e:	2200      	movs	r2, #0
 8017550:	602a      	str	r2, [r5, #0]
 8017552:	461a      	mov	r2, r3
 8017554:	f7eb fcb8 	bl	8002ec8 <_lseek>
 8017558:	1c43      	adds	r3, r0, #1
 801755a:	d102      	bne.n	8017562 <_lseek_r+0x1e>
 801755c:	682b      	ldr	r3, [r5, #0]
 801755e:	b103      	cbz	r3, 8017562 <_lseek_r+0x1e>
 8017560:	6023      	str	r3, [r4, #0]
 8017562:	bd38      	pop	{r3, r4, r5, pc}
 8017564:	24008a98 	.word	0x24008a98

08017568 <malloc>:
 8017568:	4b02      	ldr	r3, [pc, #8]	; (8017574 <malloc+0xc>)
 801756a:	4601      	mov	r1, r0
 801756c:	6818      	ldr	r0, [r3, #0]
 801756e:	f7ff bc9b 	b.w	8016ea8 <_malloc_r>
 8017572:	bf00      	nop
 8017574:	240002a8 	.word	0x240002a8

08017578 <__malloc_lock>:
 8017578:	4801      	ldr	r0, [pc, #4]	; (8017580 <__malloc_lock+0x8>)
 801757a:	f7ff bc7c 	b.w	8016e76 <__retarget_lock_acquire_recursive>
 801757e:	bf00      	nop
 8017580:	24008a90 	.word	0x24008a90

08017584 <__malloc_unlock>:
 8017584:	4801      	ldr	r0, [pc, #4]	; (801758c <__malloc_unlock+0x8>)
 8017586:	f7ff bc77 	b.w	8016e78 <__retarget_lock_release_recursive>
 801758a:	bf00      	nop
 801758c:	24008a90 	.word	0x24008a90

08017590 <_free_r>:
 8017590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017592:	2900      	cmp	r1, #0
 8017594:	d048      	beq.n	8017628 <_free_r+0x98>
 8017596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801759a:	9001      	str	r0, [sp, #4]
 801759c:	2b00      	cmp	r3, #0
 801759e:	f1a1 0404 	sub.w	r4, r1, #4
 80175a2:	bfb8      	it	lt
 80175a4:	18e4      	addlt	r4, r4, r3
 80175a6:	f7ff ffe7 	bl	8017578 <__malloc_lock>
 80175aa:	4a20      	ldr	r2, [pc, #128]	; (801762c <_free_r+0x9c>)
 80175ac:	9801      	ldr	r0, [sp, #4]
 80175ae:	6813      	ldr	r3, [r2, #0]
 80175b0:	4615      	mov	r5, r2
 80175b2:	b933      	cbnz	r3, 80175c2 <_free_r+0x32>
 80175b4:	6063      	str	r3, [r4, #4]
 80175b6:	6014      	str	r4, [r2, #0]
 80175b8:	b003      	add	sp, #12
 80175ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80175be:	f7ff bfe1 	b.w	8017584 <__malloc_unlock>
 80175c2:	42a3      	cmp	r3, r4
 80175c4:	d90b      	bls.n	80175de <_free_r+0x4e>
 80175c6:	6821      	ldr	r1, [r4, #0]
 80175c8:	1862      	adds	r2, r4, r1
 80175ca:	4293      	cmp	r3, r2
 80175cc:	bf04      	itt	eq
 80175ce:	681a      	ldreq	r2, [r3, #0]
 80175d0:	685b      	ldreq	r3, [r3, #4]
 80175d2:	6063      	str	r3, [r4, #4]
 80175d4:	bf04      	itt	eq
 80175d6:	1852      	addeq	r2, r2, r1
 80175d8:	6022      	streq	r2, [r4, #0]
 80175da:	602c      	str	r4, [r5, #0]
 80175dc:	e7ec      	b.n	80175b8 <_free_r+0x28>
 80175de:	461a      	mov	r2, r3
 80175e0:	685b      	ldr	r3, [r3, #4]
 80175e2:	b10b      	cbz	r3, 80175e8 <_free_r+0x58>
 80175e4:	42a3      	cmp	r3, r4
 80175e6:	d9fa      	bls.n	80175de <_free_r+0x4e>
 80175e8:	6811      	ldr	r1, [r2, #0]
 80175ea:	1855      	adds	r5, r2, r1
 80175ec:	42a5      	cmp	r5, r4
 80175ee:	d10b      	bne.n	8017608 <_free_r+0x78>
 80175f0:	6824      	ldr	r4, [r4, #0]
 80175f2:	4421      	add	r1, r4
 80175f4:	1854      	adds	r4, r2, r1
 80175f6:	42a3      	cmp	r3, r4
 80175f8:	6011      	str	r1, [r2, #0]
 80175fa:	d1dd      	bne.n	80175b8 <_free_r+0x28>
 80175fc:	681c      	ldr	r4, [r3, #0]
 80175fe:	685b      	ldr	r3, [r3, #4]
 8017600:	6053      	str	r3, [r2, #4]
 8017602:	4421      	add	r1, r4
 8017604:	6011      	str	r1, [r2, #0]
 8017606:	e7d7      	b.n	80175b8 <_free_r+0x28>
 8017608:	d902      	bls.n	8017610 <_free_r+0x80>
 801760a:	230c      	movs	r3, #12
 801760c:	6003      	str	r3, [r0, #0]
 801760e:	e7d3      	b.n	80175b8 <_free_r+0x28>
 8017610:	6825      	ldr	r5, [r4, #0]
 8017612:	1961      	adds	r1, r4, r5
 8017614:	428b      	cmp	r3, r1
 8017616:	bf04      	itt	eq
 8017618:	6819      	ldreq	r1, [r3, #0]
 801761a:	685b      	ldreq	r3, [r3, #4]
 801761c:	6063      	str	r3, [r4, #4]
 801761e:	bf04      	itt	eq
 8017620:	1949      	addeq	r1, r1, r5
 8017622:	6021      	streq	r1, [r4, #0]
 8017624:	6054      	str	r4, [r2, #4]
 8017626:	e7c7      	b.n	80175b8 <_free_r+0x28>
 8017628:	b003      	add	sp, #12
 801762a:	bd30      	pop	{r4, r5, pc}
 801762c:	24006a7c 	.word	0x24006a7c

08017630 <__ssputs_r>:
 8017630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017634:	688e      	ldr	r6, [r1, #8]
 8017636:	429e      	cmp	r6, r3
 8017638:	4682      	mov	sl, r0
 801763a:	460c      	mov	r4, r1
 801763c:	4690      	mov	r8, r2
 801763e:	461f      	mov	r7, r3
 8017640:	d838      	bhi.n	80176b4 <__ssputs_r+0x84>
 8017642:	898a      	ldrh	r2, [r1, #12]
 8017644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017648:	d032      	beq.n	80176b0 <__ssputs_r+0x80>
 801764a:	6825      	ldr	r5, [r4, #0]
 801764c:	6909      	ldr	r1, [r1, #16]
 801764e:	eba5 0901 	sub.w	r9, r5, r1
 8017652:	6965      	ldr	r5, [r4, #20]
 8017654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801765c:	3301      	adds	r3, #1
 801765e:	444b      	add	r3, r9
 8017660:	106d      	asrs	r5, r5, #1
 8017662:	429d      	cmp	r5, r3
 8017664:	bf38      	it	cc
 8017666:	461d      	movcc	r5, r3
 8017668:	0553      	lsls	r3, r2, #21
 801766a:	d531      	bpl.n	80176d0 <__ssputs_r+0xa0>
 801766c:	4629      	mov	r1, r5
 801766e:	f7ff fc1b 	bl	8016ea8 <_malloc_r>
 8017672:	4606      	mov	r6, r0
 8017674:	b950      	cbnz	r0, 801768c <__ssputs_r+0x5c>
 8017676:	230c      	movs	r3, #12
 8017678:	f8ca 3000 	str.w	r3, [sl]
 801767c:	89a3      	ldrh	r3, [r4, #12]
 801767e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017682:	81a3      	strh	r3, [r4, #12]
 8017684:	f04f 30ff 	mov.w	r0, #4294967295
 8017688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801768c:	6921      	ldr	r1, [r4, #16]
 801768e:	464a      	mov	r2, r9
 8017690:	f7ff fbf3 	bl	8016e7a <memcpy>
 8017694:	89a3      	ldrh	r3, [r4, #12]
 8017696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801769a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801769e:	81a3      	strh	r3, [r4, #12]
 80176a0:	6126      	str	r6, [r4, #16]
 80176a2:	6165      	str	r5, [r4, #20]
 80176a4:	444e      	add	r6, r9
 80176a6:	eba5 0509 	sub.w	r5, r5, r9
 80176aa:	6026      	str	r6, [r4, #0]
 80176ac:	60a5      	str	r5, [r4, #8]
 80176ae:	463e      	mov	r6, r7
 80176b0:	42be      	cmp	r6, r7
 80176b2:	d900      	bls.n	80176b6 <__ssputs_r+0x86>
 80176b4:	463e      	mov	r6, r7
 80176b6:	4632      	mov	r2, r6
 80176b8:	6820      	ldr	r0, [r4, #0]
 80176ba:	4641      	mov	r1, r8
 80176bc:	f000 fd40 	bl	8018140 <memmove>
 80176c0:	68a3      	ldr	r3, [r4, #8]
 80176c2:	6822      	ldr	r2, [r4, #0]
 80176c4:	1b9b      	subs	r3, r3, r6
 80176c6:	4432      	add	r2, r6
 80176c8:	60a3      	str	r3, [r4, #8]
 80176ca:	6022      	str	r2, [r4, #0]
 80176cc:	2000      	movs	r0, #0
 80176ce:	e7db      	b.n	8017688 <__ssputs_r+0x58>
 80176d0:	462a      	mov	r2, r5
 80176d2:	f000 fd4f 	bl	8018174 <_realloc_r>
 80176d6:	4606      	mov	r6, r0
 80176d8:	2800      	cmp	r0, #0
 80176da:	d1e1      	bne.n	80176a0 <__ssputs_r+0x70>
 80176dc:	6921      	ldr	r1, [r4, #16]
 80176de:	4650      	mov	r0, sl
 80176e0:	f7ff ff56 	bl	8017590 <_free_r>
 80176e4:	e7c7      	b.n	8017676 <__ssputs_r+0x46>
	...

080176e8 <_svfiprintf_r>:
 80176e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ec:	4698      	mov	r8, r3
 80176ee:	898b      	ldrh	r3, [r1, #12]
 80176f0:	061b      	lsls	r3, r3, #24
 80176f2:	b09d      	sub	sp, #116	; 0x74
 80176f4:	4607      	mov	r7, r0
 80176f6:	460d      	mov	r5, r1
 80176f8:	4614      	mov	r4, r2
 80176fa:	d50e      	bpl.n	801771a <_svfiprintf_r+0x32>
 80176fc:	690b      	ldr	r3, [r1, #16]
 80176fe:	b963      	cbnz	r3, 801771a <_svfiprintf_r+0x32>
 8017700:	2140      	movs	r1, #64	; 0x40
 8017702:	f7ff fbd1 	bl	8016ea8 <_malloc_r>
 8017706:	6028      	str	r0, [r5, #0]
 8017708:	6128      	str	r0, [r5, #16]
 801770a:	b920      	cbnz	r0, 8017716 <_svfiprintf_r+0x2e>
 801770c:	230c      	movs	r3, #12
 801770e:	603b      	str	r3, [r7, #0]
 8017710:	f04f 30ff 	mov.w	r0, #4294967295
 8017714:	e0d1      	b.n	80178ba <_svfiprintf_r+0x1d2>
 8017716:	2340      	movs	r3, #64	; 0x40
 8017718:	616b      	str	r3, [r5, #20]
 801771a:	2300      	movs	r3, #0
 801771c:	9309      	str	r3, [sp, #36]	; 0x24
 801771e:	2320      	movs	r3, #32
 8017720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017724:	f8cd 800c 	str.w	r8, [sp, #12]
 8017728:	2330      	movs	r3, #48	; 0x30
 801772a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80178d4 <_svfiprintf_r+0x1ec>
 801772e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017732:	f04f 0901 	mov.w	r9, #1
 8017736:	4623      	mov	r3, r4
 8017738:	469a      	mov	sl, r3
 801773a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801773e:	b10a      	cbz	r2, 8017744 <_svfiprintf_r+0x5c>
 8017740:	2a25      	cmp	r2, #37	; 0x25
 8017742:	d1f9      	bne.n	8017738 <_svfiprintf_r+0x50>
 8017744:	ebba 0b04 	subs.w	fp, sl, r4
 8017748:	d00b      	beq.n	8017762 <_svfiprintf_r+0x7a>
 801774a:	465b      	mov	r3, fp
 801774c:	4622      	mov	r2, r4
 801774e:	4629      	mov	r1, r5
 8017750:	4638      	mov	r0, r7
 8017752:	f7ff ff6d 	bl	8017630 <__ssputs_r>
 8017756:	3001      	adds	r0, #1
 8017758:	f000 80aa 	beq.w	80178b0 <_svfiprintf_r+0x1c8>
 801775c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801775e:	445a      	add	r2, fp
 8017760:	9209      	str	r2, [sp, #36]	; 0x24
 8017762:	f89a 3000 	ldrb.w	r3, [sl]
 8017766:	2b00      	cmp	r3, #0
 8017768:	f000 80a2 	beq.w	80178b0 <_svfiprintf_r+0x1c8>
 801776c:	2300      	movs	r3, #0
 801776e:	f04f 32ff 	mov.w	r2, #4294967295
 8017772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017776:	f10a 0a01 	add.w	sl, sl, #1
 801777a:	9304      	str	r3, [sp, #16]
 801777c:	9307      	str	r3, [sp, #28]
 801777e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017782:	931a      	str	r3, [sp, #104]	; 0x68
 8017784:	4654      	mov	r4, sl
 8017786:	2205      	movs	r2, #5
 8017788:	f814 1b01 	ldrb.w	r1, [r4], #1
 801778c:	4851      	ldr	r0, [pc, #324]	; (80178d4 <_svfiprintf_r+0x1ec>)
 801778e:	f7e8 fda7 	bl	80002e0 <memchr>
 8017792:	9a04      	ldr	r2, [sp, #16]
 8017794:	b9d8      	cbnz	r0, 80177ce <_svfiprintf_r+0xe6>
 8017796:	06d0      	lsls	r0, r2, #27
 8017798:	bf44      	itt	mi
 801779a:	2320      	movmi	r3, #32
 801779c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177a0:	0711      	lsls	r1, r2, #28
 80177a2:	bf44      	itt	mi
 80177a4:	232b      	movmi	r3, #43	; 0x2b
 80177a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177aa:	f89a 3000 	ldrb.w	r3, [sl]
 80177ae:	2b2a      	cmp	r3, #42	; 0x2a
 80177b0:	d015      	beq.n	80177de <_svfiprintf_r+0xf6>
 80177b2:	9a07      	ldr	r2, [sp, #28]
 80177b4:	4654      	mov	r4, sl
 80177b6:	2000      	movs	r0, #0
 80177b8:	f04f 0c0a 	mov.w	ip, #10
 80177bc:	4621      	mov	r1, r4
 80177be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177c2:	3b30      	subs	r3, #48	; 0x30
 80177c4:	2b09      	cmp	r3, #9
 80177c6:	d94e      	bls.n	8017866 <_svfiprintf_r+0x17e>
 80177c8:	b1b0      	cbz	r0, 80177f8 <_svfiprintf_r+0x110>
 80177ca:	9207      	str	r2, [sp, #28]
 80177cc:	e014      	b.n	80177f8 <_svfiprintf_r+0x110>
 80177ce:	eba0 0308 	sub.w	r3, r0, r8
 80177d2:	fa09 f303 	lsl.w	r3, r9, r3
 80177d6:	4313      	orrs	r3, r2
 80177d8:	9304      	str	r3, [sp, #16]
 80177da:	46a2      	mov	sl, r4
 80177dc:	e7d2      	b.n	8017784 <_svfiprintf_r+0x9c>
 80177de:	9b03      	ldr	r3, [sp, #12]
 80177e0:	1d19      	adds	r1, r3, #4
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	9103      	str	r1, [sp, #12]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	bfbb      	ittet	lt
 80177ea:	425b      	neglt	r3, r3
 80177ec:	f042 0202 	orrlt.w	r2, r2, #2
 80177f0:	9307      	strge	r3, [sp, #28]
 80177f2:	9307      	strlt	r3, [sp, #28]
 80177f4:	bfb8      	it	lt
 80177f6:	9204      	strlt	r2, [sp, #16]
 80177f8:	7823      	ldrb	r3, [r4, #0]
 80177fa:	2b2e      	cmp	r3, #46	; 0x2e
 80177fc:	d10c      	bne.n	8017818 <_svfiprintf_r+0x130>
 80177fe:	7863      	ldrb	r3, [r4, #1]
 8017800:	2b2a      	cmp	r3, #42	; 0x2a
 8017802:	d135      	bne.n	8017870 <_svfiprintf_r+0x188>
 8017804:	9b03      	ldr	r3, [sp, #12]
 8017806:	1d1a      	adds	r2, r3, #4
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	9203      	str	r2, [sp, #12]
 801780c:	2b00      	cmp	r3, #0
 801780e:	bfb8      	it	lt
 8017810:	f04f 33ff 	movlt.w	r3, #4294967295
 8017814:	3402      	adds	r4, #2
 8017816:	9305      	str	r3, [sp, #20]
 8017818:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80178e4 <_svfiprintf_r+0x1fc>
 801781c:	7821      	ldrb	r1, [r4, #0]
 801781e:	2203      	movs	r2, #3
 8017820:	4650      	mov	r0, sl
 8017822:	f7e8 fd5d 	bl	80002e0 <memchr>
 8017826:	b140      	cbz	r0, 801783a <_svfiprintf_r+0x152>
 8017828:	2340      	movs	r3, #64	; 0x40
 801782a:	eba0 000a 	sub.w	r0, r0, sl
 801782e:	fa03 f000 	lsl.w	r0, r3, r0
 8017832:	9b04      	ldr	r3, [sp, #16]
 8017834:	4303      	orrs	r3, r0
 8017836:	3401      	adds	r4, #1
 8017838:	9304      	str	r3, [sp, #16]
 801783a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801783e:	4826      	ldr	r0, [pc, #152]	; (80178d8 <_svfiprintf_r+0x1f0>)
 8017840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017844:	2206      	movs	r2, #6
 8017846:	f7e8 fd4b 	bl	80002e0 <memchr>
 801784a:	2800      	cmp	r0, #0
 801784c:	d038      	beq.n	80178c0 <_svfiprintf_r+0x1d8>
 801784e:	4b23      	ldr	r3, [pc, #140]	; (80178dc <_svfiprintf_r+0x1f4>)
 8017850:	bb1b      	cbnz	r3, 801789a <_svfiprintf_r+0x1b2>
 8017852:	9b03      	ldr	r3, [sp, #12]
 8017854:	3307      	adds	r3, #7
 8017856:	f023 0307 	bic.w	r3, r3, #7
 801785a:	3308      	adds	r3, #8
 801785c:	9303      	str	r3, [sp, #12]
 801785e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017860:	4433      	add	r3, r6
 8017862:	9309      	str	r3, [sp, #36]	; 0x24
 8017864:	e767      	b.n	8017736 <_svfiprintf_r+0x4e>
 8017866:	fb0c 3202 	mla	r2, ip, r2, r3
 801786a:	460c      	mov	r4, r1
 801786c:	2001      	movs	r0, #1
 801786e:	e7a5      	b.n	80177bc <_svfiprintf_r+0xd4>
 8017870:	2300      	movs	r3, #0
 8017872:	3401      	adds	r4, #1
 8017874:	9305      	str	r3, [sp, #20]
 8017876:	4619      	mov	r1, r3
 8017878:	f04f 0c0a 	mov.w	ip, #10
 801787c:	4620      	mov	r0, r4
 801787e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017882:	3a30      	subs	r2, #48	; 0x30
 8017884:	2a09      	cmp	r2, #9
 8017886:	d903      	bls.n	8017890 <_svfiprintf_r+0x1a8>
 8017888:	2b00      	cmp	r3, #0
 801788a:	d0c5      	beq.n	8017818 <_svfiprintf_r+0x130>
 801788c:	9105      	str	r1, [sp, #20]
 801788e:	e7c3      	b.n	8017818 <_svfiprintf_r+0x130>
 8017890:	fb0c 2101 	mla	r1, ip, r1, r2
 8017894:	4604      	mov	r4, r0
 8017896:	2301      	movs	r3, #1
 8017898:	e7f0      	b.n	801787c <_svfiprintf_r+0x194>
 801789a:	ab03      	add	r3, sp, #12
 801789c:	9300      	str	r3, [sp, #0]
 801789e:	462a      	mov	r2, r5
 80178a0:	4b0f      	ldr	r3, [pc, #60]	; (80178e0 <_svfiprintf_r+0x1f8>)
 80178a2:	a904      	add	r1, sp, #16
 80178a4:	4638      	mov	r0, r7
 80178a6:	f3af 8000 	nop.w
 80178aa:	1c42      	adds	r2, r0, #1
 80178ac:	4606      	mov	r6, r0
 80178ae:	d1d6      	bne.n	801785e <_svfiprintf_r+0x176>
 80178b0:	89ab      	ldrh	r3, [r5, #12]
 80178b2:	065b      	lsls	r3, r3, #25
 80178b4:	f53f af2c 	bmi.w	8017710 <_svfiprintf_r+0x28>
 80178b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178ba:	b01d      	add	sp, #116	; 0x74
 80178bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178c0:	ab03      	add	r3, sp, #12
 80178c2:	9300      	str	r3, [sp, #0]
 80178c4:	462a      	mov	r2, r5
 80178c6:	4b06      	ldr	r3, [pc, #24]	; (80178e0 <_svfiprintf_r+0x1f8>)
 80178c8:	a904      	add	r1, sp, #16
 80178ca:	4638      	mov	r0, r7
 80178cc:	f000 f9d4 	bl	8017c78 <_printf_i>
 80178d0:	e7eb      	b.n	80178aa <_svfiprintf_r+0x1c2>
 80178d2:	bf00      	nop
 80178d4:	080239a9 	.word	0x080239a9
 80178d8:	080239b3 	.word	0x080239b3
 80178dc:	00000000 	.word	0x00000000
 80178e0:	08017631 	.word	0x08017631
 80178e4:	080239af 	.word	0x080239af

080178e8 <__sfputc_r>:
 80178e8:	6893      	ldr	r3, [r2, #8]
 80178ea:	3b01      	subs	r3, #1
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	b410      	push	{r4}
 80178f0:	6093      	str	r3, [r2, #8]
 80178f2:	da08      	bge.n	8017906 <__sfputc_r+0x1e>
 80178f4:	6994      	ldr	r4, [r2, #24]
 80178f6:	42a3      	cmp	r3, r4
 80178f8:	db01      	blt.n	80178fe <__sfputc_r+0x16>
 80178fa:	290a      	cmp	r1, #10
 80178fc:	d103      	bne.n	8017906 <__sfputc_r+0x1e>
 80178fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017902:	f000 baf1 	b.w	8017ee8 <__swbuf_r>
 8017906:	6813      	ldr	r3, [r2, #0]
 8017908:	1c58      	adds	r0, r3, #1
 801790a:	6010      	str	r0, [r2, #0]
 801790c:	7019      	strb	r1, [r3, #0]
 801790e:	4608      	mov	r0, r1
 8017910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017914:	4770      	bx	lr

08017916 <__sfputs_r>:
 8017916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017918:	4606      	mov	r6, r0
 801791a:	460f      	mov	r7, r1
 801791c:	4614      	mov	r4, r2
 801791e:	18d5      	adds	r5, r2, r3
 8017920:	42ac      	cmp	r4, r5
 8017922:	d101      	bne.n	8017928 <__sfputs_r+0x12>
 8017924:	2000      	movs	r0, #0
 8017926:	e007      	b.n	8017938 <__sfputs_r+0x22>
 8017928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801792c:	463a      	mov	r2, r7
 801792e:	4630      	mov	r0, r6
 8017930:	f7ff ffda 	bl	80178e8 <__sfputc_r>
 8017934:	1c43      	adds	r3, r0, #1
 8017936:	d1f3      	bne.n	8017920 <__sfputs_r+0xa>
 8017938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801793c <_vfiprintf_r>:
 801793c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017940:	460d      	mov	r5, r1
 8017942:	b09d      	sub	sp, #116	; 0x74
 8017944:	4614      	mov	r4, r2
 8017946:	4698      	mov	r8, r3
 8017948:	4606      	mov	r6, r0
 801794a:	b118      	cbz	r0, 8017954 <_vfiprintf_r+0x18>
 801794c:	6983      	ldr	r3, [r0, #24]
 801794e:	b90b      	cbnz	r3, 8017954 <_vfiprintf_r+0x18>
 8017950:	f7ff f9ce 	bl	8016cf0 <__sinit>
 8017954:	4b89      	ldr	r3, [pc, #548]	; (8017b7c <_vfiprintf_r+0x240>)
 8017956:	429d      	cmp	r5, r3
 8017958:	d11b      	bne.n	8017992 <_vfiprintf_r+0x56>
 801795a:	6875      	ldr	r5, [r6, #4]
 801795c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801795e:	07d9      	lsls	r1, r3, #31
 8017960:	d405      	bmi.n	801796e <_vfiprintf_r+0x32>
 8017962:	89ab      	ldrh	r3, [r5, #12]
 8017964:	059a      	lsls	r2, r3, #22
 8017966:	d402      	bmi.n	801796e <_vfiprintf_r+0x32>
 8017968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801796a:	f7ff fa84 	bl	8016e76 <__retarget_lock_acquire_recursive>
 801796e:	89ab      	ldrh	r3, [r5, #12]
 8017970:	071b      	lsls	r3, r3, #28
 8017972:	d501      	bpl.n	8017978 <_vfiprintf_r+0x3c>
 8017974:	692b      	ldr	r3, [r5, #16]
 8017976:	b9eb      	cbnz	r3, 80179b4 <_vfiprintf_r+0x78>
 8017978:	4629      	mov	r1, r5
 801797a:	4630      	mov	r0, r6
 801797c:	f000 fb06 	bl	8017f8c <__swsetup_r>
 8017980:	b1c0      	cbz	r0, 80179b4 <_vfiprintf_r+0x78>
 8017982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017984:	07dc      	lsls	r4, r3, #31
 8017986:	d50e      	bpl.n	80179a6 <_vfiprintf_r+0x6a>
 8017988:	f04f 30ff 	mov.w	r0, #4294967295
 801798c:	b01d      	add	sp, #116	; 0x74
 801798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017992:	4b7b      	ldr	r3, [pc, #492]	; (8017b80 <_vfiprintf_r+0x244>)
 8017994:	429d      	cmp	r5, r3
 8017996:	d101      	bne.n	801799c <_vfiprintf_r+0x60>
 8017998:	68b5      	ldr	r5, [r6, #8]
 801799a:	e7df      	b.n	801795c <_vfiprintf_r+0x20>
 801799c:	4b79      	ldr	r3, [pc, #484]	; (8017b84 <_vfiprintf_r+0x248>)
 801799e:	429d      	cmp	r5, r3
 80179a0:	bf08      	it	eq
 80179a2:	68f5      	ldreq	r5, [r6, #12]
 80179a4:	e7da      	b.n	801795c <_vfiprintf_r+0x20>
 80179a6:	89ab      	ldrh	r3, [r5, #12]
 80179a8:	0598      	lsls	r0, r3, #22
 80179aa:	d4ed      	bmi.n	8017988 <_vfiprintf_r+0x4c>
 80179ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80179ae:	f7ff fa63 	bl	8016e78 <__retarget_lock_release_recursive>
 80179b2:	e7e9      	b.n	8017988 <_vfiprintf_r+0x4c>
 80179b4:	2300      	movs	r3, #0
 80179b6:	9309      	str	r3, [sp, #36]	; 0x24
 80179b8:	2320      	movs	r3, #32
 80179ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80179be:	f8cd 800c 	str.w	r8, [sp, #12]
 80179c2:	2330      	movs	r3, #48	; 0x30
 80179c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017b88 <_vfiprintf_r+0x24c>
 80179c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80179cc:	f04f 0901 	mov.w	r9, #1
 80179d0:	4623      	mov	r3, r4
 80179d2:	469a      	mov	sl, r3
 80179d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179d8:	b10a      	cbz	r2, 80179de <_vfiprintf_r+0xa2>
 80179da:	2a25      	cmp	r2, #37	; 0x25
 80179dc:	d1f9      	bne.n	80179d2 <_vfiprintf_r+0x96>
 80179de:	ebba 0b04 	subs.w	fp, sl, r4
 80179e2:	d00b      	beq.n	80179fc <_vfiprintf_r+0xc0>
 80179e4:	465b      	mov	r3, fp
 80179e6:	4622      	mov	r2, r4
 80179e8:	4629      	mov	r1, r5
 80179ea:	4630      	mov	r0, r6
 80179ec:	f7ff ff93 	bl	8017916 <__sfputs_r>
 80179f0:	3001      	adds	r0, #1
 80179f2:	f000 80aa 	beq.w	8017b4a <_vfiprintf_r+0x20e>
 80179f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80179f8:	445a      	add	r2, fp
 80179fa:	9209      	str	r2, [sp, #36]	; 0x24
 80179fc:	f89a 3000 	ldrb.w	r3, [sl]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	f000 80a2 	beq.w	8017b4a <_vfiprintf_r+0x20e>
 8017a06:	2300      	movs	r3, #0
 8017a08:	f04f 32ff 	mov.w	r2, #4294967295
 8017a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a10:	f10a 0a01 	add.w	sl, sl, #1
 8017a14:	9304      	str	r3, [sp, #16]
 8017a16:	9307      	str	r3, [sp, #28]
 8017a18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a1c:	931a      	str	r3, [sp, #104]	; 0x68
 8017a1e:	4654      	mov	r4, sl
 8017a20:	2205      	movs	r2, #5
 8017a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a26:	4858      	ldr	r0, [pc, #352]	; (8017b88 <_vfiprintf_r+0x24c>)
 8017a28:	f7e8 fc5a 	bl	80002e0 <memchr>
 8017a2c:	9a04      	ldr	r2, [sp, #16]
 8017a2e:	b9d8      	cbnz	r0, 8017a68 <_vfiprintf_r+0x12c>
 8017a30:	06d1      	lsls	r1, r2, #27
 8017a32:	bf44      	itt	mi
 8017a34:	2320      	movmi	r3, #32
 8017a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a3a:	0713      	lsls	r3, r2, #28
 8017a3c:	bf44      	itt	mi
 8017a3e:	232b      	movmi	r3, #43	; 0x2b
 8017a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a44:	f89a 3000 	ldrb.w	r3, [sl]
 8017a48:	2b2a      	cmp	r3, #42	; 0x2a
 8017a4a:	d015      	beq.n	8017a78 <_vfiprintf_r+0x13c>
 8017a4c:	9a07      	ldr	r2, [sp, #28]
 8017a4e:	4654      	mov	r4, sl
 8017a50:	2000      	movs	r0, #0
 8017a52:	f04f 0c0a 	mov.w	ip, #10
 8017a56:	4621      	mov	r1, r4
 8017a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a5c:	3b30      	subs	r3, #48	; 0x30
 8017a5e:	2b09      	cmp	r3, #9
 8017a60:	d94e      	bls.n	8017b00 <_vfiprintf_r+0x1c4>
 8017a62:	b1b0      	cbz	r0, 8017a92 <_vfiprintf_r+0x156>
 8017a64:	9207      	str	r2, [sp, #28]
 8017a66:	e014      	b.n	8017a92 <_vfiprintf_r+0x156>
 8017a68:	eba0 0308 	sub.w	r3, r0, r8
 8017a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8017a70:	4313      	orrs	r3, r2
 8017a72:	9304      	str	r3, [sp, #16]
 8017a74:	46a2      	mov	sl, r4
 8017a76:	e7d2      	b.n	8017a1e <_vfiprintf_r+0xe2>
 8017a78:	9b03      	ldr	r3, [sp, #12]
 8017a7a:	1d19      	adds	r1, r3, #4
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	9103      	str	r1, [sp, #12]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	bfbb      	ittet	lt
 8017a84:	425b      	neglt	r3, r3
 8017a86:	f042 0202 	orrlt.w	r2, r2, #2
 8017a8a:	9307      	strge	r3, [sp, #28]
 8017a8c:	9307      	strlt	r3, [sp, #28]
 8017a8e:	bfb8      	it	lt
 8017a90:	9204      	strlt	r2, [sp, #16]
 8017a92:	7823      	ldrb	r3, [r4, #0]
 8017a94:	2b2e      	cmp	r3, #46	; 0x2e
 8017a96:	d10c      	bne.n	8017ab2 <_vfiprintf_r+0x176>
 8017a98:	7863      	ldrb	r3, [r4, #1]
 8017a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8017a9c:	d135      	bne.n	8017b0a <_vfiprintf_r+0x1ce>
 8017a9e:	9b03      	ldr	r3, [sp, #12]
 8017aa0:	1d1a      	adds	r2, r3, #4
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	9203      	str	r2, [sp, #12]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	bfb8      	it	lt
 8017aaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8017aae:	3402      	adds	r4, #2
 8017ab0:	9305      	str	r3, [sp, #20]
 8017ab2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017b98 <_vfiprintf_r+0x25c>
 8017ab6:	7821      	ldrb	r1, [r4, #0]
 8017ab8:	2203      	movs	r2, #3
 8017aba:	4650      	mov	r0, sl
 8017abc:	f7e8 fc10 	bl	80002e0 <memchr>
 8017ac0:	b140      	cbz	r0, 8017ad4 <_vfiprintf_r+0x198>
 8017ac2:	2340      	movs	r3, #64	; 0x40
 8017ac4:	eba0 000a 	sub.w	r0, r0, sl
 8017ac8:	fa03 f000 	lsl.w	r0, r3, r0
 8017acc:	9b04      	ldr	r3, [sp, #16]
 8017ace:	4303      	orrs	r3, r0
 8017ad0:	3401      	adds	r4, #1
 8017ad2:	9304      	str	r3, [sp, #16]
 8017ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ad8:	482c      	ldr	r0, [pc, #176]	; (8017b8c <_vfiprintf_r+0x250>)
 8017ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ade:	2206      	movs	r2, #6
 8017ae0:	f7e8 fbfe 	bl	80002e0 <memchr>
 8017ae4:	2800      	cmp	r0, #0
 8017ae6:	d03f      	beq.n	8017b68 <_vfiprintf_r+0x22c>
 8017ae8:	4b29      	ldr	r3, [pc, #164]	; (8017b90 <_vfiprintf_r+0x254>)
 8017aea:	bb1b      	cbnz	r3, 8017b34 <_vfiprintf_r+0x1f8>
 8017aec:	9b03      	ldr	r3, [sp, #12]
 8017aee:	3307      	adds	r3, #7
 8017af0:	f023 0307 	bic.w	r3, r3, #7
 8017af4:	3308      	adds	r3, #8
 8017af6:	9303      	str	r3, [sp, #12]
 8017af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017afa:	443b      	add	r3, r7
 8017afc:	9309      	str	r3, [sp, #36]	; 0x24
 8017afe:	e767      	b.n	80179d0 <_vfiprintf_r+0x94>
 8017b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b04:	460c      	mov	r4, r1
 8017b06:	2001      	movs	r0, #1
 8017b08:	e7a5      	b.n	8017a56 <_vfiprintf_r+0x11a>
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	3401      	adds	r4, #1
 8017b0e:	9305      	str	r3, [sp, #20]
 8017b10:	4619      	mov	r1, r3
 8017b12:	f04f 0c0a 	mov.w	ip, #10
 8017b16:	4620      	mov	r0, r4
 8017b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b1c:	3a30      	subs	r2, #48	; 0x30
 8017b1e:	2a09      	cmp	r2, #9
 8017b20:	d903      	bls.n	8017b2a <_vfiprintf_r+0x1ee>
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d0c5      	beq.n	8017ab2 <_vfiprintf_r+0x176>
 8017b26:	9105      	str	r1, [sp, #20]
 8017b28:	e7c3      	b.n	8017ab2 <_vfiprintf_r+0x176>
 8017b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b2e:	4604      	mov	r4, r0
 8017b30:	2301      	movs	r3, #1
 8017b32:	e7f0      	b.n	8017b16 <_vfiprintf_r+0x1da>
 8017b34:	ab03      	add	r3, sp, #12
 8017b36:	9300      	str	r3, [sp, #0]
 8017b38:	462a      	mov	r2, r5
 8017b3a:	4b16      	ldr	r3, [pc, #88]	; (8017b94 <_vfiprintf_r+0x258>)
 8017b3c:	a904      	add	r1, sp, #16
 8017b3e:	4630      	mov	r0, r6
 8017b40:	f3af 8000 	nop.w
 8017b44:	4607      	mov	r7, r0
 8017b46:	1c78      	adds	r0, r7, #1
 8017b48:	d1d6      	bne.n	8017af8 <_vfiprintf_r+0x1bc>
 8017b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b4c:	07d9      	lsls	r1, r3, #31
 8017b4e:	d405      	bmi.n	8017b5c <_vfiprintf_r+0x220>
 8017b50:	89ab      	ldrh	r3, [r5, #12]
 8017b52:	059a      	lsls	r2, r3, #22
 8017b54:	d402      	bmi.n	8017b5c <_vfiprintf_r+0x220>
 8017b56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b58:	f7ff f98e 	bl	8016e78 <__retarget_lock_release_recursive>
 8017b5c:	89ab      	ldrh	r3, [r5, #12]
 8017b5e:	065b      	lsls	r3, r3, #25
 8017b60:	f53f af12 	bmi.w	8017988 <_vfiprintf_r+0x4c>
 8017b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b66:	e711      	b.n	801798c <_vfiprintf_r+0x50>
 8017b68:	ab03      	add	r3, sp, #12
 8017b6a:	9300      	str	r3, [sp, #0]
 8017b6c:	462a      	mov	r2, r5
 8017b6e:	4b09      	ldr	r3, [pc, #36]	; (8017b94 <_vfiprintf_r+0x258>)
 8017b70:	a904      	add	r1, sp, #16
 8017b72:	4630      	mov	r0, r6
 8017b74:	f000 f880 	bl	8017c78 <_printf_i>
 8017b78:	e7e4      	b.n	8017b44 <_vfiprintf_r+0x208>
 8017b7a:	bf00      	nop
 8017b7c:	080237b0 	.word	0x080237b0
 8017b80:	080237d0 	.word	0x080237d0
 8017b84:	08023790 	.word	0x08023790
 8017b88:	080239a9 	.word	0x080239a9
 8017b8c:	080239b3 	.word	0x080239b3
 8017b90:	00000000 	.word	0x00000000
 8017b94:	08017917 	.word	0x08017917
 8017b98:	080239af 	.word	0x080239af

08017b9c <_printf_common>:
 8017b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ba0:	4616      	mov	r6, r2
 8017ba2:	4699      	mov	r9, r3
 8017ba4:	688a      	ldr	r2, [r1, #8]
 8017ba6:	690b      	ldr	r3, [r1, #16]
 8017ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017bac:	4293      	cmp	r3, r2
 8017bae:	bfb8      	it	lt
 8017bb0:	4613      	movlt	r3, r2
 8017bb2:	6033      	str	r3, [r6, #0]
 8017bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017bb8:	4607      	mov	r7, r0
 8017bba:	460c      	mov	r4, r1
 8017bbc:	b10a      	cbz	r2, 8017bc2 <_printf_common+0x26>
 8017bbe:	3301      	adds	r3, #1
 8017bc0:	6033      	str	r3, [r6, #0]
 8017bc2:	6823      	ldr	r3, [r4, #0]
 8017bc4:	0699      	lsls	r1, r3, #26
 8017bc6:	bf42      	ittt	mi
 8017bc8:	6833      	ldrmi	r3, [r6, #0]
 8017bca:	3302      	addmi	r3, #2
 8017bcc:	6033      	strmi	r3, [r6, #0]
 8017bce:	6825      	ldr	r5, [r4, #0]
 8017bd0:	f015 0506 	ands.w	r5, r5, #6
 8017bd4:	d106      	bne.n	8017be4 <_printf_common+0x48>
 8017bd6:	f104 0a19 	add.w	sl, r4, #25
 8017bda:	68e3      	ldr	r3, [r4, #12]
 8017bdc:	6832      	ldr	r2, [r6, #0]
 8017bde:	1a9b      	subs	r3, r3, r2
 8017be0:	42ab      	cmp	r3, r5
 8017be2:	dc26      	bgt.n	8017c32 <_printf_common+0x96>
 8017be4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017be8:	1e13      	subs	r3, r2, #0
 8017bea:	6822      	ldr	r2, [r4, #0]
 8017bec:	bf18      	it	ne
 8017bee:	2301      	movne	r3, #1
 8017bf0:	0692      	lsls	r2, r2, #26
 8017bf2:	d42b      	bmi.n	8017c4c <_printf_common+0xb0>
 8017bf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017bf8:	4649      	mov	r1, r9
 8017bfa:	4638      	mov	r0, r7
 8017bfc:	47c0      	blx	r8
 8017bfe:	3001      	adds	r0, #1
 8017c00:	d01e      	beq.n	8017c40 <_printf_common+0xa4>
 8017c02:	6823      	ldr	r3, [r4, #0]
 8017c04:	68e5      	ldr	r5, [r4, #12]
 8017c06:	6832      	ldr	r2, [r6, #0]
 8017c08:	f003 0306 	and.w	r3, r3, #6
 8017c0c:	2b04      	cmp	r3, #4
 8017c0e:	bf08      	it	eq
 8017c10:	1aad      	subeq	r5, r5, r2
 8017c12:	68a3      	ldr	r3, [r4, #8]
 8017c14:	6922      	ldr	r2, [r4, #16]
 8017c16:	bf0c      	ite	eq
 8017c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017c1c:	2500      	movne	r5, #0
 8017c1e:	4293      	cmp	r3, r2
 8017c20:	bfc4      	itt	gt
 8017c22:	1a9b      	subgt	r3, r3, r2
 8017c24:	18ed      	addgt	r5, r5, r3
 8017c26:	2600      	movs	r6, #0
 8017c28:	341a      	adds	r4, #26
 8017c2a:	42b5      	cmp	r5, r6
 8017c2c:	d11a      	bne.n	8017c64 <_printf_common+0xc8>
 8017c2e:	2000      	movs	r0, #0
 8017c30:	e008      	b.n	8017c44 <_printf_common+0xa8>
 8017c32:	2301      	movs	r3, #1
 8017c34:	4652      	mov	r2, sl
 8017c36:	4649      	mov	r1, r9
 8017c38:	4638      	mov	r0, r7
 8017c3a:	47c0      	blx	r8
 8017c3c:	3001      	adds	r0, #1
 8017c3e:	d103      	bne.n	8017c48 <_printf_common+0xac>
 8017c40:	f04f 30ff 	mov.w	r0, #4294967295
 8017c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c48:	3501      	adds	r5, #1
 8017c4a:	e7c6      	b.n	8017bda <_printf_common+0x3e>
 8017c4c:	18e1      	adds	r1, r4, r3
 8017c4e:	1c5a      	adds	r2, r3, #1
 8017c50:	2030      	movs	r0, #48	; 0x30
 8017c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017c56:	4422      	add	r2, r4
 8017c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017c60:	3302      	adds	r3, #2
 8017c62:	e7c7      	b.n	8017bf4 <_printf_common+0x58>
 8017c64:	2301      	movs	r3, #1
 8017c66:	4622      	mov	r2, r4
 8017c68:	4649      	mov	r1, r9
 8017c6a:	4638      	mov	r0, r7
 8017c6c:	47c0      	blx	r8
 8017c6e:	3001      	adds	r0, #1
 8017c70:	d0e6      	beq.n	8017c40 <_printf_common+0xa4>
 8017c72:	3601      	adds	r6, #1
 8017c74:	e7d9      	b.n	8017c2a <_printf_common+0x8e>
	...

08017c78 <_printf_i>:
 8017c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017c7c:	460c      	mov	r4, r1
 8017c7e:	4691      	mov	r9, r2
 8017c80:	7e27      	ldrb	r7, [r4, #24]
 8017c82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017c84:	2f78      	cmp	r7, #120	; 0x78
 8017c86:	4680      	mov	r8, r0
 8017c88:	469a      	mov	sl, r3
 8017c8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c8e:	d807      	bhi.n	8017ca0 <_printf_i+0x28>
 8017c90:	2f62      	cmp	r7, #98	; 0x62
 8017c92:	d80a      	bhi.n	8017caa <_printf_i+0x32>
 8017c94:	2f00      	cmp	r7, #0
 8017c96:	f000 80d8 	beq.w	8017e4a <_printf_i+0x1d2>
 8017c9a:	2f58      	cmp	r7, #88	; 0x58
 8017c9c:	f000 80a3 	beq.w	8017de6 <_printf_i+0x16e>
 8017ca0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017ca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017ca8:	e03a      	b.n	8017d20 <_printf_i+0xa8>
 8017caa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017cae:	2b15      	cmp	r3, #21
 8017cb0:	d8f6      	bhi.n	8017ca0 <_printf_i+0x28>
 8017cb2:	a001      	add	r0, pc, #4	; (adr r0, 8017cb8 <_printf_i+0x40>)
 8017cb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017cb8:	08017d11 	.word	0x08017d11
 8017cbc:	08017d25 	.word	0x08017d25
 8017cc0:	08017ca1 	.word	0x08017ca1
 8017cc4:	08017ca1 	.word	0x08017ca1
 8017cc8:	08017ca1 	.word	0x08017ca1
 8017ccc:	08017ca1 	.word	0x08017ca1
 8017cd0:	08017d25 	.word	0x08017d25
 8017cd4:	08017ca1 	.word	0x08017ca1
 8017cd8:	08017ca1 	.word	0x08017ca1
 8017cdc:	08017ca1 	.word	0x08017ca1
 8017ce0:	08017ca1 	.word	0x08017ca1
 8017ce4:	08017e31 	.word	0x08017e31
 8017ce8:	08017d55 	.word	0x08017d55
 8017cec:	08017e13 	.word	0x08017e13
 8017cf0:	08017ca1 	.word	0x08017ca1
 8017cf4:	08017ca1 	.word	0x08017ca1
 8017cf8:	08017e53 	.word	0x08017e53
 8017cfc:	08017ca1 	.word	0x08017ca1
 8017d00:	08017d55 	.word	0x08017d55
 8017d04:	08017ca1 	.word	0x08017ca1
 8017d08:	08017ca1 	.word	0x08017ca1
 8017d0c:	08017e1b 	.word	0x08017e1b
 8017d10:	680b      	ldr	r3, [r1, #0]
 8017d12:	1d1a      	adds	r2, r3, #4
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	600a      	str	r2, [r1, #0]
 8017d18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017d20:	2301      	movs	r3, #1
 8017d22:	e0a3      	b.n	8017e6c <_printf_i+0x1f4>
 8017d24:	6825      	ldr	r5, [r4, #0]
 8017d26:	6808      	ldr	r0, [r1, #0]
 8017d28:	062e      	lsls	r6, r5, #24
 8017d2a:	f100 0304 	add.w	r3, r0, #4
 8017d2e:	d50a      	bpl.n	8017d46 <_printf_i+0xce>
 8017d30:	6805      	ldr	r5, [r0, #0]
 8017d32:	600b      	str	r3, [r1, #0]
 8017d34:	2d00      	cmp	r5, #0
 8017d36:	da03      	bge.n	8017d40 <_printf_i+0xc8>
 8017d38:	232d      	movs	r3, #45	; 0x2d
 8017d3a:	426d      	negs	r5, r5
 8017d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d40:	485e      	ldr	r0, [pc, #376]	; (8017ebc <_printf_i+0x244>)
 8017d42:	230a      	movs	r3, #10
 8017d44:	e019      	b.n	8017d7a <_printf_i+0x102>
 8017d46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017d4a:	6805      	ldr	r5, [r0, #0]
 8017d4c:	600b      	str	r3, [r1, #0]
 8017d4e:	bf18      	it	ne
 8017d50:	b22d      	sxthne	r5, r5
 8017d52:	e7ef      	b.n	8017d34 <_printf_i+0xbc>
 8017d54:	680b      	ldr	r3, [r1, #0]
 8017d56:	6825      	ldr	r5, [r4, #0]
 8017d58:	1d18      	adds	r0, r3, #4
 8017d5a:	6008      	str	r0, [r1, #0]
 8017d5c:	0628      	lsls	r0, r5, #24
 8017d5e:	d501      	bpl.n	8017d64 <_printf_i+0xec>
 8017d60:	681d      	ldr	r5, [r3, #0]
 8017d62:	e002      	b.n	8017d6a <_printf_i+0xf2>
 8017d64:	0669      	lsls	r1, r5, #25
 8017d66:	d5fb      	bpl.n	8017d60 <_printf_i+0xe8>
 8017d68:	881d      	ldrh	r5, [r3, #0]
 8017d6a:	4854      	ldr	r0, [pc, #336]	; (8017ebc <_printf_i+0x244>)
 8017d6c:	2f6f      	cmp	r7, #111	; 0x6f
 8017d6e:	bf0c      	ite	eq
 8017d70:	2308      	moveq	r3, #8
 8017d72:	230a      	movne	r3, #10
 8017d74:	2100      	movs	r1, #0
 8017d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017d7a:	6866      	ldr	r6, [r4, #4]
 8017d7c:	60a6      	str	r6, [r4, #8]
 8017d7e:	2e00      	cmp	r6, #0
 8017d80:	bfa2      	ittt	ge
 8017d82:	6821      	ldrge	r1, [r4, #0]
 8017d84:	f021 0104 	bicge.w	r1, r1, #4
 8017d88:	6021      	strge	r1, [r4, #0]
 8017d8a:	b90d      	cbnz	r5, 8017d90 <_printf_i+0x118>
 8017d8c:	2e00      	cmp	r6, #0
 8017d8e:	d04d      	beq.n	8017e2c <_printf_i+0x1b4>
 8017d90:	4616      	mov	r6, r2
 8017d92:	fbb5 f1f3 	udiv	r1, r5, r3
 8017d96:	fb03 5711 	mls	r7, r3, r1, r5
 8017d9a:	5dc7      	ldrb	r7, [r0, r7]
 8017d9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017da0:	462f      	mov	r7, r5
 8017da2:	42bb      	cmp	r3, r7
 8017da4:	460d      	mov	r5, r1
 8017da6:	d9f4      	bls.n	8017d92 <_printf_i+0x11a>
 8017da8:	2b08      	cmp	r3, #8
 8017daa:	d10b      	bne.n	8017dc4 <_printf_i+0x14c>
 8017dac:	6823      	ldr	r3, [r4, #0]
 8017dae:	07df      	lsls	r7, r3, #31
 8017db0:	d508      	bpl.n	8017dc4 <_printf_i+0x14c>
 8017db2:	6923      	ldr	r3, [r4, #16]
 8017db4:	6861      	ldr	r1, [r4, #4]
 8017db6:	4299      	cmp	r1, r3
 8017db8:	bfde      	ittt	le
 8017dba:	2330      	movle	r3, #48	; 0x30
 8017dbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017dc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017dc4:	1b92      	subs	r2, r2, r6
 8017dc6:	6122      	str	r2, [r4, #16]
 8017dc8:	f8cd a000 	str.w	sl, [sp]
 8017dcc:	464b      	mov	r3, r9
 8017dce:	aa03      	add	r2, sp, #12
 8017dd0:	4621      	mov	r1, r4
 8017dd2:	4640      	mov	r0, r8
 8017dd4:	f7ff fee2 	bl	8017b9c <_printf_common>
 8017dd8:	3001      	adds	r0, #1
 8017dda:	d14c      	bne.n	8017e76 <_printf_i+0x1fe>
 8017ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8017de0:	b004      	add	sp, #16
 8017de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017de6:	4835      	ldr	r0, [pc, #212]	; (8017ebc <_printf_i+0x244>)
 8017de8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017dec:	6823      	ldr	r3, [r4, #0]
 8017dee:	680e      	ldr	r6, [r1, #0]
 8017df0:	061f      	lsls	r7, r3, #24
 8017df2:	f856 5b04 	ldr.w	r5, [r6], #4
 8017df6:	600e      	str	r6, [r1, #0]
 8017df8:	d514      	bpl.n	8017e24 <_printf_i+0x1ac>
 8017dfa:	07d9      	lsls	r1, r3, #31
 8017dfc:	bf44      	itt	mi
 8017dfe:	f043 0320 	orrmi.w	r3, r3, #32
 8017e02:	6023      	strmi	r3, [r4, #0]
 8017e04:	b91d      	cbnz	r5, 8017e0e <_printf_i+0x196>
 8017e06:	6823      	ldr	r3, [r4, #0]
 8017e08:	f023 0320 	bic.w	r3, r3, #32
 8017e0c:	6023      	str	r3, [r4, #0]
 8017e0e:	2310      	movs	r3, #16
 8017e10:	e7b0      	b.n	8017d74 <_printf_i+0xfc>
 8017e12:	6823      	ldr	r3, [r4, #0]
 8017e14:	f043 0320 	orr.w	r3, r3, #32
 8017e18:	6023      	str	r3, [r4, #0]
 8017e1a:	2378      	movs	r3, #120	; 0x78
 8017e1c:	4828      	ldr	r0, [pc, #160]	; (8017ec0 <_printf_i+0x248>)
 8017e1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017e22:	e7e3      	b.n	8017dec <_printf_i+0x174>
 8017e24:	065e      	lsls	r6, r3, #25
 8017e26:	bf48      	it	mi
 8017e28:	b2ad      	uxthmi	r5, r5
 8017e2a:	e7e6      	b.n	8017dfa <_printf_i+0x182>
 8017e2c:	4616      	mov	r6, r2
 8017e2e:	e7bb      	b.n	8017da8 <_printf_i+0x130>
 8017e30:	680b      	ldr	r3, [r1, #0]
 8017e32:	6826      	ldr	r6, [r4, #0]
 8017e34:	6960      	ldr	r0, [r4, #20]
 8017e36:	1d1d      	adds	r5, r3, #4
 8017e38:	600d      	str	r5, [r1, #0]
 8017e3a:	0635      	lsls	r5, r6, #24
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	d501      	bpl.n	8017e44 <_printf_i+0x1cc>
 8017e40:	6018      	str	r0, [r3, #0]
 8017e42:	e002      	b.n	8017e4a <_printf_i+0x1d2>
 8017e44:	0671      	lsls	r1, r6, #25
 8017e46:	d5fb      	bpl.n	8017e40 <_printf_i+0x1c8>
 8017e48:	8018      	strh	r0, [r3, #0]
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	6123      	str	r3, [r4, #16]
 8017e4e:	4616      	mov	r6, r2
 8017e50:	e7ba      	b.n	8017dc8 <_printf_i+0x150>
 8017e52:	680b      	ldr	r3, [r1, #0]
 8017e54:	1d1a      	adds	r2, r3, #4
 8017e56:	600a      	str	r2, [r1, #0]
 8017e58:	681e      	ldr	r6, [r3, #0]
 8017e5a:	6862      	ldr	r2, [r4, #4]
 8017e5c:	2100      	movs	r1, #0
 8017e5e:	4630      	mov	r0, r6
 8017e60:	f7e8 fa3e 	bl	80002e0 <memchr>
 8017e64:	b108      	cbz	r0, 8017e6a <_printf_i+0x1f2>
 8017e66:	1b80      	subs	r0, r0, r6
 8017e68:	6060      	str	r0, [r4, #4]
 8017e6a:	6863      	ldr	r3, [r4, #4]
 8017e6c:	6123      	str	r3, [r4, #16]
 8017e6e:	2300      	movs	r3, #0
 8017e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e74:	e7a8      	b.n	8017dc8 <_printf_i+0x150>
 8017e76:	6923      	ldr	r3, [r4, #16]
 8017e78:	4632      	mov	r2, r6
 8017e7a:	4649      	mov	r1, r9
 8017e7c:	4640      	mov	r0, r8
 8017e7e:	47d0      	blx	sl
 8017e80:	3001      	adds	r0, #1
 8017e82:	d0ab      	beq.n	8017ddc <_printf_i+0x164>
 8017e84:	6823      	ldr	r3, [r4, #0]
 8017e86:	079b      	lsls	r3, r3, #30
 8017e88:	d413      	bmi.n	8017eb2 <_printf_i+0x23a>
 8017e8a:	68e0      	ldr	r0, [r4, #12]
 8017e8c:	9b03      	ldr	r3, [sp, #12]
 8017e8e:	4298      	cmp	r0, r3
 8017e90:	bfb8      	it	lt
 8017e92:	4618      	movlt	r0, r3
 8017e94:	e7a4      	b.n	8017de0 <_printf_i+0x168>
 8017e96:	2301      	movs	r3, #1
 8017e98:	4632      	mov	r2, r6
 8017e9a:	4649      	mov	r1, r9
 8017e9c:	4640      	mov	r0, r8
 8017e9e:	47d0      	blx	sl
 8017ea0:	3001      	adds	r0, #1
 8017ea2:	d09b      	beq.n	8017ddc <_printf_i+0x164>
 8017ea4:	3501      	adds	r5, #1
 8017ea6:	68e3      	ldr	r3, [r4, #12]
 8017ea8:	9903      	ldr	r1, [sp, #12]
 8017eaa:	1a5b      	subs	r3, r3, r1
 8017eac:	42ab      	cmp	r3, r5
 8017eae:	dcf2      	bgt.n	8017e96 <_printf_i+0x21e>
 8017eb0:	e7eb      	b.n	8017e8a <_printf_i+0x212>
 8017eb2:	2500      	movs	r5, #0
 8017eb4:	f104 0619 	add.w	r6, r4, #25
 8017eb8:	e7f5      	b.n	8017ea6 <_printf_i+0x22e>
 8017eba:	bf00      	nop
 8017ebc:	080239ba 	.word	0x080239ba
 8017ec0:	080239cb 	.word	0x080239cb

08017ec4 <_read_r>:
 8017ec4:	b538      	push	{r3, r4, r5, lr}
 8017ec6:	4d07      	ldr	r5, [pc, #28]	; (8017ee4 <_read_r+0x20>)
 8017ec8:	4604      	mov	r4, r0
 8017eca:	4608      	mov	r0, r1
 8017ecc:	4611      	mov	r1, r2
 8017ece:	2200      	movs	r2, #0
 8017ed0:	602a      	str	r2, [r5, #0]
 8017ed2:	461a      	mov	r2, r3
 8017ed4:	f7ea ffb4 	bl	8002e40 <_read>
 8017ed8:	1c43      	adds	r3, r0, #1
 8017eda:	d102      	bne.n	8017ee2 <_read_r+0x1e>
 8017edc:	682b      	ldr	r3, [r5, #0]
 8017ede:	b103      	cbz	r3, 8017ee2 <_read_r+0x1e>
 8017ee0:	6023      	str	r3, [r4, #0]
 8017ee2:	bd38      	pop	{r3, r4, r5, pc}
 8017ee4:	24008a98 	.word	0x24008a98

08017ee8 <__swbuf_r>:
 8017ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eea:	460e      	mov	r6, r1
 8017eec:	4614      	mov	r4, r2
 8017eee:	4605      	mov	r5, r0
 8017ef0:	b118      	cbz	r0, 8017efa <__swbuf_r+0x12>
 8017ef2:	6983      	ldr	r3, [r0, #24]
 8017ef4:	b90b      	cbnz	r3, 8017efa <__swbuf_r+0x12>
 8017ef6:	f7fe fefb 	bl	8016cf0 <__sinit>
 8017efa:	4b21      	ldr	r3, [pc, #132]	; (8017f80 <__swbuf_r+0x98>)
 8017efc:	429c      	cmp	r4, r3
 8017efe:	d12b      	bne.n	8017f58 <__swbuf_r+0x70>
 8017f00:	686c      	ldr	r4, [r5, #4]
 8017f02:	69a3      	ldr	r3, [r4, #24]
 8017f04:	60a3      	str	r3, [r4, #8]
 8017f06:	89a3      	ldrh	r3, [r4, #12]
 8017f08:	071a      	lsls	r2, r3, #28
 8017f0a:	d52f      	bpl.n	8017f6c <__swbuf_r+0x84>
 8017f0c:	6923      	ldr	r3, [r4, #16]
 8017f0e:	b36b      	cbz	r3, 8017f6c <__swbuf_r+0x84>
 8017f10:	6923      	ldr	r3, [r4, #16]
 8017f12:	6820      	ldr	r0, [r4, #0]
 8017f14:	1ac0      	subs	r0, r0, r3
 8017f16:	6963      	ldr	r3, [r4, #20]
 8017f18:	b2f6      	uxtb	r6, r6
 8017f1a:	4283      	cmp	r3, r0
 8017f1c:	4637      	mov	r7, r6
 8017f1e:	dc04      	bgt.n	8017f2a <__swbuf_r+0x42>
 8017f20:	4621      	mov	r1, r4
 8017f22:	4628      	mov	r0, r5
 8017f24:	f7ff fac0 	bl	80174a8 <_fflush_r>
 8017f28:	bb30      	cbnz	r0, 8017f78 <__swbuf_r+0x90>
 8017f2a:	68a3      	ldr	r3, [r4, #8]
 8017f2c:	3b01      	subs	r3, #1
 8017f2e:	60a3      	str	r3, [r4, #8]
 8017f30:	6823      	ldr	r3, [r4, #0]
 8017f32:	1c5a      	adds	r2, r3, #1
 8017f34:	6022      	str	r2, [r4, #0]
 8017f36:	701e      	strb	r6, [r3, #0]
 8017f38:	6963      	ldr	r3, [r4, #20]
 8017f3a:	3001      	adds	r0, #1
 8017f3c:	4283      	cmp	r3, r0
 8017f3e:	d004      	beq.n	8017f4a <__swbuf_r+0x62>
 8017f40:	89a3      	ldrh	r3, [r4, #12]
 8017f42:	07db      	lsls	r3, r3, #31
 8017f44:	d506      	bpl.n	8017f54 <__swbuf_r+0x6c>
 8017f46:	2e0a      	cmp	r6, #10
 8017f48:	d104      	bne.n	8017f54 <__swbuf_r+0x6c>
 8017f4a:	4621      	mov	r1, r4
 8017f4c:	4628      	mov	r0, r5
 8017f4e:	f7ff faab 	bl	80174a8 <_fflush_r>
 8017f52:	b988      	cbnz	r0, 8017f78 <__swbuf_r+0x90>
 8017f54:	4638      	mov	r0, r7
 8017f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f58:	4b0a      	ldr	r3, [pc, #40]	; (8017f84 <__swbuf_r+0x9c>)
 8017f5a:	429c      	cmp	r4, r3
 8017f5c:	d101      	bne.n	8017f62 <__swbuf_r+0x7a>
 8017f5e:	68ac      	ldr	r4, [r5, #8]
 8017f60:	e7cf      	b.n	8017f02 <__swbuf_r+0x1a>
 8017f62:	4b09      	ldr	r3, [pc, #36]	; (8017f88 <__swbuf_r+0xa0>)
 8017f64:	429c      	cmp	r4, r3
 8017f66:	bf08      	it	eq
 8017f68:	68ec      	ldreq	r4, [r5, #12]
 8017f6a:	e7ca      	b.n	8017f02 <__swbuf_r+0x1a>
 8017f6c:	4621      	mov	r1, r4
 8017f6e:	4628      	mov	r0, r5
 8017f70:	f000 f80c 	bl	8017f8c <__swsetup_r>
 8017f74:	2800      	cmp	r0, #0
 8017f76:	d0cb      	beq.n	8017f10 <__swbuf_r+0x28>
 8017f78:	f04f 37ff 	mov.w	r7, #4294967295
 8017f7c:	e7ea      	b.n	8017f54 <__swbuf_r+0x6c>
 8017f7e:	bf00      	nop
 8017f80:	080237b0 	.word	0x080237b0
 8017f84:	080237d0 	.word	0x080237d0
 8017f88:	08023790 	.word	0x08023790

08017f8c <__swsetup_r>:
 8017f8c:	4b32      	ldr	r3, [pc, #200]	; (8018058 <__swsetup_r+0xcc>)
 8017f8e:	b570      	push	{r4, r5, r6, lr}
 8017f90:	681d      	ldr	r5, [r3, #0]
 8017f92:	4606      	mov	r6, r0
 8017f94:	460c      	mov	r4, r1
 8017f96:	b125      	cbz	r5, 8017fa2 <__swsetup_r+0x16>
 8017f98:	69ab      	ldr	r3, [r5, #24]
 8017f9a:	b913      	cbnz	r3, 8017fa2 <__swsetup_r+0x16>
 8017f9c:	4628      	mov	r0, r5
 8017f9e:	f7fe fea7 	bl	8016cf0 <__sinit>
 8017fa2:	4b2e      	ldr	r3, [pc, #184]	; (801805c <__swsetup_r+0xd0>)
 8017fa4:	429c      	cmp	r4, r3
 8017fa6:	d10f      	bne.n	8017fc8 <__swsetup_r+0x3c>
 8017fa8:	686c      	ldr	r4, [r5, #4]
 8017faa:	89a3      	ldrh	r3, [r4, #12]
 8017fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017fb0:	0719      	lsls	r1, r3, #28
 8017fb2:	d42c      	bmi.n	801800e <__swsetup_r+0x82>
 8017fb4:	06dd      	lsls	r5, r3, #27
 8017fb6:	d411      	bmi.n	8017fdc <__swsetup_r+0x50>
 8017fb8:	2309      	movs	r3, #9
 8017fba:	6033      	str	r3, [r6, #0]
 8017fbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017fc0:	81a3      	strh	r3, [r4, #12]
 8017fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8017fc6:	e03e      	b.n	8018046 <__swsetup_r+0xba>
 8017fc8:	4b25      	ldr	r3, [pc, #148]	; (8018060 <__swsetup_r+0xd4>)
 8017fca:	429c      	cmp	r4, r3
 8017fcc:	d101      	bne.n	8017fd2 <__swsetup_r+0x46>
 8017fce:	68ac      	ldr	r4, [r5, #8]
 8017fd0:	e7eb      	b.n	8017faa <__swsetup_r+0x1e>
 8017fd2:	4b24      	ldr	r3, [pc, #144]	; (8018064 <__swsetup_r+0xd8>)
 8017fd4:	429c      	cmp	r4, r3
 8017fd6:	bf08      	it	eq
 8017fd8:	68ec      	ldreq	r4, [r5, #12]
 8017fda:	e7e6      	b.n	8017faa <__swsetup_r+0x1e>
 8017fdc:	0758      	lsls	r0, r3, #29
 8017fde:	d512      	bpl.n	8018006 <__swsetup_r+0x7a>
 8017fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017fe2:	b141      	cbz	r1, 8017ff6 <__swsetup_r+0x6a>
 8017fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017fe8:	4299      	cmp	r1, r3
 8017fea:	d002      	beq.n	8017ff2 <__swsetup_r+0x66>
 8017fec:	4630      	mov	r0, r6
 8017fee:	f7ff facf 	bl	8017590 <_free_r>
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	6363      	str	r3, [r4, #52]	; 0x34
 8017ff6:	89a3      	ldrh	r3, [r4, #12]
 8017ff8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017ffc:	81a3      	strh	r3, [r4, #12]
 8017ffe:	2300      	movs	r3, #0
 8018000:	6063      	str	r3, [r4, #4]
 8018002:	6923      	ldr	r3, [r4, #16]
 8018004:	6023      	str	r3, [r4, #0]
 8018006:	89a3      	ldrh	r3, [r4, #12]
 8018008:	f043 0308 	orr.w	r3, r3, #8
 801800c:	81a3      	strh	r3, [r4, #12]
 801800e:	6923      	ldr	r3, [r4, #16]
 8018010:	b94b      	cbnz	r3, 8018026 <__swsetup_r+0x9a>
 8018012:	89a3      	ldrh	r3, [r4, #12]
 8018014:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801801c:	d003      	beq.n	8018026 <__swsetup_r+0x9a>
 801801e:	4621      	mov	r1, r4
 8018020:	4630      	mov	r0, r6
 8018022:	f000 f84d 	bl	80180c0 <__smakebuf_r>
 8018026:	89a0      	ldrh	r0, [r4, #12]
 8018028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801802c:	f010 0301 	ands.w	r3, r0, #1
 8018030:	d00a      	beq.n	8018048 <__swsetup_r+0xbc>
 8018032:	2300      	movs	r3, #0
 8018034:	60a3      	str	r3, [r4, #8]
 8018036:	6963      	ldr	r3, [r4, #20]
 8018038:	425b      	negs	r3, r3
 801803a:	61a3      	str	r3, [r4, #24]
 801803c:	6923      	ldr	r3, [r4, #16]
 801803e:	b943      	cbnz	r3, 8018052 <__swsetup_r+0xc6>
 8018040:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018044:	d1ba      	bne.n	8017fbc <__swsetup_r+0x30>
 8018046:	bd70      	pop	{r4, r5, r6, pc}
 8018048:	0781      	lsls	r1, r0, #30
 801804a:	bf58      	it	pl
 801804c:	6963      	ldrpl	r3, [r4, #20]
 801804e:	60a3      	str	r3, [r4, #8]
 8018050:	e7f4      	b.n	801803c <__swsetup_r+0xb0>
 8018052:	2000      	movs	r0, #0
 8018054:	e7f7      	b.n	8018046 <__swsetup_r+0xba>
 8018056:	bf00      	nop
 8018058:	240002a8 	.word	0x240002a8
 801805c:	080237b0 	.word	0x080237b0
 8018060:	080237d0 	.word	0x080237d0
 8018064:	08023790 	.word	0x08023790

08018068 <abort>:
 8018068:	b508      	push	{r3, lr}
 801806a:	2006      	movs	r0, #6
 801806c:	f000 f8d0 	bl	8018210 <raise>
 8018070:	2001      	movs	r0, #1
 8018072:	f7ea fedb 	bl	8002e2c <_exit>

08018076 <__swhatbuf_r>:
 8018076:	b570      	push	{r4, r5, r6, lr}
 8018078:	460e      	mov	r6, r1
 801807a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801807e:	2900      	cmp	r1, #0
 8018080:	b096      	sub	sp, #88	; 0x58
 8018082:	4614      	mov	r4, r2
 8018084:	461d      	mov	r5, r3
 8018086:	da07      	bge.n	8018098 <__swhatbuf_r+0x22>
 8018088:	2300      	movs	r3, #0
 801808a:	602b      	str	r3, [r5, #0]
 801808c:	89b3      	ldrh	r3, [r6, #12]
 801808e:	061a      	lsls	r2, r3, #24
 8018090:	d410      	bmi.n	80180b4 <__swhatbuf_r+0x3e>
 8018092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018096:	e00e      	b.n	80180b6 <__swhatbuf_r+0x40>
 8018098:	466a      	mov	r2, sp
 801809a:	f000 f8d5 	bl	8018248 <_fstat_r>
 801809e:	2800      	cmp	r0, #0
 80180a0:	dbf2      	blt.n	8018088 <__swhatbuf_r+0x12>
 80180a2:	9a01      	ldr	r2, [sp, #4]
 80180a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80180a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80180ac:	425a      	negs	r2, r3
 80180ae:	415a      	adcs	r2, r3
 80180b0:	602a      	str	r2, [r5, #0]
 80180b2:	e7ee      	b.n	8018092 <__swhatbuf_r+0x1c>
 80180b4:	2340      	movs	r3, #64	; 0x40
 80180b6:	2000      	movs	r0, #0
 80180b8:	6023      	str	r3, [r4, #0]
 80180ba:	b016      	add	sp, #88	; 0x58
 80180bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080180c0 <__smakebuf_r>:
 80180c0:	898b      	ldrh	r3, [r1, #12]
 80180c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80180c4:	079d      	lsls	r5, r3, #30
 80180c6:	4606      	mov	r6, r0
 80180c8:	460c      	mov	r4, r1
 80180ca:	d507      	bpl.n	80180dc <__smakebuf_r+0x1c>
 80180cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80180d0:	6023      	str	r3, [r4, #0]
 80180d2:	6123      	str	r3, [r4, #16]
 80180d4:	2301      	movs	r3, #1
 80180d6:	6163      	str	r3, [r4, #20]
 80180d8:	b002      	add	sp, #8
 80180da:	bd70      	pop	{r4, r5, r6, pc}
 80180dc:	ab01      	add	r3, sp, #4
 80180de:	466a      	mov	r2, sp
 80180e0:	f7ff ffc9 	bl	8018076 <__swhatbuf_r>
 80180e4:	9900      	ldr	r1, [sp, #0]
 80180e6:	4605      	mov	r5, r0
 80180e8:	4630      	mov	r0, r6
 80180ea:	f7fe fedd 	bl	8016ea8 <_malloc_r>
 80180ee:	b948      	cbnz	r0, 8018104 <__smakebuf_r+0x44>
 80180f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180f4:	059a      	lsls	r2, r3, #22
 80180f6:	d4ef      	bmi.n	80180d8 <__smakebuf_r+0x18>
 80180f8:	f023 0303 	bic.w	r3, r3, #3
 80180fc:	f043 0302 	orr.w	r3, r3, #2
 8018100:	81a3      	strh	r3, [r4, #12]
 8018102:	e7e3      	b.n	80180cc <__smakebuf_r+0xc>
 8018104:	4b0d      	ldr	r3, [pc, #52]	; (801813c <__smakebuf_r+0x7c>)
 8018106:	62b3      	str	r3, [r6, #40]	; 0x28
 8018108:	89a3      	ldrh	r3, [r4, #12]
 801810a:	6020      	str	r0, [r4, #0]
 801810c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018110:	81a3      	strh	r3, [r4, #12]
 8018112:	9b00      	ldr	r3, [sp, #0]
 8018114:	6163      	str	r3, [r4, #20]
 8018116:	9b01      	ldr	r3, [sp, #4]
 8018118:	6120      	str	r0, [r4, #16]
 801811a:	b15b      	cbz	r3, 8018134 <__smakebuf_r+0x74>
 801811c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018120:	4630      	mov	r0, r6
 8018122:	f000 f8a3 	bl	801826c <_isatty_r>
 8018126:	b128      	cbz	r0, 8018134 <__smakebuf_r+0x74>
 8018128:	89a3      	ldrh	r3, [r4, #12]
 801812a:	f023 0303 	bic.w	r3, r3, #3
 801812e:	f043 0301 	orr.w	r3, r3, #1
 8018132:	81a3      	strh	r3, [r4, #12]
 8018134:	89a0      	ldrh	r0, [r4, #12]
 8018136:	4305      	orrs	r5, r0
 8018138:	81a5      	strh	r5, [r4, #12]
 801813a:	e7cd      	b.n	80180d8 <__smakebuf_r+0x18>
 801813c:	08016c89 	.word	0x08016c89

08018140 <memmove>:
 8018140:	4288      	cmp	r0, r1
 8018142:	b510      	push	{r4, lr}
 8018144:	eb01 0402 	add.w	r4, r1, r2
 8018148:	d902      	bls.n	8018150 <memmove+0x10>
 801814a:	4284      	cmp	r4, r0
 801814c:	4623      	mov	r3, r4
 801814e:	d807      	bhi.n	8018160 <memmove+0x20>
 8018150:	1e43      	subs	r3, r0, #1
 8018152:	42a1      	cmp	r1, r4
 8018154:	d008      	beq.n	8018168 <memmove+0x28>
 8018156:	f811 2b01 	ldrb.w	r2, [r1], #1
 801815a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801815e:	e7f8      	b.n	8018152 <memmove+0x12>
 8018160:	4402      	add	r2, r0
 8018162:	4601      	mov	r1, r0
 8018164:	428a      	cmp	r2, r1
 8018166:	d100      	bne.n	801816a <memmove+0x2a>
 8018168:	bd10      	pop	{r4, pc}
 801816a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801816e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018172:	e7f7      	b.n	8018164 <memmove+0x24>

08018174 <_realloc_r>:
 8018174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018176:	4607      	mov	r7, r0
 8018178:	4614      	mov	r4, r2
 801817a:	460e      	mov	r6, r1
 801817c:	b921      	cbnz	r1, 8018188 <_realloc_r+0x14>
 801817e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018182:	4611      	mov	r1, r2
 8018184:	f7fe be90 	b.w	8016ea8 <_malloc_r>
 8018188:	b922      	cbnz	r2, 8018194 <_realloc_r+0x20>
 801818a:	f7ff fa01 	bl	8017590 <_free_r>
 801818e:	4625      	mov	r5, r4
 8018190:	4628      	mov	r0, r5
 8018192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018194:	f000 f87a 	bl	801828c <_malloc_usable_size_r>
 8018198:	42a0      	cmp	r0, r4
 801819a:	d20f      	bcs.n	80181bc <_realloc_r+0x48>
 801819c:	4621      	mov	r1, r4
 801819e:	4638      	mov	r0, r7
 80181a0:	f7fe fe82 	bl	8016ea8 <_malloc_r>
 80181a4:	4605      	mov	r5, r0
 80181a6:	2800      	cmp	r0, #0
 80181a8:	d0f2      	beq.n	8018190 <_realloc_r+0x1c>
 80181aa:	4631      	mov	r1, r6
 80181ac:	4622      	mov	r2, r4
 80181ae:	f7fe fe64 	bl	8016e7a <memcpy>
 80181b2:	4631      	mov	r1, r6
 80181b4:	4638      	mov	r0, r7
 80181b6:	f7ff f9eb 	bl	8017590 <_free_r>
 80181ba:	e7e9      	b.n	8018190 <_realloc_r+0x1c>
 80181bc:	4635      	mov	r5, r6
 80181be:	e7e7      	b.n	8018190 <_realloc_r+0x1c>

080181c0 <_raise_r>:
 80181c0:	291f      	cmp	r1, #31
 80181c2:	b538      	push	{r3, r4, r5, lr}
 80181c4:	4604      	mov	r4, r0
 80181c6:	460d      	mov	r5, r1
 80181c8:	d904      	bls.n	80181d4 <_raise_r+0x14>
 80181ca:	2316      	movs	r3, #22
 80181cc:	6003      	str	r3, [r0, #0]
 80181ce:	f04f 30ff 	mov.w	r0, #4294967295
 80181d2:	bd38      	pop	{r3, r4, r5, pc}
 80181d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80181d6:	b112      	cbz	r2, 80181de <_raise_r+0x1e>
 80181d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80181dc:	b94b      	cbnz	r3, 80181f2 <_raise_r+0x32>
 80181de:	4620      	mov	r0, r4
 80181e0:	f000 f830 	bl	8018244 <_getpid_r>
 80181e4:	462a      	mov	r2, r5
 80181e6:	4601      	mov	r1, r0
 80181e8:	4620      	mov	r0, r4
 80181ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181ee:	f000 b817 	b.w	8018220 <_kill_r>
 80181f2:	2b01      	cmp	r3, #1
 80181f4:	d00a      	beq.n	801820c <_raise_r+0x4c>
 80181f6:	1c59      	adds	r1, r3, #1
 80181f8:	d103      	bne.n	8018202 <_raise_r+0x42>
 80181fa:	2316      	movs	r3, #22
 80181fc:	6003      	str	r3, [r0, #0]
 80181fe:	2001      	movs	r0, #1
 8018200:	e7e7      	b.n	80181d2 <_raise_r+0x12>
 8018202:	2400      	movs	r4, #0
 8018204:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018208:	4628      	mov	r0, r5
 801820a:	4798      	blx	r3
 801820c:	2000      	movs	r0, #0
 801820e:	e7e0      	b.n	80181d2 <_raise_r+0x12>

08018210 <raise>:
 8018210:	4b02      	ldr	r3, [pc, #8]	; (801821c <raise+0xc>)
 8018212:	4601      	mov	r1, r0
 8018214:	6818      	ldr	r0, [r3, #0]
 8018216:	f7ff bfd3 	b.w	80181c0 <_raise_r>
 801821a:	bf00      	nop
 801821c:	240002a8 	.word	0x240002a8

08018220 <_kill_r>:
 8018220:	b538      	push	{r3, r4, r5, lr}
 8018222:	4d07      	ldr	r5, [pc, #28]	; (8018240 <_kill_r+0x20>)
 8018224:	2300      	movs	r3, #0
 8018226:	4604      	mov	r4, r0
 8018228:	4608      	mov	r0, r1
 801822a:	4611      	mov	r1, r2
 801822c:	602b      	str	r3, [r5, #0]
 801822e:	f7ea fded 	bl	8002e0c <_kill>
 8018232:	1c43      	adds	r3, r0, #1
 8018234:	d102      	bne.n	801823c <_kill_r+0x1c>
 8018236:	682b      	ldr	r3, [r5, #0]
 8018238:	b103      	cbz	r3, 801823c <_kill_r+0x1c>
 801823a:	6023      	str	r3, [r4, #0]
 801823c:	bd38      	pop	{r3, r4, r5, pc}
 801823e:	bf00      	nop
 8018240:	24008a98 	.word	0x24008a98

08018244 <_getpid_r>:
 8018244:	f7ea bdda 	b.w	8002dfc <_getpid>

08018248 <_fstat_r>:
 8018248:	b538      	push	{r3, r4, r5, lr}
 801824a:	4d07      	ldr	r5, [pc, #28]	; (8018268 <_fstat_r+0x20>)
 801824c:	2300      	movs	r3, #0
 801824e:	4604      	mov	r4, r0
 8018250:	4608      	mov	r0, r1
 8018252:	4611      	mov	r1, r2
 8018254:	602b      	str	r3, [r5, #0]
 8018256:	f7ea fe1c 	bl	8002e92 <_fstat>
 801825a:	1c43      	adds	r3, r0, #1
 801825c:	d102      	bne.n	8018264 <_fstat_r+0x1c>
 801825e:	682b      	ldr	r3, [r5, #0]
 8018260:	b103      	cbz	r3, 8018264 <_fstat_r+0x1c>
 8018262:	6023      	str	r3, [r4, #0]
 8018264:	bd38      	pop	{r3, r4, r5, pc}
 8018266:	bf00      	nop
 8018268:	24008a98 	.word	0x24008a98

0801826c <_isatty_r>:
 801826c:	b538      	push	{r3, r4, r5, lr}
 801826e:	4d06      	ldr	r5, [pc, #24]	; (8018288 <_isatty_r+0x1c>)
 8018270:	2300      	movs	r3, #0
 8018272:	4604      	mov	r4, r0
 8018274:	4608      	mov	r0, r1
 8018276:	602b      	str	r3, [r5, #0]
 8018278:	f7ea fe1b 	bl	8002eb2 <_isatty>
 801827c:	1c43      	adds	r3, r0, #1
 801827e:	d102      	bne.n	8018286 <_isatty_r+0x1a>
 8018280:	682b      	ldr	r3, [r5, #0]
 8018282:	b103      	cbz	r3, 8018286 <_isatty_r+0x1a>
 8018284:	6023      	str	r3, [r4, #0]
 8018286:	bd38      	pop	{r3, r4, r5, pc}
 8018288:	24008a98 	.word	0x24008a98

0801828c <_malloc_usable_size_r>:
 801828c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018290:	1f18      	subs	r0, r3, #4
 8018292:	2b00      	cmp	r3, #0
 8018294:	bfbc      	itt	lt
 8018296:	580b      	ldrlt	r3, [r1, r0]
 8018298:	18c0      	addlt	r0, r0, r3
 801829a:	4770      	bx	lr

0801829c <_init>:
 801829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801829e:	bf00      	nop
 80182a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182a2:	bc08      	pop	{r3}
 80182a4:	469e      	mov	lr, r3
 80182a6:	4770      	bx	lr

080182a8 <_fini>:
 80182a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182aa:	bf00      	nop
 80182ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182ae:	bc08      	pop	{r3}
 80182b0:	469e      	mov	lr, r3
 80182b2:	4770      	bx	lr
