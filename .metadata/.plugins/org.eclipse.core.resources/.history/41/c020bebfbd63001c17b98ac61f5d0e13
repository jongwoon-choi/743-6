/*
 * parameter.h
 *
 *  Created on: 2021. 7. 21.
 *      Author: hl3xs
 */


#include "stdbool.h"

#ifndef __INC_PARAMETER_H_
#define __INC_PARAMETER_H_

#define true  1
/*
#define MAX_BUFFER_SIZE    (64)


typedef struct{
  uint8_t head;
  uint8_t tail;
  uint8_t buffer[MAX_BUFFER_SIZE];
}uart_t;

uart_t  	uart_1, uart_4;
*/
uint16_t 	value[6];  // to store the adc values

// HP serial and hardware (Import from ACNE.c)
uint8_t     Rx_recv    ;
uint8_t 	Rx1_Buffer[16], Rx4_Buffer[16];


bool		Warning,Laser_ON,Monitor, Count_energy, Stamp, Ready, HP_Fire,
            Sound, Hand_foot, GUI_boot;

uint32_t    Power_DAC, Power_DAC_t;
uint16_t 	Energy, Energy_t, Repeat, On_Time, Off_Time;
uint8_t 	TIM_count, Fire, Pulse, Freq, page   ;

int16_t 	HP_Temp  ;
uint8_t 	HP_lens ;

uint32_t 	sum_count, sum_count_t, sum_energy, sum_energy_t;

// EEPROM read & write Buffer


uint8_t 	instruction[] = { 0x03, 0x02, 0x04, 0x06, 0x05, 0x01 };
uint8_t 	T_buffer[] = {0x00, 0x00, 0x00, 0x00};
uint8_t 	R_buffer[] = {0x00, 0x00, 0x00, 0x00};

// [0:3]: Read, Write, Write disable(WRDI), Write enable(WREN)
// [4:5]: Read Status Register(RDSR), Write status  register(WRSR)


uint8_t GUI_parameter[20] = { 0, };

uint8_t GUI_first[] = 	{ 0x5A, 0xA5, 0x04, 0x83, 0x00, 0x0F, 0x01 };//Version?
uint8_t GUI_head[] = 	{ 0x5A, 0xA5, 0x05, 0x82   };
uint8_t GUI_page[] = 	{ 0x5A, 0xA5, 0x04, 0x83, 0x00, 0x14, 0x01 };//Page?

uint8_t GUI_key0[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x15, 0x20, 0x00, 0x01 };
uint8_t GUI_key1[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x15, 0x22, 0x00, 0x01 };
uint8_t GUI_key2[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x15, 0x24, 0x00, 0x01 };
uint8_t GUI_key3[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x15, 0x26, 0x00, 0x01 };
uint8_t GUI_main[] = 	{ 0x5A, 0xA5, 0x07, 0x82, 0x00, 0x84, 0x5A, 0x01, 0x00, 0x01 };
uint8_t GUI_passwd[] = 	{ 0x5A, 0xA5, 0x07, 0x82, 0x00, 0x84, 0x5A, 0x01, 0x00, 0x00 };

uint8_t GUI_stamp[] = 	{ 0x5A, 0xA5, 0x07, 0x82, 0x00, 0x84, 0x5A, 0x01, 0x00, 0x00};
uint8_t GUI_toning[] =	{ 0x5A, 0xA5, 0x07, 0x82, 0x00, 0x84, 0x5A, 0x01, 0x00, 0x01};

uint8_t GUI_ready[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x14, 0x00, 0x00, 0x01 };
uint8_t GUI_stop[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x14, 0x00, 0x00, 0x00 };
uint8_t GUI_sound[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x02, 0x00, 0x01 };
uint8_t GUI_lens6[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x04, 0x00, 0x01 };
uint8_t GUI_lens12[] =  { 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x04, 0x00, 0x00 };
uint8_t GUI_lensX[] =   { 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x04, 0x00, 0x02 };
uint8_t GUI_temp[] =    { 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x16, 0x00, 0x00 };

uint8_t GUI_stamp_bar[] =  { 0x5A, 0xA5, 0x05, 0x82, 0x13, 0x00, 0x05, 0x17 };
uint8_t GUI_toning_bar[] = { 0x5A, 0xA5, 0x05, 0x82, 0x13, 0x05, 0x00, 0x1A };

uint8_t  GUI_energy[] =   	{ 0x5A, 0xA5, 0x05, 0x82, 0x13, 0x02, 0x00, 0x03 };//
uint8_t  GUI_energy_t[] =  	{ 0x5A, 0xA5, 0x05, 0x82, 0x13, 0x07, 0x00, 0x03 };//

uint8_t  GUI_repeat[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x05, 0x00, 0x03 };
uint8_t  GUI_on_time[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x14, 0x00, 0x00 };
uint8_t  GUI_off_time[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x15, 0x00, 0x22 };
uint8_t  GUI_pulse[] = 		{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x60, 0x00, 0x03 };
uint8_t  GUI_frequency[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x80, 0x00, 0x03 };

uint8_t GUI_hightemp[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x17, 0x00, 0x01 };
uint8_t GUI_foot[] = 		{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x03, 0x00, 0x01 };
uint8_t GUI_sum_mode[] =  	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x06, 0x00, 0x00 };
uint8_t GUI_sum_value[] = 	{ 0x5A, 0xA5, 0x07, 0x82, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00 };

uint8_t GUI_write[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x13, 0x00, 0x20 };
uint8_t GUI_write2[] =  { 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x13, 0x00, 0x30 };

// Memory for  Stamp mode S1..S4
uint8_t GUI_put1[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x14, 0x00, 0x01 };
uint8_t GUI_put2[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x14, 0x00, 0x00 };
uint8_t GUI_put3[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x24, 0x00, 0x01 };
uint8_t GUI_put4[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x24, 0x00, 0x00 };
uint8_t GUI_put5[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x34, 0x00, 0x01 };
uint8_t GUI_put6[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x34, 0x00, 0x00 };
uint8_t GUI_put7[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x44, 0x00, 0x01 };
uint8_t GUI_put8[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x44, 0x00, 0x00 };

// Memory for Toning  mode T1..T4
uint8_t GUI_put9[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x54, 0x00, 0x01 };
uint8_t GUI_put10[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x54, 0x00, 0x00 };
uint8_t GUI_put11[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x64, 0x00, 0x01 };
uint8_t GUI_put12[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x64, 0x00, 0x00 };
uint8_t GUI_put13[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x74, 0x00, 0x01 };
uint8_t GUI_put14[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x74, 0x00, 0x00 };
uint8_t GUI_put15[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x94, 0x00, 0x01 };
uint8_t GUI_put16[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x94, 0x00, 0x00 };


// Put the value over the Memory button
uint8_t  GUI_S1[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x13, 0x00, 0x00 };
uint8_t  GUI_S2[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x23, 0x00, 0x00 };
uint8_t  GUI_S3[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x33, 0x00, 0x00 };
uint8_t  GUI_S4[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x43, 0x00, 0x00 };

uint8_t  GUI_T1[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x53, 0x00, 0x00 };
uint8_t  GUI_T2[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x63, 0x00, 0x00 };
uint8_t  GUI_T3[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x73, 0x00, 0x00 };//1673
uint8_t  GUI_T4[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x16, 0x93, 0x00, 0x00 };//1693

// Measurement monitor data
uint8_t GUI_LD_Volt[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x70, 0x00, 0x00 };
uint8_t GUI_LD_Current[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x72, 0x00, 0x00 };
uint8_t GUI_LD_Power[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x74, 0x00, 0x00 };
uint8_t GUI_Calibration[] = { 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x76, 0x00, 0x00 };
uint8_t GUI_DAC_Volt[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x78, 0x00, 0x00 };
uint8_t GUI_ADC_IN14[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x13, 0x55, 0x00, 0x00 };
uint8_t GUI_mon_power[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x13, 0x50, 0x00, 0x00 };
uint8_t GUI_mon_Laser_ON[] ={ 0x5A, 0xA5, 0x05, 0x82, 0x13, 0x40, 0x00, 0x01 };

uint8_t GUI_measure_4[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x54, 0x00, 0x00 };
uint8_t GUI_measure_5[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x55, 0x00, 0x17 };
uint8_t GUI_measure_6[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x56, 0x00, 0x18 };
uint8_t GUI_measure_7[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x57, 0x00, 0x19 };
uint8_t GUI_measure_8[] = 	{ 0x5A, 0xA5, 0x05, 0x82, 0x12, 0x58, 0x00, 0x1A };



/*  02: Beek, 03: Stop, 04: Clear, 05: Mute, 06: Sound, 07: Hand, 0x08: Foot
 * 11: Job Palade, 12: Setup Palade, 13: Cooling, 14: Stamp, 15: Ready
 * 16: Toning, 17: Boook~
 * 20: waring, 21: total energy, 22: total count, 23: 12 mm, 24: 5 mm
 * 25: Please put the collimated lens, 26: Get, 27: Read, 28, Write
 * 29,30: Welcome to the AcneBeam world, and ready to use.
 */

#endif /* INC_PARAMETER_H_ */
