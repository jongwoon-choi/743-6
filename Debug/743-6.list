
743-6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c08  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b908  08017ea8  08017ea8  00027ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080237b0  080237b0  000337b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080237b8  080237b8  000337b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080237bc  080237bc  000337bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000042c  24000000  080237c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000066ac  2400042c  08023bec  0004042c  2**2
                  ALLOC
  8 ._user_heap_stack 00004000  24006ad8  08023bec  00046ad8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004042c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00057726  00000000  00000000  0004045a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009394  00000000  00000000  00097b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002890  00000000  00000000  000a0f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  000a37a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044f96  00000000  00000000  000a5d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000382b1  00000000  00000000  000eac9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001940b9  00000000  00000000  00122f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002b7008  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b9c4  00000000  00000000  002b705c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400042c 	.word	0x2400042c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017e90 	.word	0x08017e90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000430 	.word	0x24000430
 80002dc:	08017e90 	.word	0x08017e90

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ac:	4b30      	ldr	r3, [pc, #192]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006ae:	4a31      	ldr	r2, [pc, #196]	; (8000774 <MX_ADC1_Init+0xec>)
 80006b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c0:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006da:	2201      	movs	r2, #1
 80006dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b24      	ldr	r3, [pc, #144]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_ADC1_Init+0xe8>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070a:	4819      	ldr	r0, [pc, #100]	; (8000770 <MX_ADC1_Init+0xe8>)
 800070c:	f004 fc8e 	bl	800502c <HAL_ADC_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000716:	f001 fb57 	bl	8001dc8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4812      	ldr	r0, [pc, #72]	; (8000770 <MX_ADC1_Init+0xe8>)
 8000726:	f005 faa1 	bl	8005c6c <HAL_ADCEx_MultiModeConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000730:	f001 fb4a 	bl	8001dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_ADC1_Init+0xf0>)
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000738:	2306      	movs	r3, #6
 800073a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000740:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000746:	2304      	movs	r3, #4
 8000748:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <MX_ADC1_Init+0xe8>)
 8000758:	f004 fe08 	bl	800536c <HAL_ADC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000762:	f001 fb31 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	24004c38 	.word	0x24004c38
 8000774:	40022000 	.word	0x40022000
 8000778:	1d500080 	.word	0x1d500080

0800077c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]
 8000792:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_ADC2_Init+0xc0>)
 8000796:	4a2a      	ldr	r2, [pc, #168]	; (8000840 <MX_ADC2_Init+0xc4>)
 8000798:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_ADC2_Init+0xc0>)
 800079c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_ADC2_Init+0xc0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC2_Init+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_ADC2_Init+0xc0>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_ADC2_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_ADC2_Init+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_ADC2_Init+0xc0>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ADC2_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC2_Init+0xc0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ADC2_Init+0xc0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_ADC2_Init+0xc0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_ADC2_Init+0xc0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_ADC2_Init+0xc0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_ADC2_Init+0xc0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <MX_ADC2_Init+0xc0>)
 80007f4:	f004 fc1a 	bl	800502c <HAL_ADC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80007fe:	f001 fae3 	bl	8001dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_ADC2_Init+0xc8>)
 8000804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000806:	2306      	movs	r3, #6
 8000808:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800080e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000812:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000814:	2304      	movs	r3, #4
 8000816:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_ADC2_Init+0xc0>)
 8000826:	f004 fda1 	bl	800536c <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000830:	f001 faca 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24004bd0 	.word	0x24004bd0
 8000840:	40022100 	.word	0x40022100
 8000844:	0c900008 	.word	0x0c900008

08000848 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <MX_ADC3_Init+0xc4>)
 8000864:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000868:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800086c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_ADC3_Init+0xc0>)
 800087c:	2204      	movs	r2, #4
 800087e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_ADC3_Init+0xc0>)
 800088e:	2201      	movs	r2, #1
 8000890:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_ADC3_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_ADC3_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008c0:	f004 fbb4 	bl	800502c <HAL_ADC_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80008ca:	f001 fa7d 	bl	8001dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_ADC3_Init+0xc8>)
 80008d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d2:	2306      	movs	r3, #6
 80008d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008da:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008e0:	2304      	movs	r3, #4
 80008e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_ADC3_Init+0xc0>)
 80008f2:	f004 fd3b 	bl	800536c <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80008fc:	f001 fa64 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	24004c9c 	.word	0x24004c9c
 800090c:	58026000 	.word	0x58026000
 8000910:	2e300800 	.word	0x2e300800

08000914 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b090      	sub	sp, #64	; 0x40
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a6f      	ldr	r2, [pc, #444]	; (8000af0 <HAL_ADC_MspInit+0x1dc>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d133      	bne.n	800099e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000936:	4b6f      	ldr	r3, [pc, #444]	; (8000af4 <HAL_ADC_MspInit+0x1e0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	4a6d      	ldr	r2, [pc, #436]	; (8000af4 <HAL_ADC_MspInit+0x1e0>)
 800093e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000940:	4b6c      	ldr	r3, [pc, #432]	; (8000af4 <HAL_ADC_MspInit+0x1e0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d10e      	bne.n	8000966 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000948:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 800094a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800094e:	4a6a      	ldr	r2, [pc, #424]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000958:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 800095a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800095e:	f003 0320 	and.w	r3, r3, #32
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
 8000964:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b64      	ldr	r3, [pc, #400]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	4a62      	ldr	r2, [pc, #392]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000976:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000988:	2303      	movs	r3, #3
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	4859      	ldr	r0, [pc, #356]	; (8000afc <HAL_ADC_MspInit+0x1e8>)
 8000998:	f006 f9da 	bl	8006d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800099c:	e0a3      	b.n	8000ae6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC2)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a57      	ldr	r2, [pc, #348]	; (8000b00 <HAL_ADC_MspInit+0x1ec>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d169      	bne.n	8000a7c <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009a8:	4b52      	ldr	r3, [pc, #328]	; (8000af4 <HAL_ADC_MspInit+0x1e0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	4a51      	ldr	r2, [pc, #324]	; (8000af4 <HAL_ADC_MspInit+0x1e0>)
 80009b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009b2:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <HAL_ADC_MspInit+0x1e0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d10e      	bne.n	80009d8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009ba:	4b4f      	ldr	r3, [pc, #316]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 80009bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009c0:	4a4d      	ldr	r2, [pc, #308]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 80009c2:	f043 0320 	orr.w	r3, r3, #32
 80009c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009ca:	4b4b      	ldr	r3, [pc, #300]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 80009cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009d0:	f003 0320 	and.w	r3, r3, #32
 80009d4:	623b      	str	r3, [r7, #32]
 80009d6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	4a46      	ldr	r2, [pc, #280]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e8:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
 80009f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	4a3e      	ldr	r2, [pc, #248]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a06:	4b3c      	ldr	r3, [pc, #240]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	4a37      	ldr	r2, [pc, #220]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a24:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a32:	2340      	movs	r3, #64	; 0x40
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a36:	2303      	movs	r3, #3
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a42:	4619      	mov	r1, r3
 8000a44:	482d      	ldr	r0, [pc, #180]	; (8000afc <HAL_ADC_MspInit+0x1e8>)
 8000a46:	f006 f983 	bl	8006d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4829      	ldr	r0, [pc, #164]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000a5e:	f006 f977 	bl	8006d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a72:	4619      	mov	r1, r3
 8000a74:	4824      	ldr	r0, [pc, #144]	; (8000b08 <HAL_ADC_MspInit+0x1f4>)
 8000a76:	f006 f96b 	bl	8006d50 <HAL_GPIO_Init>
}
 8000a7a:	e034      	b.n	8000ae6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC3)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a22      	ldr	r2, [pc, #136]	; (8000b0c <HAL_ADC_MspInit+0x1f8>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d12f      	bne.n	8000ae6 <HAL_ADC_MspInit+0x1d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_ADC_MspInit+0x1e4>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <HAL_ADC_MspInit+0x1f0>)
 8000ad6:	f006 f93b 	bl	8006d50 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ada:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000ade:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae2:	f004 f901 	bl	8004ce8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000ae6:	bf00      	nop
 8000ae8:	3740      	adds	r7, #64	; 0x40
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40022000 	.word	0x40022000
 8000af4:	24000448 	.word	0x24000448
 8000af8:	58024400 	.word	0x58024400
 8000afc:	58020000 	.word	0x58020000
 8000b00:	40022100 	.word	0x40022100
 8000b04:	58020800 	.word	0x58020800
 8000b08:	58020400 	.word	0x58020400
 8000b0c:	58026000 	.word	0x58026000

08000b10 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2224      	movs	r2, #36	; 0x24
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f014 fb42 	bl	80151a6 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_DAC1_Init+0x70>)
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <MX_DAC1_Init+0x74>)
 8000b26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b28:	4815      	ldr	r0, [pc, #84]	; (8000b80 <MX_DAC1_Init+0x70>)
 8000b2a:	f005 fa5d 	bl	8005fe8 <HAL_DAC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b34:	f001 f948 	bl	8001dc8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <MX_DAC1_Init+0x70>)
 8000b54:	f005 fa6a 	bl	800602c <HAL_DAC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b5e:	f001 f933 	bl	8001dc8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2210      	movs	r2, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_DAC1_Init+0x70>)
 8000b6a:	f005 fa5f 	bl	800602c <HAL_DAC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000b74:	f001 f928 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	24004d48 	.word	0x24004d48
 8000b84:	40007400 	.word	0x40007400

08000b88 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <HAL_DAC_MspInit+0x80>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d129      	bne.n	8000bfe <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_DAC_MspInit+0x84>)
 8000bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb0:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <HAL_DAC_MspInit+0x84>)
 8000bb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_DAC_MspInit+0x84>)
 8000bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_DAC_MspInit+0x84>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <HAL_DAC_MspInit+0x84>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_DAC_MspInit+0x84>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000be6:	2330      	movs	r3, #48	; 0x30
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bea:	2303      	movs	r3, #3
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_DAC_MspInit+0x88>)
 8000bfa:	f006 f8a9 	bl	8006d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40007400 	.word	0x40007400
 8000c0c:	58024400 	.word	0x58024400
 8000c10:	58020000 	.word	0x58020000

08000c14 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <vApplicationGetIdleTaskMemory+0x30>)
 8000c2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	2400044c 	.word	0x2400044c
 8000c44:	24000500 	.word	0x24000500

08000c48 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b0b8      	sub	sp, #224	; 0xe0
 8000c4c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c4e:	4b4d      	ldr	r3, [pc, #308]	; (8000d84 <MX_FREERTOS_Init+0x13c>)
 8000c50:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000c54:	461d      	mov	r5, r3
 8000c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c62:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f012 f8c9 	bl	8012e00 <osThreadCreate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a45      	ldr	r2, [pc, #276]	; (8000d88 <MX_FREERTOS_Init+0x140>)
 8000c72:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 256);
 8000c74:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <MX_FREERTOS_Init+0x144>)
 8000c76:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000c88:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f012 f8b6 	bl	8012e00 <osThreadCreate>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4a3e      	ldr	r2, [pc, #248]	; (8000d90 <MX_FREERTOS_Init+0x148>)
 8000c98:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000c9a:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <MX_FREERTOS_Init+0x14c>)
 8000c9c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000ca0:	461d      	mov	r5, r3
 8000ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000caa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000cae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f012 f8a3 	bl	8012e00 <osThreadCreate>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a36      	ldr	r2, [pc, #216]	; (8000d98 <MX_FREERTOS_Init+0x150>)
 8000cbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <MX_FREERTOS_Init+0x154>)
 8000cc2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000cc6:	461d      	mov	r5, r3
 8000cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000cd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f012 f890 	bl	8012e00 <osThreadCreate>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4a2f      	ldr	r2, [pc, #188]	; (8000da0 <MX_FREERTOS_Init+0x158>)
 8000ce4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 128);
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MX_FREERTOS_Init+0x15c>)
 8000ce8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000cec:	461d      	mov	r5, r3
 8000cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000cfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f012 f87d 	bl	8012e00 <osThreadCreate>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a27      	ldr	r2, [pc, #156]	; (8000da8 <MX_FREERTOS_Init+0x160>)
 8000d0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, StartTask06, osPriorityNormal, 0, 128);
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_FREERTOS_Init+0x164>)
 8000d0e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d12:	461d      	mov	r5, r3
 8000d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8000d20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f012 f86a 	bl	8012e00 <osThreadCreate>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <MX_FREERTOS_Init+0x168>)
 8000d30:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, StartTask07, osPriorityNormal, 0, 128);
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_FREERTOS_Init+0x16c>)
 8000d34:	f107 041c 	add.w	r4, r7, #28
 8000d38:	461d      	mov	r5, r3
 8000d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f012 f857 	bl	8012e00 <osThreadCreate>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <MX_FREERTOS_Init+0x170>)
 8000d56:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask08 */
  osThreadDef(myTask08, StartTask08, osPriorityNormal, 0, 128);
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <MX_FREERTOS_Init+0x174>)
 8000d5a:	463c      	mov	r4, r7
 8000d5c:	461d      	mov	r5, r3
 8000d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask08Handle = osThreadCreate(osThread(myTask08), NULL);
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f012 f846 	bl	8012e00 <osThreadCreate>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MX_FREERTOS_Init+0x178>)
 8000d78:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d7a:	bf00      	nop
 8000d7c:	37e0      	adds	r7, #224	; 0xe0
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bdb0      	pop	{r4, r5, r7, pc}
 8000d82:	bf00      	nop
 8000d84:	08017f08 	.word	0x08017f08
 8000d88:	24004d64 	.word	0x24004d64
 8000d8c:	08017f24 	.word	0x08017f24
 8000d90:	24004dcc 	.word	0x24004dcc
 8000d94:	08017f40 	.word	0x08017f40
 8000d98:	24004de8 	.word	0x24004de8
 8000d9c:	08017f5c 	.word	0x08017f5c
 8000da0:	24004d78 	.word	0x24004d78
 8000da4:	08017f78 	.word	0x08017f78
 8000da8:	24004d74 	.word	0x24004d74
 8000dac:	08017f94 	.word	0x08017f94
 8000db0:	24004e0c 	.word	0x24004e0c
 8000db4:	08017fb0 	.word	0x08017fb0
 8000db8:	24004dec 	.word	0x24004dec
 8000dbc:	08017fcc 	.word	0x08017fcc
 8000dc0:	24004d7c 	.word	0x24004d7c

08000dc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000dcc:	f013 fb96 	bl	80144fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
		 HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_12);
 8000dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <StartDefaultTask+0x28>)
 8000dd6:	f006 f99c 	bl	8007112 <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin( GPIOE, GPIO_PIN_3);
 8000dda:	2108      	movs	r1, #8
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <StartDefaultTask+0x2c>)
 8000dde:	f006 f998 	bl	8007112 <HAL_GPIO_TogglePin>


	//	 HAL_UART_Transmit(&huart4, GUI_sum_mode,sizeof(GUI_sum_mode), 100);

    osDelay(50);
 8000de2:	2032      	movs	r0, #50	; 0x32
 8000de4:	f012 f858 	bl	8012e98 <osDelay>
		 HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_12);
 8000de8:	e7f2      	b.n	8000dd0 <StartDefaultTask+0xc>
 8000dea:	bf00      	nop
 8000dec:	58020400 	.word	0x58020400
 8000df0:	58021000 	.word	0x58021000

08000df4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	uint16_t Dwin_mess;

	while (1)
	{

		if (Rx_recv)   //DWIN string is get completely
 8000dfc:	4bc8      	ldr	r3, [pc, #800]	; (8001120 <StartTask02+0x32c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 827f 	beq.w	8001304 <StartTask02+0x510>
		{
			Rx_recv = 0;   //confirmed Rx_rec
 8000e06:	4bc6      	ldr	r3, [pc, #792]	; (8001120 <StartTask02+0x32c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
			GUI_boot = true;
 8000e0c:	4bc5      	ldr	r3, [pc, #788]	; (8001124 <StartTask02+0x330>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]

			Dwin_mess = (Rx1_Buffer[4] << 8) + Rx1_Buffer[5];
 8000e12:	4bc5      	ldr	r3, [pc, #788]	; (8001128 <StartTask02+0x334>)
 8000e14:	791b      	ldrb	r3, [r3, #4]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4bc2      	ldr	r3, [pc, #776]	; (8001128 <StartTask02+0x334>)
 8000e1e:	795b      	ldrb	r3, [r3, #5]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	81bb      	strh	r3, [r7, #12]

			switch (Dwin_mess)
 8000e26:	89bb      	ldrh	r3, [r7, #12]
 8000e28:	f241 6215 	movw	r2, #5653	; 0x1615
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	f300 826e 	bgt.w	800130e <StartTask02+0x51a>
 8000e32:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8000e36:	da64      	bge.n	8000f02 <StartTask02+0x10e>
 8000e38:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000e3c:	f000 809f 	beq.w	8000f7e <StartTask02+0x18a>
 8000e40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000e44:	f300 8263 	bgt.w	800130e <StartTask02+0x51a>
 8000e48:	f241 3245 	movw	r2, #4933	; 0x1345
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	f000 8189 	beq.w	8001164 <StartTask02+0x370>
 8000e52:	f241 3245 	movw	r2, #4933	; 0x1345
 8000e56:	4293      	cmp	r3, r2
 8000e58:	f300 8259 	bgt.w	800130e <StartTask02+0x51a>
 8000e5c:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8000e60:	f000 811c 	beq.w	800109c <StartTask02+0x2a8>
 8000e64:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8000e68:	f300 8251 	bgt.w	800130e <StartTask02+0x51a>
 8000e6c:	f241 3205 	movw	r2, #4869	; 0x1305
 8000e70:	4293      	cmp	r3, r2
 8000e72:	f000 8197 	beq.w	80011a4 <StartTask02+0x3b0>
 8000e76:	f241 3205 	movw	r2, #4869	; 0x1305
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	f300 8247 	bgt.w	800130e <StartTask02+0x51a>
 8000e80:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8000e84:	f000 8184 	beq.w	8001190 <StartTask02+0x39c>
 8000e88:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8000e8c:	f300 823f 	bgt.w	800130e <StartTask02+0x51a>
 8000e90:	f241 2298 	movw	r2, #4760	; 0x1298
 8000e94:	4293      	cmp	r3, r2
 8000e96:	f000 80d3 	beq.w	8001040 <StartTask02+0x24c>
 8000e9a:	f241 2298 	movw	r2, #4760	; 0x1298
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	f300 8235 	bgt.w	800130e <StartTask02+0x51a>
 8000ea4:	f241 2296 	movw	r2, #4758	; 0x1296
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	f000 809b 	beq.w	8000fe4 <StartTask02+0x1f0>
 8000eae:	f241 2296 	movw	r2, #4758	; 0x1296
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	f300 822b 	bgt.w	800130e <StartTask02+0x51a>
 8000eb8:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000ebc:	f000 81a1 	beq.w	8001202 <StartTask02+0x40e>
 8000ec0:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000ec4:	f300 8223 	bgt.w	800130e <StartTask02+0x51a>
 8000ec8:	f5b3 5f93 	cmp.w	r3, #4704	; 0x1260
 8000ecc:	f000 818e 	beq.w	80011ec <StartTask02+0x3f8>
 8000ed0:	f5b3 5f93 	cmp.w	r3, #4704	; 0x1260
 8000ed4:	f300 821b 	bgt.w	800130e <StartTask02+0x51a>
 8000ed8:	f241 2250 	movw	r2, #4688	; 0x1250
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d07d      	beq.n	8000fdc <StartTask02+0x1e8>
 8000ee0:	f241 2250 	movw	r2, #4688	; 0x1250
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	f300 8212 	bgt.w	800130e <StartTask02+0x51a>
 8000eea:	f5b3 5f92 	cmp.w	r3, #4672	; 0x1240
 8000eee:	d071      	beq.n	8000fd4 <StartTask02+0x1e0>
 8000ef0:	f5b3 5f92 	cmp.w	r3, #4672	; 0x1240
 8000ef4:	f300 820b 	bgt.w	800130e <StartTask02+0x51a>
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d037      	beq.n	8000f6c <StartTask02+0x178>
 8000efc:	2b14      	cmp	r3, #20
 8000efe:	d039      	beq.n	8000f74 <StartTask02+0x180>
 8000f00:	e205      	b.n	800130e <StartTask02+0x51a>
 8000f02:	f5a3 53b0 	sub.w	r3, r3, #5632	; 0x1600
 8000f06:	2b15      	cmp	r3, #21
 8000f08:	f200 8201 	bhi.w	800130e <StartTask02+0x51a>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <StartTask02+0x120>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	0800130f 	.word	0x0800130f
 8000f18:	0800130f 	.word	0x0800130f
 8000f1c:	0800120d 	.word	0x0800120d
 8000f20:	08001255 	.word	0x08001255
 8000f24:	0800130f 	.word	0x0800130f
 8000f28:	080011f7 	.word	0x080011f7
 8000f2c:	08001291 	.word	0x08001291
 8000f30:	0800130f 	.word	0x0800130f
 8000f34:	080012cd 	.word	0x080012cd
 8000f38:	080012ff 	.word	0x080012ff
 8000f3c:	0800130f 	.word	0x0800130f
 8000f40:	0800130f 	.word	0x0800130f
 8000f44:	0800130f 	.word	0x0800130f
 8000f48:	0800130f 	.word	0x0800130f
 8000f4c:	0800130f 	.word	0x0800130f
 8000f50:	0800130f 	.word	0x0800130f
 8000f54:	0800130f 	.word	0x0800130f
 8000f58:	0800130f 	.word	0x0800130f
 8000f5c:	0800130f 	.word	0x0800130f
 8000f60:	0800130f 	.word	0x0800130f
 8000f64:	080011b9 	.word	0x080011b9
 8000f68:	080011d3 	.word	0x080011d3
			{
			//Take VP from receive data

			case (0x0F):     // Check LCD power on?
								GUI_boot = true;
 8000f6c:	4b6d      	ldr	r3, [pc, #436]	; (8001124 <StartTask02+0x330>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
			break;
 8000f72:	e1cc      	b.n	800130e <StartTask02+0x51a>

			case (0x0014): //Read no of page on work
								page = Rx1_Buffer[8];
 8000f74:	4b6c      	ldr	r3, [pc, #432]	; (8001128 <StartTask02+0x334>)
 8000f76:	7a1a      	ldrb	r2, [r3, #8]
 8000f78:	4b6c      	ldr	r3, [pc, #432]	; (800112c <StartTask02+0x338>)
 8000f7a:	701a      	strb	r2, [r3, #0]
			break;
 8000f7c:	e1c7      	b.n	800130e <StartTask02+0x51a>

			case (0x1400):  //STOP, READY  Variable GUI
				if (!Ready)
 8000f7e:	4b6c      	ldr	r3, [pc, #432]	; (8001130 <StartTask02+0x33c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d017      	beq.n	8000fbc <StartTask02+0x1c8>
				{ //STOP
					Ready = 1;
 8000f8c:	4b68      	ldr	r3, [pc, #416]	; (8001130 <StartTask02+0x33c>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
					// play(S_ready);  //Ready
					osDelay(200);
 8000f92:	20c8      	movs	r0, #200	; 0xc8
 8000f94:	f011 ff80 	bl	8012e98 <osDelay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Interloc
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9e:	4865      	ldr	r0, [pc, #404]	; (8001134 <StartTask02+0x340>)
 8000fa0:	f006 f89e 	bl	80070e0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // AKELA pointer
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4863      	ldr	r0, [pc, #396]	; (8001138 <StartTask02+0x344>)
 8000faa:	f006 f899 	bl	80070e0 <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart1, GUI_stop, sizeof(GUI_stop), 100);
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	4962      	ldr	r1, [pc, #392]	; (800113c <StartTask02+0x348>)
 8000fb4:	4862      	ldr	r0, [pc, #392]	; (8001140 <StartTask02+0x34c>)
 8000fb6:	f00c ff60 	bl	800de7a <HAL_UART_Transmit>
					Ready = 0;
					// play(S_stop);  //Stop
					osDelay(200);
	//				// GUI_ready2stop();
				}
			break;
 8000fba:	e1a5      	b.n	8001308 <StartTask02+0x514>
				else if (Ready)
 8000fbc:	4b5c      	ldr	r3, [pc, #368]	; (8001130 <StartTask02+0x33c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 81a1 	beq.w	8001308 <StartTask02+0x514>
					Ready = 0;
 8000fc6:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <StartTask02+0x33c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 8000fcc:	20c8      	movs	r0, #200	; 0xc8
 8000fce:	f011 ff63 	bl	8012e98 <osDelay>
			break;
 8000fd2:	e199      	b.n	8001308 <StartTask02+0x514>

			case (0x1240):  //TONING Page switching
			Stamp = 0;
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <StartTask02+0x350>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
			// play(S_toning); //Toning sound
			//  EEPROM_Read(Last_mode); //save current mode
			// // show_parameter_toning();
			//  show_ST_key_value();
			// // GUI_ready2stop();
			break;
 8000fda:	e198      	b.n	800130e <StartTask02+0x51a>

			case (0x1250):  //STAMP page switching
			Stamp = 1;
 8000fdc:	4b59      	ldr	r3, [pc, #356]	; (8001144 <StartTask02+0x350>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
			// play(S_stamp);  //Stamp
			//  EEPROM_Read(Last_mode);  //save current mode
			// show_parameter_stamp();
			//  show_ST_key_value();
			// // GUI_ready2stop();
			break;
 8000fe2:	e194      	b.n	800130e <StartTask02+0x51a>

			// ===  Jump to Stamp mode from Monitor mode
			case (0x1296):
			// play(S_Beek);
			Monitor = 0;
 8000fe4:	4b58      	ldr	r3, [pc, #352]	; (8001148 <StartTask02+0x354>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]

			Stamp = 1;
 8000fea:	4b56      	ldr	r3, [pc, #344]	; (8001144 <StartTask02+0x350>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
			//  EEPROM_Read(Last_mode);  //save current mode
			// show_parameter_stamp();
			//  show_ST_key_value();
			// // GUI_ready2stop(); // clear "ready" state

			GUI_mon_Laser_ON[7] = 1; //Laser OFF
 8000ff0:	4b56      	ldr	r3, [pc, #344]	; (800114c <StartTask02+0x358>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8000ff6:	2364      	movs	r3, #100	; 0x64
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	4954      	ldr	r1, [pc, #336]	; (800114c <StartTask02+0x358>)
 8000ffc:	4850      	ldr	r0, [pc, #320]	; (8001140 <StartTask02+0x34c>)
 8000ffe:	f00c ff3c 	bl	800de7a <HAL_UART_Transmit>

			// Stop "Laser ON" over Monitor mode
		//	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
		//	HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Interlock stop
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001008:	484a      	ldr	r0, [pc, #296]	; (8001134 <StartTask02+0x340>)
 800100a:	f006 f869 	bl	80070e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Enable Stop
 800100e:	2200      	movs	r2, #0
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	484f      	ldr	r0, [pc, #316]	; (8001150 <StartTask02+0x35c>)
 8001014:	f006 f864 	bl	80070e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Fire lamp Off
 8001018:	2200      	movs	r2, #0
 800101a:	2104      	movs	r1, #4
 800101c:	4845      	ldr	r0, [pc, #276]	; (8001134 <StartTask02+0x340>)
 800101e:	f006 f85f 	bl	80070e0 <HAL_GPIO_WritePin>

			GUI_sum_mode[7] = 1;
 8001022:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <StartTask02+0x360>)
 8001024:	2201      	movs	r2, #1
 8001026:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	2208      	movs	r2, #8
 800102c:	4949      	ldr	r1, [pc, #292]	; (8001154 <StartTask02+0x360>)
 800102e:	4844      	ldr	r0, [pc, #272]	; (8001140 <StartTask02+0x34c>)
 8001030:	f00c ff23 	bl	800de7a <HAL_UART_Transmit>

			vTaskSuspend(myTask05Handle);	 // STOP DefaultTask
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <StartTask02+0x364>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f012 f9d3 	bl	80133e4 <vTaskSuspend>
			break;
 800103e:	e166      	b.n	800130e <StartTask02+0x51a>


			// ===  Move to Monitor mode
			case (0x1298):
			// play(S_Beek);
			Monitor = true;
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <StartTask02+0x354>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
			// // GUI_ready2stop(); // clear "ready" state

			GUI_mon_Laser_ON[7] = 1;  //Laser OFF
 8001046:	4b41      	ldr	r3, [pc, #260]	; (800114c <StartTask02+0x358>)
 8001048:	2201      	movs	r2, #1
 800104a:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	2208      	movs	r2, #8
 8001050:	493e      	ldr	r1, [pc, #248]	; (800114c <StartTask02+0x358>)
 8001052:	483b      	ldr	r0, [pc, #236]	; (8001140 <StartTask02+0x34c>)
 8001054:	f00c ff11 	bl	800de7a <HAL_UART_Transmit>

			GUI_mon_power[6] = 0;     //Start monitor page with Power = 0
 8001058:	4b40      	ldr	r3, [pc, #256]	; (800115c <StartTask02+0x368>)
 800105a:	2200      	movs	r2, #0
 800105c:	719a      	strb	r2, [r3, #6]
			GUI_mon_power[7] = 0;
 800105e:	4b3f      	ldr	r3, [pc, #252]	; (800115c <StartTask02+0x368>)
 8001060:	2200      	movs	r2, #0
 8001062:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_power, sizeof(GUI_mon_power),100);//show power0~6
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	2208      	movs	r2, #8
 8001068:	493c      	ldr	r1, [pc, #240]	; (800115c <StartTask02+0x368>)
 800106a:	4835      	ldr	r0, [pc, #212]	; (8001140 <StartTask02+0x34c>)
 800106c:	f00c ff05 	bl	800de7a <HAL_UART_Transmit>

			// Stop "Laser ON" over Monitor mode
	//		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//		HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Interlock stop
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001076:	482f      	ldr	r0, [pc, #188]	; (8001134 <StartTask02+0x340>)
 8001078:	f006 f832 	bl	80070e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Enable Stop
 800107c:	2200      	movs	r2, #0
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	4833      	ldr	r0, [pc, #204]	; (8001150 <StartTask02+0x35c>)
 8001082:	f006 f82d 	bl	80070e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Fire lamp Off
 8001086:	2200      	movs	r2, #0
 8001088:	2104      	movs	r1, #4
 800108a:	482a      	ldr	r0, [pc, #168]	; (8001134 <StartTask02+0x340>)
 800108c:	f006 f828 	bl	80070e0 <HAL_GPIO_WritePin>

			vTaskResume(myTask05Handle);   // Strat Monitoring Task(5)
 8001090:	4b31      	ldr	r3, [pc, #196]	; (8001158 <StartTask02+0x364>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f012 fa69 	bl	801356c <vTaskResume>
			break;
 800109a:	e138      	b.n	800130e <StartTask02+0x51a>



			// ===  Laser ON at Monitor mode
			case (0x1340):
				if (!Laser_ON)
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <StartTask02+0x36c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	f083 0301 	eor.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d01a      	beq.n	80010e0 <StartTask02+0x2ec>
				{
					Laser_ON = 1;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <StartTask02+0x36c>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
					// play(S_ready);  //Ready
					osDelay(200);
 80010b0:	20c8      	movs	r0, #200	; 0xc8
 80010b2:	f011 fef1 	bl	8012e98 <osDelay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Interloc
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010bc:	481d      	ldr	r0, [pc, #116]	; (8001134 <StartTask02+0x340>)
 80010be:	f006 f80f 	bl	80070e0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // AKELA pointer
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	481c      	ldr	r0, [pc, #112]	; (8001138 <StartTask02+0x344>)
 80010c8:	f006 f80a 	bl	80070e0 <HAL_GPIO_WritePin>
					GUI_mon_Laser_ON[7] = 0;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <StartTask02+0x358>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 80010d2:	2364      	movs	r3, #100	; 0x64
 80010d4:	2208      	movs	r2, #8
 80010d6:	491d      	ldr	r1, [pc, #116]	; (800114c <StartTask02+0x358>)
 80010d8:	4819      	ldr	r0, [pc, #100]	; (8001140 <StartTask02+0x34c>)
 80010da:	f00c fece 	bl	800de7a <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
					HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Interlock on
					HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0); // Enable stop
					HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0); // AKELA pointer Off
				}
			break;
 80010de:	e116      	b.n	800130e <StartTask02+0x51a>
					Laser_ON = 0;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <StartTask02+0x36c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 80010e6:	20c8      	movs	r0, #200	; 0xc8
 80010e8:	f011 fed6 	bl	8012e98 <osDelay>
					GUI_mon_Laser_ON[7] = 1;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <StartTask02+0x358>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 80010f2:	2364      	movs	r3, #100	; 0x64
 80010f4:	2208      	movs	r2, #8
 80010f6:	4915      	ldr	r1, [pc, #84]	; (800114c <StartTask02+0x358>)
 80010f8:	4811      	ldr	r0, [pc, #68]	; (8001140 <StartTask02+0x34c>)
 80010fa:	f00c febe 	bl	800de7a <HAL_UART_Transmit>
					HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Interlock on
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <StartTask02+0x340>)
 8001106:	f005 ffeb 	bl	80070e0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0); // Enable stop
 800110a:	2200      	movs	r2, #0
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4810      	ldr	r0, [pc, #64]	; (8001150 <StartTask02+0x35c>)
 8001110:	f005 ffe6 	bl	80070e0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0); // AKELA pointer Off
 8001114:	2200      	movs	r2, #0
 8001116:	2101      	movs	r1, #1
 8001118:	4807      	ldr	r0, [pc, #28]	; (8001138 <StartTask02+0x344>)
 800111a:	f005 ffe1 	bl	80070e0 <HAL_GPIO_WritePin>
			break;
 800111e:	e0f6      	b.n	800130e <StartTask02+0x51a>
 8001120:	24004d6e 	.word	0x24004d6e
 8001124:	24004d6c 	.word	0x24004d6c
 8001128:	24004df4 	.word	0x24004df4
 800112c:	24004df0 	.word	0x24004df0
 8001130:	24004e06 	.word	0x24004e06
 8001134:	58020400 	.word	0x58020400
 8001138:	58020800 	.word	0x58020800
 800113c:	24000000 	.word	0x24000000
 8001140:	24005080 	.word	0x24005080
 8001144:	24004d72 	.word	0x24004d72
 8001148:	24004dc8 	.word	0x24004dc8
 800114c:	2400003c 	.word	0x2400003c
 8001150:	58020000 	.word	0x58020000
 8001154:	24000020 	.word	0x24000020
 8001158:	24004d74 	.word	0x24004d74
 800115c:	24000034 	.word	0x24000034
 8001160:	24004d6b 	.word	0x24004d6b

			// ===  Increament & decrement adjustment at Monitoring
			case (0x1345):
			// play(S_Beek);
			// 5*330 = 1650:최고 DAC �?, ?��?�� HP?��?��?�� CW�? 5 W 출력?��, 330?? Cut&Try�? ?��?? �?
			Power_DAC = ((Rx1_Buffer[7] << 8) + Rx1_Buffer[8])*330;  //0~2100
 8001164:	4b6c      	ldr	r3, [pc, #432]	; (8001318 <StartTask02+0x524>)
 8001166:	79db      	ldrb	r3, [r3, #7]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	4a6b      	ldr	r2, [pc, #428]	; (8001318 <StartTask02+0x524>)
 800116c:	7a12      	ldrb	r2, [r2, #8]
 800116e:	4413      	add	r3, r2
 8001170:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	461a      	mov	r2, r3
 800117a:	4b68      	ldr	r3, [pc, #416]	; (800131c <StartTask02+0x528>)
 800117c:	601a      	str	r2, [r3, #0]
			GUI_mon_power[6] = Rx1_Buffer[7];  //Last_mpower_high
 800117e:	4b66      	ldr	r3, [pc, #408]	; (8001318 <StartTask02+0x524>)
 8001180:	79da      	ldrb	r2, [r3, #7]
 8001182:	4b67      	ldr	r3, [pc, #412]	; (8001320 <StartTask02+0x52c>)
 8001184:	719a      	strb	r2, [r3, #6]
			GUI_mon_power[7] = Rx1_Buffer[8];  //Last_mpower_low (real)
 8001186:	4b64      	ldr	r3, [pc, #400]	; (8001318 <StartTask02+0x524>)
 8001188:	7a1a      	ldrb	r2, [r3, #8]
 800118a:	4b65      	ldr	r3, [pc, #404]	; (8001320 <StartTask02+0x52c>)
 800118c:	71da      	strb	r2, [r3, #7]
		//	HAL_UART_Transmit(&huart1, GUI_mon_power, sizeof(GUI_mon_power),100);//show power0~5

			//  EEPROM_Write(Last_mon_power_high, GUI_mon_power[6]);
			//  EEPROM_Write(Last_mon_power_low, GUI_mon_power[7]);

			break;
 800118e:	e0be      	b.n	800130e <StartTask02+0x51a>
			///////////////////
			case (0x1300):  //  Increament & decrement adjustment at STAMP
			// play(S_Beek);
			//  EEPROM_Write( Last_power_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_power_low, Rx1_Buffer[8]);
			Power_DAC = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8];  ///////
 8001190:	4b61      	ldr	r3, [pc, #388]	; (8001318 <StartTask02+0x524>)
 8001192:	79db      	ldrb	r3, [r3, #7]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	4a60      	ldr	r2, [pc, #384]	; (8001318 <StartTask02+0x524>)
 8001198:	7a12      	ldrb	r2, [r2, #8]
 800119a:	4413      	add	r3, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4b5f      	ldr	r3, [pc, #380]	; (800131c <StartTask02+0x528>)
 80011a0:	601a      	str	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 80011a2:	e0b4      	b.n	800130e <StartTask02+0x51a>

			case (0x1305):  // Increament & decrement adjustment at Toning
			// play(S_Beek);
			//  EEPROM_Write( Last_power_high_t, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_power_low_t, Rx1_Buffer[8]);
			Power_DAC_t = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8];  ///////
 80011a4:	4b5c      	ldr	r3, [pc, #368]	; (8001318 <StartTask02+0x524>)
 80011a6:	79db      	ldrb	r3, [r3, #7]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	4a5b      	ldr	r2, [pc, #364]	; (8001318 <StartTask02+0x524>)
 80011ac:	7a12      	ldrb	r2, [r2, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <StartTask02+0x530>)
 80011b4:	601a      	str	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 80011b6:	e0aa      	b.n	800130e <StartTask02+0x51a>

			case (0x1614):  //save On_time value to eeprom
								//  EEPROM_Write( Last_on_time_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_on_time_low, Rx1_Buffer[8]);
			On_Time = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8]; ///////
 80011b8:	4b57      	ldr	r3, [pc, #348]	; (8001318 <StartTask02+0x524>)
 80011ba:	79db      	ldrb	r3, [r3, #7]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <StartTask02+0x524>)
 80011c4:	7a1b      	ldrb	r3, [r3, #8]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4413      	add	r3, r2
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b56      	ldr	r3, [pc, #344]	; (8001328 <StartTask02+0x534>)
 80011ce:	801a      	strh	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 80011d0:	e09d      	b.n	800130e <StartTask02+0x51a>

			case (0x1615):  //save Off_time value to eeprom
								//  EEPROM_Write( Last_off_time_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_off_time_low, Rx1_Buffer[8]);
			Off_Time = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8]; ///////
 80011d2:	4b51      	ldr	r3, [pc, #324]	; (8001318 <StartTask02+0x524>)
 80011d4:	79db      	ldrb	r3, [r3, #7]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b4e      	ldr	r3, [pc, #312]	; (8001318 <StartTask02+0x524>)
 80011de:	7a1b      	ldrb	r3, [r3, #8]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b51      	ldr	r3, [pc, #324]	; (800132c <StartTask02+0x538>)
 80011e8:	801a      	strh	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 80011ea:	e090      	b.n	800130e <StartTask02+0x51a>

			case (0x1260):  //Pulse value to eeprom
			//  EEPROM_Write( Last_pulse, Rx1_Buffer[8]);
			Pulse = Rx1_Buffer[8];  ///////
 80011ec:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <StartTask02+0x524>)
 80011ee:	7a1a      	ldrb	r2, [r3, #8]
 80011f0:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <StartTask02+0x53c>)
 80011f2:	701a      	strb	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 80011f4:	e08b      	b.n	800130e <StartTask02+0x51a>

			case (0x1605):  //Repeat value to eeprom
			//  EEPROM_Write( Last_repeat, Rx1_Buffer[8]);
			Repeat = Rx1_Buffer[8];
 80011f6:	4b48      	ldr	r3, [pc, #288]	; (8001318 <StartTask02+0x524>)
 80011f8:	7a1b      	ldrb	r3, [r3, #8]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <StartTask02+0x540>)
 80011fe:	801a      	strh	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 8001200:	e085      	b.n	800130e <StartTask02+0x51a>

			case (0x1280):  //Frequency value to eeprom
			//  EEPROM_Write( Last_frequency, Rx1_Buffer[8]);
			Freq = Rx1_Buffer[8];  ///////
 8001202:	4b45      	ldr	r3, [pc, #276]	; (8001318 <StartTask02+0x524>)
 8001204:	7a1a      	ldrb	r2, [r3, #8]
 8001206:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <StartTask02+0x544>)
 8001208:	701a      	strb	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 800120a:	e080      	b.n	800130e <StartTask02+0x51a>
			//  EEPROM_Write( Last_tcount_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_tcount_low, Rx1_Buffer[8]);
			break;

			case (0x1602):  //SOUND, MUTE Variable GUI
				if (Sound)
 800120c:	4b4b      	ldr	r3, [pc, #300]	; (800133c <StartTask02+0x548>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00f      	beq.n	8001234 <StartTask02+0x440>
				{
					Sound = 0;
 8001214:	4b49      	ldr	r3, [pc, #292]	; (800133c <StartTask02+0x548>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
					// play(S_sound);  //sound
					//  EEPROM_Write( Last_sound, Sound);
					GUI_sound[7] = 0;
 800121a:	4b49      	ldr	r3, [pc, #292]	; (8001340 <StartTask02+0x54c>)
 800121c:	2200      	movs	r2, #0
 800121e:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
 8001220:	2364      	movs	r3, #100	; 0x64
 8001222:	2208      	movs	r2, #8
 8001224:	4946      	ldr	r1, [pc, #280]	; (8001340 <StartTask02+0x54c>)
 8001226:	4847      	ldr	r0, [pc, #284]	; (8001344 <StartTask02+0x550>)
 8001228:	f00c fe27 	bl	800de7a <HAL_UART_Transmit>
					volume(19);
 800122c:	2013      	movs	r0, #19
 800122e:	f000 fe3d 	bl	8001eac <volume>
					GUI_sound[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
					volume(0);
				}
			//  EEPROM_Write( Last_sound, Sound);  //save current mode
			break;
 8001232:	e06c      	b.n	800130e <StartTask02+0x51a>
					Sound = true;
 8001234:	4b41      	ldr	r3, [pc, #260]	; (800133c <StartTask02+0x548>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
					GUI_sound[7] = 1;
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <StartTask02+0x54c>)
 800123c:	2201      	movs	r2, #1
 800123e:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	2208      	movs	r2, #8
 8001244:	493e      	ldr	r1, [pc, #248]	; (8001340 <StartTask02+0x54c>)
 8001246:	483f      	ldr	r0, [pc, #252]	; (8001344 <StartTask02+0x550>)
 8001248:	f00c fe17 	bl	800de7a <HAL_UART_Transmit>
					volume(0);
 800124c:	2000      	movs	r0, #0
 800124e:	f000 fe2d 	bl	8001eac <volume>
			break;
 8001252:	e05c      	b.n	800130e <StartTask02+0x51a>


			case (0x1603):  //FOOT, HAND Variable GUI
				if (Hand_foot)
 8001254:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <StartTask02+0x554>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <StartTask02+0x482>
				{
					Hand_foot = 0;
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <StartTask02+0x554>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
					// play(S_hand);  //hand
					GUI_foot[7] = 0;
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <StartTask02+0x558>)
 8001264:	2200      	movs	r2, #0
 8001266:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
 8001268:	2364      	movs	r3, #100	; 0x64
 800126a:	2208      	movs	r2, #8
 800126c:	4937      	ldr	r1, [pc, #220]	; (800134c <StartTask02+0x558>)
 800126e:	4835      	ldr	r0, [pc, #212]	; (8001344 <StartTask02+0x550>)
 8001270:	f00c fe03 	bl	800de7a <HAL_UART_Transmit>
					// play(S_foot); //foot
					GUI_foot[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
					//  EEPROM_Write( Last_Hand_foot, Hand_foot);
				}
			break;
 8001274:	e04b      	b.n	800130e <StartTask02+0x51a>
					Hand_foot = true;
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <StartTask02+0x554>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
					GUI_foot[7] = 1;
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <StartTask02+0x558>)
 800127e:	2201      	movs	r2, #1
 8001280:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
 8001282:	2364      	movs	r3, #100	; 0x64
 8001284:	2208      	movs	r2, #8
 8001286:	4931      	ldr	r1, [pc, #196]	; (800134c <StartTask02+0x558>)
 8001288:	482e      	ldr	r0, [pc, #184]	; (8001344 <StartTask02+0x550>)
 800128a:	f00c fdf6 	bl	800de7a <HAL_UART_Transmit>
			break;
 800128e:	e03e      	b.n	800130e <StartTask02+0x51a>

			//======  Select Total counter & energy  ============
			case (0x1606):  //Select between Toggle counts and Energy
				if (Count_energy)
 8001290:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <StartTask02+0x55c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00c      	beq.n	80012b2 <StartTask02+0x4be>
				{
			    	Count_energy = 0;
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <StartTask02+0x55c>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
					// play(S_total_energy);
					GUI_sum_mode[7] = 0;
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <StartTask02+0x560>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	2208      	movs	r2, #8
 80012a8:	492a      	ldr	r1, [pc, #168]	; (8001354 <StartTask02+0x560>)
 80012aa:	4826      	ldr	r0, [pc, #152]	; (8001344 <StartTask02+0x550>)
 80012ac:	f00c fde5 	bl	800de7a <HAL_UART_Transmit>
					// play(S_total_count);
					GUI_sum_mode[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
					//  EEPROM_Write( Last_Count_energy, Count_energy);
				}
			break;
 80012b0:	e02d      	b.n	800130e <StartTask02+0x51a>
					Count_energy = 1;
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <StartTask02+0x55c>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
					GUI_sum_mode[7] = 1;
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <StartTask02+0x560>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	2208      	movs	r2, #8
 80012c2:	4924      	ldr	r1, [pc, #144]	; (8001354 <StartTask02+0x560>)
 80012c4:	481f      	ldr	r0, [pc, #124]	; (8001344 <StartTask02+0x550>)
 80012c6:	f00c fdd8 	bl	800de7a <HAL_UART_Transmit>
			break;
 80012ca:	e020      	b.n	800130e <StartTask02+0x51a>

			//======  Clear Total counter value     ============
			case (0x1608):  // Clear Total counter value
								Key_memo++;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	3301      	adds	r3, #1
 80012d0:	73fb      	strb	r3, [r7, #15]
			if (Key_memo == GUI_save_delay)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d119      	bne.n	800130c <StartTask02+0x518>
			{
				// play(S_clear);   //sound 'clear'
				sum_count = 0;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <StartTask02+0x564>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
				sum_count_t = 0;
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <StartTask02+0x568>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
				sum_energy = 0;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <StartTask02+0x56c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
				sum_energy_t = 0;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <StartTask02+0x570>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, GUI_sum_value,sizeof(GUI_sum_value), 100);
 80012f0:	2364      	movs	r3, #100	; 0x64
 80012f2:	220a      	movs	r2, #10
 80012f4:	491c      	ldr	r1, [pc, #112]	; (8001368 <StartTask02+0x574>)
 80012f6:	4813      	ldr	r0, [pc, #76]	; (8001344 <StartTask02+0x550>)
 80012f8:	f00c fdbf 	bl	800de7a <HAL_UART_Transmit>
			}
			break;
 80012fc:	e006      	b.n	800130c <StartTask02+0x518>
			case (0x1609): // save last parameter to EEPROM, show value on S2 key
				if (Key_memo >= GUI_save_delay)
						;
				else
						;
			Key_memo = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
			break;
 8001302:	e004      	b.n	800130e <StartTask02+0x51a>



			default:
 8001304:	bf00      	nop
 8001306:	e002      	b.n	800130e <StartTask02+0x51a>
			break;
 8001308:	bf00      	nop
 800130a:	e000      	b.n	800130e <StartTask02+0x51a>
			break;
 800130c:	bf00      	nop
			}  //end of switch
			//================== End of Memory process ======================

		}   //if Rx_recv is received, it will be work.

		osDelay(Delay_task02);
 800130e:	2005      	movs	r0, #5
 8001310:	f011 fdc2 	bl	8012e98 <osDelay>
		if (Rx_recv)   //DWIN string is get completely
 8001314:	e572      	b.n	8000dfc <StartTask02+0x8>
 8001316:	bf00      	nop
 8001318:	24004df4 	.word	0x24004df4
 800131c:	24004da4 	.word	0x24004da4
 8001320:	24000034 	.word	0x24000034
 8001324:	24004e10 	.word	0x24004e10
 8001328:	24004da8 	.word	0x24004da8
 800132c:	24004dd2 	.word	0x24004dd2
 8001330:	24004d69 	.word	0x24004d69
 8001334:	24004d5c 	.word	0x24004d5c
 8001338:	24004db0 	.word	0x24004db0
 800133c:	24004d6a 	.word	0x24004d6a
 8001340:	24000008 	.word	0x24000008
 8001344:	24005080 	.word	0x24005080
 8001348:	24004d84 	.word	0x24004d84
 800134c:	24000018 	.word	0x24000018
 8001350:	24004d68 	.word	0x24004d68
 8001354:	24000020 	.word	0x24000020
 8001358:	24004db4 	.word	0x24004db4
 800135c:	24004d60 	.word	0x24004d60
 8001360:	24004dac 	.word	0x24004dac
 8001364:	24004da0 	.word	0x24004da0
 8001368:	24000028 	.word	0x24000028

0800136c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	static uint8_t Rx_len, Rx_indx, data, Rx4_indx;

	while (1)
	{
		//============= UART-4: Hand piece ==============
		if (isEmpty(&uart_4) == 0)
 8001374:	4858      	ldr	r0, [pc, #352]	; (80014d8 <StartTask03+0x16c>)
 8001376:	f000 fa1e 	bl	80017b6 <isEmpty>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d153      	bne.n	8001428 <StartTask03+0xbc>
		{
			data = pop(&uart_4);
 8001380:	4855      	ldr	r0, [pc, #340]	; (80014d8 <StartTask03+0x16c>)
 8001382:	f000 f9f9 	bl	8001778 <pop>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	4b54      	ldr	r3, [pc, #336]	; (80014dc <StartTask03+0x170>)
 800138c:	701a      	strb	r2, [r3, #0]

			if (data != 10)   // Line feed? new line
 800138e:	4b53      	ldr	r3, [pc, #332]	; (80014dc <StartTask03+0x170>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b0a      	cmp	r3, #10
 8001394:	d00b      	beq.n	80013ae <StartTask03+0x42>
			{
				Rx4_Buffer[Rx4_indx++] = data;
 8001396:	4b52      	ldr	r3, [pc, #328]	; (80014e0 <StartTask03+0x174>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	b2d1      	uxtb	r1, r2
 800139e:	4a50      	ldr	r2, [pc, #320]	; (80014e0 <StartTask03+0x174>)
 80013a0:	7011      	strb	r1, [r2, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <StartTask03+0x170>)
 80013a6:	7819      	ldrb	r1, [r3, #0]
 80013a8:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <StartTask03+0x178>)
 80013aa:	5499      	strb	r1, [r3, r2]
 80013ac:	e02d      	b.n	800140a <StartTask03+0x9e>
			}
			else
			{
				Rx4_Buffer[0] = 0x30; // # -> 0 clear
 80013ae:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <StartTask03+0x178>)
 80013b0:	2230      	movs	r2, #48	; 0x30
 80013b2:	701a      	strb	r2, [r3, #0]
				HP_lens = atoi(strtok(Rx4_Buffer, " ")); //Lens 1,2,3
 80013b4:	494c      	ldr	r1, [pc, #304]	; (80014e8 <StartTask03+0x17c>)
 80013b6:	484b      	ldr	r0, [pc, #300]	; (80014e4 <StartTask03+0x178>)
 80013b8:	f014 fc92 	bl	8015ce0 <strtok>
 80013bc:	4603      	mov	r3, r0
 80013be:	4618      	mov	r0, r3
 80013c0:	f013 fdbc 	bl	8014f3c <atoi>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b48      	ldr	r3, [pc, #288]	; (80014ec <StartTask03+0x180>)
 80013ca:	701a      	strb	r2, [r3, #0]
				HP_Temp = atoi(strtok(NULL, " ")); //Temp. sensor data
 80013cc:	4946      	ldr	r1, [pc, #280]	; (80014e8 <StartTask03+0x17c>)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f014 fc86 	bl	8015ce0 <strtok>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f013 fdb0 	bl	8014f3c <atoi>
 80013dc:	4603      	mov	r3, r0
 80013de:	b21a      	sxth	r2, r3
 80013e0:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <StartTask03+0x184>)
 80013e2:	801a      	strh	r2, [r3, #0]
				HP_Fire = atoi(strtok(NULL, " ")); //HP switch detect
 80013e4:	4940      	ldr	r1, [pc, #256]	; (80014e8 <StartTask03+0x17c>)
 80013e6:	2000      	movs	r0, #0
 80013e8:	f014 fc7a 	bl	8015ce0 <strtok>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f013 fda4 	bl	8014f3c <atoi>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf14      	ite	ne
 80013fa:	2301      	movne	r3, #1
 80013fc:	2300      	moveq	r3, #0
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <StartTask03+0x188>)
 8001402:	701a      	strb	r2, [r3, #0]

				Rx4_indx = 0;   // HP data is received
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <StartTask03+0x174>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
			}   //else

			if (HP_Fire)
 800140a:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <StartTask03+0x188>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <StartTask03+0xb2>
			{
				 HAL_GPIO_WritePin( GPIOC, GPIO_PIN_7,GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	4838      	ldr	r0, [pc, #224]	; (80014f8 <StartTask03+0x18c>)
 8001418:	f005 fe62 	bl	80070e0 <HAL_GPIO_WritePin>
 800141c:	e004      	b.n	8001428 <StartTask03+0xbc>
			}
			else
				 HAL_GPIO_WritePin( GPIOC, GPIO_PIN_7,GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	4835      	ldr	r0, [pc, #212]	; (80014f8 <StartTask03+0x18c>)
 8001424:	f005 fe5c 	bl	80070e0 <HAL_GPIO_WritePin>

    	}  //if

		//============= UART-1: DWIN LCD ==============
		if (isEmpty(&uart_1) == 0)
 8001428:	4834      	ldr	r0, [pc, #208]	; (80014fc <StartTask03+0x190>)
 800142a:	f000 f9c4 	bl	80017b6 <isEmpty>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d14d      	bne.n	80014d0 <StartTask03+0x164>
		{  /////Ring buffer check and get all

			data = pop(&uart_1);
 8001434:	4831      	ldr	r0, [pc, #196]	; (80014fc <StartTask03+0x190>)
 8001436:	f000 f99f 	bl	8001778 <pop>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <StartTask03+0x170>)
 8001440:	701a      	strb	r2, [r3, #0]

			if (data == 0x5A)
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <StartTask03+0x170>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b5a      	cmp	r3, #90	; 0x5a
 8001448:	d107      	bne.n	800145a <StartTask03+0xee>
			{			//Find head of string 0x5A/90
				Rx1_Buffer[0] = data;
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <StartTask03+0x170>)
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <StartTask03+0x194>)
 8001450:	701a      	strb	r2, [r3, #0]
				Rx_recv = 0;
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <StartTask03+0x198>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e03a      	b.n	80014d0 <StartTask03+0x164>
			}
			else if (data == 0xA5)
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <StartTask03+0x170>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2ba5      	cmp	r3, #165	; 0xa5
 8001460:	d107      	bne.n	8001472 <StartTask03+0x106>
			{	//head of string  0xA5/165
				Rx1_Buffer[1] = data;
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <StartTask03+0x170>)
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <StartTask03+0x194>)
 8001468:	705a      	strb	r2, [r3, #1]
				Rx_len = 1;			//Ready to get length of string
 800146a:	4b27      	ldr	r3, [pc, #156]	; (8001508 <StartTask03+0x19c>)
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e02e      	b.n	80014d0 <StartTask03+0x164>
			}

			else if (Rx_len == 1)
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <StartTask03+0x19c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10a      	bne.n	8001490 <StartTask03+0x124>
			{	//Is it a length of string
				Rx1_Buffer[2] = data;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <StartTask03+0x170>)
 800147c:	781a      	ldrb	r2, [r3, #0]
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <StartTask03+0x194>)
 8001480:	709a      	strb	r2, [r3, #2]
				Rx_len = 0;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <StartTask03+0x19c>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
				Rx_indx = 3;
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <StartTask03+0x1a0>)
 800148a:	2203      	movs	r2, #3
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	e01f      	b.n	80014d0 <StartTask03+0x164>
			}

			else
			{
				if (Rx1_Buffer[2] > Rx_indx)
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <StartTask03+0x194>)
 8001492:	789a      	ldrb	r2, [r3, #2]
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <StartTask03+0x1a0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d90b      	bls.n	80014b4 <StartTask03+0x148>
					Rx1_Buffer[Rx_indx++] = data;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <StartTask03+0x1a0>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	b2d1      	uxtb	r1, r2
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <StartTask03+0x1a0>)
 80014a6:	7011      	strb	r1, [r2, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <StartTask03+0x170>)
 80014ac:	7819      	ldrb	r1, [r3, #0]
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <StartTask03+0x194>)
 80014b0:	5499      	strb	r1, [r3, r2]
 80014b2:	e00d      	b.n	80014d0 <StartTask03+0x164>
				else
				{
					Rx1_Buffer[Rx_indx++] = data; //already get length of string
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <StartTask03+0x1a0>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	b2d1      	uxtb	r1, r2
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <StartTask03+0x1a0>)
 80014be:	7011      	strb	r1, [r2, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <StartTask03+0x170>)
 80014c4:	7819      	ldrb	r1, [r3, #0]
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <StartTask03+0x194>)
 80014c8:	5499      	strb	r1, [r3, r2]
					Rx_recv = 1;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <StartTask03+0x198>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
				}

			} //else
		}
		osDelay(Delay_task03);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f011 fce1 	bl	8012e98 <osDelay>
		if (isEmpty(&uart_4) == 0)
 80014d6:	e74d      	b.n	8001374 <StartTask03+0x8>
 80014d8:	24004b8c 	.word	0x24004b8c
 80014dc:	24000700 	.word	0x24000700
 80014e0:	24000701 	.word	0x24000701
 80014e4:	24004db8 	.word	0x24004db8
 80014e8:	08017fe8 	.word	0x08017fe8
 80014ec:	24004e08 	.word	0x24004e08
 80014f0:	24004d70 	.word	0x24004d70
 80014f4:	24004d9c 	.word	0x24004d9c
 80014f8:	58020800 	.word	0x58020800
 80014fc:	24004d04 	.word	0x24004d04
 8001500:	24004df4 	.word	0x24004df4
 8001504:	24004d6e 	.word	0x24004d6e
 8001508:	24000702 	.word	0x24000702
 800150c:	24000703 	.word	0x24000703

08001510 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	     ttt = (float)HP_Temp/10;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <StartTask04+0x3c>)
 800151a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001526:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800152a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <StartTask04+0x40>)
 8001530:	edc3 7a00 	vstr	s15, [r3]
	//     HAL_UART_Transmit(&huart4,  HP_Temp ,sizeof(3), 100);
	    printf("Temp = %d \r\n", HP_Temp);
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <StartTask04+0x3c>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <StartTask04+0x44>)
 800153e:	f014 fad9 	bl	8015af4 <iprintf>
    osDelay(200);
 8001542:	20c8      	movs	r0, #200	; 0xc8
 8001544:	f011 fca8 	bl	8012e98 <osDelay>
  {
 8001548:	e7e6      	b.n	8001518 <StartTask04+0x8>
 800154a:	bf00      	nop
 800154c:	24004d70 	.word	0x24004d70
 8001550:	24004e14 	.word	0x24004e14
 8001554:	08017fec 	.word	0x08017fec

08001558 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f011 fc99 	bl	8012e98 <osDelay>
 8001566:	e7fb      	b.n	8001560 <StartTask05+0x8>

08001568 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f011 fc91 	bl	8012e98 <osDelay>
 8001576:	e7fb      	b.n	8001570 <StartTask06+0x8>

08001578 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void const * argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	uint8_t first, second;

	//=============  Temperature  ===============
	for (;;)
	{   // HP temperature detection
		first = HP_Temp >> 8;
 8001580:	4b5e      	ldr	r3, [pc, #376]	; (80016fc <StartTask07+0x184>)
 8001582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001586:	121b      	asrs	r3, r3, #8
 8001588:	b21b      	sxth	r3, r3
 800158a:	73fb      	strb	r3, [r7, #15]
		second = HP_Temp & 0x00FF;
 800158c:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <StartTask07+0x184>)
 800158e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001592:	73bb      	strb	r3, [r7, #14]
		GUI_temp[6] = first;  // Disp temperature and show it on LCD
 8001594:	4a5a      	ldr	r2, [pc, #360]	; (8001700 <StartTask07+0x188>)
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	7193      	strb	r3, [r2, #6]
		GUI_temp[7] = second;
 800159a:	4a59      	ldr	r2, [pc, #356]	; (8001700 <StartTask07+0x188>)
 800159c:	7bbb      	ldrb	r3, [r7, #14]
 800159e:	71d3      	strb	r3, [r2, #7]
		HAL_UART_Transmit(&huart1, GUI_temp, sizeof(GUI_temp), 100);
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	2208      	movs	r2, #8
 80015a4:	4956      	ldr	r1, [pc, #344]	; (8001700 <StartTask07+0x188>)
 80015a6:	4857      	ldr	r0, [pc, #348]	; (8001704 <StartTask07+0x18c>)
 80015a8:	f00c fc67 	bl	800de7a <HAL_UART_Transmit>

		//=============  Total energy & count value ===============
		if (Count_energy)
 80015ac:	4b56      	ldr	r3, [pc, #344]	; (8001708 <StartTask07+0x190>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d03f      	beq.n	8001634 <StartTask07+0xbc>
		{
			if (Stamp)
 80015b4:	4b55      	ldr	r3, [pc, #340]	; (800170c <StartTask07+0x194>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d01d      	beq.n	80015f8 <StartTask07+0x80>
			{
				GUI_sum_value[6] =  (sum_count) >> 24;
 80015bc:	4b54      	ldr	r3, [pc, #336]	; (8001710 <StartTask07+0x198>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0e1b      	lsrs	r3, r3, #24
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <StartTask07+0x19c>)
 80015c6:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] =  ((sum_count) >> 16) & 0xFF;
 80015c8:	4b51      	ldr	r3, [pc, #324]	; (8001710 <StartTask07+0x198>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <StartTask07+0x19c>)
 80015d2:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] =  ((sum_count) >> 8) & 0xFF;
 80015d4:	4b4e      	ldr	r3, [pc, #312]	; (8001710 <StartTask07+0x198>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <StartTask07+0x19c>)
 80015de:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] =  (sum_count) & 0xFF;
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <StartTask07+0x198>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <StartTask07+0x19c>)
 80015e8:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 80015ea:	2364      	movs	r3, #100	; 0x64
 80015ec:	220a      	movs	r2, #10
 80015ee:	4949      	ldr	r1, [pc, #292]	; (8001714 <StartTask07+0x19c>)
 80015f0:	4844      	ldr	r0, [pc, #272]	; (8001704 <StartTask07+0x18c>)
 80015f2:	f00c fc42 	bl	800de7a <HAL_UART_Transmit>
 80015f6:	e07c      	b.n	80016f2 <StartTask07+0x17a>
						100);
			}
			else
			{
				GUI_sum_value[6] = (sum_count_t) >> 24;
 80015f8:	4b47      	ldr	r3, [pc, #284]	; (8001718 <StartTask07+0x1a0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0e1b      	lsrs	r3, r3, #24
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b44      	ldr	r3, [pc, #272]	; (8001714 <StartTask07+0x19c>)
 8001602:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_count_t) >> 16) & 0xFF;
 8001604:	4b44      	ldr	r3, [pc, #272]	; (8001718 <StartTask07+0x1a0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0c1b      	lsrs	r3, r3, #16
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b41      	ldr	r3, [pc, #260]	; (8001714 <StartTask07+0x19c>)
 800160e:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_count_t) >> 8) & 0xFF;
 8001610:	4b41      	ldr	r3, [pc, #260]	; (8001718 <StartTask07+0x1a0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <StartTask07+0x19c>)
 800161a:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_count_t) & 0xFF;
 800161c:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <StartTask07+0x1a0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <StartTask07+0x19c>)
 8001624:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 8001626:	2364      	movs	r3, #100	; 0x64
 8001628:	220a      	movs	r2, #10
 800162a:	493a      	ldr	r1, [pc, #232]	; (8001714 <StartTask07+0x19c>)
 800162c:	4835      	ldr	r0, [pc, #212]	; (8001704 <StartTask07+0x18c>)
 800162e:	f00c fc24 	bl	800de7a <HAL_UART_Transmit>
 8001632:	e05e      	b.n	80016f2 <StartTask07+0x17a>
						100);
			}
		}
		else
		{
			if (Stamp)
 8001634:	4b35      	ldr	r3, [pc, #212]	; (800170c <StartTask07+0x194>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d02d      	beq.n	8001698 <StartTask07+0x120>
			{
				GUI_sum_value[6] = (sum_energy/10) >> 24;
 800163c:	4b37      	ldr	r3, [pc, #220]	; (800171c <StartTask07+0x1a4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a37      	ldr	r2, [pc, #220]	; (8001720 <StartTask07+0x1a8>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	0e1b      	lsrs	r3, r3, #24
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b31      	ldr	r3, [pc, #196]	; (8001714 <StartTask07+0x19c>)
 800164e:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_energy/10) >> 16) & 0xFF;
 8001650:	4b32      	ldr	r3, [pc, #200]	; (800171c <StartTask07+0x1a4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a32      	ldr	r2, [pc, #200]	; (8001720 <StartTask07+0x1a8>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	08db      	lsrs	r3, r3, #3
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <StartTask07+0x19c>)
 8001662:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_energy/10) >> 8) & 0xFF;
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <StartTask07+0x1a4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <StartTask07+0x1a8>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	08db      	lsrs	r3, r3, #3
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b27      	ldr	r3, [pc, #156]	; (8001714 <StartTask07+0x19c>)
 8001676:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_energy/10) & 0xFF;
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <StartTask07+0x1a4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a28      	ldr	r2, [pc, #160]	; (8001720 <StartTask07+0x1a8>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <StartTask07+0x19c>)
 8001688:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 800168a:	2364      	movs	r3, #100	; 0x64
 800168c:	220a      	movs	r2, #10
 800168e:	4921      	ldr	r1, [pc, #132]	; (8001714 <StartTask07+0x19c>)
 8001690:	481c      	ldr	r0, [pc, #112]	; (8001704 <StartTask07+0x18c>)
 8001692:	f00c fbf2 	bl	800de7a <HAL_UART_Transmit>
 8001696:	e02c      	b.n	80016f2 <StartTask07+0x17a>
						100);
			}
			else
			{
				GUI_sum_value[6] = (sum_energy_t/10) >> 24;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <StartTask07+0x1ac>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a20      	ldr	r2, [pc, #128]	; (8001720 <StartTask07+0x1a8>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	08db      	lsrs	r3, r3, #3
 80016a4:	0e1b      	lsrs	r3, r3, #24
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <StartTask07+0x19c>)
 80016aa:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_energy_t/10) >> 16) & 0xFF;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <StartTask07+0x1ac>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <StartTask07+0x1a8>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	08db      	lsrs	r3, r3, #3
 80016b8:	0c1b      	lsrs	r3, r3, #16
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <StartTask07+0x19c>)
 80016be:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_energy_t/10) >> 8) & 0xFF;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <StartTask07+0x1ac>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a16      	ldr	r2, [pc, #88]	; (8001720 <StartTask07+0x1a8>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	08db      	lsrs	r3, r3, #3
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <StartTask07+0x19c>)
 80016d2:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_energy_t/10) & 0xFF;
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <StartTask07+0x1ac>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a11      	ldr	r2, [pc, #68]	; (8001720 <StartTask07+0x1a8>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	08db      	lsrs	r3, r3, #3
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <StartTask07+0x19c>)
 80016e4:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 80016e6:	2364      	movs	r3, #100	; 0x64
 80016e8:	220a      	movs	r2, #10
 80016ea:	490a      	ldr	r1, [pc, #40]	; (8001714 <StartTask07+0x19c>)
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <StartTask07+0x18c>)
 80016ee:	f00c fbc4 	bl	800de7a <HAL_UART_Transmit>
						100);
			}
		}

		osDelay(Delay_task07);  //500ms
 80016f2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80016f6:	f011 fbcf 	bl	8012e98 <osDelay>
		first = HP_Temp >> 8;
 80016fa:	e741      	b.n	8001580 <StartTask07+0x8>
 80016fc:	24004d70 	.word	0x24004d70
 8001700:	24000010 	.word	0x24000010
 8001704:	24005080 	.word	0x24005080
 8001708:	24004d68 	.word	0x24004d68
 800170c:	24004d72 	.word	0x24004d72
 8001710:	24004db4 	.word	0x24004db4
 8001714:	24000028 	.word	0x24000028
 8001718:	24004d60 	.word	0x24004d60
 800171c:	24004dac 	.word	0x24004dac
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	24004da0 	.word	0x24004da0

08001728 <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void const * argument)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f011 fbb1 	bl	8012e98 <osDelay>
 8001736:	e7fb      	b.n	8001730 <StartTask08+0x8>

08001738 <push>:
/* USER CODE BEGIN Application */
//=============== Ring buffer =====================


void push(uart_t *u, uint8_t data)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	70fb      	strb	r3, [r7, #3]
	u->buffer[u->head] = data;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	709a      	strb	r2, [r3, #2]
	u->head++;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	701a      	strb	r2, [r3, #0]
	if (u->head >= MAX_BUFFER_SIZE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b3f      	cmp	r3, #63	; 0x3f
 8001764:	d902      	bls.n	800176c <push+0x34>
	{
		u->head = 0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
	}
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <pop>:

uint8_t pop(uart_t *u)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	uint8_t data = u->buffer[u->tail];
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	785b      	ldrb	r3, [r3, #1]
 8001784:	461a      	mov	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	789b      	ldrb	r3, [r3, #2]
 800178c:	73fb      	strb	r3, [r7, #15]
	u->tail++;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	785b      	ldrb	r3, [r3, #1]
 8001792:	3301      	adds	r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	705a      	strb	r2, [r3, #1]
	if (u->tail >= MAX_BUFFER_SIZE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	785b      	ldrb	r3, [r3, #1]
 800179e:	2b3f      	cmp	r3, #63	; 0x3f
 80017a0:	d902      	bls.n	80017a8 <pop+0x30>
	{
		u->tail = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	705a      	strb	r2, [r3, #1]
	}
	return data;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <isEmpty>:

uint8_t isEmpty(uart_t *u)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	return u->head == u->tail;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	785b      	ldrb	r3, [r3, #1]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	bf0c      	ite	eq
 80017ca:	2301      	moveq	r3, #1
 80017cc:	2300      	movne	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_UART_RxCpltCallback+0x50>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10a      	bne.n	8001804 <HAL_UART_RxCpltCallback+0x28>
	{
		push(&uart_1, rx1_data);  //save data to Ring buffer
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_UART_RxCpltCallback+0x54>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	480f      	ldr	r0, [pc, #60]	; (8001834 <HAL_UART_RxCpltCallback+0x58>)
 80017f6:	f7ff ff9f 	bl	8001738 <push>
		HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 80017fa:	2201      	movs	r2, #1
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <HAL_UART_RxCpltCallback+0x54>)
 80017fe:	480e      	ldr	r0, [pc, #56]	; (8001838 <HAL_UART_RxCpltCallback+0x5c>)
 8001800:	f00c fbd2 	bl	800dfa8 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART4)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0c      	ldr	r2, [pc, #48]	; (800183c <HAL_UART_RxCpltCallback+0x60>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d10a      	bne.n	8001824 <HAL_UART_RxCpltCallback+0x48>
	{
		push(&uart_4, rx4_data);  //save data to Ring buffer
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_UART_RxCpltCallback+0x64>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <HAL_UART_RxCpltCallback+0x68>)
 8001816:	f7ff ff8f 	bl	8001738 <push>
		HAL_UART_Receive_IT(&huart4, &rx4_data, 1);
 800181a:	2201      	movs	r2, #1
 800181c:	4908      	ldr	r1, [pc, #32]	; (8001840 <HAL_UART_RxCpltCallback+0x64>)
 800181e:	480a      	ldr	r0, [pc, #40]	; (8001848 <HAL_UART_RxCpltCallback+0x6c>)
 8001820:	f00c fbc2 	bl	800dfa8 <HAL_UART_Receive_IT>
	}

}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40011000 	.word	0x40011000
 8001830:	24004d00 	.word	0x24004d00
 8001834:	24004d04 	.word	0x24004d04
 8001838:	24005080 	.word	0x24005080
 800183c:	40004c00 	.word	0x40004c00
 8001840:	24004c34 	.word	0x24004c34
 8001844:	24004b8c 	.word	0x24004b8c
 8001848:	24005110 	.word	0x24005110

0800184c <MX_GPIO_Init>:
     PC11   ------> SDMMC1_D3
     PC12   ------> SDMMC1_CK
     PD2   ------> SDMMC1_CMD
*/
void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001862:	4b95      	ldr	r3, [pc, #596]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	4a93      	ldr	r2, [pc, #588]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001872:	4b91      	ldr	r3, [pc, #580]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001880:	4b8d      	ldr	r3, [pc, #564]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001886:	4a8c      	ldr	r2, [pc, #560]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001890:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	4b86      	ldr	r3, [pc, #536]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a4:	4a84      	ldr	r2, [pc, #528]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 80018a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ae:	4b82      	ldr	r3, [pc, #520]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b7e      	ldr	r3, [pc, #504]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c2:	4a7d      	ldr	r2, [pc, #500]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018cc:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b77      	ldr	r3, [pc, #476]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	4a75      	ldr	r2, [pc, #468]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 80018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f8:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	4a6e      	ldr	r2, [pc, #440]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001908:	4b6b      	ldr	r3, [pc, #428]	; (8001ab8 <MX_GPIO_Init+0x26c>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEY_GPIO_Port, KEY_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2108      	movs	r1, #8
 800191a:	4868      	ldr	r0, [pc, #416]	; (8001abc <MX_GPIO_Init+0x270>)
 800191c:	f005 fbe0 	bl	80070e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001926:	4865      	ldr	r0, [pc, #404]	; (8001abc <MX_GPIO_Init+0x270>)
 8001928:	f005 fbda 	bl	80070e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fire_lamp_GPIO_Port, Fire_lamp_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001932:	4863      	ldr	r0, [pc, #396]	; (8001ac0 <MX_GPIO_Init+0x274>)
 8001934:	f005 fbd4 	bl	80070e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 800193e:	4861      	ldr	r0, [pc, #388]	; (8001ac4 <MX_GPIO_Init+0x278>)
 8001940:	f005 fbce 	bl	80070e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	485f      	ldr	r0, [pc, #380]	; (8001ac8 <MX_GPIO_Init+0x27c>)
 800194a:	f005 fbc9 	bl	80070e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_CS_GPIO_Port, F_CS_Pin, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2140      	movs	r1, #64	; 0x40
 8001952:	485c      	ldr	r0, [pc, #368]	; (8001ac4 <MX_GPIO_Init+0x278>)
 8001954:	f005 fbc4 	bl	80070e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001958:	2308      	movs	r3, #8
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4853      	ldr	r0, [pc, #332]	; (8001abc <MX_GPIO_Init+0x270>)
 8001970:	f005 f9ee 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 8001974:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	484f      	ldr	r0, [pc, #316]	; (8001ac8 <MX_GPIO_Init+0x27c>)
 800198a:	f005 f9e1 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800198e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4845      	ldr	r0, [pc, #276]	; (8001abc <MX_GPIO_Init+0x270>)
 80019a8:	f005 f9d2 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Fire_lamp_Pin;
 80019ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Fire_lamp_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	483e      	ldr	r0, [pc, #248]	; (8001ac0 <MX_GPIO_Init+0x274>)
 80019c6:	f005 f9c3 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4619      	mov	r1, r3
 80019de:	4838      	ldr	r0, [pc, #224]	; (8001ac0 <MX_GPIO_Init+0x274>)
 80019e0:	f005 f9b6 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15;
 80019e4:	f44f 4343 	mov.w	r3, #49920	; 0xc300
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	4831      	ldr	r0, [pc, #196]	; (8001ac4 <MX_GPIO_Init+0x278>)
 80019fe:	f005 f9a7 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	4619      	mov	r1, r3
 8001a16:	482b      	ldr	r0, [pc, #172]	; (8001ac4 <MX_GPIO_Init+0x278>)
 8001a18:	f005 f99a 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Test_LED_Pin;
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a24:	2302      	movs	r3, #2
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Test_LED_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4825      	ldr	r0, [pc, #148]	; (8001ac8 <MX_GPIO_Init+0x27c>)
 8001a34:	f005 f98c 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a38:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	481c      	ldr	r0, [pc, #112]	; (8001ac8 <MX_GPIO_Init+0x27c>)
 8001a56:	f005 f97b 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Foot_Pin;
 8001a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Foot_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4817      	ldr	r0, [pc, #92]	; (8001acc <MX_GPIO_Init+0x280>)
 8001a70:	f005 f96e 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a74:	2304      	movs	r3, #4
 8001a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001a84:	230c      	movs	r3, #12
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_GPIO_Init+0x278>)
 8001a90:	f005 f95e 	bl	8006d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_CS_Pin;
 8001a94:	2340      	movs	r3, #64	; 0x40
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(F_CS_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <MX_GPIO_Init+0x278>)
 8001aac:	f005 f950 	bl	8006d50 <HAL_GPIO_Init>

}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	; 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	58021000 	.word	0x58021000
 8001ac0:	58020400 	.word	0x58020400
 8001ac4:	58020c00 	.word	0x58020c00
 8001ac8:	58020800 	.word	0x58020800
 8001acc:	58020000 	.word	0x58020000

08001ad0 <_write>:
void PeriphCommonClock_Config(void);
void MX_FREERTOS_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *str, int len) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*)str, len);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	68b8      	ldr	r0, [r7, #8]
 8001ae4:	f012 fdca 	bl	801467c <CDC_Transmit_FS>
	return len;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <init_uart>:
	HAL_GPIO_WritePin(KEY_GPIO_Port,KEY_Pin,GPIO_PIN_RESET);
	HAL_Delay(Ldelay-1);
}

void init_uart(uart_t *u)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
	u->head = 0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
	u->tail = 0;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	705a      	strb	r2, [r3, #1]
	memset(u->buffer, 0, sizeof(u->buffer));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f013 fb49 	bl	80151a6 <memset>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	; 0x30
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_Init();
 8001b22:	f003 f847 	bl	8004bb4 <HAL_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b26:	f003 f845 	bl	8004bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2a:	f000 f847 	bl	8001bbc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001b2e:	f000 f8d7 	bl	8001ce0 <PeriphCommonClock_Config>
	RTC_DateTypeDef sdatestructureget  ;
	RTC_TimeTypeDef stimestructureget  ;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b32:	f7ff fe8b 	bl	800184c <MX_GPIO_Init>
  MX_RTC_Init();
 8001b36:	f000 f94d 	bl	8001dd4 <MX_RTC_Init>
  MX_SPI1_Init();
 8001b3a:	f000 f9d5 	bl	8001ee8 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001b3e:	f000 fa29 	bl	8001f94 <MX_SPI4_Init>
  MX_TIM1_Init();
 8001b42:	f000 fd45 	bl	80025d0 <MX_TIM1_Init>
  MX_UART4_Init();
 8001b46:	f000 fe2f 	bl	80027a8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001b4a:	f000 fe79 	bl	8002840 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001b4e:	f000 fec3 	bl	80028d8 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001b52:	f7fe fe79 	bl	8000848 <MX_ADC3_Init>
  MX_ADC2_Init();
 8001b56:	f7fe fe11 	bl	800077c <MX_ADC2_Init>
  MX_DAC1_Init();
 8001b5a:	f7fe ffd9 	bl	8000b10 <MX_DAC1_Init>
  MX_ADC1_Init();
 8001b5e:	f7fe fd93 	bl	8000688 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001b62:	f000 f902 	bl	8001d6a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	init_uart(&uart_1);
 8001b66:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <main+0x84>)
 8001b68:	f7ff ffc3 	bl	8001af2 <init_uart>
	init_uart(&uart_4);
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <main+0x88>)
 8001b6e:	f7ff ffc0 	bl	8001af2 <init_uart>
	HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <main+0x8c>)
 8001b76:	480d      	ldr	r0, [pc, #52]	; (8001bac <main+0x90>)
 8001b78:	f00c fa16 	bl	800dfa8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &rx4_data, 1);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <main+0x94>)
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <main+0x98>)
 8001b82:	f00c fa11 	bl	800dfa8 <HAL_UART_Receive_IT>

	printf("Hello \n\r");
 8001b86:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <main+0x9c>)
 8001b88:	f013 ffb4 	bl	8015af4 <iprintf>


	volume(0x15);
 8001b8c:	2015      	movs	r0, #21
 8001b8e:	f000 f98d 	bl	8001eac <volume>
 	LCD_Test();
 8001b92:	f001 f813 	bl	8002bbc <LCD_Test>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001b96:	f7ff f857 	bl	8000c48 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001b9a:	f011 f92a 	bl	8012df2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <main+0x82>
 8001ba0:	24004d04 	.word	0x24004d04
 8001ba4:	24004b8c 	.word	0x24004b8c
 8001ba8:	24004d00 	.word	0x24004d00
 8001bac:	24005080 	.word	0x24005080
 8001bb0:	24004c34 	.word	0x24004c34
 8001bb4:	24005110 	.word	0x24005110
 8001bb8:	08017ffc 	.word	0x08017ffc

08001bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b09c      	sub	sp, #112	; 0x70
 8001bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	224c      	movs	r2, #76	; 0x4c
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f013 faeb 	bl	80151a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f013 fae5 	bl	80151a6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001bdc:	2002      	movs	r0, #2
 8001bde:	f006 fc9d 	bl	800851c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <SystemClock_Config+0x118>)
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	4a3a      	ldr	r2, [pc, #232]	; (8001cd4 <SystemClock_Config+0x118>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <SystemClock_Config+0x118>)
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <SystemClock_Config+0x11c>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c04:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <SystemClock_Config+0x11c>)
 8001c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <SystemClock_Config+0x11c>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c18:	bf00      	nop
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <SystemClock_Config+0x11c>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c26:	d1f8      	bne.n	8001c1a <SystemClock_Config+0x5e>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c28:	f006 fc68 	bl	80084fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c2c:	f003 f842 	bl	8004cb4 <HAL_GetREVID>
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <SystemClock_Config+0x120>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	4a29      	ldr	r2, [pc, #164]	; (8001cdc <SystemClock_Config+0x120>)
 8001c36:	f023 0318 	bic.w	r3, r3, #24
 8001c3a:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <SystemClock_Config+0x120>)
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	f023 0303 	bic.w	r3, r3, #3
 8001c44:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <SystemClock_Config+0x120>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c56:	2301      	movs	r3, #1
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001c62:	2302      	movs	r3, #2
 8001c64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001c66:	230c      	movs	r3, #12
 8001c68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c76:	230c      	movs	r3, #12
 8001c78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	4618      	mov	r0, r3
 8001c88:	f006 fc92 	bl	80085b0 <HAL_RCC_OscConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001c92:	f000 f899 	bl	8001dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c96:	233f      	movs	r3, #63	; 0x3f
 8001c98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001caa:	2340      	movs	r3, #64	; 0x40
 8001cac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f007 f887 	bl	8008dd0 <HAL_RCC_ClockConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001cc8:	f000 f87e 	bl	8001dc8 <Error_Handler>
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3770      	adds	r7, #112	; 0x70
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	58000400 	.word	0x58000400
 8001cd8:	58024800 	.word	0x58024800
 8001cdc:	58024400 	.word	0x58024400

08001ce0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0b0      	sub	sp, #192	; 0xc0
 8001ce4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	22bc      	movs	r2, #188	; 0xbc
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f013 fa5a 	bl	80151a6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
 8001cf2:	f44f 2342 	mov.w	r3, #794624	; 0xc2000
 8001cf6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001d00:	2304      	movs	r3, #4
 8001d02:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001d0c:	23c0      	movs	r3, #192	; 0xc0
 8001d0e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001d10:	2320      	movs	r3, #32
 8001d12:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 5;
 8001d20:	2305      	movs	r3, #5
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001d24:	2303      	movs	r3, #3
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001d2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 8001d3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d40:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001d42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	4618      	mov	r0, r3
 8001d54:	f007 fc0a 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <PeriphCommonClock_Config+0x82>
  {
    Error_Handler();
 8001d5e:	f000 f833 	bl	8001dc8 <Error_Handler>
  }
}
 8001d62:	bf00      	nop
 8001d64:	37c0      	adds	r7, #192	; 0xc0
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2105      	movs	r1, #5
 8001d72:	2025      	movs	r0, #37	; 0x25
 8001d74:	f004 f910 	bl	8005f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d78:	2025      	movs	r0, #37	; 0x25
 8001d7a:	f004 f927 	bl	8005fcc <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2105      	movs	r1, #5
 8001d82:	2027      	movs	r0, #39	; 0x27
 8001d84:	f004 f908 	bl	8005f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d88:	2027      	movs	r0, #39	; 0x27
 8001d8a:	f004 f91f 	bl	8005fcc <HAL_NVIC_EnableIRQ>
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2105      	movs	r1, #5
 8001d92:	2034      	movs	r0, #52	; 0x34
 8001d94:	f004 f900 	bl	8005f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d98:	2034      	movs	r0, #52	; 0x34
 8001d9a:	f004 f917 	bl	8005fcc <HAL_NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001db6:	f002 ff39 	bl	8004c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40014800 	.word	0x40014800

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dcc:	b672      	cpsid	i
}
 8001dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <Error_Handler+0x8>
	...

08001dd4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b090      	sub	sp, #64	; 0x40
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
		RTC_TimeTypeDef sTime = {0};
 8001dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]
		  RTC_DateTypeDef sDate = {0};
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
		  RTC_AlarmTypeDef sAlarm = {0};
 8001dee:	463b      	mov	r3, r7
 8001df0:	2228      	movs	r2, #40	; 0x28
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f013 f9d6 	bl	80151a6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <MX_RTC_Init+0x70>)
 8001dfc:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <MX_RTC_Init+0x74>)
 8001dfe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <MX_RTC_Init+0x70>)
 8001e02:	2240      	movs	r2, #64	; 0x40
 8001e04:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_RTC_Init+0x70>)
 8001e08:	227f      	movs	r2, #127	; 0x7f
 8001e0a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <MX_RTC_Init+0x70>)
 8001e0e:	22ff      	movs	r2, #255	; 0xff
 8001e10:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <MX_RTC_Init+0x70>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <MX_RTC_Init+0x70>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <MX_RTC_Init+0x70>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <MX_RTC_Init+0x70>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e2a:	4806      	ldr	r0, [pc, #24]	; (8001e44 <MX_RTC_Init+0x70>)
 8001e2c:	f009 fd24 	bl	800b878 <HAL_RTC_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001e36:	f7ff ffc7 	bl	8001dc8 <Error_Handler>
    {
      Error_Handler();
    }
  /* USER CODE END RTC_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3740      	adds	r7, #64	; 0x40
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	24004e24 	.word	0x24004e24
 8001e48:	58004000 	.word	0x58004000

08001e4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b0b2      	sub	sp, #200	; 0xc8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	22bc      	movs	r2, #188	; 0xbc
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f013 f9a2 	bl	80151a6 <memset>
  if(rtcHandle->Instance==RTC)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_RTC_MspInit+0x58>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d116      	bne.n	8001e9a <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e70:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f007 fb74 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001e8a:	f7ff ff9d 	bl	8001dc8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RTC_MspInit+0x5c>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <HAL_RTC_MspInit+0x5c>)
 8001e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	37c8      	adds	r7, #200	; 0xc8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	58004000 	.word	0x58004000
 8001ea8:	58024400 	.word	0x58024400

08001eac <volume>:
void play(uint8_t Track) {
	uint8_t play[6] = { 0xAA, 0x07, 0x02, 0x00, Track, Track + 0xB3 };
	HAL_UART_Transmit(&huart3, play, sizeof(play), 100);
}

void volume(uint8_t vol) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
	uint8_t volume[5] = { 0xAA, 0x13, 0x01, vol, vol + 0xBE };
 8001eb6:	23aa      	movs	r3, #170	; 0xaa
 8001eb8:	723b      	strb	r3, [r7, #8]
 8001eba:	2313      	movs	r3, #19
 8001ebc:	727b      	strb	r3, [r7, #9]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	72bb      	strb	r3, [r7, #10]
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	72fb      	strb	r3, [r7, #11]
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	3b42      	subs	r3, #66	; 0x42
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, volume, sizeof(volume), 100);
 8001ece:	f107 0108 	add.w	r1, r7, #8
 8001ed2:	2364      	movs	r3, #100	; 0x64
 8001ed4:	2205      	movs	r2, #5
 8001ed6:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <volume+0x38>)
 8001ed8:	f00b ffcf 	bl	800de7a <HAL_UART_Transmit>
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	24004e48 	.word	0x24004e48

08001ee8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001eee:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <MX_SPI1_Init+0xa8>)
 8001ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001ef4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f02:	2207      	movs	r2, #7
 8001f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_SPI1_Init+0xa4>)
 8001f78:	f009 fd8a 	bl	800ba90 <HAL_SPI_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001f82:	f7ff ff21 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	24004f60 	.word	0x24004f60
 8001f90:	40013000 	.word	0x40013000

08001f94 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <MX_SPI4_Init+0xa8>)
 8001f9a:	4a29      	ldr	r2, [pc, #164]	; (8002040 <MX_SPI4_Init+0xac>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fa0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fa4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8001fa6:	4b25      	ldr	r3, [pc, #148]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fa8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001fac:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fae:	4b23      	ldr	r3, [pc, #140]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fc6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fce:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_SPI4_Init+0xa8>)
 8001fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <MX_SPI4_Init+0xa8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_SPI4_Init+0xa8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <MX_SPI4_Init+0xa8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <MX_SPI4_Init+0xa8>)
 8002004:	2200      	movs	r2, #0
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <MX_SPI4_Init+0xa8>)
 800200a:	2200      	movs	r2, #0
 800200c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <MX_SPI4_Init+0xa8>)
 8002010:	2200      	movs	r2, #0
 8002012:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <MX_SPI4_Init+0xa8>)
 8002016:	2200      	movs	r2, #0
 8002018:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <MX_SPI4_Init+0xa8>)
 800201c:	2200      	movs	r2, #0
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <MX_SPI4_Init+0xa8>)
 8002022:	2200      	movs	r2, #0
 8002024:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_SPI4_Init+0xa8>)
 8002028:	f009 fd32 	bl	800ba90 <HAL_SPI_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8002032:	f7ff fec9 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	24004ed8 	.word	0x24004ed8
 8002040:	40013400 	.word	0x40013400

08002044 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0bc      	sub	sp, #240	; 0xf0
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800205c:	f107 0320 	add.w	r3, r7, #32
 8002060:	22bc      	movs	r2, #188	; 0xbc
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f013 f89e 	bl	80151a6 <memset>
  if(spiHandle->Instance==SPI1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a53      	ldr	r2, [pc, #332]	; (80021bc <HAL_SPI_MspInit+0x178>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d166      	bne.n	8002142 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002078:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800207a:	2300      	movs	r3, #0
 800207c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207e:	f107 0320 	add.w	r3, r7, #32
 8002082:	4618      	mov	r0, r3
 8002084:	f007 fa72 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800208e:	f7ff fe9b 	bl	8001dc8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002092:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 8002094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 800209a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800209e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 80020a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b0:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 80020b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b6:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c0:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	4a3a      	ldr	r2, [pc, #232]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 80020d6:	f043 0302 	orr.w	r3, r3, #2
 80020da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80020fe:	2301      	movs	r3, #1
 8002100:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002104:	2305      	movs	r3, #5
 8002106:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800210e:	4619      	mov	r1, r3
 8002110:	482c      	ldr	r0, [pc, #176]	; (80021c4 <HAL_SPI_MspInit+0x180>)
 8002112:	f004 fe1d 	bl	8006d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002116:	2318      	movs	r3, #24
 8002118:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002128:	2301      	movs	r3, #1
 800212a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800212e:	2305      	movs	r3, #5
 8002130:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002138:	4619      	mov	r1, r3
 800213a:	4823      	ldr	r0, [pc, #140]	; (80021c8 <HAL_SPI_MspInit+0x184>)
 800213c:	f004 fe08 	bl	8006d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002140:	e038      	b.n	80021b4 <HAL_SPI_MspInit+0x170>
  else if(spiHandle->Instance==SPI4)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a21      	ldr	r2, [pc, #132]	; (80021cc <HAL_SPI_MspInit+0x188>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d133      	bne.n	80021b4 <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800214c:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 800214e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002152:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 8002154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002158:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 800215e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_SPI_MspInit+0x17c>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002188:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800218c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800219c:	2301      	movs	r3, #1
 800219e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80021a2:	2305      	movs	r3, #5
 80021a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021ac:	4619      	mov	r1, r3
 80021ae:	4808      	ldr	r0, [pc, #32]	; (80021d0 <HAL_SPI_MspInit+0x18c>)
 80021b0:	f004 fdce 	bl	8006d50 <HAL_GPIO_Init>
}
 80021b4:	bf00      	nop
 80021b6:	37f0      	adds	r7, #240	; 0xf0
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40013000 	.word	0x40013000
 80021c0:	58024400 	.word	0x58024400
 80021c4:	58020c00 	.word	0x58020c00
 80021c8:	58020400 	.word	0x58020400
 80021cc:	40013400 	.word	0x40013400
 80021d0:	58021000 	.word	0x58021000

080021d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_MspInit+0x38>)
 80021dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_MspInit+0x38>)
 80021e2:	f043 0302 	orr.w	r3, r3, #2
 80021e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_MspInit+0x38>)
 80021ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	210f      	movs	r1, #15
 80021fc:	f06f 0001 	mvn.w	r0, #1
 8002200:	f003 feca 	bl	8005f98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	58024400 	.word	0x58024400

08002210 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08e      	sub	sp, #56	; 0x38
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	d844      	bhi.n	80022a8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 800221e:	2200      	movs	r2, #0
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	2076      	movs	r0, #118	; 0x76
 8002224:	f003 feb8 	bl	8005f98 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002228:	2076      	movs	r0, #118	; 0x76
 800222a:	f003 fecf 	bl	8005fcc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_InitTick+0xb0>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_InitTick+0xb4>)
 8002236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800223a:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <HAL_InitTick+0xb4>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <HAL_InitTick+0xb4>)
 8002246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800224a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002252:	f107 020c 	add.w	r2, r7, #12
 8002256:	f107 0310 	add.w	r3, r7, #16
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f007 f943 	bl	80094e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002262:	f007 f92b 	bl	80094bc <HAL_RCC_GetPCLK2Freq>
 8002266:	4603      	mov	r3, r0
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_InitTick+0xb8>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	0c9b      	lsrs	r3, r3, #18
 8002276:	3b01      	subs	r3, #1
 8002278:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_InitTick+0xbc>)
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <HAL_InitTick+0xc0>)
 800227e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0xbc>)
 8002282:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002286:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002288:	4a10      	ldr	r2, [pc, #64]	; (80022cc <HAL_InitTick+0xbc>)
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_InitTick+0xbc>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <HAL_InitTick+0xbc>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800229a:	480c      	ldr	r0, [pc, #48]	; (80022cc <HAL_InitTick+0xbc>)
 800229c:	f00a fcb3 	bl	800cc06 <HAL_TIM_Base_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d107      	bne.n	80022b6 <HAL_InitTick+0xa6>
 80022a6:	e001      	b.n	80022ac <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e005      	b.n	80022b8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80022ac:	4807      	ldr	r0, [pc, #28]	; (80022cc <HAL_InitTick+0xbc>)
 80022ae:	f00a fd0b 	bl	800ccc8 <HAL_TIM_Base_Start_IT>
 80022b2:	4603      	mov	r3, r0
 80022b4:	e000      	b.n	80022b8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3738      	adds	r7, #56	; 0x38
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	240000dc 	.word	0x240000dc
 80022c4:	58024400 	.word	0x58024400
 80022c8:	431bde83 	.word	0x431bde83
 80022cc:	24004fe8 	.word	0x24004fe8
 80022d0:	40014800 	.word	0x40014800

080022d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <NMI_Handler+0x4>

080022da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022de:	e7fe      	b.n	80022de <HardFault_Handler+0x4>

080022e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <MemManage_Handler+0x4>

080022e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <BusFault_Handler+0x4>

080022ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <UsageFault_Handler+0x4>

080022f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <USART1_IRQHandler+0x10>)
 8002306:	f00b fe95 	bl	800e034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	24005080 	.word	0x24005080

08002314 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <USART3_IRQHandler+0x10>)
 800231a:	f00b fe8b 	bl	800e034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	24004e48 	.word	0x24004e48

08002328 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <UART4_IRQHandler+0x10>)
 800232e:	f00b fe81 	bl	800e034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	24005110 	.word	0x24005110

0800233c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <OTG_FS_IRQHandler+0x10>)
 8002342:	f005 f857 	bl	80073f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	240066c0 	.word	0x240066c0

08002350 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <TIM17_IRQHandler+0x10>)
 8002356:	f00a fd7e 	bl	800ce56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	24004fe8 	.word	0x24004fe8

08002364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
	return 1;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_kill>:

int _kill(int pid, int sig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800237e:	f012 fde1 	bl	8014f44 <__errno>
 8002382:	4603      	mov	r3, r0
 8002384:	2216      	movs	r2, #22
 8002386:	601a      	str	r2, [r3, #0]
	return -1;
 8002388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_exit>:

void _exit (int status)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ffe7 	bl	8002374 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023a6:	e7fe      	b.n	80023a6 <_exit+0x12>

080023a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e00a      	b.n	80023d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ba:	f3af 8000 	nop.w
 80023be:	4601      	mov	r1, r0
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	60ba      	str	r2, [r7, #8]
 80023c6:	b2ca      	uxtb	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	dbf0      	blt.n	80023ba <_read+0x12>
	}

return len;
 80023d8:	687b      	ldr	r3, [r7, #4]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
	return -1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240a:	605a      	str	r2, [r3, #4]
	return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <_isatty>:

int _isatty(int file)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
	return 1;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
	return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f012 fd62 	bl	8014f44 <__errno>
 8002480:	4603      	mov	r3, r0
 8002482:	220c      	movs	r2, #12
 8002484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	24080000 	.word	0x24080000
 80024ac:	00002000 	.word	0x00002000
 80024b0:	24000704 	.word	0x24000704
 80024b4:	24006ad8 	.word	0x24006ad8

080024b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024bc:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <SystemInit+0xec>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <SystemInit+0xec>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024cc:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <SystemInit+0xf0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	d807      	bhi.n	80024e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024d8:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <SystemInit+0xf0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 030f 	bic.w	r3, r3, #15
 80024e0:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <SystemInit+0xf0>)
 80024e2:	f043 0307 	orr.w	r3, r3, #7
 80024e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024e8:	4b30      	ldr	r3, [pc, #192]	; (80025ac <SystemInit+0xf4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2f      	ldr	r2, [pc, #188]	; (80025ac <SystemInit+0xf4>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <SystemInit+0xf4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <SystemInit+0xf4>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	492b      	ldr	r1, [pc, #172]	; (80025ac <SystemInit+0xf4>)
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <SystemInit+0xf8>)
 8002502:	4013      	ands	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002506:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <SystemInit+0xf0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002512:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <SystemInit+0xf0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 030f 	bic.w	r3, r3, #15
 800251a:	4a23      	ldr	r2, [pc, #140]	; (80025a8 <SystemInit+0xf0>)
 800251c:	f043 0307 	orr.w	r3, r3, #7
 8002520:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002522:	4b22      	ldr	r3, [pc, #136]	; (80025ac <SystemInit+0xf4>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <SystemInit+0xf4>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800252e:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <SystemInit+0xf4>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <SystemInit+0xf4>)
 8002536:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <SystemInit+0xfc>)
 8002538:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <SystemInit+0xf4>)
 800253c:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <SystemInit+0x100>)
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <SystemInit+0xf4>)
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <SystemInit+0x104>)
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <SystemInit+0xf4>)
 8002548:	2200      	movs	r2, #0
 800254a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800254c:	4b17      	ldr	r3, [pc, #92]	; (80025ac <SystemInit+0xf4>)
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <SystemInit+0x104>)
 8002550:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002552:	4b16      	ldr	r3, [pc, #88]	; (80025ac <SystemInit+0xf4>)
 8002554:	2200      	movs	r2, #0
 8002556:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <SystemInit+0xf4>)
 800255a:	4a18      	ldr	r2, [pc, #96]	; (80025bc <SystemInit+0x104>)
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <SystemInit+0xf4>)
 8002560:	2200      	movs	r2, #0
 8002562:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <SystemInit+0xf4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a10      	ldr	r2, [pc, #64]	; (80025ac <SystemInit+0xf4>)
 800256a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <SystemInit+0xf4>)
 8002572:	2200      	movs	r2, #0
 8002574:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <SystemInit+0x108>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <SystemInit+0x10c>)
 800257c:	4013      	ands	r3, r2
 800257e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002582:	d202      	bcs.n	800258a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <SystemInit+0x110>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <SystemInit+0x114>)
 800258c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002590:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <SystemInit+0xec>)
 8002594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002598:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00
 80025a8:	52002000 	.word	0x52002000
 80025ac:	58024400 	.word	0x58024400
 80025b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80025b4:	02020200 	.word	0x02020200
 80025b8:	01ff0000 	.word	0x01ff0000
 80025bc:	01010280 	.word	0x01010280
 80025c0:	5c001000 	.word	0x5c001000
 80025c4:	ffff0000 	.word	0xffff0000
 80025c8:	51008108 	.word	0x51008108
 80025cc:	52004000 	.word	0x52004000

080025d0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b096      	sub	sp, #88	; 0x58
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]
 80025f2:	615a      	str	r2, [r3, #20]
 80025f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	222c      	movs	r2, #44	; 0x2c
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f012 fdd2 	bl	80151a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002602:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <MX_TIM1_Init+0x114>)
 8002604:	4a38      	ldr	r2, [pc, #224]	; (80026e8 <MX_TIM1_Init+0x118>)
 8002606:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 8002608:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <MX_TIM1_Init+0x114>)
 800260a:	2277      	movs	r2, #119	; 0x77
 800260c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260e:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <MX_TIM1_Init+0x114>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002614:	4b33      	ldr	r3, [pc, #204]	; (80026e4 <MX_TIM1_Init+0x114>)
 8002616:	2263      	movs	r2, #99	; 0x63
 8002618:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261a:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <MX_TIM1_Init+0x114>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <MX_TIM1_Init+0x114>)
 8002622:	2200      	movs	r2, #0
 8002624:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002626:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <MX_TIM1_Init+0x114>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800262c:	482d      	ldr	r0, [pc, #180]	; (80026e4 <MX_TIM1_Init+0x114>)
 800262e:	f00a fbbb 	bl	800cda8 <HAL_TIM_PWM_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002638:	f7ff fbc6 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263c:	2300      	movs	r3, #0
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002648:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800264c:	4619      	mov	r1, r3
 800264e:	4825      	ldr	r0, [pc, #148]	; (80026e4 <MX_TIM1_Init+0x114>)
 8002650:	f00b fa7a 	bl	800db48 <HAL_TIMEx_MasterConfigSynchronization>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800265a:	f7ff fbb5 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800265e:	2360      	movs	r3, #96	; 0x60
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002666:	2300      	movs	r3, #0
 8002668:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800266a:	2308      	movs	r3, #8
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800267a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800267e:	2204      	movs	r2, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4818      	ldr	r0, [pc, #96]	; (80026e4 <MX_TIM1_Init+0x114>)
 8002684:	f00a fd06 	bl	800d094 <HAL_TIM_PWM_ConfigChannel>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800268e:	f7ff fb9b 	bl	8001dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026be:	2300      	movs	r3, #0
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	4619      	mov	r1, r3
 80026c6:	4807      	ldr	r0, [pc, #28]	; (80026e4 <MX_TIM1_Init+0x114>)
 80026c8:	f00b fac6 	bl	800dc58 <HAL_TIMEx_ConfigBreakDeadTime>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80026d2:	f7ff fb79 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026d6:	4803      	ldr	r0, [pc, #12]	; (80026e4 <MX_TIM1_Init+0x114>)
 80026d8:	f000 f82a 	bl	8002730 <HAL_TIM_MspPostInit>

}
 80026dc:	bf00      	nop
 80026de:	3758      	adds	r7, #88	; 0x58
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	24005034 	.word	0x24005034
 80026e8:	40010000 	.word	0x40010000

080026ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <HAL_TIM_PWM_MspInit+0x3c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10e      	bne.n	800271c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_TIM_PWM_MspInit+0x40>)
 8002700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_TIM_PWM_MspInit+0x40>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_TIM_PWM_MspInit+0x40>)
 8002710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40010000 	.word	0x40010000
 800272c:	58024400 	.word	0x58024400

08002730 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <HAL_TIM_MspPostInit+0x6c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d11f      	bne.n	8002792 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_TIM_MspPostInit+0x70>)
 8002754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002758:	4a11      	ldr	r2, [pc, #68]	; (80027a0 <HAL_TIM_MspPostInit+0x70>)
 800275a:	f043 0310 	orr.w	r3, r3, #16
 800275e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <HAL_TIM_MspPostInit+0x70>)
 8002764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002774:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002782:	2301      	movs	r3, #1
 8002784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	4619      	mov	r1, r3
 800278c:	4805      	ldr	r0, [pc, #20]	; (80027a4 <HAL_TIM_MspPostInit+0x74>)
 800278e:	f004 fadf 	bl	8006d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002792:	bf00      	nop
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40010000 	.word	0x40010000
 80027a0:	58024400 	.word	0x58024400
 80027a4:	58021000 	.word	0x58021000

080027a8 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027ac:	4b22      	ldr	r3, [pc, #136]	; (8002838 <MX_UART4_Init+0x90>)
 80027ae:	4a23      	ldr	r2, [pc, #140]	; (800283c <MX_UART4_Init+0x94>)
 80027b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <MX_UART4_Init+0x90>)
 80027b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027ba:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <MX_UART4_Init+0x90>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <MX_UART4_Init+0x90>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <MX_UART4_Init+0x90>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <MX_UART4_Init+0x90>)
 80027ce:	220c      	movs	r2, #12
 80027d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <MX_UART4_Init+0x90>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <MX_UART4_Init+0x90>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <MX_UART4_Init+0x90>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <MX_UART4_Init+0x90>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <MX_UART4_Init+0x90>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027f0:	4811      	ldr	r0, [pc, #68]	; (8002838 <MX_UART4_Init+0x90>)
 80027f2:	f00b faf2 	bl	800ddda <HAL_UART_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80027fc:	f7ff fae4 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002800:	2100      	movs	r1, #0
 8002802:	480d      	ldr	r0, [pc, #52]	; (8002838 <MX_UART4_Init+0x90>)
 8002804:	f00d fa11 	bl	800fc2a <HAL_UARTEx_SetTxFifoThreshold>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800280e:	f7ff fadb 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002812:	2100      	movs	r1, #0
 8002814:	4808      	ldr	r0, [pc, #32]	; (8002838 <MX_UART4_Init+0x90>)
 8002816:	f00d fa46 	bl	800fca6 <HAL_UARTEx_SetRxFifoThreshold>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002820:	f7ff fad2 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002824:	4804      	ldr	r0, [pc, #16]	; (8002838 <MX_UART4_Init+0x90>)
 8002826:	f00d f9c7 	bl	800fbb8 <HAL_UARTEx_DisableFifoMode>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002830:	f7ff faca 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}
 8002838:	24005110 	.word	0x24005110
 800283c:	40004c00 	.word	0x40004c00

08002840 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 8002846:	4a23      	ldr	r2, [pc, #140]	; (80028d4 <MX_USART1_UART_Init+0x94>)
 8002848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 800284c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002864:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 8002866:	220c      	movs	r2, #12
 8002868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 8002878:	2200      	movs	r2, #0
 800287a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 800287e:	2200      	movs	r2, #0
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 8002884:	2200      	movs	r2, #0
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002888:	4811      	ldr	r0, [pc, #68]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 800288a:	f00b faa6 	bl	800ddda <HAL_UART_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002894:	f7ff fa98 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002898:	2100      	movs	r1, #0
 800289a:	480d      	ldr	r0, [pc, #52]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 800289c:	f00d f9c5 	bl	800fc2a <HAL_UARTEx_SetTxFifoThreshold>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028a6:	f7ff fa8f 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028aa:	2100      	movs	r1, #0
 80028ac:	4808      	ldr	r0, [pc, #32]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 80028ae:	f00d f9fa 	bl	800fca6 <HAL_UARTEx_SetRxFifoThreshold>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028b8:	f7ff fa86 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028bc:	4804      	ldr	r0, [pc, #16]	; (80028d0 <MX_USART1_UART_Init+0x90>)
 80028be:	f00d f97b 	bl	800fbb8 <HAL_UARTEx_DisableFifoMode>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028c8:	f7ff fa7e 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	24005080 	.word	0x24005080
 80028d4:	40011000 	.word	0x40011000

080028d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028dc:	4b22      	ldr	r3, [pc, #136]	; (8002968 <MX_USART3_UART_Init+0x90>)
 80028de:	4a23      	ldr	r2, [pc, #140]	; (800296c <MX_USART3_UART_Init+0x94>)
 80028e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <MX_USART3_UART_Init+0x90>)
 80028e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028ea:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <MX_USART3_UART_Init+0x90>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <MX_USART3_UART_Init+0x90>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <MX_USART3_UART_Init+0x90>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <MX_USART3_UART_Init+0x90>)
 80028fe:	220c      	movs	r2, #12
 8002900:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <MX_USART3_UART_Init+0x90>)
 8002904:	2200      	movs	r2, #0
 8002906:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <MX_USART3_UART_Init+0x90>)
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <MX_USART3_UART_Init+0x90>)
 8002910:	2200      	movs	r2, #0
 8002912:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <MX_USART3_UART_Init+0x90>)
 8002916:	2200      	movs	r2, #0
 8002918:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <MX_USART3_UART_Init+0x90>)
 800291c:	2200      	movs	r2, #0
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002920:	4811      	ldr	r0, [pc, #68]	; (8002968 <MX_USART3_UART_Init+0x90>)
 8002922:	f00b fa5a 	bl	800ddda <HAL_UART_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800292c:	f7ff fa4c 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002930:	2100      	movs	r1, #0
 8002932:	480d      	ldr	r0, [pc, #52]	; (8002968 <MX_USART3_UART_Init+0x90>)
 8002934:	f00d f979 	bl	800fc2a <HAL_UARTEx_SetTxFifoThreshold>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800293e:	f7ff fa43 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002942:	2100      	movs	r1, #0
 8002944:	4808      	ldr	r0, [pc, #32]	; (8002968 <MX_USART3_UART_Init+0x90>)
 8002946:	f00d f9ae 	bl	800fca6 <HAL_UARTEx_SetRxFifoThreshold>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002950:	f7ff fa3a 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002954:	4804      	ldr	r0, [pc, #16]	; (8002968 <MX_USART3_UART_Init+0x90>)
 8002956:	f00d f92f 	bl	800fbb8 <HAL_UARTEx_DisableFifoMode>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002960:	f7ff fa32 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}
 8002968:	24004e48 	.word	0x24004e48
 800296c:	40004800 	.word	0x40004800

08002970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0bc      	sub	sp, #240	; 0xf0
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002988:	f107 0320 	add.w	r3, r7, #32
 800298c:	22bc      	movs	r2, #188	; 0xbc
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f012 fc08 	bl	80151a6 <memset>
  if(uartHandle->Instance==UART4)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6d      	ldr	r2, [pc, #436]	; (8002b50 <HAL_UART_MspInit+0x1e0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d142      	bne.n	8002a26 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80029a0:	2302      	movs	r3, #2
 80029a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029aa:	f107 0320 	add.w	r3, r7, #32
 80029ae:	4618      	mov	r0, r3
 80029b0:	f006 fddc 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029ba:	f7ff fa05 	bl	8001dc8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 80029c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029c4:	4a63      	ldr	r2, [pc, #396]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 80029c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029ce:	4b61      	ldr	r3, [pc, #388]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 80029d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	4b5d      	ldr	r3, [pc, #372]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 80029de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e2:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 80029ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029fa:	2303      	movs	r3, #3
 80029fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a12:	2308      	movs	r3, #8
 8002a14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	484e      	ldr	r0, [pc, #312]	; (8002b58 <HAL_UART_MspInit+0x1e8>)
 8002a20:	f004 f996 	bl	8006d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a24:	e090      	b.n	8002b48 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4c      	ldr	r2, [pc, #304]	; (8002b5c <HAL_UART_MspInit+0x1ec>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d143      	bne.n	8002ab8 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a30:	2301      	movs	r3, #1
 8002a32:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3a:	f107 0320 	add.w	r3, r7, #32
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f006 fd94 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_UART_MspInit+0xde>
      Error_Handler();
 8002a4a:	f7ff f9bd 	bl	8001dc8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a54:	4a3f      	ldr	r2, [pc, #252]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002a56:	f043 0310 	orr.w	r3, r3, #16
 8002a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a72:	4a38      	ldr	r2, [pc, #224]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a7c:	4b35      	ldr	r3, [pc, #212]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002a8a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002aae:	4619      	mov	r1, r3
 8002ab0:	482b      	ldr	r0, [pc, #172]	; (8002b60 <HAL_UART_MspInit+0x1f0>)
 8002ab2:	f004 f94d 	bl	8006d50 <HAL_GPIO_Init>
}
 8002ab6:	e047      	b.n	8002b48 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART3)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a29      	ldr	r2, [pc, #164]	; (8002b64 <HAL_UART_MspInit+0x1f4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d142      	bne.n	8002b48 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002acc:	f107 0320 	add.w	r3, r7, #32
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f006 fd4b 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8002adc:	f7ff f974 	bl	8001dc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002af0:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b04:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002b06:	f043 0302 	orr.w	r3, r3, #2
 8002b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_UART_MspInit+0x1e4>)
 8002b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b36:	2307      	movs	r3, #7
 8002b38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b40:	4619      	mov	r1, r3
 8002b42:	4807      	ldr	r0, [pc, #28]	; (8002b60 <HAL_UART_MspInit+0x1f0>)
 8002b44:	f004 f904 	bl	8006d50 <HAL_GPIO_Init>
}
 8002b48:	bf00      	nop
 8002b4a:	37f0      	adds	r7, #240	; 0xf0
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40004c00 	.word	0x40004c00
 8002b54:	58024400 	.word	0x58024400
 8002b58:	58020000 	.word	0x58020000
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	58020400 	.word	0x58020400
 8002b64:	40004800 	.word	0x40004800

08002b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 8002b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b6c:	f7ff fca4 	bl	80024b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b70:	480c      	ldr	r0, [pc, #48]	; (8002ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b72:	490d      	ldr	r1, [pc, #52]	; (8002ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b78:	e002      	b.n	8002b80 <LoopCopyDataInit>

08002b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7e:	3304      	adds	r3, #4

08002b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b84:	d3f9      	bcc.n	8002b7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b88:	4c0a      	ldr	r4, [pc, #40]	; (8002bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b8c:	e001      	b.n	8002b92 <LoopFillZerobss>

08002b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b90:	3204      	adds	r2, #4

08002b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b94:	d3fb      	bcc.n	8002b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b96:	f012 fad1 	bl	801513c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b9a:	f7fe ffbf 	bl	8001b1c <main>
  bx  lr
 8002b9e:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8002ba0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002ba4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ba8:	2400042c 	.word	0x2400042c
  ldr r2, =_sidata
 8002bac:	080237c0 	.word	0x080237c0
  ldr r2, =_sbss
 8002bb0:	2400042c 	.word	0x2400042c
  ldr r4, =_ebss
 8002bb4:	24006ad8 	.word	0x24006ad8

08002bb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bb8:	e7fe      	b.n	8002bb8 <ADC3_IRQHandler>
	...

08002bbc <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8002bbc:	b5b0      	push	{r4, r5, r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af02      	add	r7, sp, #8
/*	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
	ST7735Ctx.Panel = HannStar_Panel;
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
	#elif TFT18
*/	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8002bc2:	4b7c      	ldr	r3, [pc, #496]	; (8002db4 <LCD_Test+0x1f8>)
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = BOE_Panel;
 8002bc8:	4b7a      	ldr	r3, [pc, #488]	; (8002db4 <LCD_Test+0x1f8>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_1_8a_inch_screen;
 8002bce:	4b79      	ldr	r3, [pc, #484]	; (8002db4 <LCD_Test+0x1f8>)
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	735a      	strb	r2, [r3, #13]
//	#else
//	error "Unknown Screen"
	
//	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8002bd4:	4978      	ldr	r1, [pc, #480]	; (8002db8 <LCD_Test+0x1fc>)
 8002bd6:	4879      	ldr	r0, [pc, #484]	; (8002dbc <LCD_Test+0x200>)
 8002bd8:	f000 fcb4 	bl	8003544 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8002bdc:	4b78      	ldr	r3, [pc, #480]	; (8002dc0 <LCD_Test+0x204>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a74      	ldr	r2, [pc, #464]	; (8002db4 <LCD_Test+0x1f8>)
 8002be2:	2105      	movs	r1, #5
 8002be4:	4875      	ldr	r0, [pc, #468]	; (8002dbc <LCD_Test+0x200>)
 8002be6:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8002be8:	4b75      	ldr	r3, [pc, #468]	; (8002dc0 <LCD_Test+0x204>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4975      	ldr	r1, [pc, #468]	; (8002dc4 <LCD_Test+0x208>)
 8002bee:	4873      	ldr	r0, [pc, #460]	; (8002dbc <LCD_Test+0x200>)
 8002bf0:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f000 f8f8 	bl	8002de8 <LCD_SetBrightness>
/*	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
	#elif TFT18
*/	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
 8002bf8:	4b71      	ldr	r3, [pc, #452]	; (8002dc0 <LCD_Test+0x204>)
 8002bfa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002bfc:	4b72      	ldr	r3, [pc, #456]	; (8002dc8 <LCD_Test+0x20c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	486e      	ldr	r0, [pc, #440]	; (8002dbc <LCD_Test+0x200>)
 8002c04:	47a0      	blx	r4
//	#endif
	
  uint32_t tick = get_tick();
 8002c06:	f002 f825 	bl	8004c54 <HAL_GetTick>
 8002c0a:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8002c0c:	e06a      	b.n	8002ce4 <LCD_Test+0x128>
	{
		delay_ms(10);
 8002c0e:	200a      	movs	r0, #10
 8002c10:	f002 f82c 	bl	8004c6c <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8002c14:	f002 f81e 	bl	8004c54 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c22:	d80f      	bhi.n	8002c44 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8002c24:	f002 f816 	bl	8004c54 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2264      	movs	r2, #100	; 0x64
 8002c30:	fb02 f303 	mul.w	r3, r2, r3
 8002c34:	4a65      	ldr	r2, [pc, #404]	; (8002dcc <LCD_Test+0x210>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f8d3 	bl	8002de8 <LCD_SetBrightness>
 8002c42:	e04f      	b.n	8002ce4 <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 8002c44:	f002 f806 	bl	8004c54 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d83d      	bhi.n	8002cd2 <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8002c56:	f001 fffd 	bl	8004c54 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002c64:	4a5a      	ldr	r2, [pc, #360]	; (8002dd0 <LCD_Test+0x214>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	08da      	lsrs	r2, r3, #3
 8002c6c:	463b      	mov	r3, r7
 8002c6e:	4959      	ldr	r1, [pc, #356]	; (8002dd4 <LCD_Test+0x218>)
 8002c70:	4618      	mov	r0, r3
 8002c72:	f012 ffd1 	bl	8015c18 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8002c76:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <LCD_Test+0x1f8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b1e      	subs	r3, #30
 8002c7e:	b298      	uxth	r0, r3
 8002c80:	4b4c      	ldr	r3, [pc, #304]	; (8002db4 <LCD_Test+0x1f8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	463b      	mov	r3, r7
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	2310      	movs	r3, #16
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	2310      	movs	r3, #16
 8002c90:	2101      	movs	r1, #1
 8002c92:	f000 fb09 	bl	80032a8 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8002c96:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <LCD_Test+0x204>)
 8002c98:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002c9a:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <LCD_Test+0x1f8>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	1edd      	subs	r5, r3, #3
 8002ca0:	f001 ffd8 	bl	8004c54 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002cae:	4a41      	ldr	r2, [pc, #260]	; (8002db4 <LCD_Test+0x1f8>)
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	4a45      	ldr	r2, [pc, #276]	; (8002dcc <LCD_Test+0x210>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	09db      	lsrs	r3, r3, #7
 8002cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc2:	9201      	str	r2, [sp, #4]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	9200      	str	r2, [sp, #0]
 8002cc8:	462a      	mov	r2, r5
 8002cca:	2100      	movs	r1, #0
 8002ccc:	483b      	ldr	r0, [pc, #236]	; (8002dbc <LCD_Test+0x200>)
 8002cce:	47a0      	blx	r4
 8002cd0:	e008      	b.n	8002ce4 <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 8002cd2:	f001 ffbf 	bl	8004c54 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d807      	bhi.n	8002cf4 <LCD_Test+0x138>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8002ce4:	2108      	movs	r1, #8
 8002ce6:	483c      	ldr	r0, [pc, #240]	; (8002dd8 <LCD_Test+0x21c>)
 8002ce8:	f004 f9e2 	bl	80070b0 <HAL_GPIO_ReadPin>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d18d      	bne.n	8002c0e <LCD_Test+0x52>
 8002cf2:	e004      	b.n	8002cfe <LCD_Test+0x142>
			break;
 8002cf4:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8002cf6:	e002      	b.n	8002cfe <LCD_Test+0x142>
	{
		delay_ms(10);
 8002cf8:	200a      	movs	r0, #10
 8002cfa:	f001 ffb7 	bl	8004c6c <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8002cfe:	2108      	movs	r1, #8
 8002d00:	4835      	ldr	r0, [pc, #212]	; (8002dd8 <LCD_Test+0x21c>)
 8002d02:	f004 f9d5 	bl	80070b0 <HAL_GPIO_ReadPin>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d0f5      	beq.n	8002cf8 <LCD_Test+0x13c>
	}
	LCD_Light(0, 300);
 8002d0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002d10:	2000      	movs	r0, #0
 8002d12:	f000 f885 	bl	8002e20 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8002d16:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <LCD_Test+0x204>)
 8002d18:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002d1a:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <LCD_Test+0x1f8>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <LCD_Test+0x1f8>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2100      	movs	r1, #0
 8002d24:	9101      	str	r1, [sp, #4]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4823      	ldr	r0, [pc, #140]	; (8002dbc <LCD_Test+0x200>)
 8002d30:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 8002d32:	463b      	mov	r3, r7
 8002d34:	4929      	ldr	r1, [pc, #164]	; (8002ddc <LCD_Test+0x220>)
 8002d36:	4618      	mov	r0, r3
 8002d38:	f012 ff6e 	bl	8015c18 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <LCD_Test+0x1f8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	463b      	mov	r3, r7
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2310      	movs	r3, #16
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	2004      	movs	r0, #4
 8002d50:	f000 faaa 	bl	80032a8 <LCD_ShowString>
	sprintf((char *)&text, "STM32H743 %X", HAL_GetDEVID());
 8002d54:	f001 ffba 	bl	8004ccc <HAL_GetDEVID>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	463b      	mov	r3, r7
 8002d5c:	4920      	ldr	r1, [pc, #128]	; (8002de0 <LCD_Test+0x224>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f012 ff5a 	bl	8015c18 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <LCD_Test+0x1f8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	463b      	mov	r3, r7
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	2310      	movs	r3, #16
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	2310      	movs	r3, #16
 8002d74:	2116      	movs	r1, #22
 8002d76:	2004      	movs	r0, #4
 8002d78:	f000 fa96 	bl	80032a8 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <LCD_Test+0x208>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	463b      	mov	r3, r7
 8002d82:	4918      	ldr	r1, [pc, #96]	; (8002de4 <LCD_Test+0x228>)
 8002d84:	4618      	mov	r0, r3
 8002d86:	f012 ff47 	bl	8015c18 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <LCD_Test+0x1f8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	463b      	mov	r3, r7
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	2310      	movs	r3, #16
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2310      	movs	r3, #16
 8002d9a:	2128      	movs	r1, #40	; 0x28
 8002d9c:	2004      	movs	r0, #4
 8002d9e:	f000 fa83 	bl	80032a8 <LCD_ShowString>

	LCD_Light(100, 200);
 8002da2:	21c8      	movs	r1, #200	; 0xc8
 8002da4:	2064      	movs	r0, #100	; 0x64
 8002da6:	f000 f83b 	bl	8002e20 <LCD_Light>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdb0      	pop	{r4, r5, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	240051dc 	.word	0x240051dc
 8002db8:	2400004c 	.word	0x2400004c
 8002dbc:	240051a4 	.word	0x240051a4
 8002dc0:	24000070 	.word	0x24000070
 8002dc4:	240051a0 	.word	0x240051a0
 8002dc8:	08018b00 	.word	0x08018b00
 8002dcc:	10624dd3 	.word	0x10624dd3
 8002dd0:	cccccccd 	.word	0xcccccccd
 8002dd4:	08018008 	.word	0x08018008
 8002dd8:	58021000 	.word	0x58021000
 8002ddc:	08018010 	.word	0x08018010
 8002de0:	08018020 	.word	0x08018020
 8002de4:	08018030 	.word	0x08018030

08002de8 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <LCD_SetBrightness+0x1c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	24005034 	.word	0x24005034

08002e08 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <LCD_GetBrightness+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	24005034 	.word	0x24005034

08002e20 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 8002e2a:	f7ff ffed 	bl	8002e08 <LCD_GetBrightness>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d05e      	beq.n	8002efa <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d05c      	beq.n	8002efe <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4e:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e64:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	ee07 3a90 	vmov	s15, r3
 8002e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e80:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e88:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8002e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e90:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e98:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8002e9c:	f001 feda 	bl	8004c54 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f001 fee2 	bl	8004c6c <HAL_Delay>
		
		time_now = get_tick()-tick;
 8002ea8:	f001 fed4 	bl	8004c54 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ebe:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 8002ec2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	ee07 3a90 	vmov	s15, r3
 8002ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002edc:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 8002ee0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee8:	ee17 0a90 	vmov	r0, s15
 8002eec:	f7ff ff7c 	bl	8002de8 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 8002ef0:	6a3a      	ldr	r2, [r7, #32]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d204      	bcs.n	8002f02 <LCD_Light+0xe2>
		delay_ms(1);
 8002ef8:	e7d3      	b.n	8002ea2 <LCD_Light+0x82>
		return;
 8002efa:	bf00      	nop
 8002efc:	e002      	b.n	8002f04 <LCD_Light+0xe4>
		return;
 8002efe:	bf00      	nop
 8002f00:	e000      	b.n	8002f04 <LCD_Light+0xe4>
		if(time_now >= time) break;
 8002f02:	bf00      	nop
		
	}
}
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8002f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f10:	b08c      	sub	sp, #48	; 0x30
 8002f12:	af02      	add	r7, sp, #8
 8002f14:	4604      	mov	r4, r0
 8002f16:	4608      	mov	r0, r1
 8002f18:	4611      	mov	r1, r2
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4623      	mov	r3, r4
 8002f1e:	80fb      	strh	r3, [r7, #6]
 8002f20:	4603      	mov	r3, r0
 8002f22:	80bb      	strh	r3, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	70bb      	strb	r3, [r7, #2]
 8002f2c:	466b      	mov	r3, sp
 8002f2e:	4698      	mov	r8, r3
  uint8_t temp,t1,t;
	uint16_t y0=y;
 8002f30:	88bb      	ldrh	r3, [r7, #4]
 8002f32:	843b      	strh	r3, [r7, #32]
	uint16_t x0=x;
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	83fb      	strh	r3, [r7, #30]
	uint16_t colortemp=POINT_COLOR; 
 8002f38:	4bb2      	ldr	r3, [pc, #712]	; (8003204 <LCD_ShowChar+0x2f8>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	83bb      	strh	r3, [r7, #28]
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 8002f3e:	78bb      	ldrb	r3, [r7, #2]
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	d101      	bne.n	8002f48 <LCD_ShowChar+0x3c>
 8002f44:	2406      	movs	r4, #6
 8002f46:	e000      	b.n	8002f4a <LCD_ShowChar+0x3e>
 8002f48:	2408      	movs	r4, #8
 8002f4a:	78bd      	ldrb	r5, [r7, #2]
 8002f4c:	1e63      	subs	r3, r4, #1
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	4623      	mov	r3, r4
 8002f52:	4618      	mov	r0, r3
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	010b      	lsls	r3, r1, #4
 8002f62:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002f66:	0102      	lsls	r2, r0, #4
 8002f68:	4623      	mov	r3, r4
 8002f6a:	005e      	lsls	r6, r3, #1
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	4623      	mov	r3, r4
 8002f74:	4618      	mov	r0, r3
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	b2ea      	uxtb	r2, r5
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	fb02 fe01 	mul.w	lr, r2, r1
 8002f84:	fb00 fc03 	mul.w	ip, r0, r3
 8002f88:	44f4      	add	ip, lr
 8002f8a:	fba0 2302 	umull	r2, r3, r0, r2
 8002f8e:	eb0c 0103 	add.w	r1, ip, r3
 8002f92:	460b      	mov	r3, r1
 8002f94:	f04f 0000 	mov.w	r0, #0
 8002f98:	f04f 0100 	mov.w	r1, #0
 8002f9c:	0119      	lsls	r1, r3, #4
 8002f9e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002fa2:	0110      	lsls	r0, r2, #4
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f04f 0100 	mov.w	r1, #0
 8002fac:	b2ea      	uxtb	r2, r5
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	fb02 fe01 	mul.w	lr, r2, r1
 8002fb6:	fb00 fc03 	mul.w	ip, r0, r3
 8002fba:	44f4      	add	ip, lr
 8002fbc:	fba0 2302 	umull	r2, r3, r0, r2
 8002fc0:	eb0c 0103 	add.w	r1, ip, r3
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	0119      	lsls	r1, r3, #4
 8002fd0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002fd4:	0110      	lsls	r0, r2, #4
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	462a      	mov	r2, r5
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	3307      	adds	r3, #7
 8002fe2:	08db      	lsrs	r3, r3, #3
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	ebad 0d03 	sub.w	sp, sp, r3
 8002fea:	ab02      	add	r3, sp, #8
 8002fec:	3301      	adds	r3, #1
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	613b      	str	r3, [r7, #16]
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8002ff4:	f107 0308 	add.w	r3, r7, #8
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4883      	ldr	r0, [pc, #524]	; (8003208 <LCD_ShowChar+0x2fc>)
 8002ffc:	f001 fbfe 	bl	80047fc <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8003000:	f107 030c 	add.w	r3, r7, #12
 8003004:	4619      	mov	r1, r3
 8003006:	4880      	ldr	r0, [pc, #512]	; (8003208 <LCD_ShowChar+0x2fc>)
 8003008:	f001 fc0a 	bl	8004820 <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	3b20      	subs	r3, #32
 8003010:	70fb      	strb	r3, [r7, #3]
	count = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if(!mode) //�ǵ��ӷ�ʽ
 8003016:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 8096 	bne.w	800314c <LCD_ShowChar+0x240>
	{
		for(t=0;t<size;t++)
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003026:	e08a      	b.n	800313e <LCD_ShowChar+0x232>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8003028:	78bb      	ldrb	r3, [r7, #2]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d10d      	bne.n	800304a <LCD_ShowChar+0x13e>
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003034:	4875      	ldr	r0, [pc, #468]	; (800320c <LCD_ShowChar+0x300>)
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4403      	add	r3, r0
 8003040:	440b      	add	r3, r1
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003048:	e009      	b.n	800305e <LCD_ShowChar+0x152>
			else temp=asc2_1608[num][t];		 //����1608����
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003050:	496f      	ldr	r1, [pc, #444]	; (8003210 <LCD_ShowChar+0x304>)
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	440a      	add	r2, r1
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			
			for(t1=0;t1<8;t1++)
 800305e:	2300      	movs	r3, #0
 8003060:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003064:	e060      	b.n	8003128 <LCD_ShowChar+0x21c>
			{			    
				if(temp&0x80)
 8003066:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800306a:	2b00      	cmp	r3, #0
 800306c:	da0c      	bge.n	8003088 <LCD_ShowChar+0x17c>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 800306e:	8bbb      	ldrh	r3, [r7, #28]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	b21a      	sxth	r2, r3
 8003074:	8bbb      	ldrh	r3, [r7, #28]
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	b29b      	uxth	r3, r3
 800307a:	b21b      	sxth	r3, r3
 800307c:	4313      	orrs	r3, r2
 800307e:	b21b      	sxth	r3, r3
 8003080:	b29a      	uxth	r2, r3
 8003082:	4b60      	ldr	r3, [pc, #384]	; (8003204 <LCD_ShowChar+0x2f8>)
 8003084:	801a      	strh	r2, [r3, #0]
 8003086:	e00d      	b.n	80030a4 <LCD_ShowChar+0x198>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8003088:	4b62      	ldr	r3, [pc, #392]	; (8003214 <LCD_ShowChar+0x308>)
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	b21a      	sxth	r2, r3
 8003090:	4b60      	ldr	r3, [pc, #384]	; (8003214 <LCD_ShowChar+0x308>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	b29b      	uxth	r3, r3
 8003098:	b21b      	sxth	r3, r3
 800309a:	4313      	orrs	r3, r2
 800309c:	b21b      	sxth	r3, r3
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b58      	ldr	r3, [pc, #352]	; (8003204 <LCD_ShowChar+0x2f8>)
 80030a2:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 80030a4:	0872      	lsrs	r2, r6, #1
 80030a6:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80030a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461c      	mov	r4, r3
 80030b2:	4b54      	ldr	r3, [pc, #336]	; (8003204 <LCD_ShowChar+0x2f8>)
 80030b4:	8818      	ldrh	r0, [r3, #0]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	fb01 f202 	mul.w	r2, r1, r2
 80030bc:	4422      	add	r2, r4
 80030be:	4601      	mov	r1, r0
 80030c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80030c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030c6:	3301      	adds	r3, #1
 80030c8:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 80030ca:	78bb      	ldrb	r3, [r7, #2]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d301      	bcc.n	80030d8 <LCD_ShowChar+0x1cc>
 80030d4:	2300      	movs	r3, #0
 80030d6:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 80030d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 80030e2:	88bb      	ldrh	r3, [r7, #4]
 80030e4:	3301      	adds	r3, #1
 80030e6:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80030e8:	88ba      	ldrh	r2, [r7, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d303      	bcc.n	80030f8 <LCD_ShowChar+0x1ec>
 80030f0:	4a44      	ldr	r2, [pc, #272]	; (8003204 <LCD_ShowChar+0x2f8>)
 80030f2:	8bbb      	ldrh	r3, [r7, #28]
 80030f4:	8013      	strh	r3, [r2, #0]
 80030f6:	e0ce      	b.n	8003296 <LCD_ShowChar+0x38a>
				if((y-y0)==size)
 80030f8:	88ba      	ldrh	r2, [r7, #4]
 80030fa:	8c3b      	ldrh	r3, [r7, #32]
 80030fc:	1ad2      	subs	r2, r2, r3
 80030fe:	78bb      	ldrb	r3, [r7, #2]
 8003100:	429a      	cmp	r2, r3
 8003102:	d10c      	bne.n	800311e <LCD_ShowChar+0x212>
				{
					y=y0;
 8003104:	8c3b      	ldrh	r3, [r7, #32]
 8003106:	80bb      	strh	r3, [r7, #4]
					x++;
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	3301      	adds	r3, #1
 800310c:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	d30d      	bcc.n	8003132 <LCD_ShowChar+0x226>
 8003116:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <LCD_ShowChar+0x2f8>)
 8003118:	8bbb      	ldrh	r3, [r7, #28]
 800311a:	8013      	strh	r3, [r2, #0]
 800311c:	e0bb      	b.n	8003296 <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 800311e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003122:	3301      	adds	r3, #1
 8003124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003128:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800312c:	2b07      	cmp	r3, #7
 800312e:	d99a      	bls.n	8003066 <LCD_ShowChar+0x15a>
 8003130:	e000      	b.n	8003134 <LCD_ShowChar+0x228>
					break;
 8003132:	bf00      	nop
		for(t=0;t<size;t++)
 8003134:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003138:	3301      	adds	r3, #1
 800313a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800313e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003142:	78bb      	ldrb	r3, [r7, #2]
 8003144:	429a      	cmp	r2, r3
 8003146:	f4ff af6f 	bcc.w	8003028 <LCD_ShowChar+0x11c>
 800314a:	e08e      	b.n	800326a <LCD_ShowChar+0x35e>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 800314c:	2300      	movs	r3, #0
 800314e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003152:	e084      	b.n	800325e <LCD_ShowChar+0x352>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8003154:	78bb      	ldrb	r3, [r7, #2]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d10d      	bne.n	8003176 <LCD_ShowChar+0x26a>
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003160:	482a      	ldr	r0, [pc, #168]	; (800320c <LCD_ShowChar+0x300>)
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4403      	add	r3, r0
 800316c:	440b      	add	r3, r1
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003174:	e009      	b.n	800318a <LCD_ShowChar+0x27e>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800317c:	4924      	ldr	r1, [pc, #144]	; (8003210 <LCD_ShowChar+0x304>)
 800317e:	0112      	lsls	r2, r2, #4
 8003180:	440a      	add	r2, r1
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(t1=0;t1<8;t1++)
 800318a:	2300      	movs	r3, #0
 800318c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003190:	e05a      	b.n	8003248 <LCD_ShowChar+0x33c>
			{			    
				if(temp&0x80)
 8003192:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003196:	2b00      	cmp	r3, #0
 8003198:	da19      	bge.n	80031ce <LCD_ShowChar+0x2c2>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <LCD_ShowChar+0x2f8>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	b21a      	sxth	r2, r3
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <LCD_ShowChar+0x2f8>)
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	b21b      	sxth	r3, r3
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b218      	sxth	r0, r3
 80031b0:	0872      	lsrs	r2, r6, #1
 80031b2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80031b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461c      	mov	r4, r3
 80031be:	b280      	uxth	r0, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	fb01 f202 	mul.w	r2, r1, r2
 80031c6:	4422      	add	r2, r4
 80031c8:	4601      	mov	r1, r0
 80031ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 80031ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031d0:	3301      	adds	r3, #1
 80031d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 80031d4:	78bb      	ldrb	r3, [r7, #2]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80031da:	429a      	cmp	r2, r3
 80031dc:	d301      	bcc.n	80031e2 <LCD_ShowChar+0x2d6>
 80031de:	2300      	movs	r3, #0
 80031e0:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 80031e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 80031ec:	88bb      	ldrh	r3, [r7, #4]
 80031ee:	3301      	adds	r3, #1
 80031f0:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80031f2:	88ba      	ldrh	r2, [r7, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d30e      	bcc.n	8003218 <LCD_ShowChar+0x30c>
 80031fa:	4a02      	ldr	r2, [pc, #8]	; (8003204 <LCD_ShowChar+0x2f8>)
 80031fc:	8bbb      	ldrh	r3, [r7, #28]
 80031fe:	8013      	strh	r3, [r2, #0]
 8003200:	e049      	b.n	8003296 <LCD_ShowChar+0x38a>
 8003202:	bf00      	nop
 8003204:	2400006c 	.word	0x2400006c
 8003208:	240051a4 	.word	0x240051a4
 800320c:	0801809c 	.word	0x0801809c
 8003210:	08018510 	.word	0x08018510
 8003214:	24000708 	.word	0x24000708
				if((y-y0)==size)
 8003218:	88ba      	ldrh	r2, [r7, #4]
 800321a:	8c3b      	ldrh	r3, [r7, #32]
 800321c:	1ad2      	subs	r2, r2, r3
 800321e:	78bb      	ldrb	r3, [r7, #2]
 8003220:	429a      	cmp	r2, r3
 8003222:	d10c      	bne.n	800323e <LCD_ShowChar+0x332>
				{
					y=y0;
 8003224:	8c3b      	ldrh	r3, [r7, #32]
 8003226:	80bb      	strh	r3, [r7, #4]
					x++;
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	3301      	adds	r3, #1
 800322c:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	d30d      	bcc.n	8003252 <LCD_ShowChar+0x346>
 8003236:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <LCD_ShowChar+0x394>)
 8003238:	8bbb      	ldrh	r3, [r7, #28]
 800323a:	8013      	strh	r3, [r2, #0]
 800323c:	e02b      	b.n	8003296 <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 800323e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003242:	3301      	adds	r3, #1
 8003244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003248:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800324c:	2b07      	cmp	r3, #7
 800324e:	d9a0      	bls.n	8003192 <LCD_ShowChar+0x286>
 8003250:	e000      	b.n	8003254 <LCD_ShowChar+0x348>
					break;
 8003252:	bf00      	nop
		for(t=0;t<size;t++)
 8003254:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003258:	3301      	adds	r3, #1
 800325a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800325e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003262:	78bb      	ldrb	r3, [r7, #2]
 8003264:	429a      	cmp	r2, r3
 8003266:	f4ff af75 	bcc.w	8003154 <LCD_ShowChar+0x248>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 800326a:	8bf9      	ldrh	r1, [r7, #30]
 800326c:	8c38      	ldrh	r0, [r7, #32]
 800326e:	693c      	ldr	r4, [r7, #16]
 8003270:	78bb      	ldrb	r3, [r7, #2]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d101      	bne.n	800327a <LCD_ShowChar+0x36e>
 8003276:	2306      	movs	r3, #6
 8003278:	e000      	b.n	800327c <LCD_ShowChar+0x370>
 800327a:	2308      	movs	r3, #8
 800327c:	78ba      	ldrb	r2, [r7, #2]
 800327e:	9201      	str	r2, [sp, #4]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	4623      	mov	r3, r4
 8003284:	4602      	mov	r2, r0
 8003286:	4807      	ldr	r0, [pc, #28]	; (80032a4 <LCD_ShowChar+0x398>)
 8003288:	f001 f90a 	bl	80044a0 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 800328c:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <LCD_ShowChar+0x394>)
 800328e:	8bbb      	ldrh	r3, [r7, #28]
 8003290:	8013      	strh	r3, [r2, #0]
 8003292:	46c5      	mov	sp, r8
 8003294:	e000      	b.n	8003298 <LCD_ShowChar+0x38c>
 8003296:	46c5      	mov	sp, r8
}   
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032a0:	2400006c 	.word	0x2400006c
 80032a4:	240051a4 	.word	0x240051a4

080032a8 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	4604      	mov	r4, r0
 80032b0:	4608      	mov	r0, r1
 80032b2:	4611      	mov	r1, r2
 80032b4:	461a      	mov	r2, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	80fb      	strh	r3, [r7, #6]
 80032ba:	4603      	mov	r3, r0
 80032bc:	80bb      	strh	r3, [r7, #4]
 80032be:	460b      	mov	r3, r1
 80032c0:	807b      	strh	r3, [r7, #2]
 80032c2:	4613      	mov	r3, r2
 80032c4:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	4413      	add	r3, r2
 80032d0:	807b      	strh	r3, [r7, #2]
	height+=y;
 80032d2:	883a      	ldrh	r2, [r7, #0]
 80032d4:	88bb      	ldrh	r3, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80032da:	e024      	b.n	8003326 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d307      	bcc.n	80032f4 <LCD_ShowString+0x4c>
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	80fb      	strh	r3, [r7, #6]
 80032e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	88bb      	ldrh	r3, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 80032f4:	88ba      	ldrh	r2, [r7, #4]
 80032f6:	883b      	ldrh	r3, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d21d      	bcs.n	8003338 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	781a      	ldrb	r2, [r3, #0]
 8003300:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003304:	88b9      	ldrh	r1, [r7, #4]
 8003306:	88f8      	ldrh	r0, [r7, #6]
 8003308:	2400      	movs	r4, #0
 800330a:	9400      	str	r4, [sp, #0]
 800330c:	f7ff fdfe 	bl	8002f0c <LCD_ShowChar>
        x+=size/2;
 8003310:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	b29a      	uxth	r2, r3
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	4413      	add	r3, r2
 800331e:	80fb      	strh	r3, [r7, #6]
        p++;
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	3301      	adds	r3, #1
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b7e      	cmp	r3, #126	; 0x7e
 800332c:	d805      	bhi.n	800333a <LCD_ShowString+0x92>
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b1f      	cmp	r3, #31
 8003334:	d8d2      	bhi.n	80032dc <LCD_ShowString+0x34>
    }  
}
 8003336:	e000      	b.n	800333a <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 8003338:	bf00      	nop
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bd90      	pop	{r4, r7, pc}
	...

08003344 <lcd_init>:

static int32_t lcd_init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 800334e:	2104      	movs	r1, #4
 8003350:	4803      	ldr	r0, [pc, #12]	; (8003360 <lcd_init+0x1c>)
 8003352:	f00a fb3f 	bl	800d9d4 <HAL_TIMEx_PWMN_Start>
	return result;
 8003356:	687b      	ldr	r3, [r7, #4]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	24005034 	.word	0x24005034

08003364 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8003368:	f001 fc74 	bl	8004c54 <HAL_GetTick>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 8003382:	2200      	movs	r2, #0
 8003384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003388:	481d      	ldr	r0, [pc, #116]	; (8003400 <lcd_writereg+0x8c>)
 800338a:	f003 fea9 	bl	80070e0 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800338e:	2200      	movs	r2, #0
 8003390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003394:	481a      	ldr	r0, [pc, #104]	; (8003400 <lcd_writereg+0x8c>)
 8003396:	f003 fea3 	bl	80070e0 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800339a:	f107 010f 	add.w	r1, r7, #15
 800339e:	2364      	movs	r3, #100	; 0x64
 80033a0:	2201      	movs	r2, #1
 80033a2:	4818      	ldr	r0, [pc, #96]	; (8003404 <lcd_writereg+0x90>)
 80033a4:	f008 fc76 	bl	800bc94 <HAL_SPI_Transmit>
 80033a8:	4603      	mov	r3, r0
 80033aa:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 80033ac:	2201      	movs	r2, #1
 80033ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033b2:	4813      	ldr	r0, [pc, #76]	; (8003400 <lcd_writereg+0x8c>)
 80033b4:	f003 fe94 	bl	80070e0 <HAL_GPIO_WritePin>
	if(length > 0)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00c      	beq.n	80033d8 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	480e      	ldr	r0, [pc, #56]	; (8003404 <lcd_writereg+0x90>)
 80033ca:	f008 fc63 	bl	800bc94 <HAL_SPI_Transmit>
 80033ce:	4603      	mov	r3, r0
 80033d0:	461a      	mov	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4413      	add	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 80033d8:	2201      	movs	r2, #1
 80033da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033de:	4808      	ldr	r0, [pc, #32]	; (8003400 <lcd_writereg+0x8c>)
 80033e0:	f003 fe7e 	bl	80070e0 <HAL_GPIO_WritePin>
	if(result>0){
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	dd03      	ble.n	80033f2 <lcd_writereg+0x7e>
		result = -1;}
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e001      	b.n	80033f6 <lcd_writereg+0x82>
	else{
		result = 0;}
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
	return result;
 80033f6:	697b      	ldr	r3, [r7, #20]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	58021000 	.word	0x58021000
 8003404:	24004ed8 	.word	0x24004ed8

08003408 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8003414:	2200      	movs	r2, #0
 8003416:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800341a:	481b      	ldr	r0, [pc, #108]	; (8003488 <lcd_readreg+0x80>)
 800341c:	f003 fe60 	bl	80070e0 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8003420:	2200      	movs	r2, #0
 8003422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003426:	4818      	ldr	r0, [pc, #96]	; (8003488 <lcd_readreg+0x80>)
 8003428:	f003 fe5a 	bl	80070e0 <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800342c:	1df9      	adds	r1, r7, #7
 800342e:	2364      	movs	r3, #100	; 0x64
 8003430:	2201      	movs	r2, #1
 8003432:	4816      	ldr	r0, [pc, #88]	; (800348c <lcd_readreg+0x84>)
 8003434:	f008 fc2e 	bl	800bc94 <HAL_SPI_Transmit>
 8003438:	4603      	mov	r3, r0
 800343a:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 800343c:	2201      	movs	r2, #1
 800343e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003442:	4811      	ldr	r0, [pc, #68]	; (8003488 <lcd_readreg+0x80>)
 8003444:	f003 fe4c 	bl	80070e0 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8003448:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800344c:	2201      	movs	r2, #1
 800344e:	6839      	ldr	r1, [r7, #0]
 8003450:	480e      	ldr	r0, [pc, #56]	; (800348c <lcd_readreg+0x84>)
 8003452:	f008 fe11 	bl	800c078 <HAL_SPI_Receive>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8003460:	2201      	movs	r2, #1
 8003462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003466:	4808      	ldr	r0, [pc, #32]	; (8003488 <lcd_readreg+0x80>)
 8003468:	f003 fe3a 	bl	80070e0 <HAL_GPIO_WritePin>
	if(result>0){
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	dd03      	ble.n	800347a <lcd_readreg+0x72>
		result = -1;}
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e001      	b.n	800347e <lcd_readreg+0x76>
	else{
		result = 0;}
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
	return result;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	58021000 	.word	0x58021000
 800348c:	24004ed8 	.word	0x24004ed8

08003490 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 800349a:	2200      	movs	r2, #0
 800349c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034a0:	480f      	ldr	r0, [pc, #60]	; (80034e0 <lcd_senddata+0x50>)
 80034a2:	f003 fe1d 	bl	80070e0 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	2364      	movs	r3, #100	; 0x64
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	480d      	ldr	r0, [pc, #52]	; (80034e4 <lcd_senddata+0x54>)
 80034b0:	f008 fbf0 	bl	800bc94 <HAL_SPI_Transmit>
 80034b4:	4603      	mov	r3, r0
 80034b6:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80034b8:	2201      	movs	r2, #1
 80034ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034be:	4808      	ldr	r0, [pc, #32]	; (80034e0 <lcd_senddata+0x50>)
 80034c0:	f003 fe0e 	bl	80070e0 <HAL_GPIO_WritePin>
	if(result>0){
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	dd03      	ble.n	80034d2 <lcd_senddata+0x42>
		result = -1;}
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e001      	b.n	80034d6 <lcd_senddata+0x46>
	else{
		result = 0;}
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
	return result;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	58021000 	.word	0x58021000
 80034e4:	24004ed8 	.word	0x24004ed8

080034e8 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 80034f2:	2200      	movs	r2, #0
 80034f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034f8:	4810      	ldr	r0, [pc, #64]	; (800353c <lcd_recvdata+0x54>)
 80034fa:	f003 fdf1 	bl	80070e0 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b29a      	uxth	r2, r3
 8003502:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	480d      	ldr	r0, [pc, #52]	; (8003540 <lcd_recvdata+0x58>)
 800350a:	f008 fdb5 	bl	800c078 <HAL_SPI_Receive>
 800350e:	4603      	mov	r3, r0
 8003510:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8003512:	2201      	movs	r2, #1
 8003514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003518:	4808      	ldr	r0, [pc, #32]	; (800353c <lcd_recvdata+0x54>)
 800351a:	f003 fde1 	bl	80070e0 <HAL_GPIO_WritePin>
	if(result>0){
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	dd03      	ble.n	800352c <lcd_recvdata+0x44>
		result = -1;}
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	e001      	b.n	8003530 <lcd_recvdata+0x48>
	else{
		result = 0;}
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
	return result;
 8003530:	68fb      	ldr	r3, [r7, #12]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	58021000 	.word	0x58021000
 8003540:	24004ed8 	.word	0x24004ed8

08003544 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e03a      	b.n	80035d2 <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	891a      	ldrh	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <ST7735_RegisterBusIO+0x98>)
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a0e      	ldr	r2, [pc, #56]	; (80035e0 <ST7735_RegisterBusIO+0x9c>)
 80035a6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <ST7735_RegisterBusIO+0xa0>)
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <ST7735_RegisterBusIO+0xa4>)
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d004      	beq.n	80035cc <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4798      	blx	r3
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	e002      	b.n	80035d2 <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 80035cc:	f04f 33ff 	mov.w	r3, #4294967295
 80035d0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	08004a4d 	.word	0x08004a4d
 80035e0:	08004a75 	.word	0x08004a75
 80035e4:	08004a9f 	.word	0x08004a9f
 80035e8:	08004ac3 	.word	0x08004ac3

080035ec <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e3a6      	b.n	8003d54 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f103 0020 	add.w	r0, r3, #32
 8003610:	f107 0213 	add.w	r2, r7, #19
 8003614:	2300      	movs	r3, #0
 8003616:	2101      	movs	r1, #1
 8003618:	f001 fa92 	bl	8004b40 <st7735_write_reg>
 800361c:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800361e:	2178      	movs	r1, #120	; 0x78
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f001 fa60 	bl	8004ae6 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f103 0020 	add.w	r0, r3, #32
 8003630:	f107 0213 	add.w	r2, r7, #19
 8003634:	2300      	movs	r3, #0
 8003636:	2101      	movs	r1, #1
 8003638:	f001 fa82 	bl	8004b40 <st7735_write_reg>
 800363c:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800363e:	2178      	movs	r1, #120	; 0x78
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f001 fa50 	bl	8004ae6 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f103 0020 	add.w	r0, r3, #32
 8003650:	f107 0213 	add.w	r2, r7, #19
 8003654:	2301      	movs	r3, #1
 8003656:	2111      	movs	r1, #17
 8003658:	f001 fa72 	bl	8004b40 <st7735_write_reg>
 800365c:	4602      	mov	r2, r0
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	4413      	add	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f103 0020 	add.w	r0, r3, #32
 800366a:	f107 0213 	add.w	r2, r7, #19
 800366e:	2300      	movs	r3, #0
 8003670:	21b1      	movs	r1, #177	; 0xb1
 8003672:	f001 fa65 	bl	8004b40 <st7735_write_reg>
 8003676:	4602      	mov	r2, r0
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	4413      	add	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 800367e:	2301      	movs	r3, #1
 8003680:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3320      	adds	r3, #32
 8003686:	f107 0113 	add.w	r1, r7, #19
 800368a:	2201      	movs	r2, #1
 800368c:	4618      	mov	r0, r3
 800368e:	f001 fa6c 	bl	8004b6a <st7735_send_data>
 8003692:	4602      	mov	r2, r0
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	4413      	add	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800369a:	232c      	movs	r3, #44	; 0x2c
 800369c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3320      	adds	r3, #32
 80036a2:	f107 0113 	add.w	r1, r7, #19
 80036a6:	2201      	movs	r2, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 fa5e 	bl	8004b6a <st7735_send_data>
 80036ae:	4602      	mov	r2, r0
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	4413      	add	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80036b6:	232d      	movs	r3, #45	; 0x2d
 80036b8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3320      	adds	r3, #32
 80036be:	f107 0113 	add.w	r1, r7, #19
 80036c2:	2201      	movs	r2, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fa50 	bl	8004b6a <st7735_send_data>
 80036ca:	4602      	mov	r2, r0
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	4413      	add	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 80036d2:	2301      	movs	r3, #1
 80036d4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f103 0020 	add.w	r0, r3, #32
 80036dc:	f107 0213 	add.w	r2, r7, #19
 80036e0:	2301      	movs	r3, #1
 80036e2:	21b2      	movs	r1, #178	; 0xb2
 80036e4:	f001 fa2c 	bl	8004b40 <st7735_write_reg>
 80036e8:	4602      	mov	r2, r0
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	4413      	add	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80036f0:	232c      	movs	r3, #44	; 0x2c
 80036f2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3320      	adds	r3, #32
 80036f8:	f107 0113 	add.w	r1, r7, #19
 80036fc:	2201      	movs	r2, #1
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 fa33 	bl	8004b6a <st7735_send_data>
 8003704:	4602      	mov	r2, r0
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	4413      	add	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800370c:	232d      	movs	r3, #45	; 0x2d
 800370e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3320      	adds	r3, #32
 8003714:	f107 0113 	add.w	r1, r7, #19
 8003718:	2201      	movs	r2, #1
 800371a:	4618      	mov	r0, r3
 800371c:	f001 fa25 	bl	8004b6a <st7735_send_data>
 8003720:	4602      	mov	r2, r0
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	4413      	add	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8003728:	2301      	movs	r3, #1
 800372a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f103 0020 	add.w	r0, r3, #32
 8003732:	f107 0213 	add.w	r2, r7, #19
 8003736:	2301      	movs	r3, #1
 8003738:	21b3      	movs	r1, #179	; 0xb3
 800373a:	f001 fa01 	bl	8004b40 <st7735_write_reg>
 800373e:	4602      	mov	r2, r0
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	4413      	add	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003746:	232c      	movs	r3, #44	; 0x2c
 8003748:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3320      	adds	r3, #32
 800374e:	f107 0113 	add.w	r1, r7, #19
 8003752:	2201      	movs	r2, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fa08 	bl	8004b6a <st7735_send_data>
 800375a:	4602      	mov	r2, r0
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4413      	add	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003762:	232d      	movs	r3, #45	; 0x2d
 8003764:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3320      	adds	r3, #32
 800376a:	f107 0113 	add.w	r1, r7, #19
 800376e:	2201      	movs	r2, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f001 f9fa 	bl	8004b6a <st7735_send_data>
 8003776:	4602      	mov	r2, r0
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	4413      	add	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 800377e:	2301      	movs	r3, #1
 8003780:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3320      	adds	r3, #32
 8003786:	f107 0113 	add.w	r1, r7, #19
 800378a:	2201      	movs	r2, #1
 800378c:	4618      	mov	r0, r3
 800378e:	f001 f9ec 	bl	8004b6a <st7735_send_data>
 8003792:	4602      	mov	r2, r0
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	4413      	add	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 800379a:	232c      	movs	r3, #44	; 0x2c
 800379c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3320      	adds	r3, #32
 80037a2:	f107 0113 	add.w	r1, r7, #19
 80037a6:	2201      	movs	r2, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 f9de 	bl	8004b6a <st7735_send_data>
 80037ae:	4602      	mov	r2, r0
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4413      	add	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80037b6:	232d      	movs	r3, #45	; 0x2d
 80037b8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3320      	adds	r3, #32
 80037be:	f107 0113 	add.w	r1, r7, #19
 80037c2:	2201      	movs	r2, #1
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 f9d0 	bl	8004b6a <st7735_send_data>
 80037ca:	4602      	mov	r2, r0
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	4413      	add	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 80037d2:	2307      	movs	r3, #7
 80037d4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f103 0020 	add.w	r0, r3, #32
 80037dc:	f107 0213 	add.w	r2, r7, #19
 80037e0:	2301      	movs	r3, #1
 80037e2:	21b4      	movs	r1, #180	; 0xb4
 80037e4:	f001 f9ac 	bl	8004b40 <st7735_write_reg>
 80037e8:	4602      	mov	r2, r0
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	4413      	add	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 80037f0:	23a2      	movs	r3, #162	; 0xa2
 80037f2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f103 0020 	add.w	r0, r3, #32
 80037fa:	f107 0213 	add.w	r2, r7, #19
 80037fe:	2301      	movs	r3, #1
 8003800:	21c0      	movs	r1, #192	; 0xc0
 8003802:	f001 f99d 	bl	8004b40 <st7735_write_reg>
 8003806:	4602      	mov	r2, r0
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4413      	add	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 800380e:	2302      	movs	r3, #2
 8003810:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3320      	adds	r3, #32
 8003816:	f107 0113 	add.w	r1, r7, #19
 800381a:	2201      	movs	r2, #1
 800381c:	4618      	mov	r0, r3
 800381e:	f001 f9a4 	bl	8004b6a <st7735_send_data>
 8003822:	4602      	mov	r2, r0
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	4413      	add	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 800382a:	2384      	movs	r3, #132	; 0x84
 800382c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3320      	adds	r3, #32
 8003832:	f107 0113 	add.w	r1, r7, #19
 8003836:	2201      	movs	r2, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f001 f996 	bl	8004b6a <st7735_send_data>
 800383e:	4602      	mov	r2, r0
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	4413      	add	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8003846:	23c5      	movs	r3, #197	; 0xc5
 8003848:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f103 0020 	add.w	r0, r3, #32
 8003850:	f107 0213 	add.w	r2, r7, #19
 8003854:	2301      	movs	r3, #1
 8003856:	21c1      	movs	r1, #193	; 0xc1
 8003858:	f001 f972 	bl	8004b40 <st7735_write_reg>
 800385c:	4602      	mov	r2, r0
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4413      	add	r3, r2
 8003862:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8003864:	230a      	movs	r3, #10
 8003866:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f103 0020 	add.w	r0, r3, #32
 800386e:	f107 0213 	add.w	r2, r7, #19
 8003872:	2301      	movs	r3, #1
 8003874:	21c2      	movs	r1, #194	; 0xc2
 8003876:	f001 f963 	bl	8004b40 <st7735_write_reg>
 800387a:	4602      	mov	r2, r0
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4413      	add	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3320      	adds	r3, #32
 800388a:	f107 0113 	add.w	r1, r7, #19
 800388e:	2201      	movs	r2, #1
 8003890:	4618      	mov	r0, r3
 8003892:	f001 f96a 	bl	8004b6a <st7735_send_data>
 8003896:	4602      	mov	r2, r0
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	4413      	add	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 800389e:	238a      	movs	r3, #138	; 0x8a
 80038a0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f103 0020 	add.w	r0, r3, #32
 80038a8:	f107 0213 	add.w	r2, r7, #19
 80038ac:	2301      	movs	r3, #1
 80038ae:	21c3      	movs	r1, #195	; 0xc3
 80038b0:	f001 f946 	bl	8004b40 <st7735_write_reg>
 80038b4:	4602      	mov	r2, r0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	4413      	add	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 80038bc:	232a      	movs	r3, #42	; 0x2a
 80038be:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3320      	adds	r3, #32
 80038c4:	f107 0113 	add.w	r1, r7, #19
 80038c8:	2201      	movs	r2, #1
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 f94d 	bl	8004b6a <st7735_send_data>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4413      	add	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 80038d8:	238a      	movs	r3, #138	; 0x8a
 80038da:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f103 0020 	add.w	r0, r3, #32
 80038e2:	f107 0213 	add.w	r2, r7, #19
 80038e6:	2301      	movs	r3, #1
 80038e8:	21c4      	movs	r1, #196	; 0xc4
 80038ea:	f001 f929 	bl	8004b40 <st7735_write_reg>
 80038ee:	4602      	mov	r2, r0
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	4413      	add	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 80038f6:	23ee      	movs	r3, #238	; 0xee
 80038f8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3320      	adds	r3, #32
 80038fe:	f107 0113 	add.w	r1, r7, #19
 8003902:	2201      	movs	r2, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f001 f930 	bl	8004b6a <st7735_send_data>
 800390a:	4602      	mov	r2, r0
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4413      	add	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8003912:	230e      	movs	r3, #14
 8003914:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f103 0020 	add.w	r0, r3, #32
 800391c:	f107 0213 	add.w	r2, r7, #19
 8003920:	2301      	movs	r3, #1
 8003922:	21c5      	movs	r1, #197	; 0xc5
 8003924:	f001 f90c 	bl	8004b40 <st7735_write_reg>
 8003928:	4602      	mov	r2, r0
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4413      	add	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7b1b      	ldrb	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f103 0020 	add.w	r0, r3, #32
 800393e:	f107 0213 	add.w	r2, r7, #19
 8003942:	2300      	movs	r3, #0
 8003944:	2121      	movs	r1, #33	; 0x21
 8003946:	f001 f8fb 	bl	8004b40 <st7735_write_reg>
 800394a:	4602      	mov	r2, r0
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4413      	add	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e00c      	b.n	800396e <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f103 0020 	add.w	r0, r3, #32
 800395a:	f107 0213 	add.w	r2, r7, #19
 800395e:	2300      	movs	r3, #0
 8003960:	2120      	movs	r1, #32
 8003962:	f001 f8ed 	bl	8004b40 <st7735_write_reg>
 8003966:	4602      	mov	r2, r0
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4413      	add	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f103 0020 	add.w	r0, r3, #32
 8003974:	f107 0208 	add.w	r2, r7, #8
 8003978:	2301      	movs	r3, #1
 800397a:	213a      	movs	r1, #58	; 0x3a
 800397c:	f001 f8e0 	bl	8004b40 <st7735_write_reg>
 8003980:	4602      	mov	r2, r0
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4413      	add	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8003988:	2302      	movs	r3, #2
 800398a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f103 0020 	add.w	r0, r3, #32
 8003992:	f107 0213 	add.w	r2, r7, #19
 8003996:	2301      	movs	r3, #1
 8003998:	21e0      	movs	r1, #224	; 0xe0
 800399a:	f001 f8d1 	bl	8004b40 <st7735_write_reg>
 800399e:	4602      	mov	r2, r0
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	4413      	add	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 80039a6:	231c      	movs	r3, #28
 80039a8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3320      	adds	r3, #32
 80039ae:	f107 0113 	add.w	r1, r7, #19
 80039b2:	2201      	movs	r2, #1
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 f8d8 	bl	8004b6a <st7735_send_data>
 80039ba:	4602      	mov	r2, r0
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4413      	add	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 80039c2:	2307      	movs	r3, #7
 80039c4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3320      	adds	r3, #32
 80039ca:	f107 0113 	add.w	r1, r7, #19
 80039ce:	2201      	movs	r2, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f8ca 	bl	8004b6a <st7735_send_data>
 80039d6:	4602      	mov	r2, r0
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4413      	add	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 80039de:	2312      	movs	r3, #18
 80039e0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3320      	adds	r3, #32
 80039e6:	f107 0113 	add.w	r1, r7, #19
 80039ea:	2201      	movs	r2, #1
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 f8bc 	bl	8004b6a <st7735_send_data>
 80039f2:	4602      	mov	r2, r0
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4413      	add	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 80039fa:	2337      	movs	r3, #55	; 0x37
 80039fc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3320      	adds	r3, #32
 8003a02:	f107 0113 	add.w	r1, r7, #19
 8003a06:	2201      	movs	r2, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 f8ae 	bl	8004b6a <st7735_send_data>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4413      	add	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8003a16:	2332      	movs	r3, #50	; 0x32
 8003a18:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3320      	adds	r3, #32
 8003a1e:	f107 0113 	add.w	r1, r7, #19
 8003a22:	2201      	movs	r2, #1
 8003a24:	4618      	mov	r0, r3
 8003a26:	f001 f8a0 	bl	8004b6a <st7735_send_data>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4413      	add	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003a32:	2329      	movs	r3, #41	; 0x29
 8003a34:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3320      	adds	r3, #32
 8003a3a:	f107 0113 	add.w	r1, r7, #19
 8003a3e:	2201      	movs	r2, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 f892 	bl	8004b6a <st7735_send_data>
 8003a46:	4602      	mov	r2, r0
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003a4e:	232d      	movs	r3, #45	; 0x2d
 8003a50:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3320      	adds	r3, #32
 8003a56:	f107 0113 	add.w	r1, r7, #19
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 f884 	bl	8004b6a <st7735_send_data>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003a6a:	2329      	movs	r3, #41	; 0x29
 8003a6c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3320      	adds	r3, #32
 8003a72:	f107 0113 	add.w	r1, r7, #19
 8003a76:	2201      	movs	r2, #1
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 f876 	bl	8004b6a <st7735_send_data>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	4413      	add	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8003a86:	2325      	movs	r3, #37	; 0x25
 8003a88:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3320      	adds	r3, #32
 8003a8e:	f107 0113 	add.w	r1, r7, #19
 8003a92:	2201      	movs	r2, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 f868 	bl	8004b6a <st7735_send_data>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8003aa2:	232b      	movs	r3, #43	; 0x2b
 8003aa4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3320      	adds	r3, #32
 8003aaa:	f107 0113 	add.w	r1, r7, #19
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 f85a 	bl	8004b6a <st7735_send_data>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4413      	add	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8003abe:	2339      	movs	r3, #57	; 0x39
 8003ac0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3320      	adds	r3, #32
 8003ac6:	f107 0113 	add.w	r1, r7, #19
 8003aca:	2201      	movs	r2, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 f84c 	bl	8004b6a <st7735_send_data>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3320      	adds	r3, #32
 8003ae2:	f107 0113 	add.w	r1, r7, #19
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 f83e 	bl	8004b6a <st7735_send_data>
 8003aee:	4602      	mov	r2, r0
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4413      	add	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8003af6:	2301      	movs	r3, #1
 8003af8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3320      	adds	r3, #32
 8003afe:	f107 0113 	add.w	r1, r7, #19
 8003b02:	2201      	movs	r2, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 f830 	bl	8004b6a <st7735_send_data>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	4413      	add	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8003b12:	2303      	movs	r3, #3
 8003b14:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3320      	adds	r3, #32
 8003b1a:	f107 0113 	add.w	r1, r7, #19
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 f822 	bl	8004b6a <st7735_send_data>
 8003b26:	4602      	mov	r2, r0
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8003b2e:	2310      	movs	r3, #16
 8003b30:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3320      	adds	r3, #32
 8003b36:	f107 0113 	add.w	r1, r7, #19
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 f814 	bl	8004b6a <st7735_send_data>
 8003b42:	4602      	mov	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	4413      	add	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f103 0020 	add.w	r0, r3, #32
 8003b54:	f107 0213 	add.w	r2, r7, #19
 8003b58:	2301      	movs	r3, #1
 8003b5a:	21e1      	movs	r1, #225	; 0xe1
 8003b5c:	f000 fff0 	bl	8004b40 <st7735_write_reg>
 8003b60:	4602      	mov	r2, r0
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4413      	add	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8003b68:	231d      	movs	r3, #29
 8003b6a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3320      	adds	r3, #32
 8003b70:	f107 0113 	add.w	r1, r7, #19
 8003b74:	2201      	movs	r2, #1
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fff7 	bl	8004b6a <st7735_send_data>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	4413      	add	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8003b84:	2307      	movs	r3, #7
 8003b86:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3320      	adds	r3, #32
 8003b8c:	f107 0113 	add.w	r1, r7, #19
 8003b90:	2201      	movs	r2, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 ffe9 	bl	8004b6a <st7735_send_data>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8003ba0:	2306      	movs	r3, #6
 8003ba2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3320      	adds	r3, #32
 8003ba8:	f107 0113 	add.w	r1, r7, #19
 8003bac:	2201      	movs	r2, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 ffdb 	bl	8004b6a <st7735_send_data>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	4413      	add	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8003bbc:	232e      	movs	r3, #46	; 0x2e
 8003bbe:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3320      	adds	r3, #32
 8003bc4:	f107 0113 	add.w	r1, r7, #19
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 ffcd 	bl	8004b6a <st7735_send_data>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003bd8:	232c      	movs	r3, #44	; 0x2c
 8003bda:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3320      	adds	r3, #32
 8003be0:	f107 0113 	add.w	r1, r7, #19
 8003be4:	2201      	movs	r2, #1
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 ffbf 	bl	8004b6a <st7735_send_data>
 8003bec:	4602      	mov	r2, r0
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003bf4:	2329      	movs	r3, #41	; 0x29
 8003bf6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3320      	adds	r3, #32
 8003bfc:	f107 0113 	add.w	r1, r7, #19
 8003c00:	2201      	movs	r2, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 ffb1 	bl	8004b6a <st7735_send_data>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003c10:	232d      	movs	r3, #45	; 0x2d
 8003c12:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3320      	adds	r3, #32
 8003c18:	f107 0113 	add.w	r1, r7, #19
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 ffa3 	bl	8004b6a <st7735_send_data>
 8003c24:	4602      	mov	r2, r0
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	4413      	add	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8003c2c:	232e      	movs	r3, #46	; 0x2e
 8003c2e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3320      	adds	r3, #32
 8003c34:	f107 0113 	add.w	r1, r7, #19
 8003c38:	2201      	movs	r2, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 ff95 	bl	8004b6a <st7735_send_data>
 8003c40:	4602      	mov	r2, r0
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	4413      	add	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8003c48:	232e      	movs	r3, #46	; 0x2e
 8003c4a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3320      	adds	r3, #32
 8003c50:	f107 0113 	add.w	r1, r7, #19
 8003c54:	2201      	movs	r2, #1
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 ff87 	bl	8004b6a <st7735_send_data>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4413      	add	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8003c64:	2337      	movs	r3, #55	; 0x37
 8003c66:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3320      	adds	r3, #32
 8003c6c:	f107 0113 	add.w	r1, r7, #19
 8003c70:	2201      	movs	r2, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 ff79 	bl	8004b6a <st7735_send_data>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8003c80:	233f      	movs	r3, #63	; 0x3f
 8003c82:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3320      	adds	r3, #32
 8003c88:	f107 0113 	add.w	r1, r7, #19
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 ff6b 	bl	8004b6a <st7735_send_data>
 8003c94:	4602      	mov	r2, r0
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4413      	add	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3320      	adds	r3, #32
 8003ca4:	f107 0113 	add.w	r1, r7, #19
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 ff5d 	bl	8004b6a <st7735_send_data>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3320      	adds	r3, #32
 8003cc0:	f107 0113 	add.w	r1, r7, #19
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 ff4f 	bl	8004b6a <st7735_send_data>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3320      	adds	r3, #32
 8003cdc:	f107 0113 	add.w	r1, r7, #19
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 ff41 	bl	8004b6a <st7735_send_data>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	4413      	add	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3320      	adds	r3, #32
 8003cf8:	f107 0113 	add.w	r1, r7, #19
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 ff33 	bl	8004b6a <st7735_send_data>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	4413      	add	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f103 0020 	add.w	r0, r3, #32
 8003d16:	f107 0213 	add.w	r2, r7, #19
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	2113      	movs	r1, #19
 8003d1e:	f000 ff0f 	bl	8004b40 <st7735_write_reg>
 8003d22:	4602      	mov	r2, r0
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4413      	add	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f103 0020 	add.w	r0, r3, #32
 8003d30:	f107 0213 	add.w	r2, r7, #19
 8003d34:	2301      	movs	r3, #1
 8003d36:	2129      	movs	r1, #41	; 0x29
 8003d38:	f000 ff02 	bl	8004b40 <st7735_write_reg>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4413      	add	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f944 	bl	8003fd4 <ST7735_SetOrientation>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	4413      	add	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003d60:	697b      	ldr	r3, [r7, #20]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3320      	adds	r3, #32
 8003d8e:	f107 0208 	add.w	r2, r7, #8
 8003d92:	21da      	movs	r1, #218	; 0xda
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fec0 	bl	8004b1a <st7735_read_reg>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e02d      	b.n	8003e04 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f103 0020 	add.w	r0, r3, #32
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	3301      	adds	r3, #1
 8003db4:	461a      	mov	r2, r3
 8003db6:	21db      	movs	r1, #219	; 0xdb
 8003db8:	f000 feaf 	bl	8004b1a <st7735_read_reg>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	e01c      	b.n	8003e04 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f103 0020 	add.w	r0, r3, #32
 8003dd0:	f107 0308 	add.w	r3, r7, #8
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	21dc      	movs	r1, #220	; 0xdc
 8003dda:	f000 fe9e 	bl	8004b1a <st7735_read_reg>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8003de4:	f04f 33ff 	mov.w	r3, #4294967295
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e00b      	b.n	8003e04 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8003dec:	7abb      	ldrb	r3, [r7, #10]
 8003dee:	461a      	mov	r2, r3
 8003df0:	7a7b      	ldrb	r3, [r7, #9]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	431a      	orrs	r2, r3
 8003df6:	7a3b      	ldrb	r3, [r7, #8]
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003e04:	68fb      	ldr	r3, [r7, #12]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f103 0020 	add.w	r0, r3, #32
 8003e22:	f107 020b 	add.w	r2, r7, #11
 8003e26:	2300      	movs	r3, #0
 8003e28:	2113      	movs	r1, #19
 8003e2a:	f000 fe89 	bl	8004b40 <st7735_write_reg>
 8003e2e:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003e30:	210a      	movs	r1, #10
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fe57 	bl	8004ae6 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f103 0020 	add.w	r0, r3, #32
 8003e3e:	f107 020b 	add.w	r2, r7, #11
 8003e42:	2300      	movs	r3, #0
 8003e44:	2129      	movs	r1, #41	; 0x29
 8003e46:	f000 fe7b 	bl	8004b40 <st7735_write_reg>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003e52:	210a      	movs	r1, #10
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fe46 	bl	8004ae6 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f103 0020 	add.w	r0, r3, #32
 8003e60:	f107 020b 	add.w	r2, r7, #11
 8003e64:	2300      	movs	r3, #0
 8003e66:	2136      	movs	r1, #54	; 0x36
 8003e68:	f000 fe6a 	bl	8004b40 <st7735_write_reg>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4413      	add	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003e74:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <ST7735_DisplayOn+0xc0>)
 8003e76:	7b1b      	ldrb	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <ST7735_DisplayOn+0xc0>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <ST7735_DisplayOn+0xc4>)
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003e8a:	f043 0308 	orr.w	r3, r3, #8
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	e006      	b.n	8003ea0 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <ST7735_DisplayOn+0xc0>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <ST7735_DisplayOn+0xc4>)
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3320      	adds	r3, #32
 8003ea6:	f107 010b 	add.w	r1, r7, #11
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fe5c 	bl	8004b6a <st7735_send_data>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	240051dc 	.word	0x240051dc
 8003ed4:	240000bc 	.word	0x240000bc

08003ed8 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f103 0020 	add.w	r0, r3, #32
 8003eea:	f107 020b 	add.w	r2, r7, #11
 8003eee:	2300      	movs	r3, #0
 8003ef0:	2113      	movs	r1, #19
 8003ef2:	f000 fe25 	bl	8004b40 <st7735_write_reg>
 8003ef6:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003ef8:	210a      	movs	r1, #10
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fdf3 	bl	8004ae6 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f103 0020 	add.w	r0, r3, #32
 8003f06:	f107 020b 	add.w	r2, r7, #11
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2128      	movs	r1, #40	; 0x28
 8003f0e:	f000 fe17 	bl	8004b40 <st7735_write_reg>
 8003f12:	4602      	mov	r2, r0
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003f1a:	210a      	movs	r1, #10
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fde2 	bl	8004ae6 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f103 0020 	add.w	r0, r3, #32
 8003f28:	f107 020b 	add.w	r2, r7, #11
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2136      	movs	r1, #54	; 0x36
 8003f30:	f000 fe06 	bl	8004b40 <st7735_write_reg>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003f3c:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <ST7735_DisplayOff+0xc0>)
 8003f3e:	7b1b      	ldrb	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <ST7735_DisplayOff+0xc0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <ST7735_DisplayOff+0xc4>)
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003f52:	f043 0308 	orr.w	r3, r3, #8
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	e006      	b.n	8003f68 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <ST7735_DisplayOff+0xc0>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	4a0f      	ldr	r2, [pc, #60]	; (8003f9c <ST7735_DisplayOff+0xc4>)
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4413      	add	r3, r2
 8003f64:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3320      	adds	r3, #32
 8003f6e:	f107 010b 	add.w	r1, r7, #11
 8003f72:	2201      	movs	r2, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fdf8 	bl	8004b6a <st7735_send_data>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	240051dc 	.word	0x240051dc
 8003f9c:	240000bc 	.word	0x240000bc

08003fa0 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <ST7735_SetOrientation+0x1a>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d119      	bne.n	8004022 <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	7b5b      	ldrb	r3, [r3, #13]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d106      	bne.n	8004004 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 8003ff6:	4b3c      	ldr	r3, [pc, #240]	; (80040e8 <ST7735_SetOrientation+0x114>)
 8003ff8:	2250      	movs	r2, #80	; 0x50
 8003ffa:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8003ffc:	4b3a      	ldr	r3, [pc, #232]	; (80040e8 <ST7735_SetOrientation+0x114>)
 8003ffe:	22a0      	movs	r2, #160	; 0xa0
 8004000:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004002:	e028      	b.n	8004056 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	7b5b      	ldrb	r3, [r3, #13]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <ST7735_SetOrientation+0x40>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	7b5b      	ldrb	r3, [r3, #13]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d120      	bne.n	8004056 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 8004014:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <ST7735_SetOrientation+0x114>)
 8004016:	2280      	movs	r2, #128	; 0x80
 8004018:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 800401a:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <ST7735_SetOrientation+0x114>)
 800401c:	22a0      	movs	r2, #160	; 0xa0
 800401e:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004020:	e019      	b.n	8004056 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	7b5b      	ldrb	r3, [r3, #13]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d106      	bne.n	8004038 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <ST7735_SetOrientation+0x114>)
 800402c:	22a0      	movs	r2, #160	; 0xa0
 800402e:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 8004030:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <ST7735_SetOrientation+0x114>)
 8004032:	2250      	movs	r2, #80	; 0x50
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	e00f      	b.n	8004058 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	7b5b      	ldrb	r3, [r3, #13]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <ST7735_SetOrientation+0x74>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	7b5b      	ldrb	r3, [r3, #13]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d107      	bne.n	8004058 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8004048:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <ST7735_SetOrientation+0x114>)
 800404a:	22a0      	movs	r2, #160	; 0xa0
 800404c:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 800404e:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <ST7735_SetOrientation+0x114>)
 8004050:	2280      	movs	r2, #128	; 0x80
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	e000      	b.n	8004058 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004056:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <ST7735_SetOrientation+0x114>)
 800405e:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	7b1a      	ldrb	r2, [r3, #12]
 8004064:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <ST7735_SetOrientation+0x114>)
 8004066:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	7b5a      	ldrb	r2, [r3, #13]
 800406c:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <ST7735_SetOrientation+0x114>)
 800406e:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 8004070:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <ST7735_SetOrientation+0x114>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <ST7735_SetOrientation+0x114>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	4613      	mov	r3, r2
 800407c:	2200      	movs	r2, #0
 800407e:	2100      	movs	r1, #0
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fbdf 	bl	8004844 <ST7735_SetDisplayWindow>
 8004086:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004088:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <ST7735_SetOrientation+0x114>)
 800408a:	7b1b      	ldrb	r3, [r3, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8004090:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <ST7735_SetOrientation+0x114>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4a15      	ldr	r2, [pc, #84]	; (80040ec <ST7735_SetOrientation+0x118>)
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800409e:	f043 0308 	orr.w	r3, r3, #8
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	e006      	b.n	80040b4 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <ST7735_SetOrientation+0x114>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4a10      	ldr	r2, [pc, #64]	; (80040ec <ST7735_SetOrientation+0x118>)
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f103 0020 	add.w	r0, r3, #32
 80040bc:	f107 020b 	add.w	r2, r7, #11
 80040c0:	2301      	movs	r3, #1
 80040c2:	2136      	movs	r1, #54	; 0x36
 80040c4:	f000 fd3c 	bl	8004b40 <st7735_write_reg>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80040dc:	68fb      	ldr	r3, [r7, #12]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	240051dc 	.word	0x240051dc
 80040ec:	240000bc 	.word	0x240000bc

080040f0 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <ST7735_GetOrientation+0x20>)
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	240051dc 	.word	0x240051dc

08004114 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <ST7735_SetCursor+0x174>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d821      	bhi.n	800416c <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8004128:	4b57      	ldr	r3, [pc, #348]	; (8004288 <ST7735_SetCursor+0x174>)
 800412a:	7b5b      	ldrb	r3, [r3, #13]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10e      	bne.n	800414e <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8004130:	4b55      	ldr	r3, [pc, #340]	; (8004288 <ST7735_SetCursor+0x174>)
 8004132:	7b1b      	ldrb	r3, [r3, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <ST7735_SetCursor+0x32>
				Xpos += 26;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	331a      	adds	r3, #26
 800413c:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3301      	adds	r3, #1
 8004142:	607b      	str	r3, [r7, #4]
 8004144:	e033      	b.n	80041ae <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	3318      	adds	r3, #24
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	e02f      	b.n	80041ae <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800414e:	4b4e      	ldr	r3, [pc, #312]	; (8004288 <ST7735_SetCursor+0x174>)
 8004150:	7b5b      	ldrb	r3, [r3, #13]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d12b      	bne.n	80041ae <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004156:	4b4c      	ldr	r3, [pc, #304]	; (8004288 <ST7735_SetCursor+0x174>)
 8004158:	7b1b      	ldrb	r3, [r3, #12]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d127      	bne.n	80041ae <ST7735_SetCursor+0x9a>
				Xpos += 2;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	3302      	adds	r3, #2
 8004162:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3301      	adds	r3, #1
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	e020      	b.n	80041ae <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 800416c:	4b46      	ldr	r3, [pc, #280]	; (8004288 <ST7735_SetCursor+0x174>)
 800416e:	7b5b      	ldrb	r3, [r3, #13]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10e      	bne.n	8004192 <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8004174:	4b44      	ldr	r3, [pc, #272]	; (8004288 <ST7735_SetCursor+0x174>)
 8004176:	7b1b      	ldrb	r3, [r3, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <ST7735_SetCursor+0x76>
				Xpos += 1;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	3301      	adds	r3, #1
 8004180:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	331a      	adds	r3, #26
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	e011      	b.n	80041ae <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3318      	adds	r3, #24
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	e00d      	b.n	80041ae <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8004192:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <ST7735_SetCursor+0x174>)
 8004194:	7b5b      	ldrb	r3, [r3, #13]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d109      	bne.n	80041ae <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <ST7735_SetCursor+0x174>)
 800419c:	7b1b      	ldrb	r3, [r3, #12]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d105      	bne.n	80041ae <ST7735_SetCursor+0x9a>
				Xpos += 1;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	3301      	adds	r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3302      	adds	r3, #2
 80041ac:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f103 0020 	add.w	r0, r3, #32
 80041b4:	f107 0213 	add.w	r2, r7, #19
 80041b8:	2300      	movs	r3, #0
 80041ba:	212a      	movs	r1, #42	; 0x2a
 80041bc:	f000 fcc0 	bl	8004b40 <st7735_write_reg>
 80041c0:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3320      	adds	r3, #32
 80041ce:	f107 0113 	add.w	r1, r7, #19
 80041d2:	2201      	movs	r2, #1
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fcc8 	bl	8004b6a <st7735_send_data>
 80041da:	4602      	mov	r2, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	4413      	add	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3320      	adds	r3, #32
 80041ec:	f107 0113 	add.w	r1, r7, #19
 80041f0:	2201      	movs	r2, #1
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fcb9 	bl	8004b6a <st7735_send_data>
 80041f8:	4602      	mov	r2, r0
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	4413      	add	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f103 0020 	add.w	r0, r3, #32
 8004206:	f107 0213 	add.w	r2, r7, #19
 800420a:	2300      	movs	r3, #0
 800420c:	212b      	movs	r1, #43	; 0x2b
 800420e:	f000 fc97 	bl	8004b40 <st7735_write_reg>
 8004212:	4602      	mov	r2, r0
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4413      	add	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	b2db      	uxtb	r3, r3
 8004220:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3320      	adds	r3, #32
 8004226:	f107 0113 	add.w	r1, r7, #19
 800422a:	2201      	movs	r2, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fc9c 	bl	8004b6a <st7735_send_data>
 8004232:	4602      	mov	r2, r0
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	4413      	add	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3320      	adds	r3, #32
 8004244:	f107 0113 	add.w	r1, r7, #19
 8004248:	2201      	movs	r2, #1
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fc8d 	bl	8004b6a <st7735_send_data>
 8004250:	4602      	mov	r2, r0
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4413      	add	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f103 0020 	add.w	r0, r3, #32
 800425e:	f107 0213 	add.w	r2, r7, #19
 8004262:	2300      	movs	r3, #0
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	f000 fc6b 	bl	8004b40 <st7735_write_reg>
 800426a:	4602      	mov	r2, r0
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4413      	add	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800427e:	697b      	ldr	r3, [r7, #20]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	240051dc 	.word	0x240051dc

0800428c <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b090      	sub	sp, #64	; 0x40
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	330a      	adds	r3, #10
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	330b      	adds	r3, #11
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	441a      	add	r2, r3
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	441a      	add	r2, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	330d      	adds	r3, #13
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	4413      	add	r3, r2
 80042c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	3312      	adds	r3, #18
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	3313      	adds	r3, #19
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	441a      	add	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	441a      	add	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	3315      	adds	r3, #21
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	061b      	lsls	r3, r3, #24
 80042ee:	4413      	add	r3, r2
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	3316      	adds	r3, #22
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	3317      	adds	r3, #23
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	441a      	add	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	3318      	adds	r3, #24
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	441a      	add	r2, r3
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	3319      	adds	r3, #25
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	4413      	add	r3, r2
 8004318:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	3302      	adds	r3, #2
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	3303      	adds	r3, #3
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	441a      	add	r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	3304      	adds	r3, #4
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	441a      	add	r2, r3
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	3305      	adds	r3, #5
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	4413      	add	r3, r2
 8004340:	61fb      	str	r3, [r7, #28]
  size = size - index;
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	4413      	add	r3, r2
 8004350:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 8004352:	4b51      	ldr	r3, [pc, #324]	; (8004498 <ST7735_DrawBitmap+0x20c>)
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	1ad2      	subs	r2, r2, r3
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fa6a 	bl	8004844 <ST7735_SetDisplayWindow>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
 800437c:	e087      	b.n	800448e <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800437e:	4b46      	ldr	r3, [pc, #280]	; (8004498 <ST7735_DrawBitmap+0x20c>)
 8004380:	7b1b      	ldrb	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d109      	bne.n	800439a <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8004386:	4b44      	ldr	r3, [pc, #272]	; (8004498 <ST7735_DrawBitmap+0x20c>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	4a44      	ldr	r2, [pc, #272]	; (800449c <ST7735_DrawBitmap+0x210>)
 800438c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004390:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004392:	f043 0308 	orr.w	r3, r3, #8
 8004396:	b2db      	uxtb	r3, r3
 8004398:	e005      	b.n	80043a6 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 800439a:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <ST7735_DrawBitmap+0x20c>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	4a3f      	ldr	r2, [pc, #252]	; (800449c <ST7735_DrawBitmap+0x210>)
 80043a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f103 0020 	add.w	r0, r3, #32
 80043ae:	f107 0213 	add.w	r2, r7, #19
 80043b2:	2301      	movs	r3, #1
 80043b4:	2136      	movs	r1, #54	; 0x36
 80043b6:	f000 fbc3 	bl	8004b40 <st7735_write_reg>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
 80043c6:	e062      	b.n	800448e <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7ff fea1 	bl	8004114 <ST7735_SetCursor>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 80043d8:	f04f 33ff 	mov.w	r3, #4294967295
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
 80043de:	e056      	b.n	800448e <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3320      	adds	r3, #32
 80043f0:	f107 0114 	add.w	r1, r7, #20
 80043f4:	2202      	movs	r2, #2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fbb7 	bl	8004b6a <st7735_send_data>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004408:	e009      	b.n	800441e <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	3302      	adds	r3, #2
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	3302      	adds	r3, #2
 8004414:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 8004416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	429a      	cmp	r2, r3
 800441c:	d3e0      	bcc.n	80043e0 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800441e:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <ST7735_DrawBitmap+0x20c>)
 8004420:	7b1b      	ldrb	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8004426:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <ST7735_DrawBitmap+0x20c>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <ST7735_DrawBitmap+0x210>)
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4413      	add	r3, r2
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e006      	b.n	800444a <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800443c:	4b16      	ldr	r3, [pc, #88]	; (8004498 <ST7735_DrawBitmap+0x20c>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4a16      	ldr	r2, [pc, #88]	; (800449c <ST7735_DrawBitmap+0x210>)
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4413      	add	r3, r2
 8004446:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004448:	b2db      	uxtb	r3, r3
 800444a:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f103 0020 	add.w	r0, r3, #32
 8004452:	f107 0213 	add.w	r2, r7, #19
 8004456:	2301      	movs	r3, #1
 8004458:	2136      	movs	r1, #54	; 0x36
 800445a:	f000 fb71 	bl	8004b40 <st7735_write_reg>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
 800446a:	e010      	b.n	800448e <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <ST7735_DrawBitmap+0x20c>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <ST7735_DrawBitmap+0x20c>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	4613      	mov	r3, r2
 8004478:	2200      	movs	r2, #0
 800447a:	2100      	movs	r1, #0
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f9e1 	bl	8004844 <ST7735_SetDisplayWindow>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004490:	4618      	mov	r0, r3
 8004492:	3738      	adds	r7, #56	; 0x38
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	240051dc 	.word	0x240051dc
 800449c:	240000bc 	.word	0x240000bc

080044a0 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	441a      	add	r2, r3
 80044bc:	4b2b      	ldr	r3, [pc, #172]	; (800456c <ST7735_FillRGBRect+0xcc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d806      	bhi.n	80044d2 <ST7735_FillRGBRect+0x32>
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	441a      	add	r2, r3
 80044ca:	4b28      	ldr	r3, [pc, #160]	; (800456c <ST7735_FillRGBRect+0xcc>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d903      	bls.n	80044da <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 80044d2:	f04f 33ff 	mov.w	r3, #4294967295
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e042      	b.n	8004560 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	e03b      	b.n	8004558 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4413      	add	r3, r2
 80044e6:	461a      	mov	r2, r3
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f7ff fe12 	bl	8004114 <ST7735_SetCursor>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	e029      	b.n	8004552 <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e013      	b.n	800452c <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	7811      	ldrb	r1, [r2, #0]
 800450c:	4a18      	ldr	r2, [pc, #96]	; (8004570 <ST7735_FillRGBRect+0xd0>)
 800450e:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	3301      	adds	r3, #1
 800451a:	7811      	ldrb	r1, [r2, #0]
 800451c:	4a14      	ldr	r2, [pc, #80]	; (8004570 <ST7735_FillRGBRect+0xd0>)
 800451e:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	3302      	adds	r3, #2
 8004524:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	3301      	adds	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	429a      	cmp	r2, r3
 8004532:	d3e7      	bcc.n	8004504 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f103 0020 	add.w	r0, r3, #32
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	461a      	mov	r2, r3
 8004540:	490b      	ldr	r1, [pc, #44]	; (8004570 <ST7735_FillRGBRect+0xd0>)
 8004542:	f000 fb12 	bl	8004b6a <st7735_send_data>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
 8004550:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	3301      	adds	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	429a      	cmp	r2, r3
 800455e:	d3bf      	bcc.n	80044e0 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 8004560:	69fb      	ldr	r3, [r7, #28]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	240051dc 	.word	0x240051dc
 8004570:	2400070c 	.word	0x2400070c

08004574 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	441a      	add	r2, r3
 800458c:	4b1f      	ldr	r3, [pc, #124]	; (800460c <ST7735_DrawHLine+0x98>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d903      	bls.n	800459c <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	e032      	b.n	8004602 <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fdb7 	bl	8004114 <ST7735_SetCursor>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e026      	b.n	8004602 <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	e010      	b.n	80045dc <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	0a1a      	lsrs	r2, r3, #8
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	b2d1      	uxtb	r1, r2
 80045c4:	4a12      	ldr	r2, [pc, #72]	; (8004610 <ST7735_DrawHLine+0x9c>)
 80045c6:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	3301      	adds	r3, #1
 80045ce:	6a3a      	ldr	r2, [r7, #32]
 80045d0:	b2d1      	uxtb	r1, r2
 80045d2:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <ST7735_DrawHLine+0x9c>)
 80045d4:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	3301      	adds	r3, #1
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d3ea      	bcc.n	80045ba <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f103 0020 	add.w	r0, r3, #32
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	461a      	mov	r2, r3
 80045f0:	4907      	ldr	r1, [pc, #28]	; (8004610 <ST7735_DrawHLine+0x9c>)
 80045f2:	f000 faba 	bl	8004b6a <st7735_send_data>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 80045fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004600:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004602:	697b      	ldr	r3, [r7, #20]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	240051dc 	.word	0x240051dc
 8004610:	2400098c 	.word	0x2400098c

08004614 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	441a      	add	r2, r3
 800462c:	4b12      	ldr	r3, [pc, #72]	; (8004678 <ST7735_DrawVLine+0x64>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d903      	bls.n	800463c <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e018      	b.n	800466e <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	e011      	b.n	8004666 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	441a      	add	r2, r3
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f841 	bl	80046d4 <ST7735_SetPixel>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8004658:	f04f 33ff 	mov.w	r3, #4294967295
 800465c:	617b      	str	r3, [r7, #20]
        break;
 800465e:	e006      	b.n	800466e <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	3301      	adds	r3, #1
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d3e9      	bcc.n	8004642 <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 800466e:	697b      	ldr	r3, [r7, #20]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	240051dc 	.word	0x240051dc

0800467c <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8004692:	2300      	movs	r3, #0
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e014      	b.n	80046c2 <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff ff66 	bl	8004574 <ST7735_DrawHLine>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 80046ae:	f04f 33ff 	mov.w	r3, #4294967295
 80046b2:	61fb      	str	r3, [r7, #28]
      break;
 80046b4:	e009      	b.n	80046ca <ST7735_FillRect+0x4e>
    }
    y_pos++;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	3301      	adds	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	3301      	adds	r3, #1
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d3e6      	bcc.n	8004698 <ST7735_FillRect+0x1c>
  }

  return ret;
 80046ca:	69fb      	ldr	r3, [r7, #28]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	0a1b      	lsrs	r3, r3, #8
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	8a7b      	ldrh	r3, [r7, #18]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 80046fe:	4b16      	ldr	r3, [pc, #88]	; (8004758 <ST7735_SetPixel+0x84>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	d204      	bcs.n	8004712 <ST7735_SetPixel+0x3e>
 8004708:	4b13      	ldr	r3, [pc, #76]	; (8004758 <ST7735_SetPixel+0x84>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	429a      	cmp	r2, r3
 8004710:	d303      	bcc.n	800471a <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8004712:	f04f 33ff 	mov.w	r3, #4294967295
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e019      	b.n	800474e <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fcf8 	bl	8004114 <ST7735_SetCursor>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e00d      	b.n	800474e <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3320      	adds	r3, #32
 8004736:	f107 0112 	add.w	r1, r7, #18
 800473a:	2202      	movs	r2, #2
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fa14 	bl	8004b6a <st7735_send_data>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8004748:	f04f 33ff 	mov.w	r3, #4294967295
 800474c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800474e:	697b      	ldr	r3, [r7, #20]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	240051dc 	.word	0x240051dc

0800475c <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff fcd0 	bl	8004114 <ST7735_SetCursor>
 8004774:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3320      	adds	r3, #32
 800477a:	f107 0211 	add.w	r2, r7, #17
 800477e:	212e      	movs	r1, #46	; 0x2e
 8004780:	4618      	mov	r0, r3
 8004782:	f000 f9ca 	bl	8004b1a <st7735_read_reg>
 8004786:	4602      	mov	r2, r0
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4413      	add	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3320      	adds	r3, #32
 8004792:	f107 0111 	add.w	r1, r7, #17
 8004796:	2201      	movs	r2, #1
 8004798:	4618      	mov	r0, r3
 800479a:	f000 f9f8 	bl	8004b8e <st7735_recv_data>
 800479e:	4602      	mov	r2, r0
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4413      	add	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3320      	adds	r3, #32
 80047aa:	f107 0113 	add.w	r1, r7, #19
 80047ae:	2201      	movs	r2, #1
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 f9ec 	bl	8004b8e <st7735_recv_data>
 80047b6:	4602      	mov	r2, r0
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4413      	add	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3320      	adds	r3, #32
 80047c2:	f107 0112 	add.w	r1, r7, #18
 80047c6:	2201      	movs	r2, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f9e0 	bl	8004b8e <st7735_recv_data>
 80047ce:	4602      	mov	r2, r0
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4413      	add	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	461a      	mov	r2, r3
 80047da:	7cbb      	ldrb	r3, [r7, #18]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	441a      	add	r2, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 80047ea:	f04f 33ff 	mov.w	r3, #4294967295
 80047ee:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80047f0:	697b      	ldr	r3, [r7, #20]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <ST7735_GetXSize+0x20>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	240051dc 	.word	0x240051dc

08004820 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <ST7735_GetYSize+0x20>)
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	240051dc 	.word	0x240051dc

08004844 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8004852:	4b7d      	ldr	r3, [pc, #500]	; (8004a48 <ST7735_SetDisplayWindow+0x204>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d821      	bhi.n	800489e <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 800485a:	4b7b      	ldr	r3, [pc, #492]	; (8004a48 <ST7735_SetDisplayWindow+0x204>)
 800485c:	7b5b      	ldrb	r3, [r3, #13]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10e      	bne.n	8004880 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8004862:	4b79      	ldr	r3, [pc, #484]	; (8004a48 <ST7735_SetDisplayWindow+0x204>)
 8004864:	7b1b      	ldrb	r3, [r3, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	331a      	adds	r3, #26
 800486e:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3301      	adds	r3, #1
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	e036      	b.n	80048e6 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	3318      	adds	r3, #24
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	e032      	b.n	80048e6 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8004880:	4b71      	ldr	r3, [pc, #452]	; (8004a48 <ST7735_SetDisplayWindow+0x204>)
 8004882:	7b5b      	ldrb	r3, [r3, #13]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d12e      	bne.n	80048e6 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004888:	4b6f      	ldr	r3, [pc, #444]	; (8004a48 <ST7735_SetDisplayWindow+0x204>)
 800488a:	7b1b      	ldrb	r3, [r3, #12]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d12a      	bne.n	80048e6 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	3302      	adds	r3, #2
 8004894:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3301      	adds	r3, #1
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	e023      	b.n	80048e6 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 800489e:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <ST7735_SetDisplayWindow+0x204>)
 80048a0:	7b5b      	ldrb	r3, [r3, #13]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d111      	bne.n	80048ca <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80048a6:	4b68      	ldr	r3, [pc, #416]	; (8004a48 <ST7735_SetDisplayWindow+0x204>)
 80048a8:	7b1b      	ldrb	r3, [r3, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	331a      	adds	r3, #26
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	e014      	b.n	80048e6 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	3301      	adds	r3, #1
 80048c0:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3318      	adds	r3, #24
 80048c6:	607b      	str	r3, [r7, #4]
 80048c8:	e00d      	b.n	80048e6 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80048ca:	4b5f      	ldr	r3, [pc, #380]	; (8004a48 <ST7735_SetDisplayWindow+0x204>)
 80048cc:	7b5b      	ldrb	r3, [r3, #13]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d109      	bne.n	80048e6 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80048d2:	4b5d      	ldr	r3, [pc, #372]	; (8004a48 <ST7735_SetDisplayWindow+0x204>)
 80048d4:	7b1b      	ldrb	r3, [r3, #12]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d105      	bne.n	80048e6 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	3301      	adds	r3, #1
 80048de:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3302      	adds	r3, #2
 80048e4:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f103 0020 	add.w	r0, r3, #32
 80048ec:	f107 0213 	add.w	r2, r7, #19
 80048f0:	2300      	movs	r3, #0
 80048f2:	212a      	movs	r1, #42	; 0x2a
 80048f4:	f000 f924 	bl	8004b40 <st7735_write_reg>
 80048f8:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3320      	adds	r3, #32
 8004906:	f107 0113 	add.w	r1, r7, #19
 800490a:	2201      	movs	r2, #1
 800490c:	4618      	mov	r0, r3
 800490e:	f000 f92c 	bl	8004b6a <st7735_send_data>
 8004912:	4602      	mov	r2, r0
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3320      	adds	r3, #32
 8004924:	f107 0113 	add.w	r1, r7, #19
 8004928:	2201      	movs	r2, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f91d 	bl	8004b6a <st7735_send_data>
 8004930:	4602      	mov	r2, r0
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	4413      	add	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	4413      	add	r3, r2
 800493e:	3b01      	subs	r3, #1
 8004940:	0a1b      	lsrs	r3, r3, #8
 8004942:	b2db      	uxtb	r3, r3
 8004944:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3320      	adds	r3, #32
 800494a:	f107 0113 	add.w	r1, r7, #19
 800494e:	2201      	movs	r2, #1
 8004950:	4618      	mov	r0, r3
 8004952:	f000 f90a 	bl	8004b6a <st7735_send_data>
 8004956:	4602      	mov	r2, r0
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4413      	add	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	4413      	add	r3, r2
 8004968:	b2db      	uxtb	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b2db      	uxtb	r3, r3
 800496e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3320      	adds	r3, #32
 8004974:	f107 0113 	add.w	r1, r7, #19
 8004978:	2201      	movs	r2, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f000 f8f5 	bl	8004b6a <st7735_send_data>
 8004980:	4602      	mov	r2, r0
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	4413      	add	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f103 0020 	add.w	r0, r3, #32
 800498e:	f107 0213 	add.w	r2, r7, #19
 8004992:	2300      	movs	r3, #0
 8004994:	212b      	movs	r1, #43	; 0x2b
 8004996:	f000 f8d3 	bl	8004b40 <st7735_write_reg>
 800499a:	4602      	mov	r2, r0
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4413      	add	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3320      	adds	r3, #32
 80049ae:	f107 0113 	add.w	r1, r7, #19
 80049b2:	2201      	movs	r2, #1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f8d8 	bl	8004b6a <st7735_send_data>
 80049ba:	4602      	mov	r2, r0
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	4413      	add	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3320      	adds	r3, #32
 80049cc:	f107 0113 	add.w	r1, r7, #19
 80049d0:	2201      	movs	r2, #1
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f8c9 	bl	8004b6a <st7735_send_data>
 80049d8:	4602      	mov	r2, r0
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4413      	add	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	4413      	add	r3, r2
 80049e6:	3b01      	subs	r3, #1
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3320      	adds	r3, #32
 80049f2:	f107 0113 	add.w	r1, r7, #19
 80049f6:	2201      	movs	r2, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f8b6 	bl	8004b6a <st7735_send_data>
 80049fe:	4602      	mov	r2, r0
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4413      	add	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3320      	adds	r3, #32
 8004a1c:	f107 0113 	add.w	r1, r7, #19
 8004a20:	2201      	movs	r2, #1
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f8a1 	bl	8004b6a <st7735_send_data>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004a3c:	697b      	ldr	r3, [r7, #20]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	240051dc 	.word	0x240051dc

08004a4c <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	460b      	mov	r3, r1
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	7afa      	ldrb	r2, [r7, #11]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4610      	mov	r0, r2
 8004a68:	4798      	blx	r3
 8004a6a:	4603      	mov	r3, r0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	460b      	mov	r3, r1
 8004a82:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	7af8      	ldrb	r0, [r7, #11]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	4798      	blx	r3
 8004a94:	4603      	mov	r3, r0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b086      	sub	sp, #24
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	68b8      	ldr	r0, [r7, #8]
 8004ab6:	4798      	blx	r3
 8004ab8:	4603      	mov	r3, r0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	68b8      	ldr	r0, [r7, #8]
 8004ada:	4798      	blx	r3
 8004adc:	4603      	mov	r3, r0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	4798      	blx	r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004afa:	bf00      	nop
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	4798      	blx	r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d8f5      	bhi.n	8004afc <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	460b      	mov	r3, r1
 8004b24:	607a      	str	r2, [r7, #4]
 8004b26:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	6910      	ldr	r0, [r2, #16]
 8004b30:	7af9      	ldrb	r1, [r7, #11]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4798      	blx	r3
 8004b36:	4603      	mov	r3, r0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681c      	ldr	r4, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6918      	ldr	r0, [r3, #16]
 8004b58:	7af9      	ldrb	r1, [r7, #11]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	47a0      	blx	r4
 8004b60:	4603      	mov	r3, r0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd90      	pop	{r4, r7, pc}

08004b6a <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	6910      	ldr	r0, [r2, #16]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	4798      	blx	r3
 8004b84:	4603      	mov	r3, r0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	60f8      	str	r0, [r7, #12]
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	6910      	ldr	r0, [r2, #16]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	4798      	blx	r3
 8004ba8:	4603      	mov	r3, r0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bba:	2003      	movs	r0, #3
 8004bbc:	f001 f9e1 	bl	8005f82 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bc0:	f004 fabc 	bl	800913c <HAL_RCC_GetSysClockFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <HAL_Init+0x68>)
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	4913      	ldr	r1, [pc, #76]	; (8004c20 <HAL_Init+0x6c>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bde:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <HAL_Init+0x68>)
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <HAL_Init+0x6c>)
 8004be8:	5cd3      	ldrb	r3, [r2, r3]
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf4:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <HAL_Init+0x70>)
 8004bf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bf8:	4a0b      	ldr	r2, [pc, #44]	; (8004c28 <HAL_Init+0x74>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004bfe:	200f      	movs	r0, #15
 8004c00:	f7fd fb06 	bl	8002210 <HAL_InitTick>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e002      	b.n	8004c14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004c0e:	f7fd fae1 	bl	80021d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	0801808c 	.word	0x0801808c
 8004c24:	24000048 	.word	0x24000048
 8004c28:	24000044 	.word	0x24000044

08004c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <HAL_IncTick+0x20>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_IncTick+0x24>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	4a04      	ldr	r2, [pc, #16]	; (8004c50 <HAL_IncTick+0x24>)
 8004c3e:	6013      	str	r3, [r2, #0]
}
 8004c40:	bf00      	nop
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	240000e0 	.word	0x240000e0
 8004c50:	240051ec 	.word	0x240051ec

08004c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return uwTick;
 8004c58:	4b03      	ldr	r3, [pc, #12]	; (8004c68 <HAL_GetTick+0x14>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	240051ec 	.word	0x240051ec

08004c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c74:	f7ff ffee 	bl	8004c54 <HAL_GetTick>
 8004c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d005      	beq.n	8004c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c86:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <HAL_Delay+0x44>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c92:	bf00      	nop
 8004c94:	f7ff ffde 	bl	8004c54 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d8f7      	bhi.n	8004c94 <HAL_Delay+0x28>
  {
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	240000e0 	.word	0x240000e0

08004cb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004cb8:	4b03      	ldr	r3, [pc, #12]	; (8004cc8 <HAL_GetREVID+0x14>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	5c001000 	.word	0x5c001000

08004ccc <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <HAL_GetDEVID+0x18>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	5c001000 	.word	0x5c001000

08004ce8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	4904      	ldr	r1, [pc, #16]	; (8004d10 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	58000400 	.word	0x58000400

08004d14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	609a      	str	r2, [r3, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3360      	adds	r3, #96	; 0x60
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	431a      	orrs	r2, r3
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	611a      	str	r2, [r3, #16]
}
 8004de2:	bf00      	nop
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b087      	sub	sp, #28
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3360      	adds	r3, #96	; 0x60
 8004dfe:	461a      	mov	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	601a      	str	r2, [r3, #0]
  }
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3330      	adds	r3, #48	; 0x30
 8004e34:	461a      	mov	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	0a1b      	lsrs	r3, r3, #8
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	4413      	add	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	211f      	movs	r1, #31
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	401a      	ands	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	0e9b      	lsrs	r3, r3, #26
 8004e5c:	f003 011f 	and.w	r1, r3, #31
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004e70:	bf00      	nop
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	0e5b      	lsrs	r3, r3, #25
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	4413      	add	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	0d1b      	lsrs	r3, r3, #20
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	2107      	movs	r1, #7
 8004eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	401a      	ands	r2, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	0d1b      	lsrs	r3, r3, #20
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eec:	43db      	mvns	r3, r3
 8004eee:	401a      	ands	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f003 0318 	and.w	r3, r3, #24
 8004ef6:	4908      	ldr	r1, [pc, #32]	; (8004f18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ef8:	40d9      	lsrs	r1, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	400b      	ands	r3, r1
 8004efe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f02:	431a      	orrs	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	000fffff 	.word	0x000fffff

08004f1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <LL_ADC_DisableDeepPowerDown+0x20>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6093      	str	r3, [r2, #8]
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	5fffffc0 	.word	0x5fffffc0

08004f40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f54:	d101      	bne.n	8004f5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <LL_ADC_EnableInternalRegulator+0x24>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	6fffffc0 	.word	0x6fffffc0

08004f90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa4:	d101      	bne.n	8004faa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <LL_ADC_IsEnabled+0x18>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <LL_ADC_IsEnabled+0x1a>
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d101      	bne.n	8004ff6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d101      	bne.n	800501c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b089      	sub	sp, #36	; 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005038:	2300      	movs	r3, #0
 800503a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e18e      	b.n	8005364 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fb fc5d 	bl	8000914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff ff67 	bl	8004f40 <LL_ADC_IsDeepPowerDownEnabled>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d004      	beq.n	8005082 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff ff4d 	bl	8004f1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff ff82 	bl	8004f90 <LL_ADC_IsInternalRegulatorEnabled>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d114      	bne.n	80050bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff ff66 	bl	8004f68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800509c:	4b9a      	ldr	r3, [pc, #616]	; (8005308 <HAL_ADC_Init+0x2dc>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	099b      	lsrs	r3, r3, #6
 80050a2:	4a9a      	ldr	r2, [pc, #616]	; (800530c <HAL_ADC_Init+0x2e0>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	099b      	lsrs	r3, r3, #6
 80050aa:	3301      	adds	r3, #1
 80050ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80050ae:	e002      	b.n	80050b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f9      	bne.n	80050b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff ff65 	bl	8004f90 <LL_ADC_IsInternalRegulatorEnabled>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10d      	bne.n	80050e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	f043 0210 	orr.w	r2, r3, #16
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050dc:	f043 0201 	orr.w	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff ff76 	bl	8004fde <LL_ADC_REG_IsConversionOngoing>
 80050f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 8128 	bne.w	8005352 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f040 8124 	bne.w	8005352 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005112:	f043 0202 	orr.w	r2, r3, #2
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff ff4a 	bl	8004fb8 <LL_ADC_IsEnabled>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d136      	bne.n	8005198 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a78      	ldr	r2, [pc, #480]	; (8005310 <HAL_ADC_Init+0x2e4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <HAL_ADC_Init+0x112>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a76      	ldr	r2, [pc, #472]	; (8005314 <HAL_ADC_Init+0x2e8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d10e      	bne.n	800515c <HAL_ADC_Init+0x130>
 800513e:	4874      	ldr	r0, [pc, #464]	; (8005310 <HAL_ADC_Init+0x2e4>)
 8005140:	f7ff ff3a 	bl	8004fb8 <LL_ADC_IsEnabled>
 8005144:	4604      	mov	r4, r0
 8005146:	4873      	ldr	r0, [pc, #460]	; (8005314 <HAL_ADC_Init+0x2e8>)
 8005148:	f7ff ff36 	bl	8004fb8 <LL_ADC_IsEnabled>
 800514c:	4603      	mov	r3, r0
 800514e:	4323      	orrs	r3, r4
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e008      	b.n	800516e <HAL_ADC_Init+0x142>
 800515c:	486e      	ldr	r0, [pc, #440]	; (8005318 <HAL_ADC_Init+0x2ec>)
 800515e:	f7ff ff2b 	bl	8004fb8 <LL_ADC_IsEnabled>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d012      	beq.n	8005198 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a66      	ldr	r2, [pc, #408]	; (8005310 <HAL_ADC_Init+0x2e4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d004      	beq.n	8005186 <HAL_ADC_Init+0x15a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a64      	ldr	r2, [pc, #400]	; (8005314 <HAL_ADC_Init+0x2e8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d101      	bne.n	800518a <HAL_ADC_Init+0x15e>
 8005186:	4a65      	ldr	r2, [pc, #404]	; (800531c <HAL_ADC_Init+0x2f0>)
 8005188:	e000      	b.n	800518c <HAL_ADC_Init+0x160>
 800518a:	4a65      	ldr	r2, [pc, #404]	; (8005320 <HAL_ADC_Init+0x2f4>)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f7ff fdbe 	bl	8004d14 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005198:	f7ff fd8c 	bl	8004cb4 <HAL_GetREVID>
 800519c:	4603      	mov	r3, r0
 800519e:	f241 0203 	movw	r2, #4099	; 0x1003
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d914      	bls.n	80051d0 <HAL_ADC_Init+0x1a4>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d110      	bne.n	80051d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7d5b      	ldrb	r3, [r3, #21]
 80051b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80051be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	7f1b      	ldrb	r3, [r3, #28]
 80051c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80051c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051c8:	f043 030c 	orr.w	r3, r3, #12
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	e00d      	b.n	80051ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	7d5b      	ldrb	r3, [r3, #21]
 80051d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80051e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	7f1b      	ldrb	r3, [r3, #28]
 80051e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	7f1b      	ldrb	r3, [r3, #28]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d106      	bne.n	8005202 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	045b      	lsls	r3, r3, #17
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	4b3f      	ldr	r3, [pc, #252]	; (8005324 <HAL_ADC_Init+0x2f8>)
 8005226:	4013      	ands	r3, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	430b      	orrs	r3, r1
 8005230:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff fed1 	bl	8004fde <LL_ADC_REG_IsConversionOngoing>
 800523c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fede 	bl	8005004 <LL_ADC_INJ_IsConversionOngoing>
 8005248:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d14a      	bne.n	80052e6 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d147      	bne.n	80052e6 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	7d1b      	ldrb	r3, [r3, #20]
 800525a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	4b2f      	ldr	r3, [pc, #188]	; (8005328 <HAL_ADC_Init+0x2fc>)
 800526c:	4013      	ands	r3, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	69b9      	ldr	r1, [r7, #24]
 8005274:	430b      	orrs	r3, r1
 8005276:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800527e:	2b01      	cmp	r3, #1
 8005280:	d11b      	bne.n	80052ba <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	4b27      	ldr	r3, [pc, #156]	; (800532c <HAL_ADC_Init+0x300>)
 8005290:	4013      	ands	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005296:	3a01      	subs	r2, #1
 8005298:	0411      	lsls	r1, r2, #16
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800529e:	4311      	orrs	r1, r2
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80052a4:	4311      	orrs	r1, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052aa:	430a      	orrs	r2, r1
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	611a      	str	r2, [r3, #16]
 80052b8:	e007      	b.n	80052ca <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fb93 	bl	8005a0c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d120      	bne.n	8005330 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	f023 010f 	bic.w	r1, r3, #15
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	1e5a      	subs	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
 8005306:	e01b      	b.n	8005340 <HAL_ADC_Init+0x314>
 8005308:	24000044 	.word	0x24000044
 800530c:	053e2d63 	.word	0x053e2d63
 8005310:	40022000 	.word	0x40022000
 8005314:	40022100 	.word	0x40022100
 8005318:	58026000 	.word	0x58026000
 800531c:	40022300 	.word	0x40022300
 8005320:	58026300 	.word	0x58026300
 8005324:	fff0c003 	.word	0xfff0c003
 8005328:	ffffbffc 	.word	0xffffbffc
 800532c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 020f 	bic.w	r2, r2, #15
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f023 0303 	bic.w	r3, r3, #3
 8005348:	f043 0201 	orr.w	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	655a      	str	r2, [r3, #84]	; 0x54
 8005350:	e007      	b.n	8005362 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f043 0210 	orr.w	r2, r3, #16
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005362:	7ffb      	ldrb	r3, [r7, #31]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3724      	adds	r7, #36	; 0x24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd90      	pop	{r4, r7, pc}

0800536c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b0a1      	sub	sp, #132	; 0x84
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a9d      	ldr	r2, [pc, #628]	; (80055fc <HAL_ADC_ConfigChannel+0x290>)
 8005386:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x2a>
 8005392:	2302      	movs	r3, #2
 8005394:	e321      	b.n	80059da <HAL_ADC_ConfigChannel+0x66e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fe1b 	bl	8004fde <LL_ADC_REG_IsConversionOngoing>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 8306 	bne.w	80059bc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d108      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x62>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	0e9b      	lsrs	r3, r3, #26
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	2201      	movs	r2, #1
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	e016      	b.n	80053fc <HAL_ADC_ConfigChannel+0x90>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053d6:	fa93 f3a3 	rbit	r3, r3
 80053da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80053e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80053e6:	2320      	movs	r3, #32
 80053e8:	e003      	b.n	80053f2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80053ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ec:	fab3 f383 	clz	r3, r3
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	2201      	movs	r2, #1
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	69d1      	ldr	r1, [r2, #28]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	430b      	orrs	r3, r1
 8005408:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6859      	ldr	r1, [r3, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f7ff fd04 	bl	8004e24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fddc 	bl	8004fde <LL_ADC_REG_IsConversionOngoing>
 8005426:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fde9 	bl	8005004 <LL_ADC_INJ_IsConversionOngoing>
 8005432:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 80b3 	bne.w	80055a2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800543c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800543e:	2b00      	cmp	r3, #0
 8005440:	f040 80af 	bne.w	80055a2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	6819      	ldr	r1, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	461a      	mov	r2, r3
 8005452:	f7ff fd13 	bl	8004e7c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005456:	4b6a      	ldr	r3, [pc, #424]	; (8005600 <HAL_ADC_ConfigChannel+0x294>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800545e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005462:	d10b      	bne.n	800547c <HAL_ADC_ConfigChannel+0x110>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	695a      	ldr	r2, [r3, #20]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	e01d      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x14c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10b      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x136>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	089b      	lsrs	r3, r3, #2
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	e00a      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x14c>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	089b      	lsrs	r3, r3, #2
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d027      	beq.n	8005512 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6919      	ldr	r1, [r3, #16]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054d0:	f7ff fc54 	bl	8004d7c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	6919      	ldr	r1, [r3, #16]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	7e5b      	ldrb	r3, [r3, #25]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d102      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x17e>
 80054e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054e8:	e000      	b.n	80054ec <HAL_ADC_ConfigChannel+0x180>
 80054ea:	2300      	movs	r3, #0
 80054ec:	461a      	mov	r2, r3
 80054ee:	f7ff fc7e 	bl	8004dee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6919      	ldr	r1, [r3, #16]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	7e1b      	ldrb	r3, [r3, #24]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d102      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x19c>
 8005502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005506:	e000      	b.n	800550a <HAL_ADC_ConfigChannel+0x19e>
 8005508:	2300      	movs	r3, #0
 800550a:	461a      	mov	r2, r3
 800550c:	f7ff fc56 	bl	8004dbc <LL_ADC_SetDataRightShift>
 8005510:	e047      	b.n	80055a2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005518:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	069b      	lsls	r3, r3, #26
 8005522:	429a      	cmp	r2, r3
 8005524:	d107      	bne.n	8005536 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005534:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	069b      	lsls	r3, r3, #26
 8005546:	429a      	cmp	r2, r3
 8005548:	d107      	bne.n	800555a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005558:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005560:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	069b      	lsls	r3, r3, #26
 800556a:	429a      	cmp	r2, r3
 800556c:	d107      	bne.n	800557e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800557c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	069b      	lsls	r3, r3, #26
 800558e:	429a      	cmp	r2, r3
 8005590:	d107      	bne.n	80055a2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80055a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fd06 	bl	8004fb8 <LL_ADC_IsEnabled>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f040 820d 	bne.w	80059ce <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	6819      	ldr	r1, [r3, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	461a      	mov	r2, r3
 80055c2:	f7ff fc87 	bl	8004ed4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	4a0c      	ldr	r2, [pc, #48]	; (80055fc <HAL_ADC_ConfigChannel+0x290>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	f040 8133 	bne.w	8005838 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d110      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x298>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	0e9b      	lsrs	r3, r3, #26
 80055e8:	3301      	adds	r3, #1
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2b09      	cmp	r3, #9
 80055f0:	bf94      	ite	ls
 80055f2:	2301      	movls	r3, #1
 80055f4:	2300      	movhi	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	e01e      	b.n	8005638 <HAL_ADC_ConfigChannel+0x2cc>
 80055fa:	bf00      	nop
 80055fc:	47ff0000 	.word	0x47ff0000
 8005600:	5c001000 	.word	0x5c001000
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005614:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800561c:	2320      	movs	r3, #32
 800561e:	e003      	b.n	8005628 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005622:	fab3 f383 	clz	r3, r3
 8005626:	b2db      	uxtb	r3, r3
 8005628:	3301      	adds	r3, #1
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	2b09      	cmp	r3, #9
 8005630:	bf94      	ite	ls
 8005632:	2301      	movls	r3, #1
 8005634:	2300      	movhi	r3, #0
 8005636:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005638:	2b00      	cmp	r3, #0
 800563a:	d079      	beq.n	8005730 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005644:	2b00      	cmp	r3, #0
 8005646:	d107      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x2ec>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	0e9b      	lsrs	r3, r3, #26
 800564e:	3301      	adds	r3, #1
 8005650:	069b      	lsls	r3, r3, #26
 8005652:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005656:	e015      	b.n	8005684 <HAL_ADC_ConfigChannel+0x318>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005668:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800566a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005670:	2320      	movs	r3, #32
 8005672:	e003      	b.n	800567c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005676:	fab3 f383 	clz	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	3301      	adds	r3, #1
 800567e:	069b      	lsls	r3, r3, #26
 8005680:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x338>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0e9b      	lsrs	r3, r3, #26
 8005696:	3301      	adds	r3, #1
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2101      	movs	r1, #1
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	e017      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x368>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ac:	fa93 f3a3 	rbit	r3, r3
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80056b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80056b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80056bc:	2320      	movs	r3, #32
 80056be:	e003      	b.n	80056c8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80056c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c2:	fab3 f383 	clz	r3, r3
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	3301      	adds	r3, #1
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2101      	movs	r1, #1
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	ea42 0103 	orr.w	r1, r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x38e>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	0e9b      	lsrs	r3, r3, #26
 80056ea:	3301      	adds	r3, #1
 80056ec:	f003 021f 	and.w	r2, r3, #31
 80056f0:	4613      	mov	r3, r2
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	4413      	add	r3, r2
 80056f6:	051b      	lsls	r3, r3, #20
 80056f8:	e018      	b.n	800572c <HAL_ADC_ConfigChannel+0x3c0>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005712:	2320      	movs	r3, #32
 8005714:	e003      	b.n	800571e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	fab3 f383 	clz	r3, r3
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3301      	adds	r3, #1
 8005720:	f003 021f 	and.w	r2, r3, #31
 8005724:	4613      	mov	r3, r2
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	4413      	add	r3, r2
 800572a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800572c:	430b      	orrs	r3, r1
 800572e:	e07e      	b.n	800582e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005738:	2b00      	cmp	r3, #0
 800573a:	d107      	bne.n	800574c <HAL_ADC_ConfigChannel+0x3e0>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	0e9b      	lsrs	r3, r3, #26
 8005742:	3301      	adds	r3, #1
 8005744:	069b      	lsls	r3, r3, #26
 8005746:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800574a:	e015      	b.n	8005778 <HAL_ADC_ConfigChannel+0x40c>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	fa93 f3a3 	rbit	r3, r3
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005764:	2320      	movs	r3, #32
 8005766:	e003      	b.n	8005770 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576a:	fab3 f383 	clz	r3, r3
 800576e:	b2db      	uxtb	r3, r3
 8005770:	3301      	adds	r3, #1
 8005772:	069b      	lsls	r3, r3, #26
 8005774:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005780:	2b00      	cmp	r3, #0
 8005782:	d109      	bne.n	8005798 <HAL_ADC_ConfigChannel+0x42c>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	0e9b      	lsrs	r3, r3, #26
 800578a:	3301      	adds	r3, #1
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	2101      	movs	r1, #1
 8005792:	fa01 f303 	lsl.w	r3, r1, r3
 8005796:	e017      	b.n	80057c8 <HAL_ADC_ConfigChannel+0x45c>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	fa93 f3a3 	rbit	r3, r3
 80057a4:	61bb      	str	r3, [r7, #24]
  return result;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80057b0:	2320      	movs	r3, #32
 80057b2:	e003      	b.n	80057bc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	fab3 f383 	clz	r3, r3
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	3301      	adds	r3, #1
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2101      	movs	r1, #1
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	ea42 0103 	orr.w	r1, r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10d      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x488>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	0e9b      	lsrs	r3, r3, #26
 80057de:	3301      	adds	r3, #1
 80057e0:	f003 021f 	and.w	r2, r3, #31
 80057e4:	4613      	mov	r3, r2
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	4413      	add	r3, r2
 80057ea:	3b1e      	subs	r3, #30
 80057ec:	051b      	lsls	r3, r3, #20
 80057ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057f2:	e01b      	b.n	800582c <HAL_ADC_ConfigChannel+0x4c0>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	fa93 f3a3 	rbit	r3, r3
 8005800:	60fb      	str	r3, [r7, #12]
  return result;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800580c:	2320      	movs	r3, #32
 800580e:	e003      	b.n	8005818 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	fab3 f383 	clz	r3, r3
 8005816:	b2db      	uxtb	r3, r3
 8005818:	3301      	adds	r3, #1
 800581a:	f003 021f 	and.w	r2, r3, #31
 800581e:	4613      	mov	r3, r2
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	4413      	add	r3, r2
 8005824:	3b1e      	subs	r3, #30
 8005826:	051b      	lsls	r3, r3, #20
 8005828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800582c:	430b      	orrs	r3, r1
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	6892      	ldr	r2, [r2, #8]
 8005832:	4619      	mov	r1, r3
 8005834:	f7ff fb22 	bl	8004e7c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f280 80c6 	bge.w	80059ce <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a67      	ldr	r2, [pc, #412]	; (80059e4 <HAL_ADC_ConfigChannel+0x678>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_ADC_ConfigChannel+0x4ea>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a65      	ldr	r2, [pc, #404]	; (80059e8 <HAL_ADC_ConfigChannel+0x67c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d101      	bne.n	800585a <HAL_ADC_ConfigChannel+0x4ee>
 8005856:	4b65      	ldr	r3, [pc, #404]	; (80059ec <HAL_ADC_ConfigChannel+0x680>)
 8005858:	e000      	b.n	800585c <HAL_ADC_ConfigChannel+0x4f0>
 800585a:	4b65      	ldr	r3, [pc, #404]	; (80059f0 <HAL_ADC_ConfigChannel+0x684>)
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff fa7f 	bl	8004d60 <LL_ADC_GetCommonPathInternalCh>
 8005862:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a5e      	ldr	r2, [pc, #376]	; (80059e4 <HAL_ADC_ConfigChannel+0x678>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_ADC_ConfigChannel+0x50c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a5d      	ldr	r2, [pc, #372]	; (80059e8 <HAL_ADC_ConfigChannel+0x67c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d10e      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x52a>
 8005878:	485a      	ldr	r0, [pc, #360]	; (80059e4 <HAL_ADC_ConfigChannel+0x678>)
 800587a:	f7ff fb9d 	bl	8004fb8 <LL_ADC_IsEnabled>
 800587e:	4604      	mov	r4, r0
 8005880:	4859      	ldr	r0, [pc, #356]	; (80059e8 <HAL_ADC_ConfigChannel+0x67c>)
 8005882:	f7ff fb99 	bl	8004fb8 <LL_ADC_IsEnabled>
 8005886:	4603      	mov	r3, r0
 8005888:	4323      	orrs	r3, r4
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf0c      	ite	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	2300      	movne	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	e008      	b.n	80058a8 <HAL_ADC_ConfigChannel+0x53c>
 8005896:	4857      	ldr	r0, [pc, #348]	; (80059f4 <HAL_ADC_ConfigChannel+0x688>)
 8005898:	f7ff fb8e 	bl	8004fb8 <LL_ADC_IsEnabled>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bf0c      	ite	eq
 80058a2:	2301      	moveq	r3, #1
 80058a4:	2300      	movne	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d07d      	beq.n	80059a8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a51      	ldr	r2, [pc, #324]	; (80059f8 <HAL_ADC_ConfigChannel+0x68c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d130      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x5ac>
 80058b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d12b      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a4b      	ldr	r2, [pc, #300]	; (80059f4 <HAL_ADC_ConfigChannel+0x688>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	f040 8081 	bne.w	80059ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a44      	ldr	r2, [pc, #272]	; (80059e4 <HAL_ADC_ConfigChannel+0x678>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_ADC_ConfigChannel+0x574>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a43      	ldr	r2, [pc, #268]	; (80059e8 <HAL_ADC_ConfigChannel+0x67c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d101      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x578>
 80058e0:	4a42      	ldr	r2, [pc, #264]	; (80059ec <HAL_ADC_ConfigChannel+0x680>)
 80058e2:	e000      	b.n	80058e6 <HAL_ADC_ConfigChannel+0x57a>
 80058e4:	4a42      	ldr	r2, [pc, #264]	; (80059f0 <HAL_ADC_ConfigChannel+0x684>)
 80058e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f7ff fa23 	bl	8004d3a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058f4:	4b41      	ldr	r3, [pc, #260]	; (80059fc <HAL_ADC_ConfigChannel+0x690>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	099b      	lsrs	r3, r3, #6
 80058fa:	4a41      	ldr	r2, [pc, #260]	; (8005a00 <HAL_ADC_ConfigChannel+0x694>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	099b      	lsrs	r3, r3, #6
 8005902:	3301      	adds	r3, #1
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005908:	e002      	b.n	8005910 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3b01      	subs	r3, #1
 800590e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f9      	bne.n	800590a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005916:	e05a      	b.n	80059ce <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a39      	ldr	r2, [pc, #228]	; (8005a04 <HAL_ADC_ConfigChannel+0x698>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d11e      	bne.n	8005960 <HAL_ADC_ConfigChannel+0x5f4>
 8005922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d119      	bne.n	8005960 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a30      	ldr	r2, [pc, #192]	; (80059f4 <HAL_ADC_ConfigChannel+0x688>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d14b      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2a      	ldr	r2, [pc, #168]	; (80059e4 <HAL_ADC_ConfigChannel+0x678>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_ADC_ConfigChannel+0x5de>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a28      	ldr	r2, [pc, #160]	; (80059e8 <HAL_ADC_ConfigChannel+0x67c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d101      	bne.n	800594e <HAL_ADC_ConfigChannel+0x5e2>
 800594a:	4a28      	ldr	r2, [pc, #160]	; (80059ec <HAL_ADC_ConfigChannel+0x680>)
 800594c:	e000      	b.n	8005950 <HAL_ADC_ConfigChannel+0x5e4>
 800594e:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <HAL_ADC_ConfigChannel+0x684>)
 8005950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f7ff f9ee 	bl	8004d3a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800595e:	e036      	b.n	80059ce <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a28      	ldr	r2, [pc, #160]	; (8005a08 <HAL_ADC_ConfigChannel+0x69c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d131      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x662>
 800596a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d12c      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <HAL_ADC_ConfigChannel+0x688>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d127      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a18      	ldr	r2, [pc, #96]	; (80059e4 <HAL_ADC_ConfigChannel+0x678>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_ADC_ConfigChannel+0x626>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <HAL_ADC_ConfigChannel+0x67c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d101      	bne.n	8005996 <HAL_ADC_ConfigChannel+0x62a>
 8005992:	4a16      	ldr	r2, [pc, #88]	; (80059ec <HAL_ADC_ConfigChannel+0x680>)
 8005994:	e000      	b.n	8005998 <HAL_ADC_ConfigChannel+0x62c>
 8005996:	4a16      	ldr	r2, [pc, #88]	; (80059f0 <HAL_ADC_ConfigChannel+0x684>)
 8005998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f7ff f9ca 	bl	8004d3a <LL_ADC_SetCommonPathInternalCh>
 80059a6:	e012      	b.n	80059ce <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80059ba:	e008      	b.n	80059ce <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80059d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3784      	adds	r7, #132	; 0x84
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd90      	pop	{r4, r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40022000 	.word	0x40022000
 80059e8:	40022100 	.word	0x40022100
 80059ec:	40022300 	.word	0x40022300
 80059f0:	58026300 	.word	0x58026300
 80059f4:	58026000 	.word	0x58026000
 80059f8:	cb840000 	.word	0xcb840000
 80059fc:	24000044 	.word	0x24000044
 8005a00:	053e2d63 	.word	0x053e2d63
 8005a04:	c7520000 	.word	0xc7520000
 8005a08:	cfb80000 	.word	0xcfb80000

08005a0c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a79      	ldr	r2, [pc, #484]	; (8005c00 <ADC_ConfigureBoostMode+0x1f4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d004      	beq.n	8005a28 <ADC_ConfigureBoostMode+0x1c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a78      	ldr	r2, [pc, #480]	; (8005c04 <ADC_ConfigureBoostMode+0x1f8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d109      	bne.n	8005a3c <ADC_ConfigureBoostMode+0x30>
 8005a28:	4b77      	ldr	r3, [pc, #476]	; (8005c08 <ADC_ConfigureBoostMode+0x1fc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e008      	b.n	8005a4e <ADC_ConfigureBoostMode+0x42>
 8005a3c:	4b73      	ldr	r3, [pc, #460]	; (8005c0c <ADC_ConfigureBoostMode+0x200>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bf14      	ite	ne
 8005a48:	2301      	movne	r3, #1
 8005a4a:	2300      	moveq	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d01c      	beq.n	8005a8c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005a52:	f003 fced 	bl	8009430 <HAL_RCC_GetHCLKFreq>
 8005a56:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a60:	d010      	beq.n	8005a84 <ADC_ConfigureBoostMode+0x78>
 8005a62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a66:	d871      	bhi.n	8005b4c <ADC_ConfigureBoostMode+0x140>
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d002      	beq.n	8005a74 <ADC_ConfigureBoostMode+0x68>
 8005a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a72:	d16b      	bne.n	8005b4c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	60fb      	str	r3, [r7, #12]
        break;
 8005a82:	e066      	b.n	8005b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	089b      	lsrs	r3, r3, #2
 8005a88:	60fb      	str	r3, [r7, #12]
        break;
 8005a8a:	e062      	b.n	8005b52 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005a8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005a90:	f004 fcac 	bl	800a3ec <HAL_RCCEx_GetPeriphCLKFreq>
 8005a94:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005a9e:	d051      	beq.n	8005b44 <ADC_ConfigureBoostMode+0x138>
 8005aa0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005aa4:	d854      	bhi.n	8005b50 <ADC_ConfigureBoostMode+0x144>
 8005aa6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005aaa:	d047      	beq.n	8005b3c <ADC_ConfigureBoostMode+0x130>
 8005aac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005ab0:	d84e      	bhi.n	8005b50 <ADC_ConfigureBoostMode+0x144>
 8005ab2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005ab6:	d03d      	beq.n	8005b34 <ADC_ConfigureBoostMode+0x128>
 8005ab8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005abc:	d848      	bhi.n	8005b50 <ADC_ConfigureBoostMode+0x144>
 8005abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ac2:	d033      	beq.n	8005b2c <ADC_ConfigureBoostMode+0x120>
 8005ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ac8:	d842      	bhi.n	8005b50 <ADC_ConfigureBoostMode+0x144>
 8005aca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005ace:	d029      	beq.n	8005b24 <ADC_ConfigureBoostMode+0x118>
 8005ad0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005ad4:	d83c      	bhi.n	8005b50 <ADC_ConfigureBoostMode+0x144>
 8005ad6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ada:	d01a      	beq.n	8005b12 <ADC_ConfigureBoostMode+0x106>
 8005adc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ae0:	d836      	bhi.n	8005b50 <ADC_ConfigureBoostMode+0x144>
 8005ae2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005ae6:	d014      	beq.n	8005b12 <ADC_ConfigureBoostMode+0x106>
 8005ae8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005aec:	d830      	bhi.n	8005b50 <ADC_ConfigureBoostMode+0x144>
 8005aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af2:	d00e      	beq.n	8005b12 <ADC_ConfigureBoostMode+0x106>
 8005af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af8:	d82a      	bhi.n	8005b50 <ADC_ConfigureBoostMode+0x144>
 8005afa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005afe:	d008      	beq.n	8005b12 <ADC_ConfigureBoostMode+0x106>
 8005b00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b04:	d824      	bhi.n	8005b50 <ADC_ConfigureBoostMode+0x144>
 8005b06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b0a:	d002      	beq.n	8005b12 <ADC_ConfigureBoostMode+0x106>
 8005b0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b10:	d11e      	bne.n	8005b50 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	0c9b      	lsrs	r3, r3, #18
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	60fb      	str	r3, [r7, #12]
        break;
 8005b22:	e016      	b.n	8005b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	091b      	lsrs	r3, r3, #4
 8005b28:	60fb      	str	r3, [r7, #12]
        break;
 8005b2a:	e012      	b.n	8005b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	60fb      	str	r3, [r7, #12]
        break;
 8005b32:	e00e      	b.n	8005b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	099b      	lsrs	r3, r3, #6
 8005b38:	60fb      	str	r3, [r7, #12]
        break;
 8005b3a:	e00a      	b.n	8005b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	09db      	lsrs	r3, r3, #7
 8005b40:	60fb      	str	r3, [r7, #12]
        break;
 8005b42:	e006      	b.n	8005b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	0a1b      	lsrs	r3, r3, #8
 8005b48:	60fb      	str	r3, [r7, #12]
        break;
 8005b4a:	e002      	b.n	8005b52 <ADC_ConfigureBoostMode+0x146>
        break;
 8005b4c:	bf00      	nop
 8005b4e:	e000      	b.n	8005b52 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005b50:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005b52:	f7ff f8af 	bl	8004cb4 <HAL_GetREVID>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d815      	bhi.n	8005b8c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a2b      	ldr	r2, [pc, #172]	; (8005c10 <ADC_ConfigureBoostMode+0x204>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d908      	bls.n	8005b7a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b76:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005b78:	e03e      	b.n	8005bf8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b88:	609a      	str	r2, [r3, #8]
}
 8005b8a:	e035      	b.n	8005bf8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <ADC_ConfigureBoostMode+0x208>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d808      	bhi.n	8005bac <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ba8:	609a      	str	r2, [r3, #8]
}
 8005baa:	e025      	b.n	8005bf8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <ADC_ConfigureBoostMode+0x20c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d80a      	bhi.n	8005bca <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc6:	609a      	str	r2, [r3, #8]
}
 8005bc8:	e016      	b.n	8005bf8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a13      	ldr	r2, [pc, #76]	; (8005c1c <ADC_ConfigureBoostMode+0x210>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d80a      	bhi.n	8005be8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be4:	609a      	str	r2, [r3, #8]
}
 8005be6:	e007      	b.n	8005bf8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005bf6:	609a      	str	r2, [r3, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40022000 	.word	0x40022000
 8005c04:	40022100 	.word	0x40022100
 8005c08:	40022300 	.word	0x40022300
 8005c0c:	58026300 	.word	0x58026300
 8005c10:	01312d00 	.word	0x01312d00
 8005c14:	005f5e10 	.word	0x005f5e10
 8005c18:	00bebc20 	.word	0x00bebc20
 8005c1c:	017d7840 	.word	0x017d7840

08005c20 <LL_ADC_IsEnabled>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <LL_ADC_IsEnabled+0x18>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <LL_ADC_IsEnabled+0x1a>
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <LL_ADC_REG_IsConversionOngoing>:
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d101      	bne.n	8005c5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005c6c:	b590      	push	{r4, r7, lr}
 8005c6e:	b09f      	sub	sp, #124	; 0x7c
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e0be      	b.n	8005e08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005c92:	2300      	movs	r3, #0
 8005c94:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a5c      	ldr	r2, [pc, #368]	; (8005e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d102      	bne.n	8005caa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ca4:	4b5b      	ldr	r3, [pc, #364]	; (8005e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	e001      	b.n	8005cae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10b      	bne.n	8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e09d      	b.n	8005e08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff ffb9 	bl	8005c46 <LL_ADC_REG_IsConversionOngoing>
 8005cd4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff ffb3 	bl	8005c46 <LL_ADC_REG_IsConversionOngoing>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d17f      	bne.n	8005de6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d17c      	bne.n	8005de6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a47      	ldr	r2, [pc, #284]	; (8005e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a46      	ldr	r2, [pc, #280]	; (8005e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d101      	bne.n	8005d04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005d00:	4b45      	ldr	r3, [pc, #276]	; (8005e18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005d02:	e000      	b.n	8005d06 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005d04:	4b45      	ldr	r3, [pc, #276]	; (8005e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005d06:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d039      	beq.n	8005d84 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d20:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a3a      	ldr	r2, [pc, #232]	; (8005e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a38      	ldr	r2, [pc, #224]	; (8005e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d10e      	bne.n	8005d54 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005d36:	4836      	ldr	r0, [pc, #216]	; (8005e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005d38:	f7ff ff72 	bl	8005c20 <LL_ADC_IsEnabled>
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	4835      	ldr	r0, [pc, #212]	; (8005e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005d40:	f7ff ff6e 	bl	8005c20 <LL_ADC_IsEnabled>
 8005d44:	4603      	mov	r3, r0
 8005d46:	4323      	orrs	r3, r4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bf0c      	ite	eq
 8005d4c:	2301      	moveq	r3, #1
 8005d4e:	2300      	movne	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e008      	b.n	8005d66 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005d54:	4832      	ldr	r0, [pc, #200]	; (8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005d56:	f7ff ff63 	bl	8005c20 <LL_ADC_IsEnabled>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d047      	beq.n	8005dfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	6811      	ldr	r1, [r2, #0]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	6892      	ldr	r2, [r2, #8]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d80:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d82:	e03a      	b.n	8005dfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d10e      	bne.n	8005dc2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005da4:	481a      	ldr	r0, [pc, #104]	; (8005e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005da6:	f7ff ff3b 	bl	8005c20 <LL_ADC_IsEnabled>
 8005daa:	4604      	mov	r4, r0
 8005dac:	4819      	ldr	r0, [pc, #100]	; (8005e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005dae:	f7ff ff37 	bl	8005c20 <LL_ADC_IsEnabled>
 8005db2:	4603      	mov	r3, r0
 8005db4:	4323      	orrs	r3, r4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bf0c      	ite	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	2300      	movne	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	e008      	b.n	8005dd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005dc2:	4817      	ldr	r0, [pc, #92]	; (8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005dc4:	f7ff ff2c 	bl	8005c20 <LL_ADC_IsEnabled>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	bf0c      	ite	eq
 8005dce:	2301      	moveq	r3, #1
 8005dd0:	2300      	movne	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d010      	beq.n	8005dfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005de2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005de4:	e009      	b.n	8005dfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005df8:	e000      	b.n	8005dfc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005dfa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005e04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	377c      	adds	r7, #124	; 0x7c
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd90      	pop	{r4, r7, pc}
 8005e10:	40022000 	.word	0x40022000
 8005e14:	40022100 	.word	0x40022100
 8005e18:	40022300 	.word	0x40022300
 8005e1c:	58026300 	.word	0x58026300
 8005e20:	58026000 	.word	0x58026000
 8005e24:	fffff0e0 	.word	0xfffff0e0

08005e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <__NVIC_SetPriorityGrouping+0x40>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e44:	4013      	ands	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <__NVIC_SetPriorityGrouping+0x44>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e56:	4a04      	ldr	r2, [pc, #16]	; (8005e68 <__NVIC_SetPriorityGrouping+0x40>)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	60d3      	str	r3, [r2, #12]
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	e000ed00 	.word	0xe000ed00
 8005e6c:	05fa0000 	.word	0x05fa0000

08005e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e74:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <__NVIC_GetPriorityGrouping+0x18>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	f003 0307 	and.w	r3, r3, #7
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	db0b      	blt.n	8005eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	f003 021f 	and.w	r2, r3, #31
 8005ea4:	4907      	ldr	r1, [pc, #28]	; (8005ec4 <__NVIC_EnableIRQ+0x38>)
 8005ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	2001      	movs	r0, #1
 8005eae:	fa00 f202 	lsl.w	r2, r0, r2
 8005eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	e000e100 	.word	0xe000e100

08005ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	6039      	str	r1, [r7, #0]
 8005ed2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	db0a      	blt.n	8005ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	490c      	ldr	r1, [pc, #48]	; (8005f14 <__NVIC_SetPriority+0x4c>)
 8005ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ee6:	0112      	lsls	r2, r2, #4
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	440b      	add	r3, r1
 8005eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ef0:	e00a      	b.n	8005f08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	4908      	ldr	r1, [pc, #32]	; (8005f18 <__NVIC_SetPriority+0x50>)
 8005ef8:	88fb      	ldrh	r3, [r7, #6]
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	3b04      	subs	r3, #4
 8005f00:	0112      	lsls	r2, r2, #4
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	440b      	add	r3, r1
 8005f06:	761a      	strb	r2, [r3, #24]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	e000e100 	.word	0xe000e100
 8005f18:	e000ed00 	.word	0xe000ed00

08005f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b089      	sub	sp, #36	; 0x24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f1c3 0307 	rsb	r3, r3, #7
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	bf28      	it	cs
 8005f3a:	2304      	movcs	r3, #4
 8005f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	3304      	adds	r3, #4
 8005f42:	2b06      	cmp	r3, #6
 8005f44:	d902      	bls.n	8005f4c <NVIC_EncodePriority+0x30>
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3b03      	subs	r3, #3
 8005f4a:	e000      	b.n	8005f4e <NVIC_EncodePriority+0x32>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43da      	mvns	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	401a      	ands	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f64:	f04f 31ff 	mov.w	r1, #4294967295
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	43d9      	mvns	r1, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f74:	4313      	orrs	r3, r2
         );
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3724      	adds	r7, #36	; 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ff4c 	bl	8005e28 <__NVIC_SetPriorityGrouping>
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005fa6:	f7ff ff63 	bl	8005e70 <__NVIC_GetPriorityGrouping>
 8005faa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	6978      	ldr	r0, [r7, #20]
 8005fb2:	f7ff ffb3 	bl	8005f1c <NVIC_EncodePriority>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff ff82 	bl	8005ec8 <__NVIC_SetPriority>
}
 8005fc4:	bf00      	nop
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff ff56 	bl	8005e8c <__NVIC_EnableIRQ>
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e014      	b.n	8006024 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	791b      	ldrb	r3, [r3, #4]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d105      	bne.n	8006010 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fa fdbc 	bl	8000b88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	795b      	ldrb	r3, [r3, #5]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_DAC_ConfigChannel+0x18>
 8006040:	2302      	movs	r3, #2
 8006042:	e11d      	b.n	8006280 <HAL_DAC_ConfigChannel+0x254>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2202      	movs	r2, #2
 800604e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b04      	cmp	r3, #4
 8006056:	d174      	bne.n	8006142 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006058:	f7fe fdfc 	bl	8004c54 <HAL_GetTick>
 800605c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d134      	bne.n	80060ce <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006064:	e011      	b.n	800608a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006066:	f7fe fdf5 	bl	8004c54 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d90a      	bls.n	800608a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f043 0208 	orr.w	r2, r3, #8
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2203      	movs	r2, #3
 8006084:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e0fa      	b.n	8006280 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006090:	4b7d      	ldr	r3, [pc, #500]	; (8006288 <HAL_DAC_ConfigChannel+0x25c>)
 8006092:	4013      	ands	r3, r2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e6      	bne.n	8006066 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8006098:	2001      	movs	r0, #1
 800609a:	f7fe fde7 	bl	8004c6c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	6992      	ldr	r2, [r2, #24]
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40
 80060a8:	e01e      	b.n	80060e8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80060aa:	f7fe fdd3 	bl	8004c54 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d90a      	bls.n	80060ce <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f043 0208 	orr.w	r2, r3, #8
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2203      	movs	r2, #3
 80060c8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e0d8      	b.n	8006280 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	dbe8      	blt.n	80060aa <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80060d8:	2001      	movs	r0, #1
 80060da:	f7fe fdc7 	bl	8004c6c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	6992      	ldr	r2, [r2, #24]
 80060e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80060f8:	fa01 f303 	lsl.w	r3, r1, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	ea02 0103 	and.w	r1, r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	409a      	lsls	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f003 0310 	and.w	r3, r3, #16
 8006122:	21ff      	movs	r1, #255	; 0xff
 8006124:	fa01 f303 	lsl.w	r3, r1, r3
 8006128:	43db      	mvns	r3, r3
 800612a:	ea02 0103 	and.w	r1, r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	6a1a      	ldr	r2, [r3, #32]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	409a      	lsls	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d11d      	bne.n	8006186 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	221f      	movs	r2, #31
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43db      	mvns	r3, r3
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4013      	ands	r3, r2
 8006164:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f003 0310 	and.w	r3, r3, #16
 8006194:	2207      	movs	r2, #7
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43db      	mvns	r3, r3
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4013      	ands	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d102      	bne.n	80061b0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	e00f      	b.n	80061d0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d102      	bne.n	80061be <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80061b8:	2301      	movs	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	e008      	b.n	80061d0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80061c6:	2301      	movs	r3, #1
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	e001      	b.n	80061d0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4313      	orrs	r3, r2
 80061da:	69fa      	ldr	r2, [r7, #28]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f003 0310 	and.w	r3, r3, #16
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800620a:	fa02 f303 	lsl.w	r3, r2, r3
 800620e:	43da      	mvns	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	400a      	ands	r2, r1
 8006216:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f003 0310 	and.w	r3, r3, #16
 8006226:	f640 72fe 	movw	r2, #4094	; 0xffe
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4013      	ands	r3, r2
 8006234:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f003 0310 	and.w	r3, r3, #16
 8006262:	22c0      	movs	r2, #192	; 0xc0
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	43da      	mvns	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	400a      	ands	r2, r1
 8006270:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3720      	adds	r7, #32
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20008000 	.word	0x20008000

0800628c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006294:	f7fe fcde 	bl	8004c54 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e2dc      	b.n	800685e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d008      	beq.n	80062c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2280      	movs	r2, #128	; 0x80
 80062b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e2cd      	b.n	800685e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a76      	ldr	r2, [pc, #472]	; (80064a0 <HAL_DMA_Abort+0x214>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d04a      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a74      	ldr	r2, [pc, #464]	; (80064a4 <HAL_DMA_Abort+0x218>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d045      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a73      	ldr	r2, [pc, #460]	; (80064a8 <HAL_DMA_Abort+0x21c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d040      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a71      	ldr	r2, [pc, #452]	; (80064ac <HAL_DMA_Abort+0x220>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d03b      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a70      	ldr	r2, [pc, #448]	; (80064b0 <HAL_DMA_Abort+0x224>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d036      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a6e      	ldr	r2, [pc, #440]	; (80064b4 <HAL_DMA_Abort+0x228>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d031      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a6d      	ldr	r2, [pc, #436]	; (80064b8 <HAL_DMA_Abort+0x22c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d02c      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a6b      	ldr	r2, [pc, #428]	; (80064bc <HAL_DMA_Abort+0x230>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d027      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a6a      	ldr	r2, [pc, #424]	; (80064c0 <HAL_DMA_Abort+0x234>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d022      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a68      	ldr	r2, [pc, #416]	; (80064c4 <HAL_DMA_Abort+0x238>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01d      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a67      	ldr	r2, [pc, #412]	; (80064c8 <HAL_DMA_Abort+0x23c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d018      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a65      	ldr	r2, [pc, #404]	; (80064cc <HAL_DMA_Abort+0x240>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d013      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a64      	ldr	r2, [pc, #400]	; (80064d0 <HAL_DMA_Abort+0x244>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a62      	ldr	r2, [pc, #392]	; (80064d4 <HAL_DMA_Abort+0x248>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a61      	ldr	r2, [pc, #388]	; (80064d8 <HAL_DMA_Abort+0x24c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_DMA_Abort+0xd6>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a5f      	ldr	r2, [pc, #380]	; (80064dc <HAL_DMA_Abort+0x250>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d101      	bne.n	8006366 <HAL_DMA_Abort+0xda>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <HAL_DMA_Abort+0xdc>
 8006366:	2300      	movs	r3, #0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d013      	beq.n	8006394 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 021e 	bic.w	r2, r2, #30
 800637a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695a      	ldr	r2, [r3, #20]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800638a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e00a      	b.n	80063aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 020e 	bic.w	r2, r2, #14
 80063a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a3c      	ldr	r2, [pc, #240]	; (80064a0 <HAL_DMA_Abort+0x214>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d072      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a3a      	ldr	r2, [pc, #232]	; (80064a4 <HAL_DMA_Abort+0x218>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d06d      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a39      	ldr	r2, [pc, #228]	; (80064a8 <HAL_DMA_Abort+0x21c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d068      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a37      	ldr	r2, [pc, #220]	; (80064ac <HAL_DMA_Abort+0x220>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d063      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a36      	ldr	r2, [pc, #216]	; (80064b0 <HAL_DMA_Abort+0x224>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d05e      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a34      	ldr	r2, [pc, #208]	; (80064b4 <HAL_DMA_Abort+0x228>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d059      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a33      	ldr	r2, [pc, #204]	; (80064b8 <HAL_DMA_Abort+0x22c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d054      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a31      	ldr	r2, [pc, #196]	; (80064bc <HAL_DMA_Abort+0x230>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d04f      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a30      	ldr	r2, [pc, #192]	; (80064c0 <HAL_DMA_Abort+0x234>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d04a      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a2e      	ldr	r2, [pc, #184]	; (80064c4 <HAL_DMA_Abort+0x238>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d045      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a2d      	ldr	r2, [pc, #180]	; (80064c8 <HAL_DMA_Abort+0x23c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d040      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a2b      	ldr	r2, [pc, #172]	; (80064cc <HAL_DMA_Abort+0x240>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d03b      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <HAL_DMA_Abort+0x244>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d036      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a28      	ldr	r2, [pc, #160]	; (80064d4 <HAL_DMA_Abort+0x248>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d031      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a27      	ldr	r2, [pc, #156]	; (80064d8 <HAL_DMA_Abort+0x24c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d02c      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a25      	ldr	r2, [pc, #148]	; (80064dc <HAL_DMA_Abort+0x250>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d027      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a24      	ldr	r2, [pc, #144]	; (80064e0 <HAL_DMA_Abort+0x254>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a22      	ldr	r2, [pc, #136]	; (80064e4 <HAL_DMA_Abort+0x258>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01d      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a21      	ldr	r2, [pc, #132]	; (80064e8 <HAL_DMA_Abort+0x25c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1f      	ldr	r2, [pc, #124]	; (80064ec <HAL_DMA_Abort+0x260>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1e      	ldr	r2, [pc, #120]	; (80064f0 <HAL_DMA_Abort+0x264>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <HAL_DMA_Abort+0x268>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_DMA_Abort+0x26c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_DMA_Abort+0x20e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a19      	ldr	r2, [pc, #100]	; (80064fc <HAL_DMA_Abort+0x270>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d132      	bne.n	8006500 <HAL_DMA_Abort+0x274>
 800649a:	2301      	movs	r3, #1
 800649c:	e031      	b.n	8006502 <HAL_DMA_Abort+0x276>
 800649e:	bf00      	nop
 80064a0:	40020010 	.word	0x40020010
 80064a4:	40020028 	.word	0x40020028
 80064a8:	40020040 	.word	0x40020040
 80064ac:	40020058 	.word	0x40020058
 80064b0:	40020070 	.word	0x40020070
 80064b4:	40020088 	.word	0x40020088
 80064b8:	400200a0 	.word	0x400200a0
 80064bc:	400200b8 	.word	0x400200b8
 80064c0:	40020410 	.word	0x40020410
 80064c4:	40020428 	.word	0x40020428
 80064c8:	40020440 	.word	0x40020440
 80064cc:	40020458 	.word	0x40020458
 80064d0:	40020470 	.word	0x40020470
 80064d4:	40020488 	.word	0x40020488
 80064d8:	400204a0 	.word	0x400204a0
 80064dc:	400204b8 	.word	0x400204b8
 80064e0:	58025408 	.word	0x58025408
 80064e4:	5802541c 	.word	0x5802541c
 80064e8:	58025430 	.word	0x58025430
 80064ec:	58025444 	.word	0x58025444
 80064f0:	58025458 	.word	0x58025458
 80064f4:	5802546c 	.word	0x5802546c
 80064f8:	58025480 	.word	0x58025480
 80064fc:	58025494 	.word	0x58025494
 8006500:	2300      	movs	r3, #0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006514:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a6d      	ldr	r2, [pc, #436]	; (80066d0 <HAL_DMA_Abort+0x444>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d04a      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a6b      	ldr	r2, [pc, #428]	; (80066d4 <HAL_DMA_Abort+0x448>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d045      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a6a      	ldr	r2, [pc, #424]	; (80066d8 <HAL_DMA_Abort+0x44c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d040      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a68      	ldr	r2, [pc, #416]	; (80066dc <HAL_DMA_Abort+0x450>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d03b      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a67      	ldr	r2, [pc, #412]	; (80066e0 <HAL_DMA_Abort+0x454>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d036      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a65      	ldr	r2, [pc, #404]	; (80066e4 <HAL_DMA_Abort+0x458>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d031      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a64      	ldr	r2, [pc, #400]	; (80066e8 <HAL_DMA_Abort+0x45c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d02c      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a62      	ldr	r2, [pc, #392]	; (80066ec <HAL_DMA_Abort+0x460>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d027      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a61      	ldr	r2, [pc, #388]	; (80066f0 <HAL_DMA_Abort+0x464>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d022      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a5f      	ldr	r2, [pc, #380]	; (80066f4 <HAL_DMA_Abort+0x468>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d01d      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a5e      	ldr	r2, [pc, #376]	; (80066f8 <HAL_DMA_Abort+0x46c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d018      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a5c      	ldr	r2, [pc, #368]	; (80066fc <HAL_DMA_Abort+0x470>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a5b      	ldr	r2, [pc, #364]	; (8006700 <HAL_DMA_Abort+0x474>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d00e      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a59      	ldr	r2, [pc, #356]	; (8006704 <HAL_DMA_Abort+0x478>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d009      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a58      	ldr	r2, [pc, #352]	; (8006708 <HAL_DMA_Abort+0x47c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d004      	beq.n	80065b6 <HAL_DMA_Abort+0x32a>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a56      	ldr	r2, [pc, #344]	; (800670c <HAL_DMA_Abort+0x480>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d108      	bne.n	80065c8 <HAL_DMA_Abort+0x33c>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0201 	bic.w	r2, r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	e007      	b.n	80065d8 <HAL_DMA_Abort+0x34c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80065d8:	e013      	b.n	8006602 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065da:	f7fe fb3b 	bl	8004c54 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b05      	cmp	r3, #5
 80065e6:	d90c      	bls.n	8006602 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2203      	movs	r2, #3
 80065fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e12d      	b.n	800685e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2f      	ldr	r2, [pc, #188]	; (80066d0 <HAL_DMA_Abort+0x444>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d04a      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a2d      	ldr	r2, [pc, #180]	; (80066d4 <HAL_DMA_Abort+0x448>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d045      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a2c      	ldr	r2, [pc, #176]	; (80066d8 <HAL_DMA_Abort+0x44c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d040      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a2a      	ldr	r2, [pc, #168]	; (80066dc <HAL_DMA_Abort+0x450>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d03b      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a29      	ldr	r2, [pc, #164]	; (80066e0 <HAL_DMA_Abort+0x454>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d036      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a27      	ldr	r2, [pc, #156]	; (80066e4 <HAL_DMA_Abort+0x458>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d031      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a26      	ldr	r2, [pc, #152]	; (80066e8 <HAL_DMA_Abort+0x45c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d02c      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a24      	ldr	r2, [pc, #144]	; (80066ec <HAL_DMA_Abort+0x460>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d027      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a23      	ldr	r2, [pc, #140]	; (80066f0 <HAL_DMA_Abort+0x464>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d022      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a21      	ldr	r2, [pc, #132]	; (80066f4 <HAL_DMA_Abort+0x468>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d01d      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a20      	ldr	r2, [pc, #128]	; (80066f8 <HAL_DMA_Abort+0x46c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d018      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1e      	ldr	r2, [pc, #120]	; (80066fc <HAL_DMA_Abort+0x470>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <HAL_DMA_Abort+0x474>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00e      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1b      	ldr	r2, [pc, #108]	; (8006704 <HAL_DMA_Abort+0x478>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d009      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1a      	ldr	r2, [pc, #104]	; (8006708 <HAL_DMA_Abort+0x47c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <HAL_DMA_Abort+0x422>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a18      	ldr	r2, [pc, #96]	; (800670c <HAL_DMA_Abort+0x480>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d101      	bne.n	80066b2 <HAL_DMA_Abort+0x426>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <HAL_DMA_Abort+0x428>
 80066b2:	2300      	movs	r3, #0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d02b      	beq.n	8006710 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066bc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	223f      	movs	r2, #63	; 0x3f
 80066c8:	409a      	lsls	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	609a      	str	r2, [r3, #8]
 80066ce:	e02a      	b.n	8006726 <HAL_DMA_Abort+0x49a>
 80066d0:	40020010 	.word	0x40020010
 80066d4:	40020028 	.word	0x40020028
 80066d8:	40020040 	.word	0x40020040
 80066dc:	40020058 	.word	0x40020058
 80066e0:	40020070 	.word	0x40020070
 80066e4:	40020088 	.word	0x40020088
 80066e8:	400200a0 	.word	0x400200a0
 80066ec:	400200b8 	.word	0x400200b8
 80066f0:	40020410 	.word	0x40020410
 80066f4:	40020428 	.word	0x40020428
 80066f8:	40020440 	.word	0x40020440
 80066fc:	40020458 	.word	0x40020458
 8006700:	40020470 	.word	0x40020470
 8006704:	40020488 	.word	0x40020488
 8006708:	400204a0 	.word	0x400204a0
 800670c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006714:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	2201      	movs	r2, #1
 8006720:	409a      	lsls	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a4f      	ldr	r2, [pc, #316]	; (8006868 <HAL_DMA_Abort+0x5dc>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d072      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a4d      	ldr	r2, [pc, #308]	; (800686c <HAL_DMA_Abort+0x5e0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d06d      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a4c      	ldr	r2, [pc, #304]	; (8006870 <HAL_DMA_Abort+0x5e4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d068      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a4a      	ldr	r2, [pc, #296]	; (8006874 <HAL_DMA_Abort+0x5e8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d063      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a49      	ldr	r2, [pc, #292]	; (8006878 <HAL_DMA_Abort+0x5ec>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d05e      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a47      	ldr	r2, [pc, #284]	; (800687c <HAL_DMA_Abort+0x5f0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d059      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a46      	ldr	r2, [pc, #280]	; (8006880 <HAL_DMA_Abort+0x5f4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d054      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a44      	ldr	r2, [pc, #272]	; (8006884 <HAL_DMA_Abort+0x5f8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d04f      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a43      	ldr	r2, [pc, #268]	; (8006888 <HAL_DMA_Abort+0x5fc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d04a      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a41      	ldr	r2, [pc, #260]	; (800688c <HAL_DMA_Abort+0x600>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d045      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a40      	ldr	r2, [pc, #256]	; (8006890 <HAL_DMA_Abort+0x604>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d040      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a3e      	ldr	r2, [pc, #248]	; (8006894 <HAL_DMA_Abort+0x608>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d03b      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a3d      	ldr	r2, [pc, #244]	; (8006898 <HAL_DMA_Abort+0x60c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d036      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a3b      	ldr	r2, [pc, #236]	; (800689c <HAL_DMA_Abort+0x610>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d031      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a3a      	ldr	r2, [pc, #232]	; (80068a0 <HAL_DMA_Abort+0x614>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d02c      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a38      	ldr	r2, [pc, #224]	; (80068a4 <HAL_DMA_Abort+0x618>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d027      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a37      	ldr	r2, [pc, #220]	; (80068a8 <HAL_DMA_Abort+0x61c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d022      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a35      	ldr	r2, [pc, #212]	; (80068ac <HAL_DMA_Abort+0x620>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d01d      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a34      	ldr	r2, [pc, #208]	; (80068b0 <HAL_DMA_Abort+0x624>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d018      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a32      	ldr	r2, [pc, #200]	; (80068b4 <HAL_DMA_Abort+0x628>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d013      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a31      	ldr	r2, [pc, #196]	; (80068b8 <HAL_DMA_Abort+0x62c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00e      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2f      	ldr	r2, [pc, #188]	; (80068bc <HAL_DMA_Abort+0x630>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d009      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2e      	ldr	r2, [pc, #184]	; (80068c0 <HAL_DMA_Abort+0x634>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d004      	beq.n	8006816 <HAL_DMA_Abort+0x58a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a2c      	ldr	r2, [pc, #176]	; (80068c4 <HAL_DMA_Abort+0x638>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d101      	bne.n	800681a <HAL_DMA_Abort+0x58e>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <HAL_DMA_Abort+0x590>
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d015      	beq.n	800684c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006828:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00c      	beq.n	800684c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006840:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800684a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40020010 	.word	0x40020010
 800686c:	40020028 	.word	0x40020028
 8006870:	40020040 	.word	0x40020040
 8006874:	40020058 	.word	0x40020058
 8006878:	40020070 	.word	0x40020070
 800687c:	40020088 	.word	0x40020088
 8006880:	400200a0 	.word	0x400200a0
 8006884:	400200b8 	.word	0x400200b8
 8006888:	40020410 	.word	0x40020410
 800688c:	40020428 	.word	0x40020428
 8006890:	40020440 	.word	0x40020440
 8006894:	40020458 	.word	0x40020458
 8006898:	40020470 	.word	0x40020470
 800689c:	40020488 	.word	0x40020488
 80068a0:	400204a0 	.word	0x400204a0
 80068a4:	400204b8 	.word	0x400204b8
 80068a8:	58025408 	.word	0x58025408
 80068ac:	5802541c 	.word	0x5802541c
 80068b0:	58025430 	.word	0x58025430
 80068b4:	58025444 	.word	0x58025444
 80068b8:	58025458 	.word	0x58025458
 80068bc:	5802546c 	.word	0x5802546c
 80068c0:	58025480 	.word	0x58025480
 80068c4:	58025494 	.word	0x58025494

080068c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e205      	b.n	8006ce6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d004      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2280      	movs	r2, #128	; 0x80
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e1fa      	b.n	8006ce6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a8c      	ldr	r2, [pc, #560]	; (8006b28 <HAL_DMA_Abort_IT+0x260>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d04a      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a8b      	ldr	r2, [pc, #556]	; (8006b2c <HAL_DMA_Abort_IT+0x264>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d045      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a89      	ldr	r2, [pc, #548]	; (8006b30 <HAL_DMA_Abort_IT+0x268>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d040      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a88      	ldr	r2, [pc, #544]	; (8006b34 <HAL_DMA_Abort_IT+0x26c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d03b      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a86      	ldr	r2, [pc, #536]	; (8006b38 <HAL_DMA_Abort_IT+0x270>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d036      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a85      	ldr	r2, [pc, #532]	; (8006b3c <HAL_DMA_Abort_IT+0x274>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d031      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a83      	ldr	r2, [pc, #524]	; (8006b40 <HAL_DMA_Abort_IT+0x278>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d02c      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a82      	ldr	r2, [pc, #520]	; (8006b44 <HAL_DMA_Abort_IT+0x27c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d027      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a80      	ldr	r2, [pc, #512]	; (8006b48 <HAL_DMA_Abort_IT+0x280>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d022      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a7f      	ldr	r2, [pc, #508]	; (8006b4c <HAL_DMA_Abort_IT+0x284>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d01d      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a7d      	ldr	r2, [pc, #500]	; (8006b50 <HAL_DMA_Abort_IT+0x288>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d018      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a7c      	ldr	r2, [pc, #496]	; (8006b54 <HAL_DMA_Abort_IT+0x28c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d013      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a7a      	ldr	r2, [pc, #488]	; (8006b58 <HAL_DMA_Abort_IT+0x290>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00e      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a79      	ldr	r2, [pc, #484]	; (8006b5c <HAL_DMA_Abort_IT+0x294>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d009      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a77      	ldr	r2, [pc, #476]	; (8006b60 <HAL_DMA_Abort_IT+0x298>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d004      	beq.n	8006990 <HAL_DMA_Abort_IT+0xc8>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a76      	ldr	r2, [pc, #472]	; (8006b64 <HAL_DMA_Abort_IT+0x29c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d101      	bne.n	8006994 <HAL_DMA_Abort_IT+0xcc>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <HAL_DMA_Abort_IT+0xce>
 8006994:	2300      	movs	r3, #0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d065      	beq.n	8006a66 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2204      	movs	r2, #4
 800699e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a60      	ldr	r2, [pc, #384]	; (8006b28 <HAL_DMA_Abort_IT+0x260>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d04a      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a5e      	ldr	r2, [pc, #376]	; (8006b2c <HAL_DMA_Abort_IT+0x264>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d045      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a5d      	ldr	r2, [pc, #372]	; (8006b30 <HAL_DMA_Abort_IT+0x268>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d040      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a5b      	ldr	r2, [pc, #364]	; (8006b34 <HAL_DMA_Abort_IT+0x26c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d03b      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a5a      	ldr	r2, [pc, #360]	; (8006b38 <HAL_DMA_Abort_IT+0x270>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d036      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a58      	ldr	r2, [pc, #352]	; (8006b3c <HAL_DMA_Abort_IT+0x274>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d031      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a57      	ldr	r2, [pc, #348]	; (8006b40 <HAL_DMA_Abort_IT+0x278>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d02c      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a55      	ldr	r2, [pc, #340]	; (8006b44 <HAL_DMA_Abort_IT+0x27c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d027      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a54      	ldr	r2, [pc, #336]	; (8006b48 <HAL_DMA_Abort_IT+0x280>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d022      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a52      	ldr	r2, [pc, #328]	; (8006b4c <HAL_DMA_Abort_IT+0x284>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d01d      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a51      	ldr	r2, [pc, #324]	; (8006b50 <HAL_DMA_Abort_IT+0x288>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d018      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a4f      	ldr	r2, [pc, #316]	; (8006b54 <HAL_DMA_Abort_IT+0x28c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a4e      	ldr	r2, [pc, #312]	; (8006b58 <HAL_DMA_Abort_IT+0x290>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00e      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a4c      	ldr	r2, [pc, #304]	; (8006b5c <HAL_DMA_Abort_IT+0x294>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d009      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a4b      	ldr	r2, [pc, #300]	; (8006b60 <HAL_DMA_Abort_IT+0x298>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d004      	beq.n	8006a42 <HAL_DMA_Abort_IT+0x17a>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a49      	ldr	r2, [pc, #292]	; (8006b64 <HAL_DMA_Abort_IT+0x29c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d108      	bne.n	8006a54 <HAL_DMA_Abort_IT+0x18c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0201 	bic.w	r2, r2, #1
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e147      	b.n	8006ce4 <HAL_DMA_Abort_IT+0x41c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0201 	bic.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	e13e      	b.n	8006ce4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 020e 	bic.w	r2, r2, #14
 8006a74:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a2b      	ldr	r2, [pc, #172]	; (8006b28 <HAL_DMA_Abort_IT+0x260>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d04a      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a29      	ldr	r2, [pc, #164]	; (8006b2c <HAL_DMA_Abort_IT+0x264>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d045      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a28      	ldr	r2, [pc, #160]	; (8006b30 <HAL_DMA_Abort_IT+0x268>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d040      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a26      	ldr	r2, [pc, #152]	; (8006b34 <HAL_DMA_Abort_IT+0x26c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d03b      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a25      	ldr	r2, [pc, #148]	; (8006b38 <HAL_DMA_Abort_IT+0x270>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d036      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a23      	ldr	r2, [pc, #140]	; (8006b3c <HAL_DMA_Abort_IT+0x274>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d031      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a22      	ldr	r2, [pc, #136]	; (8006b40 <HAL_DMA_Abort_IT+0x278>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d02c      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a20      	ldr	r2, [pc, #128]	; (8006b44 <HAL_DMA_Abort_IT+0x27c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d027      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1f      	ldr	r2, [pc, #124]	; (8006b48 <HAL_DMA_Abort_IT+0x280>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d022      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <HAL_DMA_Abort_IT+0x284>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d01d      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <HAL_DMA_Abort_IT+0x288>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d018      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1a      	ldr	r2, [pc, #104]	; (8006b54 <HAL_DMA_Abort_IT+0x28c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d013      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a19      	ldr	r2, [pc, #100]	; (8006b58 <HAL_DMA_Abort_IT+0x290>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00e      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a17      	ldr	r2, [pc, #92]	; (8006b5c <HAL_DMA_Abort_IT+0x294>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a16      	ldr	r2, [pc, #88]	; (8006b60 <HAL_DMA_Abort_IT+0x298>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_DMA_Abort_IT+0x24e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <HAL_DMA_Abort_IT+0x29c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d128      	bne.n	8006b68 <HAL_DMA_Abort_IT+0x2a0>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0201 	bic.w	r2, r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	e027      	b.n	8006b78 <HAL_DMA_Abort_IT+0x2b0>
 8006b28:	40020010 	.word	0x40020010
 8006b2c:	40020028 	.word	0x40020028
 8006b30:	40020040 	.word	0x40020040
 8006b34:	40020058 	.word	0x40020058
 8006b38:	40020070 	.word	0x40020070
 8006b3c:	40020088 	.word	0x40020088
 8006b40:	400200a0 	.word	0x400200a0
 8006b44:	400200b8 	.word	0x400200b8
 8006b48:	40020410 	.word	0x40020410
 8006b4c:	40020428 	.word	0x40020428
 8006b50:	40020440 	.word	0x40020440
 8006b54:	40020458 	.word	0x40020458
 8006b58:	40020470 	.word	0x40020470
 8006b5c:	40020488 	.word	0x40020488
 8006b60:	400204a0 	.word	0x400204a0
 8006b64:	400204b8 	.word	0x400204b8
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0201 	bic.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a5c      	ldr	r2, [pc, #368]	; (8006cf0 <HAL_DMA_Abort_IT+0x428>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d072      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a5b      	ldr	r2, [pc, #364]	; (8006cf4 <HAL_DMA_Abort_IT+0x42c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d06d      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a59      	ldr	r2, [pc, #356]	; (8006cf8 <HAL_DMA_Abort_IT+0x430>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d068      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a58      	ldr	r2, [pc, #352]	; (8006cfc <HAL_DMA_Abort_IT+0x434>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d063      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a56      	ldr	r2, [pc, #344]	; (8006d00 <HAL_DMA_Abort_IT+0x438>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d05e      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a55      	ldr	r2, [pc, #340]	; (8006d04 <HAL_DMA_Abort_IT+0x43c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d059      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a53      	ldr	r2, [pc, #332]	; (8006d08 <HAL_DMA_Abort_IT+0x440>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d054      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a52      	ldr	r2, [pc, #328]	; (8006d0c <HAL_DMA_Abort_IT+0x444>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d04f      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a50      	ldr	r2, [pc, #320]	; (8006d10 <HAL_DMA_Abort_IT+0x448>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d04a      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a4f      	ldr	r2, [pc, #316]	; (8006d14 <HAL_DMA_Abort_IT+0x44c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d045      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a4d      	ldr	r2, [pc, #308]	; (8006d18 <HAL_DMA_Abort_IT+0x450>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d040      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a4c      	ldr	r2, [pc, #304]	; (8006d1c <HAL_DMA_Abort_IT+0x454>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d03b      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a4a      	ldr	r2, [pc, #296]	; (8006d20 <HAL_DMA_Abort_IT+0x458>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d036      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a49      	ldr	r2, [pc, #292]	; (8006d24 <HAL_DMA_Abort_IT+0x45c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d031      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a47      	ldr	r2, [pc, #284]	; (8006d28 <HAL_DMA_Abort_IT+0x460>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d02c      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a46      	ldr	r2, [pc, #280]	; (8006d2c <HAL_DMA_Abort_IT+0x464>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d027      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a44      	ldr	r2, [pc, #272]	; (8006d30 <HAL_DMA_Abort_IT+0x468>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d022      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a43      	ldr	r2, [pc, #268]	; (8006d34 <HAL_DMA_Abort_IT+0x46c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d01d      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a41      	ldr	r2, [pc, #260]	; (8006d38 <HAL_DMA_Abort_IT+0x470>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d018      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a40      	ldr	r2, [pc, #256]	; (8006d3c <HAL_DMA_Abort_IT+0x474>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a3e      	ldr	r2, [pc, #248]	; (8006d40 <HAL_DMA_Abort_IT+0x478>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00e      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a3d      	ldr	r2, [pc, #244]	; (8006d44 <HAL_DMA_Abort_IT+0x47c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d009      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a3b      	ldr	r2, [pc, #236]	; (8006d48 <HAL_DMA_Abort_IT+0x480>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_DMA_Abort_IT+0x3a0>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a3a      	ldr	r2, [pc, #232]	; (8006d4c <HAL_DMA_Abort_IT+0x484>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d101      	bne.n	8006c6c <HAL_DMA_Abort_IT+0x3a4>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <HAL_DMA_Abort_IT+0x3a6>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d028      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2201      	movs	r2, #1
 8006c92:	409a      	lsls	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ca0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00c      	beq.n	8006cc4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cb8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006cc2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40020010 	.word	0x40020010
 8006cf4:	40020028 	.word	0x40020028
 8006cf8:	40020040 	.word	0x40020040
 8006cfc:	40020058 	.word	0x40020058
 8006d00:	40020070 	.word	0x40020070
 8006d04:	40020088 	.word	0x40020088
 8006d08:	400200a0 	.word	0x400200a0
 8006d0c:	400200b8 	.word	0x400200b8
 8006d10:	40020410 	.word	0x40020410
 8006d14:	40020428 	.word	0x40020428
 8006d18:	40020440 	.word	0x40020440
 8006d1c:	40020458 	.word	0x40020458
 8006d20:	40020470 	.word	0x40020470
 8006d24:	40020488 	.word	0x40020488
 8006d28:	400204a0 	.word	0x400204a0
 8006d2c:	400204b8 	.word	0x400204b8
 8006d30:	58025408 	.word	0x58025408
 8006d34:	5802541c 	.word	0x5802541c
 8006d38:	58025430 	.word	0x58025430
 8006d3c:	58025444 	.word	0x58025444
 8006d40:	58025458 	.word	0x58025458
 8006d44:	5802546c 	.word	0x5802546c
 8006d48:	58025480 	.word	0x58025480
 8006d4c:	58025494 	.word	0x58025494

08006d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b089      	sub	sp, #36	; 0x24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006d5e:	4b89      	ldr	r3, [pc, #548]	; (8006f84 <HAL_GPIO_Init+0x234>)
 8006d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d62:	e194      	b.n	800708e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	2101      	movs	r1, #1
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d70:	4013      	ands	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 8186 	beq.w	8007088 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d00b      	beq.n	8006d9c <HAL_GPIO_Init+0x4c>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d007      	beq.n	8006d9c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006d90:	2b11      	cmp	r3, #17
 8006d92:	d003      	beq.n	8006d9c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b12      	cmp	r3, #18
 8006d9a:	d130      	bne.n	8006dfe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	2203      	movs	r2, #3
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	43db      	mvns	r3, r3
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	4013      	ands	r3, r2
 8006db2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	43db      	mvns	r3, r3
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	4013      	ands	r3, r2
 8006de0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	091b      	lsrs	r3, r3, #4
 8006de8:	f003 0201 	and.w	r2, r3, #1
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	2203      	movs	r2, #3
 8006e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0e:	43db      	mvns	r3, r3
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	4013      	ands	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	689a      	ldr	r2, [r3, #8]
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d003      	beq.n	8006e3e <HAL_GPIO_Init+0xee>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b12      	cmp	r3, #18
 8006e3c:	d123      	bne.n	8006e86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	08da      	lsrs	r2, r3, #3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3208      	adds	r2, #8
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	220f      	movs	r2, #15
 8006e56:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5a:	43db      	mvns	r3, r3
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	08da      	lsrs	r2, r3, #3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3208      	adds	r2, #8
 8006e80:	69b9      	ldr	r1, [r7, #24]
 8006e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	2203      	movs	r2, #3
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	43db      	mvns	r3, r3
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f003 0203 	and.w	r2, r3, #3
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 80e0 	beq.w	8007088 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ec8:	4b2f      	ldr	r3, [pc, #188]	; (8006f88 <HAL_GPIO_Init+0x238>)
 8006eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ece:	4a2e      	ldr	r2, [pc, #184]	; (8006f88 <HAL_GPIO_Init+0x238>)
 8006ed0:	f043 0302 	orr.w	r3, r3, #2
 8006ed4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006ed8:	4b2b      	ldr	r3, [pc, #172]	; (8006f88 <HAL_GPIO_Init+0x238>)
 8006eda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ee6:	4a29      	ldr	r2, [pc, #164]	; (8006f8c <HAL_GPIO_Init+0x23c>)
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	089b      	lsrs	r3, r3, #2
 8006eec:	3302      	adds	r3, #2
 8006eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	220f      	movs	r2, #15
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	43db      	mvns	r3, r3
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	4013      	ands	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a20      	ldr	r2, [pc, #128]	; (8006f90 <HAL_GPIO_Init+0x240>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d052      	beq.n	8006fb8 <HAL_GPIO_Init+0x268>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <HAL_GPIO_Init+0x244>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d031      	beq.n	8006f7e <HAL_GPIO_Init+0x22e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <HAL_GPIO_Init+0x248>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d02b      	beq.n	8006f7a <HAL_GPIO_Init+0x22a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a1d      	ldr	r2, [pc, #116]	; (8006f9c <HAL_GPIO_Init+0x24c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d025      	beq.n	8006f76 <HAL_GPIO_Init+0x226>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a1c      	ldr	r2, [pc, #112]	; (8006fa0 <HAL_GPIO_Init+0x250>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01f      	beq.n	8006f72 <HAL_GPIO_Init+0x222>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a1b      	ldr	r2, [pc, #108]	; (8006fa4 <HAL_GPIO_Init+0x254>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d019      	beq.n	8006f6e <HAL_GPIO_Init+0x21e>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a1a      	ldr	r2, [pc, #104]	; (8006fa8 <HAL_GPIO_Init+0x258>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d013      	beq.n	8006f6a <HAL_GPIO_Init+0x21a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a19      	ldr	r2, [pc, #100]	; (8006fac <HAL_GPIO_Init+0x25c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00d      	beq.n	8006f66 <HAL_GPIO_Init+0x216>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a18      	ldr	r2, [pc, #96]	; (8006fb0 <HAL_GPIO_Init+0x260>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d007      	beq.n	8006f62 <HAL_GPIO_Init+0x212>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a17      	ldr	r2, [pc, #92]	; (8006fb4 <HAL_GPIO_Init+0x264>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d101      	bne.n	8006f5e <HAL_GPIO_Init+0x20e>
 8006f5a:	2309      	movs	r3, #9
 8006f5c:	e02d      	b.n	8006fba <HAL_GPIO_Init+0x26a>
 8006f5e:	230a      	movs	r3, #10
 8006f60:	e02b      	b.n	8006fba <HAL_GPIO_Init+0x26a>
 8006f62:	2308      	movs	r3, #8
 8006f64:	e029      	b.n	8006fba <HAL_GPIO_Init+0x26a>
 8006f66:	2307      	movs	r3, #7
 8006f68:	e027      	b.n	8006fba <HAL_GPIO_Init+0x26a>
 8006f6a:	2306      	movs	r3, #6
 8006f6c:	e025      	b.n	8006fba <HAL_GPIO_Init+0x26a>
 8006f6e:	2305      	movs	r3, #5
 8006f70:	e023      	b.n	8006fba <HAL_GPIO_Init+0x26a>
 8006f72:	2304      	movs	r3, #4
 8006f74:	e021      	b.n	8006fba <HAL_GPIO_Init+0x26a>
 8006f76:	2303      	movs	r3, #3
 8006f78:	e01f      	b.n	8006fba <HAL_GPIO_Init+0x26a>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e01d      	b.n	8006fba <HAL_GPIO_Init+0x26a>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e01b      	b.n	8006fba <HAL_GPIO_Init+0x26a>
 8006f82:	bf00      	nop
 8006f84:	58000080 	.word	0x58000080
 8006f88:	58024400 	.word	0x58024400
 8006f8c:	58000400 	.word	0x58000400
 8006f90:	58020000 	.word	0x58020000
 8006f94:	58020400 	.word	0x58020400
 8006f98:	58020800 	.word	0x58020800
 8006f9c:	58020c00 	.word	0x58020c00
 8006fa0:	58021000 	.word	0x58021000
 8006fa4:	58021400 	.word	0x58021400
 8006fa8:	58021800 	.word	0x58021800
 8006fac:	58021c00 	.word	0x58021c00
 8006fb0:	58022000 	.word	0x58022000
 8006fb4:	58022400 	.word	0x58022400
 8006fb8:	2300      	movs	r3, #0
 8006fba:	69fa      	ldr	r2, [r7, #28]
 8006fbc:	f002 0203 	and.w	r2, r2, #3
 8006fc0:	0092      	lsls	r2, r2, #2
 8006fc2:	4093      	lsls	r3, r2
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fca:	4938      	ldr	r1, [pc, #224]	; (80070ac <HAL_GPIO_Init+0x35c>)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	089b      	lsrs	r3, r3, #2
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	43db      	mvns	r3, r3
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	4013      	ands	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800702c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	43db      	mvns	r3, r3
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	4013      	ands	r3, r2
 800703c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800705a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	43db      	mvns	r3, r3
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	4013      	ands	r3, r2
 800706a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	4313      	orrs	r3, r2
 800707e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	3301      	adds	r3, #1
 800708c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	fa22 f303 	lsr.w	r3, r2, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	f47f ae63 	bne.w	8006d64 <HAL_GPIO_Init+0x14>
  }
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	3724      	adds	r7, #36	; 0x24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	58000400 	.word	0x58000400

080070b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	691a      	ldr	r2, [r3, #16]
 80070c0:	887b      	ldrh	r3, [r7, #2]
 80070c2:	4013      	ands	r3, r2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
 80070cc:	e001      	b.n	80070d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	807b      	strh	r3, [r7, #2]
 80070ec:	4613      	mov	r3, r2
 80070ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070f0:	787b      	ldrb	r3, [r7, #1]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070f6:	887a      	ldrh	r2, [r7, #2]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80070fc:	e003      	b.n	8007106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80070fe:	887b      	ldrh	r3, [r7, #2]
 8007100:	041a      	lsls	r2, r3, #16
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	619a      	str	r2, [r3, #24]
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007124:	887a      	ldrh	r2, [r7, #2]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4013      	ands	r3, r2
 800712a:	041a      	lsls	r2, r3, #16
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	43d9      	mvns	r1, r3
 8007130:	887b      	ldrh	r3, [r7, #2]
 8007132:	400b      	ands	r3, r1
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	619a      	str	r2, [r3, #24]
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007148:	b08f      	sub	sp, #60	; 0x3c
 800714a:	af0a      	add	r7, sp, #40	; 0x28
 800714c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e116      	b.n	8007386 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f00d fbca 	bl	801490c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2203      	movs	r2, #3
 800717c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007188:	2b00      	cmp	r3, #0
 800718a:	d102      	bne.n	8007192 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f008 ff33 	bl	8010002 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	687e      	ldr	r6, [r7, #4]
 80071a4:	466d      	mov	r5, sp
 80071a6:	f106 0410 	add.w	r4, r6, #16
 80071aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80071ba:	1d33      	adds	r3, r6, #4
 80071bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071be:	6838      	ldr	r0, [r7, #0]
 80071c0:	f008 fdfe 	bl	800fdc0 <USB_CoreInit>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2202      	movs	r2, #2
 80071ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e0d7      	b.n	8007386 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2100      	movs	r1, #0
 80071dc:	4618      	mov	r0, r3
 80071de:	f008 ff21 	bl	8010024 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
 80071e6:	e04a      	b.n	800727e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80071e8:	7bfa      	ldrb	r2, [r7, #15]
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	4613      	mov	r3, r2
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	1a9b      	subs	r3, r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	333d      	adds	r3, #61	; 0x3d
 80071f8:	2201      	movs	r2, #1
 80071fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80071fc:	7bfa      	ldrb	r2, [r7, #15]
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	333c      	adds	r3, #60	; 0x3c
 800720c:	7bfa      	ldrb	r2, [r7, #15]
 800720e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007210:	7bfa      	ldrb	r2, [r7, #15]
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	b298      	uxth	r0, r3
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	1a9b      	subs	r3, r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	3342      	adds	r3, #66	; 0x42
 8007224:	4602      	mov	r2, r0
 8007226:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007228:	7bfa      	ldrb	r2, [r7, #15]
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	333f      	adds	r3, #63	; 0x3f
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800723c:	7bfa      	ldrb	r2, [r7, #15]
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4613      	mov	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	1a9b      	subs	r3, r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	3344      	adds	r3, #68	; 0x44
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007250:	7bfa      	ldrb	r2, [r7, #15]
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	4613      	mov	r3, r2
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	440b      	add	r3, r1
 800725e:	3348      	adds	r3, #72	; 0x48
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007264:	7bfa      	ldrb	r2, [r7, #15]
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	440b      	add	r3, r1
 8007272:	3350      	adds	r3, #80	; 0x50
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	3301      	adds	r3, #1
 800727c:	73fb      	strb	r3, [r7, #15]
 800727e:	7bfa      	ldrb	r2, [r7, #15]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	429a      	cmp	r2, r3
 8007286:	d3af      	bcc.n	80071e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007288:	2300      	movs	r3, #0
 800728a:	73fb      	strb	r3, [r7, #15]
 800728c:	e044      	b.n	8007318 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800728e:	7bfa      	ldrb	r2, [r7, #15]
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80072a0:	2200      	movs	r2, #0
 80072a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80072a4:	7bfa      	ldrb	r2, [r7, #15]
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	1a9b      	subs	r3, r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80072b6:	7bfa      	ldrb	r2, [r7, #15]
 80072b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80072ba:	7bfa      	ldrb	r2, [r7, #15]
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	1a9b      	subs	r3, r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	440b      	add	r3, r1
 80072c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80072cc:	2200      	movs	r2, #0
 80072ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80072d0:	7bfa      	ldrb	r2, [r7, #15]
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	4613      	mov	r3, r2
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80072e6:	7bfa      	ldrb	r2, [r7, #15]
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80072fc:	7bfa      	ldrb	r2, [r7, #15]
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	3301      	adds	r3, #1
 8007316:	73fb      	strb	r3, [r7, #15]
 8007318:	7bfa      	ldrb	r2, [r7, #15]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	429a      	cmp	r2, r3
 8007320:	d3b5      	bcc.n	800728e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	687e      	ldr	r6, [r7, #4]
 800732a:	466d      	mov	r5, sp
 800732c:	f106 0410 	add.w	r4, r6, #16
 8007330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007338:	e894 0003 	ldmia.w	r4, {r0, r1}
 800733c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007340:	1d33      	adds	r3, r6, #4
 8007342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007344:	6838      	ldr	r0, [r7, #0]
 8007346:	f008 fe97 	bl	8010078 <USB_DevInit>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d005      	beq.n	800735c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e014      	b.n	8007386 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b01      	cmp	r3, #1
 8007372:	d102      	bne.n	800737a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 f891 	bl	800849c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f009 ff17 	bl	80111b2 <USB_DevDisconnect>

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800738e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d101      	bne.n	80073aa <HAL_PCD_Start+0x1c>
 80073a6:	2302      	movs	r3, #2
 80073a8:	e020      	b.n	80073ec <HAL_PCD_Start+0x5e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d109      	bne.n	80073ce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d005      	beq.n	80073ce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f008 fe04 	bl	800ffe0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4618      	mov	r0, r3
 80073de:	f009 fec7 	bl	8011170 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80073f4:	b590      	push	{r4, r7, lr}
 80073f6:	b08d      	sub	sp, #52	; 0x34
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f009 ff85 	bl	801131a <USB_GetMode>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	f040 83ca 	bne.w	8007bac <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f009 fee9 	bl	80111f4 <USB_ReadInterrupts>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 83c0 	beq.w	8007baa <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f009 fee0 	bl	80111f4 <USB_ReadInterrupts>
 8007434:	4603      	mov	r3, r0
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b02      	cmp	r3, #2
 800743c:	d107      	bne.n	800744e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695a      	ldr	r2, [r3, #20]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f002 0202 	and.w	r2, r2, #2
 800744c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4618      	mov	r0, r3
 8007454:	f009 fece 	bl	80111f4 <USB_ReadInterrupts>
 8007458:	4603      	mov	r3, r0
 800745a:	f003 0310 	and.w	r3, r3, #16
 800745e:	2b10      	cmp	r3, #16
 8007460:	d161      	bne.n	8007526 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699a      	ldr	r2, [r3, #24]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0210 	bic.w	r2, r2, #16
 8007470:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f003 020f 	and.w	r2, r3, #15
 800747e:	4613      	mov	r3, r2
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	3304      	adds	r3, #4
 8007490:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	0c5b      	lsrs	r3, r3, #17
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	2b02      	cmp	r3, #2
 800749c:	d124      	bne.n	80074e8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80074a4:	4013      	ands	r3, r2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d035      	beq.n	8007516 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	091b      	lsrs	r3, r3, #4
 80074b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80074b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	461a      	mov	r2, r3
 80074bc:	6a38      	ldr	r0, [r7, #32]
 80074be:	f009 fd05 	bl	8010ecc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	091b      	lsrs	r3, r3, #4
 80074ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ce:	441a      	add	r2, r3
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	699a      	ldr	r2, [r3, #24]
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	091b      	lsrs	r3, r3, #4
 80074dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074e0:	441a      	add	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	619a      	str	r2, [r3, #24]
 80074e6:	e016      	b.n	8007516 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	0c5b      	lsrs	r3, r3, #17
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	2b06      	cmp	r3, #6
 80074f2:	d110      	bne.n	8007516 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074fa:	2208      	movs	r2, #8
 80074fc:	4619      	mov	r1, r3
 80074fe:	6a38      	ldr	r0, [r7, #32]
 8007500:	f009 fce4 	bl	8010ecc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	699a      	ldr	r2, [r3, #24]
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	091b      	lsrs	r3, r3, #4
 800750c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007510:	441a      	add	r2, r3
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	699a      	ldr	r2, [r3, #24]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f042 0210 	orr.w	r2, r2, #16
 8007524:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f009 fe62 	bl	80111f4 <USB_ReadInterrupts>
 8007530:	4603      	mov	r3, r0
 8007532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007536:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800753a:	d16e      	bne.n	800761a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f009 fe68 	bl	801121a <USB_ReadDevAllOutEpInterrupt>
 800754a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800754c:	e062      	b.n	8007614 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d057      	beq.n	8007608 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	4611      	mov	r1, r2
 8007562:	4618      	mov	r0, r3
 8007564:	f009 fe8d 	bl	8011282 <USB_ReadDevOutEPInterrupt>
 8007568:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00c      	beq.n	800758e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007580:	461a      	mov	r2, r3
 8007582:	2301      	movs	r3, #1
 8007584:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fddd 	bl	8008148 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00c      	beq.n	80075b2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a4:	461a      	mov	r2, r3
 80075a6:	2308      	movs	r3, #8
 80075a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80075aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fed7 	bl	8008360 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c8:	461a      	mov	r2, r3
 80075ca:	2310      	movs	r3, #16
 80075cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f003 0320 	and.w	r3, r3, #32
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e4:	461a      	mov	r2, r3
 80075e6:	2320      	movs	r3, #32
 80075e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d009      	beq.n	8007608 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	461a      	mov	r2, r3
 8007602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007606:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	3301      	adds	r3, #1
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	085b      	lsrs	r3, r3, #1
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d199      	bne.n	800754e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f009 fde8 	bl	80111f4 <USB_ReadInterrupts>
 8007624:	4603      	mov	r3, r0
 8007626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800762a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800762e:	f040 80c0 	bne.w	80077b2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f009 fe09 	bl	801124e <USB_ReadDevAllInEpInterrupt>
 800763c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007642:	e0b2      	b.n	80077aa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 80a7 	beq.w	800779e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f009 fe2f 	bl	80112be <USB_ReadDevInEPInterrupt>
 8007660:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d057      	beq.n	800771c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	2201      	movs	r2, #1
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	43db      	mvns	r3, r3
 8007686:	69f9      	ldr	r1, [r7, #28]
 8007688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800768c:	4013      	ands	r3, r2
 800768e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	461a      	mov	r2, r3
 800769e:	2301      	movs	r3, #1
 80076a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d132      	bne.n	8007710 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ae:	4613      	mov	r3, r2
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	1a9b      	subs	r3, r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	3348      	adds	r3, #72	; 0x48
 80076ba:	6819      	ldr	r1, [r3, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c0:	4613      	mov	r3, r2
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	1a9b      	subs	r3, r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4403      	add	r3, r0
 80076ca:	3344      	adds	r3, #68	; 0x44
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4419      	add	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d4:	4613      	mov	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	1a9b      	subs	r3, r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4403      	add	r3, r0
 80076de:	3348      	adds	r3, #72	; 0x48
 80076e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d113      	bne.n	8007710 <HAL_PCD_IRQHandler+0x31c>
 80076e8:	6879      	ldr	r1, [r7, #4]
 80076ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ec:	4613      	mov	r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	3350      	adds	r3, #80	; 0x50
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d108      	bne.n	8007710 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007708:	461a      	mov	r2, r3
 800770a:	2101      	movs	r1, #1
 800770c:	f009 fe38 	bl	8011380 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	b2db      	uxtb	r3, r3
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f00d f979 	bl	8014a0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007732:	461a      	mov	r2, r3
 8007734:	2308      	movs	r3, #8
 8007736:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f003 0310 	and.w	r3, r3, #16
 800773e:	2b00      	cmp	r3, #0
 8007740:	d008      	beq.n	8007754 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774e:	461a      	mov	r2, r3
 8007750:	2310      	movs	r3, #16
 8007752:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776a:	461a      	mov	r2, r3
 800776c:	2340      	movs	r3, #64	; 0x40
 800776e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d008      	beq.n	800778c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	461a      	mov	r2, r3
 8007788:	2302      	movs	r3, #2
 800778a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc48 	bl	800802e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	3301      	adds	r3, #1
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80077a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f47f af49 	bne.w	8007644 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f009 fd1c 	bl	80111f4 <USB_ReadInterrupts>
 80077bc:	4603      	mov	r3, r0
 80077be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077c6:	d122      	bne.n	800780e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077d6:	f023 0301 	bic.w	r3, r3, #1
 80077da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d108      	bne.n	80077f8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80077ee:	2100      	movs	r1, #0
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fe77 	bl	80084e4 <HAL_PCDEx_LPM_Callback>
 80077f6:	e002      	b.n	80077fe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f00d f97f 	bl	8014afc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	695a      	ldr	r2, [r3, #20]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800780c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f009 fcee 	bl	80111f4 <USB_ReadInterrupts>
 8007818:	4603      	mov	r3, r0
 800781a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800781e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007822:	d112      	bne.n	800784a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	d102      	bne.n	800783a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f00d f93b 	bl	8014ab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695a      	ldr	r2, [r3, #20]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007848:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f009 fcd0 	bl	80111f4 <USB_ReadInterrupts>
 8007854:	4603      	mov	r3, r0
 8007856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800785a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800785e:	d121      	bne.n	80078a4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695a      	ldr	r2, [r3, #20]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800786e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d111      	bne.n	800789e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007888:	089b      	lsrs	r3, r3, #2
 800788a:	f003 020f 	and.w	r2, r3, #15
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007894:	2101      	movs	r1, #1
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fe24 	bl	80084e4 <HAL_PCDEx_LPM_Callback>
 800789c:	e002      	b.n	80078a4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f00d f906 	bl	8014ab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f009 fca3 	bl	80111f4 <USB_ReadInterrupts>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b8:	f040 80c7 	bne.w	8007a4a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ca:	f023 0301 	bic.w	r3, r3, #1
 80078ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2110      	movs	r1, #16
 80078d6:	4618      	mov	r0, r3
 80078d8:	f008 fd2c 	bl	8010334 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078dc:	2300      	movs	r3, #0
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078e0:	e056      	b.n	8007990 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80078e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ee:	461a      	mov	r2, r3
 80078f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007906:	0151      	lsls	r1, r2, #5
 8007908:	69fa      	ldr	r2, [r7, #28]
 800790a:	440a      	add	r2, r1
 800790c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007910:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007914:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007926:	0151      	lsls	r1, r2, #5
 8007928:	69fa      	ldr	r2, [r7, #28]
 800792a:	440a      	add	r2, r1
 800792c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007930:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007934:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	461a      	mov	r2, r3
 8007944:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007948:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800795a:	0151      	lsls	r1, r2, #5
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	440a      	add	r2, r1
 8007960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007964:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007968:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800797a:	0151      	lsls	r1, r2, #5
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	440a      	add	r2, r1
 8007980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007984:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007988:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	3301      	adds	r3, #1
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007996:	429a      	cmp	r2, r3
 8007998:	d3a3      	bcc.n	80078e2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80079ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d016      	beq.n	80079e4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079c0:	69fa      	ldr	r2, [r7, #28]
 80079c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c6:	f043 030b 	orr.w	r3, r3, #11
 80079ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079dc:	f043 030b 	orr.w	r3, r3, #11
 80079e0:	6453      	str	r3, [r2, #68]	; 0x44
 80079e2:	e015      	b.n	8007a10 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f2:	4619      	mov	r1, r3
 80079f4:	f242 032b 	movw	r3, #8235	; 0x202b
 80079f8:	4313      	orrs	r3, r2
 80079fa:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	69fa      	ldr	r2, [r7, #28]
 8007a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a0a:	f043 030b 	orr.w	r3, r3, #11
 8007a0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6818      	ldr	r0, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007a34:	461a      	mov	r2, r3
 8007a36:	f009 fca3 	bl	8011380 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	695a      	ldr	r2, [r3, #20]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f009 fbd0 	bl	80111f4 <USB_ReadInterrupts>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5e:	d124      	bne.n	8007aaa <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f009 fc67 	bl	8011338 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f008 fcc1 	bl	80103f6 <USB_GetDevSpeed>
 8007a74:	4603      	mov	r3, r0
 8007a76:	461a      	mov	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681c      	ldr	r4, [r3, #0]
 8007a80:	f001 fcd6 	bl	8009430 <HAL_RCC_GetHCLKFreq>
 8007a84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f008 fa04 	bl	800fe9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f00c ffe2 	bl	8014a5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695a      	ldr	r2, [r3, #20]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f009 fba0 	bl	80111f4 <USB_ReadInterrupts>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f003 0308 	and.w	r3, r3, #8
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	d10a      	bne.n	8007ad4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f00c ffbf 	bl	8014a42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	695a      	ldr	r2, [r3, #20]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f002 0208 	and.w	r2, r2, #8
 8007ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f009 fb8b 	bl	80111f4 <USB_ReadInterrupts>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ae8:	d10f      	bne.n	8007b0a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f00d f821 	bl	8014b3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695a      	ldr	r2, [r3, #20]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f009 fb70 	bl	80111f4 <USB_ReadInterrupts>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b1e:	d10f      	bne.n	8007b40 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f00c fff4 	bl	8014b18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	695a      	ldr	r2, [r3, #20]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f009 fb55 	bl	80111f4 <USB_ReadInterrupts>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b54:	d10a      	bne.n	8007b6c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f00d f802 	bl	8014b60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695a      	ldr	r2, [r3, #20]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f009 fb3f 	bl	80111f4 <USB_ReadInterrupts>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d115      	bne.n	8007bac <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f00c fff2 	bl	8014b7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6859      	ldr	r1, [r3, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	605a      	str	r2, [r3, #4]
 8007ba8:	e000      	b.n	8007bac <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007baa:	bf00      	nop
    }
  }
}
 8007bac:	3734      	adds	r7, #52	; 0x34
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd90      	pop	{r4, r7, pc}

08007bb2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_PCD_SetAddress+0x1a>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e013      	b.n	8007bf4 <HAL_PCD_SetAddress+0x42>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	78fa      	ldrb	r2, [r7, #3]
 8007bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	4611      	mov	r1, r2
 8007be4:	4618      	mov	r0, r3
 8007be6:	f009 fa9d 	bl	8011124 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	4608      	mov	r0, r1
 8007c06:	4611      	mov	r1, r2
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	70fb      	strb	r3, [r7, #3]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	803b      	strh	r3, [r7, #0]
 8007c12:	4613      	mov	r3, r2
 8007c14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da0f      	bge.n	8007c42 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	f003 020f 	and.w	r2, r3, #15
 8007c28:	4613      	mov	r3, r2
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	1a9b      	subs	r3, r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	3338      	adds	r3, #56	; 0x38
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	4413      	add	r3, r2
 8007c36:	3304      	adds	r3, #4
 8007c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	705a      	strb	r2, [r3, #1]
 8007c40:	e00f      	b.n	8007c62 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c42:	78fb      	ldrb	r3, [r7, #3]
 8007c44:	f003 020f 	and.w	r2, r3, #15
 8007c48:	4613      	mov	r3, r2
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	4413      	add	r3, r2
 8007c58:	3304      	adds	r3, #4
 8007c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007c6e:	883a      	ldrh	r2, [r7, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	78ba      	ldrb	r2, [r7, #2]
 8007c78:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c8c:	78bb      	ldrb	r3, [r7, #2]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d102      	bne.n	8007c98 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <HAL_PCD_EP_Open+0xaa>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e00e      	b.n	8007cc4 <HAL_PCD_EP_Open+0xc8>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68f9      	ldr	r1, [r7, #12]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f008 fbc3 	bl	8010440 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da0f      	bge.n	8007d00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	f003 020f 	and.w	r2, r3, #15
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	00db      	lsls	r3, r3, #3
 8007cea:	1a9b      	subs	r3, r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	3338      	adds	r3, #56	; 0x38
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	705a      	strb	r2, [r3, #1]
 8007cfe:	e00f      	b.n	8007d20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	f003 020f 	and.w	r2, r3, #15
 8007d06:	4613      	mov	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	1a9b      	subs	r3, r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	3304      	adds	r3, #4
 8007d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	f003 030f 	and.w	r3, r3, #15
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_PCD_EP_Close+0x6e>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e00e      	b.n	8007d58 <HAL_PCD_EP_Close+0x8c>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68f9      	ldr	r1, [r7, #12]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f008 fc01 	bl	8010550 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	607a      	str	r2, [r7, #4]
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d70:	7afb      	ldrb	r3, [r7, #11]
 8007d72:	f003 020f 	and.w	r2, r3, #15
 8007d76:	4613      	mov	r3, r2
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	1a9b      	subs	r3, r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4413      	add	r3, r2
 8007d86:	3304      	adds	r3, #4
 8007d88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007da2:	7afb      	ldrb	r3, [r7, #11]
 8007da4:	f003 030f 	and.w	r3, r3, #15
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d102      	bne.n	8007dbc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6979      	ldr	r1, [r7, #20]
 8007dd4:	f008 fee4 	bl	8010ba0 <USB_EP0StartXfer>
 8007dd8:	e008      	b.n	8007dec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	6979      	ldr	r1, [r7, #20]
 8007de8:	f008 fc8e 	bl	8010708 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	f003 020f 	and.w	r2, r3, #15
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	1a9b      	subs	r3, r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007e18:	681b      	ldr	r3, [r3, #0]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b086      	sub	sp, #24
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
 8007e32:	460b      	mov	r3, r1
 8007e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e36:	7afb      	ldrb	r3, [r7, #11]
 8007e38:	f003 020f 	and.w	r2, r3, #15
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	3338      	adds	r3, #56	; 0x38
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4413      	add	r3, r2
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2201      	movs	r2, #1
 8007e64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d102      	bne.n	8007e80 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	6979      	ldr	r1, [r7, #20]
 8007e98:	f008 fe82 	bl	8010ba0 <USB_EP0StartXfer>
 8007e9c:	e008      	b.n	8007eb0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	6979      	ldr	r1, [r7, #20]
 8007eac:	f008 fc2c 	bl	8010708 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	f003 020f 	and.w	r2, r3, #15
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d901      	bls.n	8007ed8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e050      	b.n	8007f7a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da0f      	bge.n	8007f00 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	f003 020f 	and.w	r2, r3, #15
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	3338      	adds	r3, #56	; 0x38
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2201      	movs	r2, #1
 8007efc:	705a      	strb	r2, [r3, #1]
 8007efe:	e00d      	b.n	8007f1c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	4613      	mov	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	4413      	add	r3, r2
 8007f12:	3304      	adds	r3, #4
 8007f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f22:	78fb      	ldrb	r3, [r7, #3]
 8007f24:	f003 030f 	and.w	r3, r3, #15
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_PCD_EP_SetStall+0x82>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e01e      	b.n	8007f7a <HAL_PCD_EP_SetStall+0xc0>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68f9      	ldr	r1, [r7, #12]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f009 f816 	bl	8010f7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10a      	bne.n	8007f70 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	b2d9      	uxtb	r1, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f009 fa08 	bl	8011380 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	f003 020f 	and.w	r2, r3, #15
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d901      	bls.n	8007fa0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e042      	b.n	8008026 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da0f      	bge.n	8007fc8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	f003 020f 	and.w	r2, r3, #15
 8007fae:	4613      	mov	r3, r2
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	1a9b      	subs	r3, r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	3338      	adds	r3, #56	; 0x38
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	4413      	add	r3, r2
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	705a      	strb	r2, [r3, #1]
 8007fc6:	e00f      	b.n	8007fe8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	f003 020f 	and.w	r2, r3, #15
 8007fce:	4613      	mov	r3, r2
 8007fd0:	00db      	lsls	r3, r3, #3
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	3304      	adds	r3, #4
 8007fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_PCD_EP_ClrStall+0x86>
 8008004:	2302      	movs	r3, #2
 8008006:	e00e      	b.n	8008026 <HAL_PCD_EP_ClrStall+0xa4>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68f9      	ldr	r1, [r7, #12]
 8008016:	4618      	mov	r0, r3
 8008018:	f009 f81e 	bl	8011058 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b08a      	sub	sp, #40	; 0x28
 8008032:	af02      	add	r7, sp, #8
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	1a9b      	subs	r3, r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	3338      	adds	r3, #56	; 0x38
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	3304      	adds	r3, #4
 8008054:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699a      	ldr	r2, [r3, #24]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	429a      	cmp	r2, r3
 8008060:	d901      	bls.n	8008066 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e06c      	b.n	8008140 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	695a      	ldr	r2, [r3, #20]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	429a      	cmp	r2, r3
 800807a:	d902      	bls.n	8008082 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	3303      	adds	r3, #3
 8008086:	089b      	lsrs	r3, r3, #2
 8008088:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800808a:	e02b      	b.n	80080e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	695a      	ldr	r2, [r3, #20]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	69fa      	ldr	r2, [r7, #28]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d902      	bls.n	80080a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	3303      	adds	r3, #3
 80080ac:	089b      	lsrs	r3, r3, #2
 80080ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	68d9      	ldr	r1, [r3, #12]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	4603      	mov	r3, r0
 80080c6:	6978      	ldr	r0, [r7, #20]
 80080c8:	f008 fec2 	bl	8010e50 <USB_WritePacket>

    ep->xfer_buff  += len;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	441a      	add	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	441a      	add	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d809      	bhi.n	800810e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	699a      	ldr	r2, [r3, #24]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008102:	429a      	cmp	r2, r3
 8008104:	d203      	bcs.n	800810e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1be      	bne.n	800808c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	695a      	ldr	r2, [r3, #20]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	429a      	cmp	r2, r3
 8008118:	d811      	bhi.n	800813e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	f003 030f 	and.w	r3, r3, #15
 8008120:	2201      	movs	r2, #1
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	43db      	mvns	r3, r3
 8008134:	6939      	ldr	r1, [r7, #16]
 8008136:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800813a:	4013      	ands	r3, r2
 800813c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3720      	adds	r7, #32
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	333c      	adds	r3, #60	; 0x3c
 8008160:	3304      	adds	r3, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	4413      	add	r3, r2
 800816e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	2b01      	cmp	r3, #1
 800817c:	f040 80a0 	bne.w	80082c0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 0308 	and.w	r3, r3, #8
 8008186:	2b00      	cmp	r3, #0
 8008188:	d015      	beq.n	80081b6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4a72      	ldr	r2, [pc, #456]	; (8008358 <PCD_EP_OutXfrComplete_int+0x210>)
 800818e:	4293      	cmp	r3, r2
 8008190:	f240 80dd 	bls.w	800834e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80d7 	beq.w	800834e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ac:	461a      	mov	r2, r3
 80081ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b2:	6093      	str	r3, [r2, #8]
 80081b4:	e0cb      	b.n	800834e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081cc:	461a      	mov	r2, r3
 80081ce:	2320      	movs	r3, #32
 80081d0:	6093      	str	r3, [r2, #8]
 80081d2:	e0bc      	b.n	800834e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f040 80b7 	bne.w	800834e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4a5d      	ldr	r2, [pc, #372]	; (8008358 <PCD_EP_OutXfrComplete_int+0x210>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d90f      	bls.n	8008208 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00a      	beq.n	8008208 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fe:	461a      	mov	r2, r3
 8008200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008204:	6093      	str	r3, [r2, #8]
 8008206:	e0a2      	b.n	800834e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	4613      	mov	r3, r2
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800821a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	0159      	lsls	r1, r3, #5
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	440b      	add	r3, r1
 8008224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800822e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4403      	add	r3, r0
 800823e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008242:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	4613      	mov	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008256:	6819      	ldr	r1, [r3, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	4613      	mov	r3, r2
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	1a9b      	subs	r3, r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4403      	add	r3, r0
 8008266:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4419      	add	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	4613      	mov	r3, r2
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	1a9b      	subs	r3, r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4403      	add	r3, r0
 800827c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008280:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d114      	bne.n	80082b2 <PCD_EP_OutXfrComplete_int+0x16a>
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	4613      	mov	r3, r2
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d108      	bne.n	80082b2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80082aa:	461a      	mov	r2, r3
 80082ac:	2101      	movs	r1, #1
 80082ae:	f009 f867 	bl	8011380 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f00c fb8d 	bl	80149d8 <HAL_PCD_DataOutStageCallback>
 80082be:	e046      	b.n	800834e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4a26      	ldr	r2, [pc, #152]	; (800835c <PCD_EP_OutXfrComplete_int+0x214>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d124      	bne.n	8008312 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082de:	461a      	mov	r2, r3
 80082e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082e4:	6093      	str	r3, [r2, #8]
 80082e6:	e032      	b.n	800834e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d008      	beq.n	8008304 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fe:	461a      	mov	r2, r3
 8008300:	2320      	movs	r3, #32
 8008302:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f00c fb64 	bl	80149d8 <HAL_PCD_DataOutStageCallback>
 8008310:	e01d      	b.n	800834e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d114      	bne.n	8008342 <PCD_EP_OutXfrComplete_int+0x1fa>
 8008318:	6879      	ldr	r1, [r7, #4]
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	4613      	mov	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d108      	bne.n	8008342 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800833a:	461a      	mov	r2, r3
 800833c:	2100      	movs	r1, #0
 800833e:	f009 f81f 	bl	8011380 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f00c fb45 	bl	80149d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	4f54300a 	.word	0x4f54300a
 800835c:	4f54310a 	.word	0x4f54310a

08008360 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	333c      	adds	r3, #60	; 0x3c
 8008378:	3304      	adds	r3, #4
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4a15      	ldr	r2, [pc, #84]	; (80083e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d90e      	bls.n	80083b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800839c:	2b00      	cmp	r3, #0
 800839e:	d009      	beq.n	80083b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	461a      	mov	r2, r3
 80083ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f00c fafd 	bl	80149b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4a0a      	ldr	r2, [pc, #40]	; (80083e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d90c      	bls.n	80083dc <PCD_EP_OutSetupPacket_int+0x7c>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d108      	bne.n	80083dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083d4:	461a      	mov	r2, r3
 80083d6:	2101      	movs	r1, #1
 80083d8:	f008 ffd2 	bl	8011380 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	4f54300a 	.word	0x4f54300a

080083ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
 80083f8:	4613      	mov	r3, r2
 80083fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d107      	bne.n	800841a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800840a:	883b      	ldrh	r3, [r7, #0]
 800840c:	0419      	lsls	r1, r3, #16
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	430a      	orrs	r2, r1
 8008416:	629a      	str	r2, [r3, #40]	; 0x28
 8008418:	e028      	b.n	800846c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008420:	0c1b      	lsrs	r3, r3, #16
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	4413      	add	r3, r2
 8008426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
 800842c:	e00d      	b.n	800844a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	3340      	adds	r3, #64	; 0x40
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	0c1b      	lsrs	r3, r3, #16
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	4413      	add	r3, r2
 8008442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	3301      	adds	r3, #1
 8008448:	73fb      	strb	r3, [r7, #15]
 800844a:	7bfa      	ldrb	r2, [r7, #15]
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	3b01      	subs	r3, #1
 8008450:	429a      	cmp	r2, r3
 8008452:	d3ec      	bcc.n	800842e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008454:	883b      	ldrh	r3, [r7, #0]
 8008456:	0418      	lsls	r0, r3, #16
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6819      	ldr	r1, [r3, #0]
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	3b01      	subs	r3, #1
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	4302      	orrs	r2, r0
 8008464:	3340      	adds	r3, #64	; 0x40
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	440b      	add	r3, r1
 800846a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	887a      	ldrh	r2, [r7, #2]
 800848c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ca:	4b05      	ldr	r3, [pc, #20]	; (80084e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	10000003 	.word	0x10000003

080084e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008500:	4b05      	ldr	r3, [pc, #20]	; (8008518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a04      	ldr	r2, [pc, #16]	; (8008518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800850a:	6013      	str	r3, [r2, #0]
}
 800850c:	bf00      	nop
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	58024800 	.word	0x58024800

0800851c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008524:	4b19      	ldr	r3, [pc, #100]	; (800858c <HAL_PWREx_ConfigSupply+0x70>)
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b04      	cmp	r3, #4
 800852e:	d00a      	beq.n	8008546 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008530:	4b16      	ldr	r3, [pc, #88]	; (800858c <HAL_PWREx_ConfigSupply+0x70>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	429a      	cmp	r2, r3
 800853c:	d001      	beq.n	8008542 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e01f      	b.n	8008582 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	e01d      	b.n	8008582 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008546:	4b11      	ldr	r3, [pc, #68]	; (800858c <HAL_PWREx_ConfigSupply+0x70>)
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	f023 0207 	bic.w	r2, r3, #7
 800854e:	490f      	ldr	r1, [pc, #60]	; (800858c <HAL_PWREx_ConfigSupply+0x70>)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4313      	orrs	r3, r2
 8008554:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008556:	f7fc fb7d 	bl	8004c54 <HAL_GetTick>
 800855a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800855c:	e009      	b.n	8008572 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800855e:	f7fc fb79 	bl	8004c54 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800856c:	d901      	bls.n	8008572 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e007      	b.n	8008582 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008572:	4b06      	ldr	r3, [pc, #24]	; (800858c <HAL_PWREx_ConfigSupply+0x70>)
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800857a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800857e:	d1ee      	bne.n	800855e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	58024800 	.word	0x58024800

08008590 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	4a04      	ldr	r2, [pc, #16]	; (80085ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800859a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800859e:	60d3      	str	r3, [r2, #12]
}
 80085a0:	bf00      	nop
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	58024800 	.word	0x58024800

080085b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08c      	sub	sp, #48	; 0x30
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e3ff      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 8087 	beq.w	80086de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085d0:	4b99      	ldr	r3, [pc, #612]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085da:	4b97      	ldr	r3, [pc, #604]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e2:	2b10      	cmp	r3, #16
 80085e4:	d007      	beq.n	80085f6 <HAL_RCC_OscConfig+0x46>
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	2b18      	cmp	r3, #24
 80085ea:	d110      	bne.n	800860e <HAL_RCC_OscConfig+0x5e>
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d10b      	bne.n	800860e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085f6:	4b90      	ldr	r3, [pc, #576]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d06c      	beq.n	80086dc <HAL_RCC_OscConfig+0x12c>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d168      	bne.n	80086dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e3d9      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008616:	d106      	bne.n	8008626 <HAL_RCC_OscConfig+0x76>
 8008618:	4b87      	ldr	r3, [pc, #540]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a86      	ldr	r2, [pc, #536]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 800861e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	e02e      	b.n	8008684 <HAL_RCC_OscConfig+0xd4>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10c      	bne.n	8008648 <HAL_RCC_OscConfig+0x98>
 800862e:	4b82      	ldr	r3, [pc, #520]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a81      	ldr	r2, [pc, #516]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008638:	6013      	str	r3, [r2, #0]
 800863a:	4b7f      	ldr	r3, [pc, #508]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a7e      	ldr	r2, [pc, #504]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	e01d      	b.n	8008684 <HAL_RCC_OscConfig+0xd4>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008650:	d10c      	bne.n	800866c <HAL_RCC_OscConfig+0xbc>
 8008652:	4b79      	ldr	r3, [pc, #484]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a78      	ldr	r2, [pc, #480]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	4b76      	ldr	r3, [pc, #472]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a75      	ldr	r2, [pc, #468]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e00b      	b.n	8008684 <HAL_RCC_OscConfig+0xd4>
 800866c:	4b72      	ldr	r3, [pc, #456]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a71      	ldr	r2, [pc, #452]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	4b6f      	ldr	r3, [pc, #444]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a6e      	ldr	r2, [pc, #440]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 800867e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d013      	beq.n	80086b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800868c:	f7fc fae2 	bl	8004c54 <HAL_GetTick>
 8008690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008694:	f7fc fade 	bl	8004c54 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b64      	cmp	r3, #100	; 0x64
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e38d      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086a6:	4b64      	ldr	r3, [pc, #400]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0f0      	beq.n	8008694 <HAL_RCC_OscConfig+0xe4>
 80086b2:	e014      	b.n	80086de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b4:	f7fc face 	bl	8004c54 <HAL_GetTick>
 80086b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086bc:	f7fc faca 	bl	8004c54 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b64      	cmp	r3, #100	; 0x64
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e379      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80086ce:	4b5a      	ldr	r3, [pc, #360]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1f0      	bne.n	80086bc <HAL_RCC_OscConfig+0x10c>
 80086da:	e000      	b.n	80086de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 80ae 	beq.w	8008848 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086ec:	4b52      	ldr	r3, [pc, #328]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086f6:	4b50      	ldr	r3, [pc, #320]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d007      	beq.n	8008712 <HAL_RCC_OscConfig+0x162>
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	2b18      	cmp	r3, #24
 8008706:	d13a      	bne.n	800877e <HAL_RCC_OscConfig+0x1ce>
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f003 0303 	and.w	r3, r3, #3
 800870e:	2b00      	cmp	r3, #0
 8008710:	d135      	bne.n	800877e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008712:	4b49      	ldr	r3, [pc, #292]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0304 	and.w	r3, r3, #4
 800871a:	2b00      	cmp	r3, #0
 800871c:	d005      	beq.n	800872a <HAL_RCC_OscConfig+0x17a>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e34b      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800872a:	f7fc fac3 	bl	8004cb4 <HAL_GetREVID>
 800872e:	4603      	mov	r3, r0
 8008730:	f241 0203 	movw	r2, #4099	; 0x1003
 8008734:	4293      	cmp	r3, r2
 8008736:	d817      	bhi.n	8008768 <HAL_RCC_OscConfig+0x1b8>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	2b40      	cmp	r3, #64	; 0x40
 800873e:	d108      	bne.n	8008752 <HAL_RCC_OscConfig+0x1a2>
 8008740:	4b3d      	ldr	r3, [pc, #244]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008748:	4a3b      	ldr	r2, [pc, #236]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 800874a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008750:	e07a      	b.n	8008848 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008752:	4b39      	ldr	r3, [pc, #228]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	031b      	lsls	r3, r3, #12
 8008760:	4935      	ldr	r1, [pc, #212]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008762:	4313      	orrs	r3, r2
 8008764:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008766:	e06f      	b.n	8008848 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008768:	4b33      	ldr	r3, [pc, #204]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	061b      	lsls	r3, r3, #24
 8008776:	4930      	ldr	r1, [pc, #192]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008778:	4313      	orrs	r3, r2
 800877a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800877c:	e064      	b.n	8008848 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d045      	beq.n	8008812 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008786:	4b2c      	ldr	r3, [pc, #176]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f023 0219 	bic.w	r2, r3, #25
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	4929      	ldr	r1, [pc, #164]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008794:	4313      	orrs	r3, r2
 8008796:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008798:	f7fc fa5c 	bl	8004c54 <HAL_GetTick>
 800879c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087a0:	f7fc fa58 	bl	8004c54 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e307      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087b2:	4b21      	ldr	r3, [pc, #132]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0f0      	beq.n	80087a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087be:	f7fc fa79 	bl	8004cb4 <HAL_GetREVID>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d817      	bhi.n	80087fc <HAL_RCC_OscConfig+0x24c>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	2b40      	cmp	r3, #64	; 0x40
 80087d2:	d108      	bne.n	80087e6 <HAL_RCC_OscConfig+0x236>
 80087d4:	4b18      	ldr	r3, [pc, #96]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80087dc:	4a16      	ldr	r2, [pc, #88]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80087de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e2:	6053      	str	r3, [r2, #4]
 80087e4:	e030      	b.n	8008848 <HAL_RCC_OscConfig+0x298>
 80087e6:	4b14      	ldr	r3, [pc, #80]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	031b      	lsls	r3, r3, #12
 80087f4:	4910      	ldr	r1, [pc, #64]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	604b      	str	r3, [r1, #4]
 80087fa:	e025      	b.n	8008848 <HAL_RCC_OscConfig+0x298>
 80087fc:	4b0e      	ldr	r3, [pc, #56]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	061b      	lsls	r3, r3, #24
 800880a:	490b      	ldr	r1, [pc, #44]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 800880c:	4313      	orrs	r3, r2
 800880e:	604b      	str	r3, [r1, #4]
 8008810:	e01a      	b.n	8008848 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008812:	4b09      	ldr	r3, [pc, #36]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a08      	ldr	r2, [pc, #32]	; (8008838 <HAL_RCC_OscConfig+0x288>)
 8008818:	f023 0301 	bic.w	r3, r3, #1
 800881c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881e:	f7fc fa19 	bl	8004c54 <HAL_GetTick>
 8008822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008824:	e00a      	b.n	800883c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008826:	f7fc fa15 	bl	8004c54 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d903      	bls.n	800883c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e2c4      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
 8008838:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800883c:	4ba4      	ldr	r3, [pc, #656]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1ee      	bne.n	8008826 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0310 	and.w	r3, r3, #16
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 80a9 	beq.w	80089a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008856:	4b9e      	ldr	r3, [pc, #632]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800885e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008860:	4b9b      	ldr	r3, [pc, #620]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b08      	cmp	r3, #8
 800886a:	d007      	beq.n	800887c <HAL_RCC_OscConfig+0x2cc>
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	2b18      	cmp	r3, #24
 8008870:	d13a      	bne.n	80088e8 <HAL_RCC_OscConfig+0x338>
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	2b01      	cmp	r3, #1
 800887a:	d135      	bne.n	80088e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800887c:	4b94      	ldr	r3, [pc, #592]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <HAL_RCC_OscConfig+0x2e4>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	2b80      	cmp	r3, #128	; 0x80
 800888e:	d001      	beq.n	8008894 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e296      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008894:	f7fc fa0e 	bl	8004cb4 <HAL_GetREVID>
 8008898:	4603      	mov	r3, r0
 800889a:	f241 0203 	movw	r2, #4099	; 0x1003
 800889e:	4293      	cmp	r3, r2
 80088a0:	d817      	bhi.n	80088d2 <HAL_RCC_OscConfig+0x322>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	d108      	bne.n	80088bc <HAL_RCC_OscConfig+0x30c>
 80088aa:	4b89      	ldr	r3, [pc, #548]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80088b2:	4a87      	ldr	r2, [pc, #540]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80088b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088ba:	e075      	b.n	80089a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088bc:	4b84      	ldr	r3, [pc, #528]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	069b      	lsls	r3, r3, #26
 80088ca:	4981      	ldr	r1, [pc, #516]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088d0:	e06a      	b.n	80089a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80088d2:	4b7f      	ldr	r3, [pc, #508]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	061b      	lsls	r3, r3, #24
 80088e0:	497b      	ldr	r1, [pc, #492]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80088e6:	e05f      	b.n	80089a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d042      	beq.n	8008976 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80088f0:	4b77      	ldr	r3, [pc, #476]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a76      	ldr	r2, [pc, #472]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80088f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fc:	f7fc f9aa 	bl	8004c54 <HAL_GetTick>
 8008900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008904:	f7fc f9a6 	bl	8004c54 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e255      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008916:	4b6e      	ldr	r3, [pc, #440]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f0      	beq.n	8008904 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008922:	f7fc f9c7 	bl	8004cb4 <HAL_GetREVID>
 8008926:	4603      	mov	r3, r0
 8008928:	f241 0203 	movw	r2, #4099	; 0x1003
 800892c:	4293      	cmp	r3, r2
 800892e:	d817      	bhi.n	8008960 <HAL_RCC_OscConfig+0x3b0>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	2b20      	cmp	r3, #32
 8008936:	d108      	bne.n	800894a <HAL_RCC_OscConfig+0x39a>
 8008938:	4b65      	ldr	r3, [pc, #404]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008940:	4a63      	ldr	r2, [pc, #396]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008946:	6053      	str	r3, [r2, #4]
 8008948:	e02e      	b.n	80089a8 <HAL_RCC_OscConfig+0x3f8>
 800894a:	4b61      	ldr	r3, [pc, #388]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	069b      	lsls	r3, r3, #26
 8008958:	495d      	ldr	r1, [pc, #372]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 800895a:	4313      	orrs	r3, r2
 800895c:	604b      	str	r3, [r1, #4]
 800895e:	e023      	b.n	80089a8 <HAL_RCC_OscConfig+0x3f8>
 8008960:	4b5b      	ldr	r3, [pc, #364]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	061b      	lsls	r3, r3, #24
 800896e:	4958      	ldr	r1, [pc, #352]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008970:	4313      	orrs	r3, r2
 8008972:	60cb      	str	r3, [r1, #12]
 8008974:	e018      	b.n	80089a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008976:	4b56      	ldr	r3, [pc, #344]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a55      	ldr	r2, [pc, #340]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 800897c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008982:	f7fc f967 	bl	8004c54 <HAL_GetTick>
 8008986:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008988:	e008      	b.n	800899c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800898a:	f7fc f963 	bl	8004c54 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b02      	cmp	r3, #2
 8008996:	d901      	bls.n	800899c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e212      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800899c:	4b4c      	ldr	r3, [pc, #304]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1f0      	bne.n	800898a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0308 	and.w	r3, r3, #8
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d036      	beq.n	8008a22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d019      	beq.n	80089f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089bc:	4b44      	ldr	r3, [pc, #272]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80089be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089c0:	4a43      	ldr	r2, [pc, #268]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c8:	f7fc f944 	bl	8004c54 <HAL_GetTick>
 80089cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80089ce:	e008      	b.n	80089e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089d0:	f7fc f940 	bl	8004c54 <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d901      	bls.n	80089e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e1ef      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80089e2:	4b3b      	ldr	r3, [pc, #236]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80089e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0f0      	beq.n	80089d0 <HAL_RCC_OscConfig+0x420>
 80089ee:	e018      	b.n	8008a22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089f0:	4b37      	ldr	r3, [pc, #220]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80089f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f4:	4a36      	ldr	r2, [pc, #216]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 80089f6:	f023 0301 	bic.w	r3, r3, #1
 80089fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089fc:	f7fc f92a 	bl	8004c54 <HAL_GetTick>
 8008a00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a02:	e008      	b.n	8008a16 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a04:	f7fc f926 	bl	8004c54 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e1d5      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008a16:	4b2e      	ldr	r3, [pc, #184]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a1a:	f003 0302 	and.w	r3, r3, #2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f0      	bne.n	8008a04 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d036      	beq.n	8008a9c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d019      	beq.n	8008a6a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a36:	4b26      	ldr	r3, [pc, #152]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a25      	ldr	r2, [pc, #148]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a42:	f7fc f907 	bl	8004c54 <HAL_GetTick>
 8008a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a48:	e008      	b.n	8008a5c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008a4a:	f7fc f903 	bl	8004c54 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d901      	bls.n	8008a5c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e1b2      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a5c:	4b1c      	ldr	r3, [pc, #112]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0f0      	beq.n	8008a4a <HAL_RCC_OscConfig+0x49a>
 8008a68:	e018      	b.n	8008a9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a6a:	4b19      	ldr	r3, [pc, #100]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a18      	ldr	r2, [pc, #96]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008a76:	f7fc f8ed 	bl	8004c54 <HAL_GetTick>
 8008a7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a7c:	e008      	b.n	8008a90 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008a7e:	f7fc f8e9 	bl	8004c54 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d901      	bls.n	8008a90 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e198      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a90:	4b0f      	ldr	r3, [pc, #60]	; (8008ad0 <HAL_RCC_OscConfig+0x520>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1f0      	bne.n	8008a7e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0304 	and.w	r3, r3, #4
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 8085 	beq.w	8008bb4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <HAL_RCC_OscConfig+0x524>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a09      	ldr	r2, [pc, #36]	; (8008ad4 <HAL_RCC_OscConfig+0x524>)
 8008ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ab4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ab6:	f7fc f8cd 	bl	8004c54 <HAL_GetTick>
 8008aba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008abc:	e00c      	b.n	8008ad8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008abe:	f7fc f8c9 	bl	8004c54 <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b64      	cmp	r3, #100	; 0x64
 8008aca:	d905      	bls.n	8008ad8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e178      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
 8008ad0:	58024400 	.word	0x58024400
 8008ad4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ad8:	4b96      	ldr	r3, [pc, #600]	; (8008d34 <HAL_RCC_OscConfig+0x784>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d0ec      	beq.n	8008abe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d106      	bne.n	8008afa <HAL_RCC_OscConfig+0x54a>
 8008aec:	4b92      	ldr	r3, [pc, #584]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af0:	4a91      	ldr	r2, [pc, #580]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008af2:	f043 0301 	orr.w	r3, r3, #1
 8008af6:	6713      	str	r3, [r2, #112]	; 0x70
 8008af8:	e02d      	b.n	8008b56 <HAL_RCC_OscConfig+0x5a6>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10c      	bne.n	8008b1c <HAL_RCC_OscConfig+0x56c>
 8008b02:	4b8d      	ldr	r3, [pc, #564]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b06:	4a8c      	ldr	r2, [pc, #560]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b08:	f023 0301 	bic.w	r3, r3, #1
 8008b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b0e:	4b8a      	ldr	r3, [pc, #552]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b12:	4a89      	ldr	r2, [pc, #548]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b14:	f023 0304 	bic.w	r3, r3, #4
 8008b18:	6713      	str	r3, [r2, #112]	; 0x70
 8008b1a:	e01c      	b.n	8008b56 <HAL_RCC_OscConfig+0x5a6>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	2b05      	cmp	r3, #5
 8008b22:	d10c      	bne.n	8008b3e <HAL_RCC_OscConfig+0x58e>
 8008b24:	4b84      	ldr	r3, [pc, #528]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b28:	4a83      	ldr	r2, [pc, #524]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b2a:	f043 0304 	orr.w	r3, r3, #4
 8008b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8008b30:	4b81      	ldr	r3, [pc, #516]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b34:	4a80      	ldr	r2, [pc, #512]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b36:	f043 0301 	orr.w	r3, r3, #1
 8008b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b3c:	e00b      	b.n	8008b56 <HAL_RCC_OscConfig+0x5a6>
 8008b3e:	4b7e      	ldr	r3, [pc, #504]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b42:	4a7d      	ldr	r2, [pc, #500]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b44:	f023 0301 	bic.w	r3, r3, #1
 8008b48:	6713      	str	r3, [r2, #112]	; 0x70
 8008b4a:	4b7b      	ldr	r3, [pc, #492]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4e:	4a7a      	ldr	r2, [pc, #488]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b50:	f023 0304 	bic.w	r3, r3, #4
 8008b54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d015      	beq.n	8008b8a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b5e:	f7fc f879 	bl	8004c54 <HAL_GetTick>
 8008b62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b64:	e00a      	b.n	8008b7c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b66:	f7fc f875 	bl	8004c54 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d901      	bls.n	8008b7c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e122      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b7c:	4b6e      	ldr	r3, [pc, #440]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0ee      	beq.n	8008b66 <HAL_RCC_OscConfig+0x5b6>
 8008b88:	e014      	b.n	8008bb4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b8a:	f7fc f863 	bl	8004c54 <HAL_GetTick>
 8008b8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b90:	e00a      	b.n	8008ba8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b92:	f7fc f85f 	bl	8004c54 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d901      	bls.n	8008ba8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e10c      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ba8:	4b63      	ldr	r3, [pc, #396]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1ee      	bne.n	8008b92 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 8101 	beq.w	8008dc0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008bbe:	4b5e      	ldr	r3, [pc, #376]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bc6:	2b18      	cmp	r3, #24
 8008bc8:	f000 80bc 	beq.w	8008d44 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	f040 8095 	bne.w	8008d00 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bd6:	4b58      	ldr	r3, [pc, #352]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a57      	ldr	r2, [pc, #348]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008bdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be2:	f7fc f837 	bl	8004c54 <HAL_GetTick>
 8008be6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008be8:	e008      	b.n	8008bfc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bea:	f7fc f833 	bl	8004c54 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d901      	bls.n	8008bfc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e0e2      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bfc:	4b4e      	ldr	r3, [pc, #312]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1f0      	bne.n	8008bea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c08:	4b4b      	ldr	r3, [pc, #300]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c0c:	4b4b      	ldr	r3, [pc, #300]	; (8008d3c <HAL_RCC_OscConfig+0x78c>)
 8008c0e:	4013      	ands	r3, r2
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008c18:	0112      	lsls	r2, r2, #4
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	4946      	ldr	r1, [pc, #280]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	628b      	str	r3, [r1, #40]	; 0x28
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c26:	3b01      	subs	r3, #1
 8008c28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c30:	3b01      	subs	r3, #1
 8008c32:	025b      	lsls	r3, r3, #9
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	041b      	lsls	r3, r3, #16
 8008c40:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c44:	431a      	orrs	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	061b      	lsls	r3, r3, #24
 8008c4e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c52:	4939      	ldr	r1, [pc, #228]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c54:	4313      	orrs	r3, r2
 8008c56:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008c58:	4b37      	ldr	r3, [pc, #220]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	4a36      	ldr	r2, [pc, #216]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c5e:	f023 0301 	bic.w	r3, r3, #1
 8008c62:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c64:	4b34      	ldr	r3, [pc, #208]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c68:	4b35      	ldr	r3, [pc, #212]	; (8008d40 <HAL_RCC_OscConfig+0x790>)
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008c70:	00d2      	lsls	r2, r2, #3
 8008c72:	4931      	ldr	r1, [pc, #196]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008c78:	4b2f      	ldr	r3, [pc, #188]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7c:	f023 020c 	bic.w	r2, r3, #12
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c84:	492c      	ldr	r1, [pc, #176]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008c8a:	4b2b      	ldr	r3, [pc, #172]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	f023 0202 	bic.w	r2, r3, #2
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c96:	4928      	ldr	r1, [pc, #160]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008c9c:	4b26      	ldr	r3, [pc, #152]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	4a25      	ldr	r2, [pc, #148]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca8:	4b23      	ldr	r3, [pc, #140]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cac:	4a22      	ldr	r2, [pc, #136]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008cb4:	4b20      	ldr	r3, [pc, #128]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	4a1f      	ldr	r2, [pc, #124]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008cc0:	4b1d      	ldr	r3, [pc, #116]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	4a1c      	ldr	r2, [pc, #112]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008cc6:	f043 0301 	orr.w	r3, r3, #1
 8008cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ccc:	4b1a      	ldr	r3, [pc, #104]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a19      	ldr	r2, [pc, #100]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd8:	f7fb ffbc 	bl	8004c54 <HAL_GetTick>
 8008cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cde:	e008      	b.n	8008cf2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ce0:	f7fb ffb8 	bl	8004c54 <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d901      	bls.n	8008cf2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e067      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cf2:	4b11      	ldr	r3, [pc, #68]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0f0      	beq.n	8008ce0 <HAL_RCC_OscConfig+0x730>
 8008cfe:	e05f      	b.n	8008dc0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d00:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a0c      	ldr	r2, [pc, #48]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d0c:	f7fb ffa2 	bl	8004c54 <HAL_GetTick>
 8008d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d14:	f7fb ff9e 	bl	8004c54 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e04d      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d26:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <HAL_RCC_OscConfig+0x788>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1f0      	bne.n	8008d14 <HAL_RCC_OscConfig+0x764>
 8008d32:	e045      	b.n	8008dc0 <HAL_RCC_OscConfig+0x810>
 8008d34:	58024800 	.word	0x58024800
 8008d38:	58024400 	.word	0x58024400
 8008d3c:	fffffc0c 	.word	0xfffffc0c
 8008d40:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008d44:	4b21      	ldr	r3, [pc, #132]	; (8008dcc <HAL_RCC_OscConfig+0x81c>)
 8008d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008d4a:	4b20      	ldr	r3, [pc, #128]	; (8008dcc <HAL_RCC_OscConfig+0x81c>)
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d031      	beq.n	8008dbc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f003 0203 	and.w	r2, r3, #3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d12a      	bne.n	8008dbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	091b      	lsrs	r3, r3, #4
 8008d6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d122      	bne.n	8008dbc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d11a      	bne.n	8008dbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	0a5b      	lsrs	r3, r3, #9
 8008d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d111      	bne.n	8008dbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	0c1b      	lsrs	r3, r3, #16
 8008d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d108      	bne.n	8008dbc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	0e1b      	lsrs	r3, r3, #24
 8008dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d001      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e000      	b.n	8008dc2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3730      	adds	r7, #48	; 0x30
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	58024400 	.word	0x58024400

08008dd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e19c      	b.n	800911e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008de4:	4b8a      	ldr	r3, [pc, #552]	; (8009010 <HAL_RCC_ClockConfig+0x240>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 030f 	and.w	r3, r3, #15
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d910      	bls.n	8008e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008df2:	4b87      	ldr	r3, [pc, #540]	; (8009010 <HAL_RCC_ClockConfig+0x240>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f023 020f 	bic.w	r2, r3, #15
 8008dfa:	4985      	ldr	r1, [pc, #532]	; (8009010 <HAL_RCC_ClockConfig+0x240>)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e02:	4b83      	ldr	r3, [pc, #524]	; (8009010 <HAL_RCC_ClockConfig+0x240>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 030f 	and.w	r3, r3, #15
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d001      	beq.n	8008e14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e184      	b.n	800911e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0304 	and.w	r3, r3, #4
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d010      	beq.n	8008e42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691a      	ldr	r2, [r3, #16]
 8008e24:	4b7b      	ldr	r3, [pc, #492]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d908      	bls.n	8008e42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e30:	4b78      	ldr	r3, [pc, #480]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	4975      	ldr	r1, [pc, #468]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d010      	beq.n	8008e70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	695a      	ldr	r2, [r3, #20]
 8008e52:	4b70      	ldr	r3, [pc, #448]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d908      	bls.n	8008e70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e5e:	4b6d      	ldr	r3, [pc, #436]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	496a      	ldr	r1, [pc, #424]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0310 	and.w	r3, r3, #16
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d010      	beq.n	8008e9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	699a      	ldr	r2, [r3, #24]
 8008e80:	4b64      	ldr	r3, [pc, #400]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d908      	bls.n	8008e9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e8c:	4b61      	ldr	r3, [pc, #388]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	495e      	ldr	r1, [pc, #376]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0320 	and.w	r3, r3, #32
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d010      	beq.n	8008ecc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	69da      	ldr	r2, [r3, #28]
 8008eae:	4b59      	ldr	r3, [pc, #356]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d908      	bls.n	8008ecc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008eba:	4b56      	ldr	r3, [pc, #344]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	4953      	ldr	r1, [pc, #332]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0302 	and.w	r3, r3, #2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d010      	beq.n	8008efa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	4b4d      	ldr	r3, [pc, #308]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	f003 030f 	and.w	r3, r3, #15
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d908      	bls.n	8008efa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ee8:	4b4a      	ldr	r3, [pc, #296]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	f023 020f 	bic.w	r2, r3, #15
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	4947      	ldr	r1, [pc, #284]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d055      	beq.n	8008fb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008f06:	4b43      	ldr	r3, [pc, #268]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	4940      	ldr	r1, [pc, #256]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d107      	bne.n	8008f30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f20:	4b3c      	ldr	r3, [pc, #240]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d121      	bne.n	8008f70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e0f6      	b.n	800911e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d107      	bne.n	8008f48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f38:	4b36      	ldr	r3, [pc, #216]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d115      	bne.n	8008f70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e0ea      	b.n	800911e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d107      	bne.n	8008f60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f50:	4b30      	ldr	r3, [pc, #192]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d109      	bne.n	8008f70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e0de      	b.n	800911e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f60:	4b2c      	ldr	r3, [pc, #176]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0304 	and.w	r3, r3, #4
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e0d6      	b.n	800911e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f70:	4b28      	ldr	r3, [pc, #160]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f023 0207 	bic.w	r2, r3, #7
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	4925      	ldr	r1, [pc, #148]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f82:	f7fb fe67 	bl	8004c54 <HAL_GetTick>
 8008f86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f88:	e00a      	b.n	8008fa0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f8a:	f7fb fe63 	bl	8004c54 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d901      	bls.n	8008fa0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e0be      	b.n	800911e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fa0:	4b1c      	ldr	r3, [pc, #112]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	00db      	lsls	r3, r3, #3
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d1eb      	bne.n	8008f8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d010      	beq.n	8008fe0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	4b14      	ldr	r3, [pc, #80]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	f003 030f 	and.w	r3, r3, #15
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d208      	bcs.n	8008fe0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fce:	4b11      	ldr	r3, [pc, #68]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	f023 020f 	bic.w	r2, r3, #15
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	490e      	ldr	r1, [pc, #56]	; (8009014 <HAL_RCC_ClockConfig+0x244>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008fe0:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <HAL_RCC_ClockConfig+0x240>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 030f 	and.w	r3, r3, #15
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d214      	bcs.n	8009018 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fee:	4b08      	ldr	r3, [pc, #32]	; (8009010 <HAL_RCC_ClockConfig+0x240>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f023 020f 	bic.w	r2, r3, #15
 8008ff6:	4906      	ldr	r1, [pc, #24]	; (8009010 <HAL_RCC_ClockConfig+0x240>)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ffe:	4b04      	ldr	r3, [pc, #16]	; (8009010 <HAL_RCC_ClockConfig+0x240>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d005      	beq.n	8009018 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e086      	b.n	800911e <HAL_RCC_ClockConfig+0x34e>
 8009010:	52002000 	.word	0x52002000
 8009014:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b00      	cmp	r3, #0
 8009022:	d010      	beq.n	8009046 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691a      	ldr	r2, [r3, #16]
 8009028:	4b3f      	ldr	r3, [pc, #252]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009030:	429a      	cmp	r2, r3
 8009032:	d208      	bcs.n	8009046 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009034:	4b3c      	ldr	r3, [pc, #240]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	4939      	ldr	r1, [pc, #228]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 8009042:	4313      	orrs	r3, r2
 8009044:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0308 	and.w	r3, r3, #8
 800904e:	2b00      	cmp	r3, #0
 8009050:	d010      	beq.n	8009074 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	695a      	ldr	r2, [r3, #20]
 8009056:	4b34      	ldr	r3, [pc, #208]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800905e:	429a      	cmp	r2, r3
 8009060:	d208      	bcs.n	8009074 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009062:	4b31      	ldr	r3, [pc, #196]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	492e      	ldr	r1, [pc, #184]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 8009070:	4313      	orrs	r3, r2
 8009072:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0310 	and.w	r3, r3, #16
 800907c:	2b00      	cmp	r3, #0
 800907e:	d010      	beq.n	80090a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699a      	ldr	r2, [r3, #24]
 8009084:	4b28      	ldr	r3, [pc, #160]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800908c:	429a      	cmp	r2, r3
 800908e:	d208      	bcs.n	80090a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009090:	4b25      	ldr	r3, [pc, #148]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 8009092:	69db      	ldr	r3, [r3, #28]
 8009094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	4922      	ldr	r1, [pc, #136]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d010      	beq.n	80090d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69da      	ldr	r2, [r3, #28]
 80090b2:	4b1d      	ldr	r3, [pc, #116]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d208      	bcs.n	80090d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80090be:	4b1a      	ldr	r3, [pc, #104]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	4917      	ldr	r1, [pc, #92]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80090d0:	f000 f834 	bl	800913c <HAL_RCC_GetSysClockFreq>
 80090d4:	4602      	mov	r2, r0
 80090d6:	4b14      	ldr	r3, [pc, #80]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	f003 030f 	and.w	r3, r3, #15
 80090e0:	4912      	ldr	r1, [pc, #72]	; (800912c <HAL_RCC_ClockConfig+0x35c>)
 80090e2:	5ccb      	ldrb	r3, [r1, r3]
 80090e4:	f003 031f 	and.w	r3, r3, #31
 80090e8:	fa22 f303 	lsr.w	r3, r2, r3
 80090ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090ee:	4b0e      	ldr	r3, [pc, #56]	; (8009128 <HAL_RCC_ClockConfig+0x358>)
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	f003 030f 	and.w	r3, r3, #15
 80090f6:	4a0d      	ldr	r2, [pc, #52]	; (800912c <HAL_RCC_ClockConfig+0x35c>)
 80090f8:	5cd3      	ldrb	r3, [r2, r3]
 80090fa:	f003 031f 	and.w	r3, r3, #31
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	fa22 f303 	lsr.w	r3, r2, r3
 8009104:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <HAL_RCC_ClockConfig+0x360>)
 8009106:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009108:	4a0a      	ldr	r2, [pc, #40]	; (8009134 <HAL_RCC_ClockConfig+0x364>)
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800910e:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <HAL_RCC_ClockConfig+0x368>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4618      	mov	r0, r3
 8009114:	f7f9 f87c 	bl	8002210 <HAL_InitTick>
 8009118:	4603      	mov	r3, r0
 800911a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	58024400 	.word	0x58024400
 800912c:	0801808c 	.word	0x0801808c
 8009130:	24000048 	.word	0x24000048
 8009134:	24000044 	.word	0x24000044
 8009138:	240000dc 	.word	0x240000dc

0800913c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800913c:	b480      	push	{r7}
 800913e:	b089      	sub	sp, #36	; 0x24
 8009140:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009142:	4bb3      	ldr	r3, [pc, #716]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800914a:	2b18      	cmp	r3, #24
 800914c:	f200 8155 	bhi.w	80093fa <HAL_RCC_GetSysClockFreq+0x2be>
 8009150:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	080091bd 	.word	0x080091bd
 800915c:	080093fb 	.word	0x080093fb
 8009160:	080093fb 	.word	0x080093fb
 8009164:	080093fb 	.word	0x080093fb
 8009168:	080093fb 	.word	0x080093fb
 800916c:	080093fb 	.word	0x080093fb
 8009170:	080093fb 	.word	0x080093fb
 8009174:	080093fb 	.word	0x080093fb
 8009178:	080091e3 	.word	0x080091e3
 800917c:	080093fb 	.word	0x080093fb
 8009180:	080093fb 	.word	0x080093fb
 8009184:	080093fb 	.word	0x080093fb
 8009188:	080093fb 	.word	0x080093fb
 800918c:	080093fb 	.word	0x080093fb
 8009190:	080093fb 	.word	0x080093fb
 8009194:	080093fb 	.word	0x080093fb
 8009198:	080091e9 	.word	0x080091e9
 800919c:	080093fb 	.word	0x080093fb
 80091a0:	080093fb 	.word	0x080093fb
 80091a4:	080093fb 	.word	0x080093fb
 80091a8:	080093fb 	.word	0x080093fb
 80091ac:	080093fb 	.word	0x080093fb
 80091b0:	080093fb 	.word	0x080093fb
 80091b4:	080093fb 	.word	0x080093fb
 80091b8:	080091ef 	.word	0x080091ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091bc:	4b94      	ldr	r3, [pc, #592]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0320 	and.w	r3, r3, #32
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d009      	beq.n	80091dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091c8:	4b91      	ldr	r3, [pc, #580]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	08db      	lsrs	r3, r3, #3
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	4a90      	ldr	r2, [pc, #576]	; (8009414 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091d4:	fa22 f303 	lsr.w	r3, r2, r3
 80091d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80091da:	e111      	b.n	8009400 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80091dc:	4b8d      	ldr	r3, [pc, #564]	; (8009414 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091de:	61bb      	str	r3, [r7, #24]
    break;
 80091e0:	e10e      	b.n	8009400 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80091e2:	4b8d      	ldr	r3, [pc, #564]	; (8009418 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091e4:	61bb      	str	r3, [r7, #24]
    break;
 80091e6:	e10b      	b.n	8009400 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80091e8:	4b8c      	ldr	r3, [pc, #560]	; (800941c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80091ea:	61bb      	str	r3, [r7, #24]
    break;
 80091ec:	e108      	b.n	8009400 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091ee:	4b88      	ldr	r3, [pc, #544]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	f003 0303 	and.w	r3, r3, #3
 80091f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80091f8:	4b85      	ldr	r3, [pc, #532]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fc:	091b      	lsrs	r3, r3, #4
 80091fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009202:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009204:	4b82      	ldr	r3, [pc, #520]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800920e:	4b80      	ldr	r3, [pc, #512]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009212:	08db      	lsrs	r3, r3, #3
 8009214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	fb02 f303 	mul.w	r3, r2, r3
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009226:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 80e1 	beq.w	80093f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b02      	cmp	r3, #2
 8009236:	f000 8083 	beq.w	8009340 <HAL_RCC_GetSysClockFreq+0x204>
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b02      	cmp	r3, #2
 800923e:	f200 80a1 	bhi.w	8009384 <HAL_RCC_GetSysClockFreq+0x248>
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_RCC_GetSysClockFreq+0x114>
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d056      	beq.n	80092fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800924e:	e099      	b.n	8009384 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009250:	4b6f      	ldr	r3, [pc, #444]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	d02d      	beq.n	80092b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800925c:	4b6c      	ldr	r3, [pc, #432]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	08db      	lsrs	r3, r3, #3
 8009262:	f003 0303 	and.w	r3, r3, #3
 8009266:	4a6b      	ldr	r2, [pc, #428]	; (8009414 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009268:	fa22 f303 	lsr.w	r3, r2, r3
 800926c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	ee07 3a90 	vmov	s15, r3
 8009274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	ee07 3a90 	vmov	s15, r3
 800927e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009286:	4b62      	ldr	r3, [pc, #392]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009296:	ed97 6a02 	vldr	s12, [r7, #8]
 800929a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009420 <HAL_RCC_GetSysClockFreq+0x2e4>
 800929e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80092b6:	e087      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	ee07 3a90 	vmov	s15, r3
 80092be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009424 <HAL_RCC_GetSysClockFreq+0x2e8>
 80092c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ca:	4b51      	ldr	r3, [pc, #324]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092da:	ed97 6a02 	vldr	s12, [r7, #8]
 80092de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009420 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092fa:	e065      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009306:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009428 <HAL_RCC_GetSysClockFreq+0x2ec>
 800930a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930e:	4b40      	ldr	r3, [pc, #256]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009322:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009420 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800933e:	e043      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800942c <HAL_RCC_GetSysClockFreq+0x2f0>
 800934e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009352:	4b2f      	ldr	r3, [pc, #188]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009362:	ed97 6a02 	vldr	s12, [r7, #8]
 8009366:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009420 <HAL_RCC_GetSysClockFreq+0x2e4>
 800936a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009382:	e021      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009428 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009396:	4b1e      	ldr	r3, [pc, #120]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80093aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009420 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80093c8:	4b11      	ldr	r3, [pc, #68]	; (8009410 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093cc:	0a5b      	lsrs	r3, r3, #9
 80093ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d2:	3301      	adds	r3, #1
 80093d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	ee07 3a90 	vmov	s15, r3
 80093dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80093e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ec:	ee17 3a90 	vmov	r3, s15
 80093f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80093f2:	e005      	b.n	8009400 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	61bb      	str	r3, [r7, #24]
    break;
 80093f8:	e002      	b.n	8009400 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093fc:	61bb      	str	r3, [r7, #24]
    break;
 80093fe:	bf00      	nop
  }

  return sysclockfreq;
 8009400:	69bb      	ldr	r3, [r7, #24]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3724      	adds	r7, #36	; 0x24
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	58024400 	.word	0x58024400
 8009414:	03d09000 	.word	0x03d09000
 8009418:	003d0900 	.word	0x003d0900
 800941c:	017d7840 	.word	0x017d7840
 8009420:	46000000 	.word	0x46000000
 8009424:	4c742400 	.word	0x4c742400
 8009428:	4a742400 	.word	0x4a742400
 800942c:	4bbebc20 	.word	0x4bbebc20

08009430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009436:	f7ff fe81 	bl	800913c <HAL_RCC_GetSysClockFreq>
 800943a:	4602      	mov	r2, r0
 800943c:	4b10      	ldr	r3, [pc, #64]	; (8009480 <HAL_RCC_GetHCLKFreq+0x50>)
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	0a1b      	lsrs	r3, r3, #8
 8009442:	f003 030f 	and.w	r3, r3, #15
 8009446:	490f      	ldr	r1, [pc, #60]	; (8009484 <HAL_RCC_GetHCLKFreq+0x54>)
 8009448:	5ccb      	ldrb	r3, [r1, r3]
 800944a:	f003 031f 	and.w	r3, r3, #31
 800944e:	fa22 f303 	lsr.w	r3, r2, r3
 8009452:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009454:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <HAL_RCC_GetHCLKFreq+0x50>)
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	4a09      	ldr	r2, [pc, #36]	; (8009484 <HAL_RCC_GetHCLKFreq+0x54>)
 800945e:	5cd3      	ldrb	r3, [r2, r3]
 8009460:	f003 031f 	and.w	r3, r3, #31
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	fa22 f303 	lsr.w	r3, r2, r3
 800946a:	4a07      	ldr	r2, [pc, #28]	; (8009488 <HAL_RCC_GetHCLKFreq+0x58>)
 800946c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800946e:	4a07      	ldr	r2, [pc, #28]	; (800948c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009474:	4b04      	ldr	r3, [pc, #16]	; (8009488 <HAL_RCC_GetHCLKFreq+0x58>)
 8009476:	681b      	ldr	r3, [r3, #0]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	58024400 	.word	0x58024400
 8009484:	0801808c 	.word	0x0801808c
 8009488:	24000048 	.word	0x24000048
 800948c:	24000044 	.word	0x24000044

08009490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009494:	f7ff ffcc 	bl	8009430 <HAL_RCC_GetHCLKFreq>
 8009498:	4602      	mov	r2, r0
 800949a:	4b06      	ldr	r3, [pc, #24]	; (80094b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	091b      	lsrs	r3, r3, #4
 80094a0:	f003 0307 	and.w	r3, r3, #7
 80094a4:	4904      	ldr	r1, [pc, #16]	; (80094b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80094a6:	5ccb      	ldrb	r3, [r1, r3]
 80094a8:	f003 031f 	and.w	r3, r3, #31
 80094ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	58024400 	.word	0x58024400
 80094b8:	0801808c 	.word	0x0801808c

080094bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80094c0:	f7ff ffb6 	bl	8009430 <HAL_RCC_GetHCLKFreq>
 80094c4:	4602      	mov	r2, r0
 80094c6:	4b06      	ldr	r3, [pc, #24]	; (80094e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	0a1b      	lsrs	r3, r3, #8
 80094cc:	f003 0307 	and.w	r3, r3, #7
 80094d0:	4904      	ldr	r1, [pc, #16]	; (80094e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80094d2:	5ccb      	ldrb	r3, [r1, r3]
 80094d4:	f003 031f 	and.w	r3, r3, #31
 80094d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80094dc:	4618      	mov	r0, r3
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	58024400 	.word	0x58024400
 80094e4:	0801808c 	.word	0x0801808c

080094e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	223f      	movs	r2, #63	; 0x3f
 80094f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80094f8:	4b1a      	ldr	r3, [pc, #104]	; (8009564 <HAL_RCC_GetClockConfig+0x7c>)
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	f003 0207 	and.w	r2, r3, #7
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009504:	4b17      	ldr	r3, [pc, #92]	; (8009564 <HAL_RCC_GetClockConfig+0x7c>)
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009510:	4b14      	ldr	r3, [pc, #80]	; (8009564 <HAL_RCC_GetClockConfig+0x7c>)
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	f003 020f 	and.w	r2, r3, #15
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800951c:	4b11      	ldr	r3, [pc, #68]	; (8009564 <HAL_RCC_GetClockConfig+0x7c>)
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009528:	4b0e      	ldr	r3, [pc, #56]	; (8009564 <HAL_RCC_GetClockConfig+0x7c>)
 800952a:	69db      	ldr	r3, [r3, #28]
 800952c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009534:	4b0b      	ldr	r3, [pc, #44]	; (8009564 <HAL_RCC_GetClockConfig+0x7c>)
 8009536:	69db      	ldr	r3, [r3, #28]
 8009538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009540:	4b08      	ldr	r3, [pc, #32]	; (8009564 <HAL_RCC_GetClockConfig+0x7c>)
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <HAL_RCC_GetClockConfig+0x80>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 020f 	and.w	r2, r3, #15
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	601a      	str	r2, [r3, #0]
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	58024400 	.word	0x58024400
 8009568:	52002000 	.word	0x52002000

0800956c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009574:	2300      	movs	r3, #0
 8009576:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009578:	2300      	movs	r3, #0
 800957a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d03f      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800958c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009590:	d02a      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009592:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009596:	d824      	bhi.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800959c:	d018      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800959e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095a2:	d81e      	bhi.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d003      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80095a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095ac:	d007      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80095ae:	e018      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b0:	4bab      	ldr	r3, [pc, #684]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b4:	4aaa      	ldr	r2, [pc, #680]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80095bc:	e015      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	3304      	adds	r3, #4
 80095c2:	2102      	movs	r1, #2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f001 fff3 	bl	800b5b0 <RCCEx_PLL2_Config>
 80095ca:	4603      	mov	r3, r0
 80095cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80095ce:	e00c      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3324      	adds	r3, #36	; 0x24
 80095d4:	2102      	movs	r1, #2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f002 f89c 	bl	800b714 <RCCEx_PLL3_Config>
 80095dc:	4603      	mov	r3, r0
 80095de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80095e0:	e003      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	75fb      	strb	r3, [r7, #23]
      break;
 80095e6:	e000      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80095e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d109      	bne.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80095f0:	4b9b      	ldr	r3, [pc, #620]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095fc:	4998      	ldr	r1, [pc, #608]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	650b      	str	r3, [r1, #80]	; 0x50
 8009602:	e001      	b.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009610:	2b00      	cmp	r3, #0
 8009612:	d03d      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009618:	2b04      	cmp	r3, #4
 800961a:	d826      	bhi.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800961c:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800961e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009622:	bf00      	nop
 8009624:	08009639 	.word	0x08009639
 8009628:	08009647 	.word	0x08009647
 800962c:	08009659 	.word	0x08009659
 8009630:	08009671 	.word	0x08009671
 8009634:	08009671 	.word	0x08009671
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009638:	4b89      	ldr	r3, [pc, #548]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963c:	4a88      	ldr	r2, [pc, #544]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800963e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009642:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009644:	e015      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3304      	adds	r3, #4
 800964a:	2100      	movs	r1, #0
 800964c:	4618      	mov	r0, r3
 800964e:	f001 ffaf 	bl	800b5b0 <RCCEx_PLL2_Config>
 8009652:	4603      	mov	r3, r0
 8009654:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009656:	e00c      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3324      	adds	r3, #36	; 0x24
 800965c:	2100      	movs	r1, #0
 800965e:	4618      	mov	r0, r3
 8009660:	f002 f858 	bl	800b714 <RCCEx_PLL3_Config>
 8009664:	4603      	mov	r3, r0
 8009666:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009668:	e003      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	75fb      	strb	r3, [r7, #23]
      break;
 800966e:	e000      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009678:	4b79      	ldr	r3, [pc, #484]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800967a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800967c:	f023 0207 	bic.w	r2, r3, #7
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009684:	4976      	ldr	r1, [pc, #472]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009686:	4313      	orrs	r3, r2
 8009688:	650b      	str	r3, [r1, #80]	; 0x50
 800968a:	e001      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009698:	2b00      	cmp	r3, #0
 800969a:	d042      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a4:	d02b      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80096a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096aa:	d825      	bhi.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80096ac:	2bc0      	cmp	r3, #192	; 0xc0
 80096ae:	d028      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80096b0:	2bc0      	cmp	r3, #192	; 0xc0
 80096b2:	d821      	bhi.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80096b4:	2b80      	cmp	r3, #128	; 0x80
 80096b6:	d016      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80096b8:	2b80      	cmp	r3, #128	; 0x80
 80096ba:	d81d      	bhi.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80096c0:	2b40      	cmp	r3, #64	; 0x40
 80096c2:	d007      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80096c4:	e018      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096c6:	4b66      	ldr	r3, [pc, #408]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ca:	4a65      	ldr	r2, [pc, #404]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80096d2:	e017      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3304      	adds	r3, #4
 80096d8:	2100      	movs	r1, #0
 80096da:	4618      	mov	r0, r3
 80096dc:	f001 ff68 	bl	800b5b0 <RCCEx_PLL2_Config>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80096e4:	e00e      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3324      	adds	r3, #36	; 0x24
 80096ea:	2100      	movs	r1, #0
 80096ec:	4618      	mov	r0, r3
 80096ee:	f002 f811 	bl	800b714 <RCCEx_PLL3_Config>
 80096f2:	4603      	mov	r3, r0
 80096f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80096f6:	e005      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	75fb      	strb	r3, [r7, #23]
      break;
 80096fc:	e002      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80096fe:	bf00      	nop
 8009700:	e000      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009704:	7dfb      	ldrb	r3, [r7, #23]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800970a:	4b55      	ldr	r3, [pc, #340]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800970c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800970e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009716:	4952      	ldr	r1, [pc, #328]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009718:	4313      	orrs	r3, r2
 800971a:	650b      	str	r3, [r1, #80]	; 0x50
 800971c:	e001      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800972a:	2b00      	cmp	r3, #0
 800972c:	d049      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009734:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009738:	d030      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800973a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800973e:	d82a      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009740:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009744:	d02c      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009746:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800974a:	d824      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800974c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009750:	d018      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009756:	d81e      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800975c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009760:	d007      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009762:	e018      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009764:	4b3e      	ldr	r3, [pc, #248]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	4a3d      	ldr	r2, [pc, #244]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800976a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800976e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009770:	e017      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3304      	adds	r3, #4
 8009776:	2100      	movs	r1, #0
 8009778:	4618      	mov	r0, r3
 800977a:	f001 ff19 	bl	800b5b0 <RCCEx_PLL2_Config>
 800977e:	4603      	mov	r3, r0
 8009780:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009782:	e00e      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3324      	adds	r3, #36	; 0x24
 8009788:	2100      	movs	r1, #0
 800978a:	4618      	mov	r0, r3
 800978c:	f001 ffc2 	bl	800b714 <RCCEx_PLL3_Config>
 8009790:	4603      	mov	r3, r0
 8009792:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009794:	e005      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	75fb      	strb	r3, [r7, #23]
      break;
 800979a:	e002      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800979c:	bf00      	nop
 800979e:	e000      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80097a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10a      	bne.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097a8:	4b2d      	ldr	r3, [pc, #180]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097b6:	492a      	ldr	r1, [pc, #168]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097b8:	4313      	orrs	r3, r2
 80097ba:	658b      	str	r3, [r1, #88]	; 0x58
 80097bc:	e001      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097be:	7dfb      	ldrb	r3, [r7, #23]
 80097c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d04c      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097d8:	d030      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80097da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097de:	d82a      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80097e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80097e4:	d02c      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80097e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80097ea:	d824      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80097ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097f0:	d018      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80097f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097f6:	d81e      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80097fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009800:	d007      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009802:	e018      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009804:	4b16      	ldr	r3, [pc, #88]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	4a15      	ldr	r2, [pc, #84]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800980a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800980e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009810:	e017      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3304      	adds	r3, #4
 8009816:	2100      	movs	r1, #0
 8009818:	4618      	mov	r0, r3
 800981a:	f001 fec9 	bl	800b5b0 <RCCEx_PLL2_Config>
 800981e:	4603      	mov	r3, r0
 8009820:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009822:	e00e      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	2100      	movs	r1, #0
 800982a:	4618      	mov	r0, r3
 800982c:	f001 ff72 	bl	800b714 <RCCEx_PLL3_Config>
 8009830:	4603      	mov	r3, r0
 8009832:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009834:	e005      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	75fb      	strb	r3, [r7, #23]
      break;
 800983a:	e002      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800983c:	bf00      	nop
 800983e:	e000      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009842:	7dfb      	ldrb	r3, [r7, #23]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10d      	bne.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800984a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009856:	4902      	ldr	r1, [pc, #8]	; (8009860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009858:	4313      	orrs	r3, r2
 800985a:	658b      	str	r3, [r1, #88]	; 0x58
 800985c:	e004      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800985e:	bf00      	nop
 8009860:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009864:	7dfb      	ldrb	r3, [r7, #23]
 8009866:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d032      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009878:	2b30      	cmp	r3, #48	; 0x30
 800987a:	d01c      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800987c:	2b30      	cmp	r3, #48	; 0x30
 800987e:	d817      	bhi.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009880:	2b20      	cmp	r3, #32
 8009882:	d00c      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009884:	2b20      	cmp	r3, #32
 8009886:	d813      	bhi.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009888:	2b00      	cmp	r3, #0
 800988a:	d016      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800988c:	2b10      	cmp	r3, #16
 800988e:	d10f      	bne.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009890:	4baf      	ldr	r3, [pc, #700]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	4aae      	ldr	r2, [pc, #696]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800989a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800989c:	e00e      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	3304      	adds	r3, #4
 80098a2:	2102      	movs	r1, #2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f001 fe83 	bl	800b5b0 <RCCEx_PLL2_Config>
 80098aa:	4603      	mov	r3, r0
 80098ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80098ae:	e005      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	75fb      	strb	r3, [r7, #23]
      break;
 80098b4:	e002      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80098b6:	bf00      	nop
 80098b8:	e000      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80098ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d109      	bne.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80098c2:	4ba3      	ldr	r3, [pc, #652]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80098c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ce:	49a0      	ldr	r1, [pc, #640]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098d4:	e001      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
 80098d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d047      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098ee:	d030      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80098f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098f4:	d82a      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80098f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80098fa:	d02c      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80098fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009900:	d824      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009906:	d018      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800990c:	d81e      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009916:	d007      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009918:	e018      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800991a:	4b8d      	ldr	r3, [pc, #564]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800991c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991e:	4a8c      	ldr	r2, [pc, #560]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009924:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009926:	e017      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3304      	adds	r3, #4
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f001 fe3e 	bl	800b5b0 <RCCEx_PLL2_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009938:	e00e      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3324      	adds	r3, #36	; 0x24
 800993e:	2100      	movs	r1, #0
 8009940:	4618      	mov	r0, r3
 8009942:	f001 fee7 	bl	800b714 <RCCEx_PLL3_Config>
 8009946:	4603      	mov	r3, r0
 8009948:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800994a:	e005      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]
      break;
 8009950:	e002      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009952:	bf00      	nop
 8009954:	e000      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009958:	7dfb      	ldrb	r3, [r7, #23]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d109      	bne.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800995e:	4b7c      	ldr	r3, [pc, #496]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009962:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800996a:	4979      	ldr	r1, [pc, #484]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800996c:	4313      	orrs	r3, r2
 800996e:	650b      	str	r3, [r1, #80]	; 0x50
 8009970:	e001      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d049      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009986:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800998a:	d02e      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800998c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009990:	d828      	bhi.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009996:	d02a      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009998:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800999c:	d822      	bhi.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800999e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099a2:	d026      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80099a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099a8:	d81c      	bhi.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80099aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099ae:	d010      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80099b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099b4:	d816      	bhi.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d01d      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80099ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099be:	d111      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	2101      	movs	r1, #1
 80099c6:	4618      	mov	r0, r3
 80099c8:	f001 fdf2 	bl	800b5b0 <RCCEx_PLL2_Config>
 80099cc:	4603      	mov	r3, r0
 80099ce:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80099d0:	e012      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	3324      	adds	r3, #36	; 0x24
 80099d6:	2101      	movs	r1, #1
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 fe9b 	bl	800b714 <RCCEx_PLL3_Config>
 80099de:	4603      	mov	r3, r0
 80099e0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80099e2:	e009      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	75fb      	strb	r3, [r7, #23]
      break;
 80099e8:	e006      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80099ea:	bf00      	nop
 80099ec:	e004      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80099ee:	bf00      	nop
 80099f0:	e002      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80099f2:	bf00      	nop
 80099f4:	e000      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80099f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d109      	bne.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80099fe:	4b54      	ldr	r3, [pc, #336]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a02:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a0a:	4951      	ldr	r1, [pc, #324]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	650b      	str	r3, [r1, #80]	; 0x50
 8009a10:	e001      	b.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d04b      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a2c:	d02e      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a32:	d828      	bhi.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a38:	d02a      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a3e:	d822      	bhi.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009a40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a44:	d026      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009a46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a4a:	d81c      	bhi.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a50:	d010      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8009a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a56:	d816      	bhi.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d01d      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a60:	d111      	bne.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	3304      	adds	r3, #4
 8009a66:	2101      	movs	r1, #1
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f001 fda1 	bl	800b5b0 <RCCEx_PLL2_Config>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009a72:	e012      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3324      	adds	r3, #36	; 0x24
 8009a78:	2101      	movs	r1, #1
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 fe4a 	bl	800b714 <RCCEx_PLL3_Config>
 8009a80:	4603      	mov	r3, r0
 8009a82:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009a84:	e009      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	75fb      	strb	r3, [r7, #23]
      break;
 8009a8a:	e006      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009a8c:	bf00      	nop
 8009a8e:	e004      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009a90:	bf00      	nop
 8009a92:	e002      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009a94:	bf00      	nop
 8009a96:	e000      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10a      	bne.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009aa0:	4b2b      	ldr	r3, [pc, #172]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009aae:	4928      	ldr	r1, [pc, #160]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	658b      	str	r3, [r1, #88]	; 0x58
 8009ab4:	e001      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
 8009ab8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d02f      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ace:	d00e      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ad4:	d814      	bhi.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d015      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ade:	d10f      	bne.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ae0:	4b1b      	ldr	r3, [pc, #108]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	4a1a      	ldr	r2, [pc, #104]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009aec:	e00c      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	3304      	adds	r3, #4
 8009af2:	2101      	movs	r1, #1
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 fd5b 	bl	800b5b0 <RCCEx_PLL2_Config>
 8009afa:	4603      	mov	r3, r0
 8009afc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009afe:	e003      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	75fb      	strb	r3, [r7, #23]
      break;
 8009b04:	e000      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d109      	bne.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b0e:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b1a:	490d      	ldr	r1, [pc, #52]	; (8009b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	650b      	str	r3, [r1, #80]	; 0x50
 8009b20:	e001      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d033      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d81c      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009b3a:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009b7b 	.word	0x08009b7b
 8009b44:	08009b55 	.word	0x08009b55
 8009b48:	08009b63 	.word	0x08009b63
 8009b4c:	08009b7b 	.word	0x08009b7b
 8009b50:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b54:	4bb8      	ldr	r3, [pc, #736]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	4ab7      	ldr	r2, [pc, #732]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009b60:	e00c      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	3304      	adds	r3, #4
 8009b66:	2102      	movs	r1, #2
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f001 fd21 	bl	800b5b0 <RCCEx_PLL2_Config>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009b72:	e003      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	75fb      	strb	r3, [r7, #23]
      break;
 8009b78:	e000      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d109      	bne.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b82:	4bad      	ldr	r3, [pc, #692]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b86:	f023 0203 	bic.w	r2, r3, #3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8e:	49aa      	ldr	r1, [pc, #680]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b94:	e001      	b.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
 8009b98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 8086 	beq.w	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ba8:	4ba4      	ldr	r3, [pc, #656]	; (8009e3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4aa3      	ldr	r2, [pc, #652]	; (8009e3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bb4:	f7fb f84e 	bl	8004c54 <HAL_GetTick>
 8009bb8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bba:	e009      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bbc:	f7fb f84a 	bl	8004c54 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	2b64      	cmp	r3, #100	; 0x64
 8009bc8:	d902      	bls.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	75fb      	strb	r3, [r7, #23]
        break;
 8009bce:	e005      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bd0:	4b9a      	ldr	r3, [pc, #616]	; (8009e3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d0ef      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d166      	bne.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009be2:	4b95      	ldr	r3, [pc, #596]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009bec:	4053      	eors	r3, r2
 8009bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d013      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009bf6:	4b90      	ldr	r3, [pc, #576]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bfe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c00:	4b8d      	ldr	r3, [pc, #564]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c04:	4a8c      	ldr	r2, [pc, #560]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c0a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c0c:	4b8a      	ldr	r3, [pc, #552]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c10:	4a89      	ldr	r2, [pc, #548]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c16:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009c18:	4a87      	ldr	r2, [pc, #540]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c28:	d115      	bne.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c2a:	f7fb f813 	bl	8004c54 <HAL_GetTick>
 8009c2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c30:	e00b      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c32:	f7fb f80f 	bl	8004c54 <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d902      	bls.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	75fb      	strb	r3, [r7, #23]
            break;
 8009c48:	e005      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c4a:	4b7b      	ldr	r3, [pc, #492]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d0ed      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009c56:	7dfb      	ldrb	r3, [r7, #23]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d126      	bne.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c6a:	d10d      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009c6c:	4b72      	ldr	r3, [pc, #456]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c7a:	0919      	lsrs	r1, r3, #4
 8009c7c:	4b70      	ldr	r3, [pc, #448]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8009c7e:	400b      	ands	r3, r1
 8009c80:	496d      	ldr	r1, [pc, #436]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	610b      	str	r3, [r1, #16]
 8009c86:	e005      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009c88:	4b6b      	ldr	r3, [pc, #428]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	4a6a      	ldr	r2, [pc, #424]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c92:	6113      	str	r3, [r2, #16]
 8009c94:	4b68      	ldr	r3, [pc, #416]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ca2:	4965      	ldr	r1, [pc, #404]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	670b      	str	r3, [r1, #112]	; 0x70
 8009ca8:	e004      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009caa:	7dfb      	ldrb	r3, [r7, #23]
 8009cac:	75bb      	strb	r3, [r7, #22]
 8009cae:	e001      	b.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
 8009cb2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d07e      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cc4:	2b28      	cmp	r3, #40	; 0x28
 8009cc6:	d867      	bhi.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009cc8:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009d9f 	.word	0x08009d9f
 8009cd4:	08009d99 	.word	0x08009d99
 8009cd8:	08009d99 	.word	0x08009d99
 8009cdc:	08009d99 	.word	0x08009d99
 8009ce0:	08009d99 	.word	0x08009d99
 8009ce4:	08009d99 	.word	0x08009d99
 8009ce8:	08009d99 	.word	0x08009d99
 8009cec:	08009d99 	.word	0x08009d99
 8009cf0:	08009d75 	.word	0x08009d75
 8009cf4:	08009d99 	.word	0x08009d99
 8009cf8:	08009d99 	.word	0x08009d99
 8009cfc:	08009d99 	.word	0x08009d99
 8009d00:	08009d99 	.word	0x08009d99
 8009d04:	08009d99 	.word	0x08009d99
 8009d08:	08009d99 	.word	0x08009d99
 8009d0c:	08009d99 	.word	0x08009d99
 8009d10:	08009d87 	.word	0x08009d87
 8009d14:	08009d99 	.word	0x08009d99
 8009d18:	08009d99 	.word	0x08009d99
 8009d1c:	08009d99 	.word	0x08009d99
 8009d20:	08009d99 	.word	0x08009d99
 8009d24:	08009d99 	.word	0x08009d99
 8009d28:	08009d99 	.word	0x08009d99
 8009d2c:	08009d99 	.word	0x08009d99
 8009d30:	08009d9f 	.word	0x08009d9f
 8009d34:	08009d99 	.word	0x08009d99
 8009d38:	08009d99 	.word	0x08009d99
 8009d3c:	08009d99 	.word	0x08009d99
 8009d40:	08009d99 	.word	0x08009d99
 8009d44:	08009d99 	.word	0x08009d99
 8009d48:	08009d99 	.word	0x08009d99
 8009d4c:	08009d99 	.word	0x08009d99
 8009d50:	08009d9f 	.word	0x08009d9f
 8009d54:	08009d99 	.word	0x08009d99
 8009d58:	08009d99 	.word	0x08009d99
 8009d5c:	08009d99 	.word	0x08009d99
 8009d60:	08009d99 	.word	0x08009d99
 8009d64:	08009d99 	.word	0x08009d99
 8009d68:	08009d99 	.word	0x08009d99
 8009d6c:	08009d99 	.word	0x08009d99
 8009d70:	08009d9f 	.word	0x08009d9f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3304      	adds	r3, #4
 8009d78:	2101      	movs	r1, #1
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f001 fc18 	bl	800b5b0 <RCCEx_PLL2_Config>
 8009d80:	4603      	mov	r3, r0
 8009d82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009d84:	e00c      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3324      	adds	r3, #36	; 0x24
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 fcc1 	bl	800b714 <RCCEx_PLL3_Config>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009d96:	e003      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d9c:	e000      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d109      	bne.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009da6:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009daa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009db2:	4921      	ldr	r1, [pc, #132]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	654b      	str	r3, [r1, #84]	; 0x54
 8009db8:	e001      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d03e      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dce:	2b05      	cmp	r3, #5
 8009dd0:	d820      	bhi.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009dd2:	a201      	add	r2, pc, #4	; (adr r2, 8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd8:	08009e1b 	.word	0x08009e1b
 8009ddc:	08009df1 	.word	0x08009df1
 8009de0:	08009e03 	.word	0x08009e03
 8009de4:	08009e1b 	.word	0x08009e1b
 8009de8:	08009e1b 	.word	0x08009e1b
 8009dec:	08009e1b 	.word	0x08009e1b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3304      	adds	r3, #4
 8009df4:	2101      	movs	r1, #1
 8009df6:	4618      	mov	r0, r3
 8009df8:	f001 fbda 	bl	800b5b0 <RCCEx_PLL2_Config>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009e00:	e00c      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3324      	adds	r3, #36	; 0x24
 8009e06:	2101      	movs	r1, #1
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f001 fc83 	bl	800b714 <RCCEx_PLL3_Config>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009e12:	e003      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	75fb      	strb	r3, [r7, #23]
      break;
 8009e18:	e000      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d110      	bne.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009e22:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e26:	f023 0207 	bic.w	r2, r3, #7
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e2e:	4902      	ldr	r1, [pc, #8]	; (8009e38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e30:	4313      	orrs	r3, r2
 8009e32:	654b      	str	r3, [r1, #84]	; 0x54
 8009e34:	e008      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009e36:	bf00      	nop
 8009e38:	58024400 	.word	0x58024400
 8009e3c:	58024800 	.word	0x58024800
 8009e40:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
 8009e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d039      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e5a:	2b05      	cmp	r3, #5
 8009e5c:	d820      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009e5e:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e64:	08009ea7 	.word	0x08009ea7
 8009e68:	08009e7d 	.word	0x08009e7d
 8009e6c:	08009e8f 	.word	0x08009e8f
 8009e70:	08009ea7 	.word	0x08009ea7
 8009e74:	08009ea7 	.word	0x08009ea7
 8009e78:	08009ea7 	.word	0x08009ea7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	2101      	movs	r1, #1
 8009e82:	4618      	mov	r0, r3
 8009e84:	f001 fb94 	bl	800b5b0 <RCCEx_PLL2_Config>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009e8c:	e00c      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	3324      	adds	r3, #36	; 0x24
 8009e92:	2101      	movs	r1, #1
 8009e94:	4618      	mov	r0, r3
 8009e96:	f001 fc3d 	bl	800b714 <RCCEx_PLL3_Config>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009e9e:	e003      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ea4:	e000      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ea8:	7dfb      	ldrb	r3, [r7, #23]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10a      	bne.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009eae:	4bb7      	ldr	r3, [pc, #732]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb2:	f023 0207 	bic.w	r2, r3, #7
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ebc:	49b3      	ldr	r1, [pc, #716]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	658b      	str	r3, [r1, #88]	; 0x58
 8009ec2:	e001      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
 8009ec6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0320 	and.w	r3, r3, #32
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d04b      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ede:	d02e      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ee4:	d828      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eea:	d02a      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef0:	d822      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009ef2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ef6:	d026      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009ef8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009efc:	d81c      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f02:	d010      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f08:	d816      	bhi.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d01d      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009f0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f12:	d111      	bne.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	3304      	adds	r3, #4
 8009f18:	2100      	movs	r1, #0
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f001 fb48 	bl	800b5b0 <RCCEx_PLL2_Config>
 8009f20:	4603      	mov	r3, r0
 8009f22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009f24:	e012      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	3324      	adds	r3, #36	; 0x24
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f001 fbf1 	bl	800b714 <RCCEx_PLL3_Config>
 8009f32:	4603      	mov	r3, r0
 8009f34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009f36:	e009      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f3c:	e006      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009f3e:	bf00      	nop
 8009f40:	e004      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009f42:	bf00      	nop
 8009f44:	e002      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009f46:	bf00      	nop
 8009f48:	e000      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10a      	bne.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f52:	4b8e      	ldr	r3, [pc, #568]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f56:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f60:	498a      	ldr	r1, [pc, #552]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	654b      	str	r3, [r1, #84]	; 0x54
 8009f66:	e001      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
 8009f6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d04b      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f82:	d02e      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009f84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f88:	d828      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f8e:	d02a      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f94:	d822      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009f96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f9a:	d026      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009f9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fa0:	d81c      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fa6:	d010      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fac:	d816      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d01d      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb6:	d111      	bne.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	3304      	adds	r3, #4
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f001 faf6 	bl	800b5b0 <RCCEx_PLL2_Config>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009fc8:	e012      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3324      	adds	r3, #36	; 0x24
 8009fce:	2102      	movs	r1, #2
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f001 fb9f 	bl	800b714 <RCCEx_PLL3_Config>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009fda:	e009      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe0:	e006      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009fe2:	bf00      	nop
 8009fe4:	e004      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009fe6:	bf00      	nop
 8009fe8:	e002      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009fea:	bf00      	nop
 8009fec:	e000      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10a      	bne.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ff6:	4b65      	ldr	r3, [pc, #404]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a004:	4961      	ldr	r1, [pc, #388]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a006:	4313      	orrs	r3, r2
 800a008:	658b      	str	r3, [r1, #88]	; 0x58
 800a00a:	e001      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a00c:	7dfb      	ldrb	r3, [r7, #23]
 800a00e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d04b      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a022:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a026:	d02e      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a028:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a02c:	d828      	bhi.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a02e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a032:	d02a      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a038:	d822      	bhi.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a03a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a03e:	d026      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a040:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a044:	d81c      	bhi.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a04a:	d010      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a04c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a050:	d816      	bhi.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d01d      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a05a:	d111      	bne.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	3304      	adds	r3, #4
 800a060:	2100      	movs	r1, #0
 800a062:	4618      	mov	r0, r3
 800a064:	f001 faa4 	bl	800b5b0 <RCCEx_PLL2_Config>
 800a068:	4603      	mov	r3, r0
 800a06a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a06c:	e012      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	3324      	adds	r3, #36	; 0x24
 800a072:	2102      	movs	r1, #2
 800a074:	4618      	mov	r0, r3
 800a076:	f001 fb4d 	bl	800b714 <RCCEx_PLL3_Config>
 800a07a:	4603      	mov	r3, r0
 800a07c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a07e:	e009      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	75fb      	strb	r3, [r7, #23]
      break;
 800a084:	e006      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a086:	bf00      	nop
 800a088:	e004      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a08a:	bf00      	nop
 800a08c:	e002      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a08e:	bf00      	nop
 800a090:	e000      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a092:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10a      	bne.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a09a:	4b3c      	ldr	r3, [pc, #240]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a09e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0a8:	4938      	ldr	r1, [pc, #224]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	658b      	str	r3, [r1, #88]	; 0x58
 800a0ae:	e001      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
 800a0b2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0308 	and.w	r3, r3, #8
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01a      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ca:	d10a      	bne.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3324      	adds	r3, #36	; 0x24
 800a0d0:	2102      	movs	r1, #2
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f001 fb1e 	bl	800b714 <RCCEx_PLL3_Config>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a0e2:	4b2a      	ldr	r3, [pc, #168]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0f0:	4926      	ldr	r1, [pc, #152]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0310 	and.w	r3, r3, #16
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d01a      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a10c:	d10a      	bne.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3324      	adds	r3, #36	; 0x24
 800a112:	2102      	movs	r1, #2
 800a114:	4618      	mov	r0, r3
 800a116:	f001 fafd 	bl	800b714 <RCCEx_PLL3_Config>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a124:	4b19      	ldr	r3, [pc, #100]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a132:	4916      	ldr	r1, [pc, #88]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a134:	4313      	orrs	r3, r2
 800a136:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d036      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a14a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a14e:	d01f      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a154:	d817      	bhi.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a15a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a15e:	d009      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a160:	e011      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	3304      	adds	r3, #4
 800a166:	2100      	movs	r1, #0
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 fa21 	bl	800b5b0 <RCCEx_PLL2_Config>
 800a16e:	4603      	mov	r3, r0
 800a170:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a172:	e00e      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3324      	adds	r3, #36	; 0x24
 800a178:	2102      	movs	r1, #2
 800a17a:	4618      	mov	r0, r3
 800a17c:	f001 faca 	bl	800b714 <RCCEx_PLL3_Config>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a184:	e005      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	75fb      	strb	r3, [r7, #23]
      break;
 800a18a:	e002      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a18c:	58024400 	.word	0x58024400
      break;
 800a190:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a192:	7dfb      	ldrb	r3, [r7, #23]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a198:	4b93      	ldr	r3, [pc, #588]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a19a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a19c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a1a6:	4990      	ldr	r1, [pc, #576]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	658b      	str	r3, [r1, #88]	; 0x58
 800a1ac:	e001      	b.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d033      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1c8:	d01c      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a1ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1ce:	d816      	bhi.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a1d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1d4:	d003      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a1d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1da:	d007      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a1dc:	e00f      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1de:	4b82      	ldr	r3, [pc, #520]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e2:	4a81      	ldr	r2, [pc, #516]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a1ea:	e00c      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3324      	adds	r3, #36	; 0x24
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f001 fa8e 	bl	800b714 <RCCEx_PLL3_Config>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a1fc:	e003      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	75fb      	strb	r3, [r7, #23]
      break;
 800a202:	e000      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a204:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a20c:	4b76      	ldr	r3, [pc, #472]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a21a:	4973      	ldr	r1, [pc, #460]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	654b      	str	r3, [r1, #84]	; 0x54
 800a220:	e001      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d029      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800a23a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a23e:	d007      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800a240:	e00f      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a242:	4b69      	ldr	r3, [pc, #420]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a246:	4a68      	ldr	r2, [pc, #416]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a24c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a24e:	e00b      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3304      	adds	r3, #4
 800a254:	2102      	movs	r1, #2
 800a256:	4618      	mov	r0, r3
 800a258:	f001 f9aa 	bl	800b5b0 <RCCEx_PLL2_Config>
 800a25c:	4603      	mov	r3, r0
 800a25e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a260:	e002      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	75fb      	strb	r3, [r7, #23]
      break;
 800a266:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a268:	7dfb      	ldrb	r3, [r7, #23]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a26e:	4b5e      	ldr	r3, [pc, #376]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a27a:	495b      	ldr	r1, [pc, #364]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a280:	e001      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3324      	adds	r3, #36	; 0x24
 800a296:	2102      	movs	r1, #2
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 fa3b 	bl	800b714 <RCCEx_PLL3_Config>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d030      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2bc:	d017      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800a2be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2c2:	d811      	bhi.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a2c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2c8:	d013      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a2ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2ce:	d80b      	bhi.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d010      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a2d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d8:	d106      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2da:	4b43      	ldr	r3, [pc, #268]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2de:	4a42      	ldr	r2, [pc, #264]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a2e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a2e6:	e007      	b.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ec:	e004      	b.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a2ee:	bf00      	nop
 800a2f0:	e002      	b.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a2f2:	bf00      	nop
 800a2f4:	e000      	b.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a2f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d109      	bne.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a2fe:	4b3a      	ldr	r3, [pc, #232]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a30a:	4937      	ldr	r1, [pc, #220]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a30c:	4313      	orrs	r3, r2
 800a30e:	654b      	str	r3, [r1, #84]	; 0x54
 800a310:	e001      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d008      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a322:	4b31      	ldr	r3, [pc, #196]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a326:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32e:	492e      	ldr	r1, [pc, #184]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a330:	4313      	orrs	r3, r2
 800a332:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d009      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a340:	4b29      	ldr	r3, [pc, #164]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a34e:	4926      	ldr	r1, [pc, #152]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a350:	4313      	orrs	r3, r2
 800a352:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d008      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a360:	4b21      	ldr	r3, [pc, #132]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a364:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a36c:	491e      	ldr	r1, [pc, #120]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00d      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a37e:	4b1a      	ldr	r3, [pc, #104]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	4a19      	ldr	r2, [pc, #100]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a388:	6113      	str	r3, [r2, #16]
 800a38a:	4b17      	ldr	r3, [pc, #92]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a38c:	691a      	ldr	r2, [r3, #16]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a394:	4914      	ldr	r1, [pc, #80]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a396:	4313      	orrs	r3, r2
 800a398:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	da08      	bge.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a3a2:	4b11      	ldr	r3, [pc, #68]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ae:	490e      	ldr	r1, [pc, #56]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d009      	beq.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a3c0:	4b09      	ldr	r3, [pc, #36]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a3c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ce:	4906      	ldr	r1, [pc, #24]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a3d4:	7dbb      	ldrb	r3, [r7, #22]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d101      	bne.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e000      	b.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	58024400 	.word	0x58024400

0800a3ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b090      	sub	sp, #64	; 0x40
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3fa:	f040 8095 	bne.w	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a3fe:	4bae      	ldr	r3, [pc, #696]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	633b      	str	r3, [r7, #48]	; 0x30
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	2b04      	cmp	r3, #4
 800a40c:	f200 8088 	bhi.w	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a410:	a201      	add	r2, pc, #4	; (adr r2, 800a418 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a416:	bf00      	nop
 800a418:	0800a42d 	.word	0x0800a42d
 800a41c:	0800a455 	.word	0x0800a455
 800a420:	0800a47d 	.word	0x0800a47d
 800a424:	0800a519 	.word	0x0800a519
 800a428:	0800a4a5 	.word	0x0800a4a5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a42c:	4ba2      	ldr	r3, [pc, #648]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a434:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a438:	d108      	bne.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a43a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 ff64 	bl	800b30c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a448:	f000 bc95 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a450:	f000 bc91 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a454:	4b98      	ldr	r3, [pc, #608]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a45c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a460:	d108      	bne.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a462:	f107 0318 	add.w	r3, r7, #24
 800a466:	4618      	mov	r0, r3
 800a468:	f000 fca8 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a470:	f000 bc81 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a478:	f000 bc7d 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a47c:	4b8e      	ldr	r3, [pc, #568]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a488:	d108      	bne.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a48a:	f107 030c 	add.w	r3, r7, #12
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 fde8 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a498:	f000 bc6d 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4a0:	f000 bc69 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4a4:	4b84      	ldr	r3, [pc, #528]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a4a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4ae:	4b82      	ldr	r3, [pc, #520]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 0304 	and.w	r3, r3, #4
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d10c      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d109      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4c0:	4b7d      	ldr	r3, [pc, #500]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	08db      	lsrs	r3, r3, #3
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	4a7c      	ldr	r2, [pc, #496]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a4cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4d2:	e01f      	b.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4d4:	4b78      	ldr	r3, [pc, #480]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e0:	d106      	bne.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4e8:	d102      	bne.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a4ea:	4b75      	ldr	r3, [pc, #468]	; (800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ee:	e011      	b.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4f0:	4b71      	ldr	r3, [pc, #452]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4fc:	d106      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a504:	d102      	bne.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a506:	4b6f      	ldr	r3, [pc, #444]	; (800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a50a:	e003      	b.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a510:	f000 bc31 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a514:	f000 bc2f 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a518:	4b6b      	ldr	r3, [pc, #428]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a51a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a51c:	f000 bc2b 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a520:	2300      	movs	r3, #0
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a524:	f000 bc27 	b.w	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a52e:	f040 8095 	bne.w	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a532:	4b61      	ldr	r3, [pc, #388]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a536:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a53a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a542:	d04d      	beq.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a54a:	f200 8084 	bhi.w	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	2bc0      	cmp	r3, #192	; 0xc0
 800a552:	d07d      	beq.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a556:	2bc0      	cmp	r3, #192	; 0xc0
 800a558:	d87d      	bhi.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	2b80      	cmp	r3, #128	; 0x80
 800a55e:	d02d      	beq.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a562:	2b80      	cmp	r3, #128	; 0x80
 800a564:	d877      	bhi.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d003      	beq.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	2b40      	cmp	r3, #64	; 0x40
 800a570:	d012      	beq.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a572:	e070      	b.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a574:	4b50      	ldr	r3, [pc, #320]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a57c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a580:	d107      	bne.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fec0 	bl	800b30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a590:	e3f1      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a596:	e3ee      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a598:	4b47      	ldr	r3, [pc, #284]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5a4:	d107      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a6:	f107 0318 	add.w	r3, r7, #24
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fc06 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5b4:	e3df      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ba:	e3dc      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5bc:	4b3e      	ldr	r3, [pc, #248]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c8:	d107      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ca:	f107 030c 	add.w	r3, r7, #12
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 fd48 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5d8:	e3cd      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5de:	e3ca      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a5e0:	4b35      	ldr	r3, [pc, #212]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a5e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5e8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5ea:	4b33      	ldr	r3, [pc, #204]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 0304 	and.w	r3, r3, #4
 800a5f2:	2b04      	cmp	r3, #4
 800a5f4:	d10c      	bne.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d109      	bne.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5fc:	4b2e      	ldr	r3, [pc, #184]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	08db      	lsrs	r3, r3, #3
 800a602:	f003 0303 	and.w	r3, r3, #3
 800a606:	4a2d      	ldr	r2, [pc, #180]	; (800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a608:	fa22 f303 	lsr.w	r3, r2, r3
 800a60c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a60e:	e01e      	b.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a610:	4b29      	ldr	r3, [pc, #164]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a61c:	d106      	bne.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a620:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a624:	d102      	bne.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a626:	4b26      	ldr	r3, [pc, #152]	; (800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a62a:	e010      	b.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a62c:	4b22      	ldr	r3, [pc, #136]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a638:	d106      	bne.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a640:	d102      	bne.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a642:	4b20      	ldr	r3, [pc, #128]	; (800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a644:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a646:	e002      	b.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a648:	2300      	movs	r3, #0
 800a64a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a64c:	e393      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a64e:	e392      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a650:	4b1d      	ldr	r3, [pc, #116]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a654:	e38f      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a65a:	e38c      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a662:	f040 80a7 	bne.w	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a666:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a66a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a66e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a676:	d05f      	beq.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a67e:	f200 8096 	bhi.w	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a688:	f000 808e 	beq.w	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a692:	f200 808c 	bhi.w	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a69c:	d03a      	beq.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6a4:	f200 8083 	bhi.w	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00e      	beq.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6b4:	d01c      	beq.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a6b6:	e07a      	b.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a6b8:	58024400 	.word	0x58024400
 800a6bc:	03d09000 	.word	0x03d09000
 800a6c0:	003d0900 	.word	0x003d0900
 800a6c4:	017d7840 	.word	0x017d7840
 800a6c8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6cc:	4baa      	ldr	r3, [pc, #680]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6d8:	d107      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 fe14 	bl	800b30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6e8:	e345      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6ee:	e342      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6f0:	4ba1      	ldr	r3, [pc, #644]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6fc:	d107      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6fe:	f107 0318 	add.w	r3, r7, #24
 800a702:	4618      	mov	r0, r3
 800a704:	f000 fb5a 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a70c:	e333      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a712:	e330      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a714:	4b98      	ldr	r3, [pc, #608]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a71c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a720:	d107      	bne.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a722:	f107 030c 	add.w	r3, r7, #12
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fc9c 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a730:	e321      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a736:	e31e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a738:	4b8f      	ldr	r3, [pc, #572]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a73a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a73c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a740:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a742:	4b8d      	ldr	r3, [pc, #564]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0304 	and.w	r3, r3, #4
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d10c      	bne.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	2b00      	cmp	r3, #0
 800a752:	d109      	bne.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a754:	4b88      	ldr	r3, [pc, #544]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	08db      	lsrs	r3, r3, #3
 800a75a:	f003 0303 	and.w	r3, r3, #3
 800a75e:	4a87      	ldr	r2, [pc, #540]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a760:	fa22 f303 	lsr.w	r3, r2, r3
 800a764:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a766:	e01e      	b.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a768:	4b83      	ldr	r3, [pc, #524]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a774:	d106      	bne.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800a776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a77c:	d102      	bne.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a77e:	4b80      	ldr	r3, [pc, #512]	; (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a780:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a782:	e010      	b.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a784:	4b7c      	ldr	r3, [pc, #496]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a78c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a790:	d106      	bne.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800a792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a798:	d102      	bne.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a79a:	4b7a      	ldr	r3, [pc, #488]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a79e:	e002      	b.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a7a4:	e2e7      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7a6:	e2e6      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a7a8:	4b77      	ldr	r3, [pc, #476]	; (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7ac:	e2e3      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7b2:	e2e0      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7ba:	f040 809c 	bne.w	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a7be:	4b6e      	ldr	r3, [pc, #440]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a7c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7ce:	d054      	beq.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7d6:	f200 808b 	bhi.w	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7e0:	f000 8083 	beq.w	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7ea:	f200 8081 	bhi.w	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7f4:	d02f      	beq.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7fc:	d878      	bhi.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	2b00      	cmp	r3, #0
 800a802:	d004      	beq.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a80a:	d012      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a80c:	e070      	b.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a80e:	4b5a      	ldr	r3, [pc, #360]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a81a:	d107      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a81c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a820:	4618      	mov	r0, r3
 800a822:	f000 fd73 	bl	800b30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a828:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a82a:	e2a4      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a830:	e2a1      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a832:	4b51      	ldr	r3, [pc, #324]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a83a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a83e:	d107      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a840:	f107 0318 	add.w	r3, r7, #24
 800a844:	4618      	mov	r0, r3
 800a846:	f000 fab9 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a84e:	e292      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a854:	e28f      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a856:	4b48      	ldr	r3, [pc, #288]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a85e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a862:	d107      	bne.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a864:	f107 030c 	add.w	r3, r7, #12
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 fbfb 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a872:	e280      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a878:	e27d      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a87a:	4b3f      	ldr	r3, [pc, #252]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a882:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a884:	4b3c      	ldr	r3, [pc, #240]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0304 	and.w	r3, r3, #4
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	d10c      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a892:	2b00      	cmp	r3, #0
 800a894:	d109      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a896:	4b38      	ldr	r3, [pc, #224]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	08db      	lsrs	r3, r3, #3
 800a89c:	f003 0303 	and.w	r3, r3, #3
 800a8a0:	4a36      	ldr	r2, [pc, #216]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8a8:	e01e      	b.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8aa:	4b33      	ldr	r3, [pc, #204]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b6:	d106      	bne.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8be:	d102      	bne.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8c0:	4b2f      	ldr	r3, [pc, #188]	; (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8c4:	e010      	b.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8c6:	4b2c      	ldr	r3, [pc, #176]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8d2:	d106      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8da:	d102      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8dc:	4b29      	ldr	r3, [pc, #164]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8e0:	e002      	b.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a8e6:	e246      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a8e8:	e245      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a8ea:	4b27      	ldr	r3, [pc, #156]	; (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8ee:	e242      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8f4:	e23f      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8fc:	f040 80a8 	bne.w	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a900:	4b1d      	ldr	r3, [pc, #116]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a904:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a908:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a910:	d060      	beq.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800a912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a918:	f200 8097 	bhi.w	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a922:	f000 808f 	beq.w	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a92c:	f200 808d 	bhi.w	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a936:	d03b      	beq.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800a938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a93e:	f200 8084 	bhi.w	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	2b00      	cmp	r3, #0
 800a946:	d004      	beq.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a94e:	d01d      	beq.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800a950:	e07b      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a952:	4b09      	ldr	r3, [pc, #36]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a95a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a95e:	d107      	bne.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a964:	4618      	mov	r0, r3
 800a966:	f000 fcd1 	bl	800b30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a96e:	e202      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a970:	2300      	movs	r3, #0
 800a972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a974:	e1ff      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a976:	bf00      	nop
 800a978:	58024400 	.word	0x58024400
 800a97c:	03d09000 	.word	0x03d09000
 800a980:	003d0900 	.word	0x003d0900
 800a984:	017d7840 	.word	0x017d7840
 800a988:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a98c:	4ba3      	ldr	r3, [pc, #652]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a998:	d107      	bne.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a99a:	f107 0318 	add.w	r3, r7, #24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 fa0c 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9a8:	e1e5      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ae:	e1e2      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9b0:	4b9a      	ldr	r3, [pc, #616]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9bc:	d107      	bne.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9be:	f107 030c 	add.w	r3, r7, #12
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 fb4e 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9cc:	e1d3      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9d2:	e1d0      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9d4:	4b91      	ldr	r3, [pc, #580]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a9d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9dc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9de:	4b8f      	ldr	r3, [pc, #572]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0304 	and.w	r3, r3, #4
 800a9e6:	2b04      	cmp	r3, #4
 800a9e8:	d10c      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800a9ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d109      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9f0:	4b8a      	ldr	r3, [pc, #552]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	08db      	lsrs	r3, r3, #3
 800a9f6:	f003 0303 	and.w	r3, r3, #3
 800a9fa:	4a89      	ldr	r2, [pc, #548]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a9fc:	fa22 f303 	lsr.w	r3, r2, r3
 800aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa02:	e01e      	b.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa04:	4b85      	ldr	r3, [pc, #532]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa10:	d106      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800aa12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa18:	d102      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa1a:	4b82      	ldr	r3, [pc, #520]	; (800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800aa1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa1e:	e010      	b.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa20:	4b7e      	ldr	r3, [pc, #504]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa2c:	d106      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aa2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa34:	d102      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa36:	4b7c      	ldr	r3, [pc, #496]	; (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa3a:	e002      	b.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa40:	e199      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa42:	e198      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa44:	4b79      	ldr	r3, [pc, #484]	; (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa48:	e195      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa4e:	e192      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aa56:	d173      	bne.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800aa58:	4b70      	ldr	r3, [pc, #448]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aa5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa60:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa68:	d02f      	beq.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa70:	d863      	bhi.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800aa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d004      	beq.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa7e:	d012      	beq.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800aa80:	e05b      	b.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa82:	4b66      	ldr	r3, [pc, #408]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa8e:	d107      	bne.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa90:	f107 0318 	add.w	r3, r7, #24
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 f991 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa9e:	e16a      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa4:	e167      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aaa6:	4b5d      	ldr	r3, [pc, #372]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aab2:	d107      	bne.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aab4:	f107 030c 	add.w	r3, r7, #12
 800aab8:	4618      	mov	r0, r3
 800aaba:	f000 fad3 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aac2:	e158      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aac8:	e155      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aaca:	4b54      	ldr	r3, [pc, #336]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aace:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aad2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aad4:	4b51      	ldr	r3, [pc, #324]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0304 	and.w	r3, r3, #4
 800aadc:	2b04      	cmp	r3, #4
 800aade:	d10c      	bne.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800aae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d109      	bne.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aae6:	4b4d      	ldr	r3, [pc, #308]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	08db      	lsrs	r3, r3, #3
 800aaec:	f003 0303 	and.w	r3, r3, #3
 800aaf0:	4a4b      	ldr	r2, [pc, #300]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800aaf2:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaf8:	e01e      	b.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aafa:	4b48      	ldr	r3, [pc, #288]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab06:	d106      	bne.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800ab08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab0e:	d102      	bne.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab10:	4b44      	ldr	r3, [pc, #272]	; (800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800ab12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab14:	e010      	b.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab16:	4b41      	ldr	r3, [pc, #260]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab22:	d106      	bne.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800ab24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab2a:	d102      	bne.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab2c:	4b3e      	ldr	r3, [pc, #248]	; (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ab2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab30:	e002      	b.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab36:	e11e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab38:	e11d      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab3e:	e11a      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab46:	d133      	bne.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ab48:	4b34      	ldr	r3, [pc, #208]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d004      	beq.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5e:	d012      	beq.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800ab60:	e023      	b.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab62:	4b2e      	ldr	r3, [pc, #184]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab6e:	d107      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 fbc9 	bl	800b30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab7e:	e0fa      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab84:	e0f7      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab86:	4b25      	ldr	r3, [pc, #148]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab92:	d107      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab94:	f107 0318 	add.w	r3, r7, #24
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 f90f 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aba2:	e0e8      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aba8:	e0e5      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800abaa:	2300      	movs	r3, #0
 800abac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abae:	e0e2      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abb6:	f040 808f 	bne.w	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800abba:	4b18      	ldr	r3, [pc, #96]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800abbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abbe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800abc2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800abc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abca:	d075      	beq.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800abcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abd2:	d87e      	bhi.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800abd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abda:	d060      	beq.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800abdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe2:	d876      	bhi.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800abe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abea:	d045      	beq.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800abec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abf2:	d86e      	bhi.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800abf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abfa:	d02b      	beq.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800abfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac02:	d866      	bhi.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ac04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d004      	beq.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac10:	d00e      	beq.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800ac12:	e05e      	b.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ac14:	f000 f8bc 	bl	800ad90 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac18:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ac1a:	e0ac      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac1c:	58024400 	.word	0x58024400
 800ac20:	03d09000 	.word	0x03d09000
 800ac24:	003d0900 	.word	0x003d0900
 800ac28:	017d7840 	.word	0x017d7840
 800ac2c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac30:	4b53      	ldr	r3, [pc, #332]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac3c:	d107      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac3e:	f107 0318 	add.w	r3, r7, #24
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 f8ba 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac4c:	e093      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac52:	e090      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac54:	4b4a      	ldr	r3, [pc, #296]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac60:	d107      	bne.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac62:	f107 030c 	add.w	r3, r7, #12
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 f9fc 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac70:	e081      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac76:	e07e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac78:	4b41      	ldr	r3, [pc, #260]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0304 	and.w	r3, r3, #4
 800ac80:	2b04      	cmp	r3, #4
 800ac82:	d109      	bne.n	800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac84:	4b3e      	ldr	r3, [pc, #248]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	08db      	lsrs	r3, r3, #3
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	4a3d      	ldr	r2, [pc, #244]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ac90:	fa22 f303 	lsr.w	r3, r2, r3
 800ac94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ac96:	e06e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac9c:	e06b      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac9e:	4b38      	ldr	r3, [pc, #224]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acaa:	d102      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800acac:	4b36      	ldr	r3, [pc, #216]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800acb0:	e061      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acb6:	e05e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acb8:	4b31      	ldr	r3, [pc, #196]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc4:	d102      	bne.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800acc6:	4b31      	ldr	r3, [pc, #196]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800acc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800acca:	e054      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800accc:	2300      	movs	r3, #0
 800acce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acd0:	e051      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acd6:	e04e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acde:	d148      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ace0:	4b27      	ldr	r3, [pc, #156]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ace2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ace8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800acea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf0:	d02a      	beq.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800acf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf8:	d838      	bhi.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800acfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d004      	beq.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ad00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad06:	d00d      	beq.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ad08:	e030      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad0a:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad16:	d102      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800ad18:	4b1c      	ldr	r3, [pc, #112]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ad1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad1c:	e02b      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad22:	e028      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad24:	4b16      	ldr	r3, [pc, #88]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad30:	d107      	bne.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fae8 	bl	800b30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad40:	e019      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad46:	e016      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad48:	4b0d      	ldr	r3, [pc, #52]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad54:	d107      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad56:	f107 0318 	add.w	r3, r7, #24
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 f82e 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad64:	e007      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad6a:	e004      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad70:	e001      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800ad76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3740      	adds	r7, #64	; 0x40
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	58024400 	.word	0x58024400
 800ad84:	03d09000 	.word	0x03d09000
 800ad88:	003d0900 	.word	0x003d0900
 800ad8c:	017d7840 	.word	0x017d7840

0800ad90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad94:	f7fe fb4c 	bl	8009430 <HAL_RCC_GetHCLKFreq>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	4b06      	ldr	r3, [pc, #24]	; (800adb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	091b      	lsrs	r3, r3, #4
 800ada0:	f003 0307 	and.w	r3, r3, #7
 800ada4:	4904      	ldr	r1, [pc, #16]	; (800adb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ada6:	5ccb      	ldrb	r3, [r1, r3]
 800ada8:	f003 031f 	and.w	r3, r3, #31
 800adac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	58024400 	.word	0x58024400
 800adb8:	0801808c 	.word	0x0801808c

0800adbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b089      	sub	sp, #36	; 0x24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adc4:	4ba1      	ldr	r3, [pc, #644]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc8:	f003 0303 	and.w	r3, r3, #3
 800adcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800adce:	4b9f      	ldr	r3, [pc, #636]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add2:	0b1b      	lsrs	r3, r3, #12
 800add4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800add8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800adda:	4b9c      	ldr	r3, [pc, #624]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800addc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adde:	091b      	lsrs	r3, r3, #4
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ade6:	4b99      	ldr	r3, [pc, #612]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adea:	08db      	lsrs	r3, r3, #3
 800adec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	fb02 f303 	mul.w	r3, r2, r3
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 8111 	beq.w	800b02c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	f000 8083 	beq.w	800af18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	f200 80a1 	bhi.w	800af5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d056      	beq.n	800aed4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae26:	e099      	b.n	800af5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae28:	4b88      	ldr	r3, [pc, #544]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 0320 	and.w	r3, r3, #32
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d02d      	beq.n	800ae90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae34:	4b85      	ldr	r3, [pc, #532]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	08db      	lsrs	r3, r3, #3
 800ae3a:	f003 0303 	and.w	r3, r3, #3
 800ae3e:	4a84      	ldr	r2, [pc, #528]	; (800b050 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae40:	fa22 f303 	lsr.w	r3, r2, r3
 800ae44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	ee07 3a90 	vmov	s15, r3
 800ae4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae5e:	4b7b      	ldr	r3, [pc, #492]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae66:	ee07 3a90 	vmov	s15, r3
 800ae6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae8e:	e087      	b.n	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b058 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ae9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea2:	4b6a      	ldr	r3, [pc, #424]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aed2:	e065      	b.n	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aede:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee6:	4b59      	ldr	r3, [pc, #356]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aefa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af16:	e043      	b.n	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	ee07 3a90 	vmov	s15, r3
 800af1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2a:	4b48      	ldr	r3, [pc, #288]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af5a:	e021      	b.n	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	ee07 3a90 	vmov	s15, r3
 800af62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6e:	4b37      	ldr	r3, [pc, #220]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800afa0:	4b2a      	ldr	r3, [pc, #168]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa4:	0a5b      	lsrs	r3, r3, #9
 800afa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afaa:	ee07 3a90 	vmov	s15, r3
 800afae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afba:	edd7 6a07 	vldr	s13, [r7, #28]
 800afbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afc6:	ee17 2a90 	vmov	r2, s15
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800afce:	4b1f      	ldr	r3, [pc, #124]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd2:	0c1b      	lsrs	r3, r3, #16
 800afd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800afec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff4:	ee17 2a90 	vmov	r2, s15
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800affc:	4b13      	ldr	r3, [pc, #76]	; (800b04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800affe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b000:	0e1b      	lsrs	r3, r3, #24
 800b002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b016:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b022:	ee17 2a90 	vmov	r2, s15
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b02a:	e008      	b.n	800b03e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	609a      	str	r2, [r3, #8]
}
 800b03e:	bf00      	nop
 800b040:	3724      	adds	r7, #36	; 0x24
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	58024400 	.word	0x58024400
 800b050:	03d09000 	.word	0x03d09000
 800b054:	46000000 	.word	0x46000000
 800b058:	4c742400 	.word	0x4c742400
 800b05c:	4a742400 	.word	0x4a742400
 800b060:	4bbebc20 	.word	0x4bbebc20

0800b064 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b064:	b480      	push	{r7}
 800b066:	b089      	sub	sp, #36	; 0x24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b06c:	4ba1      	ldr	r3, [pc, #644]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b070:	f003 0303 	and.w	r3, r3, #3
 800b074:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b076:	4b9f      	ldr	r3, [pc, #636]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	0d1b      	lsrs	r3, r3, #20
 800b07c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b080:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b082:	4b9c      	ldr	r3, [pc, #624]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	0a1b      	lsrs	r3, r3, #8
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b08e:	4b99      	ldr	r3, [pc, #612]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b092:	08db      	lsrs	r3, r3, #3
 800b094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	fb02 f303 	mul.w	r3, r2, r3
 800b09e:	ee07 3a90 	vmov	s15, r3
 800b0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 8111 	beq.w	800b2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	f000 8083 	beq.w	800b1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	f200 80a1 	bhi.w	800b204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d003      	beq.n	800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d056      	beq.n	800b17c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0ce:	e099      	b.n	800b204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0d0:	4b88      	ldr	r3, [pc, #544]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0320 	and.w	r3, r3, #32
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d02d      	beq.n	800b138 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0dc:	4b85      	ldr	r3, [pc, #532]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	08db      	lsrs	r3, r3, #3
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	4a84      	ldr	r2, [pc, #528]	; (800b2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	ee07 3a90 	vmov	s15, r3
 800b0f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	ee07 3a90 	vmov	s15, r3
 800b0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b106:	4b7b      	ldr	r3, [pc, #492]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b116:	ed97 6a03 	vldr	s12, [r7, #12]
 800b11a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b132:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b136:	e087      	b.n	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	ee07 3a90 	vmov	s15, r3
 800b13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b142:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b14a:	4b6a      	ldr	r3, [pc, #424]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b15e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b17a:	e065      	b.n	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b186:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b18e:	4b59      	ldr	r3, [pc, #356]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1be:	e043      	b.n	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d2:	4b48      	ldr	r3, [pc, #288]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b202:	e021      	b.n	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b216:	4b37      	ldr	r3, [pc, #220]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b226:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b246:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b248:	4b2a      	ldr	r3, [pc, #168]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24c:	0a5b      	lsrs	r3, r3, #9
 800b24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b252:	ee07 3a90 	vmov	s15, r3
 800b256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b25e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b262:	edd7 6a07 	vldr	s13, [r7, #28]
 800b266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b26e:	ee17 2a90 	vmov	r2, s15
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b276:	4b1f      	ldr	r3, [pc, #124]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27a:	0c1b      	lsrs	r3, r3, #16
 800b27c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b280:	ee07 3a90 	vmov	s15, r3
 800b284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b28c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b290:	edd7 6a07 	vldr	s13, [r7, #28]
 800b294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b29c:	ee17 2a90 	vmov	r2, s15
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b2a4:	4b13      	ldr	r3, [pc, #76]	; (800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a8:	0e1b      	lsrs	r3, r3, #24
 800b2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ca:	ee17 2a90 	vmov	r2, s15
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b2d2:	e008      	b.n	800b2e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	609a      	str	r2, [r3, #8]
}
 800b2e6:	bf00      	nop
 800b2e8:	3724      	adds	r7, #36	; 0x24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	58024400 	.word	0x58024400
 800b2f8:	03d09000 	.word	0x03d09000
 800b2fc:	46000000 	.word	0x46000000
 800b300:	4c742400 	.word	0x4c742400
 800b304:	4a742400 	.word	0x4a742400
 800b308:	4bbebc20 	.word	0x4bbebc20

0800b30c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b089      	sub	sp, #36	; 0x24
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b314:	4ba0      	ldr	r3, [pc, #640]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b318:	f003 0303 	and.w	r3, r3, #3
 800b31c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b31e:	4b9e      	ldr	r3, [pc, #632]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b322:	091b      	lsrs	r3, r3, #4
 800b324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b328:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b32a:	4b9b      	ldr	r3, [pc, #620]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b334:	4b98      	ldr	r3, [pc, #608]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b338:	08db      	lsrs	r3, r3, #3
 800b33a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	fb02 f303 	mul.w	r3, r2, r3
 800b344:	ee07 3a90 	vmov	s15, r3
 800b348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b34c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	2b00      	cmp	r3, #0
 800b354:	f000 8111 	beq.w	800b57a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	f000 8083 	beq.w	800b466 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	2b02      	cmp	r3, #2
 800b364:	f200 80a1 	bhi.w	800b4aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d056      	beq.n	800b422 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b374:	e099      	b.n	800b4aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b376:	4b88      	ldr	r3, [pc, #544]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 0320 	and.w	r3, r3, #32
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d02d      	beq.n	800b3de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b382:	4b85      	ldr	r3, [pc, #532]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	08db      	lsrs	r3, r3, #3
 800b388:	f003 0303 	and.w	r3, r3, #3
 800b38c:	4a83      	ldr	r2, [pc, #524]	; (800b59c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b38e:	fa22 f303 	lsr.w	r3, r2, r3
 800b392:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	ee07 3a90 	vmov	s15, r3
 800b3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ac:	4b7a      	ldr	r3, [pc, #488]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b4:	ee07 3a90 	vmov	s15, r3
 800b3b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b3dc:	e087      	b.n	800b4ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	ee07 3a90 	vmov	s15, r3
 800b3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b3ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f0:	4b69      	ldr	r3, [pc, #420]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f8:	ee07 3a90 	vmov	s15, r3
 800b3fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b400:	ed97 6a03 	vldr	s12, [r7, #12]
 800b404:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b40c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b410:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b41c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b420:	e065      	b.n	800b4ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	ee07 3a90 	vmov	s15, r3
 800b428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b434:	4b58      	ldr	r3, [pc, #352]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43c:	ee07 3a90 	vmov	s15, r3
 800b440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b444:	ed97 6a03 	vldr	s12, [r7, #12]
 800b448:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b44c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b460:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b464:	e043      	b.n	800b4ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	ee07 3a90 	vmov	s15, r3
 800b46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b470:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b5ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b478:	4b47      	ldr	r3, [pc, #284]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b480:	ee07 3a90 	vmov	s15, r3
 800b484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b488:	ed97 6a03 	vldr	s12, [r7, #12]
 800b48c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b49c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4a8:	e021      	b.n	800b4ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	ee07 3a90 	vmov	s15, r3
 800b4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b4b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4bc:	4b36      	ldr	r3, [pc, #216]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c4:	ee07 3a90 	vmov	s15, r3
 800b4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b4ee:	4b2a      	ldr	r3, [pc, #168]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f2:	0a5b      	lsrs	r3, r3, #9
 800b4f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4f8:	ee07 3a90 	vmov	s15, r3
 800b4fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b504:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b508:	edd7 6a07 	vldr	s13, [r7, #28]
 800b50c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b514:	ee17 2a90 	vmov	r2, s15
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b51c:	4b1e      	ldr	r3, [pc, #120]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b520:	0c1b      	lsrs	r3, r3, #16
 800b522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b532:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b536:	edd7 6a07 	vldr	s13, [r7, #28]
 800b53a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b53e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b542:	ee17 2a90 	vmov	r2, s15
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b54a:	4b13      	ldr	r3, [pc, #76]	; (800b598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b54e:	0e1b      	lsrs	r3, r3, #24
 800b550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b554:	ee07 3a90 	vmov	s15, r3
 800b558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b560:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b564:	edd7 6a07 	vldr	s13, [r7, #28]
 800b568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b56c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b570:	ee17 2a90 	vmov	r2, s15
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b578:	e008      	b.n	800b58c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	609a      	str	r2, [r3, #8]
}
 800b58c:	bf00      	nop
 800b58e:	3724      	adds	r7, #36	; 0x24
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	58024400 	.word	0x58024400
 800b59c:	03d09000 	.word	0x03d09000
 800b5a0:	46000000 	.word	0x46000000
 800b5a4:	4c742400 	.word	0x4c742400
 800b5a8:	4a742400 	.word	0x4a742400
 800b5ac:	4bbebc20 	.word	0x4bbebc20

0800b5b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5be:	4b53      	ldr	r3, [pc, #332]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c2:	f003 0303 	and.w	r3, r3, #3
 800b5c6:	2b03      	cmp	r3, #3
 800b5c8:	d101      	bne.n	800b5ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e099      	b.n	800b702 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b5ce:	4b4f      	ldr	r3, [pc, #316]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a4e      	ldr	r2, [pc, #312]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b5d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b5d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5da:	f7f9 fb3b 	bl	8004c54 <HAL_GetTick>
 800b5de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5e0:	e008      	b.n	800b5f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b5e2:	f7f9 fb37 	bl	8004c54 <HAL_GetTick>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d901      	bls.n	800b5f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e086      	b.n	800b702 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5f4:	4b45      	ldr	r3, [pc, #276]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1f0      	bne.n	800b5e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b600:	4b42      	ldr	r3, [pc, #264]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b604:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	031b      	lsls	r3, r3, #12
 800b60e:	493f      	ldr	r1, [pc, #252]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b610:	4313      	orrs	r3, r2
 800b612:	628b      	str	r3, [r1, #40]	; 0x28
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	3b01      	subs	r3, #1
 800b61a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	3b01      	subs	r3, #1
 800b624:	025b      	lsls	r3, r3, #9
 800b626:	b29b      	uxth	r3, r3
 800b628:	431a      	orrs	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	3b01      	subs	r3, #1
 800b630:	041b      	lsls	r3, r3, #16
 800b632:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b636:	431a      	orrs	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	061b      	lsls	r3, r3, #24
 800b640:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b644:	4931      	ldr	r1, [pc, #196]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b646:	4313      	orrs	r3, r2
 800b648:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b64a:	4b30      	ldr	r3, [pc, #192]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	492d      	ldr	r1, [pc, #180]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b658:	4313      	orrs	r3, r2
 800b65a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b65c:	4b2b      	ldr	r3, [pc, #172]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	f023 0220 	bic.w	r2, r3, #32
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	699b      	ldr	r3, [r3, #24]
 800b668:	4928      	ldr	r1, [pc, #160]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b66a:	4313      	orrs	r3, r2
 800b66c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b66e:	4b27      	ldr	r3, [pc, #156]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b672:	4a26      	ldr	r2, [pc, #152]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b674:	f023 0310 	bic.w	r3, r3, #16
 800b678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b67a:	4b24      	ldr	r3, [pc, #144]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b67c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b67e:	4b24      	ldr	r3, [pc, #144]	; (800b710 <RCCEx_PLL2_Config+0x160>)
 800b680:	4013      	ands	r3, r2
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	69d2      	ldr	r2, [r2, #28]
 800b686:	00d2      	lsls	r2, r2, #3
 800b688:	4920      	ldr	r1, [pc, #128]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b68a:	4313      	orrs	r3, r2
 800b68c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b68e:	4b1f      	ldr	r3, [pc, #124]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b692:	4a1e      	ldr	r2, [pc, #120]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b694:	f043 0310 	orr.w	r3, r3, #16
 800b698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d106      	bne.n	800b6ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b6a0:	4b1a      	ldr	r3, [pc, #104]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a4:	4a19      	ldr	r2, [pc, #100]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b6a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b6ac:	e00f      	b.n	800b6ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d106      	bne.n	800b6c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b6b4:	4b15      	ldr	r3, [pc, #84]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b8:	4a14      	ldr	r2, [pc, #80]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b6ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b6c0:	e005      	b.n	800b6ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b6c2:	4b12      	ldr	r3, [pc, #72]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c6:	4a11      	ldr	r2, [pc, #68]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b6c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b6ce:	4b0f      	ldr	r3, [pc, #60]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a0e      	ldr	r2, [pc, #56]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b6d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6da:	f7f9 fabb 	bl	8004c54 <HAL_GetTick>
 800b6de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6e0:	e008      	b.n	800b6f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b6e2:	f7f9 fab7 	bl	8004c54 <HAL_GetTick>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d901      	bls.n	800b6f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e006      	b.n	800b702 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6f4:	4b05      	ldr	r3, [pc, #20]	; (800b70c <RCCEx_PLL2_Config+0x15c>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0f0      	beq.n	800b6e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b700:	7bfb      	ldrb	r3, [r7, #15]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	58024400 	.word	0x58024400
 800b710:	ffff0007 	.word	0xffff0007

0800b714 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b71e:	2300      	movs	r3, #0
 800b720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b722:	4b53      	ldr	r3, [pc, #332]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b726:	f003 0303 	and.w	r3, r3, #3
 800b72a:	2b03      	cmp	r3, #3
 800b72c:	d101      	bne.n	800b732 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e099      	b.n	800b866 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b732:	4b4f      	ldr	r3, [pc, #316]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a4e      	ldr	r2, [pc, #312]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b73c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b73e:	f7f9 fa89 	bl	8004c54 <HAL_GetTick>
 800b742:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b744:	e008      	b.n	800b758 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b746:	f7f9 fa85 	bl	8004c54 <HAL_GetTick>
 800b74a:	4602      	mov	r2, r0
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	2b02      	cmp	r3, #2
 800b752:	d901      	bls.n	800b758 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e086      	b.n	800b866 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b758:	4b45      	ldr	r3, [pc, #276]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1f0      	bne.n	800b746 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b764:	4b42      	ldr	r3, [pc, #264]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b768:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	051b      	lsls	r3, r3, #20
 800b772:	493f      	ldr	r1, [pc, #252]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b774:	4313      	orrs	r3, r2
 800b776:	628b      	str	r3, [r1, #40]	; 0x28
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	3b01      	subs	r3, #1
 800b788:	025b      	lsls	r3, r3, #9
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	431a      	orrs	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	3b01      	subs	r3, #1
 800b794:	041b      	lsls	r3, r3, #16
 800b796:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	061b      	lsls	r3, r3, #24
 800b7a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b7a8:	4931      	ldr	r1, [pc, #196]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b7ae:	4b30      	ldr	r3, [pc, #192]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	492d      	ldr	r1, [pc, #180]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b7c0:	4b2b      	ldr	r3, [pc, #172]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	4928      	ldr	r1, [pc, #160]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b7d2:	4b27      	ldr	r3, [pc, #156]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d6:	4a26      	ldr	r2, [pc, #152]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b7de:	4b24      	ldr	r3, [pc, #144]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7e2:	4b24      	ldr	r3, [pc, #144]	; (800b874 <RCCEx_PLL3_Config+0x160>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	69d2      	ldr	r2, [r2, #28]
 800b7ea:	00d2      	lsls	r2, r2, #3
 800b7ec:	4920      	ldr	r1, [pc, #128]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b7f2:	4b1f      	ldr	r3, [pc, #124]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f6:	4a1e      	ldr	r2, [pc, #120]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b7f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d106      	bne.n	800b812 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b804:	4b1a      	ldr	r3, [pc, #104]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	4a19      	ldr	r2, [pc, #100]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b80a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b80e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b810:	e00f      	b.n	800b832 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d106      	bne.n	800b826 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b818:	4b15      	ldr	r3, [pc, #84]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	4a14      	ldr	r2, [pc, #80]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b81e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b822:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b824:	e005      	b.n	800b832 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b826:	4b12      	ldr	r3, [pc, #72]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82a:	4a11      	ldr	r2, [pc, #68]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b82c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b830:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b832:	4b0f      	ldr	r3, [pc, #60]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a0e      	ldr	r2, [pc, #56]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b83c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b83e:	f7f9 fa09 	bl	8004c54 <HAL_GetTick>
 800b842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b844:	e008      	b.n	800b858 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b846:	f7f9 fa05 	bl	8004c54 <HAL_GetTick>
 800b84a:	4602      	mov	r2, r0
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	1ad3      	subs	r3, r2, r3
 800b850:	2b02      	cmp	r3, #2
 800b852:	d901      	bls.n	800b858 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b854:	2303      	movs	r3, #3
 800b856:	e006      	b.n	800b866 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b858:	4b05      	ldr	r3, [pc, #20]	; (800b870 <RCCEx_PLL3_Config+0x15c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b860:	2b00      	cmp	r3, #0
 800b862:	d0f0      	beq.n	800b846 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b864:	7bfb      	ldrb	r3, [r7, #15]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	58024400 	.word	0x58024400
 800b874:	ffff0007 	.word	0xffff0007

0800b878 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d067      	beq.n	800b95a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d106      	bne.n	800b8a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f7f6 fad4 	bl	8001e4c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	22ca      	movs	r2, #202	; 0xca
 800b8b2:	625a      	str	r2, [r3, #36]	; 0x24
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2253      	movs	r2, #83	; 0x53
 800b8ba:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 f879 	bl	800b9b4 <RTC_EnterInitMode>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d13b      	bne.n	800b944 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6899      	ldr	r1, [r3, #8]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	4b23      	ldr	r3, [pc, #140]	; (800b964 <HAL_RTC_Init+0xec>)
 800b8d8:	400b      	ands	r3, r1
 800b8da:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6899      	ldr	r1, [r3, #8]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685a      	ldr	r2, [r3, #4]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	431a      	orrs	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	431a      	orrs	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	430a      	orrs	r2, r1
 800b8f8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	0419      	lsls	r1, r3, #16
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	430a      	orrs	r2, r1
 800b90a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f881 	bl	800ba14 <RTC_ExitInitMode>
 800b912:	4603      	mov	r3, r0
 800b914:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d113      	bne.n	800b944 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f022 0203 	bic.w	r2, r2, #3
 800b92a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	69da      	ldr	r2, [r3, #28]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	431a      	orrs	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	430a      	orrs	r2, r1
 800b942:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	22ff      	movs	r2, #255	; 0xff
 800b94a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d103      	bne.n	800b95a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	ff8fffbf 	.word	0xff8fffbf

0800b968 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68da      	ldr	r2, [r3, #12]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b97e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800b980:	f7f9 f968 	bl	8004c54 <HAL_GetTick>
 800b984:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b986:	e009      	b.n	800b99c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b988:	f7f9 f964 	bl	8004c54 <HAL_GetTick>
 800b98c:	4602      	mov	r2, r0
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	1ad3      	subs	r3, r2, r3
 800b992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b996:	d901      	bls.n	800b99c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800b998:	2303      	movs	r3, #3
 800b99a:	e007      	b.n	800b9ac <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	f003 0320 	and.w	r3, r3, #32
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0ee      	beq.n	800b988 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d11d      	bne.n	800ba0a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b9d8:	f7f9 f93c 	bl	8004c54 <HAL_GetTick>
 800b9dc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b9de:	e00d      	b.n	800b9fc <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b9e0:	f7f9 f938 	bl	8004c54 <HAL_GetTick>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	1ad3      	subs	r3, r2, r3
 800b9ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9ee:	d905      	bls.n	800b9fc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2203      	movs	r2, #3
 800b9f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0ea      	beq.n	800b9e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800ba20:	4b1a      	ldr	r3, [pc, #104]	; (800ba8c <RTC_ExitInitMode+0x78>)
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	4a19      	ldr	r2, [pc, #100]	; (800ba8c <RTC_ExitInitMode+0x78>)
 800ba26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba2a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ba2c:	4b17      	ldr	r3, [pc, #92]	; (800ba8c <RTC_ExitInitMode+0x78>)
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	f003 0320 	and.w	r3, r3, #32
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10c      	bne.n	800ba52 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7ff ff95 	bl	800b968 <HAL_RTC_WaitForSynchro>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d01e      	beq.n	800ba82 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2203      	movs	r2, #3
 800ba48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	73fb      	strb	r3, [r7, #15]
 800ba50:	e017      	b.n	800ba82 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ba52:	4b0e      	ldr	r3, [pc, #56]	; (800ba8c <RTC_ExitInitMode+0x78>)
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	4a0d      	ldr	r2, [pc, #52]	; (800ba8c <RTC_ExitInitMode+0x78>)
 800ba58:	f023 0320 	bic.w	r3, r3, #32
 800ba5c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7ff ff82 	bl	800b968 <HAL_RTC_WaitForSynchro>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d005      	beq.n	800ba76 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2203      	movs	r2, #3
 800ba6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ba72:	2303      	movs	r3, #3
 800ba74:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ba76:	4b05      	ldr	r3, [pc, #20]	; (800ba8c <RTC_ExitInitMode+0x78>)
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	4a04      	ldr	r2, [pc, #16]	; (800ba8c <RTC_ExitInitMode+0x78>)
 800ba7c:	f043 0320 	orr.w	r3, r3, #32
 800ba80:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	58004000 	.word	0x58004000

0800ba90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e0eb      	b.n	800bc7e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a75      	ldr	r2, [pc, #468]	; (800bc88 <HAL_SPI_Init+0x1f8>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d00f      	beq.n	800bad6 <HAL_SPI_Init+0x46>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a74      	ldr	r2, [pc, #464]	; (800bc8c <HAL_SPI_Init+0x1fc>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d00a      	beq.n	800bad6 <HAL_SPI_Init+0x46>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a72      	ldr	r2, [pc, #456]	; (800bc90 <HAL_SPI_Init+0x200>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d005      	beq.n	800bad6 <HAL_SPI_Init+0x46>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	2b0f      	cmp	r3, #15
 800bad0:	d901      	bls.n	800bad6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800bad2:	2301      	movs	r3, #1
 800bad4:	e0d3      	b.n	800bc7e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f001 f87a 	bl	800cbd0 <SPI_GetPacketSize>
 800badc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a69      	ldr	r2, [pc, #420]	; (800bc88 <HAL_SPI_Init+0x1f8>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d00c      	beq.n	800bb02 <HAL_SPI_Init+0x72>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a67      	ldr	r2, [pc, #412]	; (800bc8c <HAL_SPI_Init+0x1fc>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d007      	beq.n	800bb02 <HAL_SPI_Init+0x72>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a66      	ldr	r2, [pc, #408]	; (800bc90 <HAL_SPI_Init+0x200>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d002      	beq.n	800bb02 <HAL_SPI_Init+0x72>
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2b08      	cmp	r3, #8
 800bb00:	d811      	bhi.n	800bb26 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bb06:	4a60      	ldr	r2, [pc, #384]	; (800bc88 <HAL_SPI_Init+0x1f8>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d009      	beq.n	800bb20 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a5e      	ldr	r2, [pc, #376]	; (800bc8c <HAL_SPI_Init+0x1fc>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d004      	beq.n	800bb20 <HAL_SPI_Init+0x90>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a5d      	ldr	r2, [pc, #372]	; (800bc90 <HAL_SPI_Init+0x200>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d104      	bne.n	800bb2a <HAL_SPI_Init+0x9a>
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2b10      	cmp	r3, #16
 800bb24:	d901      	bls.n	800bb2a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e0a9      	b.n	800bc7e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7f6 fa80 	bl	8002044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f022 0201 	bic.w	r2, r2, #1
 800bb5a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb64:	d119      	bne.n	800bb9a <HAL_SPI_Init+0x10a>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb6e:	d103      	bne.n	800bb78 <HAL_SPI_Init+0xe8>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d008      	beq.n	800bb8a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10c      	bne.n	800bb9a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb88:	d107      	bne.n	800bb9a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bb98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	69da      	ldr	r2, [r3, #28]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba2:	431a      	orrs	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	431a      	orrs	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbac:	ea42 0103 	orr.w	r1, r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	68da      	ldr	r2, [r3, #12]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	430a      	orrs	r2, r1
 800bbba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc4:	431a      	orrs	r2, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	431a      	orrs	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	431a      	orrs	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	431a      	orrs	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	431a      	orrs	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	431a      	orrs	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbee:	431a      	orrs	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	431a      	orrs	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbfa:	ea42 0103 	orr.w	r1, r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	430a      	orrs	r2, r1
 800bc08:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d113      	bne.n	800bc3a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc24:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bc38:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f022 0201 	bic.w	r2, r2, #1
 800bc48:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00a      	beq.n	800bc6c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	430a      	orrs	r2, r1
 800bc6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	40013000 	.word	0x40013000
 800bc8c:	40003800 	.word	0x40003800
 800bc90:	40003c00 	.word	0x40003c00

0800bc94 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b08a      	sub	sp, #40	; 0x28
 800bc98:	af02      	add	r7, sp, #8
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	603b      	str	r3, [r7, #0]
 800bca0:	4613      	mov	r3, r2
 800bca2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3320      	adds	r3, #32
 800bcaa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bcac:	2300      	movs	r3, #0
 800bcae:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d101      	bne.n	800bcbe <HAL_SPI_Transmit+0x2a>
 800bcba:	2302      	movs	r3, #2
 800bcbc:	e1d7      	b.n	800c06e <HAL_SPI_Transmit+0x3da>
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcc6:	f7f8 ffc5 	bl	8004c54 <HAL_GetTick>
 800bcca:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d007      	beq.n	800bce8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800bcd8:	2302      	movs	r3, #2
 800bcda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bce4:	7efb      	ldrb	r3, [r7, #27]
 800bce6:	e1c2      	b.n	800c06e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <HAL_SPI_Transmit+0x60>
 800bcee:	88fb      	ldrh	r3, [r7, #6]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d107      	bne.n	800bd04 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bd00:	7efb      	ldrb	r3, [r7, #27]
 800bd02:	e1b4      	b.n	800c06e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2203      	movs	r2, #3
 800bd08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	88fa      	ldrh	r2, [r7, #6]
 800bd1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	88fa      	ldrh	r2, [r7, #6]
 800bd26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bd54:	d107      	bne.n	800bd66 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd64:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	4b96      	ldr	r3, [pc, #600]	; (800bfc8 <HAL_SPI_Transmit+0x334>)
 800bd6e:	4013      	ands	r3, r2
 800bd70:	88f9      	ldrh	r1, [r7, #6]
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	6812      	ldr	r2, [r2, #0]
 800bd76:	430b      	orrs	r3, r1
 800bd78:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f042 0201 	orr.w	r2, r2, #1
 800bd88:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd92:	d107      	bne.n	800bda4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bda2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	2b0f      	cmp	r3, #15
 800bdaa:	d947      	bls.n	800be3c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bdac:	e03f      	b.n	800be2e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	f003 0302 	and.w	r3, r3, #2
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	d114      	bne.n	800bde6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6812      	ldr	r2, [r2, #0]
 800bdc6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdcc:	1d1a      	adds	r2, r3, #4
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	3b01      	subs	r3, #1
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bde4:	e023      	b.n	800be2e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bde6:	f7f8 ff35 	bl	8004c54 <HAL_GetTick>
 800bdea:	4602      	mov	r2, r0
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d803      	bhi.n	800bdfe <HAL_SPI_Transmit+0x16a>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfc:	d102      	bne.n	800be04 <HAL_SPI_Transmit+0x170>
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d114      	bne.n	800be2e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f000 fe15 	bl	800ca34 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e11f      	b.n	800c06e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be34:	b29b      	uxth	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1b9      	bne.n	800bdae <HAL_SPI_Transmit+0x11a>
 800be3a:	e0f2      	b.n	800c022 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	2b07      	cmp	r3, #7
 800be42:	f240 80e7 	bls.w	800c014 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800be46:	e05d      	b.n	800bf04 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	f003 0302 	and.w	r3, r3, #2
 800be52:	2b02      	cmp	r3, #2
 800be54:	d132      	bne.n	800bebc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d918      	bls.n	800be94 <HAL_SPI_Transmit+0x200>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be66:	2b00      	cmp	r3, #0
 800be68:	d014      	beq.n	800be94 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6812      	ldr	r2, [r2, #0]
 800be74:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be7a:	1d1a      	adds	r2, r3, #4
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800be86:	b29b      	uxth	r3, r3
 800be88:	3b02      	subs	r3, #2
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800be92:	e037      	b.n	800bf04 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be98:	881a      	ldrh	r2, [r3, #0]
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bea2:	1c9a      	adds	r2, r3, #2
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800beae:	b29b      	uxth	r3, r3
 800beb0:	3b01      	subs	r3, #1
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800beba:	e023      	b.n	800bf04 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bebc:	f7f8 feca 	bl	8004c54 <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d803      	bhi.n	800bed4 <HAL_SPI_Transmit+0x240>
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed2:	d102      	bne.n	800beda <HAL_SPI_Transmit+0x246>
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d114      	bne.n	800bf04 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 fdaa 	bl	800ca34 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e0b4      	b.n	800c06e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d19b      	bne.n	800be48 <HAL_SPI_Transmit+0x1b4>
 800bf10:	e087      	b.n	800c022 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	f003 0302 	and.w	r3, r3, #2
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d155      	bne.n	800bfcc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	2b03      	cmp	r3, #3
 800bf2a:	d918      	bls.n	800bf5e <HAL_SPI_Transmit+0x2ca>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf30:	2b40      	cmp	r3, #64	; 0x40
 800bf32:	d914      	bls.n	800bf5e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6812      	ldr	r2, [r2, #0]
 800bf3e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf44:	1d1a      	adds	r2, r3, #4
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	3b04      	subs	r3, #4
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bf5c:	e05a      	b.n	800c014 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d917      	bls.n	800bf9a <HAL_SPI_Transmit+0x306>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d013      	beq.n	800bf9a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf76:	881a      	ldrh	r2, [r3, #0]
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf80:	1c9a      	adds	r2, r3, #2
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	3b02      	subs	r3, #2
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bf98:	e03c      	b.n	800c014 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3320      	adds	r3, #32
 800bfa4:	7812      	ldrb	r2, [r2, #0]
 800bfa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bfc4:	e026      	b.n	800c014 <HAL_SPI_Transmit+0x380>
 800bfc6:	bf00      	nop
 800bfc8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfcc:	f7f8 fe42 	bl	8004c54 <HAL_GetTick>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d803      	bhi.n	800bfe4 <HAL_SPI_Transmit+0x350>
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe2:	d102      	bne.n	800bfea <HAL_SPI_Transmit+0x356>
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d114      	bne.n	800c014 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 fd22 	bl	800ca34 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bffe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e02c      	b.n	800c06e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f47f af78 	bne.w	800bf12 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	2200      	movs	r2, #0
 800c02a:	2108      	movs	r1, #8
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f000 fda1 	bl	800cb74 <SPI_WaitOnFlagUntilTimeout>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d007      	beq.n	800c048 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c03e:	f043 0220 	orr.w	r2, r3, #32
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f000 fcf3 	bl	800ca34 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2200      	movs	r2, #0
 800c052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	e000      	b.n	800c06e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c06c:	7efb      	ldrb	r3, [r7, #27]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3720      	adds	r7, #32
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop

0800c078 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08a      	sub	sp, #40	; 0x28
 800c07c:	af02      	add	r7, sp, #8
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	603b      	str	r3, [r7, #0]
 800c084:	4613      	mov	r3, r2
 800c086:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3330      	adds	r3, #48	; 0x30
 800c092:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c09c:	d112      	bne.n	800c0c4 <HAL_SPI_Receive+0x4c>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10e      	bne.n	800c0c4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2204      	movs	r2, #4
 800c0aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c0ae:	88fa      	ldrh	r2, [r7, #6]
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	68b9      	ldr	r1, [r7, #8]
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f000 f9ce 	bl	800c45c <HAL_SPI_TransmitReceive>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	e1c7      	b.n	800c454 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d101      	bne.n	800c0d2 <HAL_SPI_Receive+0x5a>
 800c0ce:	2302      	movs	r3, #2
 800c0d0:	e1c0      	b.n	800c454 <HAL_SPI_Receive+0x3dc>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c0da:	f7f8 fdbb 	bl	8004c54 <HAL_GetTick>
 800c0de:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d007      	beq.n	800c0fc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c0f8:	7ffb      	ldrb	r3, [r7, #31]
 800c0fa:	e1ab      	b.n	800c454 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d002      	beq.n	800c108 <HAL_SPI_Receive+0x90>
 800c102:	88fb      	ldrh	r3, [r7, #6]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d107      	bne.n	800c118 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c114:	7ffb      	ldrb	r3, [r7, #31]
 800c116:	e19d      	b.n	800c454 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2204      	movs	r2, #4
 800c11c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2200      	movs	r2, #0
 800c124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	88fa      	ldrh	r2, [r7, #6]
 800c132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	88fa      	ldrh	r2, [r7, #6]
 800c13a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2200      	movs	r2, #0
 800c150:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c168:	d107      	bne.n	800c17a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c178:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	4b94      	ldr	r3, [pc, #592]	; (800c3d4 <HAL_SPI_Receive+0x35c>)
 800c182:	4013      	ands	r3, r2
 800c184:	88f9      	ldrh	r1, [r7, #6]
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	6812      	ldr	r2, [r2, #0]
 800c18a:	430b      	orrs	r3, r1
 800c18c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f042 0201 	orr.w	r2, r2, #1
 800c19c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1a6:	d107      	bne.n	800c1b8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	2b0f      	cmp	r3, #15
 800c1be:	d948      	bls.n	800c252 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c1c0:	e040      	b.n	800c244 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	695a      	ldr	r2, [r3, #20]
 800c1c8:	f248 0308 	movw	r3, #32776	; 0x8008
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d014      	beq.n	800c1fc <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c1dc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1e2:	1d1a      	adds	r2, r3, #4
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c1fa:	e023      	b.n	800c244 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1fc:	f7f8 fd2a 	bl	8004c54 <HAL_GetTick>
 800c200:	4602      	mov	r2, r0
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d803      	bhi.n	800c214 <HAL_SPI_Receive+0x19c>
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c212:	d102      	bne.n	800c21a <HAL_SPI_Receive+0x1a2>
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d114      	bne.n	800c244 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	f000 fc0a 	bl	800ca34 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c22e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	e107      	b.n	800c454 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1b8      	bne.n	800c1c2 <HAL_SPI_Receive+0x14a>
 800c250:	e0ed      	b.n	800c42e <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	2b07      	cmp	r3, #7
 800c258:	f240 80e2 	bls.w	800c420 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c25c:	e05b      	b.n	800c316 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d030      	beq.n	800c2ce <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	695b      	ldr	r3, [r3, #20]
 800c272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c276:	2b00      	cmp	r3, #0
 800c278:	d014      	beq.n	800c2a4 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c282:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c284:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c28a:	1d1a      	adds	r2, r3, #4
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c296:	b29b      	uxth	r3, r3
 800c298:	3b02      	subs	r3, #2
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c2a2:	e038      	b.n	800c316 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2a8:	69ba      	ldr	r2, [r7, #24]
 800c2aa:	8812      	ldrh	r2, [r2, #0]
 800c2ac:	b292      	uxth	r2, r2
 800c2ae:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2b4:	1c9a      	adds	r2, r3, #2
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c2cc:	e023      	b.n	800c316 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2ce:	f7f8 fcc1 	bl	8004c54 <HAL_GetTick>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d803      	bhi.n	800c2e6 <HAL_SPI_Receive+0x26e>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e4:	d102      	bne.n	800c2ec <HAL_SPI_Receive+0x274>
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d114      	bne.n	800c316 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f000 fba1 	bl	800ca34 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c300:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	e09e      	b.n	800c454 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d19d      	bne.n	800c25e <HAL_SPI_Receive+0x1e6>
 800c322:	e084      	b.n	800c42e <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d052      	beq.n	800c3d8 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	695b      	ldr	r3, [r3, #20]
 800c338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d014      	beq.n	800c36a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c348:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c34a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c350:	1d1a      	adds	r2, r3, #4
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	3b04      	subs	r3, #4
 800c360:	b29a      	uxth	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c368:	e05a      	b.n	800c420 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	695b      	ldr	r3, [r3, #20]
 800c370:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c378:	d914      	bls.n	800c3a4 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c37e:	69ba      	ldr	r2, [r7, #24]
 800c380:	8812      	ldrh	r2, [r2, #0]
 800c382:	b292      	uxth	r2, r2
 800c384:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c38a:	1c9a      	adds	r2, r3, #2
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c396:	b29b      	uxth	r3, r3
 800c398:	3b02      	subs	r3, #2
 800c39a:	b29a      	uxth	r2, r3
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c3a2:	e03d      	b.n	800c420 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3b0:	7812      	ldrb	r2, [r2, #0]
 800c3b2:	b2d2      	uxtb	r2, r2
 800c3b4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3ba:	1c5a      	adds	r2, r3, #1
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c3d2:	e025      	b.n	800c420 <HAL_SPI_Receive+0x3a8>
 800c3d4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3d8:	f7f8 fc3c 	bl	8004c54 <HAL_GetTick>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d803      	bhi.n	800c3f0 <HAL_SPI_Receive+0x378>
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ee:	d102      	bne.n	800c3f6 <HAL_SPI_Receive+0x37e>
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d114      	bne.n	800c420 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f000 fb1c 	bl	800ca34 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c40a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e019      	b.n	800c454 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c426:	b29b      	uxth	r3, r3
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f47f af7b 	bne.w	800c324 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f000 fb00 	bl	800ca34 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e000      	b.n	800c454 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800c452:	7ffb      	ldrb	r3, [r7, #31]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3720      	adds	r7, #32
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b08e      	sub	sp, #56	; 0x38
 800c460:	af02      	add	r7, sp, #8
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
 800c468:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	3320      	adds	r3, #32
 800c476:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	3330      	adds	r3, #48	; 0x30
 800c47e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c486:	2b01      	cmp	r3, #1
 800c488:	d101      	bne.n	800c48e <HAL_SPI_TransmitReceive+0x32>
 800c48a:	2302      	movs	r3, #2
 800c48c:	e2ce      	b.n	800ca2c <HAL_SPI_TransmitReceive+0x5d0>
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2201      	movs	r2, #1
 800c492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c496:	f7f8 fbdd 	bl	8004c54 <HAL_GetTick>
 800c49a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800c49c:	887b      	ldrh	r3, [r7, #2]
 800c49e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800c4a0:	887b      	ldrh	r3, [r7, #2]
 800c4a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c4aa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c4b2:	7efb      	ldrb	r3, [r7, #27]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d014      	beq.n	800c4e2 <HAL_SPI_TransmitReceive+0x86>
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4be:	d106      	bne.n	800c4ce <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <HAL_SPI_TransmitReceive+0x72>
 800c4c8:	7efb      	ldrb	r3, [r7, #27]
 800c4ca:	2b04      	cmp	r3, #4
 800c4cc:	d009      	beq.n	800c4e2 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800c4ce:	2302      	movs	r3, #2
 800c4d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c4dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c4e0:	e2a4      	b.n	800ca2c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d005      	beq.n	800c4f4 <HAL_SPI_TransmitReceive+0x98>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d002      	beq.n	800c4f4 <HAL_SPI_TransmitReceive+0x98>
 800c4ee:	887b      	ldrh	r3, [r7, #2]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d109      	bne.n	800c508 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c502:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c506:	e291      	b.n	800ca2c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	2b04      	cmp	r3, #4
 800c512:	d003      	beq.n	800c51c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2205      	movs	r2, #5
 800c518:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2200      	movs	r2, #0
 800c520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	887a      	ldrh	r2, [r7, #2]
 800c52e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	887a      	ldrh	r2, [r7, #2]
 800c536:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	68ba      	ldr	r2, [r7, #8]
 800c53e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	887a      	ldrh	r2, [r7, #2]
 800c544:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	887a      	ldrh	r2, [r7, #2]
 800c54c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	685a      	ldr	r2, [r3, #4]
 800c562:	4b9f      	ldr	r3, [pc, #636]	; (800c7e0 <HAL_SPI_TransmitReceive+0x384>)
 800c564:	4013      	ands	r3, r2
 800c566:	8879      	ldrh	r1, [r7, #2]
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	6812      	ldr	r2, [r2, #0]
 800c56c:	430b      	orrs	r3, r1
 800c56e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f042 0201 	orr.w	r2, r2, #1
 800c57e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c588:	d107      	bne.n	800c59a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c598:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	2b0f      	cmp	r3, #15
 800c5a0:	d970      	bls.n	800c684 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c5a2:	e068      	b.n	800c676 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	695b      	ldr	r3, [r3, #20]
 800c5aa:	f003 0302 	and.w	r3, r3, #2
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d11a      	bne.n	800c5e8 <HAL_SPI_TransmitReceive+0x18c>
 800c5b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d017      	beq.n	800c5e8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6812      	ldr	r2, [r2, #0]
 800c5c2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5c8:	1d1a      	adds	r2, r3, #4
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	695a      	ldr	r2, [r3, #20]
 800c5ee:	f248 0308 	movw	r3, #32776	; 0x8008
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d01a      	beq.n	800c62e <HAL_SPI_TransmitReceive+0x1d2>
 800c5f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d017      	beq.n	800c62e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c606:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c608:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c60e:	1d1a      	adds	r2, r3, #4
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	3b01      	subs	r3, #1
 800c61e:	b29a      	uxth	r2, r3
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c62c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c62e:	f7f8 fb11 	bl	8004c54 <HAL_GetTick>
 800c632:	4602      	mov	r2, r0
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	1ad3      	subs	r3, r2, r3
 800c638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d803      	bhi.n	800c646 <HAL_SPI_TransmitReceive+0x1ea>
 800c63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c644:	d102      	bne.n	800c64c <HAL_SPI_TransmitReceive+0x1f0>
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d114      	bne.n	800c676 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f000 f9f1 	bl	800ca34 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c660:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	e1da      	b.n	800ca2c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c676:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d193      	bne.n	800c5a4 <HAL_SPI_TransmitReceive+0x148>
 800c67c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d190      	bne.n	800c5a4 <HAL_SPI_TransmitReceive+0x148>
 800c682:	e1ac      	b.n	800c9de <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	2b07      	cmp	r3, #7
 800c68a:	f240 81a0 	bls.w	800c9ce <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c68e:	e0a9      	b.n	800c7e4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	f003 0302 	and.w	r3, r3, #2
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d139      	bne.n	800c712 <HAL_SPI_TransmitReceive+0x2b6>
 800c69e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d036      	beq.n	800c712 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c6a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d91c      	bls.n	800c6e4 <HAL_SPI_TransmitReceive+0x288>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d018      	beq.n	800c6e4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6812      	ldr	r2, [r2, #0]
 800c6bc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6c2:	1d1a      	adds	r2, r3, #4
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	3b02      	subs	r3, #2
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c6e2:	e016      	b.n	800c712 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6e8:	881a      	ldrh	r2, [r3, #0]
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6f2:	1c9a      	adds	r2, r3, #2
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	3b01      	subs	r3, #1
 800c702:	b29a      	uxth	r2, r3
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c710:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d03a      	beq.n	800c796 <HAL_SPI_TransmitReceive+0x33a>
 800c720:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c722:	2b00      	cmp	r3, #0
 800c724:	d037      	beq.n	800c796 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c730:	2b00      	cmp	r3, #0
 800c732:	d018      	beq.n	800c766 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c73c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c73e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c744:	1d1a      	adds	r2, r3, #4
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c750:	b29b      	uxth	r3, r3
 800c752:	3b02      	subs	r3, #2
 800c754:	b29a      	uxth	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c762:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c764:	e017      	b.n	800c796 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c76a:	6a3a      	ldr	r2, [r7, #32]
 800c76c:	8812      	ldrh	r2, [r2, #0]
 800c76e:	b292      	uxth	r2, r2
 800c770:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c776:	1c9a      	adds	r2, r3, #2
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c782:	b29b      	uxth	r3, r3
 800c784:	3b01      	subs	r3, #1
 800c786:	b29a      	uxth	r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c794:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c796:	f7f8 fa5d 	bl	8004c54 <HAL_GetTick>
 800c79a:	4602      	mov	r2, r0
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d803      	bhi.n	800c7ae <HAL_SPI_TransmitReceive+0x352>
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ac:	d102      	bne.n	800c7b4 <HAL_SPI_TransmitReceive+0x358>
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d117      	bne.n	800c7e4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f000 f93d 	bl	800ca34 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e126      	b.n	800ca2c <HAL_SPI_TransmitReceive+0x5d0>
 800c7de:	bf00      	nop
 800c7e0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c7e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f47f af52 	bne.w	800c690 <HAL_SPI_TransmitReceive+0x234>
 800c7ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f47f af4e 	bne.w	800c690 <HAL_SPI_TransmitReceive+0x234>
 800c7f4:	e0f3      	b.n	800c9de <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	695b      	ldr	r3, [r3, #20]
 800c7fc:	f003 0302 	and.w	r3, r3, #2
 800c800:	2b02      	cmp	r3, #2
 800c802:	d15a      	bne.n	800c8ba <HAL_SPI_TransmitReceive+0x45e>
 800c804:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c806:	2b00      	cmp	r3, #0
 800c808:	d057      	beq.n	800c8ba <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c80a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c80c:	2b03      	cmp	r3, #3
 800c80e:	d91c      	bls.n	800c84a <HAL_SPI_TransmitReceive+0x3ee>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c814:	2b40      	cmp	r3, #64	; 0x40
 800c816:	d918      	bls.n	800c84a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6812      	ldr	r2, [r2, #0]
 800c822:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c828:	1d1a      	adds	r2, r3, #4
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c834:	b29b      	uxth	r3, r3
 800c836:	3b04      	subs	r3, #4
 800c838:	b29a      	uxth	r2, r3
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c846:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c848:	e037      	b.n	800c8ba <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c84a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d91b      	bls.n	800c888 <HAL_SPI_TransmitReceive+0x42c>
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c854:	2b00      	cmp	r3, #0
 800c856:	d017      	beq.n	800c888 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c85c:	881a      	ldrh	r2, [r3, #0]
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c866:	1c9a      	adds	r2, r3, #2
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c872:	b29b      	uxth	r3, r3
 800c874:	3b02      	subs	r3, #2
 800c876:	b29a      	uxth	r2, r3
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c884:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c886:	e018      	b.n	800c8ba <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	3320      	adds	r3, #32
 800c892:	7812      	ldrb	r2, [r2, #0]
 800c894:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	695b      	ldr	r3, [r3, #20]
 800c8c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d05e      	beq.n	800c986 <HAL_SPI_TransmitReceive+0x52a>
 800c8c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d05b      	beq.n	800c986 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	695b      	ldr	r3, [r3, #20]
 800c8d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d018      	beq.n	800c90e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c8e6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8ec:	1d1a      	adds	r2, r3, #4
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	3b04      	subs	r3, #4
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c90a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c90c:	e03b      	b.n	800c986 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	695b      	ldr	r3, [r3, #20]
 800c914:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c91c:	d918      	bls.n	800c950 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c922:	6a3a      	ldr	r2, [r7, #32]
 800c924:	8812      	ldrh	r2, [r2, #0]
 800c926:	b292      	uxth	r2, r2
 800c928:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c92e:	1c9a      	adds	r2, r3, #2
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	3b02      	subs	r3, #2
 800c93e:	b29a      	uxth	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c94c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c94e:	e01a      	b.n	800c986 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c95c:	7812      	ldrb	r2, [r2, #0]
 800c95e:	b2d2      	uxtb	r2, r2
 800c960:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c972:	b29b      	uxth	r3, r3
 800c974:	3b01      	subs	r3, #1
 800c976:	b29a      	uxth	r2, r3
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c984:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c986:	f7f8 f965 	bl	8004c54 <HAL_GetTick>
 800c98a:	4602      	mov	r2, r0
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	1ad3      	subs	r3, r2, r3
 800c990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c992:	429a      	cmp	r2, r3
 800c994:	d803      	bhi.n	800c99e <HAL_SPI_TransmitReceive+0x542>
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c99c:	d102      	bne.n	800c9a4 <HAL_SPI_TransmitReceive+0x548>
 800c99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d114      	bne.n	800c9ce <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f000 f845 	bl	800ca34 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e02e      	b.n	800ca2c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c9ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f47f af10 	bne.w	800c7f6 <HAL_SPI_TransmitReceive+0x39a>
 800c9d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f47f af0c 	bne.w	800c7f6 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2108      	movs	r1, #8
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f000 f8c3 	bl	800cb74 <SPI_WaitOnFlagUntilTimeout>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d007      	beq.n	800ca04 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9fa:	f043 0220 	orr.w	r2, r3, #32
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ca04:	68f8      	ldr	r0, [r7, #12]
 800ca06:	f000 f815 	bl	800ca34 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d001      	beq.n	800ca28 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800ca24:	2301      	movs	r3, #1
 800ca26:	e001      	b.n	800ca2c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800ca28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3730      	adds	r7, #48	; 0x30
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	699a      	ldr	r2, [r3, #24]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f042 0208 	orr.w	r2, r2, #8
 800ca52:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	699a      	ldr	r2, [r3, #24]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f042 0210 	orr.w	r2, r2, #16
 800ca62:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f022 0201 	bic.w	r2, r2, #1
 800ca72:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	6919      	ldr	r1, [r3, #16]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	4b3c      	ldr	r3, [pc, #240]	; (800cb70 <SPI_CloseTransfer+0x13c>)
 800ca80:	400b      	ands	r3, r1
 800ca82:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	689a      	ldr	r2, [r3, #8]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ca92:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b04      	cmp	r3, #4
 800ca9e:	d014      	beq.n	800caca <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f003 0320 	and.w	r3, r3, #32
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00f      	beq.n	800caca <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cab0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	699a      	ldr	r2, [r3, #24]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f042 0220 	orr.w	r2, r2, #32
 800cac8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d014      	beq.n	800cb00 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00f      	beq.n	800cb00 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cae6:	f043 0204 	orr.w	r2, r3, #4
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	699a      	ldr	r2, [r3, #24]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cafe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00f      	beq.n	800cb2a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb10:	f043 0201 	orr.w	r2, r3, #1
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	699a      	ldr	r2, [r3, #24]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb28:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00f      	beq.n	800cb54 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb3a:	f043 0208 	orr.w	r2, r3, #8
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	699a      	ldr	r2, [r3, #24]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb52:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800cb64:	bf00      	nop
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	fffffc90 	.word	0xfffffc90

0800cb74 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	603b      	str	r3, [r7, #0]
 800cb80:	4613      	mov	r3, r2
 800cb82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cb84:	e010      	b.n	800cba8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb86:	f7f8 f865 	bl	8004c54 <HAL_GetTick>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	1ad3      	subs	r3, r2, r3
 800cb90:	69ba      	ldr	r2, [r7, #24]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d803      	bhi.n	800cb9e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb9c:	d102      	bne.n	800cba4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d101      	bne.n	800cba8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e00f      	b.n	800cbc8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	695a      	ldr	r2, [r3, #20]
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	4013      	ands	r3, r2
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	bf0c      	ite	eq
 800cbb8:	2301      	moveq	r3, #1
 800cbba:	2300      	movne	r3, #0
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	79fb      	ldrb	r3, [r7, #7]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d0df      	beq.n	800cb86 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cbc6:	2300      	movs	r3, #0
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbdc:	095b      	lsrs	r3, r3, #5
 800cbde:	3301      	adds	r3, #1
 800cbe0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	3307      	adds	r3, #7
 800cbee:	08db      	lsrs	r3, r3, #3
 800cbf0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	fb02 f303 	mul.w	r3, r2, r3
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3714      	adds	r7, #20
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr

0800cc06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b082      	sub	sp, #8
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d101      	bne.n	800cc18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e049      	b.n	800ccac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d106      	bne.n	800cc32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f841 	bl	800ccb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2202      	movs	r2, #2
 800cc36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	3304      	adds	r3, #4
 800cc42:	4619      	mov	r1, r3
 800cc44:	4610      	mov	r0, r2
 800cc46:	f000 fb5d 	bl	800d304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2201      	movs	r2, #1
 800cc56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2201      	movs	r2, #1
 800cc66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2201      	movs	r2, #1
 800cc76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2201      	movs	r2, #1
 800cc86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ccbc:	bf00      	nop
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d001      	beq.n	800cce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e04f      	b.n	800cd80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2202      	movs	r2, #2
 800cce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	68da      	ldr	r2, [r3, #12]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f042 0201 	orr.w	r2, r2, #1
 800ccf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a23      	ldr	r2, [pc, #140]	; (800cd8c <HAL_TIM_Base_Start_IT+0xc4>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d01d      	beq.n	800cd3e <HAL_TIM_Base_Start_IT+0x76>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd0a:	d018      	beq.n	800cd3e <HAL_TIM_Base_Start_IT+0x76>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a1f      	ldr	r2, [pc, #124]	; (800cd90 <HAL_TIM_Base_Start_IT+0xc8>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d013      	beq.n	800cd3e <HAL_TIM_Base_Start_IT+0x76>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a1e      	ldr	r2, [pc, #120]	; (800cd94 <HAL_TIM_Base_Start_IT+0xcc>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d00e      	beq.n	800cd3e <HAL_TIM_Base_Start_IT+0x76>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a1c      	ldr	r2, [pc, #112]	; (800cd98 <HAL_TIM_Base_Start_IT+0xd0>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d009      	beq.n	800cd3e <HAL_TIM_Base_Start_IT+0x76>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a1b      	ldr	r2, [pc, #108]	; (800cd9c <HAL_TIM_Base_Start_IT+0xd4>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d004      	beq.n	800cd3e <HAL_TIM_Base_Start_IT+0x76>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a19      	ldr	r2, [pc, #100]	; (800cda0 <HAL_TIM_Base_Start_IT+0xd8>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d115      	bne.n	800cd6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	689a      	ldr	r2, [r3, #8]
 800cd44:	4b17      	ldr	r3, [pc, #92]	; (800cda4 <HAL_TIM_Base_Start_IT+0xdc>)
 800cd46:	4013      	ands	r3, r2
 800cd48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b06      	cmp	r3, #6
 800cd4e:	d015      	beq.n	800cd7c <HAL_TIM_Base_Start_IT+0xb4>
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd56:	d011      	beq.n	800cd7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f042 0201 	orr.w	r2, r2, #1
 800cd66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd68:	e008      	b.n	800cd7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f042 0201 	orr.w	r2, r2, #1
 800cd78:	601a      	str	r2, [r3, #0]
 800cd7a:	e000      	b.n	800cd7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	40010000 	.word	0x40010000
 800cd90:	40000400 	.word	0x40000400
 800cd94:	40000800 	.word	0x40000800
 800cd98:	40000c00 	.word	0x40000c00
 800cd9c:	40010400 	.word	0x40010400
 800cda0:	40001800 	.word	0x40001800
 800cda4:	00010007 	.word	0x00010007

0800cda8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e049      	b.n	800ce4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7f5 fc8c 	bl	80026ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2202      	movs	r2, #2
 800cdd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3304      	adds	r3, #4
 800cde4:	4619      	mov	r1, r3
 800cde6:	4610      	mov	r0, r2
 800cde8:	f000 fa8c 	bl	800d304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b082      	sub	sp, #8
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	691b      	ldr	r3, [r3, #16]
 800ce64:	f003 0302 	and.w	r3, r3, #2
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d122      	bne.n	800ceb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	f003 0302 	and.w	r3, r3, #2
 800ce76:	2b02      	cmp	r3, #2
 800ce78:	d11b      	bne.n	800ceb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f06f 0202 	mvn.w	r2, #2
 800ce82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	f003 0303 	and.w	r3, r3, #3
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d003      	beq.n	800cea0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fa15 	bl	800d2c8 <HAL_TIM_IC_CaptureCallback>
 800ce9e:	e005      	b.n	800ceac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 fa07 	bl	800d2b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fa18 	bl	800d2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	f003 0304 	and.w	r3, r3, #4
 800cebc:	2b04      	cmp	r3, #4
 800cebe:	d122      	bne.n	800cf06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	f003 0304 	and.w	r3, r3, #4
 800ceca:	2b04      	cmp	r3, #4
 800cecc:	d11b      	bne.n	800cf06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f06f 0204 	mvn.w	r2, #4
 800ced6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2202      	movs	r2, #2
 800cedc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	699b      	ldr	r3, [r3, #24]
 800cee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d003      	beq.n	800cef4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f9eb 	bl	800d2c8 <HAL_TIM_IC_CaptureCallback>
 800cef2:	e005      	b.n	800cf00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 f9dd 	bl	800d2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f9ee 	bl	800d2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	f003 0308 	and.w	r3, r3, #8
 800cf10:	2b08      	cmp	r3, #8
 800cf12:	d122      	bne.n	800cf5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	f003 0308 	and.w	r3, r3, #8
 800cf1e:	2b08      	cmp	r3, #8
 800cf20:	d11b      	bne.n	800cf5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f06f 0208 	mvn.w	r2, #8
 800cf2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2204      	movs	r2, #4
 800cf30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	f003 0303 	and.w	r3, r3, #3
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f9c1 	bl	800d2c8 <HAL_TIM_IC_CaptureCallback>
 800cf46:	e005      	b.n	800cf54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 f9b3 	bl	800d2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 f9c4 	bl	800d2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	f003 0310 	and.w	r3, r3, #16
 800cf64:	2b10      	cmp	r3, #16
 800cf66:	d122      	bne.n	800cfae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	f003 0310 	and.w	r3, r3, #16
 800cf72:	2b10      	cmp	r3, #16
 800cf74:	d11b      	bne.n	800cfae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f06f 0210 	mvn.w	r2, #16
 800cf7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2208      	movs	r2, #8
 800cf84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69db      	ldr	r3, [r3, #28]
 800cf8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d003      	beq.n	800cf9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 f997 	bl	800d2c8 <HAL_TIM_IC_CaptureCallback>
 800cf9a:	e005      	b.n	800cfa8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f989 	bl	800d2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f99a 	bl	800d2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d10e      	bne.n	800cfda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d107      	bne.n	800cfda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f06f 0201 	mvn.w	r2, #1
 800cfd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7f4 fee5 	bl	8001da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	691b      	ldr	r3, [r3, #16]
 800cfe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfe4:	2b80      	cmp	r3, #128	; 0x80
 800cfe6:	d10e      	bne.n	800d006 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cff2:	2b80      	cmp	r3, #128	; 0x80
 800cff4:	d107      	bne.n	800d006 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 feb1 	bl	800dd68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d014:	d10e      	bne.n	800d034 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d020:	2b80      	cmp	r3, #128	; 0x80
 800d022:	d107      	bne.n	800d034 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d02c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fea4 	bl	800dd7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d03e:	2b40      	cmp	r3, #64	; 0x40
 800d040:	d10e      	bne.n	800d060 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d04c:	2b40      	cmp	r3, #64	; 0x40
 800d04e:	d107      	bne.n	800d060 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f948 	bl	800d2f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	f003 0320 	and.w	r3, r3, #32
 800d06a:	2b20      	cmp	r3, #32
 800d06c:	d10e      	bne.n	800d08c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	f003 0320 	and.w	r3, r3, #32
 800d078:	2b20      	cmp	r3, #32
 800d07a:	d107      	bne.n	800d08c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f06f 0220 	mvn.w	r2, #32
 800d084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 fe64 	bl	800dd54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d101      	bne.n	800d0ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d0aa:	2302      	movs	r3, #2
 800d0ac:	e0fd      	b.n	800d2aa <HAL_TIM_PWM_ConfigChannel+0x216>
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b14      	cmp	r3, #20
 800d0ba:	f200 80f0 	bhi.w	800d29e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800d0be:	a201      	add	r2, pc, #4	; (adr r2, 800d0c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800d0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c4:	0800d119 	.word	0x0800d119
 800d0c8:	0800d29f 	.word	0x0800d29f
 800d0cc:	0800d29f 	.word	0x0800d29f
 800d0d0:	0800d29f 	.word	0x0800d29f
 800d0d4:	0800d159 	.word	0x0800d159
 800d0d8:	0800d29f 	.word	0x0800d29f
 800d0dc:	0800d29f 	.word	0x0800d29f
 800d0e0:	0800d29f 	.word	0x0800d29f
 800d0e4:	0800d19b 	.word	0x0800d19b
 800d0e8:	0800d29f 	.word	0x0800d29f
 800d0ec:	0800d29f 	.word	0x0800d29f
 800d0f0:	0800d29f 	.word	0x0800d29f
 800d0f4:	0800d1db 	.word	0x0800d1db
 800d0f8:	0800d29f 	.word	0x0800d29f
 800d0fc:	0800d29f 	.word	0x0800d29f
 800d100:	0800d29f 	.word	0x0800d29f
 800d104:	0800d21d 	.word	0x0800d21d
 800d108:	0800d29f 	.word	0x0800d29f
 800d10c:	0800d29f 	.word	0x0800d29f
 800d110:	0800d29f 	.word	0x0800d29f
 800d114:	0800d25d 	.word	0x0800d25d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	68b9      	ldr	r1, [r7, #8]
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 f98a 	bl	800d438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	699a      	ldr	r2, [r3, #24]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f042 0208 	orr.w	r2, r2, #8
 800d132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	699a      	ldr	r2, [r3, #24]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f022 0204 	bic.w	r2, r2, #4
 800d142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6999      	ldr	r1, [r3, #24]
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	691a      	ldr	r2, [r3, #16]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	430a      	orrs	r2, r1
 800d154:	619a      	str	r2, [r3, #24]
      break;
 800d156:	e0a3      	b.n	800d2a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68b9      	ldr	r1, [r7, #8]
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 f9fa 	bl	800d558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	699a      	ldr	r2, [r3, #24]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	699a      	ldr	r2, [r3, #24]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	6999      	ldr	r1, [r3, #24]
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	021a      	lsls	r2, r3, #8
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	430a      	orrs	r2, r1
 800d196:	619a      	str	r2, [r3, #24]
      break;
 800d198:	e082      	b.n	800d2a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	68b9      	ldr	r1, [r7, #8]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 fa63 	bl	800d66c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	69da      	ldr	r2, [r3, #28]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f042 0208 	orr.w	r2, r2, #8
 800d1b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	69da      	ldr	r2, [r3, #28]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f022 0204 	bic.w	r2, r2, #4
 800d1c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	69d9      	ldr	r1, [r3, #28]
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	691a      	ldr	r2, [r3, #16]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	61da      	str	r2, [r3, #28]
      break;
 800d1d8:	e062      	b.n	800d2a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	68b9      	ldr	r1, [r7, #8]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f000 fac9 	bl	800d778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	69da      	ldr	r2, [r3, #28]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	69da      	ldr	r2, [r3, #28]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	69d9      	ldr	r1, [r3, #28]
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	021a      	lsls	r2, r3, #8
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	430a      	orrs	r2, r1
 800d218:	61da      	str	r2, [r3, #28]
      break;
 800d21a:	e041      	b.n	800d2a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	68b9      	ldr	r1, [r7, #8]
 800d222:	4618      	mov	r0, r3
 800d224:	f000 fb10 	bl	800d848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f042 0208 	orr.w	r2, r2, #8
 800d236:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f022 0204 	bic.w	r2, r2, #4
 800d246:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	691a      	ldr	r2, [r3, #16]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	430a      	orrs	r2, r1
 800d258:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d25a:	e021      	b.n	800d2a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	68b9      	ldr	r1, [r7, #8]
 800d262:	4618      	mov	r0, r3
 800d264:	f000 fb52 	bl	800d90c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d276:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d286:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	021a      	lsls	r2, r3, #8
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	430a      	orrs	r2, r1
 800d29a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d29c:	e000      	b.n	800d2a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800d29e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop

0800d2b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d2bc:	bf00      	nop
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d2e4:	bf00      	nop
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2f8:	bf00      	nop
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4a40      	ldr	r2, [pc, #256]	; (800d418 <TIM_Base_SetConfig+0x114>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d013      	beq.n	800d344 <TIM_Base_SetConfig+0x40>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d322:	d00f      	beq.n	800d344 <TIM_Base_SetConfig+0x40>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4a3d      	ldr	r2, [pc, #244]	; (800d41c <TIM_Base_SetConfig+0x118>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d00b      	beq.n	800d344 <TIM_Base_SetConfig+0x40>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a3c      	ldr	r2, [pc, #240]	; (800d420 <TIM_Base_SetConfig+0x11c>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d007      	beq.n	800d344 <TIM_Base_SetConfig+0x40>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a3b      	ldr	r2, [pc, #236]	; (800d424 <TIM_Base_SetConfig+0x120>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d003      	beq.n	800d344 <TIM_Base_SetConfig+0x40>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4a3a      	ldr	r2, [pc, #232]	; (800d428 <TIM_Base_SetConfig+0x124>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d108      	bne.n	800d356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d34a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	4313      	orrs	r3, r2
 800d354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4a2f      	ldr	r2, [pc, #188]	; (800d418 <TIM_Base_SetConfig+0x114>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d01f      	beq.n	800d39e <TIM_Base_SetConfig+0x9a>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d364:	d01b      	beq.n	800d39e <TIM_Base_SetConfig+0x9a>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	4a2c      	ldr	r2, [pc, #176]	; (800d41c <TIM_Base_SetConfig+0x118>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d017      	beq.n	800d39e <TIM_Base_SetConfig+0x9a>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4a2b      	ldr	r2, [pc, #172]	; (800d420 <TIM_Base_SetConfig+0x11c>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d013      	beq.n	800d39e <TIM_Base_SetConfig+0x9a>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	4a2a      	ldr	r2, [pc, #168]	; (800d424 <TIM_Base_SetConfig+0x120>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d00f      	beq.n	800d39e <TIM_Base_SetConfig+0x9a>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	4a29      	ldr	r2, [pc, #164]	; (800d428 <TIM_Base_SetConfig+0x124>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d00b      	beq.n	800d39e <TIM_Base_SetConfig+0x9a>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4a28      	ldr	r2, [pc, #160]	; (800d42c <TIM_Base_SetConfig+0x128>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d007      	beq.n	800d39e <TIM_Base_SetConfig+0x9a>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4a27      	ldr	r2, [pc, #156]	; (800d430 <TIM_Base_SetConfig+0x12c>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d003      	beq.n	800d39e <TIM_Base_SetConfig+0x9a>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4a26      	ldr	r2, [pc, #152]	; (800d434 <TIM_Base_SetConfig+0x130>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d108      	bne.n	800d3b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	68fa      	ldr	r2, [r7, #12]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	695b      	ldr	r3, [r3, #20]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	689a      	ldr	r2, [r3, #8]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4a10      	ldr	r2, [pc, #64]	; (800d418 <TIM_Base_SetConfig+0x114>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d00f      	beq.n	800d3fc <TIM_Base_SetConfig+0xf8>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	4a12      	ldr	r2, [pc, #72]	; (800d428 <TIM_Base_SetConfig+0x124>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d00b      	beq.n	800d3fc <TIM_Base_SetConfig+0xf8>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4a11      	ldr	r2, [pc, #68]	; (800d42c <TIM_Base_SetConfig+0x128>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d007      	beq.n	800d3fc <TIM_Base_SetConfig+0xf8>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	4a10      	ldr	r2, [pc, #64]	; (800d430 <TIM_Base_SetConfig+0x12c>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d003      	beq.n	800d3fc <TIM_Base_SetConfig+0xf8>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	4a0f      	ldr	r2, [pc, #60]	; (800d434 <TIM_Base_SetConfig+0x130>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d103      	bne.n	800d404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	691a      	ldr	r2, [r3, #16]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2201      	movs	r2, #1
 800d408:	615a      	str	r2, [r3, #20]
}
 800d40a:	bf00      	nop
 800d40c:	3714      	adds	r7, #20
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	40010000 	.word	0x40010000
 800d41c:	40000400 	.word	0x40000400
 800d420:	40000800 	.word	0x40000800
 800d424:	40000c00 	.word	0x40000c00
 800d428:	40010400 	.word	0x40010400
 800d42c:	40014000 	.word	0x40014000
 800d430:	40014400 	.word	0x40014400
 800d434:	40014800 	.word	0x40014800

0800d438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d438:	b480      	push	{r7}
 800d43a:	b087      	sub	sp, #28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	f023 0201 	bic.w	r2, r3, #1
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	699b      	ldr	r3, [r3, #24]
 800d45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	4b37      	ldr	r3, [pc, #220]	; (800d540 <TIM_OC1_SetConfig+0x108>)
 800d464:	4013      	ands	r3, r2
 800d466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f023 0303 	bic.w	r3, r3, #3
 800d46e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	4313      	orrs	r3, r2
 800d478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f023 0302 	bic.w	r3, r3, #2
 800d480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	4313      	orrs	r3, r2
 800d48a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4a2d      	ldr	r2, [pc, #180]	; (800d544 <TIM_OC1_SetConfig+0x10c>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d00f      	beq.n	800d4b4 <TIM_OC1_SetConfig+0x7c>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a2c      	ldr	r2, [pc, #176]	; (800d548 <TIM_OC1_SetConfig+0x110>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d00b      	beq.n	800d4b4 <TIM_OC1_SetConfig+0x7c>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a2b      	ldr	r2, [pc, #172]	; (800d54c <TIM_OC1_SetConfig+0x114>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d007      	beq.n	800d4b4 <TIM_OC1_SetConfig+0x7c>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4a2a      	ldr	r2, [pc, #168]	; (800d550 <TIM_OC1_SetConfig+0x118>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d003      	beq.n	800d4b4 <TIM_OC1_SetConfig+0x7c>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4a29      	ldr	r2, [pc, #164]	; (800d554 <TIM_OC1_SetConfig+0x11c>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d10c      	bne.n	800d4ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	f023 0308 	bic.w	r3, r3, #8
 800d4ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	697a      	ldr	r2, [r7, #20]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	f023 0304 	bic.w	r3, r3, #4
 800d4cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	4a1c      	ldr	r2, [pc, #112]	; (800d544 <TIM_OC1_SetConfig+0x10c>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d00f      	beq.n	800d4f6 <TIM_OC1_SetConfig+0xbe>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	4a1b      	ldr	r2, [pc, #108]	; (800d548 <TIM_OC1_SetConfig+0x110>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d00b      	beq.n	800d4f6 <TIM_OC1_SetConfig+0xbe>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4a1a      	ldr	r2, [pc, #104]	; (800d54c <TIM_OC1_SetConfig+0x114>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d007      	beq.n	800d4f6 <TIM_OC1_SetConfig+0xbe>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	4a19      	ldr	r2, [pc, #100]	; (800d550 <TIM_OC1_SetConfig+0x118>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d003      	beq.n	800d4f6 <TIM_OC1_SetConfig+0xbe>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4a18      	ldr	r2, [pc, #96]	; (800d554 <TIM_OC1_SetConfig+0x11c>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d111      	bne.n	800d51a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	695b      	ldr	r3, [r3, #20]
 800d50a:	693a      	ldr	r2, [r7, #16]
 800d50c:	4313      	orrs	r3, r2
 800d50e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	699b      	ldr	r3, [r3, #24]
 800d514:	693a      	ldr	r2, [r7, #16]
 800d516:	4313      	orrs	r3, r2
 800d518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	697a      	ldr	r2, [r7, #20]
 800d532:	621a      	str	r2, [r3, #32]
}
 800d534:	bf00      	nop
 800d536:	371c      	adds	r7, #28
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	fffeff8f 	.word	0xfffeff8f
 800d544:	40010000 	.word	0x40010000
 800d548:	40010400 	.word	0x40010400
 800d54c:	40014000 	.word	0x40014000
 800d550:	40014400 	.word	0x40014400
 800d554:	40014800 	.word	0x40014800

0800d558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d558:	b480      	push	{r7}
 800d55a:	b087      	sub	sp, #28
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a1b      	ldr	r3, [r3, #32]
 800d566:	f023 0210 	bic.w	r2, r3, #16
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	4b34      	ldr	r3, [pc, #208]	; (800d654 <TIM_OC2_SetConfig+0xfc>)
 800d584:	4013      	ands	r3, r2
 800d586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d58e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	021b      	lsls	r3, r3, #8
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	4313      	orrs	r3, r2
 800d59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	f023 0320 	bic.w	r3, r3, #32
 800d5a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	011b      	lsls	r3, r3, #4
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4a29      	ldr	r2, [pc, #164]	; (800d658 <TIM_OC2_SetConfig+0x100>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d003      	beq.n	800d5c0 <TIM_OC2_SetConfig+0x68>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a28      	ldr	r2, [pc, #160]	; (800d65c <TIM_OC2_SetConfig+0x104>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d10d      	bne.n	800d5dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	011b      	lsls	r3, r3, #4
 800d5ce:	697a      	ldr	r2, [r7, #20]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4a1e      	ldr	r2, [pc, #120]	; (800d658 <TIM_OC2_SetConfig+0x100>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d00f      	beq.n	800d604 <TIM_OC2_SetConfig+0xac>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	4a1d      	ldr	r2, [pc, #116]	; (800d65c <TIM_OC2_SetConfig+0x104>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d00b      	beq.n	800d604 <TIM_OC2_SetConfig+0xac>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4a1c      	ldr	r2, [pc, #112]	; (800d660 <TIM_OC2_SetConfig+0x108>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d007      	beq.n	800d604 <TIM_OC2_SetConfig+0xac>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	4a1b      	ldr	r2, [pc, #108]	; (800d664 <TIM_OC2_SetConfig+0x10c>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d003      	beq.n	800d604 <TIM_OC2_SetConfig+0xac>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4a1a      	ldr	r2, [pc, #104]	; (800d668 <TIM_OC2_SetConfig+0x110>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d113      	bne.n	800d62c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d60a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	695b      	ldr	r3, [r3, #20]
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	693a      	ldr	r2, [r7, #16]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	699b      	ldr	r3, [r3, #24]
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	693a      	ldr	r2, [r7, #16]
 800d628:	4313      	orrs	r3, r2
 800d62a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	693a      	ldr	r2, [r7, #16]
 800d630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	621a      	str	r2, [r3, #32]
}
 800d646:	bf00      	nop
 800d648:	371c      	adds	r7, #28
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	feff8fff 	.word	0xfeff8fff
 800d658:	40010000 	.word	0x40010000
 800d65c:	40010400 	.word	0x40010400
 800d660:	40014000 	.word	0x40014000
 800d664:	40014400 	.word	0x40014400
 800d668:	40014800 	.word	0x40014800

0800d66c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b087      	sub	sp, #28
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6a1b      	ldr	r3, [r3, #32]
 800d686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f023 0303 	bic.w	r3, r3, #3
 800d6a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d6b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	021b      	lsls	r3, r3, #8
 800d6bc:	697a      	ldr	r2, [r7, #20]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a27      	ldr	r2, [pc, #156]	; (800d764 <TIM_OC3_SetConfig+0xf8>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d003      	beq.n	800d6d2 <TIM_OC3_SetConfig+0x66>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a26      	ldr	r2, [pc, #152]	; (800d768 <TIM_OC3_SetConfig+0xfc>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d10d      	bne.n	800d6ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	021b      	lsls	r3, r3, #8
 800d6e0:	697a      	ldr	r2, [r7, #20]
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	4a1c      	ldr	r2, [pc, #112]	; (800d764 <TIM_OC3_SetConfig+0xf8>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d00f      	beq.n	800d716 <TIM_OC3_SetConfig+0xaa>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	4a1b      	ldr	r2, [pc, #108]	; (800d768 <TIM_OC3_SetConfig+0xfc>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d00b      	beq.n	800d716 <TIM_OC3_SetConfig+0xaa>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4a1a      	ldr	r2, [pc, #104]	; (800d76c <TIM_OC3_SetConfig+0x100>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d007      	beq.n	800d716 <TIM_OC3_SetConfig+0xaa>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	4a19      	ldr	r2, [pc, #100]	; (800d770 <TIM_OC3_SetConfig+0x104>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d003      	beq.n	800d716 <TIM_OC3_SetConfig+0xaa>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a18      	ldr	r2, [pc, #96]	; (800d774 <TIM_OC3_SetConfig+0x108>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d113      	bne.n	800d73e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d71c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	695b      	ldr	r3, [r3, #20]
 800d72a:	011b      	lsls	r3, r3, #4
 800d72c:	693a      	ldr	r2, [r7, #16]
 800d72e:	4313      	orrs	r3, r2
 800d730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	699b      	ldr	r3, [r3, #24]
 800d736:	011b      	lsls	r3, r3, #4
 800d738:	693a      	ldr	r2, [r7, #16]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	693a      	ldr	r2, [r7, #16]
 800d742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	685a      	ldr	r2, [r3, #4]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	697a      	ldr	r2, [r7, #20]
 800d756:	621a      	str	r2, [r3, #32]
}
 800d758:	bf00      	nop
 800d75a:	371c      	adds	r7, #28
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr
 800d764:	40010000 	.word	0x40010000
 800d768:	40010400 	.word	0x40010400
 800d76c:	40014000 	.word	0x40014000
 800d770:	40014400 	.word	0x40014400
 800d774:	40014800 	.word	0x40014800

0800d778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a1b      	ldr	r3, [r3, #32]
 800d786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6a1b      	ldr	r3, [r3, #32]
 800d792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	69db      	ldr	r3, [r3, #28]
 800d79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	021b      	lsls	r3, r3, #8
 800d7b6:	68fa      	ldr	r2, [r7, #12]
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d7c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	031b      	lsls	r3, r3, #12
 800d7ca:	693a      	ldr	r2, [r7, #16]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a18      	ldr	r2, [pc, #96]	; (800d834 <TIM_OC4_SetConfig+0xbc>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d00f      	beq.n	800d7f8 <TIM_OC4_SetConfig+0x80>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a17      	ldr	r2, [pc, #92]	; (800d838 <TIM_OC4_SetConfig+0xc0>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d00b      	beq.n	800d7f8 <TIM_OC4_SetConfig+0x80>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a16      	ldr	r2, [pc, #88]	; (800d83c <TIM_OC4_SetConfig+0xc4>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d007      	beq.n	800d7f8 <TIM_OC4_SetConfig+0x80>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a15      	ldr	r2, [pc, #84]	; (800d840 <TIM_OC4_SetConfig+0xc8>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d003      	beq.n	800d7f8 <TIM_OC4_SetConfig+0x80>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4a14      	ldr	r2, [pc, #80]	; (800d844 <TIM_OC4_SetConfig+0xcc>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d109      	bne.n	800d80c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	695b      	ldr	r3, [r3, #20]
 800d804:	019b      	lsls	r3, r3, #6
 800d806:	697a      	ldr	r2, [r7, #20]
 800d808:	4313      	orrs	r3, r2
 800d80a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	697a      	ldr	r2, [r7, #20]
 800d810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	685a      	ldr	r2, [r3, #4]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	693a      	ldr	r2, [r7, #16]
 800d824:	621a      	str	r2, [r3, #32]
}
 800d826:	bf00      	nop
 800d828:	371c      	adds	r7, #28
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	40010000 	.word	0x40010000
 800d838:	40010400 	.word	0x40010400
 800d83c:	40014000 	.word	0x40014000
 800d840:	40014400 	.word	0x40014400
 800d844:	40014800 	.word	0x40014800

0800d848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d848:	b480      	push	{r7}
 800d84a:	b087      	sub	sp, #28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a1b      	ldr	r3, [r3, #32]
 800d856:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	4313      	orrs	r3, r2
 800d880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d888:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	041b      	lsls	r3, r3, #16
 800d890:	693a      	ldr	r2, [r7, #16]
 800d892:	4313      	orrs	r3, r2
 800d894:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4a17      	ldr	r2, [pc, #92]	; (800d8f8 <TIM_OC5_SetConfig+0xb0>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d00f      	beq.n	800d8be <TIM_OC5_SetConfig+0x76>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4a16      	ldr	r2, [pc, #88]	; (800d8fc <TIM_OC5_SetConfig+0xb4>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d00b      	beq.n	800d8be <TIM_OC5_SetConfig+0x76>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4a15      	ldr	r2, [pc, #84]	; (800d900 <TIM_OC5_SetConfig+0xb8>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d007      	beq.n	800d8be <TIM_OC5_SetConfig+0x76>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4a14      	ldr	r2, [pc, #80]	; (800d904 <TIM_OC5_SetConfig+0xbc>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d003      	beq.n	800d8be <TIM_OC5_SetConfig+0x76>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	4a13      	ldr	r2, [pc, #76]	; (800d908 <TIM_OC5_SetConfig+0xc0>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d109      	bne.n	800d8d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	021b      	lsls	r3, r3, #8
 800d8cc:	697a      	ldr	r2, [r7, #20]
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	697a      	ldr	r2, [r7, #20]
 800d8d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	685a      	ldr	r2, [r3, #4]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	693a      	ldr	r2, [r7, #16]
 800d8ea:	621a      	str	r2, [r3, #32]
}
 800d8ec:	bf00      	nop
 800d8ee:	371c      	adds	r7, #28
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr
 800d8f8:	40010000 	.word	0x40010000
 800d8fc:	40010400 	.word	0x40010400
 800d900:	40014000 	.word	0x40014000
 800d904:	40014400 	.word	0x40014400
 800d908:	40014800 	.word	0x40014800

0800d90c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b087      	sub	sp, #28
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a1b      	ldr	r3, [r3, #32]
 800d91a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6a1b      	ldr	r3, [r3, #32]
 800d926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d93a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	021b      	lsls	r3, r3, #8
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	4313      	orrs	r3, r2
 800d946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d94e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	051b      	lsls	r3, r3, #20
 800d956:	693a      	ldr	r2, [r7, #16]
 800d958:	4313      	orrs	r3, r2
 800d95a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4a18      	ldr	r2, [pc, #96]	; (800d9c0 <TIM_OC6_SetConfig+0xb4>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d00f      	beq.n	800d984 <TIM_OC6_SetConfig+0x78>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4a17      	ldr	r2, [pc, #92]	; (800d9c4 <TIM_OC6_SetConfig+0xb8>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d00b      	beq.n	800d984 <TIM_OC6_SetConfig+0x78>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4a16      	ldr	r2, [pc, #88]	; (800d9c8 <TIM_OC6_SetConfig+0xbc>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d007      	beq.n	800d984 <TIM_OC6_SetConfig+0x78>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4a15      	ldr	r2, [pc, #84]	; (800d9cc <TIM_OC6_SetConfig+0xc0>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d003      	beq.n	800d984 <TIM_OC6_SetConfig+0x78>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4a14      	ldr	r2, [pc, #80]	; (800d9d0 <TIM_OC6_SetConfig+0xc4>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d109      	bne.n	800d998 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d98a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	695b      	ldr	r3, [r3, #20]
 800d990:	029b      	lsls	r3, r3, #10
 800d992:	697a      	ldr	r2, [r7, #20]
 800d994:	4313      	orrs	r3, r2
 800d996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	685a      	ldr	r2, [r3, #4]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	621a      	str	r2, [r3, #32]
}
 800d9b2:	bf00      	nop
 800d9b4:	371c      	adds	r7, #28
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	40010000 	.word	0x40010000
 800d9c4:	40010400 	.word	0x40010400
 800d9c8:	40014000 	.word	0x40014000
 800d9cc:	40014400 	.word	0x40014400
 800d9d0:	40014800 	.word	0x40014800

0800d9d4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d109      	bne.n	800d9f8 <HAL_TIMEx_PWMN_Start+0x24>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	bf14      	ite	ne
 800d9f0:	2301      	movne	r3, #1
 800d9f2:	2300      	moveq	r3, #0
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	e022      	b.n	800da3e <HAL_TIMEx_PWMN_Start+0x6a>
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	2b04      	cmp	r3, #4
 800d9fc:	d109      	bne.n	800da12 <HAL_TIMEx_PWMN_Start+0x3e>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da04:	b2db      	uxtb	r3, r3
 800da06:	2b01      	cmp	r3, #1
 800da08:	bf14      	ite	ne
 800da0a:	2301      	movne	r3, #1
 800da0c:	2300      	moveq	r3, #0
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	e015      	b.n	800da3e <HAL_TIMEx_PWMN_Start+0x6a>
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2b08      	cmp	r3, #8
 800da16:	d109      	bne.n	800da2c <HAL_TIMEx_PWMN_Start+0x58>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	2b01      	cmp	r3, #1
 800da22:	bf14      	ite	ne
 800da24:	2301      	movne	r3, #1
 800da26:	2300      	moveq	r3, #0
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	e008      	b.n	800da3e <HAL_TIMEx_PWMN_Start+0x6a>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800da32:	b2db      	uxtb	r3, r3
 800da34:	2b01      	cmp	r3, #1
 800da36:	bf14      	ite	ne
 800da38:	2301      	movne	r3, #1
 800da3a:	2300      	moveq	r3, #0
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d001      	beq.n	800da46 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800da42:	2301      	movs	r3, #1
 800da44:	e06e      	b.n	800db24 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d104      	bne.n	800da56 <HAL_TIMEx_PWMN_Start+0x82>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2202      	movs	r2, #2
 800da50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da54:	e013      	b.n	800da7e <HAL_TIMEx_PWMN_Start+0xaa>
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b04      	cmp	r3, #4
 800da5a:	d104      	bne.n	800da66 <HAL_TIMEx_PWMN_Start+0x92>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2202      	movs	r2, #2
 800da60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da64:	e00b      	b.n	800da7e <HAL_TIMEx_PWMN_Start+0xaa>
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	2b08      	cmp	r3, #8
 800da6a:	d104      	bne.n	800da76 <HAL_TIMEx_PWMN_Start+0xa2>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2202      	movs	r2, #2
 800da70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da74:	e003      	b.n	800da7e <HAL_TIMEx_PWMN_Start+0xaa>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2202      	movs	r2, #2
 800da7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2204      	movs	r2, #4
 800da84:	6839      	ldr	r1, [r7, #0]
 800da86:	4618      	mov	r0, r3
 800da88:	f000 f982 	bl	800dd90 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a22      	ldr	r2, [pc, #136]	; (800db2c <HAL_TIMEx_PWMN_Start+0x158>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d01d      	beq.n	800dae2 <HAL_TIMEx_PWMN_Start+0x10e>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daae:	d018      	beq.n	800dae2 <HAL_TIMEx_PWMN_Start+0x10e>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a1e      	ldr	r2, [pc, #120]	; (800db30 <HAL_TIMEx_PWMN_Start+0x15c>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d013      	beq.n	800dae2 <HAL_TIMEx_PWMN_Start+0x10e>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a1d      	ldr	r2, [pc, #116]	; (800db34 <HAL_TIMEx_PWMN_Start+0x160>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d00e      	beq.n	800dae2 <HAL_TIMEx_PWMN_Start+0x10e>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a1b      	ldr	r2, [pc, #108]	; (800db38 <HAL_TIMEx_PWMN_Start+0x164>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d009      	beq.n	800dae2 <HAL_TIMEx_PWMN_Start+0x10e>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a1a      	ldr	r2, [pc, #104]	; (800db3c <HAL_TIMEx_PWMN_Start+0x168>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d004      	beq.n	800dae2 <HAL_TIMEx_PWMN_Start+0x10e>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a18      	ldr	r2, [pc, #96]	; (800db40 <HAL_TIMEx_PWMN_Start+0x16c>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d115      	bne.n	800db0e <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	689a      	ldr	r2, [r3, #8]
 800dae8:	4b16      	ldr	r3, [pc, #88]	; (800db44 <HAL_TIMEx_PWMN_Start+0x170>)
 800daea:	4013      	ands	r3, r2
 800daec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2b06      	cmp	r3, #6
 800daf2:	d015      	beq.n	800db20 <HAL_TIMEx_PWMN_Start+0x14c>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dafa:	d011      	beq.n	800db20 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f042 0201 	orr.w	r2, r2, #1
 800db0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db0c:	e008      	b.n	800db20 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f042 0201 	orr.w	r2, r2, #1
 800db1c:	601a      	str	r2, [r3, #0]
 800db1e:	e000      	b.n	800db22 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	40010000 	.word	0x40010000
 800db30:	40000400 	.word	0x40000400
 800db34:	40000800 	.word	0x40000800
 800db38:	40000c00 	.word	0x40000c00
 800db3c:	40010400 	.word	0x40010400
 800db40:	40001800 	.word	0x40001800
 800db44:	00010007 	.word	0x00010007

0800db48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d101      	bne.n	800db60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db5c:	2302      	movs	r3, #2
 800db5e:	e068      	b.n	800dc32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2201      	movs	r2, #1
 800db64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2202      	movs	r2, #2
 800db6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a2e      	ldr	r2, [pc, #184]	; (800dc40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d004      	beq.n	800db94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a2d      	ldr	r2, [pc, #180]	; (800dc44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d108      	bne.n	800dba6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800db9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	4313      	orrs	r3, r2
 800dba4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a1e      	ldr	r2, [pc, #120]	; (800dc40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d01d      	beq.n	800dc06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbd2:	d018      	beq.n	800dc06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a1b      	ldr	r2, [pc, #108]	; (800dc48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d013      	beq.n	800dc06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a1a      	ldr	r2, [pc, #104]	; (800dc4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d00e      	beq.n	800dc06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a18      	ldr	r2, [pc, #96]	; (800dc50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d009      	beq.n	800dc06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a13      	ldr	r2, [pc, #76]	; (800dc44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d004      	beq.n	800dc06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a14      	ldr	r2, [pc, #80]	; (800dc54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d10c      	bne.n	800dc20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	689b      	ldr	r3, [r3, #8]
 800dc12:	68ba      	ldr	r2, [r7, #8]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2201      	movs	r2, #1
 800dc24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3714      	adds	r7, #20
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	40010000 	.word	0x40010000
 800dc44:	40010400 	.word	0x40010400
 800dc48:	40000400 	.word	0x40000400
 800dc4c:	40000800 	.word	0x40000800
 800dc50:	40000c00 	.word	0x40000c00
 800dc54:	40001800 	.word	0x40001800

0800dc58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dc62:	2300      	movs	r3, #0
 800dc64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d101      	bne.n	800dc74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dc70:	2302      	movs	r3, #2
 800dc72:	e065      	b.n	800dd40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	4313      	orrs	r3, r2
 800dc96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	4313      	orrs	r3, r2
 800dca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	699b      	ldr	r3, [r3, #24]
 800dce8:	041b      	lsls	r3, r3, #16
 800dcea:	4313      	orrs	r3, r2
 800dcec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a16      	ldr	r2, [pc, #88]	; (800dd4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d004      	beq.n	800dd02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a14      	ldr	r2, [pc, #80]	; (800dd50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d115      	bne.n	800dd2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd0c:	051b      	lsls	r3, r3, #20
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	69db      	ldr	r3, [r3, #28]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	6a1b      	ldr	r3, [r3, #32]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd3e:	2300      	movs	r3, #0
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3714      	adds	r7, #20
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr
 800dd4c:	40010000 	.word	0x40010000
 800dd50:	40010400 	.word	0x40010400

0800dd54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd5c:	bf00      	nop
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd70:	bf00      	nop
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b087      	sub	sp, #28
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	f003 031f 	and.w	r3, r3, #31
 800dda2:	2204      	movs	r2, #4
 800dda4:	fa02 f303 	lsl.w	r3, r2, r3
 800dda8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6a1a      	ldr	r2, [r3, #32]
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	43db      	mvns	r3, r3
 800ddb2:	401a      	ands	r2, r3
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6a1a      	ldr	r2, [r3, #32]
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	f003 031f 	and.w	r3, r3, #31
 800ddc2:	6879      	ldr	r1, [r7, #4]
 800ddc4:	fa01 f303 	lsl.w	r3, r1, r3
 800ddc8:	431a      	orrs	r2, r3
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	621a      	str	r2, [r3, #32]
}
 800ddce:	bf00      	nop
 800ddd0:	371c      	adds	r7, #28
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr

0800ddda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b082      	sub	sp, #8
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d101      	bne.n	800ddec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dde8:	2301      	movs	r3, #1
 800ddea:	e042      	b.n	800de72 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d106      	bne.n	800de04 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7f4 fdb6 	bl	8002970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2224      	movs	r2, #36	; 0x24
 800de08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f022 0201 	bic.w	r2, r2, #1
 800de1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 fbe3 	bl	800e5e8 <UART_SetConfig>
 800de22:	4603      	mov	r3, r0
 800de24:	2b01      	cmp	r3, #1
 800de26:	d101      	bne.n	800de2c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800de28:	2301      	movs	r3, #1
 800de2a:	e022      	b.n	800de72 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f001 f937 	bl	800f0a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	685a      	ldr	r2, [r3, #4]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	689a      	ldr	r2, [r3, #8]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f042 0201 	orr.w	r2, r2, #1
 800de68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f001 f9be 	bl	800f1ec <UART_CheckIdleState>
 800de70:	4603      	mov	r3, r0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b08a      	sub	sp, #40	; 0x28
 800de7e:	af02      	add	r7, sp, #8
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	603b      	str	r3, [r7, #0]
 800de86:	4613      	mov	r3, r2
 800de88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de90:	2b20      	cmp	r3, #32
 800de92:	f040 8083 	bne.w	800df9c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d002      	beq.n	800dea2 <HAL_UART_Transmit+0x28>
 800de9c:	88fb      	ldrh	r3, [r7, #6]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	e07b      	b.n	800df9e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800deac:	2b01      	cmp	r3, #1
 800deae:	d101      	bne.n	800deb4 <HAL_UART_Transmit+0x3a>
 800deb0:	2302      	movs	r3, #2
 800deb2:	e074      	b.n	800df9e <HAL_UART_Transmit+0x124>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2200      	movs	r2, #0
 800dec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2221      	movs	r2, #33	; 0x21
 800dec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800decc:	f7f6 fec2 	bl	8004c54 <HAL_GetTick>
 800ded0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	88fa      	ldrh	r2, [r7, #6]
 800ded6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	88fa      	ldrh	r2, [r7, #6]
 800dede:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	689b      	ldr	r3, [r3, #8]
 800dee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deea:	d108      	bne.n	800defe <HAL_UART_Transmit+0x84>
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d104      	bne.n	800defe <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800def4:	2300      	movs	r3, #0
 800def6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	61bb      	str	r3, [r7, #24]
 800defc:	e003      	b.n	800df06 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df02:	2300      	movs	r3, #0
 800df04:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800df0e:	e02c      	b.n	800df6a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	2200      	movs	r2, #0
 800df18:	2180      	movs	r1, #128	; 0x80
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f001 f9b1 	bl	800f282 <UART_WaitOnFlagUntilTimeout>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d001      	beq.n	800df2a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800df26:	2303      	movs	r3, #3
 800df28:	e039      	b.n	800df9e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d10b      	bne.n	800df48 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	881b      	ldrh	r3, [r3, #0]
 800df34:	461a      	mov	r2, r3
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	3302      	adds	r3, #2
 800df44:	61bb      	str	r3, [r7, #24]
 800df46:	e007      	b.n	800df58 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	781a      	ldrb	r2, [r3, #0]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	3301      	adds	r3, #1
 800df56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df5e:	b29b      	uxth	r3, r3
 800df60:	3b01      	subs	r3, #1
 800df62:	b29a      	uxth	r2, r3
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df70:	b29b      	uxth	r3, r3
 800df72:	2b00      	cmp	r3, #0
 800df74:	d1cc      	bne.n	800df10 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	2200      	movs	r2, #0
 800df7e:	2140      	movs	r1, #64	; 0x40
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f001 f97e 	bl	800f282 <UART_WaitOnFlagUntilTimeout>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d001      	beq.n	800df90 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800df8c:	2303      	movs	r3, #3
 800df8e:	e006      	b.n	800df9e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2220      	movs	r2, #32
 800df94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	e000      	b.n	800df9e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800df9c:	2302      	movs	r3, #2
  }
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3720      	adds	r7, #32
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
	...

0800dfa8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfbc:	2b20      	cmp	r3, #32
 800dfbe:	d131      	bne.n	800e024 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <HAL_UART_Receive_IT+0x24>
 800dfc6:	88fb      	ldrh	r3, [r7, #6]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d101      	bne.n	800dfd0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e02a      	b.n	800e026 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	d101      	bne.n	800dfde <HAL_UART_Receive_IT+0x36>
 800dfda:	2302      	movs	r3, #2
 800dfdc:	e023      	b.n	800e026 <HAL_UART_Receive_IT+0x7e>
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a0f      	ldr	r2, [pc, #60]	; (800e030 <HAL_UART_Receive_IT+0x88>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d00e      	beq.n	800e014 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e000:	2b00      	cmp	r3, #0
 800e002:	d007      	beq.n	800e014 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e012:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e014:	88fb      	ldrh	r3, [r7, #6]
 800e016:	461a      	mov	r2, r3
 800e018:	68b9      	ldr	r1, [r7, #8]
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f001 f9b2 	bl	800f384 <UART_Start_Receive_IT>
 800e020:	4603      	mov	r3, r0
 800e022:	e000      	b.n	800e026 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800e024:	2302      	movs	r3, #2
  }
}
 800e026:	4618      	mov	r0, r3
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	58000c00 	.word	0x58000c00

0800e034 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b088      	sub	sp, #32
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	69db      	ldr	r3, [r3, #28]
 800e042:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e054:	69fa      	ldr	r2, [r7, #28]
 800e056:	f640 030f 	movw	r3, #2063	; 0x80f
 800e05a:	4013      	ands	r3, r2
 800e05c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d118      	bne.n	800e096 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	f003 0320 	and.w	r3, r3, #32
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d013      	beq.n	800e096 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	f003 0320 	and.w	r3, r3, #32
 800e074:	2b00      	cmp	r3, #0
 800e076:	d104      	bne.n	800e082 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d009      	beq.n	800e096 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e086:	2b00      	cmp	r3, #0
 800e088:	f000 8282 	beq.w	800e590 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	4798      	blx	r3
      }
      return;
 800e094:	e27c      	b.n	800e590 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f000 80ef 	beq.w	800e27c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	4b73      	ldr	r3, [pc, #460]	; (800e270 <HAL_UART_IRQHandler+0x23c>)
 800e0a2:	4013      	ands	r3, r2
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d105      	bne.n	800e0b4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e0a8:	69ba      	ldr	r2, [r7, #24]
 800e0aa:	4b72      	ldr	r3, [pc, #456]	; (800e274 <HAL_UART_IRQHandler+0x240>)
 800e0ac:	4013      	ands	r3, r2
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f000 80e4 	beq.w	800e27c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	f003 0301 	and.w	r3, r3, #1
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d010      	beq.n	800e0e0 <HAL_UART_IRQHandler+0xac>
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00b      	beq.n	800e0e0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0d6:	f043 0201 	orr.w	r2, r3, #1
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	f003 0302 	and.w	r3, r3, #2
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d010      	beq.n	800e10c <HAL_UART_IRQHandler+0xd8>
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	f003 0301 	and.w	r3, r3, #1
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00b      	beq.n	800e10c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2202      	movs	r2, #2
 800e0fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e102:	f043 0204 	orr.w	r2, r3, #4
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	f003 0304 	and.w	r3, r3, #4
 800e112:	2b00      	cmp	r3, #0
 800e114:	d010      	beq.n	800e138 <HAL_UART_IRQHandler+0x104>
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	f003 0301 	and.w	r3, r3, #1
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00b      	beq.n	800e138 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2204      	movs	r2, #4
 800e126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e12e:	f043 0202 	orr.w	r2, r3, #2
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	f003 0308 	and.w	r3, r3, #8
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d015      	beq.n	800e16e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	f003 0320 	and.w	r3, r3, #32
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d104      	bne.n	800e156 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e14c:	697a      	ldr	r2, [r7, #20]
 800e14e:	4b48      	ldr	r3, [pc, #288]	; (800e270 <HAL_UART_IRQHandler+0x23c>)
 800e150:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00b      	beq.n	800e16e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2208      	movs	r2, #8
 800e15c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e164:	f043 0208 	orr.w	r2, r3, #8
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e174:	2b00      	cmp	r3, #0
 800e176:	d011      	beq.n	800e19c <HAL_UART_IRQHandler+0x168>
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d00c      	beq.n	800e19c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e18a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e192:	f043 0220 	orr.w	r2, r3, #32
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f000 81f6 	beq.w	800e594 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	f003 0320 	and.w	r3, r3, #32
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d011      	beq.n	800e1d6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	f003 0320 	and.w	r3, r3, #32
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d104      	bne.n	800e1c6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d007      	beq.n	800e1d6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d003      	beq.n	800e1d6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1e8:	2b40      	cmp	r3, #64	; 0x40
 800e1ea:	d004      	beq.n	800e1f6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d031      	beq.n	800e25a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f001 f982 	bl	800f500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e206:	2b40      	cmp	r3, #64	; 0x40
 800e208:	d123      	bne.n	800e252 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e218:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d013      	beq.n	800e24a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e226:	4a14      	ldr	r2, [pc, #80]	; (800e278 <HAL_UART_IRQHandler+0x244>)
 800e228:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22e:	4618      	mov	r0, r3
 800e230:	f7f8 fb4a 	bl	80068c8 <HAL_DMA_Abort_IT>
 800e234:	4603      	mov	r3, r0
 800e236:	2b00      	cmp	r3, #0
 800e238:	d017      	beq.n	800e26a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e23e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e244:	4610      	mov	r0, r2
 800e246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e248:	e00f      	b.n	800e26a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f9b6 	bl	800e5bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e250:	e00b      	b.n	800e26a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 f9b2 	bl	800e5bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e258:	e007      	b.n	800e26a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 f9ae 	bl	800e5bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e268:	e194      	b.n	800e594 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e26a:	bf00      	nop
    return;
 800e26c:	e192      	b.n	800e594 <HAL_UART_IRQHandler+0x560>
 800e26e:	bf00      	nop
 800e270:	10000001 	.word	0x10000001
 800e274:	04000120 	.word	0x04000120
 800e278:	0800f565 	.word	0x0800f565

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e280:	2b01      	cmp	r3, #1
 800e282:	f040 810f 	bne.w	800e4a4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	f003 0310 	and.w	r3, r3, #16
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 8109 	beq.w	800e4a4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	f003 0310 	and.w	r3, r3, #16
 800e298:	2b00      	cmp	r3, #0
 800e29a:	f000 8103 	beq.w	800e4a4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2210      	movs	r2, #16
 800e2a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b0:	2b40      	cmp	r3, #64	; 0x40
 800e2b2:	f040 80bb 	bne.w	800e42c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a96      	ldr	r2, [pc, #600]	; (800e518 <HAL_UART_IRQHandler+0x4e4>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d059      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a94      	ldr	r2, [pc, #592]	; (800e51c <HAL_UART_IRQHandler+0x4e8>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d053      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a92      	ldr	r2, [pc, #584]	; (800e520 <HAL_UART_IRQHandler+0x4ec>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d04d      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a90      	ldr	r2, [pc, #576]	; (800e524 <HAL_UART_IRQHandler+0x4f0>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d047      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a8e      	ldr	r2, [pc, #568]	; (800e528 <HAL_UART_IRQHandler+0x4f4>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d041      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4a8c      	ldr	r2, [pc, #560]	; (800e52c <HAL_UART_IRQHandler+0x4f8>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d03b      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a8a      	ldr	r2, [pc, #552]	; (800e530 <HAL_UART_IRQHandler+0x4fc>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d035      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a88      	ldr	r2, [pc, #544]	; (800e534 <HAL_UART_IRQHandler+0x500>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d02f      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a86      	ldr	r2, [pc, #536]	; (800e538 <HAL_UART_IRQHandler+0x504>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d029      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a84      	ldr	r2, [pc, #528]	; (800e53c <HAL_UART_IRQHandler+0x508>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d023      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a82      	ldr	r2, [pc, #520]	; (800e540 <HAL_UART_IRQHandler+0x50c>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d01d      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a80      	ldr	r2, [pc, #512]	; (800e544 <HAL_UART_IRQHandler+0x510>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d017      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a7e      	ldr	r2, [pc, #504]	; (800e548 <HAL_UART_IRQHandler+0x514>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d011      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a7c      	ldr	r2, [pc, #496]	; (800e54c <HAL_UART_IRQHandler+0x518>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d00b      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a7a      	ldr	r2, [pc, #488]	; (800e550 <HAL_UART_IRQHandler+0x51c>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d005      	beq.n	800e376 <HAL_UART_IRQHandler+0x342>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a78      	ldr	r2, [pc, #480]	; (800e554 <HAL_UART_IRQHandler+0x520>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d105      	bne.n	800e382 <HAL_UART_IRQHandler+0x34e>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	b29b      	uxth	r3, r3
 800e380:	e004      	b.n	800e38c <HAL_UART_IRQHandler+0x358>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800e38e:	893b      	ldrh	r3, [r7, #8]
 800e390:	2b00      	cmp	r3, #0
 800e392:	f000 8101 	beq.w	800e598 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e39c:	893a      	ldrh	r2, [r7, #8]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	f080 80fa 	bcs.w	800e598 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	893a      	ldrh	r2, [r7, #8]
 800e3a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3b0:	69db      	ldr	r3, [r3, #28]
 800e3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3b6:	d02b      	beq.n	800e410 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e3c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	689a      	ldr	r2, [r3, #8]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f022 0201 	bic.w	r2, r2, #1
 800e3d6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	689a      	ldr	r2, [r3, #8]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3e6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2220      	movs	r2, #32
 800e3ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f022 0210 	bic.w	r2, r2, #16
 800e404:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7f7 ff3e 	bl	800628c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	b29b      	uxth	r3, r3
 800e422:	4619      	mov	r1, r3
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 f8d3 	bl	800e5d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e42a:	e0b5      	b.n	800e598 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e438:	b29b      	uxth	r3, r3
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e444:	b29b      	uxth	r3, r3
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 80a8 	beq.w	800e59c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800e44c:	897b      	ldrh	r3, [r7, #10]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f000 80a4 	beq.w	800e59c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e462:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6899      	ldr	r1, [r3, #8]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	4b3a      	ldr	r3, [pc, #232]	; (800e558 <HAL_UART_IRQHandler+0x524>)
 800e470:	400b      	ands	r3, r1
 800e472:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2220      	movs	r2, #32
 800e478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2200      	movs	r2, #0
 800e486:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f022 0210 	bic.w	r2, r2, #16
 800e496:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e498:	897b      	ldrh	r3, [r7, #10]
 800e49a:	4619      	mov	r1, r3
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f000 f897 	bl	800e5d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e4a2:	e07b      	b.n	800e59c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00d      	beq.n	800e4ca <HAL_UART_IRQHandler+0x496>
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d008      	beq.n	800e4ca <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e4c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f001 fb5a 	bl	800fb7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4c8:	e06b      	b.n	800e5a2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d012      	beq.n	800e4fa <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d104      	bne.n	800e4e8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d008      	beq.n	800e4fa <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d057      	beq.n	800e5a0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	4798      	blx	r3
    }
    return;
 800e4f8:	e052      	b.n	800e5a0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e500:	2b00      	cmp	r3, #0
 800e502:	d02b      	beq.n	800e55c <HAL_UART_IRQHandler+0x528>
 800e504:	69bb      	ldr	r3, [r7, #24]
 800e506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d026      	beq.n	800e55c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f001 f83e 	bl	800f590 <UART_EndTransmit_IT>
    return;
 800e514:	e045      	b.n	800e5a2 <HAL_UART_IRQHandler+0x56e>
 800e516:	bf00      	nop
 800e518:	40020010 	.word	0x40020010
 800e51c:	40020028 	.word	0x40020028
 800e520:	40020040 	.word	0x40020040
 800e524:	40020058 	.word	0x40020058
 800e528:	40020070 	.word	0x40020070
 800e52c:	40020088 	.word	0x40020088
 800e530:	400200a0 	.word	0x400200a0
 800e534:	400200b8 	.word	0x400200b8
 800e538:	40020410 	.word	0x40020410
 800e53c:	40020428 	.word	0x40020428
 800e540:	40020440 	.word	0x40020440
 800e544:	40020458 	.word	0x40020458
 800e548:	40020470 	.word	0x40020470
 800e54c:	40020488 	.word	0x40020488
 800e550:	400204a0 	.word	0x400204a0
 800e554:	400204b8 	.word	0x400204b8
 800e558:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e562:	2b00      	cmp	r3, #0
 800e564:	d008      	beq.n	800e578 <HAL_UART_IRQHandler+0x544>
 800e566:	69bb      	ldr	r3, [r7, #24]
 800e568:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d003      	beq.n	800e578 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f001 fb17 	bl	800fba4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e576:	e014      	b.n	800e5a2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00f      	beq.n	800e5a2 <HAL_UART_IRQHandler+0x56e>
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	2b00      	cmp	r3, #0
 800e586:	da0c      	bge.n	800e5a2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 fb01 	bl	800fb90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e58e:	e008      	b.n	800e5a2 <HAL_UART_IRQHandler+0x56e>
      return;
 800e590:	bf00      	nop
 800e592:	e006      	b.n	800e5a2 <HAL_UART_IRQHandler+0x56e>
    return;
 800e594:	bf00      	nop
 800e596:	e004      	b.n	800e5a2 <HAL_UART_IRQHandler+0x56e>
      return;
 800e598:	bf00      	nop
 800e59a:	e002      	b.n	800e5a2 <HAL_UART_IRQHandler+0x56e>
      return;
 800e59c:	bf00      	nop
 800e59e:	e000      	b.n	800e5a2 <HAL_UART_IRQHandler+0x56e>
    return;
 800e5a0:	bf00      	nop
  }
}
 800e5a2:	3720      	adds	r7, #32
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e5b0:	bf00      	nop
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e5c4:	bf00      	nop
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b083      	sub	sp, #12
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	460b      	mov	r3, r1
 800e5da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e5dc:	bf00      	nop
 800e5de:	370c      	adds	r7, #12
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5e8:	b5b0      	push	{r4, r5, r7, lr}
 800e5ea:	b08e      	sub	sp, #56	; 0x38
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	689a      	ldr	r2, [r3, #8]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	691b      	ldr	r3, [r3, #16]
 800e5fe:	431a      	orrs	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	695b      	ldr	r3, [r3, #20]
 800e604:	431a      	orrs	r2, r3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	69db      	ldr	r3, [r3, #28]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	4bbf      	ldr	r3, [pc, #764]	; (800e914 <UART_SetConfig+0x32c>)
 800e616:	4013      	ands	r3, r2
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	6812      	ldr	r2, [r2, #0]
 800e61c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e61e:	430b      	orrs	r3, r1
 800e620:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	68da      	ldr	r2, [r3, #12]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	430a      	orrs	r2, r1
 800e636:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	699b      	ldr	r3, [r3, #24]
 800e63c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4ab5      	ldr	r2, [pc, #724]	; (800e918 <UART_SetConfig+0x330>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d004      	beq.n	800e652 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a1b      	ldr	r3, [r3, #32]
 800e64c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e64e:	4313      	orrs	r3, r2
 800e650:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	689a      	ldr	r2, [r3, #8]
 800e658:	4bb0      	ldr	r3, [pc, #704]	; (800e91c <UART_SetConfig+0x334>)
 800e65a:	4013      	ands	r3, r2
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	6812      	ldr	r2, [r2, #0]
 800e660:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e662:	430b      	orrs	r3, r1
 800e664:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66c:	f023 010f 	bic.w	r1, r3, #15
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	430a      	orrs	r2, r1
 800e67a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4aa7      	ldr	r2, [pc, #668]	; (800e920 <UART_SetConfig+0x338>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d176      	bne.n	800e774 <UART_SetConfig+0x18c>
 800e686:	4ba7      	ldr	r3, [pc, #668]	; (800e924 <UART_SetConfig+0x33c>)
 800e688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e68a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e68e:	2b28      	cmp	r3, #40	; 0x28
 800e690:	d86c      	bhi.n	800e76c <UART_SetConfig+0x184>
 800e692:	a201      	add	r2, pc, #4	; (adr r2, 800e698 <UART_SetConfig+0xb0>)
 800e694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e698:	0800e73d 	.word	0x0800e73d
 800e69c:	0800e76d 	.word	0x0800e76d
 800e6a0:	0800e76d 	.word	0x0800e76d
 800e6a4:	0800e76d 	.word	0x0800e76d
 800e6a8:	0800e76d 	.word	0x0800e76d
 800e6ac:	0800e76d 	.word	0x0800e76d
 800e6b0:	0800e76d 	.word	0x0800e76d
 800e6b4:	0800e76d 	.word	0x0800e76d
 800e6b8:	0800e745 	.word	0x0800e745
 800e6bc:	0800e76d 	.word	0x0800e76d
 800e6c0:	0800e76d 	.word	0x0800e76d
 800e6c4:	0800e76d 	.word	0x0800e76d
 800e6c8:	0800e76d 	.word	0x0800e76d
 800e6cc:	0800e76d 	.word	0x0800e76d
 800e6d0:	0800e76d 	.word	0x0800e76d
 800e6d4:	0800e76d 	.word	0x0800e76d
 800e6d8:	0800e74d 	.word	0x0800e74d
 800e6dc:	0800e76d 	.word	0x0800e76d
 800e6e0:	0800e76d 	.word	0x0800e76d
 800e6e4:	0800e76d 	.word	0x0800e76d
 800e6e8:	0800e76d 	.word	0x0800e76d
 800e6ec:	0800e76d 	.word	0x0800e76d
 800e6f0:	0800e76d 	.word	0x0800e76d
 800e6f4:	0800e76d 	.word	0x0800e76d
 800e6f8:	0800e755 	.word	0x0800e755
 800e6fc:	0800e76d 	.word	0x0800e76d
 800e700:	0800e76d 	.word	0x0800e76d
 800e704:	0800e76d 	.word	0x0800e76d
 800e708:	0800e76d 	.word	0x0800e76d
 800e70c:	0800e76d 	.word	0x0800e76d
 800e710:	0800e76d 	.word	0x0800e76d
 800e714:	0800e76d 	.word	0x0800e76d
 800e718:	0800e75d 	.word	0x0800e75d
 800e71c:	0800e76d 	.word	0x0800e76d
 800e720:	0800e76d 	.word	0x0800e76d
 800e724:	0800e76d 	.word	0x0800e76d
 800e728:	0800e76d 	.word	0x0800e76d
 800e72c:	0800e76d 	.word	0x0800e76d
 800e730:	0800e76d 	.word	0x0800e76d
 800e734:	0800e76d 	.word	0x0800e76d
 800e738:	0800e765 	.word	0x0800e765
 800e73c:	2301      	movs	r3, #1
 800e73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e742:	e222      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e744:	2304      	movs	r3, #4
 800e746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e74a:	e21e      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e74c:	2308      	movs	r3, #8
 800e74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e752:	e21a      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e754:	2310      	movs	r3, #16
 800e756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e75a:	e216      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e75c:	2320      	movs	r3, #32
 800e75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e762:	e212      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e764:	2340      	movs	r3, #64	; 0x40
 800e766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e76a:	e20e      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e76c:	2380      	movs	r3, #128	; 0x80
 800e76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e772:	e20a      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a6b      	ldr	r2, [pc, #428]	; (800e928 <UART_SetConfig+0x340>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d130      	bne.n	800e7e0 <UART_SetConfig+0x1f8>
 800e77e:	4b69      	ldr	r3, [pc, #420]	; (800e924 <UART_SetConfig+0x33c>)
 800e780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e782:	f003 0307 	and.w	r3, r3, #7
 800e786:	2b05      	cmp	r3, #5
 800e788:	d826      	bhi.n	800e7d8 <UART_SetConfig+0x1f0>
 800e78a:	a201      	add	r2, pc, #4	; (adr r2, 800e790 <UART_SetConfig+0x1a8>)
 800e78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e790:	0800e7a9 	.word	0x0800e7a9
 800e794:	0800e7b1 	.word	0x0800e7b1
 800e798:	0800e7b9 	.word	0x0800e7b9
 800e79c:	0800e7c1 	.word	0x0800e7c1
 800e7a0:	0800e7c9 	.word	0x0800e7c9
 800e7a4:	0800e7d1 	.word	0x0800e7d1
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ae:	e1ec      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e7b0:	2304      	movs	r3, #4
 800e7b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7b6:	e1e8      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e7b8:	2308      	movs	r3, #8
 800e7ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7be:	e1e4      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e7c0:	2310      	movs	r3, #16
 800e7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7c6:	e1e0      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e7c8:	2320      	movs	r3, #32
 800e7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ce:	e1dc      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e7d0:	2340      	movs	r3, #64	; 0x40
 800e7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7d6:	e1d8      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e7d8:	2380      	movs	r3, #128	; 0x80
 800e7da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7de:	e1d4      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a51      	ldr	r2, [pc, #324]	; (800e92c <UART_SetConfig+0x344>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d130      	bne.n	800e84c <UART_SetConfig+0x264>
 800e7ea:	4b4e      	ldr	r3, [pc, #312]	; (800e924 <UART_SetConfig+0x33c>)
 800e7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7ee:	f003 0307 	and.w	r3, r3, #7
 800e7f2:	2b05      	cmp	r3, #5
 800e7f4:	d826      	bhi.n	800e844 <UART_SetConfig+0x25c>
 800e7f6:	a201      	add	r2, pc, #4	; (adr r2, 800e7fc <UART_SetConfig+0x214>)
 800e7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7fc:	0800e815 	.word	0x0800e815
 800e800:	0800e81d 	.word	0x0800e81d
 800e804:	0800e825 	.word	0x0800e825
 800e808:	0800e82d 	.word	0x0800e82d
 800e80c:	0800e835 	.word	0x0800e835
 800e810:	0800e83d 	.word	0x0800e83d
 800e814:	2300      	movs	r3, #0
 800e816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e81a:	e1b6      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e81c:	2304      	movs	r3, #4
 800e81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e822:	e1b2      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e824:	2308      	movs	r3, #8
 800e826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e82a:	e1ae      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e82c:	2310      	movs	r3, #16
 800e82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e832:	e1aa      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e834:	2320      	movs	r3, #32
 800e836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e83a:	e1a6      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e83c:	2340      	movs	r3, #64	; 0x40
 800e83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e842:	e1a2      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e844:	2380      	movs	r3, #128	; 0x80
 800e846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e84a:	e19e      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a37      	ldr	r2, [pc, #220]	; (800e930 <UART_SetConfig+0x348>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d130      	bne.n	800e8b8 <UART_SetConfig+0x2d0>
 800e856:	4b33      	ldr	r3, [pc, #204]	; (800e924 <UART_SetConfig+0x33c>)
 800e858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e85a:	f003 0307 	and.w	r3, r3, #7
 800e85e:	2b05      	cmp	r3, #5
 800e860:	d826      	bhi.n	800e8b0 <UART_SetConfig+0x2c8>
 800e862:	a201      	add	r2, pc, #4	; (adr r2, 800e868 <UART_SetConfig+0x280>)
 800e864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e868:	0800e881 	.word	0x0800e881
 800e86c:	0800e889 	.word	0x0800e889
 800e870:	0800e891 	.word	0x0800e891
 800e874:	0800e899 	.word	0x0800e899
 800e878:	0800e8a1 	.word	0x0800e8a1
 800e87c:	0800e8a9 	.word	0x0800e8a9
 800e880:	2300      	movs	r3, #0
 800e882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e886:	e180      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e888:	2304      	movs	r3, #4
 800e88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e88e:	e17c      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e890:	2308      	movs	r3, #8
 800e892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e896:	e178      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e898:	2310      	movs	r3, #16
 800e89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e89e:	e174      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e8a0:	2320      	movs	r3, #32
 800e8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8a6:	e170      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e8a8:	2340      	movs	r3, #64	; 0x40
 800e8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ae:	e16c      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e8b0:	2380      	movs	r3, #128	; 0x80
 800e8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8b6:	e168      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a1d      	ldr	r2, [pc, #116]	; (800e934 <UART_SetConfig+0x34c>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d142      	bne.n	800e948 <UART_SetConfig+0x360>
 800e8c2:	4b18      	ldr	r3, [pc, #96]	; (800e924 <UART_SetConfig+0x33c>)
 800e8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8c6:	f003 0307 	and.w	r3, r3, #7
 800e8ca:	2b05      	cmp	r3, #5
 800e8cc:	d838      	bhi.n	800e940 <UART_SetConfig+0x358>
 800e8ce:	a201      	add	r2, pc, #4	; (adr r2, 800e8d4 <UART_SetConfig+0x2ec>)
 800e8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d4:	0800e8ed 	.word	0x0800e8ed
 800e8d8:	0800e8f5 	.word	0x0800e8f5
 800e8dc:	0800e8fd 	.word	0x0800e8fd
 800e8e0:	0800e905 	.word	0x0800e905
 800e8e4:	0800e90d 	.word	0x0800e90d
 800e8e8:	0800e939 	.word	0x0800e939
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8f2:	e14a      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e8f4:	2304      	movs	r3, #4
 800e8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8fa:	e146      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e8fc:	2308      	movs	r3, #8
 800e8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e902:	e142      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e904:	2310      	movs	r3, #16
 800e906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e90a:	e13e      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e90c:	2320      	movs	r3, #32
 800e90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e912:	e13a      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e914:	cfff69f3 	.word	0xcfff69f3
 800e918:	58000c00 	.word	0x58000c00
 800e91c:	11fff4ff 	.word	0x11fff4ff
 800e920:	40011000 	.word	0x40011000
 800e924:	58024400 	.word	0x58024400
 800e928:	40004400 	.word	0x40004400
 800e92c:	40004800 	.word	0x40004800
 800e930:	40004c00 	.word	0x40004c00
 800e934:	40005000 	.word	0x40005000
 800e938:	2340      	movs	r3, #64	; 0x40
 800e93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e93e:	e124      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e940:	2380      	movs	r3, #128	; 0x80
 800e942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e946:	e120      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4acc      	ldr	r2, [pc, #816]	; (800ec80 <UART_SetConfig+0x698>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d176      	bne.n	800ea40 <UART_SetConfig+0x458>
 800e952:	4bcc      	ldr	r3, [pc, #816]	; (800ec84 <UART_SetConfig+0x69c>)
 800e954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e95a:	2b28      	cmp	r3, #40	; 0x28
 800e95c:	d86c      	bhi.n	800ea38 <UART_SetConfig+0x450>
 800e95e:	a201      	add	r2, pc, #4	; (adr r2, 800e964 <UART_SetConfig+0x37c>)
 800e960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e964:	0800ea09 	.word	0x0800ea09
 800e968:	0800ea39 	.word	0x0800ea39
 800e96c:	0800ea39 	.word	0x0800ea39
 800e970:	0800ea39 	.word	0x0800ea39
 800e974:	0800ea39 	.word	0x0800ea39
 800e978:	0800ea39 	.word	0x0800ea39
 800e97c:	0800ea39 	.word	0x0800ea39
 800e980:	0800ea39 	.word	0x0800ea39
 800e984:	0800ea11 	.word	0x0800ea11
 800e988:	0800ea39 	.word	0x0800ea39
 800e98c:	0800ea39 	.word	0x0800ea39
 800e990:	0800ea39 	.word	0x0800ea39
 800e994:	0800ea39 	.word	0x0800ea39
 800e998:	0800ea39 	.word	0x0800ea39
 800e99c:	0800ea39 	.word	0x0800ea39
 800e9a0:	0800ea39 	.word	0x0800ea39
 800e9a4:	0800ea19 	.word	0x0800ea19
 800e9a8:	0800ea39 	.word	0x0800ea39
 800e9ac:	0800ea39 	.word	0x0800ea39
 800e9b0:	0800ea39 	.word	0x0800ea39
 800e9b4:	0800ea39 	.word	0x0800ea39
 800e9b8:	0800ea39 	.word	0x0800ea39
 800e9bc:	0800ea39 	.word	0x0800ea39
 800e9c0:	0800ea39 	.word	0x0800ea39
 800e9c4:	0800ea21 	.word	0x0800ea21
 800e9c8:	0800ea39 	.word	0x0800ea39
 800e9cc:	0800ea39 	.word	0x0800ea39
 800e9d0:	0800ea39 	.word	0x0800ea39
 800e9d4:	0800ea39 	.word	0x0800ea39
 800e9d8:	0800ea39 	.word	0x0800ea39
 800e9dc:	0800ea39 	.word	0x0800ea39
 800e9e0:	0800ea39 	.word	0x0800ea39
 800e9e4:	0800ea29 	.word	0x0800ea29
 800e9e8:	0800ea39 	.word	0x0800ea39
 800e9ec:	0800ea39 	.word	0x0800ea39
 800e9f0:	0800ea39 	.word	0x0800ea39
 800e9f4:	0800ea39 	.word	0x0800ea39
 800e9f8:	0800ea39 	.word	0x0800ea39
 800e9fc:	0800ea39 	.word	0x0800ea39
 800ea00:	0800ea39 	.word	0x0800ea39
 800ea04:	0800ea31 	.word	0x0800ea31
 800ea08:	2301      	movs	r3, #1
 800ea0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea0e:	e0bc      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea10:	2304      	movs	r3, #4
 800ea12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea16:	e0b8      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea18:	2308      	movs	r3, #8
 800ea1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea1e:	e0b4      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea20:	2310      	movs	r3, #16
 800ea22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea26:	e0b0      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea28:	2320      	movs	r3, #32
 800ea2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea2e:	e0ac      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea30:	2340      	movs	r3, #64	; 0x40
 800ea32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea36:	e0a8      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea38:	2380      	movs	r3, #128	; 0x80
 800ea3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea3e:	e0a4      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4a90      	ldr	r2, [pc, #576]	; (800ec88 <UART_SetConfig+0x6a0>)
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d130      	bne.n	800eaac <UART_SetConfig+0x4c4>
 800ea4a:	4b8e      	ldr	r3, [pc, #568]	; (800ec84 <UART_SetConfig+0x69c>)
 800ea4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea4e:	f003 0307 	and.w	r3, r3, #7
 800ea52:	2b05      	cmp	r3, #5
 800ea54:	d826      	bhi.n	800eaa4 <UART_SetConfig+0x4bc>
 800ea56:	a201      	add	r2, pc, #4	; (adr r2, 800ea5c <UART_SetConfig+0x474>)
 800ea58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea5c:	0800ea75 	.word	0x0800ea75
 800ea60:	0800ea7d 	.word	0x0800ea7d
 800ea64:	0800ea85 	.word	0x0800ea85
 800ea68:	0800ea8d 	.word	0x0800ea8d
 800ea6c:	0800ea95 	.word	0x0800ea95
 800ea70:	0800ea9d 	.word	0x0800ea9d
 800ea74:	2300      	movs	r3, #0
 800ea76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea7a:	e086      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea7c:	2304      	movs	r3, #4
 800ea7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea82:	e082      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea84:	2308      	movs	r3, #8
 800ea86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea8a:	e07e      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea8c:	2310      	movs	r3, #16
 800ea8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea92:	e07a      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea94:	2320      	movs	r3, #32
 800ea96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea9a:	e076      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800ea9c:	2340      	movs	r3, #64	; 0x40
 800ea9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaa2:	e072      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eaa4:	2380      	movs	r3, #128	; 0x80
 800eaa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaaa:	e06e      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a76      	ldr	r2, [pc, #472]	; (800ec8c <UART_SetConfig+0x6a4>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d130      	bne.n	800eb18 <UART_SetConfig+0x530>
 800eab6:	4b73      	ldr	r3, [pc, #460]	; (800ec84 <UART_SetConfig+0x69c>)
 800eab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaba:	f003 0307 	and.w	r3, r3, #7
 800eabe:	2b05      	cmp	r3, #5
 800eac0:	d826      	bhi.n	800eb10 <UART_SetConfig+0x528>
 800eac2:	a201      	add	r2, pc, #4	; (adr r2, 800eac8 <UART_SetConfig+0x4e0>)
 800eac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac8:	0800eae1 	.word	0x0800eae1
 800eacc:	0800eae9 	.word	0x0800eae9
 800ead0:	0800eaf1 	.word	0x0800eaf1
 800ead4:	0800eaf9 	.word	0x0800eaf9
 800ead8:	0800eb01 	.word	0x0800eb01
 800eadc:	0800eb09 	.word	0x0800eb09
 800eae0:	2300      	movs	r3, #0
 800eae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eae6:	e050      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eae8:	2304      	movs	r3, #4
 800eaea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaee:	e04c      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eaf0:	2308      	movs	r3, #8
 800eaf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaf6:	e048      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eaf8:	2310      	movs	r3, #16
 800eafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eafe:	e044      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb00:	2320      	movs	r3, #32
 800eb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb06:	e040      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb08:	2340      	movs	r3, #64	; 0x40
 800eb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb0e:	e03c      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb10:	2380      	movs	r3, #128	; 0x80
 800eb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb16:	e038      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4a5c      	ldr	r2, [pc, #368]	; (800ec90 <UART_SetConfig+0x6a8>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d130      	bne.n	800eb84 <UART_SetConfig+0x59c>
 800eb22:	4b58      	ldr	r3, [pc, #352]	; (800ec84 <UART_SetConfig+0x69c>)
 800eb24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb26:	f003 0307 	and.w	r3, r3, #7
 800eb2a:	2b05      	cmp	r3, #5
 800eb2c:	d826      	bhi.n	800eb7c <UART_SetConfig+0x594>
 800eb2e:	a201      	add	r2, pc, #4	; (adr r2, 800eb34 <UART_SetConfig+0x54c>)
 800eb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb34:	0800eb4d 	.word	0x0800eb4d
 800eb38:	0800eb55 	.word	0x0800eb55
 800eb3c:	0800eb5d 	.word	0x0800eb5d
 800eb40:	0800eb65 	.word	0x0800eb65
 800eb44:	0800eb6d 	.word	0x0800eb6d
 800eb48:	0800eb75 	.word	0x0800eb75
 800eb4c:	2302      	movs	r3, #2
 800eb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb52:	e01a      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb54:	2304      	movs	r3, #4
 800eb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb5a:	e016      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb5c:	2308      	movs	r3, #8
 800eb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb62:	e012      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb64:	2310      	movs	r3, #16
 800eb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb6a:	e00e      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb6c:	2320      	movs	r3, #32
 800eb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb72:	e00a      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb74:	2340      	movs	r3, #64	; 0x40
 800eb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb7a:	e006      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb7c:	2380      	movs	r3, #128	; 0x80
 800eb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb82:	e002      	b.n	800eb8a <UART_SetConfig+0x5a2>
 800eb84:	2380      	movs	r3, #128	; 0x80
 800eb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	4a40      	ldr	r2, [pc, #256]	; (800ec90 <UART_SetConfig+0x6a8>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	f040 80ef 	bne.w	800ed74 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eb96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eb9a:	2b20      	cmp	r3, #32
 800eb9c:	dc46      	bgt.n	800ec2c <UART_SetConfig+0x644>
 800eb9e:	2b02      	cmp	r3, #2
 800eba0:	f2c0 8081 	blt.w	800eca6 <UART_SetConfig+0x6be>
 800eba4:	3b02      	subs	r3, #2
 800eba6:	2b1e      	cmp	r3, #30
 800eba8:	d87d      	bhi.n	800eca6 <UART_SetConfig+0x6be>
 800ebaa:	a201      	add	r2, pc, #4	; (adr r2, 800ebb0 <UART_SetConfig+0x5c8>)
 800ebac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb0:	0800ec33 	.word	0x0800ec33
 800ebb4:	0800eca7 	.word	0x0800eca7
 800ebb8:	0800ec3b 	.word	0x0800ec3b
 800ebbc:	0800eca7 	.word	0x0800eca7
 800ebc0:	0800eca7 	.word	0x0800eca7
 800ebc4:	0800eca7 	.word	0x0800eca7
 800ebc8:	0800ec4b 	.word	0x0800ec4b
 800ebcc:	0800eca7 	.word	0x0800eca7
 800ebd0:	0800eca7 	.word	0x0800eca7
 800ebd4:	0800eca7 	.word	0x0800eca7
 800ebd8:	0800eca7 	.word	0x0800eca7
 800ebdc:	0800eca7 	.word	0x0800eca7
 800ebe0:	0800eca7 	.word	0x0800eca7
 800ebe4:	0800eca7 	.word	0x0800eca7
 800ebe8:	0800ec5b 	.word	0x0800ec5b
 800ebec:	0800eca7 	.word	0x0800eca7
 800ebf0:	0800eca7 	.word	0x0800eca7
 800ebf4:	0800eca7 	.word	0x0800eca7
 800ebf8:	0800eca7 	.word	0x0800eca7
 800ebfc:	0800eca7 	.word	0x0800eca7
 800ec00:	0800eca7 	.word	0x0800eca7
 800ec04:	0800eca7 	.word	0x0800eca7
 800ec08:	0800eca7 	.word	0x0800eca7
 800ec0c:	0800eca7 	.word	0x0800eca7
 800ec10:	0800eca7 	.word	0x0800eca7
 800ec14:	0800eca7 	.word	0x0800eca7
 800ec18:	0800eca7 	.word	0x0800eca7
 800ec1c:	0800eca7 	.word	0x0800eca7
 800ec20:	0800eca7 	.word	0x0800eca7
 800ec24:	0800eca7 	.word	0x0800eca7
 800ec28:	0800ec99 	.word	0x0800ec99
 800ec2c:	2b40      	cmp	r3, #64	; 0x40
 800ec2e:	d036      	beq.n	800ec9e <UART_SetConfig+0x6b6>
 800ec30:	e039      	b.n	800eca6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ec32:	f7fc f8ad 	bl	800ad90 <HAL_RCCEx_GetD3PCLK1Freq>
 800ec36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ec38:	e03b      	b.n	800ecb2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec3a:	f107 0314 	add.w	r3, r7, #20
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7fc f8bc 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec48:	e033      	b.n	800ecb2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec4a:	f107 0308 	add.w	r3, r7, #8
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7fc fa08 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec58:	e02b      	b.n	800ecb2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec5a:	4b0a      	ldr	r3, [pc, #40]	; (800ec84 <UART_SetConfig+0x69c>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f003 0320 	and.w	r3, r3, #32
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d009      	beq.n	800ec7a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec66:	4b07      	ldr	r3, [pc, #28]	; (800ec84 <UART_SetConfig+0x69c>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	08db      	lsrs	r3, r3, #3
 800ec6c:	f003 0303 	and.w	r3, r3, #3
 800ec70:	4a08      	ldr	r2, [pc, #32]	; (800ec94 <UART_SetConfig+0x6ac>)
 800ec72:	fa22 f303 	lsr.w	r3, r2, r3
 800ec76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec78:	e01b      	b.n	800ecb2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ec7a:	4b06      	ldr	r3, [pc, #24]	; (800ec94 <UART_SetConfig+0x6ac>)
 800ec7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec7e:	e018      	b.n	800ecb2 <UART_SetConfig+0x6ca>
 800ec80:	40011400 	.word	0x40011400
 800ec84:	58024400 	.word	0x58024400
 800ec88:	40007800 	.word	0x40007800
 800ec8c:	40007c00 	.word	0x40007c00
 800ec90:	58000c00 	.word	0x58000c00
 800ec94:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec98:	4bc4      	ldr	r3, [pc, #784]	; (800efac <UART_SetConfig+0x9c4>)
 800ec9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec9c:	e009      	b.n	800ecb2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eca4:	e005      	b.n	800ecb2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800eca6:	2300      	movs	r3, #0
 800eca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ecb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f000 81da 	beq.w	800f06e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecbe:	4abc      	ldr	r2, [pc, #752]	; (800efb0 <UART_SetConfig+0x9c8>)
 800ecc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eccc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	685a      	ldr	r2, [r3, #4]
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	005b      	lsls	r3, r3, #1
 800ecd6:	4413      	add	r3, r2
 800ecd8:	6a3a      	ldr	r2, [r7, #32]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d305      	bcc.n	800ecea <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ece4:	6a3a      	ldr	r2, [r7, #32]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d903      	bls.n	800ecf2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ecea:	2301      	movs	r3, #1
 800ecec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ecf0:	e1bd      	b.n	800f06e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f04f 0100 	mov.w	r1, #0
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfe:	4aac      	ldr	r2, [pc, #688]	; (800efb0 <UART_SetConfig+0x9c8>)
 800ed00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	f04f 0300 	mov.w	r3, #0
 800ed0a:	f7f1 fb41 	bl	8000390 <__aeabi_uldivmod>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	460b      	mov	r3, r1
 800ed12:	4610      	mov	r0, r2
 800ed14:	4619      	mov	r1, r3
 800ed16:	f04f 0200 	mov.w	r2, #0
 800ed1a:	f04f 0300 	mov.w	r3, #0
 800ed1e:	020b      	lsls	r3, r1, #8
 800ed20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ed24:	0202      	lsls	r2, r0, #8
 800ed26:	6879      	ldr	r1, [r7, #4]
 800ed28:	6849      	ldr	r1, [r1, #4]
 800ed2a:	0849      	lsrs	r1, r1, #1
 800ed2c:	4608      	mov	r0, r1
 800ed2e:	f04f 0100 	mov.w	r1, #0
 800ed32:	1814      	adds	r4, r2, r0
 800ed34:	eb43 0501 	adc.w	r5, r3, r1
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	f04f 0300 	mov.w	r3, #0
 800ed42:	4620      	mov	r0, r4
 800ed44:	4629      	mov	r1, r5
 800ed46:	f7f1 fb23 	bl	8000390 <__aeabi_uldivmod>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4613      	mov	r3, r2
 800ed50:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ed52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ed58:	d308      	bcc.n	800ed6c <UART_SetConfig+0x784>
 800ed5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed60:	d204      	bcs.n	800ed6c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed68:	60da      	str	r2, [r3, #12]
 800ed6a:	e180      	b.n	800f06e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ed72:	e17c      	b.n	800f06e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	69db      	ldr	r3, [r3, #28]
 800ed78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed7c:	f040 80bf 	bne.w	800eefe <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800ed80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed84:	2b20      	cmp	r3, #32
 800ed86:	dc49      	bgt.n	800ee1c <UART_SetConfig+0x834>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	db7c      	blt.n	800ee86 <UART_SetConfig+0x89e>
 800ed8c:	2b20      	cmp	r3, #32
 800ed8e:	d87a      	bhi.n	800ee86 <UART_SetConfig+0x89e>
 800ed90:	a201      	add	r2, pc, #4	; (adr r2, 800ed98 <UART_SetConfig+0x7b0>)
 800ed92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed96:	bf00      	nop
 800ed98:	0800ee23 	.word	0x0800ee23
 800ed9c:	0800ee2b 	.word	0x0800ee2b
 800eda0:	0800ee87 	.word	0x0800ee87
 800eda4:	0800ee87 	.word	0x0800ee87
 800eda8:	0800ee33 	.word	0x0800ee33
 800edac:	0800ee87 	.word	0x0800ee87
 800edb0:	0800ee87 	.word	0x0800ee87
 800edb4:	0800ee87 	.word	0x0800ee87
 800edb8:	0800ee43 	.word	0x0800ee43
 800edbc:	0800ee87 	.word	0x0800ee87
 800edc0:	0800ee87 	.word	0x0800ee87
 800edc4:	0800ee87 	.word	0x0800ee87
 800edc8:	0800ee87 	.word	0x0800ee87
 800edcc:	0800ee87 	.word	0x0800ee87
 800edd0:	0800ee87 	.word	0x0800ee87
 800edd4:	0800ee87 	.word	0x0800ee87
 800edd8:	0800ee53 	.word	0x0800ee53
 800eddc:	0800ee87 	.word	0x0800ee87
 800ede0:	0800ee87 	.word	0x0800ee87
 800ede4:	0800ee87 	.word	0x0800ee87
 800ede8:	0800ee87 	.word	0x0800ee87
 800edec:	0800ee87 	.word	0x0800ee87
 800edf0:	0800ee87 	.word	0x0800ee87
 800edf4:	0800ee87 	.word	0x0800ee87
 800edf8:	0800ee87 	.word	0x0800ee87
 800edfc:	0800ee87 	.word	0x0800ee87
 800ee00:	0800ee87 	.word	0x0800ee87
 800ee04:	0800ee87 	.word	0x0800ee87
 800ee08:	0800ee87 	.word	0x0800ee87
 800ee0c:	0800ee87 	.word	0x0800ee87
 800ee10:	0800ee87 	.word	0x0800ee87
 800ee14:	0800ee87 	.word	0x0800ee87
 800ee18:	0800ee79 	.word	0x0800ee79
 800ee1c:	2b40      	cmp	r3, #64	; 0x40
 800ee1e:	d02e      	beq.n	800ee7e <UART_SetConfig+0x896>
 800ee20:	e031      	b.n	800ee86 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee22:	f7fa fb35 	bl	8009490 <HAL_RCC_GetPCLK1Freq>
 800ee26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ee28:	e033      	b.n	800ee92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee2a:	f7fa fb47 	bl	80094bc <HAL_RCC_GetPCLK2Freq>
 800ee2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ee30:	e02f      	b.n	800ee92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee32:	f107 0314 	add.w	r3, r7, #20
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fb ffc0 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee40:	e027      	b.n	800ee92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee42:	f107 0308 	add.w	r3, r7, #8
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fc f90c 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee50:	e01f      	b.n	800ee92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee52:	4b58      	ldr	r3, [pc, #352]	; (800efb4 <UART_SetConfig+0x9cc>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f003 0320 	and.w	r3, r3, #32
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d009      	beq.n	800ee72 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee5e:	4b55      	ldr	r3, [pc, #340]	; (800efb4 <UART_SetConfig+0x9cc>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	08db      	lsrs	r3, r3, #3
 800ee64:	f003 0303 	and.w	r3, r3, #3
 800ee68:	4a53      	ldr	r2, [pc, #332]	; (800efb8 <UART_SetConfig+0x9d0>)
 800ee6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee70:	e00f      	b.n	800ee92 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ee72:	4b51      	ldr	r3, [pc, #324]	; (800efb8 <UART_SetConfig+0x9d0>)
 800ee74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee76:	e00c      	b.n	800ee92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee78:	4b4c      	ldr	r3, [pc, #304]	; (800efac <UART_SetConfig+0x9c4>)
 800ee7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee7c:	e009      	b.n	800ee92 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee84:	e005      	b.n	800ee92 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ee86:	2300      	movs	r3, #0
 800ee88:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ee90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ee92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f000 80ea 	beq.w	800f06e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee9e:	4a44      	ldr	r2, [pc, #272]	; (800efb0 <UART_SetConfig+0x9c8>)
 800eea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eea4:	461a      	mov	r2, r3
 800eea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eeac:	005a      	lsls	r2, r3, #1
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	085b      	lsrs	r3, r3, #1
 800eeb4:	441a      	add	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	fbb2 f3f3 	udiv	r3, r2, r3
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec4:	2b0f      	cmp	r3, #15
 800eec6:	d916      	bls.n	800eef6 <UART_SetConfig+0x90e>
 800eec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eece:	d212      	bcs.n	800eef6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	f023 030f 	bic.w	r3, r3, #15
 800eed8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eedc:	085b      	lsrs	r3, r3, #1
 800eede:	b29b      	uxth	r3, r3
 800eee0:	f003 0307 	and.w	r3, r3, #7
 800eee4:	b29a      	uxth	r2, r3
 800eee6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eee8:	4313      	orrs	r3, r2
 800eeea:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eef2:	60da      	str	r2, [r3, #12]
 800eef4:	e0bb      	b.n	800f06e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800eef6:	2301      	movs	r3, #1
 800eef8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eefc:	e0b7      	b.n	800f06e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eefe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef02:	2b20      	cmp	r3, #32
 800ef04:	dc4a      	bgt.n	800ef9c <UART_SetConfig+0x9b4>
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f2c0 8086 	blt.w	800f018 <UART_SetConfig+0xa30>
 800ef0c:	2b20      	cmp	r3, #32
 800ef0e:	f200 8083 	bhi.w	800f018 <UART_SetConfig+0xa30>
 800ef12:	a201      	add	r2, pc, #4	; (adr r2, 800ef18 <UART_SetConfig+0x930>)
 800ef14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef18:	0800efa3 	.word	0x0800efa3
 800ef1c:	0800efbd 	.word	0x0800efbd
 800ef20:	0800f019 	.word	0x0800f019
 800ef24:	0800f019 	.word	0x0800f019
 800ef28:	0800efc5 	.word	0x0800efc5
 800ef2c:	0800f019 	.word	0x0800f019
 800ef30:	0800f019 	.word	0x0800f019
 800ef34:	0800f019 	.word	0x0800f019
 800ef38:	0800efd5 	.word	0x0800efd5
 800ef3c:	0800f019 	.word	0x0800f019
 800ef40:	0800f019 	.word	0x0800f019
 800ef44:	0800f019 	.word	0x0800f019
 800ef48:	0800f019 	.word	0x0800f019
 800ef4c:	0800f019 	.word	0x0800f019
 800ef50:	0800f019 	.word	0x0800f019
 800ef54:	0800f019 	.word	0x0800f019
 800ef58:	0800efe5 	.word	0x0800efe5
 800ef5c:	0800f019 	.word	0x0800f019
 800ef60:	0800f019 	.word	0x0800f019
 800ef64:	0800f019 	.word	0x0800f019
 800ef68:	0800f019 	.word	0x0800f019
 800ef6c:	0800f019 	.word	0x0800f019
 800ef70:	0800f019 	.word	0x0800f019
 800ef74:	0800f019 	.word	0x0800f019
 800ef78:	0800f019 	.word	0x0800f019
 800ef7c:	0800f019 	.word	0x0800f019
 800ef80:	0800f019 	.word	0x0800f019
 800ef84:	0800f019 	.word	0x0800f019
 800ef88:	0800f019 	.word	0x0800f019
 800ef8c:	0800f019 	.word	0x0800f019
 800ef90:	0800f019 	.word	0x0800f019
 800ef94:	0800f019 	.word	0x0800f019
 800ef98:	0800f00b 	.word	0x0800f00b
 800ef9c:	2b40      	cmp	r3, #64	; 0x40
 800ef9e:	d037      	beq.n	800f010 <UART_SetConfig+0xa28>
 800efa0:	e03a      	b.n	800f018 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800efa2:	f7fa fa75 	bl	8009490 <HAL_RCC_GetPCLK1Freq>
 800efa6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800efa8:	e03c      	b.n	800f024 <UART_SetConfig+0xa3c>
 800efaa:	bf00      	nop
 800efac:	003d0900 	.word	0x003d0900
 800efb0:	08023344 	.word	0x08023344
 800efb4:	58024400 	.word	0x58024400
 800efb8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800efbc:	f7fa fa7e 	bl	80094bc <HAL_RCC_GetPCLK2Freq>
 800efc0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800efc2:	e02f      	b.n	800f024 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efc4:	f107 0314 	add.w	r3, r7, #20
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fb fef7 	bl	800adbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800efce:	69bb      	ldr	r3, [r7, #24]
 800efd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efd2:	e027      	b.n	800f024 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efd4:	f107 0308 	add.w	r3, r7, #8
 800efd8:	4618      	mov	r0, r3
 800efda:	f7fc f843 	bl	800b064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efe2:	e01f      	b.n	800f024 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efe4:	4b2c      	ldr	r3, [pc, #176]	; (800f098 <UART_SetConfig+0xab0>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f003 0320 	and.w	r3, r3, #32
 800efec:	2b00      	cmp	r3, #0
 800efee:	d009      	beq.n	800f004 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eff0:	4b29      	ldr	r3, [pc, #164]	; (800f098 <UART_SetConfig+0xab0>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	08db      	lsrs	r3, r3, #3
 800eff6:	f003 0303 	and.w	r3, r3, #3
 800effa:	4a28      	ldr	r2, [pc, #160]	; (800f09c <UART_SetConfig+0xab4>)
 800effc:	fa22 f303 	lsr.w	r3, r2, r3
 800f000:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f002:	e00f      	b.n	800f024 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f004:	4b25      	ldr	r3, [pc, #148]	; (800f09c <UART_SetConfig+0xab4>)
 800f006:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f008:	e00c      	b.n	800f024 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f00a:	4b25      	ldr	r3, [pc, #148]	; (800f0a0 <UART_SetConfig+0xab8>)
 800f00c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f00e:	e009      	b.n	800f024 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f010:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f014:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f016:	e005      	b.n	800f024 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f018:	2300      	movs	r3, #0
 800f01a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f01c:	2301      	movs	r3, #1
 800f01e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f022:	bf00      	nop
    }

    if (pclk != 0U)
 800f024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f026:	2b00      	cmp	r3, #0
 800f028:	d021      	beq.n	800f06e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f02e:	4a1d      	ldr	r2, [pc, #116]	; (800f0a4 <UART_SetConfig+0xabc>)
 800f030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f034:	461a      	mov	r2, r3
 800f036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f038:	fbb3 f2f2 	udiv	r2, r3, r2
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	085b      	lsrs	r3, r3, #1
 800f042:	441a      	add	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	fbb2 f3f3 	udiv	r3, r2, r3
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f052:	2b0f      	cmp	r3, #15
 800f054:	d908      	bls.n	800f068 <UART_SetConfig+0xa80>
 800f056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f05c:	d204      	bcs.n	800f068 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f064:	60da      	str	r2, [r3, #12]
 800f066:	e002      	b.n	800f06e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f068:	2301      	movs	r3, #1
 800f06a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2201      	movs	r2, #1
 800f072:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2201      	movs	r2, #1
 800f07a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2200      	movs	r2, #0
 800f082:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f08a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3738      	adds	r7, #56	; 0x38
 800f092:	46bd      	mov	sp, r7
 800f094:	bdb0      	pop	{r4, r5, r7, pc}
 800f096:	bf00      	nop
 800f098:	58024400 	.word	0x58024400
 800f09c:	03d09000 	.word	0x03d09000
 800f0a0:	003d0900 	.word	0x003d0900
 800f0a4:	08023344 	.word	0x08023344

0800f0a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0b4:	f003 0301 	and.w	r3, r3, #1
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00a      	beq.n	800f0d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	430a      	orrs	r2, r1
 800f0d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0d6:	f003 0302 	and.w	r3, r3, #2
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00a      	beq.n	800f0f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	430a      	orrs	r2, r1
 800f0f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f8:	f003 0304 	and.w	r3, r3, #4
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00a      	beq.n	800f116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	430a      	orrs	r2, r1
 800f114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f11a:	f003 0308 	and.w	r3, r3, #8
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00a      	beq.n	800f138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	430a      	orrs	r2, r1
 800f136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f13c:	f003 0310 	and.w	r3, r3, #16
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00a      	beq.n	800f15a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	689b      	ldr	r3, [r3, #8]
 800f14a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	430a      	orrs	r2, r1
 800f158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f15e:	f003 0320 	and.w	r3, r3, #32
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00a      	beq.n	800f17c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	430a      	orrs	r2, r1
 800f17a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f184:	2b00      	cmp	r3, #0
 800f186:	d01a      	beq.n	800f1be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	430a      	orrs	r2, r1
 800f19c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f1a6:	d10a      	bne.n	800f1be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	430a      	orrs	r2, r1
 800f1bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00a      	beq.n	800f1e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	430a      	orrs	r2, r1
 800f1de:	605a      	str	r2, [r3, #4]
  }
}
 800f1e0:	bf00      	nop
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b086      	sub	sp, #24
 800f1f0:	af02      	add	r7, sp, #8
 800f1f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f1fc:	f7f5 fd2a 	bl	8004c54 <HAL_GetTick>
 800f200:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f003 0308 	and.w	r3, r3, #8
 800f20c:	2b08      	cmp	r3, #8
 800f20e:	d10e      	bne.n	800f22e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2200      	movs	r2, #0
 800f21a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 f82f 	bl	800f282 <UART_WaitOnFlagUntilTimeout>
 800f224:	4603      	mov	r3, r0
 800f226:	2b00      	cmp	r3, #0
 800f228:	d001      	beq.n	800f22e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f22a:	2303      	movs	r3, #3
 800f22c:	e025      	b.n	800f27a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f003 0304 	and.w	r3, r3, #4
 800f238:	2b04      	cmp	r3, #4
 800f23a:	d10e      	bne.n	800f25a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f23c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f240:	9300      	str	r3, [sp, #0]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2200      	movs	r2, #0
 800f246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 f819 	bl	800f282 <UART_WaitOnFlagUntilTimeout>
 800f250:	4603      	mov	r3, r0
 800f252:	2b00      	cmp	r3, #0
 800f254:	d001      	beq.n	800f25a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f256:	2303      	movs	r3, #3
 800f258:	e00f      	b.n	800f27a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2220      	movs	r2, #32
 800f25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2220      	movs	r2, #32
 800f266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2200      	movs	r2, #0
 800f274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b084      	sub	sp, #16
 800f286:	af00      	add	r7, sp, #0
 800f288:	60f8      	str	r0, [r7, #12]
 800f28a:	60b9      	str	r1, [r7, #8]
 800f28c:	603b      	str	r3, [r7, #0]
 800f28e:	4613      	mov	r3, r2
 800f290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f292:	e062      	b.n	800f35a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29a:	d05e      	beq.n	800f35a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f29c:	f7f5 fcda 	bl	8004c54 <HAL_GetTick>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	1ad3      	subs	r3, r2, r3
 800f2a6:	69ba      	ldr	r2, [r7, #24]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d302      	bcc.n	800f2b2 <UART_WaitOnFlagUntilTimeout+0x30>
 800f2ac:	69bb      	ldr	r3, [r7, #24]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d11d      	bne.n	800f2ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f2c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689a      	ldr	r2, [r3, #8]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f022 0201 	bic.w	r2, r2, #1
 800f2d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2220      	movs	r2, #32
 800f2d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2220      	movs	r2, #32
 800f2de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f2ea:	2303      	movs	r3, #3
 800f2ec:	e045      	b.n	800f37a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f003 0304 	and.w	r3, r3, #4
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d02e      	beq.n	800f35a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	69db      	ldr	r3, [r3, #28]
 800f302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f30a:	d126      	bne.n	800f35a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f314:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	681a      	ldr	r2, [r3, #0]
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f324:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	689a      	ldr	r2, [r3, #8]
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f022 0201 	bic.w	r2, r2, #1
 800f334:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2220      	movs	r2, #32
 800f33a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2220      	movs	r2, #32
 800f342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2220      	movs	r2, #32
 800f34a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2200      	movs	r2, #0
 800f352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f356:	2303      	movs	r3, #3
 800f358:	e00f      	b.n	800f37a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	69da      	ldr	r2, [r3, #28]
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	4013      	ands	r3, r2
 800f364:	68ba      	ldr	r2, [r7, #8]
 800f366:	429a      	cmp	r2, r3
 800f368:	bf0c      	ite	eq
 800f36a:	2301      	moveq	r3, #1
 800f36c:	2300      	movne	r3, #0
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	461a      	mov	r2, r3
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	429a      	cmp	r2, r3
 800f376:	d08d      	beq.n	800f294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f378:	2300      	movs	r3, #0
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
	...

0800f384 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	4613      	mov	r3, r2
 800f390:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	68ba      	ldr	r2, [r7, #8]
 800f396:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	88fa      	ldrh	r2, [r7, #6]
 800f39c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	88fa      	ldrh	r2, [r7, #6]
 800f3a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	689b      	ldr	r3, [r3, #8]
 800f3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3b6:	d10e      	bne.n	800f3d6 <UART_Start_Receive_IT+0x52>
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d105      	bne.n	800f3cc <UART_Start_Receive_IT+0x48>
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f3c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3ca:	e02d      	b.n	800f428 <UART_Start_Receive_IT+0xa4>
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	22ff      	movs	r2, #255	; 0xff
 800f3d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3d4:	e028      	b.n	800f428 <UART_Start_Receive_IT+0xa4>
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	689b      	ldr	r3, [r3, #8]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d10d      	bne.n	800f3fa <UART_Start_Receive_IT+0x76>
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d104      	bne.n	800f3f0 <UART_Start_Receive_IT+0x6c>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	22ff      	movs	r2, #255	; 0xff
 800f3ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3ee:	e01b      	b.n	800f428 <UART_Start_Receive_IT+0xa4>
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	227f      	movs	r2, #127	; 0x7f
 800f3f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3f8:	e016      	b.n	800f428 <UART_Start_Receive_IT+0xa4>
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f402:	d10d      	bne.n	800f420 <UART_Start_Receive_IT+0x9c>
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d104      	bne.n	800f416 <UART_Start_Receive_IT+0x92>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	227f      	movs	r2, #127	; 0x7f
 800f410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f414:	e008      	b.n	800f428 <UART_Start_Receive_IT+0xa4>
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	223f      	movs	r2, #63	; 0x3f
 800f41a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f41e:	e003      	b.n	800f428 <UART_Start_Receive_IT+0xa4>
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2200      	movs	r2, #0
 800f424:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	2222      	movs	r2, #34	; 0x22
 800f434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	689a      	ldr	r2, [r3, #8]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f042 0201 	orr.w	r2, r2, #1
 800f446:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f44c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f450:	d12a      	bne.n	800f4a8 <UART_Start_Receive_IT+0x124>
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f458:	88fa      	ldrh	r2, [r7, #6]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d324      	bcc.n	800f4a8 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	689b      	ldr	r3, [r3, #8]
 800f462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f466:	d107      	bne.n	800f478 <UART_Start_Receive_IT+0xf4>
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	691b      	ldr	r3, [r3, #16]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d103      	bne.n	800f478 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	4a1f      	ldr	r2, [pc, #124]	; (800f4f0 <UART_Start_Receive_IT+0x16c>)
 800f474:	671a      	str	r2, [r3, #112]	; 0x70
 800f476:	e002      	b.n	800f47e <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	4a1e      	ldr	r2, [pc, #120]	; (800f4f4 <UART_Start_Receive_IT+0x170>)
 800f47c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2200      	movs	r2, #0
 800f482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f494:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	689a      	ldr	r2, [r3, #8]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f4a4:	609a      	str	r2, [r3, #8]
 800f4a6:	e01b      	b.n	800f4e0 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4b0:	d107      	bne.n	800f4c2 <UART_Start_Receive_IT+0x13e>
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d103      	bne.n	800f4c2 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	4a0e      	ldr	r2, [pc, #56]	; (800f4f8 <UART_Start_Receive_IT+0x174>)
 800f4be:	671a      	str	r2, [r3, #112]	; 0x70
 800f4c0:	e002      	b.n	800f4c8 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	4a0d      	ldr	r2, [pc, #52]	; (800f4fc <UART_Start_Receive_IT+0x178>)
 800f4c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f4de:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3714      	adds	r7, #20
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr
 800f4ee:	bf00      	nop
 800f4f0:	0800f979 	.word	0x0800f979
 800f4f4:	0800f775 	.word	0x0800f775
 800f4f8:	0800f69d 	.word	0x0800f69d
 800f4fc:	0800f5c5 	.word	0x0800f5c5

0800f500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f516:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	6899      	ldr	r1, [r3, #8]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	4b0f      	ldr	r3, [pc, #60]	; (800f560 <UART_EndRxTransfer+0x60>)
 800f524:	400b      	ands	r3, r1
 800f526:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d107      	bne.n	800f540 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f022 0210 	bic.w	r2, r2, #16
 800f53e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2220      	movs	r2, #32
 800f544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2200      	movs	r2, #0
 800f552:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f554:	bf00      	nop
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr
 800f560:	effffffe 	.word	0xeffffffe

0800f564 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f570:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2200      	movs	r2, #0
 800f576:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2200      	movs	r2, #0
 800f57e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f7ff f81a 	bl	800e5bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f588:	bf00      	nop
 800f58a:	3710      	adds	r7, #16
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f5a6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2220      	movs	r2, #32
 800f5ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f7fe fff6 	bl	800e5a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f5bc:	bf00      	nop
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5d2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5da:	2b22      	cmp	r3, #34	; 0x22
 800f5dc:	d152      	bne.n	800f684 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f5e6:	89bb      	ldrh	r3, [r7, #12]
 800f5e8:	b2d9      	uxtb	r1, r3
 800f5ea:	89fb      	ldrh	r3, [r7, #14]
 800f5ec:	b2da      	uxtb	r2, r3
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5f2:	400a      	ands	r2, r1
 800f5f4:	b2d2      	uxtb	r2, r2
 800f5f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5fc:	1c5a      	adds	r2, r3, #1
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f608:	b29b      	uxth	r3, r3
 800f60a:	3b01      	subs	r3, #1
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d139      	bne.n	800f694 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f62e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	689a      	ldr	r2, [r3, #8]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f022 0201 	bic.w	r2, r2, #1
 800f63e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2220      	movs	r2, #32
 800f644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f652:	2b01      	cmp	r3, #1
 800f654:	d10f      	bne.n	800f676 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f022 0210 	bic.w	r2, r2, #16
 800f664:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f66c:	4619      	mov	r1, r3
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f7fe ffae 	bl	800e5d0 <HAL_UARTEx_RxEventCallback>
 800f674:	e002      	b.n	800f67c <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f7f2 f8b0 	bl	80017dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f682:	e007      	b.n	800f694 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	699a      	ldr	r2, [r3, #24]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f042 0208 	orr.w	r2, r2, #8
 800f692:	619a      	str	r2, [r3, #24]
}
 800f694:	bf00      	nop
 800f696:	3710      	adds	r7, #16
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6aa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6b2:	2b22      	cmp	r3, #34	; 0x22
 800f6b4:	d152      	bne.n	800f75c <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6bc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6c2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800f6c4:	89ba      	ldrh	r2, [r7, #12]
 800f6c6:	89fb      	ldrh	r3, [r7, #14]
 800f6c8:	4013      	ands	r3, r2
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6d4:	1c9a      	adds	r2, r3, #2
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	3b01      	subs	r3, #1
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d139      	bne.n	800f76c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f706:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	689a      	ldr	r2, [r3, #8]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f022 0201 	bic.w	r2, r2, #1
 800f716:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2220      	movs	r2, #32
 800f71c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d10f      	bne.n	800f74e <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f022 0210 	bic.w	r2, r2, #16
 800f73c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f744:	4619      	mov	r1, r3
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7fe ff42 	bl	800e5d0 <HAL_UARTEx_RxEventCallback>
 800f74c:	e002      	b.n	800f754 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7f2 f844 	bl	80017dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f75a:	e007      	b.n	800f76c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	699a      	ldr	r2, [r3, #24]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f042 0208 	orr.w	r2, r2, #8
 800f76a:	619a      	str	r2, [r3, #24]
}
 800f76c:	bf00      	nop
 800f76e:	3710      	adds	r7, #16
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b088      	sub	sp, #32
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f782:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	69db      	ldr	r3, [r3, #28]
 800f78a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7a2:	2b22      	cmp	r3, #34	; 0x22
 800f7a4:	f040 80d8 	bne.w	800f958 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7ae:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f7b0:	e0a8      	b.n	800f904 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b8:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f7ba:	89bb      	ldrh	r3, [r7, #12]
 800f7bc:	b2d9      	uxtb	r1, r3
 800f7be:	8b7b      	ldrh	r3, [r7, #26]
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7c6:	400a      	ands	r2, r1
 800f7c8:	b2d2      	uxtb	r2, r2
 800f7ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7d0:	1c5a      	adds	r2, r3, #1
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	3b01      	subs	r3, #1
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	69db      	ldr	r3, [r3, #28]
 800f7ee:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	f003 0307 	and.w	r3, r3, #7
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d04d      	beq.n	800f896 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	f003 0301 	and.w	r3, r3, #1
 800f800:	2b00      	cmp	r3, #0
 800f802:	d010      	beq.n	800f826 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d00b      	beq.n	800f826 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	2201      	movs	r2, #1
 800f814:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f81c:	f043 0201 	orr.w	r2, r3, #1
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	f003 0302 	and.w	r3, r3, #2
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d010      	beq.n	800f852 <UART_RxISR_8BIT_FIFOEN+0xde>
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00b      	beq.n	800f852 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2202      	movs	r2, #2
 800f840:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f848:	f043 0204 	orr.w	r2, r3, #4
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	f003 0304 	and.w	r3, r3, #4
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d010      	beq.n	800f87e <UART_RxISR_8BIT_FIFOEN+0x10a>
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	f003 0301 	and.w	r3, r3, #1
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00b      	beq.n	800f87e <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	2204      	movs	r2, #4
 800f86c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f874:	f043 0202 	orr.w	r2, r3, #2
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f884:	2b00      	cmp	r3, #0
 800f886:	d006      	beq.n	800f896 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f7fe fe97 	bl	800e5bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2200      	movs	r2, #0
 800f892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d130      	bne.n	800f904 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f8b0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	6899      	ldr	r1, [r3, #8]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	4b2c      	ldr	r3, [pc, #176]	; (800f970 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800f8be:	400b      	ands	r3, r1
 800f8c0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2220      	movs	r2, #32
 800f8c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d10f      	bne.n	800f8f8 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	681a      	ldr	r2, [r3, #0]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f022 0210 	bic.w	r2, r2, #16
 800f8e6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f7fe fe6d 	bl	800e5d0 <HAL_UARTEx_RxEventCallback>
 800f8f6:	e002      	b.n	800f8fe <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7f1 ff6f 	bl	80017dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f904:	89fb      	ldrh	r3, [r7, #14]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d005      	beq.n	800f916 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	f003 0320 	and.w	r3, r3, #32
 800f910:	2b00      	cmp	r3, #0
 800f912:	f47f af4e 	bne.w	800f7b2 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f91c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f91e:	897b      	ldrh	r3, [r7, #10]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d021      	beq.n	800f968 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f92a:	897a      	ldrh	r2, [r7, #10]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d21b      	bcs.n	800f968 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	689a      	ldr	r2, [r3, #8]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f93e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4a0c      	ldr	r2, [pc, #48]	; (800f974 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800f944:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f042 0220 	orr.w	r2, r2, #32
 800f954:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f956:	e007      	b.n	800f968 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	699a      	ldr	r2, [r3, #24]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f042 0208 	orr.w	r2, r2, #8
 800f966:	619a      	str	r2, [r3, #24]
}
 800f968:	bf00      	nop
 800f96a:	3720      	adds	r7, #32
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	effffffe 	.word	0xeffffffe
 800f974:	0800f5c5 	.word	0x0800f5c5

0800f978 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b08a      	sub	sp, #40	; 0x28
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f986:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	69db      	ldr	r3, [r3, #28]
 800f98e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	689b      	ldr	r3, [r3, #8]
 800f99e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9a6:	2b22      	cmp	r3, #34	; 0x22
 800f9a8:	f040 80d8 	bne.w	800fb5c <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f9b2:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f9b4:	e0a8      	b.n	800fb08 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9bc:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800f9c4:	8aba      	ldrh	r2, [r7, #20]
 800f9c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f9c8:	4013      	ands	r3, r2
 800f9ca:	b29a      	uxth	r2, r3
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9d4:	1c9a      	adds	r2, r3, #2
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	3b01      	subs	r3, #1
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	69db      	ldr	r3, [r3, #28]
 800f9f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f6:	f003 0307 	and.w	r3, r3, #7
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d04d      	beq.n	800fa9a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa00:	f003 0301 	and.w	r3, r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d010      	beq.n	800fa2a <UART_RxISR_16BIT_FIFOEN+0xb2>
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00b      	beq.n	800fa2a <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2201      	movs	r2, #1
 800fa18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa20:	f043 0201 	orr.w	r2, r3, #1
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2c:	f003 0302 	and.w	r3, r3, #2
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d010      	beq.n	800fa56 <UART_RxISR_16BIT_FIFOEN+0xde>
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	f003 0301 	and.w	r3, r3, #1
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d00b      	beq.n	800fa56 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2202      	movs	r2, #2
 800fa44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa4c:	f043 0204 	orr.w	r2, r3, #4
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa58:	f003 0304 	and.w	r3, r3, #4
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d010      	beq.n	800fa82 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800fa60:	69bb      	ldr	r3, [r7, #24]
 800fa62:	f003 0301 	and.w	r3, r3, #1
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00b      	beq.n	800fa82 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	2204      	movs	r2, #4
 800fa70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa78:	f043 0202 	orr.w	r2, r3, #2
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d006      	beq.n	800fa9a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7fe fd95 	bl	800e5bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2200      	movs	r2, #0
 800fa96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d130      	bne.n	800fb08 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fab4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	6899      	ldr	r1, [r3, #8]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681a      	ldr	r2, [r3, #0]
 800fac0:	4b2c      	ldr	r3, [pc, #176]	; (800fb74 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800fac2:	400b      	ands	r3, r1
 800fac4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2220      	movs	r2, #32
 800faca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2200      	movs	r2, #0
 800fad2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fad8:	2b01      	cmp	r3, #1
 800fada:	d10f      	bne.n	800fafc <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	681a      	ldr	r2, [r3, #0]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f022 0210 	bic.w	r2, r2, #16
 800faea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800faf2:	4619      	mov	r1, r3
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f7fe fd6b 	bl	800e5d0 <HAL_UARTEx_RxEventCallback>
 800fafa:	e002      	b.n	800fb02 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f7f1 fe6d 	bl	80017dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fb08:	8afb      	ldrh	r3, [r7, #22]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d005      	beq.n	800fb1a <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800fb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb10:	f003 0320 	and.w	r3, r3, #32
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f47f af4e 	bne.w	800f9b6 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb20:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fb22:	89fb      	ldrh	r3, [r7, #14]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d021      	beq.n	800fb6c <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb2e:	89fa      	ldrh	r2, [r7, #14]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d21b      	bcs.n	800fb6c <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	689a      	ldr	r2, [r3, #8]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800fb42:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a0c      	ldr	r2, [pc, #48]	; (800fb78 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800fb48:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	681a      	ldr	r2, [r3, #0]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	f042 0220 	orr.w	r2, r2, #32
 800fb58:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fb5a:	e007      	b.n	800fb6c <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	699a      	ldr	r2, [r3, #24]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f042 0208 	orr.w	r2, r2, #8
 800fb6a:	619a      	str	r2, [r3, #24]
}
 800fb6c:	bf00      	nop
 800fb6e:	3728      	adds	r7, #40	; 0x28
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	effffffe 	.word	0xeffffffe
 800fb78:	0800f69d 	.word	0x0800f69d

0800fb7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb84:	bf00      	nop
 800fb86:	370c      	adds	r7, #12
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb98:	bf00      	nop
 800fb9a:	370c      	adds	r7, #12
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fbac:	bf00      	nop
 800fbae:	370c      	adds	r7, #12
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr

0800fbb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d101      	bne.n	800fbce <HAL_UARTEx_DisableFifoMode+0x16>
 800fbca:	2302      	movs	r3, #2
 800fbcc:	e027      	b.n	800fc1e <HAL_UARTEx_DisableFifoMode+0x66>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2224      	movs	r2, #36	; 0x24
 800fbda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f022 0201 	bic.w	r2, r2, #1
 800fbf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fbfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	68fa      	ldr	r2, [r7, #12]
 800fc0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2220      	movs	r2, #32
 800fc10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2200      	movs	r2, #0
 800fc18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3714      	adds	r7, #20
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b084      	sub	sp, #16
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
 800fc32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d101      	bne.n	800fc42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc3e:	2302      	movs	r3, #2
 800fc40:	e02d      	b.n	800fc9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2201      	movs	r2, #1
 800fc46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2224      	movs	r2, #36	; 0x24
 800fc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f022 0201 	bic.w	r2, r2, #1
 800fc68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	430a      	orrs	r2, r1
 800fc7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 f850 	bl	800fd24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2220      	movs	r2, #32
 800fc90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc9c:	2300      	movs	r3, #0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3710      	adds	r7, #16
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}

0800fca6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b084      	sub	sp, #16
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
 800fcae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d101      	bne.n	800fcbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fcba:	2302      	movs	r3, #2
 800fcbc:	e02d      	b.n	800fd1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2224      	movs	r2, #36	; 0x24
 800fcca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f022 0201 	bic.w	r2, r2, #1
 800fce4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	683a      	ldr	r2, [r7, #0]
 800fcf6:	430a      	orrs	r2, r1
 800fcf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 f812 	bl	800fd24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2220      	movs	r2, #32
 800fd0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3710      	adds	r7, #16
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
	...

0800fd24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b085      	sub	sp, #20
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d108      	bne.n	800fd46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2201      	movs	r2, #1
 800fd38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2201      	movs	r2, #1
 800fd40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd44:	e031      	b.n	800fdaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd46:	2310      	movs	r3, #16
 800fd48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd4a:	2310      	movs	r3, #16
 800fd4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	0e5b      	lsrs	r3, r3, #25
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	f003 0307 	and.w	r3, r3, #7
 800fd5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	689b      	ldr	r3, [r3, #8]
 800fd64:	0f5b      	lsrs	r3, r3, #29
 800fd66:	b2db      	uxtb	r3, r3
 800fd68:	f003 0307 	and.w	r3, r3, #7
 800fd6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd6e:	7bbb      	ldrb	r3, [r7, #14]
 800fd70:	7b3a      	ldrb	r2, [r7, #12]
 800fd72:	4911      	ldr	r1, [pc, #68]	; (800fdb8 <UARTEx_SetNbDataToProcess+0x94>)
 800fd74:	5c8a      	ldrb	r2, [r1, r2]
 800fd76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd7a:	7b3a      	ldrb	r2, [r7, #12]
 800fd7c:	490f      	ldr	r1, [pc, #60]	; (800fdbc <UARTEx_SetNbDataToProcess+0x98>)
 800fd7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd80:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd84:	b29a      	uxth	r2, r3
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd8c:	7bfb      	ldrb	r3, [r7, #15]
 800fd8e:	7b7a      	ldrb	r2, [r7, #13]
 800fd90:	4909      	ldr	r1, [pc, #36]	; (800fdb8 <UARTEx_SetNbDataToProcess+0x94>)
 800fd92:	5c8a      	ldrb	r2, [r1, r2]
 800fd94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd98:	7b7a      	ldrb	r2, [r7, #13]
 800fd9a:	4908      	ldr	r1, [pc, #32]	; (800fdbc <UARTEx_SetNbDataToProcess+0x98>)
 800fd9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fda2:	b29a      	uxth	r2, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fdaa:	bf00      	nop
 800fdac:	3714      	adds	r7, #20
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	0802335c 	.word	0x0802335c
 800fdbc:	08023364 	.word	0x08023364

0800fdc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fdc0:	b084      	sub	sp, #16
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b084      	sub	sp, #16
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
 800fdca:	f107 001c 	add.w	r0, r7, #28
 800fdce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d120      	bne.n	800fe1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fddc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	68da      	ldr	r2, [r3, #12]
 800fde8:	4b2a      	ldr	r3, [pc, #168]	; (800fe94 <USB_CoreInit+0xd4>)
 800fdea:	4013      	ands	r3, r2
 800fdec:	687a      	ldr	r2, [r7, #4]
 800fdee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	68db      	ldr	r3, [r3, #12]
 800fdf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fdfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d105      	bne.n	800fe0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f001 fb14 	bl	801143c <USB_CoreReset>
 800fe14:	4603      	mov	r3, r0
 800fe16:	73fb      	strb	r3, [r7, #15]
 800fe18:	e01a      	b.n	800fe50 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	68db      	ldr	r3, [r3, #12]
 800fe1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f001 fb08 	bl	801143c <USB_CoreReset>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fe30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d106      	bne.n	800fe44 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	639a      	str	r2, [r3, #56]	; 0x38
 800fe42:	e005      	b.n	800fe50 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fe50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d116      	bne.n	800fe84 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe64:	4b0c      	ldr	r3, [pc, #48]	; (800fe98 <USB_CoreInit+0xd8>)
 800fe66:	4313      	orrs	r3, r2
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	f043 0206 	orr.w	r2, r3, #6
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	689b      	ldr	r3, [r3, #8]
 800fe7c:	f043 0220 	orr.w	r2, r3, #32
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fe84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3710      	adds	r7, #16
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe90:	b004      	add	sp, #16
 800fe92:	4770      	bx	lr
 800fe94:	ffbdffbf 	.word	0xffbdffbf
 800fe98:	03ee0000 	.word	0x03ee0000

0800fe9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b087      	sub	sp, #28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	4613      	mov	r3, r2
 800fea8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800feaa:	79fb      	ldrb	r3, [r7, #7]
 800feac:	2b02      	cmp	r3, #2
 800feae:	d165      	bne.n	800ff7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	4a41      	ldr	r2, [pc, #260]	; (800ffb8 <USB_SetTurnaroundTime+0x11c>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d906      	bls.n	800fec6 <USB_SetTurnaroundTime+0x2a>
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	4a40      	ldr	r2, [pc, #256]	; (800ffbc <USB_SetTurnaroundTime+0x120>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d202      	bcs.n	800fec6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fec0:	230f      	movs	r3, #15
 800fec2:	617b      	str	r3, [r7, #20]
 800fec4:	e062      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	4a3c      	ldr	r2, [pc, #240]	; (800ffbc <USB_SetTurnaroundTime+0x120>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d306      	bcc.n	800fedc <USB_SetTurnaroundTime+0x40>
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	4a3b      	ldr	r2, [pc, #236]	; (800ffc0 <USB_SetTurnaroundTime+0x124>)
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d202      	bcs.n	800fedc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fed6:	230e      	movs	r3, #14
 800fed8:	617b      	str	r3, [r7, #20]
 800feda:	e057      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	4a38      	ldr	r2, [pc, #224]	; (800ffc0 <USB_SetTurnaroundTime+0x124>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d306      	bcc.n	800fef2 <USB_SetTurnaroundTime+0x56>
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	4a37      	ldr	r2, [pc, #220]	; (800ffc4 <USB_SetTurnaroundTime+0x128>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d202      	bcs.n	800fef2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800feec:	230d      	movs	r3, #13
 800feee:	617b      	str	r3, [r7, #20]
 800fef0:	e04c      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	4a33      	ldr	r2, [pc, #204]	; (800ffc4 <USB_SetTurnaroundTime+0x128>)
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d306      	bcc.n	800ff08 <USB_SetTurnaroundTime+0x6c>
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	4a32      	ldr	r2, [pc, #200]	; (800ffc8 <USB_SetTurnaroundTime+0x12c>)
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d802      	bhi.n	800ff08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ff02:	230c      	movs	r3, #12
 800ff04:	617b      	str	r3, [r7, #20]
 800ff06:	e041      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	4a2f      	ldr	r2, [pc, #188]	; (800ffc8 <USB_SetTurnaroundTime+0x12c>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d906      	bls.n	800ff1e <USB_SetTurnaroundTime+0x82>
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	4a2e      	ldr	r2, [pc, #184]	; (800ffcc <USB_SetTurnaroundTime+0x130>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d802      	bhi.n	800ff1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ff18:	230b      	movs	r3, #11
 800ff1a:	617b      	str	r3, [r7, #20]
 800ff1c:	e036      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	4a2a      	ldr	r2, [pc, #168]	; (800ffcc <USB_SetTurnaroundTime+0x130>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d906      	bls.n	800ff34 <USB_SetTurnaroundTime+0x98>
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	4a29      	ldr	r2, [pc, #164]	; (800ffd0 <USB_SetTurnaroundTime+0x134>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d802      	bhi.n	800ff34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ff2e:	230a      	movs	r3, #10
 800ff30:	617b      	str	r3, [r7, #20]
 800ff32:	e02b      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	4a26      	ldr	r2, [pc, #152]	; (800ffd0 <USB_SetTurnaroundTime+0x134>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d906      	bls.n	800ff4a <USB_SetTurnaroundTime+0xae>
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	4a25      	ldr	r2, [pc, #148]	; (800ffd4 <USB_SetTurnaroundTime+0x138>)
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d202      	bcs.n	800ff4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ff44:	2309      	movs	r3, #9
 800ff46:	617b      	str	r3, [r7, #20]
 800ff48:	e020      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	4a21      	ldr	r2, [pc, #132]	; (800ffd4 <USB_SetTurnaroundTime+0x138>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d306      	bcc.n	800ff60 <USB_SetTurnaroundTime+0xc4>
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	4a20      	ldr	r2, [pc, #128]	; (800ffd8 <USB_SetTurnaroundTime+0x13c>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d802      	bhi.n	800ff60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ff5a:	2308      	movs	r3, #8
 800ff5c:	617b      	str	r3, [r7, #20]
 800ff5e:	e015      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	4a1d      	ldr	r2, [pc, #116]	; (800ffd8 <USB_SetTurnaroundTime+0x13c>)
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d906      	bls.n	800ff76 <USB_SetTurnaroundTime+0xda>
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	4a1c      	ldr	r2, [pc, #112]	; (800ffdc <USB_SetTurnaroundTime+0x140>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d202      	bcs.n	800ff76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ff70:	2307      	movs	r3, #7
 800ff72:	617b      	str	r3, [r7, #20]
 800ff74:	e00a      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ff76:	2306      	movs	r3, #6
 800ff78:	617b      	str	r3, [r7, #20]
 800ff7a:	e007      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ff7c:	79fb      	ldrb	r3, [r7, #7]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d102      	bne.n	800ff88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ff82:	2309      	movs	r3, #9
 800ff84:	617b      	str	r3, [r7, #20]
 800ff86:	e001      	b.n	800ff8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ff88:	2309      	movs	r3, #9
 800ff8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	68da      	ldr	r2, [r3, #12]
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	029b      	lsls	r3, r3, #10
 800ffa0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ffa4:	431a      	orrs	r2, r3
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ffaa:	2300      	movs	r3, #0
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	371c      	adds	r7, #28
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr
 800ffb8:	00d8acbf 	.word	0x00d8acbf
 800ffbc:	00e4e1c0 	.word	0x00e4e1c0
 800ffc0:	00f42400 	.word	0x00f42400
 800ffc4:	01067380 	.word	0x01067380
 800ffc8:	011a499f 	.word	0x011a499f
 800ffcc:	01312cff 	.word	0x01312cff
 800ffd0:	014ca43f 	.word	0x014ca43f
 800ffd4:	016e3600 	.word	0x016e3600
 800ffd8:	01a6ab1f 	.word	0x01a6ab1f
 800ffdc:	01e84800 	.word	0x01e84800

0800ffe0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	f043 0201 	orr.w	r2, r3, #1
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	370c      	adds	r7, #12
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr

08010002 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010002:	b480      	push	{r7}
 8010004:	b083      	sub	sp, #12
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	f023 0201 	bic.w	r2, r3, #1
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	370c      	adds	r7, #12
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	460b      	mov	r3, r1
 801002e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801003c:	78fb      	ldrb	r3, [r7, #3]
 801003e:	2b01      	cmp	r3, #1
 8010040:	d106      	bne.n	8010050 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	60da      	str	r2, [r3, #12]
 801004e:	e00b      	b.n	8010068 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010050:	78fb      	ldrb	r3, [r7, #3]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d106      	bne.n	8010064 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	60da      	str	r2, [r3, #12]
 8010062:	e001      	b.n	8010068 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010064:	2301      	movs	r3, #1
 8010066:	e003      	b.n	8010070 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010068:	2032      	movs	r0, #50	; 0x32
 801006a:	f7f4 fdff 	bl	8004c6c <HAL_Delay>

  return HAL_OK;
 801006e:	2300      	movs	r3, #0
}
 8010070:	4618      	mov	r0, r3
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010078:	b084      	sub	sp, #16
 801007a:	b580      	push	{r7, lr}
 801007c:	b086      	sub	sp, #24
 801007e:	af00      	add	r7, sp, #0
 8010080:	6078      	str	r0, [r7, #4]
 8010082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801008a:	2300      	movs	r3, #0
 801008c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010092:	2300      	movs	r3, #0
 8010094:	613b      	str	r3, [r7, #16]
 8010096:	e009      	b.n	80100ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	3340      	adds	r3, #64	; 0x40
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	4413      	add	r3, r2
 80100a2:	2200      	movs	r2, #0
 80100a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	3301      	adds	r3, #1
 80100aa:	613b      	str	r3, [r7, #16]
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	2b0e      	cmp	r3, #14
 80100b0:	d9f2      	bls.n	8010098 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80100b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d11c      	bne.n	80100f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100c6:	f043 0302 	orr.w	r3, r3, #2
 80100ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	601a      	str	r2, [r3, #0]
 80100f0:	e005      	b.n	80100fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010104:	461a      	mov	r2, r3
 8010106:	2300      	movs	r3, #0
 8010108:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010110:	4619      	mov	r1, r3
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010118:	461a      	mov	r2, r3
 801011a:	680b      	ldr	r3, [r1, #0]
 801011c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	2b01      	cmp	r3, #1
 8010122:	d10c      	bne.n	801013e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010126:	2b00      	cmp	r3, #0
 8010128:	d104      	bne.n	8010134 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801012a:	2100      	movs	r1, #0
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f000 f949 	bl	80103c4 <USB_SetDevSpeed>
 8010132:	e008      	b.n	8010146 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010134:	2101      	movs	r1, #1
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 f944 	bl	80103c4 <USB_SetDevSpeed>
 801013c:	e003      	b.n	8010146 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801013e:	2103      	movs	r1, #3
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f000 f93f 	bl	80103c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010146:	2110      	movs	r1, #16
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 f8f3 	bl	8010334 <USB_FlushTxFifo>
 801014e:	4603      	mov	r3, r0
 8010150:	2b00      	cmp	r3, #0
 8010152:	d001      	beq.n	8010158 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010154:	2301      	movs	r3, #1
 8010156:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f000 f911 	bl	8010380 <USB_FlushRxFifo>
 801015e:	4603      	mov	r3, r0
 8010160:	2b00      	cmp	r3, #0
 8010162:	d001      	beq.n	8010168 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801016e:	461a      	mov	r2, r3
 8010170:	2300      	movs	r3, #0
 8010172:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801017a:	461a      	mov	r2, r3
 801017c:	2300      	movs	r3, #0
 801017e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010186:	461a      	mov	r2, r3
 8010188:	2300      	movs	r3, #0
 801018a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801018c:	2300      	movs	r3, #0
 801018e:	613b      	str	r3, [r7, #16]
 8010190:	e043      	b.n	801021a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	015a      	lsls	r2, r3, #5
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	4413      	add	r3, r2
 801019a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101a8:	d118      	bne.n	80101dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d10a      	bne.n	80101c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	015a      	lsls	r2, r3, #5
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	4413      	add	r3, r2
 80101b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101bc:	461a      	mov	r2, r3
 80101be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80101c2:	6013      	str	r3, [r2, #0]
 80101c4:	e013      	b.n	80101ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	015a      	lsls	r2, r3, #5
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	4413      	add	r3, r2
 80101ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101d2:	461a      	mov	r2, r3
 80101d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80101d8:	6013      	str	r3, [r2, #0]
 80101da:	e008      	b.n	80101ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	015a      	lsls	r2, r3, #5
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	4413      	add	r3, r2
 80101e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101e8:	461a      	mov	r2, r3
 80101ea:	2300      	movs	r3, #0
 80101ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	015a      	lsls	r2, r3, #5
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	4413      	add	r3, r2
 80101f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101fa:	461a      	mov	r2, r3
 80101fc:	2300      	movs	r3, #0
 80101fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	015a      	lsls	r2, r3, #5
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	4413      	add	r3, r2
 8010208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801020c:	461a      	mov	r2, r3
 801020e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010212:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	3301      	adds	r3, #1
 8010218:	613b      	str	r3, [r7, #16]
 801021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021c:	693a      	ldr	r2, [r7, #16]
 801021e:	429a      	cmp	r2, r3
 8010220:	d3b7      	bcc.n	8010192 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010222:	2300      	movs	r3, #0
 8010224:	613b      	str	r3, [r7, #16]
 8010226:	e043      	b.n	80102b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	015a      	lsls	r2, r3, #5
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	4413      	add	r3, r2
 8010230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801023a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801023e:	d118      	bne.n	8010272 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d10a      	bne.n	801025c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	015a      	lsls	r2, r3, #5
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	4413      	add	r3, r2
 801024e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010252:	461a      	mov	r2, r3
 8010254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010258:	6013      	str	r3, [r2, #0]
 801025a:	e013      	b.n	8010284 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	015a      	lsls	r2, r3, #5
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	4413      	add	r3, r2
 8010264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010268:	461a      	mov	r2, r3
 801026a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801026e:	6013      	str	r3, [r2, #0]
 8010270:	e008      	b.n	8010284 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	015a      	lsls	r2, r3, #5
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	4413      	add	r3, r2
 801027a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801027e:	461a      	mov	r2, r3
 8010280:	2300      	movs	r3, #0
 8010282:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	015a      	lsls	r2, r3, #5
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	4413      	add	r3, r2
 801028c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010290:	461a      	mov	r2, r3
 8010292:	2300      	movs	r3, #0
 8010294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	015a      	lsls	r2, r3, #5
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	4413      	add	r3, r2
 801029e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102a2:	461a      	mov	r2, r3
 80102a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80102a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	3301      	adds	r3, #1
 80102ae:	613b      	str	r3, [r7, #16]
 80102b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b2:	693a      	ldr	r2, [r7, #16]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d3b7      	bcc.n	8010228 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102be:	691b      	ldr	r3, [r3, #16]
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80102d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80102da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d105      	bne.n	80102ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	699b      	ldr	r3, [r3, #24]
 80102e4:	f043 0210 	orr.w	r2, r3, #16
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	699a      	ldr	r2, [r3, #24]
 80102f0:	4b0e      	ldr	r3, [pc, #56]	; (801032c <USB_DevInit+0x2b4>)
 80102f2:	4313      	orrs	r3, r2
 80102f4:	687a      	ldr	r2, [r7, #4]
 80102f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80102f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d005      	beq.n	801030a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	699b      	ldr	r3, [r3, #24]
 8010302:	f043 0208 	orr.w	r2, r3, #8
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801030a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801030c:	2b01      	cmp	r3, #1
 801030e:	d105      	bne.n	801031c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	699a      	ldr	r2, [r3, #24]
 8010314:	4b06      	ldr	r3, [pc, #24]	; (8010330 <USB_DevInit+0x2b8>)
 8010316:	4313      	orrs	r3, r2
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801031c:	7dfb      	ldrb	r3, [r7, #23]
}
 801031e:	4618      	mov	r0, r3
 8010320:	3718      	adds	r7, #24
 8010322:	46bd      	mov	sp, r7
 8010324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010328:	b004      	add	sp, #16
 801032a:	4770      	bx	lr
 801032c:	803c3800 	.word	0x803c3800
 8010330:	40000004 	.word	0x40000004

08010334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010334:	b480      	push	{r7}
 8010336:	b085      	sub	sp, #20
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801033e:	2300      	movs	r3, #0
 8010340:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	019b      	lsls	r3, r3, #6
 8010346:	f043 0220 	orr.w	r2, r3, #32
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	3301      	adds	r3, #1
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	4a09      	ldr	r2, [pc, #36]	; (801037c <USB_FlushTxFifo+0x48>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d901      	bls.n	8010360 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801035c:	2303      	movs	r3, #3
 801035e:	e006      	b.n	801036e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	f003 0320 	and.w	r3, r3, #32
 8010368:	2b20      	cmp	r3, #32
 801036a:	d0f0      	beq.n	801034e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801036c:	2300      	movs	r3, #0
}
 801036e:	4618      	mov	r0, r3
 8010370:	3714      	adds	r7, #20
 8010372:	46bd      	mov	sp, r7
 8010374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010378:	4770      	bx	lr
 801037a:	bf00      	nop
 801037c:	00030d40 	.word	0x00030d40

08010380 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010380:	b480      	push	{r7}
 8010382:	b085      	sub	sp, #20
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8010388:	2300      	movs	r3, #0
 801038a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2210      	movs	r2, #16
 8010390:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	3301      	adds	r3, #1
 8010396:	60fb      	str	r3, [r7, #12]
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	4a09      	ldr	r2, [pc, #36]	; (80103c0 <USB_FlushRxFifo+0x40>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d901      	bls.n	80103a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80103a0:	2303      	movs	r3, #3
 80103a2:	e006      	b.n	80103b2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	691b      	ldr	r3, [r3, #16]
 80103a8:	f003 0310 	and.w	r3, r3, #16
 80103ac:	2b10      	cmp	r3, #16
 80103ae:	d0f0      	beq.n	8010392 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80103b0:	2300      	movs	r3, #0
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3714      	adds	r7, #20
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	00030d40 	.word	0x00030d40

080103c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b085      	sub	sp, #20
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	460b      	mov	r3, r1
 80103ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	78fb      	ldrb	r3, [r7, #3]
 80103de:	68f9      	ldr	r1, [r7, #12]
 80103e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103e4:	4313      	orrs	r3, r2
 80103e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3714      	adds	r7, #20
 80103ee:	46bd      	mov	sp, r7
 80103f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f4:	4770      	bx	lr

080103f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80103f6:	b480      	push	{r7}
 80103f8:	b087      	sub	sp, #28
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010408:	689b      	ldr	r3, [r3, #8]
 801040a:	f003 0306 	and.w	r3, r3, #6
 801040e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d102      	bne.n	801041c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010416:	2300      	movs	r3, #0
 8010418:	75fb      	strb	r3, [r7, #23]
 801041a:	e00a      	b.n	8010432 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2b02      	cmp	r3, #2
 8010420:	d002      	beq.n	8010428 <USB_GetDevSpeed+0x32>
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2b06      	cmp	r3, #6
 8010426:	d102      	bne.n	801042e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010428:	2302      	movs	r3, #2
 801042a:	75fb      	strb	r3, [r7, #23]
 801042c:	e001      	b.n	8010432 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801042e:	230f      	movs	r3, #15
 8010430:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010432:	7dfb      	ldrb	r3, [r7, #23]
}
 8010434:	4618      	mov	r0, r3
 8010436:	371c      	adds	r7, #28
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	785b      	ldrb	r3, [r3, #1]
 8010458:	2b01      	cmp	r3, #1
 801045a:	d139      	bne.n	80104d0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010462:	69da      	ldr	r2, [r3, #28]
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	f003 030f 	and.w	r3, r3, #15
 801046c:	2101      	movs	r1, #1
 801046e:	fa01 f303 	lsl.w	r3, r1, r3
 8010472:	b29b      	uxth	r3, r3
 8010474:	68f9      	ldr	r1, [r7, #12]
 8010476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801047a:	4313      	orrs	r3, r2
 801047c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	015a      	lsls	r2, r3, #5
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	4413      	add	r3, r2
 8010486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010490:	2b00      	cmp	r3, #0
 8010492:	d153      	bne.n	801053c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	015a      	lsls	r2, r3, #5
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	4413      	add	r3, r2
 801049c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	689b      	ldr	r3, [r3, #8]
 80104a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	78db      	ldrb	r3, [r3, #3]
 80104ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80104b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	059b      	lsls	r3, r3, #22
 80104b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80104b8:	431a      	orrs	r2, r3
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	0159      	lsls	r1, r3, #5
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	440b      	add	r3, r1
 80104c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104c6:	4619      	mov	r1, r3
 80104c8:	4b20      	ldr	r3, [pc, #128]	; (801054c <USB_ActivateEndpoint+0x10c>)
 80104ca:	4313      	orrs	r3, r2
 80104cc:	600b      	str	r3, [r1, #0]
 80104ce:	e035      	b.n	801053c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104d6:	69da      	ldr	r2, [r3, #28]
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	f003 030f 	and.w	r3, r3, #15
 80104e0:	2101      	movs	r1, #1
 80104e2:	fa01 f303 	lsl.w	r3, r1, r3
 80104e6:	041b      	lsls	r3, r3, #16
 80104e8:	68f9      	ldr	r1, [r7, #12]
 80104ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104ee:	4313      	orrs	r3, r2
 80104f0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	015a      	lsls	r2, r3, #5
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	4413      	add	r3, r2
 80104fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010504:	2b00      	cmp	r3, #0
 8010506:	d119      	bne.n	801053c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	015a      	lsls	r2, r3, #5
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	4413      	add	r3, r2
 8010510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	78db      	ldrb	r3, [r3, #3]
 8010522:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010524:	430b      	orrs	r3, r1
 8010526:	431a      	orrs	r2, r3
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	0159      	lsls	r1, r3, #5
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	440b      	add	r3, r1
 8010530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010534:	4619      	mov	r1, r3
 8010536:	4b05      	ldr	r3, [pc, #20]	; (801054c <USB_ActivateEndpoint+0x10c>)
 8010538:	4313      	orrs	r3, r2
 801053a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801053c:	2300      	movs	r3, #0
}
 801053e:	4618      	mov	r0, r3
 8010540:	3714      	adds	r7, #20
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr
 801054a:	bf00      	nop
 801054c:	10008000 	.word	0x10008000

08010550 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010550:	b480      	push	{r7}
 8010552:	b085      	sub	sp, #20
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	785b      	ldrb	r3, [r3, #1]
 8010568:	2b01      	cmp	r3, #1
 801056a:	d161      	bne.n	8010630 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	015a      	lsls	r2, r3, #5
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	4413      	add	r3, r2
 8010574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801057e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010582:	d11f      	bne.n	80105c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	015a      	lsls	r2, r3, #5
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	4413      	add	r3, r2
 801058c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	68ba      	ldr	r2, [r7, #8]
 8010594:	0151      	lsls	r1, r2, #5
 8010596:	68fa      	ldr	r2, [r7, #12]
 8010598:	440a      	add	r2, r1
 801059a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801059e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80105a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	015a      	lsls	r2, r3, #5
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	4413      	add	r3, r2
 80105ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	68ba      	ldr	r2, [r7, #8]
 80105b4:	0151      	lsls	r1, r2, #5
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	440a      	add	r2, r1
 80105ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	f003 030f 	and.w	r3, r3, #15
 80105d4:	2101      	movs	r1, #1
 80105d6:	fa01 f303 	lsl.w	r3, r1, r3
 80105da:	b29b      	uxth	r3, r3
 80105dc:	43db      	mvns	r3, r3
 80105de:	68f9      	ldr	r1, [r7, #12]
 80105e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105e4:	4013      	ands	r3, r2
 80105e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105ee:	69da      	ldr	r2, [r3, #28]
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	f003 030f 	and.w	r3, r3, #15
 80105f8:	2101      	movs	r1, #1
 80105fa:	fa01 f303 	lsl.w	r3, r1, r3
 80105fe:	b29b      	uxth	r3, r3
 8010600:	43db      	mvns	r3, r3
 8010602:	68f9      	ldr	r1, [r7, #12]
 8010604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010608:	4013      	ands	r3, r2
 801060a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	015a      	lsls	r2, r3, #5
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	4413      	add	r3, r2
 8010614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010618:	681a      	ldr	r2, [r3, #0]
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	0159      	lsls	r1, r3, #5
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	440b      	add	r3, r1
 8010622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010626:	4619      	mov	r1, r3
 8010628:	4b35      	ldr	r3, [pc, #212]	; (8010700 <USB_DeactivateEndpoint+0x1b0>)
 801062a:	4013      	ands	r3, r2
 801062c:	600b      	str	r3, [r1, #0]
 801062e:	e060      	b.n	80106f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	015a      	lsls	r2, r3, #5
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	4413      	add	r3, r2
 8010638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010646:	d11f      	bne.n	8010688 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	015a      	lsls	r2, r3, #5
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	4413      	add	r3, r2
 8010650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	68ba      	ldr	r2, [r7, #8]
 8010658:	0151      	lsls	r1, r2, #5
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	440a      	add	r2, r1
 801065e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010662:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010666:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	015a      	lsls	r2, r3, #5
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	4413      	add	r3, r2
 8010670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	68ba      	ldr	r2, [r7, #8]
 8010678:	0151      	lsls	r1, r2, #5
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	440a      	add	r2, r1
 801067e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010686:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801068e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	f003 030f 	and.w	r3, r3, #15
 8010698:	2101      	movs	r1, #1
 801069a:	fa01 f303 	lsl.w	r3, r1, r3
 801069e:	041b      	lsls	r3, r3, #16
 80106a0:	43db      	mvns	r3, r3
 80106a2:	68f9      	ldr	r1, [r7, #12]
 80106a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106a8:	4013      	ands	r3, r2
 80106aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106b2:	69da      	ldr	r2, [r3, #28]
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	f003 030f 	and.w	r3, r3, #15
 80106bc:	2101      	movs	r1, #1
 80106be:	fa01 f303 	lsl.w	r3, r1, r3
 80106c2:	041b      	lsls	r3, r3, #16
 80106c4:	43db      	mvns	r3, r3
 80106c6:	68f9      	ldr	r1, [r7, #12]
 80106c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106cc:	4013      	ands	r3, r2
 80106ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	015a      	lsls	r2, r3, #5
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	4413      	add	r3, r2
 80106d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	0159      	lsls	r1, r3, #5
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	440b      	add	r3, r1
 80106e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106ea:	4619      	mov	r1, r3
 80106ec:	4b05      	ldr	r3, [pc, #20]	; (8010704 <USB_DeactivateEndpoint+0x1b4>)
 80106ee:	4013      	ands	r3, r2
 80106f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80106f2:	2300      	movs	r3, #0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3714      	adds	r7, #20
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr
 8010700:	ec337800 	.word	0xec337800
 8010704:	eff37800 	.word	0xeff37800

08010708 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b08a      	sub	sp, #40	; 0x28
 801070c:	af02      	add	r7, sp, #8
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	4613      	mov	r3, r2
 8010714:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	785b      	ldrb	r3, [r3, #1]
 8010724:	2b01      	cmp	r3, #1
 8010726:	f040 8163 	bne.w	80109f0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	695b      	ldr	r3, [r3, #20]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d132      	bne.n	8010798 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010732:	69bb      	ldr	r3, [r7, #24]
 8010734:	015a      	lsls	r2, r3, #5
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	4413      	add	r3, r2
 801073a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801073e:	691a      	ldr	r2, [r3, #16]
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	0159      	lsls	r1, r3, #5
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	440b      	add	r3, r1
 8010748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801074c:	4619      	mov	r1, r3
 801074e:	4ba5      	ldr	r3, [pc, #660]	; (80109e4 <USB_EPStartXfer+0x2dc>)
 8010750:	4013      	ands	r3, r2
 8010752:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	015a      	lsls	r2, r3, #5
 8010758:	69fb      	ldr	r3, [r7, #28]
 801075a:	4413      	add	r3, r2
 801075c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010760:	691b      	ldr	r3, [r3, #16]
 8010762:	69ba      	ldr	r2, [r7, #24]
 8010764:	0151      	lsls	r1, r2, #5
 8010766:	69fa      	ldr	r2, [r7, #28]
 8010768:	440a      	add	r2, r1
 801076a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801076e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	015a      	lsls	r2, r3, #5
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	4413      	add	r3, r2
 801077c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010780:	691a      	ldr	r2, [r3, #16]
 8010782:	69bb      	ldr	r3, [r7, #24]
 8010784:	0159      	lsls	r1, r3, #5
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	440b      	add	r3, r1
 801078a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801078e:	4619      	mov	r1, r3
 8010790:	4b95      	ldr	r3, [pc, #596]	; (80109e8 <USB_EPStartXfer+0x2e0>)
 8010792:	4013      	ands	r3, r2
 8010794:	610b      	str	r3, [r1, #16]
 8010796:	e074      	b.n	8010882 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	015a      	lsls	r2, r3, #5
 801079c:	69fb      	ldr	r3, [r7, #28]
 801079e:	4413      	add	r3, r2
 80107a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107a4:	691a      	ldr	r2, [r3, #16]
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	0159      	lsls	r1, r3, #5
 80107aa:	69fb      	ldr	r3, [r7, #28]
 80107ac:	440b      	add	r3, r1
 80107ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107b2:	4619      	mov	r1, r3
 80107b4:	4b8c      	ldr	r3, [pc, #560]	; (80109e8 <USB_EPStartXfer+0x2e0>)
 80107b6:	4013      	ands	r3, r2
 80107b8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80107ba:	69bb      	ldr	r3, [r7, #24]
 80107bc:	015a      	lsls	r2, r3, #5
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	4413      	add	r3, r2
 80107c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107c6:	691a      	ldr	r2, [r3, #16]
 80107c8:	69bb      	ldr	r3, [r7, #24]
 80107ca:	0159      	lsls	r1, r3, #5
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	440b      	add	r3, r1
 80107d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107d4:	4619      	mov	r1, r3
 80107d6:	4b83      	ldr	r3, [pc, #524]	; (80109e4 <USB_EPStartXfer+0x2dc>)
 80107d8:	4013      	ands	r3, r2
 80107da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80107dc:	69bb      	ldr	r3, [r7, #24]
 80107de:	015a      	lsls	r2, r3, #5
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	4413      	add	r3, r2
 80107e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107e8:	691a      	ldr	r2, [r3, #16]
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	6959      	ldr	r1, [r3, #20]
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	440b      	add	r3, r1
 80107f4:	1e59      	subs	r1, r3, #1
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	689b      	ldr	r3, [r3, #8]
 80107fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80107fe:	04d9      	lsls	r1, r3, #19
 8010800:	4b7a      	ldr	r3, [pc, #488]	; (80109ec <USB_EPStartXfer+0x2e4>)
 8010802:	400b      	ands	r3, r1
 8010804:	69b9      	ldr	r1, [r7, #24]
 8010806:	0148      	lsls	r0, r1, #5
 8010808:	69f9      	ldr	r1, [r7, #28]
 801080a:	4401      	add	r1, r0
 801080c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010810:	4313      	orrs	r3, r2
 8010812:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	015a      	lsls	r2, r3, #5
 8010818:	69fb      	ldr	r3, [r7, #28]
 801081a:	4413      	add	r3, r2
 801081c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010820:	691a      	ldr	r2, [r3, #16]
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	695b      	ldr	r3, [r3, #20]
 8010826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801082a:	69b9      	ldr	r1, [r7, #24]
 801082c:	0148      	lsls	r0, r1, #5
 801082e:	69f9      	ldr	r1, [r7, #28]
 8010830:	4401      	add	r1, r0
 8010832:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010836:	4313      	orrs	r3, r2
 8010838:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	78db      	ldrb	r3, [r3, #3]
 801083e:	2b01      	cmp	r3, #1
 8010840:	d11f      	bne.n	8010882 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010842:	69bb      	ldr	r3, [r7, #24]
 8010844:	015a      	lsls	r2, r3, #5
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	4413      	add	r3, r2
 801084a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801084e:	691b      	ldr	r3, [r3, #16]
 8010850:	69ba      	ldr	r2, [r7, #24]
 8010852:	0151      	lsls	r1, r2, #5
 8010854:	69fa      	ldr	r2, [r7, #28]
 8010856:	440a      	add	r2, r1
 8010858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801085c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010860:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	015a      	lsls	r2, r3, #5
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	4413      	add	r3, r2
 801086a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801086e:	691b      	ldr	r3, [r3, #16]
 8010870:	69ba      	ldr	r2, [r7, #24]
 8010872:	0151      	lsls	r1, r2, #5
 8010874:	69fa      	ldr	r2, [r7, #28]
 8010876:	440a      	add	r2, r1
 8010878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801087c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010880:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010882:	79fb      	ldrb	r3, [r7, #7]
 8010884:	2b01      	cmp	r3, #1
 8010886:	d14b      	bne.n	8010920 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	691b      	ldr	r3, [r3, #16]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d009      	beq.n	80108a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010890:	69bb      	ldr	r3, [r7, #24]
 8010892:	015a      	lsls	r2, r3, #5
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	4413      	add	r3, r2
 8010898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801089c:	461a      	mov	r2, r3
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	691b      	ldr	r3, [r3, #16]
 80108a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	78db      	ldrb	r3, [r3, #3]
 80108a8:	2b01      	cmp	r3, #1
 80108aa:	d128      	bne.n	80108fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80108ac:	69fb      	ldr	r3, [r7, #28]
 80108ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d110      	bne.n	80108de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80108bc:	69bb      	ldr	r3, [r7, #24]
 80108be:	015a      	lsls	r2, r3, #5
 80108c0:	69fb      	ldr	r3, [r7, #28]
 80108c2:	4413      	add	r3, r2
 80108c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	69ba      	ldr	r2, [r7, #24]
 80108cc:	0151      	lsls	r1, r2, #5
 80108ce:	69fa      	ldr	r2, [r7, #28]
 80108d0:	440a      	add	r2, r1
 80108d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80108da:	6013      	str	r3, [r2, #0]
 80108dc:	e00f      	b.n	80108fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	015a      	lsls	r2, r3, #5
 80108e2:	69fb      	ldr	r3, [r7, #28]
 80108e4:	4413      	add	r3, r2
 80108e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	69ba      	ldr	r2, [r7, #24]
 80108ee:	0151      	lsls	r1, r2, #5
 80108f0:	69fa      	ldr	r2, [r7, #28]
 80108f2:	440a      	add	r2, r1
 80108f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80108fe:	69bb      	ldr	r3, [r7, #24]
 8010900:	015a      	lsls	r2, r3, #5
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	4413      	add	r3, r2
 8010906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	69ba      	ldr	r2, [r7, #24]
 801090e:	0151      	lsls	r1, r2, #5
 8010910:	69fa      	ldr	r2, [r7, #28]
 8010912:	440a      	add	r2, r1
 8010914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010918:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801091c:	6013      	str	r3, [r2, #0]
 801091e:	e133      	b.n	8010b88 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010920:	69bb      	ldr	r3, [r7, #24]
 8010922:	015a      	lsls	r2, r3, #5
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	4413      	add	r3, r2
 8010928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	69ba      	ldr	r2, [r7, #24]
 8010930:	0151      	lsls	r1, r2, #5
 8010932:	69fa      	ldr	r2, [r7, #28]
 8010934:	440a      	add	r2, r1
 8010936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801093a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801093e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	78db      	ldrb	r3, [r3, #3]
 8010944:	2b01      	cmp	r3, #1
 8010946:	d015      	beq.n	8010974 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	695b      	ldr	r3, [r3, #20]
 801094c:	2b00      	cmp	r3, #0
 801094e:	f000 811b 	beq.w	8010b88 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	f003 030f 	and.w	r3, r3, #15
 8010962:	2101      	movs	r1, #1
 8010964:	fa01 f303 	lsl.w	r3, r1, r3
 8010968:	69f9      	ldr	r1, [r7, #28]
 801096a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801096e:	4313      	orrs	r3, r2
 8010970:	634b      	str	r3, [r1, #52]	; 0x34
 8010972:	e109      	b.n	8010b88 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010980:	2b00      	cmp	r3, #0
 8010982:	d110      	bne.n	80109a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	015a      	lsls	r2, r3, #5
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	4413      	add	r3, r2
 801098c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	69ba      	ldr	r2, [r7, #24]
 8010994:	0151      	lsls	r1, r2, #5
 8010996:	69fa      	ldr	r2, [r7, #28]
 8010998:	440a      	add	r2, r1
 801099a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801099e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80109a2:	6013      	str	r3, [r2, #0]
 80109a4:	e00f      	b.n	80109c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80109a6:	69bb      	ldr	r3, [r7, #24]
 80109a8:	015a      	lsls	r2, r3, #5
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	4413      	add	r3, r2
 80109ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	69ba      	ldr	r2, [r7, #24]
 80109b6:	0151      	lsls	r1, r2, #5
 80109b8:	69fa      	ldr	r2, [r7, #28]
 80109ba:	440a      	add	r2, r1
 80109bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80109c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	68d9      	ldr	r1, [r3, #12]
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	781a      	ldrb	r2, [r3, #0]
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	695b      	ldr	r3, [r3, #20]
 80109d2:	b298      	uxth	r0, r3
 80109d4:	79fb      	ldrb	r3, [r7, #7]
 80109d6:	9300      	str	r3, [sp, #0]
 80109d8:	4603      	mov	r3, r0
 80109da:	68f8      	ldr	r0, [r7, #12]
 80109dc:	f000 fa38 	bl	8010e50 <USB_WritePacket>
 80109e0:	e0d2      	b.n	8010b88 <USB_EPStartXfer+0x480>
 80109e2:	bf00      	nop
 80109e4:	e007ffff 	.word	0xe007ffff
 80109e8:	fff80000 	.word	0xfff80000
 80109ec:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80109f0:	69bb      	ldr	r3, [r7, #24]
 80109f2:	015a      	lsls	r2, r3, #5
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	4413      	add	r3, r2
 80109f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109fc:	691a      	ldr	r2, [r3, #16]
 80109fe:	69bb      	ldr	r3, [r7, #24]
 8010a00:	0159      	lsls	r1, r3, #5
 8010a02:	69fb      	ldr	r3, [r7, #28]
 8010a04:	440b      	add	r3, r1
 8010a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	4b61      	ldr	r3, [pc, #388]	; (8010b94 <USB_EPStartXfer+0x48c>)
 8010a0e:	4013      	ands	r3, r2
 8010a10:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010a12:	69bb      	ldr	r3, [r7, #24]
 8010a14:	015a      	lsls	r2, r3, #5
 8010a16:	69fb      	ldr	r3, [r7, #28]
 8010a18:	4413      	add	r3, r2
 8010a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a1e:	691a      	ldr	r2, [r3, #16]
 8010a20:	69bb      	ldr	r3, [r7, #24]
 8010a22:	0159      	lsls	r1, r3, #5
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	440b      	add	r3, r1
 8010a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	4b5a      	ldr	r3, [pc, #360]	; (8010b98 <USB_EPStartXfer+0x490>)
 8010a30:	4013      	ands	r3, r2
 8010a32:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	695b      	ldr	r3, [r3, #20]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d123      	bne.n	8010a84 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	015a      	lsls	r2, r3, #5
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	4413      	add	r3, r2
 8010a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a48:	691a      	ldr	r2, [r3, #16]
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	689b      	ldr	r3, [r3, #8]
 8010a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a52:	69b9      	ldr	r1, [r7, #24]
 8010a54:	0148      	lsls	r0, r1, #5
 8010a56:	69f9      	ldr	r1, [r7, #28]
 8010a58:	4401      	add	r1, r0
 8010a5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	015a      	lsls	r2, r3, #5
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	4413      	add	r3, r2
 8010a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a6e:	691b      	ldr	r3, [r3, #16]
 8010a70:	69ba      	ldr	r2, [r7, #24]
 8010a72:	0151      	lsls	r1, r2, #5
 8010a74:	69fa      	ldr	r2, [r7, #28]
 8010a76:	440a      	add	r2, r1
 8010a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010a80:	6113      	str	r3, [r2, #16]
 8010a82:	e033      	b.n	8010aec <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	695a      	ldr	r2, [r3, #20]
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	1e5a      	subs	r2, r3, #1
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	689b      	ldr	r3, [r3, #8]
 8010a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a98:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010a9a:	69bb      	ldr	r3, [r7, #24]
 8010a9c:	015a      	lsls	r2, r3, #5
 8010a9e:	69fb      	ldr	r3, [r7, #28]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aa6:	691a      	ldr	r2, [r3, #16]
 8010aa8:	8afb      	ldrh	r3, [r7, #22]
 8010aaa:	04d9      	lsls	r1, r3, #19
 8010aac:	4b3b      	ldr	r3, [pc, #236]	; (8010b9c <USB_EPStartXfer+0x494>)
 8010aae:	400b      	ands	r3, r1
 8010ab0:	69b9      	ldr	r1, [r7, #24]
 8010ab2:	0148      	lsls	r0, r1, #5
 8010ab4:	69f9      	ldr	r1, [r7, #28]
 8010ab6:	4401      	add	r1, r0
 8010ab8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010abc:	4313      	orrs	r3, r2
 8010abe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010ac0:	69bb      	ldr	r3, [r7, #24]
 8010ac2:	015a      	lsls	r2, r3, #5
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	4413      	add	r3, r2
 8010ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010acc:	691a      	ldr	r2, [r3, #16]
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	689b      	ldr	r3, [r3, #8]
 8010ad2:	8af9      	ldrh	r1, [r7, #22]
 8010ad4:	fb01 f303 	mul.w	r3, r1, r3
 8010ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010adc:	69b9      	ldr	r1, [r7, #24]
 8010ade:	0148      	lsls	r0, r1, #5
 8010ae0:	69f9      	ldr	r1, [r7, #28]
 8010ae2:	4401      	add	r1, r0
 8010ae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010aec:	79fb      	ldrb	r3, [r7, #7]
 8010aee:	2b01      	cmp	r3, #1
 8010af0:	d10d      	bne.n	8010b0e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	68db      	ldr	r3, [r3, #12]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d009      	beq.n	8010b0e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	68d9      	ldr	r1, [r3, #12]
 8010afe:	69bb      	ldr	r3, [r7, #24]
 8010b00:	015a      	lsls	r2, r3, #5
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	4413      	add	r3, r2
 8010b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b0a:	460a      	mov	r2, r1
 8010b0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	78db      	ldrb	r3, [r3, #3]
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d128      	bne.n	8010b68 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010b16:	69fb      	ldr	r3, [r7, #28]
 8010b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d110      	bne.n	8010b48 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010b26:	69bb      	ldr	r3, [r7, #24]
 8010b28:	015a      	lsls	r2, r3, #5
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	4413      	add	r3, r2
 8010b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	69ba      	ldr	r2, [r7, #24]
 8010b36:	0151      	lsls	r1, r2, #5
 8010b38:	69fa      	ldr	r2, [r7, #28]
 8010b3a:	440a      	add	r2, r1
 8010b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010b44:	6013      	str	r3, [r2, #0]
 8010b46:	e00f      	b.n	8010b68 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010b48:	69bb      	ldr	r3, [r7, #24]
 8010b4a:	015a      	lsls	r2, r3, #5
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	4413      	add	r3, r2
 8010b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	69ba      	ldr	r2, [r7, #24]
 8010b58:	0151      	lsls	r1, r2, #5
 8010b5a:	69fa      	ldr	r2, [r7, #28]
 8010b5c:	440a      	add	r2, r1
 8010b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	015a      	lsls	r2, r3, #5
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	4413      	add	r3, r2
 8010b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	69ba      	ldr	r2, [r7, #24]
 8010b78:	0151      	lsls	r1, r2, #5
 8010b7a:	69fa      	ldr	r2, [r7, #28]
 8010b7c:	440a      	add	r2, r1
 8010b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010b86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b88:	2300      	movs	r3, #0
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3720      	adds	r7, #32
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	fff80000 	.word	0xfff80000
 8010b98:	e007ffff 	.word	0xe007ffff
 8010b9c:	1ff80000 	.word	0x1ff80000

08010ba0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b087      	sub	sp, #28
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	4613      	mov	r3, r2
 8010bac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	785b      	ldrb	r3, [r3, #1]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	f040 80cd 	bne.w	8010d5c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	695b      	ldr	r3, [r3, #20]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d132      	bne.n	8010c30 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	015a      	lsls	r2, r3, #5
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bd6:	691a      	ldr	r2, [r3, #16]
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	0159      	lsls	r1, r3, #5
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	440b      	add	r3, r1
 8010be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010be4:	4619      	mov	r1, r3
 8010be6:	4b98      	ldr	r3, [pc, #608]	; (8010e48 <USB_EP0StartXfer+0x2a8>)
 8010be8:	4013      	ands	r3, r2
 8010bea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	015a      	lsls	r2, r3, #5
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	4413      	add	r3, r2
 8010bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bf8:	691b      	ldr	r3, [r3, #16]
 8010bfa:	693a      	ldr	r2, [r7, #16]
 8010bfc:	0151      	lsls	r1, r2, #5
 8010bfe:	697a      	ldr	r2, [r7, #20]
 8010c00:	440a      	add	r2, r1
 8010c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010c0c:	693b      	ldr	r3, [r7, #16]
 8010c0e:	015a      	lsls	r2, r3, #5
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	4413      	add	r3, r2
 8010c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c18:	691a      	ldr	r2, [r3, #16]
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	0159      	lsls	r1, r3, #5
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	440b      	add	r3, r1
 8010c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c26:	4619      	mov	r1, r3
 8010c28:	4b88      	ldr	r3, [pc, #544]	; (8010e4c <USB_EP0StartXfer+0x2ac>)
 8010c2a:	4013      	ands	r3, r2
 8010c2c:	610b      	str	r3, [r1, #16]
 8010c2e:	e04e      	b.n	8010cce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	015a      	lsls	r2, r3, #5
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	4413      	add	r3, r2
 8010c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c3c:	691a      	ldr	r2, [r3, #16]
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	0159      	lsls	r1, r3, #5
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	440b      	add	r3, r1
 8010c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	4b7f      	ldr	r3, [pc, #508]	; (8010e4c <USB_EP0StartXfer+0x2ac>)
 8010c4e:	4013      	ands	r3, r2
 8010c50:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	015a      	lsls	r2, r3, #5
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	4413      	add	r3, r2
 8010c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c5e:	691a      	ldr	r2, [r3, #16]
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	0159      	lsls	r1, r3, #5
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	440b      	add	r3, r1
 8010c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	4b76      	ldr	r3, [pc, #472]	; (8010e48 <USB_EP0StartXfer+0x2a8>)
 8010c70:	4013      	ands	r3, r2
 8010c72:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	695a      	ldr	r2, [r3, #20]
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	689b      	ldr	r3, [r3, #8]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d903      	bls.n	8010c88 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	689a      	ldr	r2, [r3, #8]
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010c88:	693b      	ldr	r3, [r7, #16]
 8010c8a:	015a      	lsls	r2, r3, #5
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	4413      	add	r3, r2
 8010c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c94:	691b      	ldr	r3, [r3, #16]
 8010c96:	693a      	ldr	r2, [r7, #16]
 8010c98:	0151      	lsls	r1, r2, #5
 8010c9a:	697a      	ldr	r2, [r7, #20]
 8010c9c:	440a      	add	r2, r1
 8010c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ca2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	015a      	lsls	r2, r3, #5
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	4413      	add	r3, r2
 8010cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cb4:	691a      	ldr	r2, [r3, #16]
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	695b      	ldr	r3, [r3, #20]
 8010cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010cbe:	6939      	ldr	r1, [r7, #16]
 8010cc0:	0148      	lsls	r0, r1, #5
 8010cc2:	6979      	ldr	r1, [r7, #20]
 8010cc4:	4401      	add	r1, r0
 8010cc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010cca:	4313      	orrs	r3, r2
 8010ccc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010cce:	79fb      	ldrb	r3, [r7, #7]
 8010cd0:	2b01      	cmp	r3, #1
 8010cd2:	d11e      	bne.n	8010d12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	691b      	ldr	r3, [r3, #16]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d009      	beq.n	8010cf0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	015a      	lsls	r2, r3, #5
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	4413      	add	r3, r2
 8010ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ce8:	461a      	mov	r2, r3
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	691b      	ldr	r3, [r3, #16]
 8010cee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	015a      	lsls	r2, r3, #5
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	693a      	ldr	r2, [r7, #16]
 8010d00:	0151      	lsls	r1, r2, #5
 8010d02:	697a      	ldr	r2, [r7, #20]
 8010d04:	440a      	add	r2, r1
 8010d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d0e:	6013      	str	r3, [r2, #0]
 8010d10:	e092      	b.n	8010e38 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	015a      	lsls	r2, r3, #5
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	4413      	add	r3, r2
 8010d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	693a      	ldr	r2, [r7, #16]
 8010d22:	0151      	lsls	r1, r2, #5
 8010d24:	697a      	ldr	r2, [r7, #20]
 8010d26:	440a      	add	r2, r1
 8010d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	695b      	ldr	r3, [r3, #20]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d07e      	beq.n	8010e38 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	f003 030f 	and.w	r3, r3, #15
 8010d4a:	2101      	movs	r1, #1
 8010d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8010d50:	6979      	ldr	r1, [r7, #20]
 8010d52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d56:	4313      	orrs	r3, r2
 8010d58:	634b      	str	r3, [r1, #52]	; 0x34
 8010d5a:	e06d      	b.n	8010e38 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	015a      	lsls	r2, r3, #5
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	4413      	add	r3, r2
 8010d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d68:	691a      	ldr	r2, [r3, #16]
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	0159      	lsls	r1, r3, #5
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	440b      	add	r3, r1
 8010d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d76:	4619      	mov	r1, r3
 8010d78:	4b34      	ldr	r3, [pc, #208]	; (8010e4c <USB_EP0StartXfer+0x2ac>)
 8010d7a:	4013      	ands	r3, r2
 8010d7c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	015a      	lsls	r2, r3, #5
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	4413      	add	r3, r2
 8010d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d8a:	691a      	ldr	r2, [r3, #16]
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	0159      	lsls	r1, r3, #5
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	440b      	add	r3, r1
 8010d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d98:	4619      	mov	r1, r3
 8010d9a:	4b2b      	ldr	r3, [pc, #172]	; (8010e48 <USB_EP0StartXfer+0x2a8>)
 8010d9c:	4013      	ands	r3, r2
 8010d9e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	695b      	ldr	r3, [r3, #20]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d003      	beq.n	8010db0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	689a      	ldr	r2, [r3, #8]
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	015a      	lsls	r2, r3, #5
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	4413      	add	r3, r2
 8010db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dbc:	691b      	ldr	r3, [r3, #16]
 8010dbe:	693a      	ldr	r2, [r7, #16]
 8010dc0:	0151      	lsls	r1, r2, #5
 8010dc2:	697a      	ldr	r2, [r7, #20]
 8010dc4:	440a      	add	r2, r1
 8010dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010dce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	015a      	lsls	r2, r3, #5
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ddc:	691a      	ldr	r2, [r3, #16]
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	689b      	ldr	r3, [r3, #8]
 8010de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010de6:	6939      	ldr	r1, [r7, #16]
 8010de8:	0148      	lsls	r0, r1, #5
 8010dea:	6979      	ldr	r1, [r7, #20]
 8010dec:	4401      	add	r1, r0
 8010dee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010df2:	4313      	orrs	r3, r2
 8010df4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010df6:	79fb      	ldrb	r3, [r7, #7]
 8010df8:	2b01      	cmp	r3, #1
 8010dfa:	d10d      	bne.n	8010e18 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	68db      	ldr	r3, [r3, #12]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d009      	beq.n	8010e18 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	68d9      	ldr	r1, [r3, #12]
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	015a      	lsls	r2, r3, #5
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	4413      	add	r3, r2
 8010e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e14:	460a      	mov	r2, r1
 8010e16:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	015a      	lsls	r2, r3, #5
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	4413      	add	r3, r2
 8010e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	693a      	ldr	r2, [r7, #16]
 8010e28:	0151      	lsls	r1, r2, #5
 8010e2a:	697a      	ldr	r2, [r7, #20]
 8010e2c:	440a      	add	r2, r1
 8010e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010e36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010e38:	2300      	movs	r3, #0
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	371c      	adds	r7, #28
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr
 8010e46:	bf00      	nop
 8010e48:	e007ffff 	.word	0xe007ffff
 8010e4c:	fff80000 	.word	0xfff80000

08010e50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b089      	sub	sp, #36	; 0x24
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	4611      	mov	r1, r2
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	460b      	mov	r3, r1
 8010e60:	71fb      	strb	r3, [r7, #7]
 8010e62:	4613      	mov	r3, r2
 8010e64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010e6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d123      	bne.n	8010ebe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010e76:	88bb      	ldrh	r3, [r7, #4]
 8010e78:	3303      	adds	r3, #3
 8010e7a:	089b      	lsrs	r3, r3, #2
 8010e7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010e7e:	2300      	movs	r3, #0
 8010e80:	61bb      	str	r3, [r7, #24]
 8010e82:	e018      	b.n	8010eb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010e84:	79fb      	ldrb	r3, [r7, #7]
 8010e86:	031a      	lsls	r2, r3, #12
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	4413      	add	r3, r2
 8010e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e90:	461a      	mov	r2, r3
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010e9e:	69fb      	ldr	r3, [r7, #28]
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	3301      	adds	r3, #1
 8010eae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	61bb      	str	r3, [r7, #24]
 8010eb6:	69ba      	ldr	r2, [r7, #24]
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d3e2      	bcc.n	8010e84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3724      	adds	r7, #36	; 0x24
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b08b      	sub	sp, #44	; 0x2c
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010ee2:	88fb      	ldrh	r3, [r7, #6]
 8010ee4:	089b      	lsrs	r3, r3, #2
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010eea:	88fb      	ldrh	r3, [r7, #6]
 8010eec:	f003 0303 	and.w	r3, r3, #3
 8010ef0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	623b      	str	r3, [r7, #32]
 8010ef6:	e014      	b.n	8010f22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010ef8:	69bb      	ldr	r3, [r7, #24]
 8010efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f02:	601a      	str	r2, [r3, #0]
    pDest++;
 8010f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f06:	3301      	adds	r3, #1
 8010f08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f12:	3301      	adds	r3, #1
 8010f14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	3301      	adds	r3, #1
 8010f1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010f1c:	6a3b      	ldr	r3, [r7, #32]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	623b      	str	r3, [r7, #32]
 8010f22:	6a3a      	ldr	r2, [r7, #32]
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d3e6      	bcc.n	8010ef8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010f2a:	8bfb      	ldrh	r3, [r7, #30]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d01e      	beq.n	8010f6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010f30:	2300      	movs	r3, #0
 8010f32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	f107 0310 	add.w	r3, r7, #16
 8010f40:	6812      	ldr	r2, [r2, #0]
 8010f42:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010f44:	693a      	ldr	r2, [r7, #16]
 8010f46:	6a3b      	ldr	r3, [r7, #32]
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	00db      	lsls	r3, r3, #3
 8010f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8010f50:	b2da      	uxtb	r2, r3
 8010f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f54:	701a      	strb	r2, [r3, #0]
      i++;
 8010f56:	6a3b      	ldr	r3, [r7, #32]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8010f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5e:	3301      	adds	r3, #1
 8010f60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010f62:	8bfb      	ldrh	r3, [r7, #30]
 8010f64:	3b01      	subs	r3, #1
 8010f66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010f68:	8bfb      	ldrh	r3, [r7, #30]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d1ea      	bne.n	8010f44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	372c      	adds	r7, #44	; 0x2c
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr

08010f7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b085      	sub	sp, #20
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	785b      	ldrb	r3, [r3, #1]
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	d12c      	bne.n	8010ff2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	015a      	lsls	r2, r3, #5
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	db12      	blt.n	8010fd0 <USB_EPSetStall+0x54>
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00f      	beq.n	8010fd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	015a      	lsls	r2, r3, #5
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	4413      	add	r3, r2
 8010fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	68ba      	ldr	r2, [r7, #8]
 8010fc0:	0151      	lsls	r1, r2, #5
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	440a      	add	r2, r1
 8010fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010fce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	015a      	lsls	r2, r3, #5
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	4413      	add	r3, r2
 8010fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	68ba      	ldr	r2, [r7, #8]
 8010fe0:	0151      	lsls	r1, r2, #5
 8010fe2:	68fa      	ldr	r2, [r7, #12]
 8010fe4:	440a      	add	r2, r1
 8010fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010fea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010fee:	6013      	str	r3, [r2, #0]
 8010ff0:	e02b      	b.n	801104a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	015a      	lsls	r2, r3, #5
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	4413      	add	r3, r2
 8010ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	db12      	blt.n	801102a <USB_EPSetStall+0xae>
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d00f      	beq.n	801102a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	015a      	lsls	r2, r3, #5
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	4413      	add	r3, r2
 8011012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	68ba      	ldr	r2, [r7, #8]
 801101a:	0151      	lsls	r1, r2, #5
 801101c:	68fa      	ldr	r2, [r7, #12]
 801101e:	440a      	add	r2, r1
 8011020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011024:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011028:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	015a      	lsls	r2, r3, #5
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	4413      	add	r3, r2
 8011032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	68ba      	ldr	r2, [r7, #8]
 801103a:	0151      	lsls	r1, r2, #5
 801103c:	68fa      	ldr	r2, [r7, #12]
 801103e:	440a      	add	r2, r1
 8011040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011048:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801104a:	2300      	movs	r3, #0
}
 801104c:	4618      	mov	r0, r3
 801104e:	3714      	adds	r7, #20
 8011050:	46bd      	mov	sp, r7
 8011052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011056:	4770      	bx	lr

08011058 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011058:	b480      	push	{r7}
 801105a:	b085      	sub	sp, #20
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	785b      	ldrb	r3, [r3, #1]
 8011070:	2b01      	cmp	r3, #1
 8011072:	d128      	bne.n	80110c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	015a      	lsls	r2, r3, #5
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	4413      	add	r3, r2
 801107c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	68ba      	ldr	r2, [r7, #8]
 8011084:	0151      	lsls	r1, r2, #5
 8011086:	68fa      	ldr	r2, [r7, #12]
 8011088:	440a      	add	r2, r1
 801108a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801108e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011092:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	78db      	ldrb	r3, [r3, #3]
 8011098:	2b03      	cmp	r3, #3
 801109a:	d003      	beq.n	80110a4 <USB_EPClearStall+0x4c>
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	78db      	ldrb	r3, [r3, #3]
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d138      	bne.n	8011116 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	015a      	lsls	r2, r3, #5
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	4413      	add	r3, r2
 80110ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	68ba      	ldr	r2, [r7, #8]
 80110b4:	0151      	lsls	r1, r2, #5
 80110b6:	68fa      	ldr	r2, [r7, #12]
 80110b8:	440a      	add	r2, r1
 80110ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80110c2:	6013      	str	r3, [r2, #0]
 80110c4:	e027      	b.n	8011116 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	015a      	lsls	r2, r3, #5
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	4413      	add	r3, r2
 80110ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68ba      	ldr	r2, [r7, #8]
 80110d6:	0151      	lsls	r1, r2, #5
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	440a      	add	r2, r1
 80110dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80110e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	78db      	ldrb	r3, [r3, #3]
 80110ea:	2b03      	cmp	r3, #3
 80110ec:	d003      	beq.n	80110f6 <USB_EPClearStall+0x9e>
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	78db      	ldrb	r3, [r3, #3]
 80110f2:	2b02      	cmp	r3, #2
 80110f4:	d10f      	bne.n	8011116 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	015a      	lsls	r2, r3, #5
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	4413      	add	r3, r2
 80110fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	68ba      	ldr	r2, [r7, #8]
 8011106:	0151      	lsls	r1, r2, #5
 8011108:	68fa      	ldr	r2, [r7, #12]
 801110a:	440a      	add	r2, r1
 801110c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011114:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011116:	2300      	movs	r3, #0
}
 8011118:	4618      	mov	r0, r3
 801111a:	3714      	adds	r7, #20
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr

08011124 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011124:	b480      	push	{r7}
 8011126:	b085      	sub	sp, #20
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	460b      	mov	r3, r1
 801112e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	68fa      	ldr	r2, [r7, #12]
 801113e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011142:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011146:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	78fb      	ldrb	r3, [r7, #3]
 8011152:	011b      	lsls	r3, r3, #4
 8011154:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011158:	68f9      	ldr	r1, [r7, #12]
 801115a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801115e:	4313      	orrs	r3, r2
 8011160:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011162:	2300      	movs	r3, #0
}
 8011164:	4618      	mov	r0, r3
 8011166:	3714      	adds	r7, #20
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr

08011170 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011170:	b480      	push	{r7}
 8011172:	b085      	sub	sp, #20
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	68fa      	ldr	r2, [r7, #12]
 8011186:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801118a:	f023 0303 	bic.w	r3, r3, #3
 801118e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801119e:	f023 0302 	bic.w	r3, r3, #2
 80111a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3714      	adds	r7, #20
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr

080111b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80111b2:	b480      	push	{r7}
 80111b4:	b085      	sub	sp, #20
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	68fa      	ldr	r2, [r7, #12]
 80111c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80111cc:	f023 0303 	bic.w	r3, r3, #3
 80111d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	68fa      	ldr	r2, [r7, #12]
 80111dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80111e0:	f043 0302 	orr.w	r3, r3, #2
 80111e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80111e6:	2300      	movs	r3, #0
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3714      	adds	r7, #20
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr

080111f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	695b      	ldr	r3, [r3, #20]
 8011200:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	699b      	ldr	r3, [r3, #24]
 8011206:	68fa      	ldr	r2, [r7, #12]
 8011208:	4013      	ands	r3, r2
 801120a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801120c:	68fb      	ldr	r3, [r7, #12]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3714      	adds	r7, #20
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr

0801121a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801121a:	b480      	push	{r7}
 801121c:	b085      	sub	sp, #20
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801122c:	699b      	ldr	r3, [r3, #24]
 801122e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011236:	69db      	ldr	r3, [r3, #28]
 8011238:	68ba      	ldr	r2, [r7, #8]
 801123a:	4013      	ands	r3, r2
 801123c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	0c1b      	lsrs	r3, r3, #16
}
 8011242:	4618      	mov	r0, r3
 8011244:	3714      	adds	r7, #20
 8011246:	46bd      	mov	sp, r7
 8011248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124c:	4770      	bx	lr

0801124e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801124e:	b480      	push	{r7}
 8011250:	b085      	sub	sp, #20
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011260:	699b      	ldr	r3, [r3, #24]
 8011262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801126a:	69db      	ldr	r3, [r3, #28]
 801126c:	68ba      	ldr	r2, [r7, #8]
 801126e:	4013      	ands	r3, r2
 8011270:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	b29b      	uxth	r3, r3
}
 8011276:	4618      	mov	r0, r3
 8011278:	3714      	adds	r7, #20
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr

08011282 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011282:	b480      	push	{r7}
 8011284:	b085      	sub	sp, #20
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]
 801128a:	460b      	mov	r3, r1
 801128c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011292:	78fb      	ldrb	r3, [r7, #3]
 8011294:	015a      	lsls	r2, r3, #5
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	4413      	add	r3, r2
 801129a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112a8:	695b      	ldr	r3, [r3, #20]
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	4013      	ands	r3, r2
 80112ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80112b0:	68bb      	ldr	r3, [r7, #8]
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3714      	adds	r7, #20
 80112b6:	46bd      	mov	sp, r7
 80112b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112bc:	4770      	bx	lr

080112be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80112be:	b480      	push	{r7}
 80112c0:	b087      	sub	sp, #28
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]
 80112c6:	460b      	mov	r3, r1
 80112c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112d4:	691b      	ldr	r3, [r3, #16]
 80112d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80112e2:	78fb      	ldrb	r3, [r7, #3]
 80112e4:	f003 030f 	and.w	r3, r3, #15
 80112e8:	68fa      	ldr	r2, [r7, #12]
 80112ea:	fa22 f303 	lsr.w	r3, r2, r3
 80112ee:	01db      	lsls	r3, r3, #7
 80112f0:	b2db      	uxtb	r3, r3
 80112f2:	693a      	ldr	r2, [r7, #16]
 80112f4:	4313      	orrs	r3, r2
 80112f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80112f8:	78fb      	ldrb	r3, [r7, #3]
 80112fa:	015a      	lsls	r2, r3, #5
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	4413      	add	r3, r2
 8011300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011304:	689b      	ldr	r3, [r3, #8]
 8011306:	693a      	ldr	r2, [r7, #16]
 8011308:	4013      	ands	r3, r2
 801130a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801130c:	68bb      	ldr	r3, [r7, #8]
}
 801130e:	4618      	mov	r0, r3
 8011310:	371c      	adds	r7, #28
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr

0801131a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801131a:	b480      	push	{r7}
 801131c:	b083      	sub	sp, #12
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	695b      	ldr	r3, [r3, #20]
 8011326:	f003 0301 	and.w	r3, r3, #1
}
 801132a:	4618      	mov	r0, r3
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
	...

08011338 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011338:	b480      	push	{r7}
 801133a:	b085      	sub	sp, #20
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801134a:	681a      	ldr	r2, [r3, #0]
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011352:	4619      	mov	r1, r3
 8011354:	4b09      	ldr	r3, [pc, #36]	; (801137c <USB_ActivateSetup+0x44>)
 8011356:	4013      	ands	r3, r2
 8011358:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801136c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801136e:	2300      	movs	r3, #0
}
 8011370:	4618      	mov	r0, r3
 8011372:	3714      	adds	r7, #20
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr
 801137c:	fffff800 	.word	0xfffff800

08011380 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011380:	b480      	push	{r7}
 8011382:	b087      	sub	sp, #28
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	460b      	mov	r3, r1
 801138a:	607a      	str	r2, [r7, #4]
 801138c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	333c      	adds	r3, #60	; 0x3c
 8011396:	3304      	adds	r3, #4
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	4a26      	ldr	r2, [pc, #152]	; (8011438 <USB_EP0_OutStart+0xb8>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d90a      	bls.n	80113ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80113b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113b4:	d101      	bne.n	80113ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80113b6:	2300      	movs	r3, #0
 80113b8:	e037      	b.n	801142a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113c0:	461a      	mov	r2, r3
 80113c2:	2300      	movs	r3, #0
 80113c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113cc:	691b      	ldr	r3, [r3, #16]
 80113ce:	697a      	ldr	r2, [r7, #20]
 80113d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80113d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113e0:	691b      	ldr	r3, [r3, #16]
 80113e2:	697a      	ldr	r2, [r7, #20]
 80113e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113e8:	f043 0318 	orr.w	r3, r3, #24
 80113ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113f4:	691b      	ldr	r3, [r3, #16]
 80113f6:	697a      	ldr	r2, [r7, #20]
 80113f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011400:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011402:	7afb      	ldrb	r3, [r7, #11]
 8011404:	2b01      	cmp	r3, #1
 8011406:	d10f      	bne.n	8011428 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801140e:	461a      	mov	r2, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	697a      	ldr	r2, [r7, #20]
 801141e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011422:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011426:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011428:	2300      	movs	r3, #0
}
 801142a:	4618      	mov	r0, r3
 801142c:	371c      	adds	r7, #28
 801142e:	46bd      	mov	sp, r7
 8011430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011434:	4770      	bx	lr
 8011436:	bf00      	nop
 8011438:	4f54300a 	.word	0x4f54300a

0801143c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801143c:	b480      	push	{r7}
 801143e:	b085      	sub	sp, #20
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011444:	2300      	movs	r3, #0
 8011446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	3301      	adds	r3, #1
 801144c:	60fb      	str	r3, [r7, #12]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	4a13      	ldr	r2, [pc, #76]	; (80114a0 <USB_CoreReset+0x64>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d901      	bls.n	801145a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011456:	2303      	movs	r3, #3
 8011458:	e01b      	b.n	8011492 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	691b      	ldr	r3, [r3, #16]
 801145e:	2b00      	cmp	r3, #0
 8011460:	daf2      	bge.n	8011448 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011462:	2300      	movs	r3, #0
 8011464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	691b      	ldr	r3, [r3, #16]
 801146a:	f043 0201 	orr.w	r2, r3, #1
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	3301      	adds	r3, #1
 8011476:	60fb      	str	r3, [r7, #12]
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	4a09      	ldr	r2, [pc, #36]	; (80114a0 <USB_CoreReset+0x64>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d901      	bls.n	8011484 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011480:	2303      	movs	r3, #3
 8011482:	e006      	b.n	8011492 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	691b      	ldr	r3, [r3, #16]
 8011488:	f003 0301 	and.w	r3, r3, #1
 801148c:	2b01      	cmp	r3, #1
 801148e:	d0f0      	beq.n	8011472 <USB_CoreReset+0x36>

  return HAL_OK;
 8011490:	2300      	movs	r3, #0
}
 8011492:	4618      	mov	r0, r3
 8011494:	3714      	adds	r7, #20
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr
 801149e:	bf00      	nop
 80114a0:	00030d40 	.word	0x00030d40

080114a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b084      	sub	sp, #16
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	460b      	mov	r3, r1
 80114ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80114b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80114b4:	f003 fcfe 	bl	8014eb4 <USBD_static_malloc>
 80114b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d105      	bne.n	80114cc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80114c8:	2302      	movs	r3, #2
 80114ca:	e066      	b.n	801159a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	68fa      	ldr	r2, [r7, #12]
 80114d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	7c1b      	ldrb	r3, [r3, #16]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d119      	bne.n	8011510 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80114dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114e0:	2202      	movs	r2, #2
 80114e2:	2181      	movs	r1, #129	; 0x81
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f003 fbc2 	bl	8014c6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2201      	movs	r2, #1
 80114ee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80114f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114f4:	2202      	movs	r2, #2
 80114f6:	2101      	movs	r1, #1
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f003 fbb8 	bl	8014c6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2201      	movs	r2, #1
 8011502:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2210      	movs	r2, #16
 801150a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801150e:	e016      	b.n	801153e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011510:	2340      	movs	r3, #64	; 0x40
 8011512:	2202      	movs	r2, #2
 8011514:	2181      	movs	r1, #129	; 0x81
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f003 fba9 	bl	8014c6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2201      	movs	r2, #1
 8011520:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011522:	2340      	movs	r3, #64	; 0x40
 8011524:	2202      	movs	r2, #2
 8011526:	2101      	movs	r1, #1
 8011528:	6878      	ldr	r0, [r7, #4]
 801152a:	f003 fba0 	bl	8014c6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2201      	movs	r2, #1
 8011532:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2210      	movs	r2, #16
 801153a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801153e:	2308      	movs	r3, #8
 8011540:	2203      	movs	r2, #3
 8011542:	2182      	movs	r1, #130	; 0x82
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f003 fb92 	bl	8014c6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2201      	movs	r2, #1
 801154e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2200      	movs	r2, #0
 8011560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2200      	movs	r2, #0
 8011568:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	7c1b      	ldrb	r3, [r3, #16]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d109      	bne.n	8011588 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801157a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801157e:	2101      	movs	r1, #1
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f003 fc63 	bl	8014e4c <USBD_LL_PrepareReceive>
 8011586:	e007      	b.n	8011598 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801158e:	2340      	movs	r3, #64	; 0x40
 8011590:	2101      	movs	r1, #1
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f003 fc5a 	bl	8014e4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011598:	2300      	movs	r3, #0
}
 801159a:	4618      	mov	r0, r3
 801159c:	3710      	adds	r7, #16
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}

080115a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115a2:	b580      	push	{r7, lr}
 80115a4:	b082      	sub	sp, #8
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
 80115aa:	460b      	mov	r3, r1
 80115ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80115ae:	2181      	movs	r1, #129	; 0x81
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f003 fb82 	bl	8014cba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2200      	movs	r2, #0
 80115ba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80115bc:	2101      	movs	r1, #1
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f003 fb7b 	bl	8014cba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2200      	movs	r2, #0
 80115c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80115cc:	2182      	movs	r1, #130	; 0x82
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f003 fb73 	bl	8014cba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2200      	movs	r2, #0
 80115d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d00e      	beq.n	801160c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115fe:	4618      	mov	r0, r3
 8011600:	f003 fc66 	bl	8014ed0 <USBD_static_free>
    pdev->pClassData = NULL;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2200      	movs	r2, #0
 8011608:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801160c:	2300      	movs	r3, #0
}
 801160e:	4618      	mov	r0, r3
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
	...

08011618 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b086      	sub	sp, #24
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011628:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801162a:	2300      	movs	r3, #0
 801162c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801162e:	2300      	movs	r3, #0
 8011630:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011632:	2300      	movs	r3, #0
 8011634:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d101      	bne.n	8011640 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801163c:	2303      	movs	r3, #3
 801163e:	e0af      	b.n	80117a0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011648:	2b00      	cmp	r3, #0
 801164a:	d03f      	beq.n	80116cc <USBD_CDC_Setup+0xb4>
 801164c:	2b20      	cmp	r3, #32
 801164e:	f040 809f 	bne.w	8011790 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	88db      	ldrh	r3, [r3, #6]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d02e      	beq.n	80116b8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	b25b      	sxtb	r3, r3
 8011660:	2b00      	cmp	r3, #0
 8011662:	da16      	bge.n	8011692 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801166a:	689b      	ldr	r3, [r3, #8]
 801166c:	683a      	ldr	r2, [r7, #0]
 801166e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011670:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011672:	683a      	ldr	r2, [r7, #0]
 8011674:	88d2      	ldrh	r2, [r2, #6]
 8011676:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	88db      	ldrh	r3, [r3, #6]
 801167c:	2b07      	cmp	r3, #7
 801167e:	bf28      	it	cs
 8011680:	2307      	movcs	r3, #7
 8011682:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	89fa      	ldrh	r2, [r7, #14]
 8011688:	4619      	mov	r1, r3
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f001 fb19 	bl	8012cc2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8011690:	e085      	b.n	801179e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	785a      	ldrb	r2, [r3, #1]
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	88db      	ldrh	r3, [r3, #6]
 80116a0:	b2da      	uxtb	r2, r3
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80116a8:	6939      	ldr	r1, [r7, #16]
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	88db      	ldrh	r3, [r3, #6]
 80116ae:	461a      	mov	r2, r3
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f001 fb32 	bl	8012d1a <USBD_CtlPrepareRx>
      break;
 80116b6:	e072      	b.n	801179e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80116be:	689b      	ldr	r3, [r3, #8]
 80116c0:	683a      	ldr	r2, [r7, #0]
 80116c2:	7850      	ldrb	r0, [r2, #1]
 80116c4:	2200      	movs	r2, #0
 80116c6:	6839      	ldr	r1, [r7, #0]
 80116c8:	4798      	blx	r3
      break;
 80116ca:	e068      	b.n	801179e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	785b      	ldrb	r3, [r3, #1]
 80116d0:	2b0b      	cmp	r3, #11
 80116d2:	d852      	bhi.n	801177a <USBD_CDC_Setup+0x162>
 80116d4:	a201      	add	r2, pc, #4	; (adr r2, 80116dc <USBD_CDC_Setup+0xc4>)
 80116d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116da:	bf00      	nop
 80116dc:	0801170d 	.word	0x0801170d
 80116e0:	08011789 	.word	0x08011789
 80116e4:	0801177b 	.word	0x0801177b
 80116e8:	0801177b 	.word	0x0801177b
 80116ec:	0801177b 	.word	0x0801177b
 80116f0:	0801177b 	.word	0x0801177b
 80116f4:	0801177b 	.word	0x0801177b
 80116f8:	0801177b 	.word	0x0801177b
 80116fc:	0801177b 	.word	0x0801177b
 8011700:	0801177b 	.word	0x0801177b
 8011704:	08011737 	.word	0x08011737
 8011708:	08011761 	.word	0x08011761
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011712:	b2db      	uxtb	r3, r3
 8011714:	2b03      	cmp	r3, #3
 8011716:	d107      	bne.n	8011728 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011718:	f107 030a 	add.w	r3, r7, #10
 801171c:	2202      	movs	r2, #2
 801171e:	4619      	mov	r1, r3
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f001 face 	bl	8012cc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011726:	e032      	b.n	801178e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011728:	6839      	ldr	r1, [r7, #0]
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f001 fa58 	bl	8012be0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011730:	2303      	movs	r3, #3
 8011732:	75fb      	strb	r3, [r7, #23]
          break;
 8011734:	e02b      	b.n	801178e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801173c:	b2db      	uxtb	r3, r3
 801173e:	2b03      	cmp	r3, #3
 8011740:	d107      	bne.n	8011752 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011742:	f107 030d 	add.w	r3, r7, #13
 8011746:	2201      	movs	r2, #1
 8011748:	4619      	mov	r1, r3
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f001 fab9 	bl	8012cc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011750:	e01d      	b.n	801178e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011752:	6839      	ldr	r1, [r7, #0]
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f001 fa43 	bl	8012be0 <USBD_CtlError>
            ret = USBD_FAIL;
 801175a:	2303      	movs	r3, #3
 801175c:	75fb      	strb	r3, [r7, #23]
          break;
 801175e:	e016      	b.n	801178e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011766:	b2db      	uxtb	r3, r3
 8011768:	2b03      	cmp	r3, #3
 801176a:	d00f      	beq.n	801178c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801176c:	6839      	ldr	r1, [r7, #0]
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f001 fa36 	bl	8012be0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011774:	2303      	movs	r3, #3
 8011776:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011778:	e008      	b.n	801178c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801177a:	6839      	ldr	r1, [r7, #0]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f001 fa2f 	bl	8012be0 <USBD_CtlError>
          ret = USBD_FAIL;
 8011782:	2303      	movs	r3, #3
 8011784:	75fb      	strb	r3, [r7, #23]
          break;
 8011786:	e002      	b.n	801178e <USBD_CDC_Setup+0x176>
          break;
 8011788:	bf00      	nop
 801178a:	e008      	b.n	801179e <USBD_CDC_Setup+0x186>
          break;
 801178c:	bf00      	nop
      }
      break;
 801178e:	e006      	b.n	801179e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011790:	6839      	ldr	r1, [r7, #0]
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f001 fa24 	bl	8012be0 <USBD_CtlError>
      ret = USBD_FAIL;
 8011798:	2303      	movs	r3, #3
 801179a:	75fb      	strb	r3, [r7, #23]
      break;
 801179c:	bf00      	nop
  }

  return (uint8_t)ret;
 801179e:	7dfb      	ldrb	r3, [r7, #23]
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3718      	adds	r7, #24
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}

080117a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b084      	sub	sp, #16
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	460b      	mov	r3, r1
 80117b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80117ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d101      	bne.n	80117ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80117c6:	2303      	movs	r3, #3
 80117c8:	e04f      	b.n	801186a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80117d2:	78fa      	ldrb	r2, [r7, #3]
 80117d4:	6879      	ldr	r1, [r7, #4]
 80117d6:	4613      	mov	r3, r2
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	4413      	add	r3, r2
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	440b      	add	r3, r1
 80117e0:	3318      	adds	r3, #24
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d029      	beq.n	801183c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80117e8:	78fa      	ldrb	r2, [r7, #3]
 80117ea:	6879      	ldr	r1, [r7, #4]
 80117ec:	4613      	mov	r3, r2
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	4413      	add	r3, r2
 80117f2:	009b      	lsls	r3, r3, #2
 80117f4:	440b      	add	r3, r1
 80117f6:	3318      	adds	r3, #24
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	78f9      	ldrb	r1, [r7, #3]
 80117fc:	68f8      	ldr	r0, [r7, #12]
 80117fe:	460b      	mov	r3, r1
 8011800:	00db      	lsls	r3, r3, #3
 8011802:	1a5b      	subs	r3, r3, r1
 8011804:	009b      	lsls	r3, r3, #2
 8011806:	4403      	add	r3, r0
 8011808:	3344      	adds	r3, #68	; 0x44
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011810:	fb03 f301 	mul.w	r3, r3, r1
 8011814:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011816:	2b00      	cmp	r3, #0
 8011818:	d110      	bne.n	801183c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801181a:	78fa      	ldrb	r2, [r7, #3]
 801181c:	6879      	ldr	r1, [r7, #4]
 801181e:	4613      	mov	r3, r2
 8011820:	009b      	lsls	r3, r3, #2
 8011822:	4413      	add	r3, r2
 8011824:	009b      	lsls	r3, r3, #2
 8011826:	440b      	add	r3, r1
 8011828:	3318      	adds	r3, #24
 801182a:	2200      	movs	r2, #0
 801182c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801182e:	78f9      	ldrb	r1, [r7, #3]
 8011830:	2300      	movs	r3, #0
 8011832:	2200      	movs	r2, #0
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f003 fae8 	bl	8014e0a <USBD_LL_Transmit>
 801183a:	e015      	b.n	8011868 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	2200      	movs	r2, #0
 8011840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d00b      	beq.n	8011868 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011856:	691b      	ldr	r3, [r3, #16]
 8011858:	68ba      	ldr	r2, [r7, #8]
 801185a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801185e:	68ba      	ldr	r2, [r7, #8]
 8011860:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011864:	78fa      	ldrb	r2, [r7, #3]
 8011866:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011868:	2300      	movs	r3, #0
}
 801186a:	4618      	mov	r0, r3
 801186c:	3710      	adds	r7, #16
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}

08011872 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011872:	b580      	push	{r7, lr}
 8011874:	b084      	sub	sp, #16
 8011876:	af00      	add	r7, sp, #0
 8011878:	6078      	str	r0, [r7, #4]
 801187a:	460b      	mov	r3, r1
 801187c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011884:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801188c:	2b00      	cmp	r3, #0
 801188e:	d101      	bne.n	8011894 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011890:	2303      	movs	r3, #3
 8011892:	e015      	b.n	80118c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011894:	78fb      	ldrb	r3, [r7, #3]
 8011896:	4619      	mov	r1, r3
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f003 faf8 	bl	8014e8e <USBD_LL_GetRxDataSize>
 801189e:	4602      	mov	r2, r0
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118ac:	68db      	ldr	r3, [r3, #12]
 80118ae:	68fa      	ldr	r2, [r7, #12]
 80118b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80118b4:	68fa      	ldr	r2, [r7, #12]
 80118b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80118ba:	4611      	mov	r1, r2
 80118bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3710      	adds	r7, #16
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d101      	bne.n	80118e2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80118de:	2303      	movs	r3, #3
 80118e0:	e01b      	b.n	801191a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d015      	beq.n	8011918 <USBD_CDC_EP0_RxReady+0x50>
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80118f2:	2bff      	cmp	r3, #255	; 0xff
 80118f4:	d010      	beq.n	8011918 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118fc:	689b      	ldr	r3, [r3, #8]
 80118fe:	68fa      	ldr	r2, [r7, #12]
 8011900:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011904:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011906:	68fa      	ldr	r2, [r7, #12]
 8011908:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801190c:	b292      	uxth	r2, r2
 801190e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	22ff      	movs	r2, #255	; 0xff
 8011914:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011918:	2300      	movs	r3, #0
}
 801191a:	4618      	mov	r0, r3
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
	...

08011924 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011924:	b480      	push	{r7}
 8011926:	b083      	sub	sp, #12
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2243      	movs	r2, #67	; 0x43
 8011930:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011932:	4b03      	ldr	r3, [pc, #12]	; (8011940 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011934:	4618      	mov	r0, r3
 8011936:	370c      	adds	r7, #12
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr
 8011940:	2400016c 	.word	0x2400016c

08011944 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011944:	b480      	push	{r7}
 8011946:	b083      	sub	sp, #12
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2243      	movs	r2, #67	; 0x43
 8011950:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011952:	4b03      	ldr	r3, [pc, #12]	; (8011960 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011954:	4618      	mov	r0, r3
 8011956:	370c      	adds	r7, #12
 8011958:	46bd      	mov	sp, r7
 801195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195e:	4770      	bx	lr
 8011960:	24000128 	.word	0x24000128

08011964 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011964:	b480      	push	{r7}
 8011966:	b083      	sub	sp, #12
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2243      	movs	r2, #67	; 0x43
 8011970:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011972:	4b03      	ldr	r3, [pc, #12]	; (8011980 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011974:	4618      	mov	r0, r3
 8011976:	370c      	adds	r7, #12
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr
 8011980:	240001b0 	.word	0x240001b0

08011984 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011984:	b480      	push	{r7}
 8011986:	b083      	sub	sp, #12
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	220a      	movs	r2, #10
 8011990:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011992:	4b03      	ldr	r3, [pc, #12]	; (80119a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011994:	4618      	mov	r0, r3
 8011996:	370c      	adds	r7, #12
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr
 80119a0:	240000e4 	.word	0x240000e4

080119a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80119a4:	b480      	push	{r7}
 80119a6:	b083      	sub	sp, #12
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d101      	bne.n	80119b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80119b4:	2303      	movs	r3, #3
 80119b6:	e004      	b.n	80119c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	683a      	ldr	r2, [r7, #0]
 80119bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80119c0:	2300      	movs	r3, #0
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	370c      	adds	r7, #12
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr

080119ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80119ce:	b480      	push	{r7}
 80119d0:	b087      	sub	sp, #28
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	60f8      	str	r0, [r7, #12]
 80119d6:	60b9      	str	r1, [r7, #8]
 80119d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119e0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d101      	bne.n	80119ec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80119e8:	2303      	movs	r3, #3
 80119ea:	e008      	b.n	80119fe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	68ba      	ldr	r2, [r7, #8]
 80119f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	687a      	ldr	r2, [r7, #4]
 80119f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80119fc:	2300      	movs	r3, #0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	371c      	adds	r7, #28
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr

08011a0a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011a0a:	b480      	push	{r7}
 8011a0c:	b085      	sub	sp, #20
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
 8011a12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d101      	bne.n	8011a26 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011a22:	2303      	movs	r3, #3
 8011a24:	e004      	b.n	8011a30 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	683a      	ldr	r2, [r7, #0]
 8011a2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011a2e:	2300      	movs	r3, #0
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3714      	adds	r7, #20
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d101      	bne.n	8011a5e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011a5a:	2303      	movs	r3, #3
 8011a5c:	e01a      	b.n	8011a94 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d114      	bne.n	8011a92 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	2201      	movs	r2, #1
 8011a6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011a86:	2181      	movs	r1, #129	; 0x81
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f003 f9be 	bl	8014e0a <USBD_LL_Transmit>

    ret = USBD_OK;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3710      	adds	r7, #16
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b084      	sub	sp, #16
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011aaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d101      	bne.n	8011aba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011ab6:	2303      	movs	r3, #3
 8011ab8:	e016      	b.n	8011ae8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	7c1b      	ldrb	r3, [r3, #16]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d109      	bne.n	8011ad6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011acc:	2101      	movs	r1, #1
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f003 f9bc 	bl	8014e4c <USBD_LL_PrepareReceive>
 8011ad4:	e007      	b.n	8011ae6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011adc:	2340      	movs	r3, #64	; 0x40
 8011ade:	2101      	movs	r1, #1
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f003 f9b3 	bl	8014e4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011ae6:	2300      	movs	r3, #0
}
 8011ae8:	4618      	mov	r0, r3
 8011aea:	3710      	adds	r7, #16
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b086      	sub	sp, #24
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	4613      	mov	r3, r2
 8011afc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d101      	bne.n	8011b08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011b04:	2303      	movs	r3, #3
 8011b06:	e01f      	b.n	8011b48 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2200      	movs	r2, #0
 8011b14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d003      	beq.n	8011b2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	68ba      	ldr	r2, [r7, #8]
 8011b2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2201      	movs	r2, #1
 8011b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	79fa      	ldrb	r2, [r7, #7]
 8011b3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f003 f82b 	bl	8014b98 <USBD_LL_Init>
 8011b42:	4603      	mov	r3, r0
 8011b44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3718      	adds	r7, #24
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d101      	bne.n	8011b68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011b64:	2303      	movs	r3, #3
 8011b66:	e016      	b.n	8011b96 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	683a      	ldr	r2, [r7, #0]
 8011b6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d00b      	beq.n	8011b94 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b84:	f107 020e 	add.w	r2, r7, #14
 8011b88:	4610      	mov	r0, r2
 8011b8a:	4798      	blx	r3
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011b94:	2300      	movs	r3, #0
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3710      	adds	r7, #16
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f003 f846 	bl	8014c38 <USBD_LL_Start>
 8011bac:	4603      	mov	r3, r0
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3708      	adds	r7, #8
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011bb6:	b480      	push	{r7}
 8011bb8:	b083      	sub	sp, #12
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011bbe:	2300      	movs	r3, #0
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011bd8:	2303      	movs	r3, #3
 8011bda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d009      	beq.n	8011bfa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	78fa      	ldrb	r2, [r7, #3]
 8011bf0:	4611      	mov	r1, r2
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	4798      	blx	r3
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3710      	adds	r7, #16
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d007      	beq.n	8011c2a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	78fa      	ldrb	r2, [r7, #3]
 8011c24:	4611      	mov	r1, r2
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	4798      	blx	r3
  }

  return USBD_OK;
 8011c2a:	2300      	movs	r3, #0
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3708      	adds	r7, #8
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c44:	6839      	ldr	r1, [r7, #0]
 8011c46:	4618      	mov	r0, r3
 8011c48:	f000 ff90 	bl	8012b6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2201      	movs	r2, #1
 8011c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c68:	f003 031f 	and.w	r3, r3, #31
 8011c6c:	2b02      	cmp	r3, #2
 8011c6e:	d01a      	beq.n	8011ca6 <USBD_LL_SetupStage+0x72>
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d822      	bhi.n	8011cba <USBD_LL_SetupStage+0x86>
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d002      	beq.n	8011c7e <USBD_LL_SetupStage+0x4a>
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d00a      	beq.n	8011c92 <USBD_LL_SetupStage+0x5e>
 8011c7c:	e01d      	b.n	8011cba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c84:	4619      	mov	r1, r3
 8011c86:	6878      	ldr	r0, [r7, #4]
 8011c88:	f000 fa62 	bl	8012150 <USBD_StdDevReq>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8011c90:	e020      	b.n	8011cd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c98:	4619      	mov	r1, r3
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f000 fac6 	bl	801222c <USBD_StdItfReq>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8011ca4:	e016      	b.n	8011cd4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011cac:	4619      	mov	r1, r3
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f000 fb05 	bl	80122be <USBD_StdEPReq>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8011cb8:	e00c      	b.n	8011cd4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011cc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f003 f815 	bl	8014cf8 <USBD_LL_StallEP>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8011cd2:	bf00      	nop
  }

  return ret;
 8011cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3710      	adds	r7, #16
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}

08011cde <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b086      	sub	sp, #24
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	60f8      	str	r0, [r7, #12]
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	607a      	str	r2, [r7, #4]
 8011cea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011cec:	7afb      	ldrb	r3, [r7, #11]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d138      	bne.n	8011d64 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011cf8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d00:	2b03      	cmp	r3, #3
 8011d02:	d14a      	bne.n	8011d9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	689a      	ldr	r2, [r3, #8]
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d913      	bls.n	8011d38 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	689a      	ldr	r2, [r3, #8]
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	68db      	ldr	r3, [r3, #12]
 8011d18:	1ad2      	subs	r2, r2, r3
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	68da      	ldr	r2, [r3, #12]
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	689b      	ldr	r3, [r3, #8]
 8011d26:	4293      	cmp	r3, r2
 8011d28:	bf28      	it	cs
 8011d2a:	4613      	movcs	r3, r2
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	6879      	ldr	r1, [r7, #4]
 8011d30:	68f8      	ldr	r0, [r7, #12]
 8011d32:	f001 f80f 	bl	8012d54 <USBD_CtlContinueRx>
 8011d36:	e030      	b.n	8011d9a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	2b03      	cmp	r3, #3
 8011d42:	d10b      	bne.n	8011d5c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d4a:	691b      	ldr	r3, [r3, #16]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d005      	beq.n	8011d5c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d56:	691b      	ldr	r3, [r3, #16]
 8011d58:	68f8      	ldr	r0, [r7, #12]
 8011d5a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011d5c:	68f8      	ldr	r0, [r7, #12]
 8011d5e:	f001 f80a 	bl	8012d76 <USBD_CtlSendStatus>
 8011d62:	e01a      	b.n	8011d9a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d6a:	b2db      	uxtb	r3, r3
 8011d6c:	2b03      	cmp	r3, #3
 8011d6e:	d114      	bne.n	8011d9a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d76:	699b      	ldr	r3, [r3, #24]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00e      	beq.n	8011d9a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d82:	699b      	ldr	r3, [r3, #24]
 8011d84:	7afa      	ldrb	r2, [r7, #11]
 8011d86:	4611      	mov	r1, r2
 8011d88:	68f8      	ldr	r0, [r7, #12]
 8011d8a:	4798      	blx	r3
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011d90:	7dfb      	ldrb	r3, [r7, #23]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d001      	beq.n	8011d9a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011d96:	7dfb      	ldrb	r3, [r7, #23]
 8011d98:	e000      	b.n	8011d9c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011d9a:	2300      	movs	r3, #0
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3718      	adds	r7, #24
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b086      	sub	sp, #24
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	60f8      	str	r0, [r7, #12]
 8011dac:	460b      	mov	r3, r1
 8011dae:	607a      	str	r2, [r7, #4]
 8011db0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011db2:	7afb      	ldrb	r3, [r7, #11]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d16b      	bne.n	8011e90 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	3314      	adds	r3, #20
 8011dbc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011dc4:	2b02      	cmp	r3, #2
 8011dc6:	d156      	bne.n	8011e76 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	689a      	ldr	r2, [r3, #8]
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d914      	bls.n	8011dfe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	689a      	ldr	r2, [r3, #8]
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	1ad2      	subs	r2, r2, r3
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	689b      	ldr	r3, [r3, #8]
 8011de6:	461a      	mov	r2, r3
 8011de8:	6879      	ldr	r1, [r7, #4]
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	f000 ff84 	bl	8012cf8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011df0:	2300      	movs	r3, #0
 8011df2:	2200      	movs	r2, #0
 8011df4:	2100      	movs	r1, #0
 8011df6:	68f8      	ldr	r0, [r7, #12]
 8011df8:	f003 f828 	bl	8014e4c <USBD_LL_PrepareReceive>
 8011dfc:	e03b      	b.n	8011e76 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	68da      	ldr	r2, [r3, #12]
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	689b      	ldr	r3, [r3, #8]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d11c      	bne.n	8011e44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011e0a:	693b      	ldr	r3, [r7, #16]
 8011e0c:	685a      	ldr	r2, [r3, #4]
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d316      	bcc.n	8011e44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	685a      	ldr	r2, [r3, #4]
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d20f      	bcs.n	8011e44 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011e24:	2200      	movs	r2, #0
 8011e26:	2100      	movs	r1, #0
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f000 ff65 	bl	8012cf8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	2200      	movs	r2, #0
 8011e32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e36:	2300      	movs	r3, #0
 8011e38:	2200      	movs	r2, #0
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	68f8      	ldr	r0, [r7, #12]
 8011e3e:	f003 f805 	bl	8014e4c <USBD_LL_PrepareReceive>
 8011e42:	e018      	b.n	8011e76 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	2b03      	cmp	r3, #3
 8011e4e:	d10b      	bne.n	8011e68 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d005      	beq.n	8011e68 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e68:	2180      	movs	r1, #128	; 0x80
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	f002 ff44 	bl	8014cf8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011e70:	68f8      	ldr	r0, [r7, #12]
 8011e72:	f000 ff93 	bl	8012d9c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011e7c:	2b01      	cmp	r3, #1
 8011e7e:	d122      	bne.n	8011ec6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011e80:	68f8      	ldr	r0, [r7, #12]
 8011e82:	f7ff fe98 	bl	8011bb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011e8e:	e01a      	b.n	8011ec6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	2b03      	cmp	r3, #3
 8011e9a:	d114      	bne.n	8011ec6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ea2:	695b      	ldr	r3, [r3, #20]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d00e      	beq.n	8011ec6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eae:	695b      	ldr	r3, [r3, #20]
 8011eb0:	7afa      	ldrb	r2, [r7, #11]
 8011eb2:	4611      	mov	r1, r2
 8011eb4:	68f8      	ldr	r0, [r7, #12]
 8011eb6:	4798      	blx	r3
 8011eb8:	4603      	mov	r3, r0
 8011eba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011ebc:	7dfb      	ldrb	r3, [r7, #23]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d001      	beq.n	8011ec6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011ec2:	7dfb      	ldrb	r3, [r7, #23]
 8011ec4:	e000      	b.n	8011ec8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011ec6:	2300      	movs	r3, #0
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3718      	adds	r7, #24
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2201      	movs	r2, #1
 8011edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2200      	movs	r2, #0
 8011eec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d101      	bne.n	8011f04 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8011f00:	2303      	movs	r3, #3
 8011f02:	e02f      	b.n	8011f64 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d00f      	beq.n	8011f2e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d009      	beq.n	8011f2e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	6852      	ldr	r2, [r2, #4]
 8011f26:	b2d2      	uxtb	r2, r2
 8011f28:	4611      	mov	r1, r2
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f2e:	2340      	movs	r3, #64	; 0x40
 8011f30:	2200      	movs	r2, #0
 8011f32:	2100      	movs	r1, #0
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f002 fe9a 	bl	8014c6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2240      	movs	r2, #64	; 0x40
 8011f46:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f4a:	2340      	movs	r3, #64	; 0x40
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	2180      	movs	r1, #128	; 0x80
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f002 fe8c 	bl	8014c6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2201      	movs	r2, #1
 8011f5a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2240      	movs	r2, #64	; 0x40
 8011f60:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011f62:	2300      	movs	r3, #0
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	460b      	mov	r3, r1
 8011f76:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	78fa      	ldrb	r2, [r7, #3]
 8011f7c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	370c      	adds	r7, #12
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr

08011f8c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b083      	sub	sp, #12
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f9a:	b2da      	uxtb	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2204      	movs	r2, #4
 8011fa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011faa:	2300      	movs	r3, #0
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	370c      	adds	r7, #12
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b083      	sub	sp, #12
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	2b04      	cmp	r3, #4
 8011fca:	d106      	bne.n	8011fda <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011fd2:	b2da      	uxtb	r2, r3
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011fda:	2300      	movs	r3, #0
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr

08011fe8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d101      	bne.n	8011ffe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011ffa:	2303      	movs	r3, #3
 8011ffc:	e012      	b.n	8012024 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012004:	b2db      	uxtb	r3, r3
 8012006:	2b03      	cmp	r3, #3
 8012008:	d10b      	bne.n	8012022 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012010:	69db      	ldr	r3, [r3, #28]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d005      	beq.n	8012022 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801201c:	69db      	ldr	r3, [r3, #28]
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012022:	2300      	movs	r3, #0
}
 8012024:	4618      	mov	r0, r3
 8012026:	3708      	adds	r7, #8
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	460b      	mov	r3, r1
 8012036:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801203e:	2b00      	cmp	r3, #0
 8012040:	d101      	bne.n	8012046 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012042:	2303      	movs	r3, #3
 8012044:	e014      	b.n	8012070 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801204c:	b2db      	uxtb	r3, r3
 801204e:	2b03      	cmp	r3, #3
 8012050:	d10d      	bne.n	801206e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012058:	6a1b      	ldr	r3, [r3, #32]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d007      	beq.n	801206e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012064:	6a1b      	ldr	r3, [r3, #32]
 8012066:	78fa      	ldrb	r2, [r7, #3]
 8012068:	4611      	mov	r1, r2
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801206e:	2300      	movs	r3, #0
}
 8012070:	4618      	mov	r0, r3
 8012072:	3708      	adds	r7, #8
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	460b      	mov	r3, r1
 8012082:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801208a:	2b00      	cmp	r3, #0
 801208c:	d101      	bne.n	8012092 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801208e:	2303      	movs	r3, #3
 8012090:	e014      	b.n	80120bc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012098:	b2db      	uxtb	r3, r3
 801209a:	2b03      	cmp	r3, #3
 801209c:	d10d      	bne.n	80120ba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d007      	beq.n	80120ba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b2:	78fa      	ldrb	r2, [r7, #3]
 80120b4:	4611      	mov	r1, r2
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80120ba:	2300      	movs	r3, #0
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3708      	adds	r7, #8
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80120cc:	2300      	movs	r3, #0
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	370c      	adds	r7, #12
 80120d2:	46bd      	mov	sp, r7
 80120d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d8:	4770      	bx	lr

080120da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80120da:	b580      	push	{r7, lr}
 80120dc:	b082      	sub	sp, #8
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2201      	movs	r2, #1
 80120e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d009      	beq.n	8012108 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	6852      	ldr	r2, [r2, #4]
 8012100:	b2d2      	uxtb	r2, r2
 8012102:	4611      	mov	r1, r2
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	4798      	blx	r3
  }

  return USBD_OK;
 8012108:	2300      	movs	r3, #0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3708      	adds	r7, #8
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012112:	b480      	push	{r7}
 8012114:	b087      	sub	sp, #28
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	3301      	adds	r3, #1
 8012128:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012130:	8a3b      	ldrh	r3, [r7, #16]
 8012132:	021b      	lsls	r3, r3, #8
 8012134:	b21a      	sxth	r2, r3
 8012136:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801213a:	4313      	orrs	r3, r2
 801213c:	b21b      	sxth	r3, r3
 801213e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012140:	89fb      	ldrh	r3, [r7, #14]
}
 8012142:	4618      	mov	r0, r3
 8012144:	371c      	adds	r7, #28
 8012146:	46bd      	mov	sp, r7
 8012148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214c:	4770      	bx	lr
	...

08012150 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801215a:	2300      	movs	r3, #0
 801215c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	781b      	ldrb	r3, [r3, #0]
 8012162:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012166:	2b40      	cmp	r3, #64	; 0x40
 8012168:	d005      	beq.n	8012176 <USBD_StdDevReq+0x26>
 801216a:	2b40      	cmp	r3, #64	; 0x40
 801216c:	d853      	bhi.n	8012216 <USBD_StdDevReq+0xc6>
 801216e:	2b00      	cmp	r3, #0
 8012170:	d00b      	beq.n	801218a <USBD_StdDevReq+0x3a>
 8012172:	2b20      	cmp	r3, #32
 8012174:	d14f      	bne.n	8012216 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	6839      	ldr	r1, [r7, #0]
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	4798      	blx	r3
 8012184:	4603      	mov	r3, r0
 8012186:	73fb      	strb	r3, [r7, #15]
      break;
 8012188:	e04a      	b.n	8012220 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	785b      	ldrb	r3, [r3, #1]
 801218e:	2b09      	cmp	r3, #9
 8012190:	d83b      	bhi.n	801220a <USBD_StdDevReq+0xba>
 8012192:	a201      	add	r2, pc, #4	; (adr r2, 8012198 <USBD_StdDevReq+0x48>)
 8012194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012198:	080121ed 	.word	0x080121ed
 801219c:	08012201 	.word	0x08012201
 80121a0:	0801220b 	.word	0x0801220b
 80121a4:	080121f7 	.word	0x080121f7
 80121a8:	0801220b 	.word	0x0801220b
 80121ac:	080121cb 	.word	0x080121cb
 80121b0:	080121c1 	.word	0x080121c1
 80121b4:	0801220b 	.word	0x0801220b
 80121b8:	080121e3 	.word	0x080121e3
 80121bc:	080121d5 	.word	0x080121d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f000 f9de 	bl	8012584 <USBD_GetDescriptor>
          break;
 80121c8:	e024      	b.n	8012214 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80121ca:	6839      	ldr	r1, [r7, #0]
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 fb43 	bl	8012858 <USBD_SetAddress>
          break;
 80121d2:	e01f      	b.n	8012214 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80121d4:	6839      	ldr	r1, [r7, #0]
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 fb82 	bl	80128e0 <USBD_SetConfig>
 80121dc:	4603      	mov	r3, r0
 80121de:	73fb      	strb	r3, [r7, #15]
          break;
 80121e0:	e018      	b.n	8012214 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80121e2:	6839      	ldr	r1, [r7, #0]
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f000 fc21 	bl	8012a2c <USBD_GetConfig>
          break;
 80121ea:	e013      	b.n	8012214 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80121ec:	6839      	ldr	r1, [r7, #0]
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f000 fc52 	bl	8012a98 <USBD_GetStatus>
          break;
 80121f4:	e00e      	b.n	8012214 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80121f6:	6839      	ldr	r1, [r7, #0]
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f000 fc81 	bl	8012b00 <USBD_SetFeature>
          break;
 80121fe:	e009      	b.n	8012214 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012200:	6839      	ldr	r1, [r7, #0]
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 fc90 	bl	8012b28 <USBD_ClrFeature>
          break;
 8012208:	e004      	b.n	8012214 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801220a:	6839      	ldr	r1, [r7, #0]
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 fce7 	bl	8012be0 <USBD_CtlError>
          break;
 8012212:	bf00      	nop
      }
      break;
 8012214:	e004      	b.n	8012220 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8012216:	6839      	ldr	r1, [r7, #0]
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 fce1 	bl	8012be0 <USBD_CtlError>
      break;
 801221e:	bf00      	nop
  }

  return ret;
 8012220:	7bfb      	ldrb	r3, [r7, #15]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3710      	adds	r7, #16
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}
 801222a:	bf00      	nop

0801222c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012236:	2300      	movs	r3, #0
 8012238:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012242:	2b40      	cmp	r3, #64	; 0x40
 8012244:	d005      	beq.n	8012252 <USBD_StdItfReq+0x26>
 8012246:	2b40      	cmp	r3, #64	; 0x40
 8012248:	d82f      	bhi.n	80122aa <USBD_StdItfReq+0x7e>
 801224a:	2b00      	cmp	r3, #0
 801224c:	d001      	beq.n	8012252 <USBD_StdItfReq+0x26>
 801224e:	2b20      	cmp	r3, #32
 8012250:	d12b      	bne.n	80122aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012258:	b2db      	uxtb	r3, r3
 801225a:	3b01      	subs	r3, #1
 801225c:	2b02      	cmp	r3, #2
 801225e:	d81d      	bhi.n	801229c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	889b      	ldrh	r3, [r3, #4]
 8012264:	b2db      	uxtb	r3, r3
 8012266:	2b01      	cmp	r3, #1
 8012268:	d813      	bhi.n	8012292 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012270:	689b      	ldr	r3, [r3, #8]
 8012272:	6839      	ldr	r1, [r7, #0]
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	4798      	blx	r3
 8012278:	4603      	mov	r3, r0
 801227a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	88db      	ldrh	r3, [r3, #6]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d110      	bne.n	80122a6 <USBD_StdItfReq+0x7a>
 8012284:	7bfb      	ldrb	r3, [r7, #15]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d10d      	bne.n	80122a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 fd73 	bl	8012d76 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012290:	e009      	b.n	80122a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8012292:	6839      	ldr	r1, [r7, #0]
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f000 fca3 	bl	8012be0 <USBD_CtlError>
          break;
 801229a:	e004      	b.n	80122a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801229c:	6839      	ldr	r1, [r7, #0]
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f000 fc9e 	bl	8012be0 <USBD_CtlError>
          break;
 80122a4:	e000      	b.n	80122a8 <USBD_StdItfReq+0x7c>
          break;
 80122a6:	bf00      	nop
      }
      break;
 80122a8:	e004      	b.n	80122b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80122aa:	6839      	ldr	r1, [r7, #0]
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f000 fc97 	bl	8012be0 <USBD_CtlError>
      break;
 80122b2:	bf00      	nop
  }

  return ret;
 80122b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3710      	adds	r7, #16
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b084      	sub	sp, #16
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
 80122c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80122c8:	2300      	movs	r3, #0
 80122ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	889b      	ldrh	r3, [r3, #4]
 80122d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80122da:	2b40      	cmp	r3, #64	; 0x40
 80122dc:	d007      	beq.n	80122ee <USBD_StdEPReq+0x30>
 80122de:	2b40      	cmp	r3, #64	; 0x40
 80122e0:	f200 8145 	bhi.w	801256e <USBD_StdEPReq+0x2b0>
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d00c      	beq.n	8012302 <USBD_StdEPReq+0x44>
 80122e8:	2b20      	cmp	r3, #32
 80122ea:	f040 8140 	bne.w	801256e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122f4:	689b      	ldr	r3, [r3, #8]
 80122f6:	6839      	ldr	r1, [r7, #0]
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	4798      	blx	r3
 80122fc:	4603      	mov	r3, r0
 80122fe:	73fb      	strb	r3, [r7, #15]
      break;
 8012300:	e13a      	b.n	8012578 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	785b      	ldrb	r3, [r3, #1]
 8012306:	2b03      	cmp	r3, #3
 8012308:	d007      	beq.n	801231a <USBD_StdEPReq+0x5c>
 801230a:	2b03      	cmp	r3, #3
 801230c:	f300 8129 	bgt.w	8012562 <USBD_StdEPReq+0x2a4>
 8012310:	2b00      	cmp	r3, #0
 8012312:	d07f      	beq.n	8012414 <USBD_StdEPReq+0x156>
 8012314:	2b01      	cmp	r3, #1
 8012316:	d03c      	beq.n	8012392 <USBD_StdEPReq+0xd4>
 8012318:	e123      	b.n	8012562 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012320:	b2db      	uxtb	r3, r3
 8012322:	2b02      	cmp	r3, #2
 8012324:	d002      	beq.n	801232c <USBD_StdEPReq+0x6e>
 8012326:	2b03      	cmp	r3, #3
 8012328:	d016      	beq.n	8012358 <USBD_StdEPReq+0x9a>
 801232a:	e02c      	b.n	8012386 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801232c:	7bbb      	ldrb	r3, [r7, #14]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d00d      	beq.n	801234e <USBD_StdEPReq+0x90>
 8012332:	7bbb      	ldrb	r3, [r7, #14]
 8012334:	2b80      	cmp	r3, #128	; 0x80
 8012336:	d00a      	beq.n	801234e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012338:	7bbb      	ldrb	r3, [r7, #14]
 801233a:	4619      	mov	r1, r3
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f002 fcdb 	bl	8014cf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012342:	2180      	movs	r1, #128	; 0x80
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f002 fcd7 	bl	8014cf8 <USBD_LL_StallEP>
 801234a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801234c:	e020      	b.n	8012390 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801234e:	6839      	ldr	r1, [r7, #0]
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f000 fc45 	bl	8012be0 <USBD_CtlError>
              break;
 8012356:	e01b      	b.n	8012390 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	885b      	ldrh	r3, [r3, #2]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d10e      	bne.n	801237e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012360:	7bbb      	ldrb	r3, [r7, #14]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d00b      	beq.n	801237e <USBD_StdEPReq+0xc0>
 8012366:	7bbb      	ldrb	r3, [r7, #14]
 8012368:	2b80      	cmp	r3, #128	; 0x80
 801236a:	d008      	beq.n	801237e <USBD_StdEPReq+0xc0>
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	88db      	ldrh	r3, [r3, #6]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d104      	bne.n	801237e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012374:	7bbb      	ldrb	r3, [r7, #14]
 8012376:	4619      	mov	r1, r3
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f002 fcbd 	bl	8014cf8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f000 fcf9 	bl	8012d76 <USBD_CtlSendStatus>

              break;
 8012384:	e004      	b.n	8012390 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8012386:	6839      	ldr	r1, [r7, #0]
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f000 fc29 	bl	8012be0 <USBD_CtlError>
              break;
 801238e:	bf00      	nop
          }
          break;
 8012390:	e0ec      	b.n	801256c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012398:	b2db      	uxtb	r3, r3
 801239a:	2b02      	cmp	r3, #2
 801239c:	d002      	beq.n	80123a4 <USBD_StdEPReq+0xe6>
 801239e:	2b03      	cmp	r3, #3
 80123a0:	d016      	beq.n	80123d0 <USBD_StdEPReq+0x112>
 80123a2:	e030      	b.n	8012406 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80123a4:	7bbb      	ldrb	r3, [r7, #14]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d00d      	beq.n	80123c6 <USBD_StdEPReq+0x108>
 80123aa:	7bbb      	ldrb	r3, [r7, #14]
 80123ac:	2b80      	cmp	r3, #128	; 0x80
 80123ae:	d00a      	beq.n	80123c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80123b0:	7bbb      	ldrb	r3, [r7, #14]
 80123b2:	4619      	mov	r1, r3
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f002 fc9f 	bl	8014cf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80123ba:	2180      	movs	r1, #128	; 0x80
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f002 fc9b 	bl	8014cf8 <USBD_LL_StallEP>
 80123c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80123c4:	e025      	b.n	8012412 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80123c6:	6839      	ldr	r1, [r7, #0]
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f000 fc09 	bl	8012be0 <USBD_CtlError>
              break;
 80123ce:	e020      	b.n	8012412 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	885b      	ldrh	r3, [r3, #2]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d11b      	bne.n	8012410 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80123d8:	7bbb      	ldrb	r3, [r7, #14]
 80123da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d004      	beq.n	80123ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80123e2:	7bbb      	ldrb	r3, [r7, #14]
 80123e4:	4619      	mov	r1, r3
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f002 fca5 	bl	8014d36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f000 fcc2 	bl	8012d76 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123f8:	689b      	ldr	r3, [r3, #8]
 80123fa:	6839      	ldr	r1, [r7, #0]
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	4798      	blx	r3
 8012400:	4603      	mov	r3, r0
 8012402:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012404:	e004      	b.n	8012410 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8012406:	6839      	ldr	r1, [r7, #0]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fbe9 	bl	8012be0 <USBD_CtlError>
              break;
 801240e:	e000      	b.n	8012412 <USBD_StdEPReq+0x154>
              break;
 8012410:	bf00      	nop
          }
          break;
 8012412:	e0ab      	b.n	801256c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801241a:	b2db      	uxtb	r3, r3
 801241c:	2b02      	cmp	r3, #2
 801241e:	d002      	beq.n	8012426 <USBD_StdEPReq+0x168>
 8012420:	2b03      	cmp	r3, #3
 8012422:	d032      	beq.n	801248a <USBD_StdEPReq+0x1cc>
 8012424:	e097      	b.n	8012556 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012426:	7bbb      	ldrb	r3, [r7, #14]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d007      	beq.n	801243c <USBD_StdEPReq+0x17e>
 801242c:	7bbb      	ldrb	r3, [r7, #14]
 801242e:	2b80      	cmp	r3, #128	; 0x80
 8012430:	d004      	beq.n	801243c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8012432:	6839      	ldr	r1, [r7, #0]
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f000 fbd3 	bl	8012be0 <USBD_CtlError>
                break;
 801243a:	e091      	b.n	8012560 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801243c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012440:	2b00      	cmp	r3, #0
 8012442:	da0b      	bge.n	801245c <USBD_StdEPReq+0x19e>
 8012444:	7bbb      	ldrb	r3, [r7, #14]
 8012446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801244a:	4613      	mov	r3, r2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	4413      	add	r3, r2
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	3310      	adds	r3, #16
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	4413      	add	r3, r2
 8012458:	3304      	adds	r3, #4
 801245a:	e00b      	b.n	8012474 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801245c:	7bbb      	ldrb	r3, [r7, #14]
 801245e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012462:	4613      	mov	r3, r2
 8012464:	009b      	lsls	r3, r3, #2
 8012466:	4413      	add	r3, r2
 8012468:	009b      	lsls	r3, r3, #2
 801246a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	4413      	add	r3, r2
 8012472:	3304      	adds	r3, #4
 8012474:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	2200      	movs	r2, #0
 801247a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	2202      	movs	r2, #2
 8012480:	4619      	mov	r1, r3
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 fc1d 	bl	8012cc2 <USBD_CtlSendData>
              break;
 8012488:	e06a      	b.n	8012560 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801248a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801248e:	2b00      	cmp	r3, #0
 8012490:	da11      	bge.n	80124b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012492:	7bbb      	ldrb	r3, [r7, #14]
 8012494:	f003 020f 	and.w	r2, r3, #15
 8012498:	6879      	ldr	r1, [r7, #4]
 801249a:	4613      	mov	r3, r2
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	4413      	add	r3, r2
 80124a0:	009b      	lsls	r3, r3, #2
 80124a2:	440b      	add	r3, r1
 80124a4:	3324      	adds	r3, #36	; 0x24
 80124a6:	881b      	ldrh	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d117      	bne.n	80124dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80124ac:	6839      	ldr	r1, [r7, #0]
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 fb96 	bl	8012be0 <USBD_CtlError>
                  break;
 80124b4:	e054      	b.n	8012560 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80124b6:	7bbb      	ldrb	r3, [r7, #14]
 80124b8:	f003 020f 	and.w	r2, r3, #15
 80124bc:	6879      	ldr	r1, [r7, #4]
 80124be:	4613      	mov	r3, r2
 80124c0:	009b      	lsls	r3, r3, #2
 80124c2:	4413      	add	r3, r2
 80124c4:	009b      	lsls	r3, r3, #2
 80124c6:	440b      	add	r3, r1
 80124c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80124cc:	881b      	ldrh	r3, [r3, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d104      	bne.n	80124dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80124d2:	6839      	ldr	r1, [r7, #0]
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f000 fb83 	bl	8012be0 <USBD_CtlError>
                  break;
 80124da:	e041      	b.n	8012560 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80124dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	da0b      	bge.n	80124fc <USBD_StdEPReq+0x23e>
 80124e4:	7bbb      	ldrb	r3, [r7, #14]
 80124e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80124ea:	4613      	mov	r3, r2
 80124ec:	009b      	lsls	r3, r3, #2
 80124ee:	4413      	add	r3, r2
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	3310      	adds	r3, #16
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	4413      	add	r3, r2
 80124f8:	3304      	adds	r3, #4
 80124fa:	e00b      	b.n	8012514 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80124fc:	7bbb      	ldrb	r3, [r7, #14]
 80124fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012502:	4613      	mov	r3, r2
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	4413      	add	r3, r2
 8012508:	009b      	lsls	r3, r3, #2
 801250a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	4413      	add	r3, r2
 8012512:	3304      	adds	r3, #4
 8012514:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012516:	7bbb      	ldrb	r3, [r7, #14]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d002      	beq.n	8012522 <USBD_StdEPReq+0x264>
 801251c:	7bbb      	ldrb	r3, [r7, #14]
 801251e:	2b80      	cmp	r3, #128	; 0x80
 8012520:	d103      	bne.n	801252a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	2200      	movs	r2, #0
 8012526:	601a      	str	r2, [r3, #0]
 8012528:	e00e      	b.n	8012548 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801252a:	7bbb      	ldrb	r3, [r7, #14]
 801252c:	4619      	mov	r1, r3
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f002 fc20 	bl	8014d74 <USBD_LL_IsStallEP>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d003      	beq.n	8012542 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	2201      	movs	r2, #1
 801253e:	601a      	str	r2, [r3, #0]
 8012540:	e002      	b.n	8012548 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	2200      	movs	r2, #0
 8012546:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	2202      	movs	r2, #2
 801254c:	4619      	mov	r1, r3
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f000 fbb7 	bl	8012cc2 <USBD_CtlSendData>
              break;
 8012554:	e004      	b.n	8012560 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8012556:	6839      	ldr	r1, [r7, #0]
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f000 fb41 	bl	8012be0 <USBD_CtlError>
              break;
 801255e:	bf00      	nop
          }
          break;
 8012560:	e004      	b.n	801256c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012562:	6839      	ldr	r1, [r7, #0]
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f000 fb3b 	bl	8012be0 <USBD_CtlError>
          break;
 801256a:	bf00      	nop
      }
      break;
 801256c:	e004      	b.n	8012578 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801256e:	6839      	ldr	r1, [r7, #0]
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f000 fb35 	bl	8012be0 <USBD_CtlError>
      break;
 8012576:	bf00      	nop
  }

  return ret;
 8012578:	7bfb      	ldrb	r3, [r7, #15]
}
 801257a:	4618      	mov	r0, r3
 801257c:	3710      	adds	r7, #16
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
	...

08012584 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801258e:	2300      	movs	r3, #0
 8012590:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012592:	2300      	movs	r3, #0
 8012594:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012596:	2300      	movs	r3, #0
 8012598:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	885b      	ldrh	r3, [r3, #2]
 801259e:	0a1b      	lsrs	r3, r3, #8
 80125a0:	b29b      	uxth	r3, r3
 80125a2:	3b01      	subs	r3, #1
 80125a4:	2b06      	cmp	r3, #6
 80125a6:	f200 8128 	bhi.w	80127fa <USBD_GetDescriptor+0x276>
 80125aa:	a201      	add	r2, pc, #4	; (adr r2, 80125b0 <USBD_GetDescriptor+0x2c>)
 80125ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125b0:	080125cd 	.word	0x080125cd
 80125b4:	080125e5 	.word	0x080125e5
 80125b8:	08012625 	.word	0x08012625
 80125bc:	080127fb 	.word	0x080127fb
 80125c0:	080127fb 	.word	0x080127fb
 80125c4:	0801279b 	.word	0x0801279b
 80125c8:	080127c7 	.word	0x080127c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	7c12      	ldrb	r2, [r2, #16]
 80125d8:	f107 0108 	add.w	r1, r7, #8
 80125dc:	4610      	mov	r0, r2
 80125de:	4798      	blx	r3
 80125e0:	60f8      	str	r0, [r7, #12]
      break;
 80125e2:	e112      	b.n	801280a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	7c1b      	ldrb	r3, [r3, #16]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d10d      	bne.n	8012608 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125f4:	f107 0208 	add.w	r2, r7, #8
 80125f8:	4610      	mov	r0, r2
 80125fa:	4798      	blx	r3
 80125fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	3301      	adds	r3, #1
 8012602:	2202      	movs	r2, #2
 8012604:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012606:	e100      	b.n	801280a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012610:	f107 0208 	add.w	r2, r7, #8
 8012614:	4610      	mov	r0, r2
 8012616:	4798      	blx	r3
 8012618:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	3301      	adds	r3, #1
 801261e:	2202      	movs	r2, #2
 8012620:	701a      	strb	r2, [r3, #0]
      break;
 8012622:	e0f2      	b.n	801280a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	885b      	ldrh	r3, [r3, #2]
 8012628:	b2db      	uxtb	r3, r3
 801262a:	2b05      	cmp	r3, #5
 801262c:	f200 80ac 	bhi.w	8012788 <USBD_GetDescriptor+0x204>
 8012630:	a201      	add	r2, pc, #4	; (adr r2, 8012638 <USBD_GetDescriptor+0xb4>)
 8012632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012636:	bf00      	nop
 8012638:	08012651 	.word	0x08012651
 801263c:	08012685 	.word	0x08012685
 8012640:	080126b9 	.word	0x080126b9
 8012644:	080126ed 	.word	0x080126ed
 8012648:	08012721 	.word	0x08012721
 801264c:	08012755 	.word	0x08012755
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012656:	685b      	ldr	r3, [r3, #4]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d00b      	beq.n	8012674 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	687a      	ldr	r2, [r7, #4]
 8012666:	7c12      	ldrb	r2, [r2, #16]
 8012668:	f107 0108 	add.w	r1, r7, #8
 801266c:	4610      	mov	r0, r2
 801266e:	4798      	blx	r3
 8012670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012672:	e091      	b.n	8012798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012674:	6839      	ldr	r1, [r7, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f000 fab2 	bl	8012be0 <USBD_CtlError>
            err++;
 801267c:	7afb      	ldrb	r3, [r7, #11]
 801267e:	3301      	adds	r3, #1
 8012680:	72fb      	strb	r3, [r7, #11]
          break;
 8012682:	e089      	b.n	8012798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801268a:	689b      	ldr	r3, [r3, #8]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d00b      	beq.n	80126a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	687a      	ldr	r2, [r7, #4]
 801269a:	7c12      	ldrb	r2, [r2, #16]
 801269c:	f107 0108 	add.w	r1, r7, #8
 80126a0:	4610      	mov	r0, r2
 80126a2:	4798      	blx	r3
 80126a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80126a6:	e077      	b.n	8012798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80126a8:	6839      	ldr	r1, [r7, #0]
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f000 fa98 	bl	8012be0 <USBD_CtlError>
            err++;
 80126b0:	7afb      	ldrb	r3, [r7, #11]
 80126b2:	3301      	adds	r3, #1
 80126b4:	72fb      	strb	r3, [r7, #11]
          break;
 80126b6:	e06f      	b.n	8012798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126be:	68db      	ldr	r3, [r3, #12]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d00b      	beq.n	80126dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	7c12      	ldrb	r2, [r2, #16]
 80126d0:	f107 0108 	add.w	r1, r7, #8
 80126d4:	4610      	mov	r0, r2
 80126d6:	4798      	blx	r3
 80126d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80126da:	e05d      	b.n	8012798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80126dc:	6839      	ldr	r1, [r7, #0]
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f000 fa7e 	bl	8012be0 <USBD_CtlError>
            err++;
 80126e4:	7afb      	ldrb	r3, [r7, #11]
 80126e6:	3301      	adds	r3, #1
 80126e8:	72fb      	strb	r3, [r7, #11]
          break;
 80126ea:	e055      	b.n	8012798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126f2:	691b      	ldr	r3, [r3, #16]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d00b      	beq.n	8012710 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126fe:	691b      	ldr	r3, [r3, #16]
 8012700:	687a      	ldr	r2, [r7, #4]
 8012702:	7c12      	ldrb	r2, [r2, #16]
 8012704:	f107 0108 	add.w	r1, r7, #8
 8012708:	4610      	mov	r0, r2
 801270a:	4798      	blx	r3
 801270c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801270e:	e043      	b.n	8012798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012710:	6839      	ldr	r1, [r7, #0]
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f000 fa64 	bl	8012be0 <USBD_CtlError>
            err++;
 8012718:	7afb      	ldrb	r3, [r7, #11]
 801271a:	3301      	adds	r3, #1
 801271c:	72fb      	strb	r3, [r7, #11]
          break;
 801271e:	e03b      	b.n	8012798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012726:	695b      	ldr	r3, [r3, #20]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d00b      	beq.n	8012744 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012732:	695b      	ldr	r3, [r3, #20]
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	7c12      	ldrb	r2, [r2, #16]
 8012738:	f107 0108 	add.w	r1, r7, #8
 801273c:	4610      	mov	r0, r2
 801273e:	4798      	blx	r3
 8012740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012742:	e029      	b.n	8012798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012744:	6839      	ldr	r1, [r7, #0]
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f000 fa4a 	bl	8012be0 <USBD_CtlError>
            err++;
 801274c:	7afb      	ldrb	r3, [r7, #11]
 801274e:	3301      	adds	r3, #1
 8012750:	72fb      	strb	r3, [r7, #11]
          break;
 8012752:	e021      	b.n	8012798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801275a:	699b      	ldr	r3, [r3, #24]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d00b      	beq.n	8012778 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012766:	699b      	ldr	r3, [r3, #24]
 8012768:	687a      	ldr	r2, [r7, #4]
 801276a:	7c12      	ldrb	r2, [r2, #16]
 801276c:	f107 0108 	add.w	r1, r7, #8
 8012770:	4610      	mov	r0, r2
 8012772:	4798      	blx	r3
 8012774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012776:	e00f      	b.n	8012798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012778:	6839      	ldr	r1, [r7, #0]
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f000 fa30 	bl	8012be0 <USBD_CtlError>
            err++;
 8012780:	7afb      	ldrb	r3, [r7, #11]
 8012782:	3301      	adds	r3, #1
 8012784:	72fb      	strb	r3, [r7, #11]
          break;
 8012786:	e007      	b.n	8012798 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012788:	6839      	ldr	r1, [r7, #0]
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f000 fa28 	bl	8012be0 <USBD_CtlError>
          err++;
 8012790:	7afb      	ldrb	r3, [r7, #11]
 8012792:	3301      	adds	r3, #1
 8012794:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012796:	bf00      	nop
      }
      break;
 8012798:	e037      	b.n	801280a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	7c1b      	ldrb	r3, [r3, #16]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d109      	bne.n	80127b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127aa:	f107 0208 	add.w	r2, r7, #8
 80127ae:	4610      	mov	r0, r2
 80127b0:	4798      	blx	r3
 80127b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80127b4:	e029      	b.n	801280a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80127b6:	6839      	ldr	r1, [r7, #0]
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f000 fa11 	bl	8012be0 <USBD_CtlError>
        err++;
 80127be:	7afb      	ldrb	r3, [r7, #11]
 80127c0:	3301      	adds	r3, #1
 80127c2:	72fb      	strb	r3, [r7, #11]
      break;
 80127c4:	e021      	b.n	801280a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	7c1b      	ldrb	r3, [r3, #16]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d10d      	bne.n	80127ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127d6:	f107 0208 	add.w	r2, r7, #8
 80127da:	4610      	mov	r0, r2
 80127dc:	4798      	blx	r3
 80127de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	3301      	adds	r3, #1
 80127e4:	2207      	movs	r2, #7
 80127e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80127e8:	e00f      	b.n	801280a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80127ea:	6839      	ldr	r1, [r7, #0]
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f000 f9f7 	bl	8012be0 <USBD_CtlError>
        err++;
 80127f2:	7afb      	ldrb	r3, [r7, #11]
 80127f4:	3301      	adds	r3, #1
 80127f6:	72fb      	strb	r3, [r7, #11]
      break;
 80127f8:	e007      	b.n	801280a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80127fa:	6839      	ldr	r1, [r7, #0]
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 f9ef 	bl	8012be0 <USBD_CtlError>
      err++;
 8012802:	7afb      	ldrb	r3, [r7, #11]
 8012804:	3301      	adds	r3, #1
 8012806:	72fb      	strb	r3, [r7, #11]
      break;
 8012808:	bf00      	nop
  }

  if (err != 0U)
 801280a:	7afb      	ldrb	r3, [r7, #11]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d11e      	bne.n	801284e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	88db      	ldrh	r3, [r3, #6]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d016      	beq.n	8012846 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012818:	893b      	ldrh	r3, [r7, #8]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d00e      	beq.n	801283c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	88da      	ldrh	r2, [r3, #6]
 8012822:	893b      	ldrh	r3, [r7, #8]
 8012824:	4293      	cmp	r3, r2
 8012826:	bf28      	it	cs
 8012828:	4613      	movcs	r3, r2
 801282a:	b29b      	uxth	r3, r3
 801282c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801282e:	893b      	ldrh	r3, [r7, #8]
 8012830:	461a      	mov	r2, r3
 8012832:	68f9      	ldr	r1, [r7, #12]
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f000 fa44 	bl	8012cc2 <USBD_CtlSendData>
 801283a:	e009      	b.n	8012850 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801283c:	6839      	ldr	r1, [r7, #0]
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f000 f9ce 	bl	8012be0 <USBD_CtlError>
 8012844:	e004      	b.n	8012850 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f000 fa95 	bl	8012d76 <USBD_CtlSendStatus>
 801284c:	e000      	b.n	8012850 <USBD_GetDescriptor+0x2cc>
    return;
 801284e:	bf00      	nop
  }
}
 8012850:	3710      	adds	r7, #16
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
 8012856:	bf00      	nop

08012858 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	889b      	ldrh	r3, [r3, #4]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d131      	bne.n	80128ce <USBD_SetAddress+0x76>
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	88db      	ldrh	r3, [r3, #6]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d12d      	bne.n	80128ce <USBD_SetAddress+0x76>
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	885b      	ldrh	r3, [r3, #2]
 8012876:	2b7f      	cmp	r3, #127	; 0x7f
 8012878:	d829      	bhi.n	80128ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	885b      	ldrh	r3, [r3, #2]
 801287e:	b2db      	uxtb	r3, r3
 8012880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012884:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801288c:	b2db      	uxtb	r3, r3
 801288e:	2b03      	cmp	r3, #3
 8012890:	d104      	bne.n	801289c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012892:	6839      	ldr	r1, [r7, #0]
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f000 f9a3 	bl	8012be0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801289a:	e01d      	b.n	80128d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	7bfa      	ldrb	r2, [r7, #15]
 80128a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80128a4:	7bfb      	ldrb	r3, [r7, #15]
 80128a6:	4619      	mov	r1, r3
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f002 fa8f 	bl	8014dcc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f000 fa61 	bl	8012d76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80128b4:	7bfb      	ldrb	r3, [r7, #15]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d004      	beq.n	80128c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2202      	movs	r2, #2
 80128be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128c2:	e009      	b.n	80128d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2201      	movs	r2, #1
 80128c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128cc:	e004      	b.n	80128d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80128ce:	6839      	ldr	r1, [r7, #0]
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f000 f985 	bl	8012be0 <USBD_CtlError>
  }
}
 80128d6:	bf00      	nop
 80128d8:	bf00      	nop
 80128da:	3710      	adds	r7, #16
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b084      	sub	sp, #16
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80128ea:	2300      	movs	r3, #0
 80128ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	885b      	ldrh	r3, [r3, #2]
 80128f2:	b2da      	uxtb	r2, r3
 80128f4:	4b4c      	ldr	r3, [pc, #304]	; (8012a28 <USBD_SetConfig+0x148>)
 80128f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80128f8:	4b4b      	ldr	r3, [pc, #300]	; (8012a28 <USBD_SetConfig+0x148>)
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	2b01      	cmp	r3, #1
 80128fe:	d905      	bls.n	801290c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012900:	6839      	ldr	r1, [r7, #0]
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f000 f96c 	bl	8012be0 <USBD_CtlError>
    return USBD_FAIL;
 8012908:	2303      	movs	r3, #3
 801290a:	e088      	b.n	8012a1e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012912:	b2db      	uxtb	r3, r3
 8012914:	2b02      	cmp	r3, #2
 8012916:	d002      	beq.n	801291e <USBD_SetConfig+0x3e>
 8012918:	2b03      	cmp	r3, #3
 801291a:	d025      	beq.n	8012968 <USBD_SetConfig+0x88>
 801291c:	e071      	b.n	8012a02 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801291e:	4b42      	ldr	r3, [pc, #264]	; (8012a28 <USBD_SetConfig+0x148>)
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d01c      	beq.n	8012960 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012926:	4b40      	ldr	r3, [pc, #256]	; (8012a28 <USBD_SetConfig+0x148>)
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	461a      	mov	r2, r3
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012930:	4b3d      	ldr	r3, [pc, #244]	; (8012a28 <USBD_SetConfig+0x148>)
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	4619      	mov	r1, r3
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7ff f948 	bl	8011bcc <USBD_SetClassConfig>
 801293c:	4603      	mov	r3, r0
 801293e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012940:	7bfb      	ldrb	r3, [r7, #15]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d004      	beq.n	8012950 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012946:	6839      	ldr	r1, [r7, #0]
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f000 f949 	bl	8012be0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801294e:	e065      	b.n	8012a1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 fa10 	bl	8012d76 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2203      	movs	r2, #3
 801295a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801295e:	e05d      	b.n	8012a1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 fa08 	bl	8012d76 <USBD_CtlSendStatus>
      break;
 8012966:	e059      	b.n	8012a1c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012968:	4b2f      	ldr	r3, [pc, #188]	; (8012a28 <USBD_SetConfig+0x148>)
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d112      	bne.n	8012996 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2202      	movs	r2, #2
 8012974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012978:	4b2b      	ldr	r3, [pc, #172]	; (8012a28 <USBD_SetConfig+0x148>)
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	461a      	mov	r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012982:	4b29      	ldr	r3, [pc, #164]	; (8012a28 <USBD_SetConfig+0x148>)
 8012984:	781b      	ldrb	r3, [r3, #0]
 8012986:	4619      	mov	r1, r3
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f7ff f93b 	bl	8011c04 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f000 f9f1 	bl	8012d76 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012994:	e042      	b.n	8012a1c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012996:	4b24      	ldr	r3, [pc, #144]	; (8012a28 <USBD_SetConfig+0x148>)
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	461a      	mov	r2, r3
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d02a      	beq.n	80129fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	b2db      	uxtb	r3, r3
 80129aa:	4619      	mov	r1, r3
 80129ac:	6878      	ldr	r0, [r7, #4]
 80129ae:	f7ff f929 	bl	8011c04 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80129b2:	4b1d      	ldr	r3, [pc, #116]	; (8012a28 <USBD_SetConfig+0x148>)
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	461a      	mov	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80129bc:	4b1a      	ldr	r3, [pc, #104]	; (8012a28 <USBD_SetConfig+0x148>)
 80129be:	781b      	ldrb	r3, [r3, #0]
 80129c0:	4619      	mov	r1, r3
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7ff f902 	bl	8011bcc <USBD_SetClassConfig>
 80129c8:	4603      	mov	r3, r0
 80129ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80129cc:	7bfb      	ldrb	r3, [r7, #15]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00f      	beq.n	80129f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80129d2:	6839      	ldr	r1, [r7, #0]
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f000 f903 	bl	8012be0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	4619      	mov	r1, r3
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f7ff f90e 	bl	8011c04 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2202      	movs	r2, #2
 80129ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80129f0:	e014      	b.n	8012a1c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	f000 f9bf 	bl	8012d76 <USBD_CtlSendStatus>
      break;
 80129f8:	e010      	b.n	8012a1c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80129fa:	6878      	ldr	r0, [r7, #4]
 80129fc:	f000 f9bb 	bl	8012d76 <USBD_CtlSendStatus>
      break;
 8012a00:	e00c      	b.n	8012a1c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012a02:	6839      	ldr	r1, [r7, #0]
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 f8eb 	bl	8012be0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012a0a:	4b07      	ldr	r3, [pc, #28]	; (8012a28 <USBD_SetConfig+0x148>)
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	4619      	mov	r1, r3
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f7ff f8f7 	bl	8011c04 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012a16:	2303      	movs	r3, #3
 8012a18:	73fb      	strb	r3, [r7, #15]
      break;
 8012a1a:	bf00      	nop
  }

  return ret;
 8012a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3710      	adds	r7, #16
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
 8012a26:	bf00      	nop
 8012a28:	24000c0c 	.word	0x24000c0c

08012a2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	88db      	ldrh	r3, [r3, #6]
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	d004      	beq.n	8012a48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012a3e:	6839      	ldr	r1, [r7, #0]
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f000 f8cd 	bl	8012be0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012a46:	e023      	b.n	8012a90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	2b02      	cmp	r3, #2
 8012a52:	dc02      	bgt.n	8012a5a <USBD_GetConfig+0x2e>
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	dc03      	bgt.n	8012a60 <USBD_GetConfig+0x34>
 8012a58:	e015      	b.n	8012a86 <USBD_GetConfig+0x5a>
 8012a5a:	2b03      	cmp	r3, #3
 8012a5c:	d00b      	beq.n	8012a76 <USBD_GetConfig+0x4a>
 8012a5e:	e012      	b.n	8012a86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2200      	movs	r2, #0
 8012a64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	3308      	adds	r3, #8
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f000 f927 	bl	8012cc2 <USBD_CtlSendData>
        break;
 8012a74:	e00c      	b.n	8012a90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	3304      	adds	r3, #4
 8012a7a:	2201      	movs	r2, #1
 8012a7c:	4619      	mov	r1, r3
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f000 f91f 	bl	8012cc2 <USBD_CtlSendData>
        break;
 8012a84:	e004      	b.n	8012a90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012a86:	6839      	ldr	r1, [r7, #0]
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f000 f8a9 	bl	8012be0 <USBD_CtlError>
        break;
 8012a8e:	bf00      	nop
}
 8012a90:	bf00      	nop
 8012a92:	3708      	adds	r7, #8
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b082      	sub	sp, #8
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	3b01      	subs	r3, #1
 8012aac:	2b02      	cmp	r3, #2
 8012aae:	d81e      	bhi.n	8012aee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	88db      	ldrh	r3, [r3, #6]
 8012ab4:	2b02      	cmp	r3, #2
 8012ab6:	d004      	beq.n	8012ac2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012ab8:	6839      	ldr	r1, [r7, #0]
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f000 f890 	bl	8012be0 <USBD_CtlError>
        break;
 8012ac0:	e01a      	b.n	8012af8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d005      	beq.n	8012ade <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	68db      	ldr	r3, [r3, #12]
 8012ad6:	f043 0202 	orr.w	r2, r3, #2
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	330c      	adds	r3, #12
 8012ae2:	2202      	movs	r2, #2
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f000 f8eb 	bl	8012cc2 <USBD_CtlSendData>
      break;
 8012aec:	e004      	b.n	8012af8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012aee:	6839      	ldr	r1, [r7, #0]
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f000 f875 	bl	8012be0 <USBD_CtlError>
      break;
 8012af6:	bf00      	nop
  }
}
 8012af8:	bf00      	nop
 8012afa:	3708      	adds	r7, #8
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	885b      	ldrh	r3, [r3, #2]
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	d106      	bne.n	8012b20 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2201      	movs	r2, #1
 8012b16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f000 f92b 	bl	8012d76 <USBD_CtlSendStatus>
  }
}
 8012b20:	bf00      	nop
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
 8012b30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b38:	b2db      	uxtb	r3, r3
 8012b3a:	3b01      	subs	r3, #1
 8012b3c:	2b02      	cmp	r3, #2
 8012b3e:	d80b      	bhi.n	8012b58 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	885b      	ldrh	r3, [r3, #2]
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d10c      	bne.n	8012b62 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f000 f910 	bl	8012d76 <USBD_CtlSendStatus>
      }
      break;
 8012b56:	e004      	b.n	8012b62 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012b58:	6839      	ldr	r1, [r7, #0]
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f000 f840 	bl	8012be0 <USBD_CtlError>
      break;
 8012b60:	e000      	b.n	8012b64 <USBD_ClrFeature+0x3c>
      break;
 8012b62:	bf00      	nop
  }
}
 8012b64:	bf00      	nop
 8012b66:	3708      	adds	r7, #8
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	781a      	ldrb	r2, [r3, #0]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	3301      	adds	r3, #1
 8012b86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	781a      	ldrb	r2, [r3, #0]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	3301      	adds	r3, #1
 8012b94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012b96:	68f8      	ldr	r0, [r7, #12]
 8012b98:	f7ff fabb 	bl	8012112 <SWAPBYTE>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	461a      	mov	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	3301      	adds	r3, #1
 8012bae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012bb0:	68f8      	ldr	r0, [r7, #12]
 8012bb2:	f7ff faae 	bl	8012112 <SWAPBYTE>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	461a      	mov	r2, r3
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	3301      	adds	r3, #1
 8012bc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012bca:	68f8      	ldr	r0, [r7, #12]
 8012bcc:	f7ff faa1 	bl	8012112 <SWAPBYTE>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	80da      	strh	r2, [r3, #6]
}
 8012bd8:	bf00      	nop
 8012bda:	3710      	adds	r7, #16
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012bea:	2180      	movs	r1, #128	; 0x80
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f002 f883 	bl	8014cf8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012bf2:	2100      	movs	r1, #0
 8012bf4:	6878      	ldr	r0, [r7, #4]
 8012bf6:	f002 f87f 	bl	8014cf8 <USBD_LL_StallEP>
}
 8012bfa:	bf00      	nop
 8012bfc:	3708      	adds	r7, #8
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}

08012c02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012c02:	b580      	push	{r7, lr}
 8012c04:	b086      	sub	sp, #24
 8012c06:	af00      	add	r7, sp, #0
 8012c08:	60f8      	str	r0, [r7, #12]
 8012c0a:	60b9      	str	r1, [r7, #8]
 8012c0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d036      	beq.n	8012c86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012c1c:	6938      	ldr	r0, [r7, #16]
 8012c1e:	f000 f836 	bl	8012c8e <USBD_GetLen>
 8012c22:	4603      	mov	r3, r0
 8012c24:	3301      	adds	r3, #1
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	005b      	lsls	r3, r3, #1
 8012c2a:	b29a      	uxth	r2, r3
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012c30:	7dfb      	ldrb	r3, [r7, #23]
 8012c32:	68ba      	ldr	r2, [r7, #8]
 8012c34:	4413      	add	r3, r2
 8012c36:	687a      	ldr	r2, [r7, #4]
 8012c38:	7812      	ldrb	r2, [r2, #0]
 8012c3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012c3c:	7dfb      	ldrb	r3, [r7, #23]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012c42:	7dfb      	ldrb	r3, [r7, #23]
 8012c44:	68ba      	ldr	r2, [r7, #8]
 8012c46:	4413      	add	r3, r2
 8012c48:	2203      	movs	r2, #3
 8012c4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012c4c:	7dfb      	ldrb	r3, [r7, #23]
 8012c4e:	3301      	adds	r3, #1
 8012c50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012c52:	e013      	b.n	8012c7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012c54:	7dfb      	ldrb	r3, [r7, #23]
 8012c56:	68ba      	ldr	r2, [r7, #8]
 8012c58:	4413      	add	r3, r2
 8012c5a:	693a      	ldr	r2, [r7, #16]
 8012c5c:	7812      	ldrb	r2, [r2, #0]
 8012c5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	3301      	adds	r3, #1
 8012c64:	613b      	str	r3, [r7, #16]
    idx++;
 8012c66:	7dfb      	ldrb	r3, [r7, #23]
 8012c68:	3301      	adds	r3, #1
 8012c6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012c6c:	7dfb      	ldrb	r3, [r7, #23]
 8012c6e:	68ba      	ldr	r2, [r7, #8]
 8012c70:	4413      	add	r3, r2
 8012c72:	2200      	movs	r2, #0
 8012c74:	701a      	strb	r2, [r3, #0]
    idx++;
 8012c76:	7dfb      	ldrb	r3, [r7, #23]
 8012c78:	3301      	adds	r3, #1
 8012c7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d1e7      	bne.n	8012c54 <USBD_GetString+0x52>
 8012c84:	e000      	b.n	8012c88 <USBD_GetString+0x86>
    return;
 8012c86:	bf00      	nop
  }
}
 8012c88:	3718      	adds	r7, #24
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}

08012c8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012c8e:	b480      	push	{r7}
 8012c90:	b085      	sub	sp, #20
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012c96:	2300      	movs	r3, #0
 8012c98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012c9e:	e005      	b.n	8012cac <USBD_GetLen+0x1e>
  {
    len++;
 8012ca0:	7bfb      	ldrb	r3, [r7, #15]
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	3301      	adds	r3, #1
 8012caa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d1f5      	bne.n	8012ca0 <USBD_GetLen+0x12>
  }

  return len;
 8012cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3714      	adds	r7, #20
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc0:	4770      	bx	lr

08012cc2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012cc2:	b580      	push	{r7, lr}
 8012cc4:	b084      	sub	sp, #16
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	60f8      	str	r0, [r7, #12]
 8012cca:	60b9      	str	r1, [r7, #8]
 8012ccc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2202      	movs	r2, #2
 8012cd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	687a      	ldr	r2, [r7, #4]
 8012cda:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	68ba      	ldr	r2, [r7, #8]
 8012ce6:	2100      	movs	r1, #0
 8012ce8:	68f8      	ldr	r0, [r7, #12]
 8012cea:	f002 f88e 	bl	8014e0a <USBD_LL_Transmit>

  return USBD_OK;
 8012cee:	2300      	movs	r3, #0
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3710      	adds	r7, #16
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}

08012cf8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b084      	sub	sp, #16
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	60f8      	str	r0, [r7, #12]
 8012d00:	60b9      	str	r1, [r7, #8]
 8012d02:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	68ba      	ldr	r2, [r7, #8]
 8012d08:	2100      	movs	r1, #0
 8012d0a:	68f8      	ldr	r0, [r7, #12]
 8012d0c:	f002 f87d 	bl	8014e0a <USBD_LL_Transmit>

  return USBD_OK;
 8012d10:	2300      	movs	r3, #0
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3710      	adds	r7, #16
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}

08012d1a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012d1a:	b580      	push	{r7, lr}
 8012d1c:	b084      	sub	sp, #16
 8012d1e:	af00      	add	r7, sp, #0
 8012d20:	60f8      	str	r0, [r7, #12]
 8012d22:	60b9      	str	r1, [r7, #8]
 8012d24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2203      	movs	r2, #3
 8012d2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	687a      	ldr	r2, [r7, #4]
 8012d32:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	687a      	ldr	r2, [r7, #4]
 8012d3a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	68ba      	ldr	r2, [r7, #8]
 8012d42:	2100      	movs	r1, #0
 8012d44:	68f8      	ldr	r0, [r7, #12]
 8012d46:	f002 f881 	bl	8014e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012d4a:	2300      	movs	r3, #0
}
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3710      	adds	r7, #16
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	60f8      	str	r0, [r7, #12]
 8012d5c:	60b9      	str	r1, [r7, #8]
 8012d5e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	68ba      	ldr	r2, [r7, #8]
 8012d64:	2100      	movs	r1, #0
 8012d66:	68f8      	ldr	r0, [r7, #12]
 8012d68:	f002 f870 	bl	8014e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012d6c:	2300      	movs	r3, #0
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3710      	adds	r7, #16
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}

08012d76 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012d76:	b580      	push	{r7, lr}
 8012d78:	b082      	sub	sp, #8
 8012d7a:	af00      	add	r7, sp, #0
 8012d7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2204      	movs	r2, #4
 8012d82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012d86:	2300      	movs	r3, #0
 8012d88:	2200      	movs	r2, #0
 8012d8a:	2100      	movs	r1, #0
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f002 f83c 	bl	8014e0a <USBD_LL_Transmit>

  return USBD_OK;
 8012d92:	2300      	movs	r3, #0
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3708      	adds	r7, #8
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}

08012d9c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2205      	movs	r2, #5
 8012da8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012dac:	2300      	movs	r3, #0
 8012dae:	2200      	movs	r2, #0
 8012db0:	2100      	movs	r1, #0
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f002 f84a 	bl	8014e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012db8:	2300      	movs	r3, #0
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3708      	adds	r7, #8
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}

08012dc2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012dc2:	b480      	push	{r7}
 8012dc4:	b085      	sub	sp, #20
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	4603      	mov	r3, r0
 8012dca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dd4:	2b84      	cmp	r3, #132	; 0x84
 8012dd6:	d005      	beq.n	8012de4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012dd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	4413      	add	r3, r2
 8012de0:	3303      	adds	r3, #3
 8012de2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012de4:	68fb      	ldr	r3, [r7, #12]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3714      	adds	r7, #20
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr

08012df2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012df2:	b580      	push	{r7, lr}
 8012df4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012df6:	f000 fc17 	bl	8013628 <vTaskStartScheduler>
  
  return osOK;
 8012dfa:	2300      	movs	r3, #0
}
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	bd80      	pop	{r7, pc}

08012e00 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e02:	b089      	sub	sp, #36	; 0x24
 8012e04:	af04      	add	r7, sp, #16
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	695b      	ldr	r3, [r3, #20]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d020      	beq.n	8012e54 <osThreadCreate+0x54>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	699b      	ldr	r3, [r3, #24]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d01c      	beq.n	8012e54 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	685c      	ldr	r4, [r3, #4]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681d      	ldr	r5, [r3, #0]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	691e      	ldr	r6, [r3, #16]
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7ff ffc8 	bl	8012dc2 <makeFreeRtosPriority>
 8012e32:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	695b      	ldr	r3, [r3, #20]
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012e3c:	9202      	str	r2, [sp, #8]
 8012e3e:	9301      	str	r3, [sp, #4]
 8012e40:	9100      	str	r1, [sp, #0]
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	4632      	mov	r2, r6
 8012e46:	4629      	mov	r1, r5
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f000 f8ed 	bl	8013028 <xTaskCreateStatic>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	60fb      	str	r3, [r7, #12]
 8012e52:	e01c      	b.n	8012e8e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	685c      	ldr	r4, [r3, #4]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012e60:	b29e      	uxth	r6, r3
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7ff ffaa 	bl	8012dc2 <makeFreeRtosPriority>
 8012e6e:	4602      	mov	r2, r0
 8012e70:	f107 030c 	add.w	r3, r7, #12
 8012e74:	9301      	str	r3, [sp, #4]
 8012e76:	9200      	str	r2, [sp, #0]
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	4632      	mov	r2, r6
 8012e7c:	4629      	mov	r1, r5
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f000 f92f 	bl	80130e2 <xTaskCreate>
 8012e84:	4603      	mov	r3, r0
 8012e86:	2b01      	cmp	r3, #1
 8012e88:	d001      	beq.n	8012e8e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	e000      	b.n	8012e90 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3714      	adds	r7, #20
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012e98 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b084      	sub	sp, #16
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d001      	beq.n	8012eae <osDelay+0x16>
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	e000      	b.n	8012eb0 <osDelay+0x18>
 8012eae:	2301      	movs	r3, #1
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f000 fa63 	bl	801337c <vTaskDelay>
  
  return osOK;
 8012eb6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}

08012ec0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f103 0208 	add.w	r2, r3, #8
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ed8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f103 0208 	add.w	r2, r3, #8
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f103 0208 	add.w	r2, r3, #8
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ef4:	bf00      	nop
 8012ef6:	370c      	adds	r7, #12
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efe:	4770      	bx	lr

08012f00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012f00:	b480      	push	{r7}
 8012f02:	b083      	sub	sp, #12
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012f0e:	bf00      	nop
 8012f10:	370c      	adds	r7, #12
 8012f12:	46bd      	mov	sp, r7
 8012f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f18:	4770      	bx	lr

08012f1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f1a:	b480      	push	{r7}
 8012f1c:	b085      	sub	sp, #20
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
 8012f22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	68fa      	ldr	r2, [r7, #12]
 8012f2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	689a      	ldr	r2, [r3, #8]
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	689b      	ldr	r3, [r3, #8]
 8012f3c:	683a      	ldr	r2, [r7, #0]
 8012f3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	683a      	ldr	r2, [r7, #0]
 8012f44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	1c5a      	adds	r2, r3, #1
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	601a      	str	r2, [r3, #0]
}
 8012f56:	bf00      	nop
 8012f58:	3714      	adds	r7, #20
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f60:	4770      	bx	lr

08012f62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f62:	b480      	push	{r7}
 8012f64:	b085      	sub	sp, #20
 8012f66:	af00      	add	r7, sp, #0
 8012f68:	6078      	str	r0, [r7, #4]
 8012f6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f78:	d103      	bne.n	8012f82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	691b      	ldr	r3, [r3, #16]
 8012f7e:	60fb      	str	r3, [r7, #12]
 8012f80:	e00c      	b.n	8012f9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	3308      	adds	r3, #8
 8012f86:	60fb      	str	r3, [r7, #12]
 8012f88:	e002      	b.n	8012f90 <vListInsert+0x2e>
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	60fb      	str	r3, [r7, #12]
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	68ba      	ldr	r2, [r7, #8]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d2f6      	bcs.n	8012f8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	685a      	ldr	r2, [r3, #4]
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	683a      	ldr	r2, [r7, #0]
 8012faa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	68fa      	ldr	r2, [r7, #12]
 8012fb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	1c5a      	adds	r2, r3, #1
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	601a      	str	r2, [r3, #0]
}
 8012fc8:	bf00      	nop
 8012fca:	3714      	adds	r7, #20
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd2:	4770      	bx	lr

08012fd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b085      	sub	sp, #20
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	691b      	ldr	r3, [r3, #16]
 8012fe0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	687a      	ldr	r2, [r7, #4]
 8012fe8:	6892      	ldr	r2, [r2, #8]
 8012fea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	689b      	ldr	r3, [r3, #8]
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	6852      	ldr	r2, [r2, #4]
 8012ff4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	687a      	ldr	r2, [r7, #4]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d103      	bne.n	8013008 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	689a      	ldr	r2, [r3, #8]
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2200      	movs	r2, #0
 801300c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	1e5a      	subs	r2, r3, #1
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	681b      	ldr	r3, [r3, #0]
}
 801301c:	4618      	mov	r0, r3
 801301e:	3714      	adds	r7, #20
 8013020:	46bd      	mov	sp, r7
 8013022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013026:	4770      	bx	lr

08013028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013028:	b580      	push	{r7, lr}
 801302a:	b08e      	sub	sp, #56	; 0x38
 801302c:	af04      	add	r7, sp, #16
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	607a      	str	r2, [r7, #4]
 8013034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013038:	2b00      	cmp	r3, #0
 801303a:	d10a      	bne.n	8013052 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013040:	f383 8811 	msr	BASEPRI, r3
 8013044:	f3bf 8f6f 	isb	sy
 8013048:	f3bf 8f4f 	dsb	sy
 801304c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801304e:	bf00      	nop
 8013050:	e7fe      	b.n	8013050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013054:	2b00      	cmp	r3, #0
 8013056:	d10a      	bne.n	801306e <xTaskCreateStatic+0x46>
	__asm volatile
 8013058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801305c:	f383 8811 	msr	BASEPRI, r3
 8013060:	f3bf 8f6f 	isb	sy
 8013064:	f3bf 8f4f 	dsb	sy
 8013068:	61fb      	str	r3, [r7, #28]
}
 801306a:	bf00      	nop
 801306c:	e7fe      	b.n	801306c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801306e:	23b4      	movs	r3, #180	; 0xb4
 8013070:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	2bb4      	cmp	r3, #180	; 0xb4
 8013076:	d00a      	beq.n	801308e <xTaskCreateStatic+0x66>
	__asm volatile
 8013078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307c:	f383 8811 	msr	BASEPRI, r3
 8013080:	f3bf 8f6f 	isb	sy
 8013084:	f3bf 8f4f 	dsb	sy
 8013088:	61bb      	str	r3, [r7, #24]
}
 801308a:	bf00      	nop
 801308c:	e7fe      	b.n	801308c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801308e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013092:	2b00      	cmp	r3, #0
 8013094:	d01e      	beq.n	80130d4 <xTaskCreateStatic+0xac>
 8013096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013098:	2b00      	cmp	r3, #0
 801309a:	d01b      	beq.n	80130d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80130a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80130a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a8:	2202      	movs	r2, #2
 80130aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80130ae:	2300      	movs	r3, #0
 80130b0:	9303      	str	r3, [sp, #12]
 80130b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b4:	9302      	str	r3, [sp, #8]
 80130b6:	f107 0314 	add.w	r3, r7, #20
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	68b9      	ldr	r1, [r7, #8]
 80130c6:	68f8      	ldr	r0, [r7, #12]
 80130c8:	f000 f850 	bl	801316c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80130cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130ce:	f000 f8eb 	bl	80132a8 <prvAddNewTaskToReadyList>
 80130d2:	e001      	b.n	80130d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80130d4:	2300      	movs	r3, #0
 80130d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80130d8:	697b      	ldr	r3, [r7, #20]
	}
 80130da:	4618      	mov	r0, r3
 80130dc:	3728      	adds	r7, #40	; 0x28
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}

080130e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80130e2:	b580      	push	{r7, lr}
 80130e4:	b08c      	sub	sp, #48	; 0x30
 80130e6:	af04      	add	r7, sp, #16
 80130e8:	60f8      	str	r0, [r7, #12]
 80130ea:	60b9      	str	r1, [r7, #8]
 80130ec:	603b      	str	r3, [r7, #0]
 80130ee:	4613      	mov	r3, r2
 80130f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80130f2:	88fb      	ldrh	r3, [r7, #6]
 80130f4:	009b      	lsls	r3, r3, #2
 80130f6:	4618      	mov	r0, r3
 80130f8:	f001 f816 	bl	8014128 <pvPortMalloc>
 80130fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d00e      	beq.n	8013122 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013104:	20b4      	movs	r0, #180	; 0xb4
 8013106:	f001 f80f 	bl	8014128 <pvPortMalloc>
 801310a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d003      	beq.n	801311a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013112:	69fb      	ldr	r3, [r7, #28]
 8013114:	697a      	ldr	r2, [r7, #20]
 8013116:	631a      	str	r2, [r3, #48]	; 0x30
 8013118:	e005      	b.n	8013126 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801311a:	6978      	ldr	r0, [r7, #20]
 801311c:	f001 f8d0 	bl	80142c0 <vPortFree>
 8013120:	e001      	b.n	8013126 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013122:	2300      	movs	r3, #0
 8013124:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013126:	69fb      	ldr	r3, [r7, #28]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d017      	beq.n	801315c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	2200      	movs	r2, #0
 8013130:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013134:	88fa      	ldrh	r2, [r7, #6]
 8013136:	2300      	movs	r3, #0
 8013138:	9303      	str	r3, [sp, #12]
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	9302      	str	r3, [sp, #8]
 801313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013140:	9301      	str	r3, [sp, #4]
 8013142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013144:	9300      	str	r3, [sp, #0]
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	68b9      	ldr	r1, [r7, #8]
 801314a:	68f8      	ldr	r0, [r7, #12]
 801314c:	f000 f80e 	bl	801316c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013150:	69f8      	ldr	r0, [r7, #28]
 8013152:	f000 f8a9 	bl	80132a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013156:	2301      	movs	r3, #1
 8013158:	61bb      	str	r3, [r7, #24]
 801315a:	e002      	b.n	8013162 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801315c:	f04f 33ff 	mov.w	r3, #4294967295
 8013160:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013162:	69bb      	ldr	r3, [r7, #24]
	}
 8013164:	4618      	mov	r0, r3
 8013166:	3720      	adds	r7, #32
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b088      	sub	sp, #32
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
 8013178:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801317e:	6879      	ldr	r1, [r7, #4]
 8013180:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013184:	440b      	add	r3, r1
 8013186:	009b      	lsls	r3, r3, #2
 8013188:	4413      	add	r3, r2
 801318a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	f023 0307 	bic.w	r3, r3, #7
 8013192:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	f003 0307 	and.w	r3, r3, #7
 801319a:	2b00      	cmp	r3, #0
 801319c:	d00a      	beq.n	80131b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 801319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a2:	f383 8811 	msr	BASEPRI, r3
 80131a6:	f3bf 8f6f 	isb	sy
 80131aa:	f3bf 8f4f 	dsb	sy
 80131ae:	617b      	str	r3, [r7, #20]
}
 80131b0:	bf00      	nop
 80131b2:	e7fe      	b.n	80131b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d01f      	beq.n	80131fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80131ba:	2300      	movs	r3, #0
 80131bc:	61fb      	str	r3, [r7, #28]
 80131be:	e012      	b.n	80131e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80131c0:	68ba      	ldr	r2, [r7, #8]
 80131c2:	69fb      	ldr	r3, [r7, #28]
 80131c4:	4413      	add	r3, r2
 80131c6:	7819      	ldrb	r1, [r3, #0]
 80131c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131ca:	69fb      	ldr	r3, [r7, #28]
 80131cc:	4413      	add	r3, r2
 80131ce:	3334      	adds	r3, #52	; 0x34
 80131d0:	460a      	mov	r2, r1
 80131d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80131d4:	68ba      	ldr	r2, [r7, #8]
 80131d6:	69fb      	ldr	r3, [r7, #28]
 80131d8:	4413      	add	r3, r2
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d006      	beq.n	80131ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80131e0:	69fb      	ldr	r3, [r7, #28]
 80131e2:	3301      	adds	r3, #1
 80131e4:	61fb      	str	r3, [r7, #28]
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	2b0f      	cmp	r3, #15
 80131ea:	d9e9      	bls.n	80131c0 <prvInitialiseNewTask+0x54>
 80131ec:	e000      	b.n	80131f0 <prvInitialiseNewTask+0x84>
			{
				break;
 80131ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80131f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f2:	2200      	movs	r2, #0
 80131f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80131f8:	e003      	b.n	8013202 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80131fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fc:	2200      	movs	r2, #0
 80131fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013204:	2b06      	cmp	r3, #6
 8013206:	d901      	bls.n	801320c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013208:	2306      	movs	r3, #6
 801320a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013210:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013216:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801321a:	2200      	movs	r2, #0
 801321c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013220:	3304      	adds	r3, #4
 8013222:	4618      	mov	r0, r3
 8013224:	f7ff fe6c 	bl	8012f00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801322a:	3318      	adds	r3, #24
 801322c:	4618      	mov	r0, r3
 801322e:	f7ff fe67 	bl	8012f00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013236:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801323a:	f1c3 0207 	rsb	r2, r3, #7
 801323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013240:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013246:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801324a:	2200      	movs	r2, #0
 801324c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013252:	2200      	movs	r2, #0
 8013254:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801325a:	334c      	adds	r3, #76	; 0x4c
 801325c:	2260      	movs	r2, #96	; 0x60
 801325e:	2100      	movs	r1, #0
 8013260:	4618      	mov	r0, r3
 8013262:	f001 ffa0 	bl	80151a6 <memset>
 8013266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013268:	4a0c      	ldr	r2, [pc, #48]	; (801329c <prvInitialiseNewTask+0x130>)
 801326a:	651a      	str	r2, [r3, #80]	; 0x50
 801326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801326e:	4a0c      	ldr	r2, [pc, #48]	; (80132a0 <prvInitialiseNewTask+0x134>)
 8013270:	655a      	str	r2, [r3, #84]	; 0x54
 8013272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013274:	4a0b      	ldr	r2, [pc, #44]	; (80132a4 <prvInitialiseNewTask+0x138>)
 8013276:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013278:	683a      	ldr	r2, [r7, #0]
 801327a:	68f9      	ldr	r1, [r7, #12]
 801327c:	69b8      	ldr	r0, [r7, #24]
 801327e:	f000 fd41 	bl	8013d04 <pxPortInitialiseStack>
 8013282:	4602      	mov	r2, r0
 8013284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013286:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328a:	2b00      	cmp	r3, #0
 801328c:	d002      	beq.n	8013294 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013292:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013294:	bf00      	nop
 8013296:	3720      	adds	r7, #32
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	0802338c 	.word	0x0802338c
 80132a0:	080233ac 	.word	0x080233ac
 80132a4:	0802336c 	.word	0x0802336c

080132a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80132b0:	f000 fe58 	bl	8013f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80132b4:	4b2a      	ldr	r3, [pc, #168]	; (8013360 <prvAddNewTaskToReadyList+0xb8>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	3301      	adds	r3, #1
 80132ba:	4a29      	ldr	r2, [pc, #164]	; (8013360 <prvAddNewTaskToReadyList+0xb8>)
 80132bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80132be:	4b29      	ldr	r3, [pc, #164]	; (8013364 <prvAddNewTaskToReadyList+0xbc>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d109      	bne.n	80132da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80132c6:	4a27      	ldr	r2, [pc, #156]	; (8013364 <prvAddNewTaskToReadyList+0xbc>)
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80132cc:	4b24      	ldr	r3, [pc, #144]	; (8013360 <prvAddNewTaskToReadyList+0xb8>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	2b01      	cmp	r3, #1
 80132d2:	d110      	bne.n	80132f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80132d4:	f000 fbee 	bl	8013ab4 <prvInitialiseTaskLists>
 80132d8:	e00d      	b.n	80132f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80132da:	4b23      	ldr	r3, [pc, #140]	; (8013368 <prvAddNewTaskToReadyList+0xc0>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d109      	bne.n	80132f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80132e2:	4b20      	ldr	r3, [pc, #128]	; (8013364 <prvAddNewTaskToReadyList+0xbc>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d802      	bhi.n	80132f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80132f0:	4a1c      	ldr	r2, [pc, #112]	; (8013364 <prvAddNewTaskToReadyList+0xbc>)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80132f6:	4b1d      	ldr	r3, [pc, #116]	; (801336c <prvAddNewTaskToReadyList+0xc4>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	3301      	adds	r3, #1
 80132fc:	4a1b      	ldr	r2, [pc, #108]	; (801336c <prvAddNewTaskToReadyList+0xc4>)
 80132fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013304:	2201      	movs	r2, #1
 8013306:	409a      	lsls	r2, r3
 8013308:	4b19      	ldr	r3, [pc, #100]	; (8013370 <prvAddNewTaskToReadyList+0xc8>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	4313      	orrs	r3, r2
 801330e:	4a18      	ldr	r2, [pc, #96]	; (8013370 <prvAddNewTaskToReadyList+0xc8>)
 8013310:	6013      	str	r3, [r2, #0]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013316:	4613      	mov	r3, r2
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	4413      	add	r3, r2
 801331c:	009b      	lsls	r3, r3, #2
 801331e:	4a15      	ldr	r2, [pc, #84]	; (8013374 <prvAddNewTaskToReadyList+0xcc>)
 8013320:	441a      	add	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	3304      	adds	r3, #4
 8013326:	4619      	mov	r1, r3
 8013328:	4610      	mov	r0, r2
 801332a:	f7ff fdf6 	bl	8012f1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801332e:	f000 fe49 	bl	8013fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013332:	4b0d      	ldr	r3, [pc, #52]	; (8013368 <prvAddNewTaskToReadyList+0xc0>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d00e      	beq.n	8013358 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801333a:	4b0a      	ldr	r3, [pc, #40]	; (8013364 <prvAddNewTaskToReadyList+0xbc>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013344:	429a      	cmp	r2, r3
 8013346:	d207      	bcs.n	8013358 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013348:	4b0b      	ldr	r3, [pc, #44]	; (8013378 <prvAddNewTaskToReadyList+0xd0>)
 801334a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801334e:	601a      	str	r2, [r3, #0]
 8013350:	f3bf 8f4f 	dsb	sy
 8013354:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013358:	bf00      	nop
 801335a:	3708      	adds	r7, #8
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	24000d10 	.word	0x24000d10
 8013364:	24000c10 	.word	0x24000c10
 8013368:	24000d1c 	.word	0x24000d1c
 801336c:	24000d2c 	.word	0x24000d2c
 8013370:	24000d18 	.word	0x24000d18
 8013374:	24000c14 	.word	0x24000c14
 8013378:	e000ed04 	.word	0xe000ed04

0801337c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013384:	2300      	movs	r3, #0
 8013386:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d017      	beq.n	80133be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801338e:	4b13      	ldr	r3, [pc, #76]	; (80133dc <vTaskDelay+0x60>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d00a      	beq.n	80133ac <vTaskDelay+0x30>
	__asm volatile
 8013396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801339a:	f383 8811 	msr	BASEPRI, r3
 801339e:	f3bf 8f6f 	isb	sy
 80133a2:	f3bf 8f4f 	dsb	sy
 80133a6:	60bb      	str	r3, [r7, #8]
}
 80133a8:	bf00      	nop
 80133aa:	e7fe      	b.n	80133aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80133ac:	f000 f9a6 	bl	80136fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80133b0:	2100      	movs	r1, #0
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f000 fc40 	bl	8013c38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80133b8:	f000 f9ae 	bl	8013718 <xTaskResumeAll>
 80133bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d107      	bne.n	80133d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80133c4:	4b06      	ldr	r3, [pc, #24]	; (80133e0 <vTaskDelay+0x64>)
 80133c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133ca:	601a      	str	r2, [r3, #0]
 80133cc:	f3bf 8f4f 	dsb	sy
 80133d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80133d4:	bf00      	nop
 80133d6:	3710      	adds	r7, #16
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}
 80133dc:	24000d38 	.word	0x24000d38
 80133e0:	e000ed04 	.word	0xe000ed04

080133e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80133ec:	f000 fdba 	bl	8013f64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d102      	bne.n	80133fc <vTaskSuspend+0x18>
 80133f6:	4b3c      	ldr	r3, [pc, #240]	; (80134e8 <vTaskSuspend+0x104>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	e000      	b.n	80133fe <vTaskSuspend+0x1a>
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	3304      	adds	r3, #4
 8013404:	4618      	mov	r0, r3
 8013406:	f7ff fde5 	bl	8012fd4 <uxListRemove>
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d115      	bne.n	801343c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013414:	4935      	ldr	r1, [pc, #212]	; (80134ec <vTaskSuspend+0x108>)
 8013416:	4613      	mov	r3, r2
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	4413      	add	r3, r2
 801341c:	009b      	lsls	r3, r3, #2
 801341e:	440b      	add	r3, r1
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d10a      	bne.n	801343c <vTaskSuspend+0x58>
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801342a:	2201      	movs	r2, #1
 801342c:	fa02 f303 	lsl.w	r3, r2, r3
 8013430:	43da      	mvns	r2, r3
 8013432:	4b2f      	ldr	r3, [pc, #188]	; (80134f0 <vTaskSuspend+0x10c>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	4013      	ands	r3, r2
 8013438:	4a2d      	ldr	r2, [pc, #180]	; (80134f0 <vTaskSuspend+0x10c>)
 801343a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013440:	2b00      	cmp	r3, #0
 8013442:	d004      	beq.n	801344e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	3318      	adds	r3, #24
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff fdc3 	bl	8012fd4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	3304      	adds	r3, #4
 8013452:	4619      	mov	r1, r3
 8013454:	4827      	ldr	r0, [pc, #156]	; (80134f4 <vTaskSuspend+0x110>)
 8013456:	f7ff fd60 	bl	8012f1a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8013460:	b2db      	uxtb	r3, r3
 8013462:	2b01      	cmp	r3, #1
 8013464:	d103      	bne.n	801346e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2200      	movs	r2, #0
 801346a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801346e:	f000 fda9 	bl	8013fc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013472:	4b21      	ldr	r3, [pc, #132]	; (80134f8 <vTaskSuspend+0x114>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d005      	beq.n	8013486 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801347a:	f000 fd73 	bl	8013f64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801347e:	f000 fbbb 	bl	8013bf8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013482:	f000 fd9f 	bl	8013fc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013486:	4b18      	ldr	r3, [pc, #96]	; (80134e8 <vTaskSuspend+0x104>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	68fa      	ldr	r2, [r7, #12]
 801348c:	429a      	cmp	r2, r3
 801348e:	d127      	bne.n	80134e0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8013490:	4b19      	ldr	r3, [pc, #100]	; (80134f8 <vTaskSuspend+0x114>)
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d017      	beq.n	80134c8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013498:	4b18      	ldr	r3, [pc, #96]	; (80134fc <vTaskSuspend+0x118>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d00a      	beq.n	80134b6 <vTaskSuspend+0xd2>
	__asm volatile
 80134a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a4:	f383 8811 	msr	BASEPRI, r3
 80134a8:	f3bf 8f6f 	isb	sy
 80134ac:	f3bf 8f4f 	dsb	sy
 80134b0:	60bb      	str	r3, [r7, #8]
}
 80134b2:	bf00      	nop
 80134b4:	e7fe      	b.n	80134b4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80134b6:	4b12      	ldr	r3, [pc, #72]	; (8013500 <vTaskSuspend+0x11c>)
 80134b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134bc:	601a      	str	r2, [r3, #0]
 80134be:	f3bf 8f4f 	dsb	sy
 80134c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80134c6:	e00b      	b.n	80134e0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80134c8:	4b0a      	ldr	r3, [pc, #40]	; (80134f4 <vTaskSuspend+0x110>)
 80134ca:	681a      	ldr	r2, [r3, #0]
 80134cc:	4b0d      	ldr	r3, [pc, #52]	; (8013504 <vTaskSuspend+0x120>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d103      	bne.n	80134dc <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80134d4:	4b04      	ldr	r3, [pc, #16]	; (80134e8 <vTaskSuspend+0x104>)
 80134d6:	2200      	movs	r2, #0
 80134d8:	601a      	str	r2, [r3, #0]
	}
 80134da:	e001      	b.n	80134e0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80134dc:	f000 fa70 	bl	80139c0 <vTaskSwitchContext>
	}
 80134e0:	bf00      	nop
 80134e2:	3710      	adds	r7, #16
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}
 80134e8:	24000c10 	.word	0x24000c10
 80134ec:	24000c14 	.word	0x24000c14
 80134f0:	24000d18 	.word	0x24000d18
 80134f4:	24000cfc 	.word	0x24000cfc
 80134f8:	24000d1c 	.word	0x24000d1c
 80134fc:	24000d38 	.word	0x24000d38
 8013500:	e000ed04 	.word	0xe000ed04
 8013504:	24000d10 	.word	0x24000d10

08013508 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013508:	b480      	push	{r7}
 801350a:	b087      	sub	sp, #28
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013510:	2300      	movs	r3, #0
 8013512:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d10a      	bne.n	8013534 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013522:	f383 8811 	msr	BASEPRI, r3
 8013526:	f3bf 8f6f 	isb	sy
 801352a:	f3bf 8f4f 	dsb	sy
 801352e:	60fb      	str	r3, [r7, #12]
}
 8013530:	bf00      	nop
 8013532:	e7fe      	b.n	8013532 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	695b      	ldr	r3, [r3, #20]
 8013538:	4a0a      	ldr	r2, [pc, #40]	; (8013564 <prvTaskIsTaskSuspended+0x5c>)
 801353a:	4293      	cmp	r3, r2
 801353c:	d10a      	bne.n	8013554 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013542:	4a09      	ldr	r2, [pc, #36]	; (8013568 <prvTaskIsTaskSuspended+0x60>)
 8013544:	4293      	cmp	r3, r2
 8013546:	d005      	beq.n	8013554 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801354c:	2b00      	cmp	r3, #0
 801354e:	d101      	bne.n	8013554 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8013550:	2301      	movs	r3, #1
 8013552:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013554:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013556:	4618      	mov	r0, r3
 8013558:	371c      	adds	r7, #28
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr
 8013562:	bf00      	nop
 8013564:	24000cfc 	.word	0x24000cfc
 8013568:	24000cd0 	.word	0x24000cd0

0801356c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801356c:	b580      	push	{r7, lr}
 801356e:	b084      	sub	sp, #16
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d10a      	bne.n	8013594 <vTaskResume+0x28>
	__asm volatile
 801357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013582:	f383 8811 	msr	BASEPRI, r3
 8013586:	f3bf 8f6f 	isb	sy
 801358a:	f3bf 8f4f 	dsb	sy
 801358e:	60bb      	str	r3, [r7, #8]
}
 8013590:	bf00      	nop
 8013592:	e7fe      	b.n	8013592 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8013594:	4b20      	ldr	r3, [pc, #128]	; (8013618 <vTaskResume+0xac>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	429a      	cmp	r2, r3
 801359c:	d037      	beq.n	801360e <vTaskResume+0xa2>
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d034      	beq.n	801360e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80135a4:	f000 fcde 	bl	8013f64 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80135a8:	68f8      	ldr	r0, [r7, #12]
 80135aa:	f7ff ffad 	bl	8013508 <prvTaskIsTaskSuspended>
 80135ae:	4603      	mov	r3, r0
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d02a      	beq.n	801360a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	3304      	adds	r3, #4
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7ff fd0b 	bl	8012fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135c2:	2201      	movs	r2, #1
 80135c4:	409a      	lsls	r2, r3
 80135c6:	4b15      	ldr	r3, [pc, #84]	; (801361c <vTaskResume+0xb0>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	4313      	orrs	r3, r2
 80135cc:	4a13      	ldr	r2, [pc, #76]	; (801361c <vTaskResume+0xb0>)
 80135ce:	6013      	str	r3, [r2, #0]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135d4:	4613      	mov	r3, r2
 80135d6:	009b      	lsls	r3, r3, #2
 80135d8:	4413      	add	r3, r2
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	4a10      	ldr	r2, [pc, #64]	; (8013620 <vTaskResume+0xb4>)
 80135de:	441a      	add	r2, r3
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	3304      	adds	r3, #4
 80135e4:	4619      	mov	r1, r3
 80135e6:	4610      	mov	r0, r2
 80135e8:	f7ff fc97 	bl	8012f1a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135f0:	4b09      	ldr	r3, [pc, #36]	; (8013618 <vTaskResume+0xac>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d307      	bcc.n	801360a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80135fa:	4b0a      	ldr	r3, [pc, #40]	; (8013624 <vTaskResume+0xb8>)
 80135fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013600:	601a      	str	r2, [r3, #0]
 8013602:	f3bf 8f4f 	dsb	sy
 8013606:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801360a:	f000 fcdb 	bl	8013fc4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801360e:	bf00      	nop
 8013610:	3710      	adds	r7, #16
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	24000c10 	.word	0x24000c10
 801361c:	24000d18 	.word	0x24000d18
 8013620:	24000c14 	.word	0x24000c14
 8013624:	e000ed04 	.word	0xe000ed04

08013628 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b08a      	sub	sp, #40	; 0x28
 801362c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801362e:	2300      	movs	r3, #0
 8013630:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013632:	2300      	movs	r3, #0
 8013634:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013636:	463a      	mov	r2, r7
 8013638:	1d39      	adds	r1, r7, #4
 801363a:	f107 0308 	add.w	r3, r7, #8
 801363e:	4618      	mov	r0, r3
 8013640:	f7ed fae8 	bl	8000c14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013644:	6839      	ldr	r1, [r7, #0]
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	68ba      	ldr	r2, [r7, #8]
 801364a:	9202      	str	r2, [sp, #8]
 801364c:	9301      	str	r3, [sp, #4]
 801364e:	2300      	movs	r3, #0
 8013650:	9300      	str	r3, [sp, #0]
 8013652:	2300      	movs	r3, #0
 8013654:	460a      	mov	r2, r1
 8013656:	4921      	ldr	r1, [pc, #132]	; (80136dc <vTaskStartScheduler+0xb4>)
 8013658:	4821      	ldr	r0, [pc, #132]	; (80136e0 <vTaskStartScheduler+0xb8>)
 801365a:	f7ff fce5 	bl	8013028 <xTaskCreateStatic>
 801365e:	4603      	mov	r3, r0
 8013660:	4a20      	ldr	r2, [pc, #128]	; (80136e4 <vTaskStartScheduler+0xbc>)
 8013662:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013664:	4b1f      	ldr	r3, [pc, #124]	; (80136e4 <vTaskStartScheduler+0xbc>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d002      	beq.n	8013672 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801366c:	2301      	movs	r3, #1
 801366e:	617b      	str	r3, [r7, #20]
 8013670:	e001      	b.n	8013676 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013672:	2300      	movs	r3, #0
 8013674:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013676:	697b      	ldr	r3, [r7, #20]
 8013678:	2b01      	cmp	r3, #1
 801367a:	d11b      	bne.n	80136b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 801367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013680:	f383 8811 	msr	BASEPRI, r3
 8013684:	f3bf 8f6f 	isb	sy
 8013688:	f3bf 8f4f 	dsb	sy
 801368c:	613b      	str	r3, [r7, #16]
}
 801368e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013690:	4b15      	ldr	r3, [pc, #84]	; (80136e8 <vTaskStartScheduler+0xc0>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	334c      	adds	r3, #76	; 0x4c
 8013696:	4a15      	ldr	r2, [pc, #84]	; (80136ec <vTaskStartScheduler+0xc4>)
 8013698:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801369a:	4b15      	ldr	r3, [pc, #84]	; (80136f0 <vTaskStartScheduler+0xc8>)
 801369c:	f04f 32ff 	mov.w	r2, #4294967295
 80136a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80136a2:	4b14      	ldr	r3, [pc, #80]	; (80136f4 <vTaskStartScheduler+0xcc>)
 80136a4:	2201      	movs	r2, #1
 80136a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80136a8:	4b13      	ldr	r3, [pc, #76]	; (80136f8 <vTaskStartScheduler+0xd0>)
 80136aa:	2200      	movs	r2, #0
 80136ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80136ae:	f000 fbb7 	bl	8013e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80136b2:	e00e      	b.n	80136d2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136ba:	d10a      	bne.n	80136d2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80136bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c0:	f383 8811 	msr	BASEPRI, r3
 80136c4:	f3bf 8f6f 	isb	sy
 80136c8:	f3bf 8f4f 	dsb	sy
 80136cc:	60fb      	str	r3, [r7, #12]
}
 80136ce:	bf00      	nop
 80136d0:	e7fe      	b.n	80136d0 <vTaskStartScheduler+0xa8>
}
 80136d2:	bf00      	nop
 80136d4:	3718      	adds	r7, #24
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	0801803c 	.word	0x0801803c
 80136e0:	08013a85 	.word	0x08013a85
 80136e4:	24000d34 	.word	0x24000d34
 80136e8:	24000c10 	.word	0x24000c10
 80136ec:	2400025c 	.word	0x2400025c
 80136f0:	24000d30 	.word	0x24000d30
 80136f4:	24000d1c 	.word	0x24000d1c
 80136f8:	24000d14 	.word	0x24000d14

080136fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80136fc:	b480      	push	{r7}
 80136fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013700:	4b04      	ldr	r3, [pc, #16]	; (8013714 <vTaskSuspendAll+0x18>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	3301      	adds	r3, #1
 8013706:	4a03      	ldr	r2, [pc, #12]	; (8013714 <vTaskSuspendAll+0x18>)
 8013708:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801370a:	bf00      	nop
 801370c:	46bd      	mov	sp, r7
 801370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013712:	4770      	bx	lr
 8013714:	24000d38 	.word	0x24000d38

08013718 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801371e:	2300      	movs	r3, #0
 8013720:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013722:	2300      	movs	r3, #0
 8013724:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013726:	4b41      	ldr	r3, [pc, #260]	; (801382c <xTaskResumeAll+0x114>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d10a      	bne.n	8013744 <xTaskResumeAll+0x2c>
	__asm volatile
 801372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013732:	f383 8811 	msr	BASEPRI, r3
 8013736:	f3bf 8f6f 	isb	sy
 801373a:	f3bf 8f4f 	dsb	sy
 801373e:	603b      	str	r3, [r7, #0]
}
 8013740:	bf00      	nop
 8013742:	e7fe      	b.n	8013742 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013744:	f000 fc0e 	bl	8013f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013748:	4b38      	ldr	r3, [pc, #224]	; (801382c <xTaskResumeAll+0x114>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	3b01      	subs	r3, #1
 801374e:	4a37      	ldr	r2, [pc, #220]	; (801382c <xTaskResumeAll+0x114>)
 8013750:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013752:	4b36      	ldr	r3, [pc, #216]	; (801382c <xTaskResumeAll+0x114>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d161      	bne.n	801381e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801375a:	4b35      	ldr	r3, [pc, #212]	; (8013830 <xTaskResumeAll+0x118>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d05d      	beq.n	801381e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013762:	e02e      	b.n	80137c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013764:	4b33      	ldr	r3, [pc, #204]	; (8013834 <xTaskResumeAll+0x11c>)
 8013766:	68db      	ldr	r3, [r3, #12]
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	3318      	adds	r3, #24
 8013770:	4618      	mov	r0, r3
 8013772:	f7ff fc2f 	bl	8012fd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	3304      	adds	r3, #4
 801377a:	4618      	mov	r0, r3
 801377c:	f7ff fc2a 	bl	8012fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013784:	2201      	movs	r2, #1
 8013786:	409a      	lsls	r2, r3
 8013788:	4b2b      	ldr	r3, [pc, #172]	; (8013838 <xTaskResumeAll+0x120>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	4313      	orrs	r3, r2
 801378e:	4a2a      	ldr	r2, [pc, #168]	; (8013838 <xTaskResumeAll+0x120>)
 8013790:	6013      	str	r3, [r2, #0]
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013796:	4613      	mov	r3, r2
 8013798:	009b      	lsls	r3, r3, #2
 801379a:	4413      	add	r3, r2
 801379c:	009b      	lsls	r3, r3, #2
 801379e:	4a27      	ldr	r2, [pc, #156]	; (801383c <xTaskResumeAll+0x124>)
 80137a0:	441a      	add	r2, r3
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	3304      	adds	r3, #4
 80137a6:	4619      	mov	r1, r3
 80137a8:	4610      	mov	r0, r2
 80137aa:	f7ff fbb6 	bl	8012f1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137b2:	4b23      	ldr	r3, [pc, #140]	; (8013840 <xTaskResumeAll+0x128>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d302      	bcc.n	80137c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80137bc:	4b21      	ldr	r3, [pc, #132]	; (8013844 <xTaskResumeAll+0x12c>)
 80137be:	2201      	movs	r2, #1
 80137c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80137c2:	4b1c      	ldr	r3, [pc, #112]	; (8013834 <xTaskResumeAll+0x11c>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d1cc      	bne.n	8013764 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d001      	beq.n	80137d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80137d0:	f000 fa12 	bl	8013bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80137d4:	4b1c      	ldr	r3, [pc, #112]	; (8013848 <xTaskResumeAll+0x130>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d010      	beq.n	8013802 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80137e0:	f000 f836 	bl	8013850 <xTaskIncrementTick>
 80137e4:	4603      	mov	r3, r0
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d002      	beq.n	80137f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80137ea:	4b16      	ldr	r3, [pc, #88]	; (8013844 <xTaskResumeAll+0x12c>)
 80137ec:	2201      	movs	r2, #1
 80137ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	3b01      	subs	r3, #1
 80137f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d1f1      	bne.n	80137e0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80137fc:	4b12      	ldr	r3, [pc, #72]	; (8013848 <xTaskResumeAll+0x130>)
 80137fe:	2200      	movs	r2, #0
 8013800:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013802:	4b10      	ldr	r3, [pc, #64]	; (8013844 <xTaskResumeAll+0x12c>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d009      	beq.n	801381e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801380a:	2301      	movs	r3, #1
 801380c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801380e:	4b0f      	ldr	r3, [pc, #60]	; (801384c <xTaskResumeAll+0x134>)
 8013810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013814:	601a      	str	r2, [r3, #0]
 8013816:	f3bf 8f4f 	dsb	sy
 801381a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801381e:	f000 fbd1 	bl	8013fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8013822:	68bb      	ldr	r3, [r7, #8]
}
 8013824:	4618      	mov	r0, r3
 8013826:	3710      	adds	r7, #16
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}
 801382c:	24000d38 	.word	0x24000d38
 8013830:	24000d10 	.word	0x24000d10
 8013834:	24000cd0 	.word	0x24000cd0
 8013838:	24000d18 	.word	0x24000d18
 801383c:	24000c14 	.word	0x24000c14
 8013840:	24000c10 	.word	0x24000c10
 8013844:	24000d24 	.word	0x24000d24
 8013848:	24000d20 	.word	0x24000d20
 801384c:	e000ed04 	.word	0xe000ed04

08013850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b086      	sub	sp, #24
 8013854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013856:	2300      	movs	r3, #0
 8013858:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801385a:	4b4e      	ldr	r3, [pc, #312]	; (8013994 <xTaskIncrementTick+0x144>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	2b00      	cmp	r3, #0
 8013860:	f040 808e 	bne.w	8013980 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013864:	4b4c      	ldr	r3, [pc, #304]	; (8013998 <xTaskIncrementTick+0x148>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	3301      	adds	r3, #1
 801386a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801386c:	4a4a      	ldr	r2, [pc, #296]	; (8013998 <xTaskIncrementTick+0x148>)
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d120      	bne.n	80138ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013878:	4b48      	ldr	r3, [pc, #288]	; (801399c <xTaskIncrementTick+0x14c>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00a      	beq.n	8013898 <xTaskIncrementTick+0x48>
	__asm volatile
 8013882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013886:	f383 8811 	msr	BASEPRI, r3
 801388a:	f3bf 8f6f 	isb	sy
 801388e:	f3bf 8f4f 	dsb	sy
 8013892:	603b      	str	r3, [r7, #0]
}
 8013894:	bf00      	nop
 8013896:	e7fe      	b.n	8013896 <xTaskIncrementTick+0x46>
 8013898:	4b40      	ldr	r3, [pc, #256]	; (801399c <xTaskIncrementTick+0x14c>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	60fb      	str	r3, [r7, #12]
 801389e:	4b40      	ldr	r3, [pc, #256]	; (80139a0 <xTaskIncrementTick+0x150>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	4a3e      	ldr	r2, [pc, #248]	; (801399c <xTaskIncrementTick+0x14c>)
 80138a4:	6013      	str	r3, [r2, #0]
 80138a6:	4a3e      	ldr	r2, [pc, #248]	; (80139a0 <xTaskIncrementTick+0x150>)
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	6013      	str	r3, [r2, #0]
 80138ac:	4b3d      	ldr	r3, [pc, #244]	; (80139a4 <xTaskIncrementTick+0x154>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	3301      	adds	r3, #1
 80138b2:	4a3c      	ldr	r2, [pc, #240]	; (80139a4 <xTaskIncrementTick+0x154>)
 80138b4:	6013      	str	r3, [r2, #0]
 80138b6:	f000 f99f 	bl	8013bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80138ba:	4b3b      	ldr	r3, [pc, #236]	; (80139a8 <xTaskIncrementTick+0x158>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	693a      	ldr	r2, [r7, #16]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d348      	bcc.n	8013956 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80138c4:	4b35      	ldr	r3, [pc, #212]	; (801399c <xTaskIncrementTick+0x14c>)
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d104      	bne.n	80138d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138ce:	4b36      	ldr	r3, [pc, #216]	; (80139a8 <xTaskIncrementTick+0x158>)
 80138d0:	f04f 32ff 	mov.w	r2, #4294967295
 80138d4:	601a      	str	r2, [r3, #0]
					break;
 80138d6:	e03e      	b.n	8013956 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138d8:	4b30      	ldr	r3, [pc, #192]	; (801399c <xTaskIncrementTick+0x14c>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	68db      	ldr	r3, [r3, #12]
 80138de:	68db      	ldr	r3, [r3, #12]
 80138e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	685b      	ldr	r3, [r3, #4]
 80138e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80138e8:	693a      	ldr	r2, [r7, #16]
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d203      	bcs.n	80138f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80138f0:	4a2d      	ldr	r2, [pc, #180]	; (80139a8 <xTaskIncrementTick+0x158>)
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80138f6:	e02e      	b.n	8013956 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	3304      	adds	r3, #4
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7ff fb69 	bl	8012fd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013906:	2b00      	cmp	r3, #0
 8013908:	d004      	beq.n	8013914 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	3318      	adds	r3, #24
 801390e:	4618      	mov	r0, r3
 8013910:	f7ff fb60 	bl	8012fd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013918:	2201      	movs	r2, #1
 801391a:	409a      	lsls	r2, r3
 801391c:	4b23      	ldr	r3, [pc, #140]	; (80139ac <xTaskIncrementTick+0x15c>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	4313      	orrs	r3, r2
 8013922:	4a22      	ldr	r2, [pc, #136]	; (80139ac <xTaskIncrementTick+0x15c>)
 8013924:	6013      	str	r3, [r2, #0]
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801392a:	4613      	mov	r3, r2
 801392c:	009b      	lsls	r3, r3, #2
 801392e:	4413      	add	r3, r2
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	4a1f      	ldr	r2, [pc, #124]	; (80139b0 <xTaskIncrementTick+0x160>)
 8013934:	441a      	add	r2, r3
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	3304      	adds	r3, #4
 801393a:	4619      	mov	r1, r3
 801393c:	4610      	mov	r0, r2
 801393e:	f7ff faec 	bl	8012f1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013946:	4b1b      	ldr	r3, [pc, #108]	; (80139b4 <xTaskIncrementTick+0x164>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801394c:	429a      	cmp	r2, r3
 801394e:	d3b9      	bcc.n	80138c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013950:	2301      	movs	r3, #1
 8013952:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013954:	e7b6      	b.n	80138c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013956:	4b17      	ldr	r3, [pc, #92]	; (80139b4 <xTaskIncrementTick+0x164>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801395c:	4914      	ldr	r1, [pc, #80]	; (80139b0 <xTaskIncrementTick+0x160>)
 801395e:	4613      	mov	r3, r2
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	4413      	add	r3, r2
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	440b      	add	r3, r1
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2b01      	cmp	r3, #1
 801396c:	d901      	bls.n	8013972 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801396e:	2301      	movs	r3, #1
 8013970:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013972:	4b11      	ldr	r3, [pc, #68]	; (80139b8 <xTaskIncrementTick+0x168>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d007      	beq.n	801398a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801397a:	2301      	movs	r3, #1
 801397c:	617b      	str	r3, [r7, #20]
 801397e:	e004      	b.n	801398a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013980:	4b0e      	ldr	r3, [pc, #56]	; (80139bc <xTaskIncrementTick+0x16c>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	3301      	adds	r3, #1
 8013986:	4a0d      	ldr	r2, [pc, #52]	; (80139bc <xTaskIncrementTick+0x16c>)
 8013988:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801398a:	697b      	ldr	r3, [r7, #20]
}
 801398c:	4618      	mov	r0, r3
 801398e:	3718      	adds	r7, #24
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}
 8013994:	24000d38 	.word	0x24000d38
 8013998:	24000d14 	.word	0x24000d14
 801399c:	24000cc8 	.word	0x24000cc8
 80139a0:	24000ccc 	.word	0x24000ccc
 80139a4:	24000d28 	.word	0x24000d28
 80139a8:	24000d30 	.word	0x24000d30
 80139ac:	24000d18 	.word	0x24000d18
 80139b0:	24000c14 	.word	0x24000c14
 80139b4:	24000c10 	.word	0x24000c10
 80139b8:	24000d24 	.word	0x24000d24
 80139bc:	24000d20 	.word	0x24000d20

080139c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80139c0:	b480      	push	{r7}
 80139c2:	b087      	sub	sp, #28
 80139c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80139c6:	4b29      	ldr	r3, [pc, #164]	; (8013a6c <vTaskSwitchContext+0xac>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d003      	beq.n	80139d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80139ce:	4b28      	ldr	r3, [pc, #160]	; (8013a70 <vTaskSwitchContext+0xb0>)
 80139d0:	2201      	movs	r2, #1
 80139d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80139d4:	e044      	b.n	8013a60 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80139d6:	4b26      	ldr	r3, [pc, #152]	; (8013a70 <vTaskSwitchContext+0xb0>)
 80139d8:	2200      	movs	r2, #0
 80139da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139dc:	4b25      	ldr	r3, [pc, #148]	; (8013a74 <vTaskSwitchContext+0xb4>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	fab3 f383 	clz	r3, r3
 80139e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80139ea:	7afb      	ldrb	r3, [r7, #11]
 80139ec:	f1c3 031f 	rsb	r3, r3, #31
 80139f0:	617b      	str	r3, [r7, #20]
 80139f2:	4921      	ldr	r1, [pc, #132]	; (8013a78 <vTaskSwitchContext+0xb8>)
 80139f4:	697a      	ldr	r2, [r7, #20]
 80139f6:	4613      	mov	r3, r2
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	4413      	add	r3, r2
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	440b      	add	r3, r1
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d10a      	bne.n	8013a1c <vTaskSwitchContext+0x5c>
	__asm volatile
 8013a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a0a:	f383 8811 	msr	BASEPRI, r3
 8013a0e:	f3bf 8f6f 	isb	sy
 8013a12:	f3bf 8f4f 	dsb	sy
 8013a16:	607b      	str	r3, [r7, #4]
}
 8013a18:	bf00      	nop
 8013a1a:	e7fe      	b.n	8013a1a <vTaskSwitchContext+0x5a>
 8013a1c:	697a      	ldr	r2, [r7, #20]
 8013a1e:	4613      	mov	r3, r2
 8013a20:	009b      	lsls	r3, r3, #2
 8013a22:	4413      	add	r3, r2
 8013a24:	009b      	lsls	r3, r3, #2
 8013a26:	4a14      	ldr	r2, [pc, #80]	; (8013a78 <vTaskSwitchContext+0xb8>)
 8013a28:	4413      	add	r3, r2
 8013a2a:	613b      	str	r3, [r7, #16]
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	685a      	ldr	r2, [r3, #4]
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	605a      	str	r2, [r3, #4]
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	685a      	ldr	r2, [r3, #4]
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	3308      	adds	r3, #8
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d104      	bne.n	8013a4c <vTaskSwitchContext+0x8c>
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	685a      	ldr	r2, [r3, #4]
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	605a      	str	r2, [r3, #4]
 8013a4c:	693b      	ldr	r3, [r7, #16]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	68db      	ldr	r3, [r3, #12]
 8013a52:	4a0a      	ldr	r2, [pc, #40]	; (8013a7c <vTaskSwitchContext+0xbc>)
 8013a54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013a56:	4b09      	ldr	r3, [pc, #36]	; (8013a7c <vTaskSwitchContext+0xbc>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	334c      	adds	r3, #76	; 0x4c
 8013a5c:	4a08      	ldr	r2, [pc, #32]	; (8013a80 <vTaskSwitchContext+0xc0>)
 8013a5e:	6013      	str	r3, [r2, #0]
}
 8013a60:	bf00      	nop
 8013a62:	371c      	adds	r7, #28
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr
 8013a6c:	24000d38 	.word	0x24000d38
 8013a70:	24000d24 	.word	0x24000d24
 8013a74:	24000d18 	.word	0x24000d18
 8013a78:	24000c14 	.word	0x24000c14
 8013a7c:	24000c10 	.word	0x24000c10
 8013a80:	2400025c 	.word	0x2400025c

08013a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b082      	sub	sp, #8
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013a8c:	f000 f852 	bl	8013b34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013a90:	4b06      	ldr	r3, [pc, #24]	; (8013aac <prvIdleTask+0x28>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2b01      	cmp	r3, #1
 8013a96:	d9f9      	bls.n	8013a8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013a98:	4b05      	ldr	r3, [pc, #20]	; (8013ab0 <prvIdleTask+0x2c>)
 8013a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a9e:	601a      	str	r2, [r3, #0]
 8013aa0:	f3bf 8f4f 	dsb	sy
 8013aa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013aa8:	e7f0      	b.n	8013a8c <prvIdleTask+0x8>
 8013aaa:	bf00      	nop
 8013aac:	24000c14 	.word	0x24000c14
 8013ab0:	e000ed04 	.word	0xe000ed04

08013ab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013aba:	2300      	movs	r3, #0
 8013abc:	607b      	str	r3, [r7, #4]
 8013abe:	e00c      	b.n	8013ada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013ac0:	687a      	ldr	r2, [r7, #4]
 8013ac2:	4613      	mov	r3, r2
 8013ac4:	009b      	lsls	r3, r3, #2
 8013ac6:	4413      	add	r3, r2
 8013ac8:	009b      	lsls	r3, r3, #2
 8013aca:	4a12      	ldr	r2, [pc, #72]	; (8013b14 <prvInitialiseTaskLists+0x60>)
 8013acc:	4413      	add	r3, r2
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7ff f9f6 	bl	8012ec0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	607b      	str	r3, [r7, #4]
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2b06      	cmp	r3, #6
 8013ade:	d9ef      	bls.n	8013ac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013ae0:	480d      	ldr	r0, [pc, #52]	; (8013b18 <prvInitialiseTaskLists+0x64>)
 8013ae2:	f7ff f9ed 	bl	8012ec0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013ae6:	480d      	ldr	r0, [pc, #52]	; (8013b1c <prvInitialiseTaskLists+0x68>)
 8013ae8:	f7ff f9ea 	bl	8012ec0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013aec:	480c      	ldr	r0, [pc, #48]	; (8013b20 <prvInitialiseTaskLists+0x6c>)
 8013aee:	f7ff f9e7 	bl	8012ec0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013af2:	480c      	ldr	r0, [pc, #48]	; (8013b24 <prvInitialiseTaskLists+0x70>)
 8013af4:	f7ff f9e4 	bl	8012ec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013af8:	480b      	ldr	r0, [pc, #44]	; (8013b28 <prvInitialiseTaskLists+0x74>)
 8013afa:	f7ff f9e1 	bl	8012ec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013afe:	4b0b      	ldr	r3, [pc, #44]	; (8013b2c <prvInitialiseTaskLists+0x78>)
 8013b00:	4a05      	ldr	r2, [pc, #20]	; (8013b18 <prvInitialiseTaskLists+0x64>)
 8013b02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013b04:	4b0a      	ldr	r3, [pc, #40]	; (8013b30 <prvInitialiseTaskLists+0x7c>)
 8013b06:	4a05      	ldr	r2, [pc, #20]	; (8013b1c <prvInitialiseTaskLists+0x68>)
 8013b08:	601a      	str	r2, [r3, #0]
}
 8013b0a:	bf00      	nop
 8013b0c:	3708      	adds	r7, #8
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	24000c14 	.word	0x24000c14
 8013b18:	24000ca0 	.word	0x24000ca0
 8013b1c:	24000cb4 	.word	0x24000cb4
 8013b20:	24000cd0 	.word	0x24000cd0
 8013b24:	24000ce4 	.word	0x24000ce4
 8013b28:	24000cfc 	.word	0x24000cfc
 8013b2c:	24000cc8 	.word	0x24000cc8
 8013b30:	24000ccc 	.word	0x24000ccc

08013b34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013b3a:	e019      	b.n	8013b70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013b3c:	f000 fa12 	bl	8013f64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b40:	4b10      	ldr	r3, [pc, #64]	; (8013b84 <prvCheckTasksWaitingTermination+0x50>)
 8013b42:	68db      	ldr	r3, [r3, #12]
 8013b44:	68db      	ldr	r3, [r3, #12]
 8013b46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	3304      	adds	r3, #4
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7ff fa41 	bl	8012fd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013b52:	4b0d      	ldr	r3, [pc, #52]	; (8013b88 <prvCheckTasksWaitingTermination+0x54>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	3b01      	subs	r3, #1
 8013b58:	4a0b      	ldr	r2, [pc, #44]	; (8013b88 <prvCheckTasksWaitingTermination+0x54>)
 8013b5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013b5c:	4b0b      	ldr	r3, [pc, #44]	; (8013b8c <prvCheckTasksWaitingTermination+0x58>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	3b01      	subs	r3, #1
 8013b62:	4a0a      	ldr	r2, [pc, #40]	; (8013b8c <prvCheckTasksWaitingTermination+0x58>)
 8013b64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013b66:	f000 fa2d 	bl	8013fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013b6a:	6878      	ldr	r0, [r7, #4]
 8013b6c:	f000 f810 	bl	8013b90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013b70:	4b06      	ldr	r3, [pc, #24]	; (8013b8c <prvCheckTasksWaitingTermination+0x58>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d1e1      	bne.n	8013b3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013b78:	bf00      	nop
 8013b7a:	bf00      	nop
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
 8013b82:	bf00      	nop
 8013b84:	24000ce4 	.word	0x24000ce4
 8013b88:	24000d10 	.word	0x24000d10
 8013b8c:	24000cf8 	.word	0x24000cf8

08013b90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b084      	sub	sp, #16
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	334c      	adds	r3, #76	; 0x4c
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f001 ffcf 	bl	8015b40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d108      	bne.n	8013bbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f000 fb85 	bl	80142c0 <vPortFree>
				vPortFree( pxTCB );
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f000 fb82 	bl	80142c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013bbc:	e018      	b.n	8013bf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013bc4:	2b01      	cmp	r3, #1
 8013bc6:	d103      	bne.n	8013bd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f000 fb79 	bl	80142c0 <vPortFree>
	}
 8013bce:	e00f      	b.n	8013bf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013bd6:	2b02      	cmp	r3, #2
 8013bd8:	d00a      	beq.n	8013bf0 <prvDeleteTCB+0x60>
	__asm volatile
 8013bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bde:	f383 8811 	msr	BASEPRI, r3
 8013be2:	f3bf 8f6f 	isb	sy
 8013be6:	f3bf 8f4f 	dsb	sy
 8013bea:	60fb      	str	r3, [r7, #12]
}
 8013bec:	bf00      	nop
 8013bee:	e7fe      	b.n	8013bee <prvDeleteTCB+0x5e>
	}
 8013bf0:	bf00      	nop
 8013bf2:	3710      	adds	r7, #16
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}

08013bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b083      	sub	sp, #12
 8013bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013bfe:	4b0c      	ldr	r3, [pc, #48]	; (8013c30 <prvResetNextTaskUnblockTime+0x38>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d104      	bne.n	8013c12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013c08:	4b0a      	ldr	r3, [pc, #40]	; (8013c34 <prvResetNextTaskUnblockTime+0x3c>)
 8013c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013c10:	e008      	b.n	8013c24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c12:	4b07      	ldr	r3, [pc, #28]	; (8013c30 <prvResetNextTaskUnblockTime+0x38>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	68db      	ldr	r3, [r3, #12]
 8013c1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	4a04      	ldr	r2, [pc, #16]	; (8013c34 <prvResetNextTaskUnblockTime+0x3c>)
 8013c22:	6013      	str	r3, [r2, #0]
}
 8013c24:	bf00      	nop
 8013c26:	370c      	adds	r7, #12
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2e:	4770      	bx	lr
 8013c30:	24000cc8 	.word	0x24000cc8
 8013c34:	24000d30 	.word	0x24000d30

08013c38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013c42:	4b29      	ldr	r3, [pc, #164]	; (8013ce8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c48:	4b28      	ldr	r3, [pc, #160]	; (8013cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	3304      	adds	r3, #4
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7ff f9c0 	bl	8012fd4 <uxListRemove>
 8013c54:	4603      	mov	r3, r0
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d10b      	bne.n	8013c72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013c5a:	4b24      	ldr	r3, [pc, #144]	; (8013cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c60:	2201      	movs	r2, #1
 8013c62:	fa02 f303 	lsl.w	r3, r2, r3
 8013c66:	43da      	mvns	r2, r3
 8013c68:	4b21      	ldr	r3, [pc, #132]	; (8013cf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	4013      	ands	r3, r2
 8013c6e:	4a20      	ldr	r2, [pc, #128]	; (8013cf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013c70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c78:	d10a      	bne.n	8013c90 <prvAddCurrentTaskToDelayedList+0x58>
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d007      	beq.n	8013c90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c80:	4b1a      	ldr	r3, [pc, #104]	; (8013cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	3304      	adds	r3, #4
 8013c86:	4619      	mov	r1, r3
 8013c88:	481a      	ldr	r0, [pc, #104]	; (8013cf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013c8a:	f7ff f946 	bl	8012f1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013c8e:	e026      	b.n	8013cde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013c90:	68fa      	ldr	r2, [r7, #12]
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	4413      	add	r3, r2
 8013c96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013c98:	4b14      	ldr	r3, [pc, #80]	; (8013cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	68ba      	ldr	r2, [r7, #8]
 8013c9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013ca0:	68ba      	ldr	r2, [r7, #8]
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d209      	bcs.n	8013cbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ca8:	4b13      	ldr	r3, [pc, #76]	; (8013cf8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	4b0f      	ldr	r3, [pc, #60]	; (8013cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	3304      	adds	r3, #4
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	f7ff f954 	bl	8012f62 <vListInsert>
}
 8013cba:	e010      	b.n	8013cde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013cbc:	4b0f      	ldr	r3, [pc, #60]	; (8013cfc <prvAddCurrentTaskToDelayedList+0xc4>)
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	4b0a      	ldr	r3, [pc, #40]	; (8013cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	3304      	adds	r3, #4
 8013cc6:	4619      	mov	r1, r3
 8013cc8:	4610      	mov	r0, r2
 8013cca:	f7ff f94a 	bl	8012f62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013cce:	4b0c      	ldr	r3, [pc, #48]	; (8013d00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	68ba      	ldr	r2, [r7, #8]
 8013cd4:	429a      	cmp	r2, r3
 8013cd6:	d202      	bcs.n	8013cde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013cd8:	4a09      	ldr	r2, [pc, #36]	; (8013d00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	6013      	str	r3, [r2, #0]
}
 8013cde:	bf00      	nop
 8013ce0:	3710      	adds	r7, #16
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	bd80      	pop	{r7, pc}
 8013ce6:	bf00      	nop
 8013ce8:	24000d14 	.word	0x24000d14
 8013cec:	24000c10 	.word	0x24000c10
 8013cf0:	24000d18 	.word	0x24000d18
 8013cf4:	24000cfc 	.word	0x24000cfc
 8013cf8:	24000ccc 	.word	0x24000ccc
 8013cfc:	24000cc8 	.word	0x24000cc8
 8013d00:	24000d30 	.word	0x24000d30

08013d04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013d04:	b480      	push	{r7}
 8013d06:	b085      	sub	sp, #20
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	60b9      	str	r1, [r7, #8]
 8013d0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	3b04      	subs	r3, #4
 8013d14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	3b04      	subs	r3, #4
 8013d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	f023 0201 	bic.w	r2, r3, #1
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	3b04      	subs	r3, #4
 8013d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013d34:	4a0c      	ldr	r2, [pc, #48]	; (8013d68 <pxPortInitialiseStack+0x64>)
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	3b14      	subs	r3, #20
 8013d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013d40:	687a      	ldr	r2, [r7, #4]
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	3b04      	subs	r3, #4
 8013d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	f06f 0202 	mvn.w	r2, #2
 8013d52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	3b20      	subs	r3, #32
 8013d58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3714      	adds	r7, #20
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr
 8013d68:	08013d6d 	.word	0x08013d6d

08013d6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	b085      	sub	sp, #20
 8013d70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013d72:	2300      	movs	r3, #0
 8013d74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013d76:	4b12      	ldr	r3, [pc, #72]	; (8013dc0 <prvTaskExitError+0x54>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d7e:	d00a      	beq.n	8013d96 <prvTaskExitError+0x2a>
	__asm volatile
 8013d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d84:	f383 8811 	msr	BASEPRI, r3
 8013d88:	f3bf 8f6f 	isb	sy
 8013d8c:	f3bf 8f4f 	dsb	sy
 8013d90:	60fb      	str	r3, [r7, #12]
}
 8013d92:	bf00      	nop
 8013d94:	e7fe      	b.n	8013d94 <prvTaskExitError+0x28>
	__asm volatile
 8013d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d9a:	f383 8811 	msr	BASEPRI, r3
 8013d9e:	f3bf 8f6f 	isb	sy
 8013da2:	f3bf 8f4f 	dsb	sy
 8013da6:	60bb      	str	r3, [r7, #8]
}
 8013da8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013daa:	bf00      	nop
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d0fc      	beq.n	8013dac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013db2:	bf00      	nop
 8013db4:	bf00      	nop
 8013db6:	3714      	adds	r7, #20
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr
 8013dc0:	240001f4 	.word	0x240001f4
	...

08013dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013dd0:	4b07      	ldr	r3, [pc, #28]	; (8013df0 <pxCurrentTCBConst2>)
 8013dd2:	6819      	ldr	r1, [r3, #0]
 8013dd4:	6808      	ldr	r0, [r1, #0]
 8013dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dda:	f380 8809 	msr	PSP, r0
 8013dde:	f3bf 8f6f 	isb	sy
 8013de2:	f04f 0000 	mov.w	r0, #0
 8013de6:	f380 8811 	msr	BASEPRI, r0
 8013dea:	4770      	bx	lr
 8013dec:	f3af 8000 	nop.w

08013df0 <pxCurrentTCBConst2>:
 8013df0:	24000c10 	.word	0x24000c10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013df4:	bf00      	nop
 8013df6:	bf00      	nop

08013df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013df8:	4808      	ldr	r0, [pc, #32]	; (8013e1c <prvPortStartFirstTask+0x24>)
 8013dfa:	6800      	ldr	r0, [r0, #0]
 8013dfc:	6800      	ldr	r0, [r0, #0]
 8013dfe:	f380 8808 	msr	MSP, r0
 8013e02:	f04f 0000 	mov.w	r0, #0
 8013e06:	f380 8814 	msr	CONTROL, r0
 8013e0a:	b662      	cpsie	i
 8013e0c:	b661      	cpsie	f
 8013e0e:	f3bf 8f4f 	dsb	sy
 8013e12:	f3bf 8f6f 	isb	sy
 8013e16:	df00      	svc	0
 8013e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013e1a:	bf00      	nop
 8013e1c:	e000ed08 	.word	0xe000ed08

08013e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b086      	sub	sp, #24
 8013e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013e26:	4b46      	ldr	r3, [pc, #280]	; (8013f40 <xPortStartScheduler+0x120>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	4a46      	ldr	r2, [pc, #280]	; (8013f44 <xPortStartScheduler+0x124>)
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	d10a      	bne.n	8013e46 <xPortStartScheduler+0x26>
	__asm volatile
 8013e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e34:	f383 8811 	msr	BASEPRI, r3
 8013e38:	f3bf 8f6f 	isb	sy
 8013e3c:	f3bf 8f4f 	dsb	sy
 8013e40:	613b      	str	r3, [r7, #16]
}
 8013e42:	bf00      	nop
 8013e44:	e7fe      	b.n	8013e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013e46:	4b3e      	ldr	r3, [pc, #248]	; (8013f40 <xPortStartScheduler+0x120>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	4a3f      	ldr	r2, [pc, #252]	; (8013f48 <xPortStartScheduler+0x128>)
 8013e4c:	4293      	cmp	r3, r2
 8013e4e:	d10a      	bne.n	8013e66 <xPortStartScheduler+0x46>
	__asm volatile
 8013e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e54:	f383 8811 	msr	BASEPRI, r3
 8013e58:	f3bf 8f6f 	isb	sy
 8013e5c:	f3bf 8f4f 	dsb	sy
 8013e60:	60fb      	str	r3, [r7, #12]
}
 8013e62:	bf00      	nop
 8013e64:	e7fe      	b.n	8013e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013e66:	4b39      	ldr	r3, [pc, #228]	; (8013f4c <xPortStartScheduler+0x12c>)
 8013e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	781b      	ldrb	r3, [r3, #0]
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	22ff      	movs	r2, #255	; 0xff
 8013e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	781b      	ldrb	r3, [r3, #0]
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013e80:	78fb      	ldrb	r3, [r7, #3]
 8013e82:	b2db      	uxtb	r3, r3
 8013e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013e88:	b2da      	uxtb	r2, r3
 8013e8a:	4b31      	ldr	r3, [pc, #196]	; (8013f50 <xPortStartScheduler+0x130>)
 8013e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013e8e:	4b31      	ldr	r3, [pc, #196]	; (8013f54 <xPortStartScheduler+0x134>)
 8013e90:	2207      	movs	r2, #7
 8013e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013e94:	e009      	b.n	8013eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013e96:	4b2f      	ldr	r3, [pc, #188]	; (8013f54 <xPortStartScheduler+0x134>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	3b01      	subs	r3, #1
 8013e9c:	4a2d      	ldr	r2, [pc, #180]	; (8013f54 <xPortStartScheduler+0x134>)
 8013e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013ea0:	78fb      	ldrb	r3, [r7, #3]
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	005b      	lsls	r3, r3, #1
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013eaa:	78fb      	ldrb	r3, [r7, #3]
 8013eac:	b2db      	uxtb	r3, r3
 8013eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013eb2:	2b80      	cmp	r3, #128	; 0x80
 8013eb4:	d0ef      	beq.n	8013e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013eb6:	4b27      	ldr	r3, [pc, #156]	; (8013f54 <xPortStartScheduler+0x134>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	f1c3 0307 	rsb	r3, r3, #7
 8013ebe:	2b04      	cmp	r3, #4
 8013ec0:	d00a      	beq.n	8013ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8013ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec6:	f383 8811 	msr	BASEPRI, r3
 8013eca:	f3bf 8f6f 	isb	sy
 8013ece:	f3bf 8f4f 	dsb	sy
 8013ed2:	60bb      	str	r3, [r7, #8]
}
 8013ed4:	bf00      	nop
 8013ed6:	e7fe      	b.n	8013ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013ed8:	4b1e      	ldr	r3, [pc, #120]	; (8013f54 <xPortStartScheduler+0x134>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	021b      	lsls	r3, r3, #8
 8013ede:	4a1d      	ldr	r2, [pc, #116]	; (8013f54 <xPortStartScheduler+0x134>)
 8013ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013ee2:	4b1c      	ldr	r3, [pc, #112]	; (8013f54 <xPortStartScheduler+0x134>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013eea:	4a1a      	ldr	r2, [pc, #104]	; (8013f54 <xPortStartScheduler+0x134>)
 8013eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	b2da      	uxtb	r2, r3
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013ef6:	4b18      	ldr	r3, [pc, #96]	; (8013f58 <xPortStartScheduler+0x138>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	4a17      	ldr	r2, [pc, #92]	; (8013f58 <xPortStartScheduler+0x138>)
 8013efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013f02:	4b15      	ldr	r3, [pc, #84]	; (8013f58 <xPortStartScheduler+0x138>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	4a14      	ldr	r2, [pc, #80]	; (8013f58 <xPortStartScheduler+0x138>)
 8013f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013f0e:	f000 f8dd 	bl	80140cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013f12:	4b12      	ldr	r3, [pc, #72]	; (8013f5c <xPortStartScheduler+0x13c>)
 8013f14:	2200      	movs	r2, #0
 8013f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013f18:	f000 f8fc 	bl	8014114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013f1c:	4b10      	ldr	r3, [pc, #64]	; (8013f60 <xPortStartScheduler+0x140>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4a0f      	ldr	r2, [pc, #60]	; (8013f60 <xPortStartScheduler+0x140>)
 8013f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013f28:	f7ff ff66 	bl	8013df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013f2c:	f7ff fd48 	bl	80139c0 <vTaskSwitchContext>
	prvTaskExitError();
 8013f30:	f7ff ff1c 	bl	8013d6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013f34:	2300      	movs	r3, #0
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3718      	adds	r7, #24
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	e000ed00 	.word	0xe000ed00
 8013f44:	410fc271 	.word	0x410fc271
 8013f48:	410fc270 	.word	0x410fc270
 8013f4c:	e000e400 	.word	0xe000e400
 8013f50:	24000d3c 	.word	0x24000d3c
 8013f54:	24000d40 	.word	0x24000d40
 8013f58:	e000ed20 	.word	0xe000ed20
 8013f5c:	240001f4 	.word	0x240001f4
 8013f60:	e000ef34 	.word	0xe000ef34

08013f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013f64:	b480      	push	{r7}
 8013f66:	b083      	sub	sp, #12
 8013f68:	af00      	add	r7, sp, #0
	__asm volatile
 8013f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f6e:	f383 8811 	msr	BASEPRI, r3
 8013f72:	f3bf 8f6f 	isb	sy
 8013f76:	f3bf 8f4f 	dsb	sy
 8013f7a:	607b      	str	r3, [r7, #4]
}
 8013f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013f7e:	4b0f      	ldr	r3, [pc, #60]	; (8013fbc <vPortEnterCritical+0x58>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	3301      	adds	r3, #1
 8013f84:	4a0d      	ldr	r2, [pc, #52]	; (8013fbc <vPortEnterCritical+0x58>)
 8013f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013f88:	4b0c      	ldr	r3, [pc, #48]	; (8013fbc <vPortEnterCritical+0x58>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d10f      	bne.n	8013fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013f90:	4b0b      	ldr	r3, [pc, #44]	; (8013fc0 <vPortEnterCritical+0x5c>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	b2db      	uxtb	r3, r3
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d00a      	beq.n	8013fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8013f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9e:	f383 8811 	msr	BASEPRI, r3
 8013fa2:	f3bf 8f6f 	isb	sy
 8013fa6:	f3bf 8f4f 	dsb	sy
 8013faa:	603b      	str	r3, [r7, #0]
}
 8013fac:	bf00      	nop
 8013fae:	e7fe      	b.n	8013fae <vPortEnterCritical+0x4a>
	}
}
 8013fb0:	bf00      	nop
 8013fb2:	370c      	adds	r7, #12
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fba:	4770      	bx	lr
 8013fbc:	240001f4 	.word	0x240001f4
 8013fc0:	e000ed04 	.word	0xe000ed04

08013fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013fc4:	b480      	push	{r7}
 8013fc6:	b083      	sub	sp, #12
 8013fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013fca:	4b12      	ldr	r3, [pc, #72]	; (8014014 <vPortExitCritical+0x50>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d10a      	bne.n	8013fe8 <vPortExitCritical+0x24>
	__asm volatile
 8013fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd6:	f383 8811 	msr	BASEPRI, r3
 8013fda:	f3bf 8f6f 	isb	sy
 8013fde:	f3bf 8f4f 	dsb	sy
 8013fe2:	607b      	str	r3, [r7, #4]
}
 8013fe4:	bf00      	nop
 8013fe6:	e7fe      	b.n	8013fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013fe8:	4b0a      	ldr	r3, [pc, #40]	; (8014014 <vPortExitCritical+0x50>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	3b01      	subs	r3, #1
 8013fee:	4a09      	ldr	r2, [pc, #36]	; (8014014 <vPortExitCritical+0x50>)
 8013ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013ff2:	4b08      	ldr	r3, [pc, #32]	; (8014014 <vPortExitCritical+0x50>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d105      	bne.n	8014006 <vPortExitCritical+0x42>
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014006:	bf00      	nop
 8014008:	370c      	adds	r7, #12
 801400a:	46bd      	mov	sp, r7
 801400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014010:	4770      	bx	lr
 8014012:	bf00      	nop
 8014014:	240001f4 	.word	0x240001f4
	...

08014020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014020:	f3ef 8009 	mrs	r0, PSP
 8014024:	f3bf 8f6f 	isb	sy
 8014028:	4b15      	ldr	r3, [pc, #84]	; (8014080 <pxCurrentTCBConst>)
 801402a:	681a      	ldr	r2, [r3, #0]
 801402c:	f01e 0f10 	tst.w	lr, #16
 8014030:	bf08      	it	eq
 8014032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801403a:	6010      	str	r0, [r2, #0]
 801403c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014044:	f380 8811 	msr	BASEPRI, r0
 8014048:	f3bf 8f4f 	dsb	sy
 801404c:	f3bf 8f6f 	isb	sy
 8014050:	f7ff fcb6 	bl	80139c0 <vTaskSwitchContext>
 8014054:	f04f 0000 	mov.w	r0, #0
 8014058:	f380 8811 	msr	BASEPRI, r0
 801405c:	bc09      	pop	{r0, r3}
 801405e:	6819      	ldr	r1, [r3, #0]
 8014060:	6808      	ldr	r0, [r1, #0]
 8014062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014066:	f01e 0f10 	tst.w	lr, #16
 801406a:	bf08      	it	eq
 801406c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014070:	f380 8809 	msr	PSP, r0
 8014074:	f3bf 8f6f 	isb	sy
 8014078:	4770      	bx	lr
 801407a:	bf00      	nop
 801407c:	f3af 8000 	nop.w

08014080 <pxCurrentTCBConst>:
 8014080:	24000c10 	.word	0x24000c10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014084:	bf00      	nop
 8014086:	bf00      	nop

08014088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b082      	sub	sp, #8
 801408c:	af00      	add	r7, sp, #0
	__asm volatile
 801408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014092:	f383 8811 	msr	BASEPRI, r3
 8014096:	f3bf 8f6f 	isb	sy
 801409a:	f3bf 8f4f 	dsb	sy
 801409e:	607b      	str	r3, [r7, #4]
}
 80140a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80140a2:	f7ff fbd5 	bl	8013850 <xTaskIncrementTick>
 80140a6:	4603      	mov	r3, r0
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d003      	beq.n	80140b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80140ac:	4b06      	ldr	r3, [pc, #24]	; (80140c8 <SysTick_Handler+0x40>)
 80140ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140b2:	601a      	str	r2, [r3, #0]
 80140b4:	2300      	movs	r3, #0
 80140b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	f383 8811 	msr	BASEPRI, r3
}
 80140be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80140c0:	bf00      	nop
 80140c2:	3708      	adds	r7, #8
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}
 80140c8:	e000ed04 	.word	0xe000ed04

080140cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80140cc:	b480      	push	{r7}
 80140ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80140d0:	4b0b      	ldr	r3, [pc, #44]	; (8014100 <vPortSetupTimerInterrupt+0x34>)
 80140d2:	2200      	movs	r2, #0
 80140d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80140d6:	4b0b      	ldr	r3, [pc, #44]	; (8014104 <vPortSetupTimerInterrupt+0x38>)
 80140d8:	2200      	movs	r2, #0
 80140da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80140dc:	4b0a      	ldr	r3, [pc, #40]	; (8014108 <vPortSetupTimerInterrupt+0x3c>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	4a0a      	ldr	r2, [pc, #40]	; (801410c <vPortSetupTimerInterrupt+0x40>)
 80140e2:	fba2 2303 	umull	r2, r3, r2, r3
 80140e6:	099b      	lsrs	r3, r3, #6
 80140e8:	4a09      	ldr	r2, [pc, #36]	; (8014110 <vPortSetupTimerInterrupt+0x44>)
 80140ea:	3b01      	subs	r3, #1
 80140ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80140ee:	4b04      	ldr	r3, [pc, #16]	; (8014100 <vPortSetupTimerInterrupt+0x34>)
 80140f0:	2207      	movs	r2, #7
 80140f2:	601a      	str	r2, [r3, #0]
}
 80140f4:	bf00      	nop
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr
 80140fe:	bf00      	nop
 8014100:	e000e010 	.word	0xe000e010
 8014104:	e000e018 	.word	0xe000e018
 8014108:	24000044 	.word	0x24000044
 801410c:	10624dd3 	.word	0x10624dd3
 8014110:	e000e014 	.word	0xe000e014

08014114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014124 <vPortEnableVFP+0x10>
 8014118:	6801      	ldr	r1, [r0, #0]
 801411a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801411e:	6001      	str	r1, [r0, #0]
 8014120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014122:	bf00      	nop
 8014124:	e000ed88 	.word	0xe000ed88

08014128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b08a      	sub	sp, #40	; 0x28
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014130:	2300      	movs	r3, #0
 8014132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014134:	f7ff fae2 	bl	80136fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014138:	4b5b      	ldr	r3, [pc, #364]	; (80142a8 <pvPortMalloc+0x180>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d101      	bne.n	8014144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014140:	f000 f920 	bl	8014384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014144:	4b59      	ldr	r3, [pc, #356]	; (80142ac <pvPortMalloc+0x184>)
 8014146:	681a      	ldr	r2, [r3, #0]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	4013      	ands	r3, r2
 801414c:	2b00      	cmp	r3, #0
 801414e:	f040 8093 	bne.w	8014278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d01d      	beq.n	8014194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014158:	2208      	movs	r2, #8
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	4413      	add	r3, r2
 801415e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f003 0307 	and.w	r3, r3, #7
 8014166:	2b00      	cmp	r3, #0
 8014168:	d014      	beq.n	8014194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f023 0307 	bic.w	r3, r3, #7
 8014170:	3308      	adds	r3, #8
 8014172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f003 0307 	and.w	r3, r3, #7
 801417a:	2b00      	cmp	r3, #0
 801417c:	d00a      	beq.n	8014194 <pvPortMalloc+0x6c>
	__asm volatile
 801417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014182:	f383 8811 	msr	BASEPRI, r3
 8014186:	f3bf 8f6f 	isb	sy
 801418a:	f3bf 8f4f 	dsb	sy
 801418e:	617b      	str	r3, [r7, #20]
}
 8014190:	bf00      	nop
 8014192:	e7fe      	b.n	8014192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d06e      	beq.n	8014278 <pvPortMalloc+0x150>
 801419a:	4b45      	ldr	r3, [pc, #276]	; (80142b0 <pvPortMalloc+0x188>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d869      	bhi.n	8014278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80141a4:	4b43      	ldr	r3, [pc, #268]	; (80142b4 <pvPortMalloc+0x18c>)
 80141a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80141a8:	4b42      	ldr	r3, [pc, #264]	; (80142b4 <pvPortMalloc+0x18c>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141ae:	e004      	b.n	80141ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80141b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80141b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d903      	bls.n	80141cc <pvPortMalloc+0xa4>
 80141c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d1f1      	bne.n	80141b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80141cc:	4b36      	ldr	r3, [pc, #216]	; (80142a8 <pvPortMalloc+0x180>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d050      	beq.n	8014278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80141d6:	6a3b      	ldr	r3, [r7, #32]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	2208      	movs	r2, #8
 80141dc:	4413      	add	r3, r2
 80141de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80141e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e2:	681a      	ldr	r2, [r3, #0]
 80141e4:	6a3b      	ldr	r3, [r7, #32]
 80141e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80141e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ea:	685a      	ldr	r2, [r3, #4]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	1ad2      	subs	r2, r2, r3
 80141f0:	2308      	movs	r3, #8
 80141f2:	005b      	lsls	r3, r3, #1
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d91f      	bls.n	8014238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80141f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	4413      	add	r3, r2
 80141fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014200:	69bb      	ldr	r3, [r7, #24]
 8014202:	f003 0307 	and.w	r3, r3, #7
 8014206:	2b00      	cmp	r3, #0
 8014208:	d00a      	beq.n	8014220 <pvPortMalloc+0xf8>
	__asm volatile
 801420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801420e:	f383 8811 	msr	BASEPRI, r3
 8014212:	f3bf 8f6f 	isb	sy
 8014216:	f3bf 8f4f 	dsb	sy
 801421a:	613b      	str	r3, [r7, #16]
}
 801421c:	bf00      	nop
 801421e:	e7fe      	b.n	801421e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014222:	685a      	ldr	r2, [r3, #4]
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	1ad2      	subs	r2, r2, r3
 8014228:	69bb      	ldr	r3, [r7, #24]
 801422a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422e:	687a      	ldr	r2, [r7, #4]
 8014230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014232:	69b8      	ldr	r0, [r7, #24]
 8014234:	f000 f908 	bl	8014448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014238:	4b1d      	ldr	r3, [pc, #116]	; (80142b0 <pvPortMalloc+0x188>)
 801423a:	681a      	ldr	r2, [r3, #0]
 801423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423e:	685b      	ldr	r3, [r3, #4]
 8014240:	1ad3      	subs	r3, r2, r3
 8014242:	4a1b      	ldr	r2, [pc, #108]	; (80142b0 <pvPortMalloc+0x188>)
 8014244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014246:	4b1a      	ldr	r3, [pc, #104]	; (80142b0 <pvPortMalloc+0x188>)
 8014248:	681a      	ldr	r2, [r3, #0]
 801424a:	4b1b      	ldr	r3, [pc, #108]	; (80142b8 <pvPortMalloc+0x190>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	429a      	cmp	r2, r3
 8014250:	d203      	bcs.n	801425a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014252:	4b17      	ldr	r3, [pc, #92]	; (80142b0 <pvPortMalloc+0x188>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	4a18      	ldr	r2, [pc, #96]	; (80142b8 <pvPortMalloc+0x190>)
 8014258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425c:	685a      	ldr	r2, [r3, #4]
 801425e:	4b13      	ldr	r3, [pc, #76]	; (80142ac <pvPortMalloc+0x184>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	431a      	orrs	r2, r3
 8014264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426a:	2200      	movs	r2, #0
 801426c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801426e:	4b13      	ldr	r3, [pc, #76]	; (80142bc <pvPortMalloc+0x194>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	3301      	adds	r3, #1
 8014274:	4a11      	ldr	r2, [pc, #68]	; (80142bc <pvPortMalloc+0x194>)
 8014276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014278:	f7ff fa4e 	bl	8013718 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801427c:	69fb      	ldr	r3, [r7, #28]
 801427e:	f003 0307 	and.w	r3, r3, #7
 8014282:	2b00      	cmp	r3, #0
 8014284:	d00a      	beq.n	801429c <pvPortMalloc+0x174>
	__asm volatile
 8014286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801428a:	f383 8811 	msr	BASEPRI, r3
 801428e:	f3bf 8f6f 	isb	sy
 8014292:	f3bf 8f4f 	dsb	sy
 8014296:	60fb      	str	r3, [r7, #12]
}
 8014298:	bf00      	nop
 801429a:	e7fe      	b.n	801429a <pvPortMalloc+0x172>
	return pvReturn;
 801429c:	69fb      	ldr	r3, [r7, #28]
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3728      	adds	r7, #40	; 0x28
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}
 80142a6:	bf00      	nop
 80142a8:	2400494c 	.word	0x2400494c
 80142ac:	24004960 	.word	0x24004960
 80142b0:	24004950 	.word	0x24004950
 80142b4:	24004944 	.word	0x24004944
 80142b8:	24004954 	.word	0x24004954
 80142bc:	24004958 	.word	0x24004958

080142c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b086      	sub	sp, #24
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d04d      	beq.n	801436e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80142d2:	2308      	movs	r3, #8
 80142d4:	425b      	negs	r3, r3
 80142d6:	697a      	ldr	r2, [r7, #20]
 80142d8:	4413      	add	r3, r2
 80142da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	685a      	ldr	r2, [r3, #4]
 80142e4:	4b24      	ldr	r3, [pc, #144]	; (8014378 <vPortFree+0xb8>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	4013      	ands	r3, r2
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d10a      	bne.n	8014304 <vPortFree+0x44>
	__asm volatile
 80142ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f2:	f383 8811 	msr	BASEPRI, r3
 80142f6:	f3bf 8f6f 	isb	sy
 80142fa:	f3bf 8f4f 	dsb	sy
 80142fe:	60fb      	str	r3, [r7, #12]
}
 8014300:	bf00      	nop
 8014302:	e7fe      	b.n	8014302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d00a      	beq.n	8014322 <vPortFree+0x62>
	__asm volatile
 801430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014310:	f383 8811 	msr	BASEPRI, r3
 8014314:	f3bf 8f6f 	isb	sy
 8014318:	f3bf 8f4f 	dsb	sy
 801431c:	60bb      	str	r3, [r7, #8]
}
 801431e:	bf00      	nop
 8014320:	e7fe      	b.n	8014320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014322:	693b      	ldr	r3, [r7, #16]
 8014324:	685a      	ldr	r2, [r3, #4]
 8014326:	4b14      	ldr	r3, [pc, #80]	; (8014378 <vPortFree+0xb8>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	4013      	ands	r3, r2
 801432c:	2b00      	cmp	r3, #0
 801432e:	d01e      	beq.n	801436e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014330:	693b      	ldr	r3, [r7, #16]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d11a      	bne.n	801436e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	685a      	ldr	r2, [r3, #4]
 801433c:	4b0e      	ldr	r3, [pc, #56]	; (8014378 <vPortFree+0xb8>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	43db      	mvns	r3, r3
 8014342:	401a      	ands	r2, r3
 8014344:	693b      	ldr	r3, [r7, #16]
 8014346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014348:	f7ff f9d8 	bl	80136fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	685a      	ldr	r2, [r3, #4]
 8014350:	4b0a      	ldr	r3, [pc, #40]	; (801437c <vPortFree+0xbc>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	4413      	add	r3, r2
 8014356:	4a09      	ldr	r2, [pc, #36]	; (801437c <vPortFree+0xbc>)
 8014358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801435a:	6938      	ldr	r0, [r7, #16]
 801435c:	f000 f874 	bl	8014448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014360:	4b07      	ldr	r3, [pc, #28]	; (8014380 <vPortFree+0xc0>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	3301      	adds	r3, #1
 8014366:	4a06      	ldr	r2, [pc, #24]	; (8014380 <vPortFree+0xc0>)
 8014368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801436a:	f7ff f9d5 	bl	8013718 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801436e:	bf00      	nop
 8014370:	3718      	adds	r7, #24
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	24004960 	.word	0x24004960
 801437c:	24004950 	.word	0x24004950
 8014380:	2400495c 	.word	0x2400495c

08014384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014384:	b480      	push	{r7}
 8014386:	b085      	sub	sp, #20
 8014388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801438a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801438e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014390:	4b27      	ldr	r3, [pc, #156]	; (8014430 <prvHeapInit+0xac>)
 8014392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	f003 0307 	and.w	r3, r3, #7
 801439a:	2b00      	cmp	r3, #0
 801439c:	d00c      	beq.n	80143b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	3307      	adds	r3, #7
 80143a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	f023 0307 	bic.w	r3, r3, #7
 80143aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80143ac:	68ba      	ldr	r2, [r7, #8]
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	1ad3      	subs	r3, r2, r3
 80143b2:	4a1f      	ldr	r2, [pc, #124]	; (8014430 <prvHeapInit+0xac>)
 80143b4:	4413      	add	r3, r2
 80143b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80143bc:	4a1d      	ldr	r2, [pc, #116]	; (8014434 <prvHeapInit+0xb0>)
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80143c2:	4b1c      	ldr	r3, [pc, #112]	; (8014434 <prvHeapInit+0xb0>)
 80143c4:	2200      	movs	r2, #0
 80143c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	68ba      	ldr	r2, [r7, #8]
 80143cc:	4413      	add	r3, r2
 80143ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80143d0:	2208      	movs	r2, #8
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	1a9b      	subs	r3, r3, r2
 80143d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	f023 0307 	bic.w	r3, r3, #7
 80143de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	4a15      	ldr	r2, [pc, #84]	; (8014438 <prvHeapInit+0xb4>)
 80143e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80143e6:	4b14      	ldr	r3, [pc, #80]	; (8014438 <prvHeapInit+0xb4>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	2200      	movs	r2, #0
 80143ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80143ee:	4b12      	ldr	r3, [pc, #72]	; (8014438 <prvHeapInit+0xb4>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	2200      	movs	r2, #0
 80143f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	68fa      	ldr	r2, [r7, #12]
 80143fe:	1ad2      	subs	r2, r2, r3
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014404:	4b0c      	ldr	r3, [pc, #48]	; (8014438 <prvHeapInit+0xb4>)
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	685b      	ldr	r3, [r3, #4]
 8014410:	4a0a      	ldr	r2, [pc, #40]	; (801443c <prvHeapInit+0xb8>)
 8014412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	4a09      	ldr	r2, [pc, #36]	; (8014440 <prvHeapInit+0xbc>)
 801441a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801441c:	4b09      	ldr	r3, [pc, #36]	; (8014444 <prvHeapInit+0xc0>)
 801441e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014422:	601a      	str	r2, [r3, #0]
}
 8014424:	bf00      	nop
 8014426:	3714      	adds	r7, #20
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr
 8014430:	24000d44 	.word	0x24000d44
 8014434:	24004944 	.word	0x24004944
 8014438:	2400494c 	.word	0x2400494c
 801443c:	24004954 	.word	0x24004954
 8014440:	24004950 	.word	0x24004950
 8014444:	24004960 	.word	0x24004960

08014448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014448:	b480      	push	{r7}
 801444a:	b085      	sub	sp, #20
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014450:	4b28      	ldr	r3, [pc, #160]	; (80144f4 <prvInsertBlockIntoFreeList+0xac>)
 8014452:	60fb      	str	r3, [r7, #12]
 8014454:	e002      	b.n	801445c <prvInsertBlockIntoFreeList+0x14>
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	60fb      	str	r3, [r7, #12]
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	687a      	ldr	r2, [r7, #4]
 8014462:	429a      	cmp	r2, r3
 8014464:	d8f7      	bhi.n	8014456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	685b      	ldr	r3, [r3, #4]
 801446e:	68ba      	ldr	r2, [r7, #8]
 8014470:	4413      	add	r3, r2
 8014472:	687a      	ldr	r2, [r7, #4]
 8014474:	429a      	cmp	r2, r3
 8014476:	d108      	bne.n	801448a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	685a      	ldr	r2, [r3, #4]
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	685b      	ldr	r3, [r3, #4]
 8014480:	441a      	add	r2, r3
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	68ba      	ldr	r2, [r7, #8]
 8014494:	441a      	add	r2, r3
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	429a      	cmp	r2, r3
 801449c:	d118      	bne.n	80144d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	681a      	ldr	r2, [r3, #0]
 80144a2:	4b15      	ldr	r3, [pc, #84]	; (80144f8 <prvInsertBlockIntoFreeList+0xb0>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d00d      	beq.n	80144c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	685a      	ldr	r2, [r3, #4]
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	685b      	ldr	r3, [r3, #4]
 80144b4:	441a      	add	r2, r3
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	601a      	str	r2, [r3, #0]
 80144c4:	e008      	b.n	80144d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80144c6:	4b0c      	ldr	r3, [pc, #48]	; (80144f8 <prvInsertBlockIntoFreeList+0xb0>)
 80144c8:	681a      	ldr	r2, [r3, #0]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	601a      	str	r2, [r3, #0]
 80144ce:	e003      	b.n	80144d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	681a      	ldr	r2, [r3, #0]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80144d8:	68fa      	ldr	r2, [r7, #12]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d002      	beq.n	80144e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	687a      	ldr	r2, [r7, #4]
 80144e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80144e6:	bf00      	nop
 80144e8:	3714      	adds	r7, #20
 80144ea:	46bd      	mov	sp, r7
 80144ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop
 80144f4:	24004944 	.word	0x24004944
 80144f8:	2400494c 	.word	0x2400494c

080144fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014500:	2200      	movs	r2, #0
 8014502:	4913      	ldr	r1, [pc, #76]	; (8014550 <MX_USB_DEVICE_Init+0x54>)
 8014504:	4813      	ldr	r0, [pc, #76]	; (8014554 <MX_USB_DEVICE_Init+0x58>)
 8014506:	f7fd faf3 	bl	8011af0 <USBD_Init>
 801450a:	4603      	mov	r3, r0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d001      	beq.n	8014514 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014510:	f7ed fc5a 	bl	8001dc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014514:	4910      	ldr	r1, [pc, #64]	; (8014558 <MX_USB_DEVICE_Init+0x5c>)
 8014516:	480f      	ldr	r0, [pc, #60]	; (8014554 <MX_USB_DEVICE_Init+0x58>)
 8014518:	f7fd fb1a 	bl	8011b50 <USBD_RegisterClass>
 801451c:	4603      	mov	r3, r0
 801451e:	2b00      	cmp	r3, #0
 8014520:	d001      	beq.n	8014526 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014522:	f7ed fc51 	bl	8001dc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014526:	490d      	ldr	r1, [pc, #52]	; (801455c <MX_USB_DEVICE_Init+0x60>)
 8014528:	480a      	ldr	r0, [pc, #40]	; (8014554 <MX_USB_DEVICE_Init+0x58>)
 801452a:	f7fd fa3b 	bl	80119a4 <USBD_CDC_RegisterInterface>
 801452e:	4603      	mov	r3, r0
 8014530:	2b00      	cmp	r3, #0
 8014532:	d001      	beq.n	8014538 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014534:	f7ed fc48 	bl	8001dc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014538:	4806      	ldr	r0, [pc, #24]	; (8014554 <MX_USB_DEVICE_Init+0x58>)
 801453a:	f7fd fb30 	bl	8011b9e <USBD_Start>
 801453e:	4603      	mov	r3, r0
 8014540:	2b00      	cmp	r3, #0
 8014542:	d001      	beq.n	8014548 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014544:	f7ed fc40 	bl	8001dc8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014548:	f7f4 f822 	bl	8008590 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801454c:	bf00      	nop
 801454e:	bd80      	pop	{r7, pc}
 8014550:	2400020c 	.word	0x2400020c
 8014554:	240051f0 	.word	0x240051f0
 8014558:	240000f0 	.word	0x240000f0
 801455c:	240001f8 	.word	0x240001f8

08014560 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014564:	2200      	movs	r2, #0
 8014566:	4905      	ldr	r1, [pc, #20]	; (801457c <CDC_Init_FS+0x1c>)
 8014568:	4805      	ldr	r0, [pc, #20]	; (8014580 <CDC_Init_FS+0x20>)
 801456a:	f7fd fa30 	bl	80119ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801456e:	4905      	ldr	r1, [pc, #20]	; (8014584 <CDC_Init_FS+0x24>)
 8014570:	4803      	ldr	r0, [pc, #12]	; (8014580 <CDC_Init_FS+0x20>)
 8014572:	f7fd fa4a 	bl	8011a0a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014576:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014578:	4618      	mov	r0, r3
 801457a:	bd80      	pop	{r7, pc}
 801457c:	24005cc0 	.word	0x24005cc0
 8014580:	240051f0 	.word	0x240051f0
 8014584:	240054c0 	.word	0x240054c0

08014588 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014588:	b480      	push	{r7}
 801458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801458c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801458e:	4618      	mov	r0, r3
 8014590:	46bd      	mov	sp, r7
 8014592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014596:	4770      	bx	lr

08014598 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014598:	b480      	push	{r7}
 801459a:	b083      	sub	sp, #12
 801459c:	af00      	add	r7, sp, #0
 801459e:	4603      	mov	r3, r0
 80145a0:	6039      	str	r1, [r7, #0]
 80145a2:	71fb      	strb	r3, [r7, #7]
 80145a4:	4613      	mov	r3, r2
 80145a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80145a8:	79fb      	ldrb	r3, [r7, #7]
 80145aa:	2b23      	cmp	r3, #35	; 0x23
 80145ac:	d84a      	bhi.n	8014644 <CDC_Control_FS+0xac>
 80145ae:	a201      	add	r2, pc, #4	; (adr r2, 80145b4 <CDC_Control_FS+0x1c>)
 80145b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b4:	08014645 	.word	0x08014645
 80145b8:	08014645 	.word	0x08014645
 80145bc:	08014645 	.word	0x08014645
 80145c0:	08014645 	.word	0x08014645
 80145c4:	08014645 	.word	0x08014645
 80145c8:	08014645 	.word	0x08014645
 80145cc:	08014645 	.word	0x08014645
 80145d0:	08014645 	.word	0x08014645
 80145d4:	08014645 	.word	0x08014645
 80145d8:	08014645 	.word	0x08014645
 80145dc:	08014645 	.word	0x08014645
 80145e0:	08014645 	.word	0x08014645
 80145e4:	08014645 	.word	0x08014645
 80145e8:	08014645 	.word	0x08014645
 80145ec:	08014645 	.word	0x08014645
 80145f0:	08014645 	.word	0x08014645
 80145f4:	08014645 	.word	0x08014645
 80145f8:	08014645 	.word	0x08014645
 80145fc:	08014645 	.word	0x08014645
 8014600:	08014645 	.word	0x08014645
 8014604:	08014645 	.word	0x08014645
 8014608:	08014645 	.word	0x08014645
 801460c:	08014645 	.word	0x08014645
 8014610:	08014645 	.word	0x08014645
 8014614:	08014645 	.word	0x08014645
 8014618:	08014645 	.word	0x08014645
 801461c:	08014645 	.word	0x08014645
 8014620:	08014645 	.word	0x08014645
 8014624:	08014645 	.word	0x08014645
 8014628:	08014645 	.word	0x08014645
 801462c:	08014645 	.word	0x08014645
 8014630:	08014645 	.word	0x08014645
 8014634:	08014645 	.word	0x08014645
 8014638:	08014645 	.word	0x08014645
 801463c:	08014645 	.word	0x08014645
 8014640:	08014645 	.word	0x08014645
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014644:	bf00      	nop
  }

  return (USBD_OK);
 8014646:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014648:	4618      	mov	r0, r3
 801464a:	370c      	adds	r7, #12
 801464c:	46bd      	mov	sp, r7
 801464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014652:	4770      	bx	lr

08014654 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801465e:	6879      	ldr	r1, [r7, #4]
 8014660:	4805      	ldr	r0, [pc, #20]	; (8014678 <CDC_Receive_FS+0x24>)
 8014662:	f7fd f9d2 	bl	8011a0a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014666:	4804      	ldr	r0, [pc, #16]	; (8014678 <CDC_Receive_FS+0x24>)
 8014668:	f7fd fa18 	bl	8011a9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801466c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801466e:	4618      	mov	r0, r3
 8014670:	3708      	adds	r7, #8
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	240051f0 	.word	0x240051f0

0801467c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b084      	sub	sp, #16
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	460b      	mov	r3, r1
 8014686:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014688:	2300      	movs	r3, #0
 801468a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801468c:	4b0d      	ldr	r3, [pc, #52]	; (80146c4 <CDC_Transmit_FS+0x48>)
 801468e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014692:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801469a:	2b00      	cmp	r3, #0
 801469c:	d001      	beq.n	80146a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801469e:	2301      	movs	r3, #1
 80146a0:	e00b      	b.n	80146ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80146a2:	887b      	ldrh	r3, [r7, #2]
 80146a4:	461a      	mov	r2, r3
 80146a6:	6879      	ldr	r1, [r7, #4]
 80146a8:	4806      	ldr	r0, [pc, #24]	; (80146c4 <CDC_Transmit_FS+0x48>)
 80146aa:	f7fd f990 	bl	80119ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80146ae:	4805      	ldr	r0, [pc, #20]	; (80146c4 <CDC_Transmit_FS+0x48>)
 80146b0:	f7fd f9c4 	bl	8011a3c <USBD_CDC_TransmitPacket>
 80146b4:	4603      	mov	r3, r0
 80146b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80146b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3710      	adds	r7, #16
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	240051f0 	.word	0x240051f0

080146c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80146c8:	b480      	push	{r7}
 80146ca:	b087      	sub	sp, #28
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	60f8      	str	r0, [r7, #12]
 80146d0:	60b9      	str	r1, [r7, #8]
 80146d2:	4613      	mov	r3, r2
 80146d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80146d6:	2300      	movs	r3, #0
 80146d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80146da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146de:	4618      	mov	r0, r3
 80146e0:	371c      	adds	r7, #28
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr
	...

080146ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146ec:	b480      	push	{r7}
 80146ee:	b083      	sub	sp, #12
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	4603      	mov	r3, r0
 80146f4:	6039      	str	r1, [r7, #0]
 80146f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	2212      	movs	r2, #18
 80146fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80146fe:	4b03      	ldr	r3, [pc, #12]	; (801470c <USBD_FS_DeviceDescriptor+0x20>)
}
 8014700:	4618      	mov	r0, r3
 8014702:	370c      	adds	r7, #12
 8014704:	46bd      	mov	sp, r7
 8014706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470a:	4770      	bx	lr
 801470c:	24000228 	.word	0x24000228

08014710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014710:	b480      	push	{r7}
 8014712:	b083      	sub	sp, #12
 8014714:	af00      	add	r7, sp, #0
 8014716:	4603      	mov	r3, r0
 8014718:	6039      	str	r1, [r7, #0]
 801471a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	2204      	movs	r2, #4
 8014720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014722:	4b03      	ldr	r3, [pc, #12]	; (8014730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014724:	4618      	mov	r0, r3
 8014726:	370c      	adds	r7, #12
 8014728:	46bd      	mov	sp, r7
 801472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472e:	4770      	bx	lr
 8014730:	2400023c 	.word	0x2400023c

08014734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	4603      	mov	r3, r0
 801473c:	6039      	str	r1, [r7, #0]
 801473e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014740:	79fb      	ldrb	r3, [r7, #7]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d105      	bne.n	8014752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014746:	683a      	ldr	r2, [r7, #0]
 8014748:	4907      	ldr	r1, [pc, #28]	; (8014768 <USBD_FS_ProductStrDescriptor+0x34>)
 801474a:	4808      	ldr	r0, [pc, #32]	; (801476c <USBD_FS_ProductStrDescriptor+0x38>)
 801474c:	f7fe fa59 	bl	8012c02 <USBD_GetString>
 8014750:	e004      	b.n	801475c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014752:	683a      	ldr	r2, [r7, #0]
 8014754:	4904      	ldr	r1, [pc, #16]	; (8014768 <USBD_FS_ProductStrDescriptor+0x34>)
 8014756:	4805      	ldr	r0, [pc, #20]	; (801476c <USBD_FS_ProductStrDescriptor+0x38>)
 8014758:	f7fe fa53 	bl	8012c02 <USBD_GetString>
  }
  return USBD_StrDesc;
 801475c:	4b02      	ldr	r3, [pc, #8]	; (8014768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801475e:	4618      	mov	r0, r3
 8014760:	3708      	adds	r7, #8
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	240064c0 	.word	0x240064c0
 801476c:	08018044 	.word	0x08018044

08014770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b082      	sub	sp, #8
 8014774:	af00      	add	r7, sp, #0
 8014776:	4603      	mov	r3, r0
 8014778:	6039      	str	r1, [r7, #0]
 801477a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801477c:	683a      	ldr	r2, [r7, #0]
 801477e:	4904      	ldr	r1, [pc, #16]	; (8014790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014780:	4804      	ldr	r0, [pc, #16]	; (8014794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014782:	f7fe fa3e 	bl	8012c02 <USBD_GetString>
  return USBD_StrDesc;
 8014786:	4b02      	ldr	r3, [pc, #8]	; (8014790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014788:	4618      	mov	r0, r3
 801478a:	3708      	adds	r7, #8
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}
 8014790:	240064c0 	.word	0x240064c0
 8014794:	0801805c 	.word	0x0801805c

08014798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b082      	sub	sp, #8
 801479c:	af00      	add	r7, sp, #0
 801479e:	4603      	mov	r3, r0
 80147a0:	6039      	str	r1, [r7, #0]
 80147a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	221a      	movs	r2, #26
 80147a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80147aa:	f000 f843 	bl	8014834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80147ae:	4b02      	ldr	r3, [pc, #8]	; (80147b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3708      	adds	r7, #8
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	24000240 	.word	0x24000240

080147bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	4603      	mov	r3, r0
 80147c4:	6039      	str	r1, [r7, #0]
 80147c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80147c8:	79fb      	ldrb	r3, [r7, #7]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d105      	bne.n	80147da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80147ce:	683a      	ldr	r2, [r7, #0]
 80147d0:	4907      	ldr	r1, [pc, #28]	; (80147f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80147d2:	4808      	ldr	r0, [pc, #32]	; (80147f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80147d4:	f7fe fa15 	bl	8012c02 <USBD_GetString>
 80147d8:	e004      	b.n	80147e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80147da:	683a      	ldr	r2, [r7, #0]
 80147dc:	4904      	ldr	r1, [pc, #16]	; (80147f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80147de:	4805      	ldr	r0, [pc, #20]	; (80147f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80147e0:	f7fe fa0f 	bl	8012c02 <USBD_GetString>
  }
  return USBD_StrDesc;
 80147e4:	4b02      	ldr	r3, [pc, #8]	; (80147f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3708      	adds	r7, #8
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
 80147ee:	bf00      	nop
 80147f0:	240064c0 	.word	0x240064c0
 80147f4:	08018070 	.word	0x08018070

080147f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	4603      	mov	r3, r0
 8014800:	6039      	str	r1, [r7, #0]
 8014802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014804:	79fb      	ldrb	r3, [r7, #7]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d105      	bne.n	8014816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801480a:	683a      	ldr	r2, [r7, #0]
 801480c:	4907      	ldr	r1, [pc, #28]	; (801482c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801480e:	4808      	ldr	r0, [pc, #32]	; (8014830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014810:	f7fe f9f7 	bl	8012c02 <USBD_GetString>
 8014814:	e004      	b.n	8014820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014816:	683a      	ldr	r2, [r7, #0]
 8014818:	4904      	ldr	r1, [pc, #16]	; (801482c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801481a:	4805      	ldr	r0, [pc, #20]	; (8014830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801481c:	f7fe f9f1 	bl	8012c02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014820:	4b02      	ldr	r3, [pc, #8]	; (801482c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014822:	4618      	mov	r0, r3
 8014824:	3708      	adds	r7, #8
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
 801482a:	bf00      	nop
 801482c:	240064c0 	.word	0x240064c0
 8014830:	0801807c 	.word	0x0801807c

08014834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b084      	sub	sp, #16
 8014838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801483a:	4b0f      	ldr	r3, [pc, #60]	; (8014878 <Get_SerialNum+0x44>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014840:	4b0e      	ldr	r3, [pc, #56]	; (801487c <Get_SerialNum+0x48>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014846:	4b0e      	ldr	r3, [pc, #56]	; (8014880 <Get_SerialNum+0x4c>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801484c:	68fa      	ldr	r2, [r7, #12]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	4413      	add	r3, r2
 8014852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d009      	beq.n	801486e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801485a:	2208      	movs	r2, #8
 801485c:	4909      	ldr	r1, [pc, #36]	; (8014884 <Get_SerialNum+0x50>)
 801485e:	68f8      	ldr	r0, [r7, #12]
 8014860:	f000 f814 	bl	801488c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014864:	2204      	movs	r2, #4
 8014866:	4908      	ldr	r1, [pc, #32]	; (8014888 <Get_SerialNum+0x54>)
 8014868:	68b8      	ldr	r0, [r7, #8]
 801486a:	f000 f80f 	bl	801488c <IntToUnicode>
  }
}
 801486e:	bf00      	nop
 8014870:	3710      	adds	r7, #16
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}
 8014876:	bf00      	nop
 8014878:	1ff1e800 	.word	0x1ff1e800
 801487c:	1ff1e804 	.word	0x1ff1e804
 8014880:	1ff1e808 	.word	0x1ff1e808
 8014884:	24000242 	.word	0x24000242
 8014888:	24000252 	.word	0x24000252

0801488c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801488c:	b480      	push	{r7}
 801488e:	b087      	sub	sp, #28
 8014890:	af00      	add	r7, sp, #0
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	60b9      	str	r1, [r7, #8]
 8014896:	4613      	mov	r3, r2
 8014898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801489a:	2300      	movs	r3, #0
 801489c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801489e:	2300      	movs	r3, #0
 80148a0:	75fb      	strb	r3, [r7, #23]
 80148a2:	e027      	b.n	80148f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	0f1b      	lsrs	r3, r3, #28
 80148a8:	2b09      	cmp	r3, #9
 80148aa:	d80b      	bhi.n	80148c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	0f1b      	lsrs	r3, r3, #28
 80148b0:	b2da      	uxtb	r2, r3
 80148b2:	7dfb      	ldrb	r3, [r7, #23]
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	4619      	mov	r1, r3
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	440b      	add	r3, r1
 80148bc:	3230      	adds	r2, #48	; 0x30
 80148be:	b2d2      	uxtb	r2, r2
 80148c0:	701a      	strb	r2, [r3, #0]
 80148c2:	e00a      	b.n	80148da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	0f1b      	lsrs	r3, r3, #28
 80148c8:	b2da      	uxtb	r2, r3
 80148ca:	7dfb      	ldrb	r3, [r7, #23]
 80148cc:	005b      	lsls	r3, r3, #1
 80148ce:	4619      	mov	r1, r3
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	440b      	add	r3, r1
 80148d4:	3237      	adds	r2, #55	; 0x37
 80148d6:	b2d2      	uxtb	r2, r2
 80148d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	011b      	lsls	r3, r3, #4
 80148de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80148e0:	7dfb      	ldrb	r3, [r7, #23]
 80148e2:	005b      	lsls	r3, r3, #1
 80148e4:	3301      	adds	r3, #1
 80148e6:	68ba      	ldr	r2, [r7, #8]
 80148e8:	4413      	add	r3, r2
 80148ea:	2200      	movs	r2, #0
 80148ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80148ee:	7dfb      	ldrb	r3, [r7, #23]
 80148f0:	3301      	adds	r3, #1
 80148f2:	75fb      	strb	r3, [r7, #23]
 80148f4:	7dfa      	ldrb	r2, [r7, #23]
 80148f6:	79fb      	ldrb	r3, [r7, #7]
 80148f8:	429a      	cmp	r2, r3
 80148fa:	d3d3      	bcc.n	80148a4 <IntToUnicode+0x18>
  }
}
 80148fc:	bf00      	nop
 80148fe:	bf00      	nop
 8014900:	371c      	adds	r7, #28
 8014902:	46bd      	mov	sp, r7
 8014904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014908:	4770      	bx	lr
	...

0801490c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b08a      	sub	sp, #40	; 0x28
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014914:	f107 0314 	add.w	r3, r7, #20
 8014918:	2200      	movs	r2, #0
 801491a:	601a      	str	r2, [r3, #0]
 801491c:	605a      	str	r2, [r3, #4]
 801491e:	609a      	str	r2, [r3, #8]
 8014920:	60da      	str	r2, [r3, #12]
 8014922:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	4a1f      	ldr	r2, [pc, #124]	; (80149a8 <HAL_PCD_MspInit+0x9c>)
 801492a:	4293      	cmp	r3, r2
 801492c:	d138      	bne.n	80149a0 <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801492e:	f7f3 fe2f 	bl	8008590 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014932:	4b1e      	ldr	r3, [pc, #120]	; (80149ac <HAL_PCD_MspInit+0xa0>)
 8014934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014938:	4a1c      	ldr	r2, [pc, #112]	; (80149ac <HAL_PCD_MspInit+0xa0>)
 801493a:	f043 0301 	orr.w	r3, r3, #1
 801493e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014942:	4b1a      	ldr	r3, [pc, #104]	; (80149ac <HAL_PCD_MspInit+0xa0>)
 8014944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014948:	f003 0301 	and.w	r3, r3, #1
 801494c:	613b      	str	r3, [r7, #16]
 801494e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014950:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014956:	2302      	movs	r3, #2
 8014958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801495a:	2300      	movs	r3, #0
 801495c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801495e:	2300      	movs	r3, #0
 8014960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014962:	230a      	movs	r3, #10
 8014964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014966:	f107 0314 	add.w	r3, r7, #20
 801496a:	4619      	mov	r1, r3
 801496c:	4810      	ldr	r0, [pc, #64]	; (80149b0 <HAL_PCD_MspInit+0xa4>)
 801496e:	f7f2 f9ef 	bl	8006d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014972:	4b0e      	ldr	r3, [pc, #56]	; (80149ac <HAL_PCD_MspInit+0xa0>)
 8014974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014978:	4a0c      	ldr	r2, [pc, #48]	; (80149ac <HAL_PCD_MspInit+0xa0>)
 801497a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801497e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014982:	4b0a      	ldr	r3, [pc, #40]	; (80149ac <HAL_PCD_MspInit+0xa0>)
 8014984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801498c:	60fb      	str	r3, [r7, #12]
 801498e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014990:	2200      	movs	r2, #0
 8014992:	2105      	movs	r1, #5
 8014994:	2065      	movs	r0, #101	; 0x65
 8014996:	f7f1 faff 	bl	8005f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801499a:	2065      	movs	r0, #101	; 0x65
 801499c:	f7f1 fb16 	bl	8005fcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80149a0:	bf00      	nop
 80149a2:	3728      	adds	r7, #40	; 0x28
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	40080000 	.word	0x40080000
 80149ac:	58024400 	.word	0x58024400
 80149b0:	58020000 	.word	0x58020000

080149b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80149c8:	4619      	mov	r1, r3
 80149ca:	4610      	mov	r0, r2
 80149cc:	f7fd f932 	bl	8011c34 <USBD_LL_SetupStage>
}
 80149d0:	bf00      	nop
 80149d2:	3708      	adds	r7, #8
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}

080149d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	460b      	mov	r3, r1
 80149e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80149ea:	78fa      	ldrb	r2, [r7, #3]
 80149ec:	6879      	ldr	r1, [r7, #4]
 80149ee:	4613      	mov	r3, r2
 80149f0:	00db      	lsls	r3, r3, #3
 80149f2:	1a9b      	subs	r3, r3, r2
 80149f4:	009b      	lsls	r3, r3, #2
 80149f6:	440b      	add	r3, r1
 80149f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80149fc:	681a      	ldr	r2, [r3, #0]
 80149fe:	78fb      	ldrb	r3, [r7, #3]
 8014a00:	4619      	mov	r1, r3
 8014a02:	f7fd f96c 	bl	8011cde <USBD_LL_DataOutStage>
}
 8014a06:	bf00      	nop
 8014a08:	3708      	adds	r7, #8
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}

08014a0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a0e:	b580      	push	{r7, lr}
 8014a10:	b082      	sub	sp, #8
 8014a12:	af00      	add	r7, sp, #0
 8014a14:	6078      	str	r0, [r7, #4]
 8014a16:	460b      	mov	r3, r1
 8014a18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014a20:	78fa      	ldrb	r2, [r7, #3]
 8014a22:	6879      	ldr	r1, [r7, #4]
 8014a24:	4613      	mov	r3, r2
 8014a26:	00db      	lsls	r3, r3, #3
 8014a28:	1a9b      	subs	r3, r3, r2
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	440b      	add	r3, r1
 8014a2e:	3348      	adds	r3, #72	; 0x48
 8014a30:	681a      	ldr	r2, [r3, #0]
 8014a32:	78fb      	ldrb	r3, [r7, #3]
 8014a34:	4619      	mov	r1, r3
 8014a36:	f7fd f9b5 	bl	8011da4 <USBD_LL_DataInStage>
}
 8014a3a:	bf00      	nop
 8014a3c:	3708      	adds	r7, #8
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}

08014a42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a42:	b580      	push	{r7, lr}
 8014a44:	b082      	sub	sp, #8
 8014a46:	af00      	add	r7, sp, #0
 8014a48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7fd fac9 	bl	8011fe8 <USBD_LL_SOF>
}
 8014a56:	bf00      	nop
 8014a58:	3708      	adds	r7, #8
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}

08014a5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a5e:	b580      	push	{r7, lr}
 8014a60:	b084      	sub	sp, #16
 8014a62:	af00      	add	r7, sp, #0
 8014a64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014a66:	2301      	movs	r3, #1
 8014a68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	68db      	ldr	r3, [r3, #12]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d102      	bne.n	8014a78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014a72:	2300      	movs	r3, #0
 8014a74:	73fb      	strb	r3, [r7, #15]
 8014a76:	e008      	b.n	8014a8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	68db      	ldr	r3, [r3, #12]
 8014a7c:	2b02      	cmp	r3, #2
 8014a7e:	d102      	bne.n	8014a86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014a80:	2301      	movs	r3, #1
 8014a82:	73fb      	strb	r3, [r7, #15]
 8014a84:	e001      	b.n	8014a8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014a86:	f7ed f99f 	bl	8001dc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014a90:	7bfa      	ldrb	r2, [r7, #15]
 8014a92:	4611      	mov	r1, r2
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7fd fa69 	bl	8011f6c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f7fd fa15 	bl	8011ed0 <USBD_LL_Reset>
}
 8014aa6:	bf00      	nop
 8014aa8:	3710      	adds	r7, #16
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
	...

08014ab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f7fd fa64 	bl	8011f8c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	687a      	ldr	r2, [r7, #4]
 8014ad0:	6812      	ldr	r2, [r2, #0]
 8014ad2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014ad6:	f043 0301 	orr.w	r3, r3, #1
 8014ada:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	6a1b      	ldr	r3, [r3, #32]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d005      	beq.n	8014af0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ae4:	4b04      	ldr	r3, [pc, #16]	; (8014af8 <HAL_PCD_SuspendCallback+0x48>)
 8014ae6:	691b      	ldr	r3, [r3, #16]
 8014ae8:	4a03      	ldr	r2, [pc, #12]	; (8014af8 <HAL_PCD_SuspendCallback+0x48>)
 8014aea:	f043 0306 	orr.w	r3, r3, #6
 8014aee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014af0:	bf00      	nop
 8014af2:	3708      	adds	r7, #8
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}
 8014af8:	e000ed00 	.word	0xe000ed00

08014afc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fd fa54 	bl	8011fb8 <USBD_LL_Resume>
}
 8014b10:	bf00      	nop
 8014b12:	3708      	adds	r7, #8
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}

08014b18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	460b      	mov	r3, r1
 8014b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b2a:	78fa      	ldrb	r2, [r7, #3]
 8014b2c:	4611      	mov	r1, r2
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fd faa2 	bl	8012078 <USBD_LL_IsoOUTIncomplete>
}
 8014b34:	bf00      	nop
 8014b36:	3708      	adds	r7, #8
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}

08014b3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b082      	sub	sp, #8
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
 8014b44:	460b      	mov	r3, r1
 8014b46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b4e:	78fa      	ldrb	r2, [r7, #3]
 8014b50:	4611      	mov	r1, r2
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7fd fa6a 	bl	801202c <USBD_LL_IsoINIncomplete>
}
 8014b58:	bf00      	nop
 8014b5a:	3708      	adds	r7, #8
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}

08014b60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fd faa8 	bl	80120c4 <USBD_LL_DevConnected>
}
 8014b74:	bf00      	nop
 8014b76:	3708      	adds	r7, #8
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}

08014b7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f7fd faa5 	bl	80120da <USBD_LL_DevDisconnected>
}
 8014b90:	bf00      	nop
 8014b92:	3708      	adds	r7, #8
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}

08014b98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b082      	sub	sp, #8
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d13e      	bne.n	8014c26 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014ba8:	4a21      	ldr	r2, [pc, #132]	; (8014c30 <USBD_LL_Init+0x98>)
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	4a1f      	ldr	r2, [pc, #124]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014bb8:	4b1d      	ldr	r3, [pc, #116]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bba:	4a1e      	ldr	r2, [pc, #120]	; (8014c34 <USBD_LL_Init+0x9c>)
 8014bbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8014bbe:	4b1c      	ldr	r3, [pc, #112]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bc0:	2209      	movs	r2, #9
 8014bc2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014bc4:	4b1a      	ldr	r3, [pc, #104]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bc6:	2202      	movs	r2, #2
 8014bc8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 8014bca:	4b19      	ldr	r3, [pc, #100]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bcc:	2201      	movs	r2, #1
 8014bce:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014bd0:	4b17      	ldr	r3, [pc, #92]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bd2:	2202      	movs	r2, #2
 8014bd4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014bd6:	4b16      	ldr	r3, [pc, #88]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bd8:	2200      	movs	r2, #0
 8014bda:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014bdc:	4b14      	ldr	r3, [pc, #80]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bde:	2200      	movs	r2, #0
 8014be0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014be2:	4b13      	ldr	r3, [pc, #76]	; (8014c30 <USBD_LL_Init+0x98>)
 8014be4:	2200      	movs	r2, #0
 8014be6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014be8:	4b11      	ldr	r3, [pc, #68]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bea:	2200      	movs	r2, #0
 8014bec:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014bee:	4b10      	ldr	r3, [pc, #64]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014bf4:	4b0e      	ldr	r3, [pc, #56]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014bfa:	480d      	ldr	r0, [pc, #52]	; (8014c30 <USBD_LL_Init+0x98>)
 8014bfc:	f7f2 faa3 	bl	8007146 <HAL_PCD_Init>
 8014c00:	4603      	mov	r3, r0
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d001      	beq.n	8014c0a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8014c06:	f7ed f8df 	bl	8001dc8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014c0a:	2180      	movs	r1, #128	; 0x80
 8014c0c:	4808      	ldr	r0, [pc, #32]	; (8014c30 <USBD_LL_Init+0x98>)
 8014c0e:	f7f3 fc34 	bl	800847a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014c12:	2240      	movs	r2, #64	; 0x40
 8014c14:	2100      	movs	r1, #0
 8014c16:	4806      	ldr	r0, [pc, #24]	; (8014c30 <USBD_LL_Init+0x98>)
 8014c18:	f7f3 fbe8 	bl	80083ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014c1c:	2280      	movs	r2, #128	; 0x80
 8014c1e:	2101      	movs	r1, #1
 8014c20:	4803      	ldr	r0, [pc, #12]	; (8014c30 <USBD_LL_Init+0x98>)
 8014c22:	f7f3 fbe3 	bl	80083ec <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8014c26:	2300      	movs	r3, #0
}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	3708      	adds	r7, #8
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}
 8014c30:	240066c0 	.word	0x240066c0
 8014c34:	40080000 	.word	0x40080000

08014c38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c40:	2300      	movs	r3, #0
 8014c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c44:	2300      	movs	r3, #0
 8014c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7f2 fb9d 	bl	800738e <HAL_PCD_Start>
 8014c54:	4603      	mov	r3, r0
 8014c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c58:	7bfb      	ldrb	r3, [r7, #15]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f000 f942 	bl	8014ee4 <USBD_Get_USB_Status>
 8014c60:	4603      	mov	r3, r0
 8014c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c66:	4618      	mov	r0, r3
 8014c68:	3710      	adds	r7, #16
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}

08014c6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014c6e:	b580      	push	{r7, lr}
 8014c70:	b084      	sub	sp, #16
 8014c72:	af00      	add	r7, sp, #0
 8014c74:	6078      	str	r0, [r7, #4]
 8014c76:	4608      	mov	r0, r1
 8014c78:	4611      	mov	r1, r2
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	70fb      	strb	r3, [r7, #3]
 8014c80:	460b      	mov	r3, r1
 8014c82:	70bb      	strb	r3, [r7, #2]
 8014c84:	4613      	mov	r3, r2
 8014c86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014c96:	78bb      	ldrb	r3, [r7, #2]
 8014c98:	883a      	ldrh	r2, [r7, #0]
 8014c9a:	78f9      	ldrb	r1, [r7, #3]
 8014c9c:	f7f2 ffae 	bl	8007bfc <HAL_PCD_EP_Open>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ca4:	7bfb      	ldrb	r3, [r7, #15]
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f000 f91c 	bl	8014ee4 <USBD_Get_USB_Status>
 8014cac:	4603      	mov	r3, r0
 8014cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3710      	adds	r7, #16
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}

08014cba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014cba:	b580      	push	{r7, lr}
 8014cbc:	b084      	sub	sp, #16
 8014cbe:	af00      	add	r7, sp, #0
 8014cc0:	6078      	str	r0, [r7, #4]
 8014cc2:	460b      	mov	r3, r1
 8014cc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cca:	2300      	movs	r3, #0
 8014ccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014cd4:	78fa      	ldrb	r2, [r7, #3]
 8014cd6:	4611      	mov	r1, r2
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f7f2 fff7 	bl	8007ccc <HAL_PCD_EP_Close>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ce2:	7bfb      	ldrb	r3, [r7, #15]
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f000 f8fd 	bl	8014ee4 <USBD_Get_USB_Status>
 8014cea:	4603      	mov	r3, r0
 8014cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3710      	adds	r7, #16
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}

08014cf8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b084      	sub	sp, #16
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	460b      	mov	r3, r1
 8014d02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d04:	2300      	movs	r3, #0
 8014d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d12:	78fa      	ldrb	r2, [r7, #3]
 8014d14:	4611      	mov	r1, r2
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7f3 f8cf 	bl	8007eba <HAL_PCD_EP_SetStall>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d20:	7bfb      	ldrb	r3, [r7, #15]
 8014d22:	4618      	mov	r0, r3
 8014d24:	f000 f8de 	bl	8014ee4 <USBD_Get_USB_Status>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3710      	adds	r7, #16
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}

08014d36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d36:	b580      	push	{r7, lr}
 8014d38:	b084      	sub	sp, #16
 8014d3a:	af00      	add	r7, sp, #0
 8014d3c:	6078      	str	r0, [r7, #4]
 8014d3e:	460b      	mov	r3, r1
 8014d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d42:	2300      	movs	r3, #0
 8014d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d46:	2300      	movs	r3, #0
 8014d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d50:	78fa      	ldrb	r2, [r7, #3]
 8014d52:	4611      	mov	r1, r2
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7f3 f914 	bl	8007f82 <HAL_PCD_EP_ClrStall>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d5e:	7bfb      	ldrb	r3, [r7, #15]
 8014d60:	4618      	mov	r0, r3
 8014d62:	f000 f8bf 	bl	8014ee4 <USBD_Get_USB_Status>
 8014d66:	4603      	mov	r3, r0
 8014d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3710      	adds	r7, #16
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d74:	b480      	push	{r7}
 8014d76:	b085      	sub	sp, #20
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	da0b      	bge.n	8014da8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014d90:	78fb      	ldrb	r3, [r7, #3]
 8014d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014d96:	68f9      	ldr	r1, [r7, #12]
 8014d98:	4613      	mov	r3, r2
 8014d9a:	00db      	lsls	r3, r3, #3
 8014d9c:	1a9b      	subs	r3, r3, r2
 8014d9e:	009b      	lsls	r3, r3, #2
 8014da0:	440b      	add	r3, r1
 8014da2:	333e      	adds	r3, #62	; 0x3e
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	e00b      	b.n	8014dc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014da8:	78fb      	ldrb	r3, [r7, #3]
 8014daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014dae:	68f9      	ldr	r1, [r7, #12]
 8014db0:	4613      	mov	r3, r2
 8014db2:	00db      	lsls	r3, r3, #3
 8014db4:	1a9b      	subs	r3, r3, r2
 8014db6:	009b      	lsls	r3, r3, #2
 8014db8:	440b      	add	r3, r1
 8014dba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014dbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3714      	adds	r7, #20
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr

08014dcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b084      	sub	sp, #16
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014dd8:	2300      	movs	r3, #0
 8014dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ddc:	2300      	movs	r3, #0
 8014dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014de6:	78fa      	ldrb	r2, [r7, #3]
 8014de8:	4611      	mov	r1, r2
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7f2 fee1 	bl	8007bb2 <HAL_PCD_SetAddress>
 8014df0:	4603      	mov	r3, r0
 8014df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014df4:	7bfb      	ldrb	r3, [r7, #15]
 8014df6:	4618      	mov	r0, r3
 8014df8:	f000 f874 	bl	8014ee4 <USBD_Get_USB_Status>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3710      	adds	r7, #16
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}

08014e0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014e0a:	b580      	push	{r7, lr}
 8014e0c:	b086      	sub	sp, #24
 8014e0e:	af00      	add	r7, sp, #0
 8014e10:	60f8      	str	r0, [r7, #12]
 8014e12:	607a      	str	r2, [r7, #4]
 8014e14:	603b      	str	r3, [r7, #0]
 8014e16:	460b      	mov	r3, r1
 8014e18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e28:	7af9      	ldrb	r1, [r7, #11]
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	f7f2 fffa 	bl	8007e26 <HAL_PCD_EP_Transmit>
 8014e32:	4603      	mov	r3, r0
 8014e34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e36:	7dfb      	ldrb	r3, [r7, #23]
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f000 f853 	bl	8014ee4 <USBD_Get_USB_Status>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014e42:	7dbb      	ldrb	r3, [r7, #22]
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	3718      	adds	r7, #24
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bd80      	pop	{r7, pc}

08014e4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b086      	sub	sp, #24
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	60f8      	str	r0, [r7, #12]
 8014e54:	607a      	str	r2, [r7, #4]
 8014e56:	603b      	str	r3, [r7, #0]
 8014e58:	460b      	mov	r3, r1
 8014e5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e60:	2300      	movs	r3, #0
 8014e62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014e6a:	7af9      	ldrb	r1, [r7, #11]
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	687a      	ldr	r2, [r7, #4]
 8014e70:	f7f2 ff76 	bl	8007d60 <HAL_PCD_EP_Receive>
 8014e74:	4603      	mov	r3, r0
 8014e76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e78:	7dfb      	ldrb	r3, [r7, #23]
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f000 f832 	bl	8014ee4 <USBD_Get_USB_Status>
 8014e80:	4603      	mov	r3, r0
 8014e82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014e84:	7dbb      	ldrb	r3, [r7, #22]
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	3718      	adds	r7, #24
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}

08014e8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e8e:	b580      	push	{r7, lr}
 8014e90:	b082      	sub	sp, #8
 8014e92:	af00      	add	r7, sp, #0
 8014e94:	6078      	str	r0, [r7, #4]
 8014e96:	460b      	mov	r3, r1
 8014e98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014ea0:	78fa      	ldrb	r2, [r7, #3]
 8014ea2:	4611      	mov	r1, r2
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7f2 ffa6 	bl	8007df6 <HAL_PCD_EP_GetRxCount>
 8014eaa:	4603      	mov	r3, r0
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	3708      	adds	r7, #8
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}

08014eb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b083      	sub	sp, #12
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014ebc:	4b03      	ldr	r3, [pc, #12]	; (8014ecc <USBD_static_malloc+0x18>)
}
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	370c      	adds	r7, #12
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec8:	4770      	bx	lr
 8014eca:	bf00      	nop
 8014ecc:	24004964 	.word	0x24004964

08014ed0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b083      	sub	sp, #12
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]

}
 8014ed8:	bf00      	nop
 8014eda:	370c      	adds	r7, #12
 8014edc:	46bd      	mov	sp, r7
 8014ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee2:	4770      	bx	lr

08014ee4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b085      	sub	sp, #20
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	4603      	mov	r3, r0
 8014eec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014ef2:	79fb      	ldrb	r3, [r7, #7]
 8014ef4:	2b03      	cmp	r3, #3
 8014ef6:	d817      	bhi.n	8014f28 <USBD_Get_USB_Status+0x44>
 8014ef8:	a201      	add	r2, pc, #4	; (adr r2, 8014f00 <USBD_Get_USB_Status+0x1c>)
 8014efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014efe:	bf00      	nop
 8014f00:	08014f11 	.word	0x08014f11
 8014f04:	08014f17 	.word	0x08014f17
 8014f08:	08014f1d 	.word	0x08014f1d
 8014f0c:	08014f23 	.word	0x08014f23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014f10:	2300      	movs	r3, #0
 8014f12:	73fb      	strb	r3, [r7, #15]
    break;
 8014f14:	e00b      	b.n	8014f2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014f16:	2303      	movs	r3, #3
 8014f18:	73fb      	strb	r3, [r7, #15]
    break;
 8014f1a:	e008      	b.n	8014f2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8014f20:	e005      	b.n	8014f2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014f22:	2303      	movs	r3, #3
 8014f24:	73fb      	strb	r3, [r7, #15]
    break;
 8014f26:	e002      	b.n	8014f2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014f28:	2303      	movs	r3, #3
 8014f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8014f2c:	bf00      	nop
  }
  return usb_status;
 8014f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3714      	adds	r7, #20
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr

08014f3c <atoi>:
 8014f3c:	220a      	movs	r2, #10
 8014f3e:	2100      	movs	r1, #0
 8014f40:	f000 bfae 	b.w	8015ea0 <strtol>

08014f44 <__errno>:
 8014f44:	4b01      	ldr	r3, [pc, #4]	; (8014f4c <__errno+0x8>)
 8014f46:	6818      	ldr	r0, [r3, #0]
 8014f48:	4770      	bx	lr
 8014f4a:	bf00      	nop
 8014f4c:	2400025c 	.word	0x2400025c

08014f50 <std>:
 8014f50:	2300      	movs	r3, #0
 8014f52:	b510      	push	{r4, lr}
 8014f54:	4604      	mov	r4, r0
 8014f56:	e9c0 3300 	strd	r3, r3, [r0]
 8014f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f5e:	6083      	str	r3, [r0, #8]
 8014f60:	8181      	strh	r1, [r0, #12]
 8014f62:	6643      	str	r3, [r0, #100]	; 0x64
 8014f64:	81c2      	strh	r2, [r0, #14]
 8014f66:	6183      	str	r3, [r0, #24]
 8014f68:	4619      	mov	r1, r3
 8014f6a:	2208      	movs	r2, #8
 8014f6c:	305c      	adds	r0, #92	; 0x5c
 8014f6e:	f000 f91a 	bl	80151a6 <memset>
 8014f72:	4b05      	ldr	r3, [pc, #20]	; (8014f88 <std+0x38>)
 8014f74:	6263      	str	r3, [r4, #36]	; 0x24
 8014f76:	4b05      	ldr	r3, [pc, #20]	; (8014f8c <std+0x3c>)
 8014f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8014f7a:	4b05      	ldr	r3, [pc, #20]	; (8014f90 <std+0x40>)
 8014f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014f7e:	4b05      	ldr	r3, [pc, #20]	; (8014f94 <std+0x44>)
 8014f80:	6224      	str	r4, [r4, #32]
 8014f82:	6323      	str	r3, [r4, #48]	; 0x30
 8014f84:	bd10      	pop	{r4, pc}
 8014f86:	bf00      	nop
 8014f88:	08015c59 	.word	0x08015c59
 8014f8c:	08015c7b 	.word	0x08015c7b
 8014f90:	08015cb3 	.word	0x08015cb3
 8014f94:	08015cd7 	.word	0x08015cd7

08014f98 <_cleanup_r>:
 8014f98:	4901      	ldr	r1, [pc, #4]	; (8014fa0 <_cleanup_r+0x8>)
 8014f9a:	f000 b8af 	b.w	80150fc <_fwalk_reent>
 8014f9e:	bf00      	nop
 8014fa0:	08016c61 	.word	0x08016c61

08014fa4 <__sfmoreglue>:
 8014fa4:	b570      	push	{r4, r5, r6, lr}
 8014fa6:	1e4a      	subs	r2, r1, #1
 8014fa8:	2568      	movs	r5, #104	; 0x68
 8014faa:	4355      	muls	r5, r2
 8014fac:	460e      	mov	r6, r1
 8014fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014fb2:	f000 f901 	bl	80151b8 <_malloc_r>
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	b140      	cbz	r0, 8014fcc <__sfmoreglue+0x28>
 8014fba:	2100      	movs	r1, #0
 8014fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8014fc0:	300c      	adds	r0, #12
 8014fc2:	60a0      	str	r0, [r4, #8]
 8014fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014fc8:	f000 f8ed 	bl	80151a6 <memset>
 8014fcc:	4620      	mov	r0, r4
 8014fce:	bd70      	pop	{r4, r5, r6, pc}

08014fd0 <__sfp_lock_acquire>:
 8014fd0:	4801      	ldr	r0, [pc, #4]	; (8014fd8 <__sfp_lock_acquire+0x8>)
 8014fd2:	f000 b8d8 	b.w	8015186 <__retarget_lock_acquire_recursive>
 8014fd6:	bf00      	nop
 8014fd8:	24006ad0 	.word	0x24006ad0

08014fdc <__sfp_lock_release>:
 8014fdc:	4801      	ldr	r0, [pc, #4]	; (8014fe4 <__sfp_lock_release+0x8>)
 8014fde:	f000 b8d3 	b.w	8015188 <__retarget_lock_release_recursive>
 8014fe2:	bf00      	nop
 8014fe4:	24006ad0 	.word	0x24006ad0

08014fe8 <__sinit_lock_acquire>:
 8014fe8:	4801      	ldr	r0, [pc, #4]	; (8014ff0 <__sinit_lock_acquire+0x8>)
 8014fea:	f000 b8cc 	b.w	8015186 <__retarget_lock_acquire_recursive>
 8014fee:	bf00      	nop
 8014ff0:	24006acb 	.word	0x24006acb

08014ff4 <__sinit_lock_release>:
 8014ff4:	4801      	ldr	r0, [pc, #4]	; (8014ffc <__sinit_lock_release+0x8>)
 8014ff6:	f000 b8c7 	b.w	8015188 <__retarget_lock_release_recursive>
 8014ffa:	bf00      	nop
 8014ffc:	24006acb 	.word	0x24006acb

08015000 <__sinit>:
 8015000:	b510      	push	{r4, lr}
 8015002:	4604      	mov	r4, r0
 8015004:	f7ff fff0 	bl	8014fe8 <__sinit_lock_acquire>
 8015008:	69a3      	ldr	r3, [r4, #24]
 801500a:	b11b      	cbz	r3, 8015014 <__sinit+0x14>
 801500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015010:	f7ff bff0 	b.w	8014ff4 <__sinit_lock_release>
 8015014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015018:	6523      	str	r3, [r4, #80]	; 0x50
 801501a:	4b13      	ldr	r3, [pc, #76]	; (8015068 <__sinit+0x68>)
 801501c:	4a13      	ldr	r2, [pc, #76]	; (801506c <__sinit+0x6c>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	62a2      	str	r2, [r4, #40]	; 0x28
 8015022:	42a3      	cmp	r3, r4
 8015024:	bf04      	itt	eq
 8015026:	2301      	moveq	r3, #1
 8015028:	61a3      	streq	r3, [r4, #24]
 801502a:	4620      	mov	r0, r4
 801502c:	f000 f820 	bl	8015070 <__sfp>
 8015030:	6060      	str	r0, [r4, #4]
 8015032:	4620      	mov	r0, r4
 8015034:	f000 f81c 	bl	8015070 <__sfp>
 8015038:	60a0      	str	r0, [r4, #8]
 801503a:	4620      	mov	r0, r4
 801503c:	f000 f818 	bl	8015070 <__sfp>
 8015040:	2200      	movs	r2, #0
 8015042:	60e0      	str	r0, [r4, #12]
 8015044:	2104      	movs	r1, #4
 8015046:	6860      	ldr	r0, [r4, #4]
 8015048:	f7ff ff82 	bl	8014f50 <std>
 801504c:	68a0      	ldr	r0, [r4, #8]
 801504e:	2201      	movs	r2, #1
 8015050:	2109      	movs	r1, #9
 8015052:	f7ff ff7d 	bl	8014f50 <std>
 8015056:	68e0      	ldr	r0, [r4, #12]
 8015058:	2202      	movs	r2, #2
 801505a:	2112      	movs	r1, #18
 801505c:	f7ff ff78 	bl	8014f50 <std>
 8015060:	2301      	movs	r3, #1
 8015062:	61a3      	str	r3, [r4, #24]
 8015064:	e7d2      	b.n	801500c <__sinit+0xc>
 8015066:	bf00      	nop
 8015068:	080233cc 	.word	0x080233cc
 801506c:	08014f99 	.word	0x08014f99

08015070 <__sfp>:
 8015070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015072:	4607      	mov	r7, r0
 8015074:	f7ff ffac 	bl	8014fd0 <__sfp_lock_acquire>
 8015078:	4b1e      	ldr	r3, [pc, #120]	; (80150f4 <__sfp+0x84>)
 801507a:	681e      	ldr	r6, [r3, #0]
 801507c:	69b3      	ldr	r3, [r6, #24]
 801507e:	b913      	cbnz	r3, 8015086 <__sfp+0x16>
 8015080:	4630      	mov	r0, r6
 8015082:	f7ff ffbd 	bl	8015000 <__sinit>
 8015086:	3648      	adds	r6, #72	; 0x48
 8015088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801508c:	3b01      	subs	r3, #1
 801508e:	d503      	bpl.n	8015098 <__sfp+0x28>
 8015090:	6833      	ldr	r3, [r6, #0]
 8015092:	b30b      	cbz	r3, 80150d8 <__sfp+0x68>
 8015094:	6836      	ldr	r6, [r6, #0]
 8015096:	e7f7      	b.n	8015088 <__sfp+0x18>
 8015098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801509c:	b9d5      	cbnz	r5, 80150d4 <__sfp+0x64>
 801509e:	4b16      	ldr	r3, [pc, #88]	; (80150f8 <__sfp+0x88>)
 80150a0:	60e3      	str	r3, [r4, #12]
 80150a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80150a6:	6665      	str	r5, [r4, #100]	; 0x64
 80150a8:	f000 f86c 	bl	8015184 <__retarget_lock_init_recursive>
 80150ac:	f7ff ff96 	bl	8014fdc <__sfp_lock_release>
 80150b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80150b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80150b8:	6025      	str	r5, [r4, #0]
 80150ba:	61a5      	str	r5, [r4, #24]
 80150bc:	2208      	movs	r2, #8
 80150be:	4629      	mov	r1, r5
 80150c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80150c4:	f000 f86f 	bl	80151a6 <memset>
 80150c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80150cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80150d0:	4620      	mov	r0, r4
 80150d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150d4:	3468      	adds	r4, #104	; 0x68
 80150d6:	e7d9      	b.n	801508c <__sfp+0x1c>
 80150d8:	2104      	movs	r1, #4
 80150da:	4638      	mov	r0, r7
 80150dc:	f7ff ff62 	bl	8014fa4 <__sfmoreglue>
 80150e0:	4604      	mov	r4, r0
 80150e2:	6030      	str	r0, [r6, #0]
 80150e4:	2800      	cmp	r0, #0
 80150e6:	d1d5      	bne.n	8015094 <__sfp+0x24>
 80150e8:	f7ff ff78 	bl	8014fdc <__sfp_lock_release>
 80150ec:	230c      	movs	r3, #12
 80150ee:	603b      	str	r3, [r7, #0]
 80150f0:	e7ee      	b.n	80150d0 <__sfp+0x60>
 80150f2:	bf00      	nop
 80150f4:	080233cc 	.word	0x080233cc
 80150f8:	ffff0001 	.word	0xffff0001

080150fc <_fwalk_reent>:
 80150fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015100:	4606      	mov	r6, r0
 8015102:	4688      	mov	r8, r1
 8015104:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015108:	2700      	movs	r7, #0
 801510a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801510e:	f1b9 0901 	subs.w	r9, r9, #1
 8015112:	d505      	bpl.n	8015120 <_fwalk_reent+0x24>
 8015114:	6824      	ldr	r4, [r4, #0]
 8015116:	2c00      	cmp	r4, #0
 8015118:	d1f7      	bne.n	801510a <_fwalk_reent+0xe>
 801511a:	4638      	mov	r0, r7
 801511c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015120:	89ab      	ldrh	r3, [r5, #12]
 8015122:	2b01      	cmp	r3, #1
 8015124:	d907      	bls.n	8015136 <_fwalk_reent+0x3a>
 8015126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801512a:	3301      	adds	r3, #1
 801512c:	d003      	beq.n	8015136 <_fwalk_reent+0x3a>
 801512e:	4629      	mov	r1, r5
 8015130:	4630      	mov	r0, r6
 8015132:	47c0      	blx	r8
 8015134:	4307      	orrs	r7, r0
 8015136:	3568      	adds	r5, #104	; 0x68
 8015138:	e7e9      	b.n	801510e <_fwalk_reent+0x12>
	...

0801513c <__libc_init_array>:
 801513c:	b570      	push	{r4, r5, r6, lr}
 801513e:	4d0d      	ldr	r5, [pc, #52]	; (8015174 <__libc_init_array+0x38>)
 8015140:	4c0d      	ldr	r4, [pc, #52]	; (8015178 <__libc_init_array+0x3c>)
 8015142:	1b64      	subs	r4, r4, r5
 8015144:	10a4      	asrs	r4, r4, #2
 8015146:	2600      	movs	r6, #0
 8015148:	42a6      	cmp	r6, r4
 801514a:	d109      	bne.n	8015160 <__libc_init_array+0x24>
 801514c:	4d0b      	ldr	r5, [pc, #44]	; (801517c <__libc_init_array+0x40>)
 801514e:	4c0c      	ldr	r4, [pc, #48]	; (8015180 <__libc_init_array+0x44>)
 8015150:	f002 fe9e 	bl	8017e90 <_init>
 8015154:	1b64      	subs	r4, r4, r5
 8015156:	10a4      	asrs	r4, r4, #2
 8015158:	2600      	movs	r6, #0
 801515a:	42a6      	cmp	r6, r4
 801515c:	d105      	bne.n	801516a <__libc_init_array+0x2e>
 801515e:	bd70      	pop	{r4, r5, r6, pc}
 8015160:	f855 3b04 	ldr.w	r3, [r5], #4
 8015164:	4798      	blx	r3
 8015166:	3601      	adds	r6, #1
 8015168:	e7ee      	b.n	8015148 <__libc_init_array+0xc>
 801516a:	f855 3b04 	ldr.w	r3, [r5], #4
 801516e:	4798      	blx	r3
 8015170:	3601      	adds	r6, #1
 8015172:	e7f2      	b.n	801515a <__libc_init_array+0x1e>
 8015174:	080237b8 	.word	0x080237b8
 8015178:	080237b8 	.word	0x080237b8
 801517c:	080237b8 	.word	0x080237b8
 8015180:	080237bc 	.word	0x080237bc

08015184 <__retarget_lock_init_recursive>:
 8015184:	4770      	bx	lr

08015186 <__retarget_lock_acquire_recursive>:
 8015186:	4770      	bx	lr

08015188 <__retarget_lock_release_recursive>:
 8015188:	4770      	bx	lr

0801518a <memcpy>:
 801518a:	440a      	add	r2, r1
 801518c:	4291      	cmp	r1, r2
 801518e:	f100 33ff 	add.w	r3, r0, #4294967295
 8015192:	d100      	bne.n	8015196 <memcpy+0xc>
 8015194:	4770      	bx	lr
 8015196:	b510      	push	{r4, lr}
 8015198:	f811 4b01 	ldrb.w	r4, [r1], #1
 801519c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80151a0:	4291      	cmp	r1, r2
 80151a2:	d1f9      	bne.n	8015198 <memcpy+0xe>
 80151a4:	bd10      	pop	{r4, pc}

080151a6 <memset>:
 80151a6:	4402      	add	r2, r0
 80151a8:	4603      	mov	r3, r0
 80151aa:	4293      	cmp	r3, r2
 80151ac:	d100      	bne.n	80151b0 <memset+0xa>
 80151ae:	4770      	bx	lr
 80151b0:	f803 1b01 	strb.w	r1, [r3], #1
 80151b4:	e7f9      	b.n	80151aa <memset+0x4>
	...

080151b8 <_malloc_r>:
 80151b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ba:	1ccd      	adds	r5, r1, #3
 80151bc:	f025 0503 	bic.w	r5, r5, #3
 80151c0:	3508      	adds	r5, #8
 80151c2:	2d0c      	cmp	r5, #12
 80151c4:	bf38      	it	cc
 80151c6:	250c      	movcc	r5, #12
 80151c8:	2d00      	cmp	r5, #0
 80151ca:	4606      	mov	r6, r0
 80151cc:	db01      	blt.n	80151d2 <_malloc_r+0x1a>
 80151ce:	42a9      	cmp	r1, r5
 80151d0:	d903      	bls.n	80151da <_malloc_r+0x22>
 80151d2:	230c      	movs	r3, #12
 80151d4:	6033      	str	r3, [r6, #0]
 80151d6:	2000      	movs	r0, #0
 80151d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151da:	f001 fdad 	bl	8016d38 <__malloc_lock>
 80151de:	4921      	ldr	r1, [pc, #132]	; (8015264 <_malloc_r+0xac>)
 80151e0:	680a      	ldr	r2, [r1, #0]
 80151e2:	4614      	mov	r4, r2
 80151e4:	b99c      	cbnz	r4, 801520e <_malloc_r+0x56>
 80151e6:	4f20      	ldr	r7, [pc, #128]	; (8015268 <_malloc_r+0xb0>)
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	b923      	cbnz	r3, 80151f6 <_malloc_r+0x3e>
 80151ec:	4621      	mov	r1, r4
 80151ee:	4630      	mov	r0, r6
 80151f0:	f000 fd02 	bl	8015bf8 <_sbrk_r>
 80151f4:	6038      	str	r0, [r7, #0]
 80151f6:	4629      	mov	r1, r5
 80151f8:	4630      	mov	r0, r6
 80151fa:	f000 fcfd 	bl	8015bf8 <_sbrk_r>
 80151fe:	1c43      	adds	r3, r0, #1
 8015200:	d123      	bne.n	801524a <_malloc_r+0x92>
 8015202:	230c      	movs	r3, #12
 8015204:	6033      	str	r3, [r6, #0]
 8015206:	4630      	mov	r0, r6
 8015208:	f001 fd9c 	bl	8016d44 <__malloc_unlock>
 801520c:	e7e3      	b.n	80151d6 <_malloc_r+0x1e>
 801520e:	6823      	ldr	r3, [r4, #0]
 8015210:	1b5b      	subs	r3, r3, r5
 8015212:	d417      	bmi.n	8015244 <_malloc_r+0x8c>
 8015214:	2b0b      	cmp	r3, #11
 8015216:	d903      	bls.n	8015220 <_malloc_r+0x68>
 8015218:	6023      	str	r3, [r4, #0]
 801521a:	441c      	add	r4, r3
 801521c:	6025      	str	r5, [r4, #0]
 801521e:	e004      	b.n	801522a <_malloc_r+0x72>
 8015220:	6863      	ldr	r3, [r4, #4]
 8015222:	42a2      	cmp	r2, r4
 8015224:	bf0c      	ite	eq
 8015226:	600b      	streq	r3, [r1, #0]
 8015228:	6053      	strne	r3, [r2, #4]
 801522a:	4630      	mov	r0, r6
 801522c:	f001 fd8a 	bl	8016d44 <__malloc_unlock>
 8015230:	f104 000b 	add.w	r0, r4, #11
 8015234:	1d23      	adds	r3, r4, #4
 8015236:	f020 0007 	bic.w	r0, r0, #7
 801523a:	1ac2      	subs	r2, r0, r3
 801523c:	d0cc      	beq.n	80151d8 <_malloc_r+0x20>
 801523e:	1a1b      	subs	r3, r3, r0
 8015240:	50a3      	str	r3, [r4, r2]
 8015242:	e7c9      	b.n	80151d8 <_malloc_r+0x20>
 8015244:	4622      	mov	r2, r4
 8015246:	6864      	ldr	r4, [r4, #4]
 8015248:	e7cc      	b.n	80151e4 <_malloc_r+0x2c>
 801524a:	1cc4      	adds	r4, r0, #3
 801524c:	f024 0403 	bic.w	r4, r4, #3
 8015250:	42a0      	cmp	r0, r4
 8015252:	d0e3      	beq.n	801521c <_malloc_r+0x64>
 8015254:	1a21      	subs	r1, r4, r0
 8015256:	4630      	mov	r0, r6
 8015258:	f000 fcce 	bl	8015bf8 <_sbrk_r>
 801525c:	3001      	adds	r0, #1
 801525e:	d1dd      	bne.n	801521c <_malloc_r+0x64>
 8015260:	e7cf      	b.n	8015202 <_malloc_r+0x4a>
 8015262:	bf00      	nop
 8015264:	24004b84 	.word	0x24004b84
 8015268:	24004b88 	.word	0x24004b88

0801526c <__cvt>:
 801526c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801526e:	ed2d 8b02 	vpush	{d8}
 8015272:	eeb0 8b40 	vmov.f64	d8, d0
 8015276:	b085      	sub	sp, #20
 8015278:	4617      	mov	r7, r2
 801527a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801527c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801527e:	ee18 2a90 	vmov	r2, s17
 8015282:	f025 0520 	bic.w	r5, r5, #32
 8015286:	2a00      	cmp	r2, #0
 8015288:	bfb6      	itet	lt
 801528a:	222d      	movlt	r2, #45	; 0x2d
 801528c:	2200      	movge	r2, #0
 801528e:	eeb1 8b40 	vneglt.f64	d8, d0
 8015292:	2d46      	cmp	r5, #70	; 0x46
 8015294:	460c      	mov	r4, r1
 8015296:	701a      	strb	r2, [r3, #0]
 8015298:	d004      	beq.n	80152a4 <__cvt+0x38>
 801529a:	2d45      	cmp	r5, #69	; 0x45
 801529c:	d100      	bne.n	80152a0 <__cvt+0x34>
 801529e:	3401      	adds	r4, #1
 80152a0:	2102      	movs	r1, #2
 80152a2:	e000      	b.n	80152a6 <__cvt+0x3a>
 80152a4:	2103      	movs	r1, #3
 80152a6:	ab03      	add	r3, sp, #12
 80152a8:	9301      	str	r3, [sp, #4]
 80152aa:	ab02      	add	r3, sp, #8
 80152ac:	9300      	str	r3, [sp, #0]
 80152ae:	4622      	mov	r2, r4
 80152b0:	4633      	mov	r3, r6
 80152b2:	eeb0 0b48 	vmov.f64	d0, d8
 80152b6:	f000 fecb 	bl	8016050 <_dtoa_r>
 80152ba:	2d47      	cmp	r5, #71	; 0x47
 80152bc:	d109      	bne.n	80152d2 <__cvt+0x66>
 80152be:	07fb      	lsls	r3, r7, #31
 80152c0:	d407      	bmi.n	80152d2 <__cvt+0x66>
 80152c2:	9b03      	ldr	r3, [sp, #12]
 80152c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152c6:	1a1b      	subs	r3, r3, r0
 80152c8:	6013      	str	r3, [r2, #0]
 80152ca:	b005      	add	sp, #20
 80152cc:	ecbd 8b02 	vpop	{d8}
 80152d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152d2:	2d46      	cmp	r5, #70	; 0x46
 80152d4:	eb00 0204 	add.w	r2, r0, r4
 80152d8:	d10c      	bne.n	80152f4 <__cvt+0x88>
 80152da:	7803      	ldrb	r3, [r0, #0]
 80152dc:	2b30      	cmp	r3, #48	; 0x30
 80152de:	d107      	bne.n	80152f0 <__cvt+0x84>
 80152e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80152e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152e8:	bf1c      	itt	ne
 80152ea:	f1c4 0401 	rsbne	r4, r4, #1
 80152ee:	6034      	strne	r4, [r6, #0]
 80152f0:	6833      	ldr	r3, [r6, #0]
 80152f2:	441a      	add	r2, r3
 80152f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80152f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152fc:	bf08      	it	eq
 80152fe:	9203      	streq	r2, [sp, #12]
 8015300:	2130      	movs	r1, #48	; 0x30
 8015302:	9b03      	ldr	r3, [sp, #12]
 8015304:	4293      	cmp	r3, r2
 8015306:	d2dc      	bcs.n	80152c2 <__cvt+0x56>
 8015308:	1c5c      	adds	r4, r3, #1
 801530a:	9403      	str	r4, [sp, #12]
 801530c:	7019      	strb	r1, [r3, #0]
 801530e:	e7f8      	b.n	8015302 <__cvt+0x96>

08015310 <__exponent>:
 8015310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015312:	4603      	mov	r3, r0
 8015314:	2900      	cmp	r1, #0
 8015316:	bfb8      	it	lt
 8015318:	4249      	neglt	r1, r1
 801531a:	f803 2b02 	strb.w	r2, [r3], #2
 801531e:	bfb4      	ite	lt
 8015320:	222d      	movlt	r2, #45	; 0x2d
 8015322:	222b      	movge	r2, #43	; 0x2b
 8015324:	2909      	cmp	r1, #9
 8015326:	7042      	strb	r2, [r0, #1]
 8015328:	dd2a      	ble.n	8015380 <__exponent+0x70>
 801532a:	f10d 0407 	add.w	r4, sp, #7
 801532e:	46a4      	mov	ip, r4
 8015330:	270a      	movs	r7, #10
 8015332:	46a6      	mov	lr, r4
 8015334:	460a      	mov	r2, r1
 8015336:	fb91 f6f7 	sdiv	r6, r1, r7
 801533a:	fb07 1516 	mls	r5, r7, r6, r1
 801533e:	3530      	adds	r5, #48	; 0x30
 8015340:	2a63      	cmp	r2, #99	; 0x63
 8015342:	f104 34ff 	add.w	r4, r4, #4294967295
 8015346:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801534a:	4631      	mov	r1, r6
 801534c:	dcf1      	bgt.n	8015332 <__exponent+0x22>
 801534e:	3130      	adds	r1, #48	; 0x30
 8015350:	f1ae 0502 	sub.w	r5, lr, #2
 8015354:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015358:	1c44      	adds	r4, r0, #1
 801535a:	4629      	mov	r1, r5
 801535c:	4561      	cmp	r1, ip
 801535e:	d30a      	bcc.n	8015376 <__exponent+0x66>
 8015360:	f10d 0209 	add.w	r2, sp, #9
 8015364:	eba2 020e 	sub.w	r2, r2, lr
 8015368:	4565      	cmp	r5, ip
 801536a:	bf88      	it	hi
 801536c:	2200      	movhi	r2, #0
 801536e:	4413      	add	r3, r2
 8015370:	1a18      	subs	r0, r3, r0
 8015372:	b003      	add	sp, #12
 8015374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015376:	f811 2b01 	ldrb.w	r2, [r1], #1
 801537a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801537e:	e7ed      	b.n	801535c <__exponent+0x4c>
 8015380:	2330      	movs	r3, #48	; 0x30
 8015382:	3130      	adds	r1, #48	; 0x30
 8015384:	7083      	strb	r3, [r0, #2]
 8015386:	70c1      	strb	r1, [r0, #3]
 8015388:	1d03      	adds	r3, r0, #4
 801538a:	e7f1      	b.n	8015370 <__exponent+0x60>
 801538c:	0000      	movs	r0, r0
	...

08015390 <_printf_float>:
 8015390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015394:	b08b      	sub	sp, #44	; 0x2c
 8015396:	460c      	mov	r4, r1
 8015398:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801539c:	4616      	mov	r6, r2
 801539e:	461f      	mov	r7, r3
 80153a0:	4605      	mov	r5, r0
 80153a2:	f001 fcab 	bl	8016cfc <_localeconv_r>
 80153a6:	f8d0 b000 	ldr.w	fp, [r0]
 80153aa:	4658      	mov	r0, fp
 80153ac:	f7ea ff98 	bl	80002e0 <strlen>
 80153b0:	2300      	movs	r3, #0
 80153b2:	9308      	str	r3, [sp, #32]
 80153b4:	f8d8 3000 	ldr.w	r3, [r8]
 80153b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80153bc:	6822      	ldr	r2, [r4, #0]
 80153be:	3307      	adds	r3, #7
 80153c0:	f023 0307 	bic.w	r3, r3, #7
 80153c4:	f103 0108 	add.w	r1, r3, #8
 80153c8:	f8c8 1000 	str.w	r1, [r8]
 80153cc:	4682      	mov	sl, r0
 80153ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80153d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80153d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8015638 <_printf_float+0x2a8>
 80153da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80153de:	eeb0 6bc0 	vabs.f64	d6, d0
 80153e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80153e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ea:	dd24      	ble.n	8015436 <_printf_float+0xa6>
 80153ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80153f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153f4:	d502      	bpl.n	80153fc <_printf_float+0x6c>
 80153f6:	232d      	movs	r3, #45	; 0x2d
 80153f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153fc:	4b90      	ldr	r3, [pc, #576]	; (8015640 <_printf_float+0x2b0>)
 80153fe:	4891      	ldr	r0, [pc, #580]	; (8015644 <_printf_float+0x2b4>)
 8015400:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8015404:	bf94      	ite	ls
 8015406:	4698      	movls	r8, r3
 8015408:	4680      	movhi	r8, r0
 801540a:	2303      	movs	r3, #3
 801540c:	6123      	str	r3, [r4, #16]
 801540e:	f022 0204 	bic.w	r2, r2, #4
 8015412:	2300      	movs	r3, #0
 8015414:	6022      	str	r2, [r4, #0]
 8015416:	9304      	str	r3, [sp, #16]
 8015418:	9700      	str	r7, [sp, #0]
 801541a:	4633      	mov	r3, r6
 801541c:	aa09      	add	r2, sp, #36	; 0x24
 801541e:	4621      	mov	r1, r4
 8015420:	4628      	mov	r0, r5
 8015422:	f000 f9d3 	bl	80157cc <_printf_common>
 8015426:	3001      	adds	r0, #1
 8015428:	f040 808a 	bne.w	8015540 <_printf_float+0x1b0>
 801542c:	f04f 30ff 	mov.w	r0, #4294967295
 8015430:	b00b      	add	sp, #44	; 0x2c
 8015432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015436:	eeb4 0b40 	vcmp.f64	d0, d0
 801543a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801543e:	d709      	bvc.n	8015454 <_printf_float+0xc4>
 8015440:	ee10 3a90 	vmov	r3, s1
 8015444:	2b00      	cmp	r3, #0
 8015446:	bfbc      	itt	lt
 8015448:	232d      	movlt	r3, #45	; 0x2d
 801544a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801544e:	487e      	ldr	r0, [pc, #504]	; (8015648 <_printf_float+0x2b8>)
 8015450:	4b7e      	ldr	r3, [pc, #504]	; (801564c <_printf_float+0x2bc>)
 8015452:	e7d5      	b.n	8015400 <_printf_float+0x70>
 8015454:	6863      	ldr	r3, [r4, #4]
 8015456:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801545a:	9104      	str	r1, [sp, #16]
 801545c:	1c59      	adds	r1, r3, #1
 801545e:	d13c      	bne.n	80154da <_printf_float+0x14a>
 8015460:	2306      	movs	r3, #6
 8015462:	6063      	str	r3, [r4, #4]
 8015464:	2300      	movs	r3, #0
 8015466:	9303      	str	r3, [sp, #12]
 8015468:	ab08      	add	r3, sp, #32
 801546a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801546e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015472:	ab07      	add	r3, sp, #28
 8015474:	6861      	ldr	r1, [r4, #4]
 8015476:	9300      	str	r3, [sp, #0]
 8015478:	6022      	str	r2, [r4, #0]
 801547a:	f10d 031b 	add.w	r3, sp, #27
 801547e:	4628      	mov	r0, r5
 8015480:	f7ff fef4 	bl	801526c <__cvt>
 8015484:	9b04      	ldr	r3, [sp, #16]
 8015486:	9907      	ldr	r1, [sp, #28]
 8015488:	2b47      	cmp	r3, #71	; 0x47
 801548a:	4680      	mov	r8, r0
 801548c:	d108      	bne.n	80154a0 <_printf_float+0x110>
 801548e:	1cc8      	adds	r0, r1, #3
 8015490:	db02      	blt.n	8015498 <_printf_float+0x108>
 8015492:	6863      	ldr	r3, [r4, #4]
 8015494:	4299      	cmp	r1, r3
 8015496:	dd41      	ble.n	801551c <_printf_float+0x18c>
 8015498:	f1a9 0902 	sub.w	r9, r9, #2
 801549c:	fa5f f989 	uxtb.w	r9, r9
 80154a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80154a4:	d820      	bhi.n	80154e8 <_printf_float+0x158>
 80154a6:	3901      	subs	r1, #1
 80154a8:	464a      	mov	r2, r9
 80154aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80154ae:	9107      	str	r1, [sp, #28]
 80154b0:	f7ff ff2e 	bl	8015310 <__exponent>
 80154b4:	9a08      	ldr	r2, [sp, #32]
 80154b6:	9004      	str	r0, [sp, #16]
 80154b8:	1813      	adds	r3, r2, r0
 80154ba:	2a01      	cmp	r2, #1
 80154bc:	6123      	str	r3, [r4, #16]
 80154be:	dc02      	bgt.n	80154c6 <_printf_float+0x136>
 80154c0:	6822      	ldr	r2, [r4, #0]
 80154c2:	07d2      	lsls	r2, r2, #31
 80154c4:	d501      	bpl.n	80154ca <_printf_float+0x13a>
 80154c6:	3301      	adds	r3, #1
 80154c8:	6123      	str	r3, [r4, #16]
 80154ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d0a2      	beq.n	8015418 <_printf_float+0x88>
 80154d2:	232d      	movs	r3, #45	; 0x2d
 80154d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154d8:	e79e      	b.n	8015418 <_printf_float+0x88>
 80154da:	9904      	ldr	r1, [sp, #16]
 80154dc:	2947      	cmp	r1, #71	; 0x47
 80154de:	d1c1      	bne.n	8015464 <_printf_float+0xd4>
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d1bf      	bne.n	8015464 <_printf_float+0xd4>
 80154e4:	2301      	movs	r3, #1
 80154e6:	e7bc      	b.n	8015462 <_printf_float+0xd2>
 80154e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80154ec:	d118      	bne.n	8015520 <_printf_float+0x190>
 80154ee:	2900      	cmp	r1, #0
 80154f0:	6863      	ldr	r3, [r4, #4]
 80154f2:	dd0b      	ble.n	801550c <_printf_float+0x17c>
 80154f4:	6121      	str	r1, [r4, #16]
 80154f6:	b913      	cbnz	r3, 80154fe <_printf_float+0x16e>
 80154f8:	6822      	ldr	r2, [r4, #0]
 80154fa:	07d0      	lsls	r0, r2, #31
 80154fc:	d502      	bpl.n	8015504 <_printf_float+0x174>
 80154fe:	3301      	adds	r3, #1
 8015500:	440b      	add	r3, r1
 8015502:	6123      	str	r3, [r4, #16]
 8015504:	2300      	movs	r3, #0
 8015506:	65a1      	str	r1, [r4, #88]	; 0x58
 8015508:	9304      	str	r3, [sp, #16]
 801550a:	e7de      	b.n	80154ca <_printf_float+0x13a>
 801550c:	b913      	cbnz	r3, 8015514 <_printf_float+0x184>
 801550e:	6822      	ldr	r2, [r4, #0]
 8015510:	07d2      	lsls	r2, r2, #31
 8015512:	d501      	bpl.n	8015518 <_printf_float+0x188>
 8015514:	3302      	adds	r3, #2
 8015516:	e7f4      	b.n	8015502 <_printf_float+0x172>
 8015518:	2301      	movs	r3, #1
 801551a:	e7f2      	b.n	8015502 <_printf_float+0x172>
 801551c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8015520:	9b08      	ldr	r3, [sp, #32]
 8015522:	4299      	cmp	r1, r3
 8015524:	db05      	blt.n	8015532 <_printf_float+0x1a2>
 8015526:	6823      	ldr	r3, [r4, #0]
 8015528:	6121      	str	r1, [r4, #16]
 801552a:	07d8      	lsls	r0, r3, #31
 801552c:	d5ea      	bpl.n	8015504 <_printf_float+0x174>
 801552e:	1c4b      	adds	r3, r1, #1
 8015530:	e7e7      	b.n	8015502 <_printf_float+0x172>
 8015532:	2900      	cmp	r1, #0
 8015534:	bfd4      	ite	le
 8015536:	f1c1 0202 	rsble	r2, r1, #2
 801553a:	2201      	movgt	r2, #1
 801553c:	4413      	add	r3, r2
 801553e:	e7e0      	b.n	8015502 <_printf_float+0x172>
 8015540:	6823      	ldr	r3, [r4, #0]
 8015542:	055a      	lsls	r2, r3, #21
 8015544:	d407      	bmi.n	8015556 <_printf_float+0x1c6>
 8015546:	6923      	ldr	r3, [r4, #16]
 8015548:	4642      	mov	r2, r8
 801554a:	4631      	mov	r1, r6
 801554c:	4628      	mov	r0, r5
 801554e:	47b8      	blx	r7
 8015550:	3001      	adds	r0, #1
 8015552:	d12a      	bne.n	80155aa <_printf_float+0x21a>
 8015554:	e76a      	b.n	801542c <_printf_float+0x9c>
 8015556:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801555a:	f240 80e2 	bls.w	8015722 <_printf_float+0x392>
 801555e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8015562:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801556a:	d133      	bne.n	80155d4 <_printf_float+0x244>
 801556c:	4a38      	ldr	r2, [pc, #224]	; (8015650 <_printf_float+0x2c0>)
 801556e:	2301      	movs	r3, #1
 8015570:	4631      	mov	r1, r6
 8015572:	4628      	mov	r0, r5
 8015574:	47b8      	blx	r7
 8015576:	3001      	adds	r0, #1
 8015578:	f43f af58 	beq.w	801542c <_printf_float+0x9c>
 801557c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015580:	429a      	cmp	r2, r3
 8015582:	db02      	blt.n	801558a <_printf_float+0x1fa>
 8015584:	6823      	ldr	r3, [r4, #0]
 8015586:	07d8      	lsls	r0, r3, #31
 8015588:	d50f      	bpl.n	80155aa <_printf_float+0x21a>
 801558a:	4653      	mov	r3, sl
 801558c:	465a      	mov	r2, fp
 801558e:	4631      	mov	r1, r6
 8015590:	4628      	mov	r0, r5
 8015592:	47b8      	blx	r7
 8015594:	3001      	adds	r0, #1
 8015596:	f43f af49 	beq.w	801542c <_printf_float+0x9c>
 801559a:	f04f 0800 	mov.w	r8, #0
 801559e:	f104 091a 	add.w	r9, r4, #26
 80155a2:	9b08      	ldr	r3, [sp, #32]
 80155a4:	3b01      	subs	r3, #1
 80155a6:	4543      	cmp	r3, r8
 80155a8:	dc09      	bgt.n	80155be <_printf_float+0x22e>
 80155aa:	6823      	ldr	r3, [r4, #0]
 80155ac:	079b      	lsls	r3, r3, #30
 80155ae:	f100 8108 	bmi.w	80157c2 <_printf_float+0x432>
 80155b2:	68e0      	ldr	r0, [r4, #12]
 80155b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155b6:	4298      	cmp	r0, r3
 80155b8:	bfb8      	it	lt
 80155ba:	4618      	movlt	r0, r3
 80155bc:	e738      	b.n	8015430 <_printf_float+0xa0>
 80155be:	2301      	movs	r3, #1
 80155c0:	464a      	mov	r2, r9
 80155c2:	4631      	mov	r1, r6
 80155c4:	4628      	mov	r0, r5
 80155c6:	47b8      	blx	r7
 80155c8:	3001      	adds	r0, #1
 80155ca:	f43f af2f 	beq.w	801542c <_printf_float+0x9c>
 80155ce:	f108 0801 	add.w	r8, r8, #1
 80155d2:	e7e6      	b.n	80155a2 <_printf_float+0x212>
 80155d4:	9b07      	ldr	r3, [sp, #28]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	dc3c      	bgt.n	8015654 <_printf_float+0x2c4>
 80155da:	4a1d      	ldr	r2, [pc, #116]	; (8015650 <_printf_float+0x2c0>)
 80155dc:	2301      	movs	r3, #1
 80155de:	4631      	mov	r1, r6
 80155e0:	4628      	mov	r0, r5
 80155e2:	47b8      	blx	r7
 80155e4:	3001      	adds	r0, #1
 80155e6:	f43f af21 	beq.w	801542c <_printf_float+0x9c>
 80155ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80155ee:	4313      	orrs	r3, r2
 80155f0:	d102      	bne.n	80155f8 <_printf_float+0x268>
 80155f2:	6823      	ldr	r3, [r4, #0]
 80155f4:	07d9      	lsls	r1, r3, #31
 80155f6:	d5d8      	bpl.n	80155aa <_printf_float+0x21a>
 80155f8:	4653      	mov	r3, sl
 80155fa:	465a      	mov	r2, fp
 80155fc:	4631      	mov	r1, r6
 80155fe:	4628      	mov	r0, r5
 8015600:	47b8      	blx	r7
 8015602:	3001      	adds	r0, #1
 8015604:	f43f af12 	beq.w	801542c <_printf_float+0x9c>
 8015608:	f04f 0900 	mov.w	r9, #0
 801560c:	f104 0a1a 	add.w	sl, r4, #26
 8015610:	9b07      	ldr	r3, [sp, #28]
 8015612:	425b      	negs	r3, r3
 8015614:	454b      	cmp	r3, r9
 8015616:	dc01      	bgt.n	801561c <_printf_float+0x28c>
 8015618:	9b08      	ldr	r3, [sp, #32]
 801561a:	e795      	b.n	8015548 <_printf_float+0x1b8>
 801561c:	2301      	movs	r3, #1
 801561e:	4652      	mov	r2, sl
 8015620:	4631      	mov	r1, r6
 8015622:	4628      	mov	r0, r5
 8015624:	47b8      	blx	r7
 8015626:	3001      	adds	r0, #1
 8015628:	f43f af00 	beq.w	801542c <_printf_float+0x9c>
 801562c:	f109 0901 	add.w	r9, r9, #1
 8015630:	e7ee      	b.n	8015610 <_printf_float+0x280>
 8015632:	bf00      	nop
 8015634:	f3af 8000 	nop.w
 8015638:	ffffffff 	.word	0xffffffff
 801563c:	7fefffff 	.word	0x7fefffff
 8015640:	080233d0 	.word	0x080233d0
 8015644:	080233d4 	.word	0x080233d4
 8015648:	080233dc 	.word	0x080233dc
 801564c:	080233d8 	.word	0x080233d8
 8015650:	080233e0 	.word	0x080233e0
 8015654:	9a08      	ldr	r2, [sp, #32]
 8015656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015658:	429a      	cmp	r2, r3
 801565a:	bfa8      	it	ge
 801565c:	461a      	movge	r2, r3
 801565e:	2a00      	cmp	r2, #0
 8015660:	4691      	mov	r9, r2
 8015662:	dc38      	bgt.n	80156d6 <_printf_float+0x346>
 8015664:	2300      	movs	r3, #0
 8015666:	9305      	str	r3, [sp, #20]
 8015668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801566c:	f104 021a 	add.w	r2, r4, #26
 8015670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015672:	9905      	ldr	r1, [sp, #20]
 8015674:	9304      	str	r3, [sp, #16]
 8015676:	eba3 0309 	sub.w	r3, r3, r9
 801567a:	428b      	cmp	r3, r1
 801567c:	dc33      	bgt.n	80156e6 <_printf_float+0x356>
 801567e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015682:	429a      	cmp	r2, r3
 8015684:	db3c      	blt.n	8015700 <_printf_float+0x370>
 8015686:	6823      	ldr	r3, [r4, #0]
 8015688:	07da      	lsls	r2, r3, #31
 801568a:	d439      	bmi.n	8015700 <_printf_float+0x370>
 801568c:	9a08      	ldr	r2, [sp, #32]
 801568e:	9b04      	ldr	r3, [sp, #16]
 8015690:	9907      	ldr	r1, [sp, #28]
 8015692:	1ad3      	subs	r3, r2, r3
 8015694:	eba2 0901 	sub.w	r9, r2, r1
 8015698:	4599      	cmp	r9, r3
 801569a:	bfa8      	it	ge
 801569c:	4699      	movge	r9, r3
 801569e:	f1b9 0f00 	cmp.w	r9, #0
 80156a2:	dc35      	bgt.n	8015710 <_printf_float+0x380>
 80156a4:	f04f 0800 	mov.w	r8, #0
 80156a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80156ac:	f104 0a1a 	add.w	sl, r4, #26
 80156b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80156b4:	1a9b      	subs	r3, r3, r2
 80156b6:	eba3 0309 	sub.w	r3, r3, r9
 80156ba:	4543      	cmp	r3, r8
 80156bc:	f77f af75 	ble.w	80155aa <_printf_float+0x21a>
 80156c0:	2301      	movs	r3, #1
 80156c2:	4652      	mov	r2, sl
 80156c4:	4631      	mov	r1, r6
 80156c6:	4628      	mov	r0, r5
 80156c8:	47b8      	blx	r7
 80156ca:	3001      	adds	r0, #1
 80156cc:	f43f aeae 	beq.w	801542c <_printf_float+0x9c>
 80156d0:	f108 0801 	add.w	r8, r8, #1
 80156d4:	e7ec      	b.n	80156b0 <_printf_float+0x320>
 80156d6:	4613      	mov	r3, r2
 80156d8:	4631      	mov	r1, r6
 80156da:	4642      	mov	r2, r8
 80156dc:	4628      	mov	r0, r5
 80156de:	47b8      	blx	r7
 80156e0:	3001      	adds	r0, #1
 80156e2:	d1bf      	bne.n	8015664 <_printf_float+0x2d4>
 80156e4:	e6a2      	b.n	801542c <_printf_float+0x9c>
 80156e6:	2301      	movs	r3, #1
 80156e8:	4631      	mov	r1, r6
 80156ea:	4628      	mov	r0, r5
 80156ec:	9204      	str	r2, [sp, #16]
 80156ee:	47b8      	blx	r7
 80156f0:	3001      	adds	r0, #1
 80156f2:	f43f ae9b 	beq.w	801542c <_printf_float+0x9c>
 80156f6:	9b05      	ldr	r3, [sp, #20]
 80156f8:	9a04      	ldr	r2, [sp, #16]
 80156fa:	3301      	adds	r3, #1
 80156fc:	9305      	str	r3, [sp, #20]
 80156fe:	e7b7      	b.n	8015670 <_printf_float+0x2e0>
 8015700:	4653      	mov	r3, sl
 8015702:	465a      	mov	r2, fp
 8015704:	4631      	mov	r1, r6
 8015706:	4628      	mov	r0, r5
 8015708:	47b8      	blx	r7
 801570a:	3001      	adds	r0, #1
 801570c:	d1be      	bne.n	801568c <_printf_float+0x2fc>
 801570e:	e68d      	b.n	801542c <_printf_float+0x9c>
 8015710:	9a04      	ldr	r2, [sp, #16]
 8015712:	464b      	mov	r3, r9
 8015714:	4442      	add	r2, r8
 8015716:	4631      	mov	r1, r6
 8015718:	4628      	mov	r0, r5
 801571a:	47b8      	blx	r7
 801571c:	3001      	adds	r0, #1
 801571e:	d1c1      	bne.n	80156a4 <_printf_float+0x314>
 8015720:	e684      	b.n	801542c <_printf_float+0x9c>
 8015722:	9a08      	ldr	r2, [sp, #32]
 8015724:	2a01      	cmp	r2, #1
 8015726:	dc01      	bgt.n	801572c <_printf_float+0x39c>
 8015728:	07db      	lsls	r3, r3, #31
 801572a:	d537      	bpl.n	801579c <_printf_float+0x40c>
 801572c:	2301      	movs	r3, #1
 801572e:	4642      	mov	r2, r8
 8015730:	4631      	mov	r1, r6
 8015732:	4628      	mov	r0, r5
 8015734:	47b8      	blx	r7
 8015736:	3001      	adds	r0, #1
 8015738:	f43f ae78 	beq.w	801542c <_printf_float+0x9c>
 801573c:	4653      	mov	r3, sl
 801573e:	465a      	mov	r2, fp
 8015740:	4631      	mov	r1, r6
 8015742:	4628      	mov	r0, r5
 8015744:	47b8      	blx	r7
 8015746:	3001      	adds	r0, #1
 8015748:	f43f ae70 	beq.w	801542c <_printf_float+0x9c>
 801574c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8015750:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015758:	d01b      	beq.n	8015792 <_printf_float+0x402>
 801575a:	9b08      	ldr	r3, [sp, #32]
 801575c:	f108 0201 	add.w	r2, r8, #1
 8015760:	3b01      	subs	r3, #1
 8015762:	4631      	mov	r1, r6
 8015764:	4628      	mov	r0, r5
 8015766:	47b8      	blx	r7
 8015768:	3001      	adds	r0, #1
 801576a:	d10e      	bne.n	801578a <_printf_float+0x3fa>
 801576c:	e65e      	b.n	801542c <_printf_float+0x9c>
 801576e:	2301      	movs	r3, #1
 8015770:	464a      	mov	r2, r9
 8015772:	4631      	mov	r1, r6
 8015774:	4628      	mov	r0, r5
 8015776:	47b8      	blx	r7
 8015778:	3001      	adds	r0, #1
 801577a:	f43f ae57 	beq.w	801542c <_printf_float+0x9c>
 801577e:	f108 0801 	add.w	r8, r8, #1
 8015782:	9b08      	ldr	r3, [sp, #32]
 8015784:	3b01      	subs	r3, #1
 8015786:	4543      	cmp	r3, r8
 8015788:	dcf1      	bgt.n	801576e <_printf_float+0x3de>
 801578a:	9b04      	ldr	r3, [sp, #16]
 801578c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015790:	e6db      	b.n	801554a <_printf_float+0x1ba>
 8015792:	f04f 0800 	mov.w	r8, #0
 8015796:	f104 091a 	add.w	r9, r4, #26
 801579a:	e7f2      	b.n	8015782 <_printf_float+0x3f2>
 801579c:	2301      	movs	r3, #1
 801579e:	4642      	mov	r2, r8
 80157a0:	e7df      	b.n	8015762 <_printf_float+0x3d2>
 80157a2:	2301      	movs	r3, #1
 80157a4:	464a      	mov	r2, r9
 80157a6:	4631      	mov	r1, r6
 80157a8:	4628      	mov	r0, r5
 80157aa:	47b8      	blx	r7
 80157ac:	3001      	adds	r0, #1
 80157ae:	f43f ae3d 	beq.w	801542c <_printf_float+0x9c>
 80157b2:	f108 0801 	add.w	r8, r8, #1
 80157b6:	68e3      	ldr	r3, [r4, #12]
 80157b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157ba:	1a5b      	subs	r3, r3, r1
 80157bc:	4543      	cmp	r3, r8
 80157be:	dcf0      	bgt.n	80157a2 <_printf_float+0x412>
 80157c0:	e6f7      	b.n	80155b2 <_printf_float+0x222>
 80157c2:	f04f 0800 	mov.w	r8, #0
 80157c6:	f104 0919 	add.w	r9, r4, #25
 80157ca:	e7f4      	b.n	80157b6 <_printf_float+0x426>

080157cc <_printf_common>:
 80157cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157d0:	4616      	mov	r6, r2
 80157d2:	4699      	mov	r9, r3
 80157d4:	688a      	ldr	r2, [r1, #8]
 80157d6:	690b      	ldr	r3, [r1, #16]
 80157d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80157dc:	4293      	cmp	r3, r2
 80157de:	bfb8      	it	lt
 80157e0:	4613      	movlt	r3, r2
 80157e2:	6033      	str	r3, [r6, #0]
 80157e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80157e8:	4607      	mov	r7, r0
 80157ea:	460c      	mov	r4, r1
 80157ec:	b10a      	cbz	r2, 80157f2 <_printf_common+0x26>
 80157ee:	3301      	adds	r3, #1
 80157f0:	6033      	str	r3, [r6, #0]
 80157f2:	6823      	ldr	r3, [r4, #0]
 80157f4:	0699      	lsls	r1, r3, #26
 80157f6:	bf42      	ittt	mi
 80157f8:	6833      	ldrmi	r3, [r6, #0]
 80157fa:	3302      	addmi	r3, #2
 80157fc:	6033      	strmi	r3, [r6, #0]
 80157fe:	6825      	ldr	r5, [r4, #0]
 8015800:	f015 0506 	ands.w	r5, r5, #6
 8015804:	d106      	bne.n	8015814 <_printf_common+0x48>
 8015806:	f104 0a19 	add.w	sl, r4, #25
 801580a:	68e3      	ldr	r3, [r4, #12]
 801580c:	6832      	ldr	r2, [r6, #0]
 801580e:	1a9b      	subs	r3, r3, r2
 8015810:	42ab      	cmp	r3, r5
 8015812:	dc26      	bgt.n	8015862 <_printf_common+0x96>
 8015814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015818:	1e13      	subs	r3, r2, #0
 801581a:	6822      	ldr	r2, [r4, #0]
 801581c:	bf18      	it	ne
 801581e:	2301      	movne	r3, #1
 8015820:	0692      	lsls	r2, r2, #26
 8015822:	d42b      	bmi.n	801587c <_printf_common+0xb0>
 8015824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015828:	4649      	mov	r1, r9
 801582a:	4638      	mov	r0, r7
 801582c:	47c0      	blx	r8
 801582e:	3001      	adds	r0, #1
 8015830:	d01e      	beq.n	8015870 <_printf_common+0xa4>
 8015832:	6823      	ldr	r3, [r4, #0]
 8015834:	68e5      	ldr	r5, [r4, #12]
 8015836:	6832      	ldr	r2, [r6, #0]
 8015838:	f003 0306 	and.w	r3, r3, #6
 801583c:	2b04      	cmp	r3, #4
 801583e:	bf08      	it	eq
 8015840:	1aad      	subeq	r5, r5, r2
 8015842:	68a3      	ldr	r3, [r4, #8]
 8015844:	6922      	ldr	r2, [r4, #16]
 8015846:	bf0c      	ite	eq
 8015848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801584c:	2500      	movne	r5, #0
 801584e:	4293      	cmp	r3, r2
 8015850:	bfc4      	itt	gt
 8015852:	1a9b      	subgt	r3, r3, r2
 8015854:	18ed      	addgt	r5, r5, r3
 8015856:	2600      	movs	r6, #0
 8015858:	341a      	adds	r4, #26
 801585a:	42b5      	cmp	r5, r6
 801585c:	d11a      	bne.n	8015894 <_printf_common+0xc8>
 801585e:	2000      	movs	r0, #0
 8015860:	e008      	b.n	8015874 <_printf_common+0xa8>
 8015862:	2301      	movs	r3, #1
 8015864:	4652      	mov	r2, sl
 8015866:	4649      	mov	r1, r9
 8015868:	4638      	mov	r0, r7
 801586a:	47c0      	blx	r8
 801586c:	3001      	adds	r0, #1
 801586e:	d103      	bne.n	8015878 <_printf_common+0xac>
 8015870:	f04f 30ff 	mov.w	r0, #4294967295
 8015874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015878:	3501      	adds	r5, #1
 801587a:	e7c6      	b.n	801580a <_printf_common+0x3e>
 801587c:	18e1      	adds	r1, r4, r3
 801587e:	1c5a      	adds	r2, r3, #1
 8015880:	2030      	movs	r0, #48	; 0x30
 8015882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015886:	4422      	add	r2, r4
 8015888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801588c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015890:	3302      	adds	r3, #2
 8015892:	e7c7      	b.n	8015824 <_printf_common+0x58>
 8015894:	2301      	movs	r3, #1
 8015896:	4622      	mov	r2, r4
 8015898:	4649      	mov	r1, r9
 801589a:	4638      	mov	r0, r7
 801589c:	47c0      	blx	r8
 801589e:	3001      	adds	r0, #1
 80158a0:	d0e6      	beq.n	8015870 <_printf_common+0xa4>
 80158a2:	3601      	adds	r6, #1
 80158a4:	e7d9      	b.n	801585a <_printf_common+0x8e>
	...

080158a8 <_printf_i>:
 80158a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80158ac:	460c      	mov	r4, r1
 80158ae:	4691      	mov	r9, r2
 80158b0:	7e27      	ldrb	r7, [r4, #24]
 80158b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80158b4:	2f78      	cmp	r7, #120	; 0x78
 80158b6:	4680      	mov	r8, r0
 80158b8:	469a      	mov	sl, r3
 80158ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158be:	d807      	bhi.n	80158d0 <_printf_i+0x28>
 80158c0:	2f62      	cmp	r7, #98	; 0x62
 80158c2:	d80a      	bhi.n	80158da <_printf_i+0x32>
 80158c4:	2f00      	cmp	r7, #0
 80158c6:	f000 80d8 	beq.w	8015a7a <_printf_i+0x1d2>
 80158ca:	2f58      	cmp	r7, #88	; 0x58
 80158cc:	f000 80a3 	beq.w	8015a16 <_printf_i+0x16e>
 80158d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80158d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80158d8:	e03a      	b.n	8015950 <_printf_i+0xa8>
 80158da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80158de:	2b15      	cmp	r3, #21
 80158e0:	d8f6      	bhi.n	80158d0 <_printf_i+0x28>
 80158e2:	a001      	add	r0, pc, #4	; (adr r0, 80158e8 <_printf_i+0x40>)
 80158e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80158e8:	08015941 	.word	0x08015941
 80158ec:	08015955 	.word	0x08015955
 80158f0:	080158d1 	.word	0x080158d1
 80158f4:	080158d1 	.word	0x080158d1
 80158f8:	080158d1 	.word	0x080158d1
 80158fc:	080158d1 	.word	0x080158d1
 8015900:	08015955 	.word	0x08015955
 8015904:	080158d1 	.word	0x080158d1
 8015908:	080158d1 	.word	0x080158d1
 801590c:	080158d1 	.word	0x080158d1
 8015910:	080158d1 	.word	0x080158d1
 8015914:	08015a61 	.word	0x08015a61
 8015918:	08015985 	.word	0x08015985
 801591c:	08015a43 	.word	0x08015a43
 8015920:	080158d1 	.word	0x080158d1
 8015924:	080158d1 	.word	0x080158d1
 8015928:	08015a83 	.word	0x08015a83
 801592c:	080158d1 	.word	0x080158d1
 8015930:	08015985 	.word	0x08015985
 8015934:	080158d1 	.word	0x080158d1
 8015938:	080158d1 	.word	0x080158d1
 801593c:	08015a4b 	.word	0x08015a4b
 8015940:	680b      	ldr	r3, [r1, #0]
 8015942:	1d1a      	adds	r2, r3, #4
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	600a      	str	r2, [r1, #0]
 8015948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801594c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015950:	2301      	movs	r3, #1
 8015952:	e0a3      	b.n	8015a9c <_printf_i+0x1f4>
 8015954:	6825      	ldr	r5, [r4, #0]
 8015956:	6808      	ldr	r0, [r1, #0]
 8015958:	062e      	lsls	r6, r5, #24
 801595a:	f100 0304 	add.w	r3, r0, #4
 801595e:	d50a      	bpl.n	8015976 <_printf_i+0xce>
 8015960:	6805      	ldr	r5, [r0, #0]
 8015962:	600b      	str	r3, [r1, #0]
 8015964:	2d00      	cmp	r5, #0
 8015966:	da03      	bge.n	8015970 <_printf_i+0xc8>
 8015968:	232d      	movs	r3, #45	; 0x2d
 801596a:	426d      	negs	r5, r5
 801596c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015970:	485e      	ldr	r0, [pc, #376]	; (8015aec <_printf_i+0x244>)
 8015972:	230a      	movs	r3, #10
 8015974:	e019      	b.n	80159aa <_printf_i+0x102>
 8015976:	f015 0f40 	tst.w	r5, #64	; 0x40
 801597a:	6805      	ldr	r5, [r0, #0]
 801597c:	600b      	str	r3, [r1, #0]
 801597e:	bf18      	it	ne
 8015980:	b22d      	sxthne	r5, r5
 8015982:	e7ef      	b.n	8015964 <_printf_i+0xbc>
 8015984:	680b      	ldr	r3, [r1, #0]
 8015986:	6825      	ldr	r5, [r4, #0]
 8015988:	1d18      	adds	r0, r3, #4
 801598a:	6008      	str	r0, [r1, #0]
 801598c:	0628      	lsls	r0, r5, #24
 801598e:	d501      	bpl.n	8015994 <_printf_i+0xec>
 8015990:	681d      	ldr	r5, [r3, #0]
 8015992:	e002      	b.n	801599a <_printf_i+0xf2>
 8015994:	0669      	lsls	r1, r5, #25
 8015996:	d5fb      	bpl.n	8015990 <_printf_i+0xe8>
 8015998:	881d      	ldrh	r5, [r3, #0]
 801599a:	4854      	ldr	r0, [pc, #336]	; (8015aec <_printf_i+0x244>)
 801599c:	2f6f      	cmp	r7, #111	; 0x6f
 801599e:	bf0c      	ite	eq
 80159a0:	2308      	moveq	r3, #8
 80159a2:	230a      	movne	r3, #10
 80159a4:	2100      	movs	r1, #0
 80159a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80159aa:	6866      	ldr	r6, [r4, #4]
 80159ac:	60a6      	str	r6, [r4, #8]
 80159ae:	2e00      	cmp	r6, #0
 80159b0:	bfa2      	ittt	ge
 80159b2:	6821      	ldrge	r1, [r4, #0]
 80159b4:	f021 0104 	bicge.w	r1, r1, #4
 80159b8:	6021      	strge	r1, [r4, #0]
 80159ba:	b90d      	cbnz	r5, 80159c0 <_printf_i+0x118>
 80159bc:	2e00      	cmp	r6, #0
 80159be:	d04d      	beq.n	8015a5c <_printf_i+0x1b4>
 80159c0:	4616      	mov	r6, r2
 80159c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80159c6:	fb03 5711 	mls	r7, r3, r1, r5
 80159ca:	5dc7      	ldrb	r7, [r0, r7]
 80159cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80159d0:	462f      	mov	r7, r5
 80159d2:	42bb      	cmp	r3, r7
 80159d4:	460d      	mov	r5, r1
 80159d6:	d9f4      	bls.n	80159c2 <_printf_i+0x11a>
 80159d8:	2b08      	cmp	r3, #8
 80159da:	d10b      	bne.n	80159f4 <_printf_i+0x14c>
 80159dc:	6823      	ldr	r3, [r4, #0]
 80159de:	07df      	lsls	r7, r3, #31
 80159e0:	d508      	bpl.n	80159f4 <_printf_i+0x14c>
 80159e2:	6923      	ldr	r3, [r4, #16]
 80159e4:	6861      	ldr	r1, [r4, #4]
 80159e6:	4299      	cmp	r1, r3
 80159e8:	bfde      	ittt	le
 80159ea:	2330      	movle	r3, #48	; 0x30
 80159ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80159f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80159f4:	1b92      	subs	r2, r2, r6
 80159f6:	6122      	str	r2, [r4, #16]
 80159f8:	f8cd a000 	str.w	sl, [sp]
 80159fc:	464b      	mov	r3, r9
 80159fe:	aa03      	add	r2, sp, #12
 8015a00:	4621      	mov	r1, r4
 8015a02:	4640      	mov	r0, r8
 8015a04:	f7ff fee2 	bl	80157cc <_printf_common>
 8015a08:	3001      	adds	r0, #1
 8015a0a:	d14c      	bne.n	8015aa6 <_printf_i+0x1fe>
 8015a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8015a10:	b004      	add	sp, #16
 8015a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a16:	4835      	ldr	r0, [pc, #212]	; (8015aec <_printf_i+0x244>)
 8015a18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015a1c:	6823      	ldr	r3, [r4, #0]
 8015a1e:	680e      	ldr	r6, [r1, #0]
 8015a20:	061f      	lsls	r7, r3, #24
 8015a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8015a26:	600e      	str	r6, [r1, #0]
 8015a28:	d514      	bpl.n	8015a54 <_printf_i+0x1ac>
 8015a2a:	07d9      	lsls	r1, r3, #31
 8015a2c:	bf44      	itt	mi
 8015a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8015a32:	6023      	strmi	r3, [r4, #0]
 8015a34:	b91d      	cbnz	r5, 8015a3e <_printf_i+0x196>
 8015a36:	6823      	ldr	r3, [r4, #0]
 8015a38:	f023 0320 	bic.w	r3, r3, #32
 8015a3c:	6023      	str	r3, [r4, #0]
 8015a3e:	2310      	movs	r3, #16
 8015a40:	e7b0      	b.n	80159a4 <_printf_i+0xfc>
 8015a42:	6823      	ldr	r3, [r4, #0]
 8015a44:	f043 0320 	orr.w	r3, r3, #32
 8015a48:	6023      	str	r3, [r4, #0]
 8015a4a:	2378      	movs	r3, #120	; 0x78
 8015a4c:	4828      	ldr	r0, [pc, #160]	; (8015af0 <_printf_i+0x248>)
 8015a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015a52:	e7e3      	b.n	8015a1c <_printf_i+0x174>
 8015a54:	065e      	lsls	r6, r3, #25
 8015a56:	bf48      	it	mi
 8015a58:	b2ad      	uxthmi	r5, r5
 8015a5a:	e7e6      	b.n	8015a2a <_printf_i+0x182>
 8015a5c:	4616      	mov	r6, r2
 8015a5e:	e7bb      	b.n	80159d8 <_printf_i+0x130>
 8015a60:	680b      	ldr	r3, [r1, #0]
 8015a62:	6826      	ldr	r6, [r4, #0]
 8015a64:	6960      	ldr	r0, [r4, #20]
 8015a66:	1d1d      	adds	r5, r3, #4
 8015a68:	600d      	str	r5, [r1, #0]
 8015a6a:	0635      	lsls	r5, r6, #24
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	d501      	bpl.n	8015a74 <_printf_i+0x1cc>
 8015a70:	6018      	str	r0, [r3, #0]
 8015a72:	e002      	b.n	8015a7a <_printf_i+0x1d2>
 8015a74:	0671      	lsls	r1, r6, #25
 8015a76:	d5fb      	bpl.n	8015a70 <_printf_i+0x1c8>
 8015a78:	8018      	strh	r0, [r3, #0]
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	6123      	str	r3, [r4, #16]
 8015a7e:	4616      	mov	r6, r2
 8015a80:	e7ba      	b.n	80159f8 <_printf_i+0x150>
 8015a82:	680b      	ldr	r3, [r1, #0]
 8015a84:	1d1a      	adds	r2, r3, #4
 8015a86:	600a      	str	r2, [r1, #0]
 8015a88:	681e      	ldr	r6, [r3, #0]
 8015a8a:	6862      	ldr	r2, [r4, #4]
 8015a8c:	2100      	movs	r1, #0
 8015a8e:	4630      	mov	r0, r6
 8015a90:	f7ea fc2e 	bl	80002f0 <memchr>
 8015a94:	b108      	cbz	r0, 8015a9a <_printf_i+0x1f2>
 8015a96:	1b80      	subs	r0, r0, r6
 8015a98:	6060      	str	r0, [r4, #4]
 8015a9a:	6863      	ldr	r3, [r4, #4]
 8015a9c:	6123      	str	r3, [r4, #16]
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015aa4:	e7a8      	b.n	80159f8 <_printf_i+0x150>
 8015aa6:	6923      	ldr	r3, [r4, #16]
 8015aa8:	4632      	mov	r2, r6
 8015aaa:	4649      	mov	r1, r9
 8015aac:	4640      	mov	r0, r8
 8015aae:	47d0      	blx	sl
 8015ab0:	3001      	adds	r0, #1
 8015ab2:	d0ab      	beq.n	8015a0c <_printf_i+0x164>
 8015ab4:	6823      	ldr	r3, [r4, #0]
 8015ab6:	079b      	lsls	r3, r3, #30
 8015ab8:	d413      	bmi.n	8015ae2 <_printf_i+0x23a>
 8015aba:	68e0      	ldr	r0, [r4, #12]
 8015abc:	9b03      	ldr	r3, [sp, #12]
 8015abe:	4298      	cmp	r0, r3
 8015ac0:	bfb8      	it	lt
 8015ac2:	4618      	movlt	r0, r3
 8015ac4:	e7a4      	b.n	8015a10 <_printf_i+0x168>
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	4632      	mov	r2, r6
 8015aca:	4649      	mov	r1, r9
 8015acc:	4640      	mov	r0, r8
 8015ace:	47d0      	blx	sl
 8015ad0:	3001      	adds	r0, #1
 8015ad2:	d09b      	beq.n	8015a0c <_printf_i+0x164>
 8015ad4:	3501      	adds	r5, #1
 8015ad6:	68e3      	ldr	r3, [r4, #12]
 8015ad8:	9903      	ldr	r1, [sp, #12]
 8015ada:	1a5b      	subs	r3, r3, r1
 8015adc:	42ab      	cmp	r3, r5
 8015ade:	dcf2      	bgt.n	8015ac6 <_printf_i+0x21e>
 8015ae0:	e7eb      	b.n	8015aba <_printf_i+0x212>
 8015ae2:	2500      	movs	r5, #0
 8015ae4:	f104 0619 	add.w	r6, r4, #25
 8015ae8:	e7f5      	b.n	8015ad6 <_printf_i+0x22e>
 8015aea:	bf00      	nop
 8015aec:	080233e2 	.word	0x080233e2
 8015af0:	080233f3 	.word	0x080233f3

08015af4 <iprintf>:
 8015af4:	b40f      	push	{r0, r1, r2, r3}
 8015af6:	4b0a      	ldr	r3, [pc, #40]	; (8015b20 <iprintf+0x2c>)
 8015af8:	b513      	push	{r0, r1, r4, lr}
 8015afa:	681c      	ldr	r4, [r3, #0]
 8015afc:	b124      	cbz	r4, 8015b08 <iprintf+0x14>
 8015afe:	69a3      	ldr	r3, [r4, #24]
 8015b00:	b913      	cbnz	r3, 8015b08 <iprintf+0x14>
 8015b02:	4620      	mov	r0, r4
 8015b04:	f7ff fa7c 	bl	8015000 <__sinit>
 8015b08:	ab05      	add	r3, sp, #20
 8015b0a:	9a04      	ldr	r2, [sp, #16]
 8015b0c:	68a1      	ldr	r1, [r4, #8]
 8015b0e:	9301      	str	r3, [sp, #4]
 8015b10:	4620      	mov	r0, r4
 8015b12:	f001 fe81 	bl	8017818 <_vfiprintf_r>
 8015b16:	b002      	add	sp, #8
 8015b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b1c:	b004      	add	sp, #16
 8015b1e:	4770      	bx	lr
 8015b20:	2400025c 	.word	0x2400025c

08015b24 <cleanup_glue>:
 8015b24:	b538      	push	{r3, r4, r5, lr}
 8015b26:	460c      	mov	r4, r1
 8015b28:	6809      	ldr	r1, [r1, #0]
 8015b2a:	4605      	mov	r5, r0
 8015b2c:	b109      	cbz	r1, 8015b32 <cleanup_glue+0xe>
 8015b2e:	f7ff fff9 	bl	8015b24 <cleanup_glue>
 8015b32:	4621      	mov	r1, r4
 8015b34:	4628      	mov	r0, r5
 8015b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b3a:	f001 bc97 	b.w	801746c <_free_r>
	...

08015b40 <_reclaim_reent>:
 8015b40:	4b2c      	ldr	r3, [pc, #176]	; (8015bf4 <_reclaim_reent+0xb4>)
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	4283      	cmp	r3, r0
 8015b46:	b570      	push	{r4, r5, r6, lr}
 8015b48:	4604      	mov	r4, r0
 8015b4a:	d051      	beq.n	8015bf0 <_reclaim_reent+0xb0>
 8015b4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015b4e:	b143      	cbz	r3, 8015b62 <_reclaim_reent+0x22>
 8015b50:	68db      	ldr	r3, [r3, #12]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d14a      	bne.n	8015bec <_reclaim_reent+0xac>
 8015b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b58:	6819      	ldr	r1, [r3, #0]
 8015b5a:	b111      	cbz	r1, 8015b62 <_reclaim_reent+0x22>
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	f001 fc85 	bl	801746c <_free_r>
 8015b62:	6961      	ldr	r1, [r4, #20]
 8015b64:	b111      	cbz	r1, 8015b6c <_reclaim_reent+0x2c>
 8015b66:	4620      	mov	r0, r4
 8015b68:	f001 fc80 	bl	801746c <_free_r>
 8015b6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015b6e:	b111      	cbz	r1, 8015b76 <_reclaim_reent+0x36>
 8015b70:	4620      	mov	r0, r4
 8015b72:	f001 fc7b 	bl	801746c <_free_r>
 8015b76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015b78:	b111      	cbz	r1, 8015b80 <_reclaim_reent+0x40>
 8015b7a:	4620      	mov	r0, r4
 8015b7c:	f001 fc76 	bl	801746c <_free_r>
 8015b80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015b82:	b111      	cbz	r1, 8015b8a <_reclaim_reent+0x4a>
 8015b84:	4620      	mov	r0, r4
 8015b86:	f001 fc71 	bl	801746c <_free_r>
 8015b8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015b8c:	b111      	cbz	r1, 8015b94 <_reclaim_reent+0x54>
 8015b8e:	4620      	mov	r0, r4
 8015b90:	f001 fc6c 	bl	801746c <_free_r>
 8015b94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015b96:	b111      	cbz	r1, 8015b9e <_reclaim_reent+0x5e>
 8015b98:	4620      	mov	r0, r4
 8015b9a:	f001 fc67 	bl	801746c <_free_r>
 8015b9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015ba0:	b111      	cbz	r1, 8015ba8 <_reclaim_reent+0x68>
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	f001 fc62 	bl	801746c <_free_r>
 8015ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015baa:	b111      	cbz	r1, 8015bb2 <_reclaim_reent+0x72>
 8015bac:	4620      	mov	r0, r4
 8015bae:	f001 fc5d 	bl	801746c <_free_r>
 8015bb2:	69a3      	ldr	r3, [r4, #24]
 8015bb4:	b1e3      	cbz	r3, 8015bf0 <_reclaim_reent+0xb0>
 8015bb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015bb8:	4620      	mov	r0, r4
 8015bba:	4798      	blx	r3
 8015bbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015bbe:	b1b9      	cbz	r1, 8015bf0 <_reclaim_reent+0xb0>
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bc6:	f7ff bfad 	b.w	8015b24 <cleanup_glue>
 8015bca:	5949      	ldr	r1, [r1, r5]
 8015bcc:	b941      	cbnz	r1, 8015be0 <_reclaim_reent+0xa0>
 8015bce:	3504      	adds	r5, #4
 8015bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bd2:	2d80      	cmp	r5, #128	; 0x80
 8015bd4:	68d9      	ldr	r1, [r3, #12]
 8015bd6:	d1f8      	bne.n	8015bca <_reclaim_reent+0x8a>
 8015bd8:	4620      	mov	r0, r4
 8015bda:	f001 fc47 	bl	801746c <_free_r>
 8015bde:	e7ba      	b.n	8015b56 <_reclaim_reent+0x16>
 8015be0:	680e      	ldr	r6, [r1, #0]
 8015be2:	4620      	mov	r0, r4
 8015be4:	f001 fc42 	bl	801746c <_free_r>
 8015be8:	4631      	mov	r1, r6
 8015bea:	e7ef      	b.n	8015bcc <_reclaim_reent+0x8c>
 8015bec:	2500      	movs	r5, #0
 8015bee:	e7ef      	b.n	8015bd0 <_reclaim_reent+0x90>
 8015bf0:	bd70      	pop	{r4, r5, r6, pc}
 8015bf2:	bf00      	nop
 8015bf4:	2400025c 	.word	0x2400025c

08015bf8 <_sbrk_r>:
 8015bf8:	b538      	push	{r3, r4, r5, lr}
 8015bfa:	4d06      	ldr	r5, [pc, #24]	; (8015c14 <_sbrk_r+0x1c>)
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	4604      	mov	r4, r0
 8015c00:	4608      	mov	r0, r1
 8015c02:	602b      	str	r3, [r5, #0]
 8015c04:	f7ec fc22 	bl	800244c <_sbrk>
 8015c08:	1c43      	adds	r3, r0, #1
 8015c0a:	d102      	bne.n	8015c12 <_sbrk_r+0x1a>
 8015c0c:	682b      	ldr	r3, [r5, #0]
 8015c0e:	b103      	cbz	r3, 8015c12 <_sbrk_r+0x1a>
 8015c10:	6023      	str	r3, [r4, #0]
 8015c12:	bd38      	pop	{r3, r4, r5, pc}
 8015c14:	24006ad4 	.word	0x24006ad4

08015c18 <siprintf>:
 8015c18:	b40e      	push	{r1, r2, r3}
 8015c1a:	b500      	push	{lr}
 8015c1c:	b09c      	sub	sp, #112	; 0x70
 8015c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8015c20:	9002      	str	r0, [sp, #8]
 8015c22:	9006      	str	r0, [sp, #24]
 8015c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c28:	4809      	ldr	r0, [pc, #36]	; (8015c50 <siprintf+0x38>)
 8015c2a:	9107      	str	r1, [sp, #28]
 8015c2c:	9104      	str	r1, [sp, #16]
 8015c2e:	4909      	ldr	r1, [pc, #36]	; (8015c54 <siprintf+0x3c>)
 8015c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c34:	9105      	str	r1, [sp, #20]
 8015c36:	6800      	ldr	r0, [r0, #0]
 8015c38:	9301      	str	r3, [sp, #4]
 8015c3a:	a902      	add	r1, sp, #8
 8015c3c:	f001 fcc2 	bl	80175c4 <_svfiprintf_r>
 8015c40:	9b02      	ldr	r3, [sp, #8]
 8015c42:	2200      	movs	r2, #0
 8015c44:	701a      	strb	r2, [r3, #0]
 8015c46:	b01c      	add	sp, #112	; 0x70
 8015c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c4c:	b003      	add	sp, #12
 8015c4e:	4770      	bx	lr
 8015c50:	2400025c 	.word	0x2400025c
 8015c54:	ffff0208 	.word	0xffff0208

08015c58 <__sread>:
 8015c58:	b510      	push	{r4, lr}
 8015c5a:	460c      	mov	r4, r1
 8015c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c60:	f001 ff0a 	bl	8017a78 <_read_r>
 8015c64:	2800      	cmp	r0, #0
 8015c66:	bfab      	itete	ge
 8015c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8015c6c:	181b      	addge	r3, r3, r0
 8015c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015c72:	bfac      	ite	ge
 8015c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8015c76:	81a3      	strhlt	r3, [r4, #12]
 8015c78:	bd10      	pop	{r4, pc}

08015c7a <__swrite>:
 8015c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c7e:	461f      	mov	r7, r3
 8015c80:	898b      	ldrh	r3, [r1, #12]
 8015c82:	05db      	lsls	r3, r3, #23
 8015c84:	4605      	mov	r5, r0
 8015c86:	460c      	mov	r4, r1
 8015c88:	4616      	mov	r6, r2
 8015c8a:	d505      	bpl.n	8015c98 <__swrite+0x1e>
 8015c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c90:	2302      	movs	r3, #2
 8015c92:	2200      	movs	r2, #0
 8015c94:	f001 f836 	bl	8016d04 <_lseek_r>
 8015c98:	89a3      	ldrh	r3, [r4, #12]
 8015c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015ca2:	81a3      	strh	r3, [r4, #12]
 8015ca4:	4632      	mov	r2, r6
 8015ca6:	463b      	mov	r3, r7
 8015ca8:	4628      	mov	r0, r5
 8015caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cae:	f000 b901 	b.w	8015eb4 <_write_r>

08015cb2 <__sseek>:
 8015cb2:	b510      	push	{r4, lr}
 8015cb4:	460c      	mov	r4, r1
 8015cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cba:	f001 f823 	bl	8016d04 <_lseek_r>
 8015cbe:	1c43      	adds	r3, r0, #1
 8015cc0:	89a3      	ldrh	r3, [r4, #12]
 8015cc2:	bf15      	itete	ne
 8015cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8015cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015cce:	81a3      	strheq	r3, [r4, #12]
 8015cd0:	bf18      	it	ne
 8015cd2:	81a3      	strhne	r3, [r4, #12]
 8015cd4:	bd10      	pop	{r4, pc}

08015cd6 <__sclose>:
 8015cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cda:	f000 b91b 	b.w	8015f14 <_close_r>
	...

08015ce0 <strtok>:
 8015ce0:	4b16      	ldr	r3, [pc, #88]	; (8015d3c <strtok+0x5c>)
 8015ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ce4:	681e      	ldr	r6, [r3, #0]
 8015ce6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8015ce8:	4605      	mov	r5, r0
 8015cea:	b9fc      	cbnz	r4, 8015d2c <strtok+0x4c>
 8015cec:	2050      	movs	r0, #80	; 0x50
 8015cee:	9101      	str	r1, [sp, #4]
 8015cf0:	f001 f81a 	bl	8016d28 <malloc>
 8015cf4:	9901      	ldr	r1, [sp, #4]
 8015cf6:	65b0      	str	r0, [r6, #88]	; 0x58
 8015cf8:	4602      	mov	r2, r0
 8015cfa:	b920      	cbnz	r0, 8015d06 <strtok+0x26>
 8015cfc:	4b10      	ldr	r3, [pc, #64]	; (8015d40 <strtok+0x60>)
 8015cfe:	4811      	ldr	r0, [pc, #68]	; (8015d44 <strtok+0x64>)
 8015d00:	2157      	movs	r1, #87	; 0x57
 8015d02:	f000 f8e9 	bl	8015ed8 <__assert_func>
 8015d06:	e9c0 4400 	strd	r4, r4, [r0]
 8015d0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8015d0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8015d12:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8015d16:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8015d1a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8015d1e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8015d22:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8015d26:	6184      	str	r4, [r0, #24]
 8015d28:	7704      	strb	r4, [r0, #28]
 8015d2a:	6244      	str	r4, [r0, #36]	; 0x24
 8015d2c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8015d2e:	2301      	movs	r3, #1
 8015d30:	4628      	mov	r0, r5
 8015d32:	b002      	add	sp, #8
 8015d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d38:	f000 b806 	b.w	8015d48 <__strtok_r>
 8015d3c:	2400025c 	.word	0x2400025c
 8015d40:	08023404 	.word	0x08023404
 8015d44:	0802341b 	.word	0x0802341b

08015d48 <__strtok_r>:
 8015d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d4a:	b908      	cbnz	r0, 8015d50 <__strtok_r+0x8>
 8015d4c:	6810      	ldr	r0, [r2, #0]
 8015d4e:	b188      	cbz	r0, 8015d74 <__strtok_r+0x2c>
 8015d50:	4604      	mov	r4, r0
 8015d52:	4620      	mov	r0, r4
 8015d54:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015d58:	460f      	mov	r7, r1
 8015d5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015d5e:	b91e      	cbnz	r6, 8015d68 <__strtok_r+0x20>
 8015d60:	b965      	cbnz	r5, 8015d7c <__strtok_r+0x34>
 8015d62:	6015      	str	r5, [r2, #0]
 8015d64:	4628      	mov	r0, r5
 8015d66:	e005      	b.n	8015d74 <__strtok_r+0x2c>
 8015d68:	42b5      	cmp	r5, r6
 8015d6a:	d1f6      	bne.n	8015d5a <__strtok_r+0x12>
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d1f0      	bne.n	8015d52 <__strtok_r+0xa>
 8015d70:	6014      	str	r4, [r2, #0]
 8015d72:	7003      	strb	r3, [r0, #0]
 8015d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d76:	461c      	mov	r4, r3
 8015d78:	e00c      	b.n	8015d94 <__strtok_r+0x4c>
 8015d7a:	b915      	cbnz	r5, 8015d82 <__strtok_r+0x3a>
 8015d7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015d80:	460e      	mov	r6, r1
 8015d82:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015d86:	42ab      	cmp	r3, r5
 8015d88:	d1f7      	bne.n	8015d7a <__strtok_r+0x32>
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d0f3      	beq.n	8015d76 <__strtok_r+0x2e>
 8015d8e:	2300      	movs	r3, #0
 8015d90:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015d94:	6014      	str	r4, [r2, #0]
 8015d96:	e7ed      	b.n	8015d74 <__strtok_r+0x2c>

08015d98 <_strtol_l.isra.0>:
 8015d98:	2b01      	cmp	r3, #1
 8015d9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d9e:	d001      	beq.n	8015da4 <_strtol_l.isra.0+0xc>
 8015da0:	2b24      	cmp	r3, #36	; 0x24
 8015da2:	d906      	bls.n	8015db2 <_strtol_l.isra.0+0x1a>
 8015da4:	f7ff f8ce 	bl	8014f44 <__errno>
 8015da8:	2316      	movs	r3, #22
 8015daa:	6003      	str	r3, [r0, #0]
 8015dac:	2000      	movs	r0, #0
 8015dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015db2:	4f3a      	ldr	r7, [pc, #232]	; (8015e9c <_strtol_l.isra.0+0x104>)
 8015db4:	468e      	mov	lr, r1
 8015db6:	4676      	mov	r6, lr
 8015db8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015dbc:	5de5      	ldrb	r5, [r4, r7]
 8015dbe:	f015 0508 	ands.w	r5, r5, #8
 8015dc2:	d1f8      	bne.n	8015db6 <_strtol_l.isra.0+0x1e>
 8015dc4:	2c2d      	cmp	r4, #45	; 0x2d
 8015dc6:	d134      	bne.n	8015e32 <_strtol_l.isra.0+0x9a>
 8015dc8:	f89e 4000 	ldrb.w	r4, [lr]
 8015dcc:	f04f 0801 	mov.w	r8, #1
 8015dd0:	f106 0e02 	add.w	lr, r6, #2
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d05c      	beq.n	8015e92 <_strtol_l.isra.0+0xfa>
 8015dd8:	2b10      	cmp	r3, #16
 8015dda:	d10c      	bne.n	8015df6 <_strtol_l.isra.0+0x5e>
 8015ddc:	2c30      	cmp	r4, #48	; 0x30
 8015dde:	d10a      	bne.n	8015df6 <_strtol_l.isra.0+0x5e>
 8015de0:	f89e 4000 	ldrb.w	r4, [lr]
 8015de4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015de8:	2c58      	cmp	r4, #88	; 0x58
 8015dea:	d14d      	bne.n	8015e88 <_strtol_l.isra.0+0xf0>
 8015dec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015df0:	2310      	movs	r3, #16
 8015df2:	f10e 0e02 	add.w	lr, lr, #2
 8015df6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8015dfa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015dfe:	2600      	movs	r6, #0
 8015e00:	fbbc f9f3 	udiv	r9, ip, r3
 8015e04:	4635      	mov	r5, r6
 8015e06:	fb03 ca19 	mls	sl, r3, r9, ip
 8015e0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015e0e:	2f09      	cmp	r7, #9
 8015e10:	d818      	bhi.n	8015e44 <_strtol_l.isra.0+0xac>
 8015e12:	463c      	mov	r4, r7
 8015e14:	42a3      	cmp	r3, r4
 8015e16:	dd24      	ble.n	8015e62 <_strtol_l.isra.0+0xca>
 8015e18:	2e00      	cmp	r6, #0
 8015e1a:	db1f      	blt.n	8015e5c <_strtol_l.isra.0+0xc4>
 8015e1c:	45a9      	cmp	r9, r5
 8015e1e:	d31d      	bcc.n	8015e5c <_strtol_l.isra.0+0xc4>
 8015e20:	d101      	bne.n	8015e26 <_strtol_l.isra.0+0x8e>
 8015e22:	45a2      	cmp	sl, r4
 8015e24:	db1a      	blt.n	8015e5c <_strtol_l.isra.0+0xc4>
 8015e26:	fb05 4503 	mla	r5, r5, r3, r4
 8015e2a:	2601      	movs	r6, #1
 8015e2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015e30:	e7eb      	b.n	8015e0a <_strtol_l.isra.0+0x72>
 8015e32:	2c2b      	cmp	r4, #43	; 0x2b
 8015e34:	bf08      	it	eq
 8015e36:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015e3a:	46a8      	mov	r8, r5
 8015e3c:	bf08      	it	eq
 8015e3e:	f106 0e02 	addeq.w	lr, r6, #2
 8015e42:	e7c7      	b.n	8015dd4 <_strtol_l.isra.0+0x3c>
 8015e44:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015e48:	2f19      	cmp	r7, #25
 8015e4a:	d801      	bhi.n	8015e50 <_strtol_l.isra.0+0xb8>
 8015e4c:	3c37      	subs	r4, #55	; 0x37
 8015e4e:	e7e1      	b.n	8015e14 <_strtol_l.isra.0+0x7c>
 8015e50:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015e54:	2f19      	cmp	r7, #25
 8015e56:	d804      	bhi.n	8015e62 <_strtol_l.isra.0+0xca>
 8015e58:	3c57      	subs	r4, #87	; 0x57
 8015e5a:	e7db      	b.n	8015e14 <_strtol_l.isra.0+0x7c>
 8015e5c:	f04f 36ff 	mov.w	r6, #4294967295
 8015e60:	e7e4      	b.n	8015e2c <_strtol_l.isra.0+0x94>
 8015e62:	2e00      	cmp	r6, #0
 8015e64:	da05      	bge.n	8015e72 <_strtol_l.isra.0+0xda>
 8015e66:	2322      	movs	r3, #34	; 0x22
 8015e68:	6003      	str	r3, [r0, #0]
 8015e6a:	4665      	mov	r5, ip
 8015e6c:	b942      	cbnz	r2, 8015e80 <_strtol_l.isra.0+0xe8>
 8015e6e:	4628      	mov	r0, r5
 8015e70:	e79d      	b.n	8015dae <_strtol_l.isra.0+0x16>
 8015e72:	f1b8 0f00 	cmp.w	r8, #0
 8015e76:	d000      	beq.n	8015e7a <_strtol_l.isra.0+0xe2>
 8015e78:	426d      	negs	r5, r5
 8015e7a:	2a00      	cmp	r2, #0
 8015e7c:	d0f7      	beq.n	8015e6e <_strtol_l.isra.0+0xd6>
 8015e7e:	b10e      	cbz	r6, 8015e84 <_strtol_l.isra.0+0xec>
 8015e80:	f10e 31ff 	add.w	r1, lr, #4294967295
 8015e84:	6011      	str	r1, [r2, #0]
 8015e86:	e7f2      	b.n	8015e6e <_strtol_l.isra.0+0xd6>
 8015e88:	2430      	movs	r4, #48	; 0x30
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d1b3      	bne.n	8015df6 <_strtol_l.isra.0+0x5e>
 8015e8e:	2308      	movs	r3, #8
 8015e90:	e7b1      	b.n	8015df6 <_strtol_l.isra.0+0x5e>
 8015e92:	2c30      	cmp	r4, #48	; 0x30
 8015e94:	d0a4      	beq.n	8015de0 <_strtol_l.isra.0+0x48>
 8015e96:	230a      	movs	r3, #10
 8015e98:	e7ad      	b.n	8015df6 <_strtol_l.isra.0+0x5e>
 8015e9a:	bf00      	nop
 8015e9c:	080234b9 	.word	0x080234b9

08015ea0 <strtol>:
 8015ea0:	4613      	mov	r3, r2
 8015ea2:	460a      	mov	r2, r1
 8015ea4:	4601      	mov	r1, r0
 8015ea6:	4802      	ldr	r0, [pc, #8]	; (8015eb0 <strtol+0x10>)
 8015ea8:	6800      	ldr	r0, [r0, #0]
 8015eaa:	f7ff bf75 	b.w	8015d98 <_strtol_l.isra.0>
 8015eae:	bf00      	nop
 8015eb0:	2400025c 	.word	0x2400025c

08015eb4 <_write_r>:
 8015eb4:	b538      	push	{r3, r4, r5, lr}
 8015eb6:	4d07      	ldr	r5, [pc, #28]	; (8015ed4 <_write_r+0x20>)
 8015eb8:	4604      	mov	r4, r0
 8015eba:	4608      	mov	r0, r1
 8015ebc:	4611      	mov	r1, r2
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	602a      	str	r2, [r5, #0]
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	f7eb fe04 	bl	8001ad0 <_write>
 8015ec8:	1c43      	adds	r3, r0, #1
 8015eca:	d102      	bne.n	8015ed2 <_write_r+0x1e>
 8015ecc:	682b      	ldr	r3, [r5, #0]
 8015ece:	b103      	cbz	r3, 8015ed2 <_write_r+0x1e>
 8015ed0:	6023      	str	r3, [r4, #0]
 8015ed2:	bd38      	pop	{r3, r4, r5, pc}
 8015ed4:	24006ad4 	.word	0x24006ad4

08015ed8 <__assert_func>:
 8015ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015eda:	4614      	mov	r4, r2
 8015edc:	461a      	mov	r2, r3
 8015ede:	4b09      	ldr	r3, [pc, #36]	; (8015f04 <__assert_func+0x2c>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4605      	mov	r5, r0
 8015ee4:	68d8      	ldr	r0, [r3, #12]
 8015ee6:	b14c      	cbz	r4, 8015efc <__assert_func+0x24>
 8015ee8:	4b07      	ldr	r3, [pc, #28]	; (8015f08 <__assert_func+0x30>)
 8015eea:	9100      	str	r1, [sp, #0]
 8015eec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015ef0:	4906      	ldr	r1, [pc, #24]	; (8015f0c <__assert_func+0x34>)
 8015ef2:	462b      	mov	r3, r5
 8015ef4:	f000 fef0 	bl	8016cd8 <fiprintf>
 8015ef8:	f001 fe90 	bl	8017c1c <abort>
 8015efc:	4b04      	ldr	r3, [pc, #16]	; (8015f10 <__assert_func+0x38>)
 8015efe:	461c      	mov	r4, r3
 8015f00:	e7f3      	b.n	8015eea <__assert_func+0x12>
 8015f02:	bf00      	nop
 8015f04:	2400025c 	.word	0x2400025c
 8015f08:	0802347c 	.word	0x0802347c
 8015f0c:	08023489 	.word	0x08023489
 8015f10:	080234b7 	.word	0x080234b7

08015f14 <_close_r>:
 8015f14:	b538      	push	{r3, r4, r5, lr}
 8015f16:	4d06      	ldr	r5, [pc, #24]	; (8015f30 <_close_r+0x1c>)
 8015f18:	2300      	movs	r3, #0
 8015f1a:	4604      	mov	r4, r0
 8015f1c:	4608      	mov	r0, r1
 8015f1e:	602b      	str	r3, [r5, #0]
 8015f20:	f7ec fa5f 	bl	80023e2 <_close>
 8015f24:	1c43      	adds	r3, r0, #1
 8015f26:	d102      	bne.n	8015f2e <_close_r+0x1a>
 8015f28:	682b      	ldr	r3, [r5, #0]
 8015f2a:	b103      	cbz	r3, 8015f2e <_close_r+0x1a>
 8015f2c:	6023      	str	r3, [r4, #0]
 8015f2e:	bd38      	pop	{r3, r4, r5, pc}
 8015f30:	24006ad4 	.word	0x24006ad4

08015f34 <quorem>:
 8015f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f38:	6903      	ldr	r3, [r0, #16]
 8015f3a:	690c      	ldr	r4, [r1, #16]
 8015f3c:	42a3      	cmp	r3, r4
 8015f3e:	4607      	mov	r7, r0
 8015f40:	f2c0 8081 	blt.w	8016046 <quorem+0x112>
 8015f44:	3c01      	subs	r4, #1
 8015f46:	f101 0814 	add.w	r8, r1, #20
 8015f4a:	f100 0514 	add.w	r5, r0, #20
 8015f4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015f52:	9301      	str	r3, [sp, #4]
 8015f54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015f58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	429a      	cmp	r2, r3
 8015f60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015f64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015f68:	fbb2 f6f3 	udiv	r6, r2, r3
 8015f6c:	d331      	bcc.n	8015fd2 <quorem+0x9e>
 8015f6e:	f04f 0e00 	mov.w	lr, #0
 8015f72:	4640      	mov	r0, r8
 8015f74:	46ac      	mov	ip, r5
 8015f76:	46f2      	mov	sl, lr
 8015f78:	f850 2b04 	ldr.w	r2, [r0], #4
 8015f7c:	b293      	uxth	r3, r2
 8015f7e:	fb06 e303 	mla	r3, r6, r3, lr
 8015f82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015f86:	b29b      	uxth	r3, r3
 8015f88:	ebaa 0303 	sub.w	r3, sl, r3
 8015f8c:	0c12      	lsrs	r2, r2, #16
 8015f8e:	f8dc a000 	ldr.w	sl, [ip]
 8015f92:	fb06 e202 	mla	r2, r6, r2, lr
 8015f96:	fa13 f38a 	uxtah	r3, r3, sl
 8015f9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015f9e:	fa1f fa82 	uxth.w	sl, r2
 8015fa2:	f8dc 2000 	ldr.w	r2, [ip]
 8015fa6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015faa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015fae:	b29b      	uxth	r3, r3
 8015fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015fb4:	4581      	cmp	r9, r0
 8015fb6:	f84c 3b04 	str.w	r3, [ip], #4
 8015fba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015fbe:	d2db      	bcs.n	8015f78 <quorem+0x44>
 8015fc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8015fc4:	b92b      	cbnz	r3, 8015fd2 <quorem+0x9e>
 8015fc6:	9b01      	ldr	r3, [sp, #4]
 8015fc8:	3b04      	subs	r3, #4
 8015fca:	429d      	cmp	r5, r3
 8015fcc:	461a      	mov	r2, r3
 8015fce:	d32e      	bcc.n	801602e <quorem+0xfa>
 8015fd0:	613c      	str	r4, [r7, #16]
 8015fd2:	4638      	mov	r0, r7
 8015fd4:	f001 f93a 	bl	801724c <__mcmp>
 8015fd8:	2800      	cmp	r0, #0
 8015fda:	db24      	blt.n	8016026 <quorem+0xf2>
 8015fdc:	3601      	adds	r6, #1
 8015fde:	4628      	mov	r0, r5
 8015fe0:	f04f 0c00 	mov.w	ip, #0
 8015fe4:	f858 2b04 	ldr.w	r2, [r8], #4
 8015fe8:	f8d0 e000 	ldr.w	lr, [r0]
 8015fec:	b293      	uxth	r3, r2
 8015fee:	ebac 0303 	sub.w	r3, ip, r3
 8015ff2:	0c12      	lsrs	r2, r2, #16
 8015ff4:	fa13 f38e 	uxtah	r3, r3, lr
 8015ff8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015ffc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016000:	b29b      	uxth	r3, r3
 8016002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016006:	45c1      	cmp	r9, r8
 8016008:	f840 3b04 	str.w	r3, [r0], #4
 801600c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016010:	d2e8      	bcs.n	8015fe4 <quorem+0xb0>
 8016012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801601a:	b922      	cbnz	r2, 8016026 <quorem+0xf2>
 801601c:	3b04      	subs	r3, #4
 801601e:	429d      	cmp	r5, r3
 8016020:	461a      	mov	r2, r3
 8016022:	d30a      	bcc.n	801603a <quorem+0x106>
 8016024:	613c      	str	r4, [r7, #16]
 8016026:	4630      	mov	r0, r6
 8016028:	b003      	add	sp, #12
 801602a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801602e:	6812      	ldr	r2, [r2, #0]
 8016030:	3b04      	subs	r3, #4
 8016032:	2a00      	cmp	r2, #0
 8016034:	d1cc      	bne.n	8015fd0 <quorem+0x9c>
 8016036:	3c01      	subs	r4, #1
 8016038:	e7c7      	b.n	8015fca <quorem+0x96>
 801603a:	6812      	ldr	r2, [r2, #0]
 801603c:	3b04      	subs	r3, #4
 801603e:	2a00      	cmp	r2, #0
 8016040:	d1f0      	bne.n	8016024 <quorem+0xf0>
 8016042:	3c01      	subs	r4, #1
 8016044:	e7eb      	b.n	801601e <quorem+0xea>
 8016046:	2000      	movs	r0, #0
 8016048:	e7ee      	b.n	8016028 <quorem+0xf4>
 801604a:	0000      	movs	r0, r0
 801604c:	0000      	movs	r0, r0
	...

08016050 <_dtoa_r>:
 8016050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016054:	ec59 8b10 	vmov	r8, r9, d0
 8016058:	b095      	sub	sp, #84	; 0x54
 801605a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801605c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801605e:	9107      	str	r1, [sp, #28]
 8016060:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016064:	4606      	mov	r6, r0
 8016066:	9209      	str	r2, [sp, #36]	; 0x24
 8016068:	9310      	str	r3, [sp, #64]	; 0x40
 801606a:	b975      	cbnz	r5, 801608a <_dtoa_r+0x3a>
 801606c:	2010      	movs	r0, #16
 801606e:	f000 fe5b 	bl	8016d28 <malloc>
 8016072:	4602      	mov	r2, r0
 8016074:	6270      	str	r0, [r6, #36]	; 0x24
 8016076:	b920      	cbnz	r0, 8016082 <_dtoa_r+0x32>
 8016078:	4bab      	ldr	r3, [pc, #684]	; (8016328 <_dtoa_r+0x2d8>)
 801607a:	21ea      	movs	r1, #234	; 0xea
 801607c:	48ab      	ldr	r0, [pc, #684]	; (801632c <_dtoa_r+0x2dc>)
 801607e:	f7ff ff2b 	bl	8015ed8 <__assert_func>
 8016082:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016086:	6005      	str	r5, [r0, #0]
 8016088:	60c5      	str	r5, [r0, #12]
 801608a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801608c:	6819      	ldr	r1, [r3, #0]
 801608e:	b151      	cbz	r1, 80160a6 <_dtoa_r+0x56>
 8016090:	685a      	ldr	r2, [r3, #4]
 8016092:	604a      	str	r2, [r1, #4]
 8016094:	2301      	movs	r3, #1
 8016096:	4093      	lsls	r3, r2
 8016098:	608b      	str	r3, [r1, #8]
 801609a:	4630      	mov	r0, r6
 801609c:	f000 fe98 	bl	8016dd0 <_Bfree>
 80160a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80160a2:	2200      	movs	r2, #0
 80160a4:	601a      	str	r2, [r3, #0]
 80160a6:	f1b9 0300 	subs.w	r3, r9, #0
 80160aa:	bfbb      	ittet	lt
 80160ac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80160b0:	9303      	strlt	r3, [sp, #12]
 80160b2:	2300      	movge	r3, #0
 80160b4:	2201      	movlt	r2, #1
 80160b6:	bfac      	ite	ge
 80160b8:	6023      	strge	r3, [r4, #0]
 80160ba:	6022      	strlt	r2, [r4, #0]
 80160bc:	4b9c      	ldr	r3, [pc, #624]	; (8016330 <_dtoa_r+0x2e0>)
 80160be:	9c03      	ldr	r4, [sp, #12]
 80160c0:	43a3      	bics	r3, r4
 80160c2:	d11a      	bne.n	80160fa <_dtoa_r+0xaa>
 80160c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80160c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80160ca:	6013      	str	r3, [r2, #0]
 80160cc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80160d0:	ea53 0308 	orrs.w	r3, r3, r8
 80160d4:	f000 8512 	beq.w	8016afc <_dtoa_r+0xaac>
 80160d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80160da:	b953      	cbnz	r3, 80160f2 <_dtoa_r+0xa2>
 80160dc:	4b95      	ldr	r3, [pc, #596]	; (8016334 <_dtoa_r+0x2e4>)
 80160de:	e01f      	b.n	8016120 <_dtoa_r+0xd0>
 80160e0:	4b95      	ldr	r3, [pc, #596]	; (8016338 <_dtoa_r+0x2e8>)
 80160e2:	9300      	str	r3, [sp, #0]
 80160e4:	3308      	adds	r3, #8
 80160e6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80160e8:	6013      	str	r3, [r2, #0]
 80160ea:	9800      	ldr	r0, [sp, #0]
 80160ec:	b015      	add	sp, #84	; 0x54
 80160ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160f2:	4b90      	ldr	r3, [pc, #576]	; (8016334 <_dtoa_r+0x2e4>)
 80160f4:	9300      	str	r3, [sp, #0]
 80160f6:	3303      	adds	r3, #3
 80160f8:	e7f5      	b.n	80160e6 <_dtoa_r+0x96>
 80160fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80160fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016106:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801610a:	d10b      	bne.n	8016124 <_dtoa_r+0xd4>
 801610c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801610e:	2301      	movs	r3, #1
 8016110:	6013      	str	r3, [r2, #0]
 8016112:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016114:	2b00      	cmp	r3, #0
 8016116:	f000 84ee 	beq.w	8016af6 <_dtoa_r+0xaa6>
 801611a:	4888      	ldr	r0, [pc, #544]	; (801633c <_dtoa_r+0x2ec>)
 801611c:	6018      	str	r0, [r3, #0]
 801611e:	1e43      	subs	r3, r0, #1
 8016120:	9300      	str	r3, [sp, #0]
 8016122:	e7e2      	b.n	80160ea <_dtoa_r+0x9a>
 8016124:	a913      	add	r1, sp, #76	; 0x4c
 8016126:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801612a:	aa12      	add	r2, sp, #72	; 0x48
 801612c:	4630      	mov	r0, r6
 801612e:	f001 f931 	bl	8017394 <__d2b>
 8016132:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8016136:	4605      	mov	r5, r0
 8016138:	9812      	ldr	r0, [sp, #72]	; 0x48
 801613a:	2900      	cmp	r1, #0
 801613c:	d047      	beq.n	80161ce <_dtoa_r+0x17e>
 801613e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016140:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016144:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016148:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801614c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016150:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016154:	2400      	movs	r4, #0
 8016156:	ec43 2b16 	vmov	d6, r2, r3
 801615a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801615e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8016310 <_dtoa_r+0x2c0>
 8016162:	ee36 7b47 	vsub.f64	d7, d6, d7
 8016166:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8016318 <_dtoa_r+0x2c8>
 801616a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801616e:	eeb0 7b46 	vmov.f64	d7, d6
 8016172:	ee06 1a90 	vmov	s13, r1
 8016176:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801617a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8016320 <_dtoa_r+0x2d0>
 801617e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016182:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8016186:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801618a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801618e:	ee16 ba90 	vmov	fp, s13
 8016192:	9411      	str	r4, [sp, #68]	; 0x44
 8016194:	d508      	bpl.n	80161a8 <_dtoa_r+0x158>
 8016196:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801619a:	eeb4 6b47 	vcmp.f64	d6, d7
 801619e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161a2:	bf18      	it	ne
 80161a4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80161a8:	f1bb 0f16 	cmp.w	fp, #22
 80161ac:	d832      	bhi.n	8016214 <_dtoa_r+0x1c4>
 80161ae:	4b64      	ldr	r3, [pc, #400]	; (8016340 <_dtoa_r+0x2f0>)
 80161b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80161b4:	ed93 7b00 	vldr	d7, [r3]
 80161b8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80161bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80161c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c4:	d501      	bpl.n	80161ca <_dtoa_r+0x17a>
 80161c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80161ca:	2300      	movs	r3, #0
 80161cc:	e023      	b.n	8016216 <_dtoa_r+0x1c6>
 80161ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80161d0:	4401      	add	r1, r0
 80161d2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80161d6:	2b20      	cmp	r3, #32
 80161d8:	bfc3      	ittte	gt
 80161da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80161de:	fa04 f303 	lslgt.w	r3, r4, r3
 80161e2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80161e6:	f1c3 0320 	rsble	r3, r3, #32
 80161ea:	bfc6      	itte	gt
 80161ec:	fa28 f804 	lsrgt.w	r8, r8, r4
 80161f0:	ea43 0308 	orrgt.w	r3, r3, r8
 80161f4:	fa08 f303 	lslle.w	r3, r8, r3
 80161f8:	ee07 3a90 	vmov	s15, r3
 80161fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016200:	3901      	subs	r1, #1
 8016202:	ed8d 7b00 	vstr	d7, [sp]
 8016206:	9c01      	ldr	r4, [sp, #4]
 8016208:	e9dd 2300 	ldrd	r2, r3, [sp]
 801620c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8016210:	2401      	movs	r4, #1
 8016212:	e7a0      	b.n	8016156 <_dtoa_r+0x106>
 8016214:	2301      	movs	r3, #1
 8016216:	930f      	str	r3, [sp, #60]	; 0x3c
 8016218:	1a43      	subs	r3, r0, r1
 801621a:	1e5a      	subs	r2, r3, #1
 801621c:	bf45      	ittet	mi
 801621e:	f1c3 0301 	rsbmi	r3, r3, #1
 8016222:	9305      	strmi	r3, [sp, #20]
 8016224:	2300      	movpl	r3, #0
 8016226:	2300      	movmi	r3, #0
 8016228:	9206      	str	r2, [sp, #24]
 801622a:	bf54      	ite	pl
 801622c:	9305      	strpl	r3, [sp, #20]
 801622e:	9306      	strmi	r3, [sp, #24]
 8016230:	f1bb 0f00 	cmp.w	fp, #0
 8016234:	db18      	blt.n	8016268 <_dtoa_r+0x218>
 8016236:	9b06      	ldr	r3, [sp, #24]
 8016238:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801623c:	445b      	add	r3, fp
 801623e:	9306      	str	r3, [sp, #24]
 8016240:	2300      	movs	r3, #0
 8016242:	9a07      	ldr	r2, [sp, #28]
 8016244:	2a09      	cmp	r2, #9
 8016246:	d849      	bhi.n	80162dc <_dtoa_r+0x28c>
 8016248:	2a05      	cmp	r2, #5
 801624a:	bfc4      	itt	gt
 801624c:	3a04      	subgt	r2, #4
 801624e:	9207      	strgt	r2, [sp, #28]
 8016250:	9a07      	ldr	r2, [sp, #28]
 8016252:	f1a2 0202 	sub.w	r2, r2, #2
 8016256:	bfcc      	ite	gt
 8016258:	2400      	movgt	r4, #0
 801625a:	2401      	movle	r4, #1
 801625c:	2a03      	cmp	r2, #3
 801625e:	d848      	bhi.n	80162f2 <_dtoa_r+0x2a2>
 8016260:	e8df f002 	tbb	[pc, r2]
 8016264:	3a2c2e0b 	.word	0x3a2c2e0b
 8016268:	9b05      	ldr	r3, [sp, #20]
 801626a:	2200      	movs	r2, #0
 801626c:	eba3 030b 	sub.w	r3, r3, fp
 8016270:	9305      	str	r3, [sp, #20]
 8016272:	920e      	str	r2, [sp, #56]	; 0x38
 8016274:	f1cb 0300 	rsb	r3, fp, #0
 8016278:	e7e3      	b.n	8016242 <_dtoa_r+0x1f2>
 801627a:	2200      	movs	r2, #0
 801627c:	9208      	str	r2, [sp, #32]
 801627e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016280:	2a00      	cmp	r2, #0
 8016282:	dc39      	bgt.n	80162f8 <_dtoa_r+0x2a8>
 8016284:	f04f 0a01 	mov.w	sl, #1
 8016288:	46d1      	mov	r9, sl
 801628a:	4652      	mov	r2, sl
 801628c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016290:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8016292:	2100      	movs	r1, #0
 8016294:	6079      	str	r1, [r7, #4]
 8016296:	2004      	movs	r0, #4
 8016298:	f100 0c14 	add.w	ip, r0, #20
 801629c:	4594      	cmp	ip, r2
 801629e:	6879      	ldr	r1, [r7, #4]
 80162a0:	d92f      	bls.n	8016302 <_dtoa_r+0x2b2>
 80162a2:	4630      	mov	r0, r6
 80162a4:	930c      	str	r3, [sp, #48]	; 0x30
 80162a6:	f000 fd53 	bl	8016d50 <_Balloc>
 80162aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162ac:	9000      	str	r0, [sp, #0]
 80162ae:	4602      	mov	r2, r0
 80162b0:	2800      	cmp	r0, #0
 80162b2:	d149      	bne.n	8016348 <_dtoa_r+0x2f8>
 80162b4:	4b23      	ldr	r3, [pc, #140]	; (8016344 <_dtoa_r+0x2f4>)
 80162b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80162ba:	e6df      	b.n	801607c <_dtoa_r+0x2c>
 80162bc:	2201      	movs	r2, #1
 80162be:	e7dd      	b.n	801627c <_dtoa_r+0x22c>
 80162c0:	2200      	movs	r2, #0
 80162c2:	9208      	str	r2, [sp, #32]
 80162c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162c6:	eb0b 0a02 	add.w	sl, fp, r2
 80162ca:	f10a 0901 	add.w	r9, sl, #1
 80162ce:	464a      	mov	r2, r9
 80162d0:	2a01      	cmp	r2, #1
 80162d2:	bfb8      	it	lt
 80162d4:	2201      	movlt	r2, #1
 80162d6:	e7db      	b.n	8016290 <_dtoa_r+0x240>
 80162d8:	2201      	movs	r2, #1
 80162da:	e7f2      	b.n	80162c2 <_dtoa_r+0x272>
 80162dc:	2401      	movs	r4, #1
 80162de:	2200      	movs	r2, #0
 80162e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80162e4:	f04f 3aff 	mov.w	sl, #4294967295
 80162e8:	2100      	movs	r1, #0
 80162ea:	46d1      	mov	r9, sl
 80162ec:	2212      	movs	r2, #18
 80162ee:	9109      	str	r1, [sp, #36]	; 0x24
 80162f0:	e7ce      	b.n	8016290 <_dtoa_r+0x240>
 80162f2:	2201      	movs	r2, #1
 80162f4:	9208      	str	r2, [sp, #32]
 80162f6:	e7f5      	b.n	80162e4 <_dtoa_r+0x294>
 80162f8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80162fc:	46d1      	mov	r9, sl
 80162fe:	4652      	mov	r2, sl
 8016300:	e7c6      	b.n	8016290 <_dtoa_r+0x240>
 8016302:	3101      	adds	r1, #1
 8016304:	6079      	str	r1, [r7, #4]
 8016306:	0040      	lsls	r0, r0, #1
 8016308:	e7c6      	b.n	8016298 <_dtoa_r+0x248>
 801630a:	bf00      	nop
 801630c:	f3af 8000 	nop.w
 8016310:	636f4361 	.word	0x636f4361
 8016314:	3fd287a7 	.word	0x3fd287a7
 8016318:	8b60c8b3 	.word	0x8b60c8b3
 801631c:	3fc68a28 	.word	0x3fc68a28
 8016320:	509f79fb 	.word	0x509f79fb
 8016324:	3fd34413 	.word	0x3fd34413
 8016328:	08023404 	.word	0x08023404
 801632c:	080235c6 	.word	0x080235c6
 8016330:	7ff00000 	.word	0x7ff00000
 8016334:	080235c2 	.word	0x080235c2
 8016338:	080235b9 	.word	0x080235b9
 801633c:	080233e1 	.word	0x080233e1
 8016340:	080236c0 	.word	0x080236c0
 8016344:	08023625 	.word	0x08023625
 8016348:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801634a:	9900      	ldr	r1, [sp, #0]
 801634c:	6011      	str	r1, [r2, #0]
 801634e:	f1b9 0f0e 	cmp.w	r9, #14
 8016352:	d872      	bhi.n	801643a <_dtoa_r+0x3ea>
 8016354:	2c00      	cmp	r4, #0
 8016356:	d070      	beq.n	801643a <_dtoa_r+0x3ea>
 8016358:	f1bb 0f00 	cmp.w	fp, #0
 801635c:	f340 80a6 	ble.w	80164ac <_dtoa_r+0x45c>
 8016360:	49ca      	ldr	r1, [pc, #808]	; (801668c <_dtoa_r+0x63c>)
 8016362:	f00b 020f 	and.w	r2, fp, #15
 8016366:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801636a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801636e:	ed92 7b00 	vldr	d7, [r2]
 8016372:	ea4f 112b 	mov.w	r1, fp, asr #4
 8016376:	f000 808d 	beq.w	8016494 <_dtoa_r+0x444>
 801637a:	4ac5      	ldr	r2, [pc, #788]	; (8016690 <_dtoa_r+0x640>)
 801637c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8016380:	ed92 6b08 	vldr	d6, [r2, #32]
 8016384:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8016388:	ed8d 6b02 	vstr	d6, [sp, #8]
 801638c:	f001 010f 	and.w	r1, r1, #15
 8016390:	2203      	movs	r2, #3
 8016392:	48bf      	ldr	r0, [pc, #764]	; (8016690 <_dtoa_r+0x640>)
 8016394:	2900      	cmp	r1, #0
 8016396:	d17f      	bne.n	8016498 <_dtoa_r+0x448>
 8016398:	ed9d 6b02 	vldr	d6, [sp, #8]
 801639c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80163a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80163a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80163a6:	2900      	cmp	r1, #0
 80163a8:	f000 80b2 	beq.w	8016510 <_dtoa_r+0x4c0>
 80163ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80163b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80163b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80163b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163bc:	f140 80a8 	bpl.w	8016510 <_dtoa_r+0x4c0>
 80163c0:	f1b9 0f00 	cmp.w	r9, #0
 80163c4:	f000 80a4 	beq.w	8016510 <_dtoa_r+0x4c0>
 80163c8:	f1ba 0f00 	cmp.w	sl, #0
 80163cc:	dd31      	ble.n	8016432 <_dtoa_r+0x3e2>
 80163ce:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80163d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80163d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80163da:	f10b 37ff 	add.w	r7, fp, #4294967295
 80163de:	3201      	adds	r2, #1
 80163e0:	4650      	mov	r0, sl
 80163e2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80163e6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80163ea:	ee07 2a90 	vmov	s15, r2
 80163ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80163f2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80163f6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80163fa:	9c03      	ldr	r4, [sp, #12]
 80163fc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016400:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8016404:	2800      	cmp	r0, #0
 8016406:	f040 8086 	bne.w	8016516 <_dtoa_r+0x4c6>
 801640a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801640e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8016412:	ec42 1b17 	vmov	d7, r1, r2
 8016416:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801641a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801641e:	f300 8272 	bgt.w	8016906 <_dtoa_r+0x8b6>
 8016422:	eeb1 7b47 	vneg.f64	d7, d7
 8016426:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801642a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801642e:	f100 8267 	bmi.w	8016900 <_dtoa_r+0x8b0>
 8016432:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8016436:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801643a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801643c:	2a00      	cmp	r2, #0
 801643e:	f2c0 8129 	blt.w	8016694 <_dtoa_r+0x644>
 8016442:	f1bb 0f0e 	cmp.w	fp, #14
 8016446:	f300 8125 	bgt.w	8016694 <_dtoa_r+0x644>
 801644a:	4b90      	ldr	r3, [pc, #576]	; (801668c <_dtoa_r+0x63c>)
 801644c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016450:	ed93 6b00 	vldr	d6, [r3]
 8016454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016456:	2b00      	cmp	r3, #0
 8016458:	f280 80c3 	bge.w	80165e2 <_dtoa_r+0x592>
 801645c:	f1b9 0f00 	cmp.w	r9, #0
 8016460:	f300 80bf 	bgt.w	80165e2 <_dtoa_r+0x592>
 8016464:	f040 824c 	bne.w	8016900 <_dtoa_r+0x8b0>
 8016468:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801646c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016470:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016474:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801647c:	464c      	mov	r4, r9
 801647e:	464f      	mov	r7, r9
 8016480:	f280 8222 	bge.w	80168c8 <_dtoa_r+0x878>
 8016484:	f8dd 8000 	ldr.w	r8, [sp]
 8016488:	2331      	movs	r3, #49	; 0x31
 801648a:	f808 3b01 	strb.w	r3, [r8], #1
 801648e:	f10b 0b01 	add.w	fp, fp, #1
 8016492:	e21e      	b.n	80168d2 <_dtoa_r+0x882>
 8016494:	2202      	movs	r2, #2
 8016496:	e77c      	b.n	8016392 <_dtoa_r+0x342>
 8016498:	07cc      	lsls	r4, r1, #31
 801649a:	d504      	bpl.n	80164a6 <_dtoa_r+0x456>
 801649c:	ed90 6b00 	vldr	d6, [r0]
 80164a0:	3201      	adds	r2, #1
 80164a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80164a6:	1049      	asrs	r1, r1, #1
 80164a8:	3008      	adds	r0, #8
 80164aa:	e773      	b.n	8016394 <_dtoa_r+0x344>
 80164ac:	d02e      	beq.n	801650c <_dtoa_r+0x4bc>
 80164ae:	f1cb 0100 	rsb	r1, fp, #0
 80164b2:	4a76      	ldr	r2, [pc, #472]	; (801668c <_dtoa_r+0x63c>)
 80164b4:	f001 000f 	and.w	r0, r1, #15
 80164b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80164bc:	ed92 7b00 	vldr	d7, [r2]
 80164c0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80164c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80164c8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80164cc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80164d0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80164d4:	486e      	ldr	r0, [pc, #440]	; (8016690 <_dtoa_r+0x640>)
 80164d6:	1109      	asrs	r1, r1, #4
 80164d8:	2400      	movs	r4, #0
 80164da:	2202      	movs	r2, #2
 80164dc:	b939      	cbnz	r1, 80164ee <_dtoa_r+0x49e>
 80164de:	2c00      	cmp	r4, #0
 80164e0:	f43f af60 	beq.w	80163a4 <_dtoa_r+0x354>
 80164e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80164e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80164ec:	e75a      	b.n	80163a4 <_dtoa_r+0x354>
 80164ee:	07cf      	lsls	r7, r1, #31
 80164f0:	d509      	bpl.n	8016506 <_dtoa_r+0x4b6>
 80164f2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80164f6:	ed90 7b00 	vldr	d7, [r0]
 80164fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80164fe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8016502:	3201      	adds	r2, #1
 8016504:	2401      	movs	r4, #1
 8016506:	1049      	asrs	r1, r1, #1
 8016508:	3008      	adds	r0, #8
 801650a:	e7e7      	b.n	80164dc <_dtoa_r+0x48c>
 801650c:	2202      	movs	r2, #2
 801650e:	e749      	b.n	80163a4 <_dtoa_r+0x354>
 8016510:	465f      	mov	r7, fp
 8016512:	4648      	mov	r0, r9
 8016514:	e765      	b.n	80163e2 <_dtoa_r+0x392>
 8016516:	ec42 1b17 	vmov	d7, r1, r2
 801651a:	4a5c      	ldr	r2, [pc, #368]	; (801668c <_dtoa_r+0x63c>)
 801651c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016520:	ed12 4b02 	vldr	d4, [r2, #-8]
 8016524:	9a00      	ldr	r2, [sp, #0]
 8016526:	1814      	adds	r4, r2, r0
 8016528:	9a08      	ldr	r2, [sp, #32]
 801652a:	b352      	cbz	r2, 8016582 <_dtoa_r+0x532>
 801652c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8016530:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8016534:	f8dd 8000 	ldr.w	r8, [sp]
 8016538:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801653c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8016540:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016544:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016548:	ee14 2a90 	vmov	r2, s9
 801654c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8016550:	3230      	adds	r2, #48	; 0x30
 8016552:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801655a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801655e:	f808 2b01 	strb.w	r2, [r8], #1
 8016562:	d439      	bmi.n	80165d8 <_dtoa_r+0x588>
 8016564:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016568:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801656c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016570:	d472      	bmi.n	8016658 <_dtoa_r+0x608>
 8016572:	45a0      	cmp	r8, r4
 8016574:	f43f af5d 	beq.w	8016432 <_dtoa_r+0x3e2>
 8016578:	ee27 7b03 	vmul.f64	d7, d7, d3
 801657c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016580:	e7e0      	b.n	8016544 <_dtoa_r+0x4f4>
 8016582:	f8dd 8000 	ldr.w	r8, [sp]
 8016586:	ee27 7b04 	vmul.f64	d7, d7, d4
 801658a:	4621      	mov	r1, r4
 801658c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8016590:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016594:	ee14 2a90 	vmov	r2, s9
 8016598:	3230      	adds	r2, #48	; 0x30
 801659a:	f808 2b01 	strb.w	r2, [r8], #1
 801659e:	45a0      	cmp	r8, r4
 80165a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80165a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80165a8:	d118      	bne.n	80165dc <_dtoa_r+0x58c>
 80165aa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80165ae:	ee37 4b05 	vadd.f64	d4, d7, d5
 80165b2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80165b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ba:	dc4d      	bgt.n	8016658 <_dtoa_r+0x608>
 80165bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80165c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80165c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165c8:	f57f af33 	bpl.w	8016432 <_dtoa_r+0x3e2>
 80165cc:	4688      	mov	r8, r1
 80165ce:	3901      	subs	r1, #1
 80165d0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80165d4:	2b30      	cmp	r3, #48	; 0x30
 80165d6:	d0f9      	beq.n	80165cc <_dtoa_r+0x57c>
 80165d8:	46bb      	mov	fp, r7
 80165da:	e02a      	b.n	8016632 <_dtoa_r+0x5e2>
 80165dc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80165e0:	e7d6      	b.n	8016590 <_dtoa_r+0x540>
 80165e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80165e6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80165ea:	f8dd 8000 	ldr.w	r8, [sp]
 80165ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80165f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80165f6:	ee15 3a10 	vmov	r3, s10
 80165fa:	3330      	adds	r3, #48	; 0x30
 80165fc:	f808 3b01 	strb.w	r3, [r8], #1
 8016600:	9b00      	ldr	r3, [sp, #0]
 8016602:	eba8 0303 	sub.w	r3, r8, r3
 8016606:	4599      	cmp	r9, r3
 8016608:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801660c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8016610:	d133      	bne.n	801667a <_dtoa_r+0x62a>
 8016612:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016616:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801661a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801661e:	dc1a      	bgt.n	8016656 <_dtoa_r+0x606>
 8016620:	eeb4 7b46 	vcmp.f64	d7, d6
 8016624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016628:	d103      	bne.n	8016632 <_dtoa_r+0x5e2>
 801662a:	ee15 3a10 	vmov	r3, s10
 801662e:	07d9      	lsls	r1, r3, #31
 8016630:	d411      	bmi.n	8016656 <_dtoa_r+0x606>
 8016632:	4629      	mov	r1, r5
 8016634:	4630      	mov	r0, r6
 8016636:	f000 fbcb 	bl	8016dd0 <_Bfree>
 801663a:	2300      	movs	r3, #0
 801663c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801663e:	f888 3000 	strb.w	r3, [r8]
 8016642:	f10b 0301 	add.w	r3, fp, #1
 8016646:	6013      	str	r3, [r2, #0]
 8016648:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801664a:	2b00      	cmp	r3, #0
 801664c:	f43f ad4d 	beq.w	80160ea <_dtoa_r+0x9a>
 8016650:	f8c3 8000 	str.w	r8, [r3]
 8016654:	e549      	b.n	80160ea <_dtoa_r+0x9a>
 8016656:	465f      	mov	r7, fp
 8016658:	4643      	mov	r3, r8
 801665a:	4698      	mov	r8, r3
 801665c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016660:	2a39      	cmp	r2, #57	; 0x39
 8016662:	d106      	bne.n	8016672 <_dtoa_r+0x622>
 8016664:	9a00      	ldr	r2, [sp, #0]
 8016666:	429a      	cmp	r2, r3
 8016668:	d1f7      	bne.n	801665a <_dtoa_r+0x60a>
 801666a:	9900      	ldr	r1, [sp, #0]
 801666c:	2230      	movs	r2, #48	; 0x30
 801666e:	3701      	adds	r7, #1
 8016670:	700a      	strb	r2, [r1, #0]
 8016672:	781a      	ldrb	r2, [r3, #0]
 8016674:	3201      	adds	r2, #1
 8016676:	701a      	strb	r2, [r3, #0]
 8016678:	e7ae      	b.n	80165d8 <_dtoa_r+0x588>
 801667a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801667e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016686:	d1b2      	bne.n	80165ee <_dtoa_r+0x59e>
 8016688:	e7d3      	b.n	8016632 <_dtoa_r+0x5e2>
 801668a:	bf00      	nop
 801668c:	080236c0 	.word	0x080236c0
 8016690:	08023698 	.word	0x08023698
 8016694:	9908      	ldr	r1, [sp, #32]
 8016696:	2900      	cmp	r1, #0
 8016698:	f000 80d1 	beq.w	801683e <_dtoa_r+0x7ee>
 801669c:	9907      	ldr	r1, [sp, #28]
 801669e:	2901      	cmp	r1, #1
 80166a0:	f300 80b4 	bgt.w	801680c <_dtoa_r+0x7bc>
 80166a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80166a6:	2900      	cmp	r1, #0
 80166a8:	f000 80ac 	beq.w	8016804 <_dtoa_r+0x7b4>
 80166ac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80166b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80166b4:	461c      	mov	r4, r3
 80166b6:	930a      	str	r3, [sp, #40]	; 0x28
 80166b8:	9b05      	ldr	r3, [sp, #20]
 80166ba:	4413      	add	r3, r2
 80166bc:	9305      	str	r3, [sp, #20]
 80166be:	9b06      	ldr	r3, [sp, #24]
 80166c0:	2101      	movs	r1, #1
 80166c2:	4413      	add	r3, r2
 80166c4:	4630      	mov	r0, r6
 80166c6:	9306      	str	r3, [sp, #24]
 80166c8:	f000 fc3e 	bl	8016f48 <__i2b>
 80166cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166ce:	4607      	mov	r7, r0
 80166d0:	f1b8 0f00 	cmp.w	r8, #0
 80166d4:	dd0d      	ble.n	80166f2 <_dtoa_r+0x6a2>
 80166d6:	9a06      	ldr	r2, [sp, #24]
 80166d8:	2a00      	cmp	r2, #0
 80166da:	dd0a      	ble.n	80166f2 <_dtoa_r+0x6a2>
 80166dc:	4542      	cmp	r2, r8
 80166de:	9905      	ldr	r1, [sp, #20]
 80166e0:	bfa8      	it	ge
 80166e2:	4642      	movge	r2, r8
 80166e4:	1a89      	subs	r1, r1, r2
 80166e6:	9105      	str	r1, [sp, #20]
 80166e8:	9906      	ldr	r1, [sp, #24]
 80166ea:	eba8 0802 	sub.w	r8, r8, r2
 80166ee:	1a8a      	subs	r2, r1, r2
 80166f0:	9206      	str	r2, [sp, #24]
 80166f2:	b303      	cbz	r3, 8016736 <_dtoa_r+0x6e6>
 80166f4:	9a08      	ldr	r2, [sp, #32]
 80166f6:	2a00      	cmp	r2, #0
 80166f8:	f000 80a6 	beq.w	8016848 <_dtoa_r+0x7f8>
 80166fc:	2c00      	cmp	r4, #0
 80166fe:	dd13      	ble.n	8016728 <_dtoa_r+0x6d8>
 8016700:	4639      	mov	r1, r7
 8016702:	4622      	mov	r2, r4
 8016704:	4630      	mov	r0, r6
 8016706:	930c      	str	r3, [sp, #48]	; 0x30
 8016708:	f000 fcda 	bl	80170c0 <__pow5mult>
 801670c:	462a      	mov	r2, r5
 801670e:	4601      	mov	r1, r0
 8016710:	4607      	mov	r7, r0
 8016712:	4630      	mov	r0, r6
 8016714:	f000 fc2e 	bl	8016f74 <__multiply>
 8016718:	4629      	mov	r1, r5
 801671a:	900a      	str	r0, [sp, #40]	; 0x28
 801671c:	4630      	mov	r0, r6
 801671e:	f000 fb57 	bl	8016dd0 <_Bfree>
 8016722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016726:	4615      	mov	r5, r2
 8016728:	1b1a      	subs	r2, r3, r4
 801672a:	d004      	beq.n	8016736 <_dtoa_r+0x6e6>
 801672c:	4629      	mov	r1, r5
 801672e:	4630      	mov	r0, r6
 8016730:	f000 fcc6 	bl	80170c0 <__pow5mult>
 8016734:	4605      	mov	r5, r0
 8016736:	2101      	movs	r1, #1
 8016738:	4630      	mov	r0, r6
 801673a:	f000 fc05 	bl	8016f48 <__i2b>
 801673e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016740:	2b00      	cmp	r3, #0
 8016742:	4604      	mov	r4, r0
 8016744:	f340 8082 	ble.w	801684c <_dtoa_r+0x7fc>
 8016748:	461a      	mov	r2, r3
 801674a:	4601      	mov	r1, r0
 801674c:	4630      	mov	r0, r6
 801674e:	f000 fcb7 	bl	80170c0 <__pow5mult>
 8016752:	9b07      	ldr	r3, [sp, #28]
 8016754:	2b01      	cmp	r3, #1
 8016756:	4604      	mov	r4, r0
 8016758:	dd7b      	ble.n	8016852 <_dtoa_r+0x802>
 801675a:	2300      	movs	r3, #0
 801675c:	930a      	str	r3, [sp, #40]	; 0x28
 801675e:	6922      	ldr	r2, [r4, #16]
 8016760:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016764:	6910      	ldr	r0, [r2, #16]
 8016766:	f000 fb9f 	bl	8016ea8 <__hi0bits>
 801676a:	f1c0 0020 	rsb	r0, r0, #32
 801676e:	9b06      	ldr	r3, [sp, #24]
 8016770:	4418      	add	r0, r3
 8016772:	f010 001f 	ands.w	r0, r0, #31
 8016776:	f000 808d 	beq.w	8016894 <_dtoa_r+0x844>
 801677a:	f1c0 0220 	rsb	r2, r0, #32
 801677e:	2a04      	cmp	r2, #4
 8016780:	f340 8086 	ble.w	8016890 <_dtoa_r+0x840>
 8016784:	f1c0 001c 	rsb	r0, r0, #28
 8016788:	9b05      	ldr	r3, [sp, #20]
 801678a:	4403      	add	r3, r0
 801678c:	9305      	str	r3, [sp, #20]
 801678e:	9b06      	ldr	r3, [sp, #24]
 8016790:	4403      	add	r3, r0
 8016792:	4480      	add	r8, r0
 8016794:	9306      	str	r3, [sp, #24]
 8016796:	9b05      	ldr	r3, [sp, #20]
 8016798:	2b00      	cmp	r3, #0
 801679a:	dd05      	ble.n	80167a8 <_dtoa_r+0x758>
 801679c:	4629      	mov	r1, r5
 801679e:	461a      	mov	r2, r3
 80167a0:	4630      	mov	r0, r6
 80167a2:	f000 fce7 	bl	8017174 <__lshift>
 80167a6:	4605      	mov	r5, r0
 80167a8:	9b06      	ldr	r3, [sp, #24]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	dd05      	ble.n	80167ba <_dtoa_r+0x76a>
 80167ae:	4621      	mov	r1, r4
 80167b0:	461a      	mov	r2, r3
 80167b2:	4630      	mov	r0, r6
 80167b4:	f000 fcde 	bl	8017174 <__lshift>
 80167b8:	4604      	mov	r4, r0
 80167ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d06b      	beq.n	8016898 <_dtoa_r+0x848>
 80167c0:	4621      	mov	r1, r4
 80167c2:	4628      	mov	r0, r5
 80167c4:	f000 fd42 	bl	801724c <__mcmp>
 80167c8:	2800      	cmp	r0, #0
 80167ca:	da65      	bge.n	8016898 <_dtoa_r+0x848>
 80167cc:	2300      	movs	r3, #0
 80167ce:	4629      	mov	r1, r5
 80167d0:	220a      	movs	r2, #10
 80167d2:	4630      	mov	r0, r6
 80167d4:	f000 fb1e 	bl	8016e14 <__multadd>
 80167d8:	9b08      	ldr	r3, [sp, #32]
 80167da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80167de:	4605      	mov	r5, r0
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	f000 8192 	beq.w	8016b0a <_dtoa_r+0xaba>
 80167e6:	4639      	mov	r1, r7
 80167e8:	2300      	movs	r3, #0
 80167ea:	220a      	movs	r2, #10
 80167ec:	4630      	mov	r0, r6
 80167ee:	f000 fb11 	bl	8016e14 <__multadd>
 80167f2:	f1ba 0f00 	cmp.w	sl, #0
 80167f6:	4607      	mov	r7, r0
 80167f8:	f300 808e 	bgt.w	8016918 <_dtoa_r+0x8c8>
 80167fc:	9b07      	ldr	r3, [sp, #28]
 80167fe:	2b02      	cmp	r3, #2
 8016800:	dc51      	bgt.n	80168a6 <_dtoa_r+0x856>
 8016802:	e089      	b.n	8016918 <_dtoa_r+0x8c8>
 8016804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016806:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801680a:	e751      	b.n	80166b0 <_dtoa_r+0x660>
 801680c:	f109 34ff 	add.w	r4, r9, #4294967295
 8016810:	42a3      	cmp	r3, r4
 8016812:	bfbf      	itttt	lt
 8016814:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8016816:	1ae3      	sublt	r3, r4, r3
 8016818:	18d2      	addlt	r2, r2, r3
 801681a:	4613      	movlt	r3, r2
 801681c:	bfb7      	itett	lt
 801681e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016820:	1b1c      	subge	r4, r3, r4
 8016822:	4623      	movlt	r3, r4
 8016824:	2400      	movlt	r4, #0
 8016826:	f1b9 0f00 	cmp.w	r9, #0
 801682a:	bfb5      	itete	lt
 801682c:	9a05      	ldrlt	r2, [sp, #20]
 801682e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8016832:	eba2 0809 	sublt.w	r8, r2, r9
 8016836:	464a      	movge	r2, r9
 8016838:	bfb8      	it	lt
 801683a:	2200      	movlt	r2, #0
 801683c:	e73b      	b.n	80166b6 <_dtoa_r+0x666>
 801683e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016842:	9f08      	ldr	r7, [sp, #32]
 8016844:	461c      	mov	r4, r3
 8016846:	e743      	b.n	80166d0 <_dtoa_r+0x680>
 8016848:	461a      	mov	r2, r3
 801684a:	e76f      	b.n	801672c <_dtoa_r+0x6dc>
 801684c:	9b07      	ldr	r3, [sp, #28]
 801684e:	2b01      	cmp	r3, #1
 8016850:	dc18      	bgt.n	8016884 <_dtoa_r+0x834>
 8016852:	9b02      	ldr	r3, [sp, #8]
 8016854:	b9b3      	cbnz	r3, 8016884 <_dtoa_r+0x834>
 8016856:	9b03      	ldr	r3, [sp, #12]
 8016858:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801685c:	b9a2      	cbnz	r2, 8016888 <_dtoa_r+0x838>
 801685e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016862:	0d12      	lsrs	r2, r2, #20
 8016864:	0512      	lsls	r2, r2, #20
 8016866:	b18a      	cbz	r2, 801688c <_dtoa_r+0x83c>
 8016868:	9b05      	ldr	r3, [sp, #20]
 801686a:	3301      	adds	r3, #1
 801686c:	9305      	str	r3, [sp, #20]
 801686e:	9b06      	ldr	r3, [sp, #24]
 8016870:	3301      	adds	r3, #1
 8016872:	9306      	str	r3, [sp, #24]
 8016874:	2301      	movs	r3, #1
 8016876:	930a      	str	r3, [sp, #40]	; 0x28
 8016878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801687a:	2b00      	cmp	r3, #0
 801687c:	f47f af6f 	bne.w	801675e <_dtoa_r+0x70e>
 8016880:	2001      	movs	r0, #1
 8016882:	e774      	b.n	801676e <_dtoa_r+0x71e>
 8016884:	2300      	movs	r3, #0
 8016886:	e7f6      	b.n	8016876 <_dtoa_r+0x826>
 8016888:	9b02      	ldr	r3, [sp, #8]
 801688a:	e7f4      	b.n	8016876 <_dtoa_r+0x826>
 801688c:	920a      	str	r2, [sp, #40]	; 0x28
 801688e:	e7f3      	b.n	8016878 <_dtoa_r+0x828>
 8016890:	d081      	beq.n	8016796 <_dtoa_r+0x746>
 8016892:	4610      	mov	r0, r2
 8016894:	301c      	adds	r0, #28
 8016896:	e777      	b.n	8016788 <_dtoa_r+0x738>
 8016898:	f1b9 0f00 	cmp.w	r9, #0
 801689c:	dc37      	bgt.n	801690e <_dtoa_r+0x8be>
 801689e:	9b07      	ldr	r3, [sp, #28]
 80168a0:	2b02      	cmp	r3, #2
 80168a2:	dd34      	ble.n	801690e <_dtoa_r+0x8be>
 80168a4:	46ca      	mov	sl, r9
 80168a6:	f1ba 0f00 	cmp.w	sl, #0
 80168aa:	d10d      	bne.n	80168c8 <_dtoa_r+0x878>
 80168ac:	4621      	mov	r1, r4
 80168ae:	4653      	mov	r3, sl
 80168b0:	2205      	movs	r2, #5
 80168b2:	4630      	mov	r0, r6
 80168b4:	f000 faae 	bl	8016e14 <__multadd>
 80168b8:	4601      	mov	r1, r0
 80168ba:	4604      	mov	r4, r0
 80168bc:	4628      	mov	r0, r5
 80168be:	f000 fcc5 	bl	801724c <__mcmp>
 80168c2:	2800      	cmp	r0, #0
 80168c4:	f73f adde 	bgt.w	8016484 <_dtoa_r+0x434>
 80168c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168ca:	f8dd 8000 	ldr.w	r8, [sp]
 80168ce:	ea6f 0b03 	mvn.w	fp, r3
 80168d2:	f04f 0900 	mov.w	r9, #0
 80168d6:	4621      	mov	r1, r4
 80168d8:	4630      	mov	r0, r6
 80168da:	f000 fa79 	bl	8016dd0 <_Bfree>
 80168de:	2f00      	cmp	r7, #0
 80168e0:	f43f aea7 	beq.w	8016632 <_dtoa_r+0x5e2>
 80168e4:	f1b9 0f00 	cmp.w	r9, #0
 80168e8:	d005      	beq.n	80168f6 <_dtoa_r+0x8a6>
 80168ea:	45b9      	cmp	r9, r7
 80168ec:	d003      	beq.n	80168f6 <_dtoa_r+0x8a6>
 80168ee:	4649      	mov	r1, r9
 80168f0:	4630      	mov	r0, r6
 80168f2:	f000 fa6d 	bl	8016dd0 <_Bfree>
 80168f6:	4639      	mov	r1, r7
 80168f8:	4630      	mov	r0, r6
 80168fa:	f000 fa69 	bl	8016dd0 <_Bfree>
 80168fe:	e698      	b.n	8016632 <_dtoa_r+0x5e2>
 8016900:	2400      	movs	r4, #0
 8016902:	4627      	mov	r7, r4
 8016904:	e7e0      	b.n	80168c8 <_dtoa_r+0x878>
 8016906:	46bb      	mov	fp, r7
 8016908:	4604      	mov	r4, r0
 801690a:	4607      	mov	r7, r0
 801690c:	e5ba      	b.n	8016484 <_dtoa_r+0x434>
 801690e:	9b08      	ldr	r3, [sp, #32]
 8016910:	46ca      	mov	sl, r9
 8016912:	2b00      	cmp	r3, #0
 8016914:	f000 8100 	beq.w	8016b18 <_dtoa_r+0xac8>
 8016918:	f1b8 0f00 	cmp.w	r8, #0
 801691c:	dd05      	ble.n	801692a <_dtoa_r+0x8da>
 801691e:	4639      	mov	r1, r7
 8016920:	4642      	mov	r2, r8
 8016922:	4630      	mov	r0, r6
 8016924:	f000 fc26 	bl	8017174 <__lshift>
 8016928:	4607      	mov	r7, r0
 801692a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801692c:	2b00      	cmp	r3, #0
 801692e:	d05d      	beq.n	80169ec <_dtoa_r+0x99c>
 8016930:	6879      	ldr	r1, [r7, #4]
 8016932:	4630      	mov	r0, r6
 8016934:	f000 fa0c 	bl	8016d50 <_Balloc>
 8016938:	4680      	mov	r8, r0
 801693a:	b928      	cbnz	r0, 8016948 <_dtoa_r+0x8f8>
 801693c:	4b82      	ldr	r3, [pc, #520]	; (8016b48 <_dtoa_r+0xaf8>)
 801693e:	4602      	mov	r2, r0
 8016940:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016944:	f7ff bb9a 	b.w	801607c <_dtoa_r+0x2c>
 8016948:	693a      	ldr	r2, [r7, #16]
 801694a:	3202      	adds	r2, #2
 801694c:	0092      	lsls	r2, r2, #2
 801694e:	f107 010c 	add.w	r1, r7, #12
 8016952:	300c      	adds	r0, #12
 8016954:	f7fe fc19 	bl	801518a <memcpy>
 8016958:	2201      	movs	r2, #1
 801695a:	4641      	mov	r1, r8
 801695c:	4630      	mov	r0, r6
 801695e:	f000 fc09 	bl	8017174 <__lshift>
 8016962:	9b00      	ldr	r3, [sp, #0]
 8016964:	3301      	adds	r3, #1
 8016966:	9305      	str	r3, [sp, #20]
 8016968:	9b00      	ldr	r3, [sp, #0]
 801696a:	4453      	add	r3, sl
 801696c:	9309      	str	r3, [sp, #36]	; 0x24
 801696e:	9b02      	ldr	r3, [sp, #8]
 8016970:	f003 0301 	and.w	r3, r3, #1
 8016974:	46b9      	mov	r9, r7
 8016976:	9308      	str	r3, [sp, #32]
 8016978:	4607      	mov	r7, r0
 801697a:	9b05      	ldr	r3, [sp, #20]
 801697c:	4621      	mov	r1, r4
 801697e:	3b01      	subs	r3, #1
 8016980:	4628      	mov	r0, r5
 8016982:	9302      	str	r3, [sp, #8]
 8016984:	f7ff fad6 	bl	8015f34 <quorem>
 8016988:	4603      	mov	r3, r0
 801698a:	3330      	adds	r3, #48	; 0x30
 801698c:	9006      	str	r0, [sp, #24]
 801698e:	4649      	mov	r1, r9
 8016990:	4628      	mov	r0, r5
 8016992:	930a      	str	r3, [sp, #40]	; 0x28
 8016994:	f000 fc5a 	bl	801724c <__mcmp>
 8016998:	463a      	mov	r2, r7
 801699a:	4682      	mov	sl, r0
 801699c:	4621      	mov	r1, r4
 801699e:	4630      	mov	r0, r6
 80169a0:	f000 fc70 	bl	8017284 <__mdiff>
 80169a4:	68c2      	ldr	r2, [r0, #12]
 80169a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169a8:	4680      	mov	r8, r0
 80169aa:	bb0a      	cbnz	r2, 80169f0 <_dtoa_r+0x9a0>
 80169ac:	4601      	mov	r1, r0
 80169ae:	4628      	mov	r0, r5
 80169b0:	f000 fc4c 	bl	801724c <__mcmp>
 80169b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169b6:	4602      	mov	r2, r0
 80169b8:	4641      	mov	r1, r8
 80169ba:	4630      	mov	r0, r6
 80169bc:	920e      	str	r2, [sp, #56]	; 0x38
 80169be:	930a      	str	r3, [sp, #40]	; 0x28
 80169c0:	f000 fa06 	bl	8016dd0 <_Bfree>
 80169c4:	9b07      	ldr	r3, [sp, #28]
 80169c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80169c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80169cc:	ea43 0102 	orr.w	r1, r3, r2
 80169d0:	9b08      	ldr	r3, [sp, #32]
 80169d2:	430b      	orrs	r3, r1
 80169d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169d6:	d10d      	bne.n	80169f4 <_dtoa_r+0x9a4>
 80169d8:	2b39      	cmp	r3, #57	; 0x39
 80169da:	d029      	beq.n	8016a30 <_dtoa_r+0x9e0>
 80169dc:	f1ba 0f00 	cmp.w	sl, #0
 80169e0:	dd01      	ble.n	80169e6 <_dtoa_r+0x996>
 80169e2:	9b06      	ldr	r3, [sp, #24]
 80169e4:	3331      	adds	r3, #49	; 0x31
 80169e6:	9a02      	ldr	r2, [sp, #8]
 80169e8:	7013      	strb	r3, [r2, #0]
 80169ea:	e774      	b.n	80168d6 <_dtoa_r+0x886>
 80169ec:	4638      	mov	r0, r7
 80169ee:	e7b8      	b.n	8016962 <_dtoa_r+0x912>
 80169f0:	2201      	movs	r2, #1
 80169f2:	e7e1      	b.n	80169b8 <_dtoa_r+0x968>
 80169f4:	f1ba 0f00 	cmp.w	sl, #0
 80169f8:	db06      	blt.n	8016a08 <_dtoa_r+0x9b8>
 80169fa:	9907      	ldr	r1, [sp, #28]
 80169fc:	ea41 0a0a 	orr.w	sl, r1, sl
 8016a00:	9908      	ldr	r1, [sp, #32]
 8016a02:	ea5a 0101 	orrs.w	r1, sl, r1
 8016a06:	d120      	bne.n	8016a4a <_dtoa_r+0x9fa>
 8016a08:	2a00      	cmp	r2, #0
 8016a0a:	ddec      	ble.n	80169e6 <_dtoa_r+0x996>
 8016a0c:	4629      	mov	r1, r5
 8016a0e:	2201      	movs	r2, #1
 8016a10:	4630      	mov	r0, r6
 8016a12:	9305      	str	r3, [sp, #20]
 8016a14:	f000 fbae 	bl	8017174 <__lshift>
 8016a18:	4621      	mov	r1, r4
 8016a1a:	4605      	mov	r5, r0
 8016a1c:	f000 fc16 	bl	801724c <__mcmp>
 8016a20:	2800      	cmp	r0, #0
 8016a22:	9b05      	ldr	r3, [sp, #20]
 8016a24:	dc02      	bgt.n	8016a2c <_dtoa_r+0x9dc>
 8016a26:	d1de      	bne.n	80169e6 <_dtoa_r+0x996>
 8016a28:	07da      	lsls	r2, r3, #31
 8016a2a:	d5dc      	bpl.n	80169e6 <_dtoa_r+0x996>
 8016a2c:	2b39      	cmp	r3, #57	; 0x39
 8016a2e:	d1d8      	bne.n	80169e2 <_dtoa_r+0x992>
 8016a30:	9a02      	ldr	r2, [sp, #8]
 8016a32:	2339      	movs	r3, #57	; 0x39
 8016a34:	7013      	strb	r3, [r2, #0]
 8016a36:	4643      	mov	r3, r8
 8016a38:	4698      	mov	r8, r3
 8016a3a:	3b01      	subs	r3, #1
 8016a3c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8016a40:	2a39      	cmp	r2, #57	; 0x39
 8016a42:	d051      	beq.n	8016ae8 <_dtoa_r+0xa98>
 8016a44:	3201      	adds	r2, #1
 8016a46:	701a      	strb	r2, [r3, #0]
 8016a48:	e745      	b.n	80168d6 <_dtoa_r+0x886>
 8016a4a:	2a00      	cmp	r2, #0
 8016a4c:	dd03      	ble.n	8016a56 <_dtoa_r+0xa06>
 8016a4e:	2b39      	cmp	r3, #57	; 0x39
 8016a50:	d0ee      	beq.n	8016a30 <_dtoa_r+0x9e0>
 8016a52:	3301      	adds	r3, #1
 8016a54:	e7c7      	b.n	80169e6 <_dtoa_r+0x996>
 8016a56:	9a05      	ldr	r2, [sp, #20]
 8016a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a5a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016a5e:	428a      	cmp	r2, r1
 8016a60:	d02b      	beq.n	8016aba <_dtoa_r+0xa6a>
 8016a62:	4629      	mov	r1, r5
 8016a64:	2300      	movs	r3, #0
 8016a66:	220a      	movs	r2, #10
 8016a68:	4630      	mov	r0, r6
 8016a6a:	f000 f9d3 	bl	8016e14 <__multadd>
 8016a6e:	45b9      	cmp	r9, r7
 8016a70:	4605      	mov	r5, r0
 8016a72:	f04f 0300 	mov.w	r3, #0
 8016a76:	f04f 020a 	mov.w	r2, #10
 8016a7a:	4649      	mov	r1, r9
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	d107      	bne.n	8016a90 <_dtoa_r+0xa40>
 8016a80:	f000 f9c8 	bl	8016e14 <__multadd>
 8016a84:	4681      	mov	r9, r0
 8016a86:	4607      	mov	r7, r0
 8016a88:	9b05      	ldr	r3, [sp, #20]
 8016a8a:	3301      	adds	r3, #1
 8016a8c:	9305      	str	r3, [sp, #20]
 8016a8e:	e774      	b.n	801697a <_dtoa_r+0x92a>
 8016a90:	f000 f9c0 	bl	8016e14 <__multadd>
 8016a94:	4639      	mov	r1, r7
 8016a96:	4681      	mov	r9, r0
 8016a98:	2300      	movs	r3, #0
 8016a9a:	220a      	movs	r2, #10
 8016a9c:	4630      	mov	r0, r6
 8016a9e:	f000 f9b9 	bl	8016e14 <__multadd>
 8016aa2:	4607      	mov	r7, r0
 8016aa4:	e7f0      	b.n	8016a88 <_dtoa_r+0xa38>
 8016aa6:	f1ba 0f00 	cmp.w	sl, #0
 8016aaa:	9a00      	ldr	r2, [sp, #0]
 8016aac:	bfcc      	ite	gt
 8016aae:	46d0      	movgt	r8, sl
 8016ab0:	f04f 0801 	movle.w	r8, #1
 8016ab4:	4490      	add	r8, r2
 8016ab6:	f04f 0900 	mov.w	r9, #0
 8016aba:	4629      	mov	r1, r5
 8016abc:	2201      	movs	r2, #1
 8016abe:	4630      	mov	r0, r6
 8016ac0:	9302      	str	r3, [sp, #8]
 8016ac2:	f000 fb57 	bl	8017174 <__lshift>
 8016ac6:	4621      	mov	r1, r4
 8016ac8:	4605      	mov	r5, r0
 8016aca:	f000 fbbf 	bl	801724c <__mcmp>
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	dcb1      	bgt.n	8016a36 <_dtoa_r+0x9e6>
 8016ad2:	d102      	bne.n	8016ada <_dtoa_r+0xa8a>
 8016ad4:	9b02      	ldr	r3, [sp, #8]
 8016ad6:	07db      	lsls	r3, r3, #31
 8016ad8:	d4ad      	bmi.n	8016a36 <_dtoa_r+0x9e6>
 8016ada:	4643      	mov	r3, r8
 8016adc:	4698      	mov	r8, r3
 8016ade:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016ae2:	2a30      	cmp	r2, #48	; 0x30
 8016ae4:	d0fa      	beq.n	8016adc <_dtoa_r+0xa8c>
 8016ae6:	e6f6      	b.n	80168d6 <_dtoa_r+0x886>
 8016ae8:	9a00      	ldr	r2, [sp, #0]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d1a4      	bne.n	8016a38 <_dtoa_r+0x9e8>
 8016aee:	f10b 0b01 	add.w	fp, fp, #1
 8016af2:	2331      	movs	r3, #49	; 0x31
 8016af4:	e778      	b.n	80169e8 <_dtoa_r+0x998>
 8016af6:	4b15      	ldr	r3, [pc, #84]	; (8016b4c <_dtoa_r+0xafc>)
 8016af8:	f7ff bb12 	b.w	8016120 <_dtoa_r+0xd0>
 8016afc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	f47f aaee 	bne.w	80160e0 <_dtoa_r+0x90>
 8016b04:	4b12      	ldr	r3, [pc, #72]	; (8016b50 <_dtoa_r+0xb00>)
 8016b06:	f7ff bb0b 	b.w	8016120 <_dtoa_r+0xd0>
 8016b0a:	f1ba 0f00 	cmp.w	sl, #0
 8016b0e:	dc03      	bgt.n	8016b18 <_dtoa_r+0xac8>
 8016b10:	9b07      	ldr	r3, [sp, #28]
 8016b12:	2b02      	cmp	r3, #2
 8016b14:	f73f aec7 	bgt.w	80168a6 <_dtoa_r+0x856>
 8016b18:	f8dd 8000 	ldr.w	r8, [sp]
 8016b1c:	4621      	mov	r1, r4
 8016b1e:	4628      	mov	r0, r5
 8016b20:	f7ff fa08 	bl	8015f34 <quorem>
 8016b24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016b28:	f808 3b01 	strb.w	r3, [r8], #1
 8016b2c:	9a00      	ldr	r2, [sp, #0]
 8016b2e:	eba8 0202 	sub.w	r2, r8, r2
 8016b32:	4592      	cmp	sl, r2
 8016b34:	ddb7      	ble.n	8016aa6 <_dtoa_r+0xa56>
 8016b36:	4629      	mov	r1, r5
 8016b38:	2300      	movs	r3, #0
 8016b3a:	220a      	movs	r2, #10
 8016b3c:	4630      	mov	r0, r6
 8016b3e:	f000 f969 	bl	8016e14 <__multadd>
 8016b42:	4605      	mov	r5, r0
 8016b44:	e7ea      	b.n	8016b1c <_dtoa_r+0xacc>
 8016b46:	bf00      	nop
 8016b48:	08023625 	.word	0x08023625
 8016b4c:	080233e0 	.word	0x080233e0
 8016b50:	080235b9 	.word	0x080235b9

08016b54 <__sflush_r>:
 8016b54:	898a      	ldrh	r2, [r1, #12]
 8016b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b5a:	4605      	mov	r5, r0
 8016b5c:	0710      	lsls	r0, r2, #28
 8016b5e:	460c      	mov	r4, r1
 8016b60:	d458      	bmi.n	8016c14 <__sflush_r+0xc0>
 8016b62:	684b      	ldr	r3, [r1, #4]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	dc05      	bgt.n	8016b74 <__sflush_r+0x20>
 8016b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	dc02      	bgt.n	8016b74 <__sflush_r+0x20>
 8016b6e:	2000      	movs	r0, #0
 8016b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b76:	2e00      	cmp	r6, #0
 8016b78:	d0f9      	beq.n	8016b6e <__sflush_r+0x1a>
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016b80:	682f      	ldr	r7, [r5, #0]
 8016b82:	602b      	str	r3, [r5, #0]
 8016b84:	d032      	beq.n	8016bec <__sflush_r+0x98>
 8016b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016b88:	89a3      	ldrh	r3, [r4, #12]
 8016b8a:	075a      	lsls	r2, r3, #29
 8016b8c:	d505      	bpl.n	8016b9a <__sflush_r+0x46>
 8016b8e:	6863      	ldr	r3, [r4, #4]
 8016b90:	1ac0      	subs	r0, r0, r3
 8016b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016b94:	b10b      	cbz	r3, 8016b9a <__sflush_r+0x46>
 8016b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016b98:	1ac0      	subs	r0, r0, r3
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	4602      	mov	r2, r0
 8016b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ba0:	6a21      	ldr	r1, [r4, #32]
 8016ba2:	4628      	mov	r0, r5
 8016ba4:	47b0      	blx	r6
 8016ba6:	1c43      	adds	r3, r0, #1
 8016ba8:	89a3      	ldrh	r3, [r4, #12]
 8016baa:	d106      	bne.n	8016bba <__sflush_r+0x66>
 8016bac:	6829      	ldr	r1, [r5, #0]
 8016bae:	291d      	cmp	r1, #29
 8016bb0:	d82c      	bhi.n	8016c0c <__sflush_r+0xb8>
 8016bb2:	4a2a      	ldr	r2, [pc, #168]	; (8016c5c <__sflush_r+0x108>)
 8016bb4:	40ca      	lsrs	r2, r1
 8016bb6:	07d6      	lsls	r6, r2, #31
 8016bb8:	d528      	bpl.n	8016c0c <__sflush_r+0xb8>
 8016bba:	2200      	movs	r2, #0
 8016bbc:	6062      	str	r2, [r4, #4]
 8016bbe:	04d9      	lsls	r1, r3, #19
 8016bc0:	6922      	ldr	r2, [r4, #16]
 8016bc2:	6022      	str	r2, [r4, #0]
 8016bc4:	d504      	bpl.n	8016bd0 <__sflush_r+0x7c>
 8016bc6:	1c42      	adds	r2, r0, #1
 8016bc8:	d101      	bne.n	8016bce <__sflush_r+0x7a>
 8016bca:	682b      	ldr	r3, [r5, #0]
 8016bcc:	b903      	cbnz	r3, 8016bd0 <__sflush_r+0x7c>
 8016bce:	6560      	str	r0, [r4, #84]	; 0x54
 8016bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016bd2:	602f      	str	r7, [r5, #0]
 8016bd4:	2900      	cmp	r1, #0
 8016bd6:	d0ca      	beq.n	8016b6e <__sflush_r+0x1a>
 8016bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016bdc:	4299      	cmp	r1, r3
 8016bde:	d002      	beq.n	8016be6 <__sflush_r+0x92>
 8016be0:	4628      	mov	r0, r5
 8016be2:	f000 fc43 	bl	801746c <_free_r>
 8016be6:	2000      	movs	r0, #0
 8016be8:	6360      	str	r0, [r4, #52]	; 0x34
 8016bea:	e7c1      	b.n	8016b70 <__sflush_r+0x1c>
 8016bec:	6a21      	ldr	r1, [r4, #32]
 8016bee:	2301      	movs	r3, #1
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	47b0      	blx	r6
 8016bf4:	1c41      	adds	r1, r0, #1
 8016bf6:	d1c7      	bne.n	8016b88 <__sflush_r+0x34>
 8016bf8:	682b      	ldr	r3, [r5, #0]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d0c4      	beq.n	8016b88 <__sflush_r+0x34>
 8016bfe:	2b1d      	cmp	r3, #29
 8016c00:	d001      	beq.n	8016c06 <__sflush_r+0xb2>
 8016c02:	2b16      	cmp	r3, #22
 8016c04:	d101      	bne.n	8016c0a <__sflush_r+0xb6>
 8016c06:	602f      	str	r7, [r5, #0]
 8016c08:	e7b1      	b.n	8016b6e <__sflush_r+0x1a>
 8016c0a:	89a3      	ldrh	r3, [r4, #12]
 8016c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c10:	81a3      	strh	r3, [r4, #12]
 8016c12:	e7ad      	b.n	8016b70 <__sflush_r+0x1c>
 8016c14:	690f      	ldr	r7, [r1, #16]
 8016c16:	2f00      	cmp	r7, #0
 8016c18:	d0a9      	beq.n	8016b6e <__sflush_r+0x1a>
 8016c1a:	0793      	lsls	r3, r2, #30
 8016c1c:	680e      	ldr	r6, [r1, #0]
 8016c1e:	bf08      	it	eq
 8016c20:	694b      	ldreq	r3, [r1, #20]
 8016c22:	600f      	str	r7, [r1, #0]
 8016c24:	bf18      	it	ne
 8016c26:	2300      	movne	r3, #0
 8016c28:	eba6 0807 	sub.w	r8, r6, r7
 8016c2c:	608b      	str	r3, [r1, #8]
 8016c2e:	f1b8 0f00 	cmp.w	r8, #0
 8016c32:	dd9c      	ble.n	8016b6e <__sflush_r+0x1a>
 8016c34:	6a21      	ldr	r1, [r4, #32]
 8016c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016c38:	4643      	mov	r3, r8
 8016c3a:	463a      	mov	r2, r7
 8016c3c:	4628      	mov	r0, r5
 8016c3e:	47b0      	blx	r6
 8016c40:	2800      	cmp	r0, #0
 8016c42:	dc06      	bgt.n	8016c52 <__sflush_r+0xfe>
 8016c44:	89a3      	ldrh	r3, [r4, #12]
 8016c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c4a:	81a3      	strh	r3, [r4, #12]
 8016c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8016c50:	e78e      	b.n	8016b70 <__sflush_r+0x1c>
 8016c52:	4407      	add	r7, r0
 8016c54:	eba8 0800 	sub.w	r8, r8, r0
 8016c58:	e7e9      	b.n	8016c2e <__sflush_r+0xda>
 8016c5a:	bf00      	nop
 8016c5c:	20400001 	.word	0x20400001

08016c60 <_fflush_r>:
 8016c60:	b538      	push	{r3, r4, r5, lr}
 8016c62:	690b      	ldr	r3, [r1, #16]
 8016c64:	4605      	mov	r5, r0
 8016c66:	460c      	mov	r4, r1
 8016c68:	b913      	cbnz	r3, 8016c70 <_fflush_r+0x10>
 8016c6a:	2500      	movs	r5, #0
 8016c6c:	4628      	mov	r0, r5
 8016c6e:	bd38      	pop	{r3, r4, r5, pc}
 8016c70:	b118      	cbz	r0, 8016c7a <_fflush_r+0x1a>
 8016c72:	6983      	ldr	r3, [r0, #24]
 8016c74:	b90b      	cbnz	r3, 8016c7a <_fflush_r+0x1a>
 8016c76:	f7fe f9c3 	bl	8015000 <__sinit>
 8016c7a:	4b14      	ldr	r3, [pc, #80]	; (8016ccc <_fflush_r+0x6c>)
 8016c7c:	429c      	cmp	r4, r3
 8016c7e:	d11b      	bne.n	8016cb8 <_fflush_r+0x58>
 8016c80:	686c      	ldr	r4, [r5, #4]
 8016c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d0ef      	beq.n	8016c6a <_fflush_r+0xa>
 8016c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016c8c:	07d0      	lsls	r0, r2, #31
 8016c8e:	d404      	bmi.n	8016c9a <_fflush_r+0x3a>
 8016c90:	0599      	lsls	r1, r3, #22
 8016c92:	d402      	bmi.n	8016c9a <_fflush_r+0x3a>
 8016c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c96:	f7fe fa76 	bl	8015186 <__retarget_lock_acquire_recursive>
 8016c9a:	4628      	mov	r0, r5
 8016c9c:	4621      	mov	r1, r4
 8016c9e:	f7ff ff59 	bl	8016b54 <__sflush_r>
 8016ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ca4:	07da      	lsls	r2, r3, #31
 8016ca6:	4605      	mov	r5, r0
 8016ca8:	d4e0      	bmi.n	8016c6c <_fflush_r+0xc>
 8016caa:	89a3      	ldrh	r3, [r4, #12]
 8016cac:	059b      	lsls	r3, r3, #22
 8016cae:	d4dd      	bmi.n	8016c6c <_fflush_r+0xc>
 8016cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cb2:	f7fe fa69 	bl	8015188 <__retarget_lock_release_recursive>
 8016cb6:	e7d9      	b.n	8016c6c <_fflush_r+0xc>
 8016cb8:	4b05      	ldr	r3, [pc, #20]	; (8016cd0 <_fflush_r+0x70>)
 8016cba:	429c      	cmp	r4, r3
 8016cbc:	d101      	bne.n	8016cc2 <_fflush_r+0x62>
 8016cbe:	68ac      	ldr	r4, [r5, #8]
 8016cc0:	e7df      	b.n	8016c82 <_fflush_r+0x22>
 8016cc2:	4b04      	ldr	r3, [pc, #16]	; (8016cd4 <_fflush_r+0x74>)
 8016cc4:	429c      	cmp	r4, r3
 8016cc6:	bf08      	it	eq
 8016cc8:	68ec      	ldreq	r4, [r5, #12]
 8016cca:	e7da      	b.n	8016c82 <_fflush_r+0x22>
 8016ccc:	0802338c 	.word	0x0802338c
 8016cd0:	080233ac 	.word	0x080233ac
 8016cd4:	0802336c 	.word	0x0802336c

08016cd8 <fiprintf>:
 8016cd8:	b40e      	push	{r1, r2, r3}
 8016cda:	b503      	push	{r0, r1, lr}
 8016cdc:	4601      	mov	r1, r0
 8016cde:	ab03      	add	r3, sp, #12
 8016ce0:	4805      	ldr	r0, [pc, #20]	; (8016cf8 <fiprintf+0x20>)
 8016ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ce6:	6800      	ldr	r0, [r0, #0]
 8016ce8:	9301      	str	r3, [sp, #4]
 8016cea:	f000 fd95 	bl	8017818 <_vfiprintf_r>
 8016cee:	b002      	add	sp, #8
 8016cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016cf4:	b003      	add	sp, #12
 8016cf6:	4770      	bx	lr
 8016cf8:	2400025c 	.word	0x2400025c

08016cfc <_localeconv_r>:
 8016cfc:	4800      	ldr	r0, [pc, #0]	; (8016d00 <_localeconv_r+0x4>)
 8016cfe:	4770      	bx	lr
 8016d00:	240003b0 	.word	0x240003b0

08016d04 <_lseek_r>:
 8016d04:	b538      	push	{r3, r4, r5, lr}
 8016d06:	4d07      	ldr	r5, [pc, #28]	; (8016d24 <_lseek_r+0x20>)
 8016d08:	4604      	mov	r4, r0
 8016d0a:	4608      	mov	r0, r1
 8016d0c:	4611      	mov	r1, r2
 8016d0e:	2200      	movs	r2, #0
 8016d10:	602a      	str	r2, [r5, #0]
 8016d12:	461a      	mov	r2, r3
 8016d14:	f7eb fb8c 	bl	8002430 <_lseek>
 8016d18:	1c43      	adds	r3, r0, #1
 8016d1a:	d102      	bne.n	8016d22 <_lseek_r+0x1e>
 8016d1c:	682b      	ldr	r3, [r5, #0]
 8016d1e:	b103      	cbz	r3, 8016d22 <_lseek_r+0x1e>
 8016d20:	6023      	str	r3, [r4, #0]
 8016d22:	bd38      	pop	{r3, r4, r5, pc}
 8016d24:	24006ad4 	.word	0x24006ad4

08016d28 <malloc>:
 8016d28:	4b02      	ldr	r3, [pc, #8]	; (8016d34 <malloc+0xc>)
 8016d2a:	4601      	mov	r1, r0
 8016d2c:	6818      	ldr	r0, [r3, #0]
 8016d2e:	f7fe ba43 	b.w	80151b8 <_malloc_r>
 8016d32:	bf00      	nop
 8016d34:	2400025c 	.word	0x2400025c

08016d38 <__malloc_lock>:
 8016d38:	4801      	ldr	r0, [pc, #4]	; (8016d40 <__malloc_lock+0x8>)
 8016d3a:	f7fe ba24 	b.w	8015186 <__retarget_lock_acquire_recursive>
 8016d3e:	bf00      	nop
 8016d40:	24006acc 	.word	0x24006acc

08016d44 <__malloc_unlock>:
 8016d44:	4801      	ldr	r0, [pc, #4]	; (8016d4c <__malloc_unlock+0x8>)
 8016d46:	f7fe ba1f 	b.w	8015188 <__retarget_lock_release_recursive>
 8016d4a:	bf00      	nop
 8016d4c:	24006acc 	.word	0x24006acc

08016d50 <_Balloc>:
 8016d50:	b570      	push	{r4, r5, r6, lr}
 8016d52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016d54:	4604      	mov	r4, r0
 8016d56:	460d      	mov	r5, r1
 8016d58:	b976      	cbnz	r6, 8016d78 <_Balloc+0x28>
 8016d5a:	2010      	movs	r0, #16
 8016d5c:	f7ff ffe4 	bl	8016d28 <malloc>
 8016d60:	4602      	mov	r2, r0
 8016d62:	6260      	str	r0, [r4, #36]	; 0x24
 8016d64:	b920      	cbnz	r0, 8016d70 <_Balloc+0x20>
 8016d66:	4b18      	ldr	r3, [pc, #96]	; (8016dc8 <_Balloc+0x78>)
 8016d68:	4818      	ldr	r0, [pc, #96]	; (8016dcc <_Balloc+0x7c>)
 8016d6a:	2166      	movs	r1, #102	; 0x66
 8016d6c:	f7ff f8b4 	bl	8015ed8 <__assert_func>
 8016d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016d74:	6006      	str	r6, [r0, #0]
 8016d76:	60c6      	str	r6, [r0, #12]
 8016d78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016d7a:	68f3      	ldr	r3, [r6, #12]
 8016d7c:	b183      	cbz	r3, 8016da0 <_Balloc+0x50>
 8016d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d80:	68db      	ldr	r3, [r3, #12]
 8016d82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016d86:	b9b8      	cbnz	r0, 8016db8 <_Balloc+0x68>
 8016d88:	2101      	movs	r1, #1
 8016d8a:	fa01 f605 	lsl.w	r6, r1, r5
 8016d8e:	1d72      	adds	r2, r6, #5
 8016d90:	0092      	lsls	r2, r2, #2
 8016d92:	4620      	mov	r0, r4
 8016d94:	f000 fb5a 	bl	801744c <_calloc_r>
 8016d98:	b160      	cbz	r0, 8016db4 <_Balloc+0x64>
 8016d9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016d9e:	e00e      	b.n	8016dbe <_Balloc+0x6e>
 8016da0:	2221      	movs	r2, #33	; 0x21
 8016da2:	2104      	movs	r1, #4
 8016da4:	4620      	mov	r0, r4
 8016da6:	f000 fb51 	bl	801744c <_calloc_r>
 8016daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dac:	60f0      	str	r0, [r6, #12]
 8016dae:	68db      	ldr	r3, [r3, #12]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d1e4      	bne.n	8016d7e <_Balloc+0x2e>
 8016db4:	2000      	movs	r0, #0
 8016db6:	bd70      	pop	{r4, r5, r6, pc}
 8016db8:	6802      	ldr	r2, [r0, #0]
 8016dba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016dc4:	e7f7      	b.n	8016db6 <_Balloc+0x66>
 8016dc6:	bf00      	nop
 8016dc8:	08023404 	.word	0x08023404
 8016dcc:	08023636 	.word	0x08023636

08016dd0 <_Bfree>:
 8016dd0:	b570      	push	{r4, r5, r6, lr}
 8016dd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016dd4:	4605      	mov	r5, r0
 8016dd6:	460c      	mov	r4, r1
 8016dd8:	b976      	cbnz	r6, 8016df8 <_Bfree+0x28>
 8016dda:	2010      	movs	r0, #16
 8016ddc:	f7ff ffa4 	bl	8016d28 <malloc>
 8016de0:	4602      	mov	r2, r0
 8016de2:	6268      	str	r0, [r5, #36]	; 0x24
 8016de4:	b920      	cbnz	r0, 8016df0 <_Bfree+0x20>
 8016de6:	4b09      	ldr	r3, [pc, #36]	; (8016e0c <_Bfree+0x3c>)
 8016de8:	4809      	ldr	r0, [pc, #36]	; (8016e10 <_Bfree+0x40>)
 8016dea:	218a      	movs	r1, #138	; 0x8a
 8016dec:	f7ff f874 	bl	8015ed8 <__assert_func>
 8016df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016df4:	6006      	str	r6, [r0, #0]
 8016df6:	60c6      	str	r6, [r0, #12]
 8016df8:	b13c      	cbz	r4, 8016e0a <_Bfree+0x3a>
 8016dfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016dfc:	6862      	ldr	r2, [r4, #4]
 8016dfe:	68db      	ldr	r3, [r3, #12]
 8016e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016e04:	6021      	str	r1, [r4, #0]
 8016e06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016e0a:	bd70      	pop	{r4, r5, r6, pc}
 8016e0c:	08023404 	.word	0x08023404
 8016e10:	08023636 	.word	0x08023636

08016e14 <__multadd>:
 8016e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e18:	690e      	ldr	r6, [r1, #16]
 8016e1a:	4607      	mov	r7, r0
 8016e1c:	4698      	mov	r8, r3
 8016e1e:	460c      	mov	r4, r1
 8016e20:	f101 0014 	add.w	r0, r1, #20
 8016e24:	2300      	movs	r3, #0
 8016e26:	6805      	ldr	r5, [r0, #0]
 8016e28:	b2a9      	uxth	r1, r5
 8016e2a:	fb02 8101 	mla	r1, r2, r1, r8
 8016e2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8016e32:	0c2d      	lsrs	r5, r5, #16
 8016e34:	fb02 c505 	mla	r5, r2, r5, ip
 8016e38:	b289      	uxth	r1, r1
 8016e3a:	3301      	adds	r3, #1
 8016e3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016e40:	429e      	cmp	r6, r3
 8016e42:	f840 1b04 	str.w	r1, [r0], #4
 8016e46:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016e4a:	dcec      	bgt.n	8016e26 <__multadd+0x12>
 8016e4c:	f1b8 0f00 	cmp.w	r8, #0
 8016e50:	d022      	beq.n	8016e98 <__multadd+0x84>
 8016e52:	68a3      	ldr	r3, [r4, #8]
 8016e54:	42b3      	cmp	r3, r6
 8016e56:	dc19      	bgt.n	8016e8c <__multadd+0x78>
 8016e58:	6861      	ldr	r1, [r4, #4]
 8016e5a:	4638      	mov	r0, r7
 8016e5c:	3101      	adds	r1, #1
 8016e5e:	f7ff ff77 	bl	8016d50 <_Balloc>
 8016e62:	4605      	mov	r5, r0
 8016e64:	b928      	cbnz	r0, 8016e72 <__multadd+0x5e>
 8016e66:	4602      	mov	r2, r0
 8016e68:	4b0d      	ldr	r3, [pc, #52]	; (8016ea0 <__multadd+0x8c>)
 8016e6a:	480e      	ldr	r0, [pc, #56]	; (8016ea4 <__multadd+0x90>)
 8016e6c:	21b5      	movs	r1, #181	; 0xb5
 8016e6e:	f7ff f833 	bl	8015ed8 <__assert_func>
 8016e72:	6922      	ldr	r2, [r4, #16]
 8016e74:	3202      	adds	r2, #2
 8016e76:	f104 010c 	add.w	r1, r4, #12
 8016e7a:	0092      	lsls	r2, r2, #2
 8016e7c:	300c      	adds	r0, #12
 8016e7e:	f7fe f984 	bl	801518a <memcpy>
 8016e82:	4621      	mov	r1, r4
 8016e84:	4638      	mov	r0, r7
 8016e86:	f7ff ffa3 	bl	8016dd0 <_Bfree>
 8016e8a:	462c      	mov	r4, r5
 8016e8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016e90:	3601      	adds	r6, #1
 8016e92:	f8c3 8014 	str.w	r8, [r3, #20]
 8016e96:	6126      	str	r6, [r4, #16]
 8016e98:	4620      	mov	r0, r4
 8016e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e9e:	bf00      	nop
 8016ea0:	08023625 	.word	0x08023625
 8016ea4:	08023636 	.word	0x08023636

08016ea8 <__hi0bits>:
 8016ea8:	0c03      	lsrs	r3, r0, #16
 8016eaa:	041b      	lsls	r3, r3, #16
 8016eac:	b9d3      	cbnz	r3, 8016ee4 <__hi0bits+0x3c>
 8016eae:	0400      	lsls	r0, r0, #16
 8016eb0:	2310      	movs	r3, #16
 8016eb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016eb6:	bf04      	itt	eq
 8016eb8:	0200      	lsleq	r0, r0, #8
 8016eba:	3308      	addeq	r3, #8
 8016ebc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016ec0:	bf04      	itt	eq
 8016ec2:	0100      	lsleq	r0, r0, #4
 8016ec4:	3304      	addeq	r3, #4
 8016ec6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016eca:	bf04      	itt	eq
 8016ecc:	0080      	lsleq	r0, r0, #2
 8016ece:	3302      	addeq	r3, #2
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	db05      	blt.n	8016ee0 <__hi0bits+0x38>
 8016ed4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016ed8:	f103 0301 	add.w	r3, r3, #1
 8016edc:	bf08      	it	eq
 8016ede:	2320      	moveq	r3, #32
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	4770      	bx	lr
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	e7e4      	b.n	8016eb2 <__hi0bits+0xa>

08016ee8 <__lo0bits>:
 8016ee8:	6803      	ldr	r3, [r0, #0]
 8016eea:	f013 0207 	ands.w	r2, r3, #7
 8016eee:	4601      	mov	r1, r0
 8016ef0:	d00b      	beq.n	8016f0a <__lo0bits+0x22>
 8016ef2:	07da      	lsls	r2, r3, #31
 8016ef4:	d424      	bmi.n	8016f40 <__lo0bits+0x58>
 8016ef6:	0798      	lsls	r0, r3, #30
 8016ef8:	bf49      	itett	mi
 8016efa:	085b      	lsrmi	r3, r3, #1
 8016efc:	089b      	lsrpl	r3, r3, #2
 8016efe:	2001      	movmi	r0, #1
 8016f00:	600b      	strmi	r3, [r1, #0]
 8016f02:	bf5c      	itt	pl
 8016f04:	600b      	strpl	r3, [r1, #0]
 8016f06:	2002      	movpl	r0, #2
 8016f08:	4770      	bx	lr
 8016f0a:	b298      	uxth	r0, r3
 8016f0c:	b9b0      	cbnz	r0, 8016f3c <__lo0bits+0x54>
 8016f0e:	0c1b      	lsrs	r3, r3, #16
 8016f10:	2010      	movs	r0, #16
 8016f12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016f16:	bf04      	itt	eq
 8016f18:	0a1b      	lsreq	r3, r3, #8
 8016f1a:	3008      	addeq	r0, #8
 8016f1c:	071a      	lsls	r2, r3, #28
 8016f1e:	bf04      	itt	eq
 8016f20:	091b      	lsreq	r3, r3, #4
 8016f22:	3004      	addeq	r0, #4
 8016f24:	079a      	lsls	r2, r3, #30
 8016f26:	bf04      	itt	eq
 8016f28:	089b      	lsreq	r3, r3, #2
 8016f2a:	3002      	addeq	r0, #2
 8016f2c:	07da      	lsls	r2, r3, #31
 8016f2e:	d403      	bmi.n	8016f38 <__lo0bits+0x50>
 8016f30:	085b      	lsrs	r3, r3, #1
 8016f32:	f100 0001 	add.w	r0, r0, #1
 8016f36:	d005      	beq.n	8016f44 <__lo0bits+0x5c>
 8016f38:	600b      	str	r3, [r1, #0]
 8016f3a:	4770      	bx	lr
 8016f3c:	4610      	mov	r0, r2
 8016f3e:	e7e8      	b.n	8016f12 <__lo0bits+0x2a>
 8016f40:	2000      	movs	r0, #0
 8016f42:	4770      	bx	lr
 8016f44:	2020      	movs	r0, #32
 8016f46:	4770      	bx	lr

08016f48 <__i2b>:
 8016f48:	b510      	push	{r4, lr}
 8016f4a:	460c      	mov	r4, r1
 8016f4c:	2101      	movs	r1, #1
 8016f4e:	f7ff feff 	bl	8016d50 <_Balloc>
 8016f52:	4602      	mov	r2, r0
 8016f54:	b928      	cbnz	r0, 8016f62 <__i2b+0x1a>
 8016f56:	4b05      	ldr	r3, [pc, #20]	; (8016f6c <__i2b+0x24>)
 8016f58:	4805      	ldr	r0, [pc, #20]	; (8016f70 <__i2b+0x28>)
 8016f5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016f5e:	f7fe ffbb 	bl	8015ed8 <__assert_func>
 8016f62:	2301      	movs	r3, #1
 8016f64:	6144      	str	r4, [r0, #20]
 8016f66:	6103      	str	r3, [r0, #16]
 8016f68:	bd10      	pop	{r4, pc}
 8016f6a:	bf00      	nop
 8016f6c:	08023625 	.word	0x08023625
 8016f70:	08023636 	.word	0x08023636

08016f74 <__multiply>:
 8016f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f78:	4614      	mov	r4, r2
 8016f7a:	690a      	ldr	r2, [r1, #16]
 8016f7c:	6923      	ldr	r3, [r4, #16]
 8016f7e:	429a      	cmp	r2, r3
 8016f80:	bfb8      	it	lt
 8016f82:	460b      	movlt	r3, r1
 8016f84:	460d      	mov	r5, r1
 8016f86:	bfbc      	itt	lt
 8016f88:	4625      	movlt	r5, r4
 8016f8a:	461c      	movlt	r4, r3
 8016f8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016f90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016f94:	68ab      	ldr	r3, [r5, #8]
 8016f96:	6869      	ldr	r1, [r5, #4]
 8016f98:	eb0a 0709 	add.w	r7, sl, r9
 8016f9c:	42bb      	cmp	r3, r7
 8016f9e:	b085      	sub	sp, #20
 8016fa0:	bfb8      	it	lt
 8016fa2:	3101      	addlt	r1, #1
 8016fa4:	f7ff fed4 	bl	8016d50 <_Balloc>
 8016fa8:	b930      	cbnz	r0, 8016fb8 <__multiply+0x44>
 8016faa:	4602      	mov	r2, r0
 8016fac:	4b42      	ldr	r3, [pc, #264]	; (80170b8 <__multiply+0x144>)
 8016fae:	4843      	ldr	r0, [pc, #268]	; (80170bc <__multiply+0x148>)
 8016fb0:	f240 115d 	movw	r1, #349	; 0x15d
 8016fb4:	f7fe ff90 	bl	8015ed8 <__assert_func>
 8016fb8:	f100 0614 	add.w	r6, r0, #20
 8016fbc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016fc0:	4633      	mov	r3, r6
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	4543      	cmp	r3, r8
 8016fc6:	d31e      	bcc.n	8017006 <__multiply+0x92>
 8016fc8:	f105 0c14 	add.w	ip, r5, #20
 8016fcc:	f104 0314 	add.w	r3, r4, #20
 8016fd0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016fd4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016fd8:	9202      	str	r2, [sp, #8]
 8016fda:	ebac 0205 	sub.w	r2, ip, r5
 8016fde:	3a15      	subs	r2, #21
 8016fe0:	f022 0203 	bic.w	r2, r2, #3
 8016fe4:	3204      	adds	r2, #4
 8016fe6:	f105 0115 	add.w	r1, r5, #21
 8016fea:	458c      	cmp	ip, r1
 8016fec:	bf38      	it	cc
 8016fee:	2204      	movcc	r2, #4
 8016ff0:	9201      	str	r2, [sp, #4]
 8016ff2:	9a02      	ldr	r2, [sp, #8]
 8016ff4:	9303      	str	r3, [sp, #12]
 8016ff6:	429a      	cmp	r2, r3
 8016ff8:	d808      	bhi.n	801700c <__multiply+0x98>
 8016ffa:	2f00      	cmp	r7, #0
 8016ffc:	dc55      	bgt.n	80170aa <__multiply+0x136>
 8016ffe:	6107      	str	r7, [r0, #16]
 8017000:	b005      	add	sp, #20
 8017002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017006:	f843 2b04 	str.w	r2, [r3], #4
 801700a:	e7db      	b.n	8016fc4 <__multiply+0x50>
 801700c:	f8b3 a000 	ldrh.w	sl, [r3]
 8017010:	f1ba 0f00 	cmp.w	sl, #0
 8017014:	d020      	beq.n	8017058 <__multiply+0xe4>
 8017016:	f105 0e14 	add.w	lr, r5, #20
 801701a:	46b1      	mov	r9, r6
 801701c:	2200      	movs	r2, #0
 801701e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8017022:	f8d9 b000 	ldr.w	fp, [r9]
 8017026:	b2a1      	uxth	r1, r4
 8017028:	fa1f fb8b 	uxth.w	fp, fp
 801702c:	fb0a b101 	mla	r1, sl, r1, fp
 8017030:	4411      	add	r1, r2
 8017032:	f8d9 2000 	ldr.w	r2, [r9]
 8017036:	0c24      	lsrs	r4, r4, #16
 8017038:	0c12      	lsrs	r2, r2, #16
 801703a:	fb0a 2404 	mla	r4, sl, r4, r2
 801703e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8017042:	b289      	uxth	r1, r1
 8017044:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8017048:	45f4      	cmp	ip, lr
 801704a:	f849 1b04 	str.w	r1, [r9], #4
 801704e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8017052:	d8e4      	bhi.n	801701e <__multiply+0xaa>
 8017054:	9901      	ldr	r1, [sp, #4]
 8017056:	5072      	str	r2, [r6, r1]
 8017058:	9a03      	ldr	r2, [sp, #12]
 801705a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801705e:	3304      	adds	r3, #4
 8017060:	f1b9 0f00 	cmp.w	r9, #0
 8017064:	d01f      	beq.n	80170a6 <__multiply+0x132>
 8017066:	6834      	ldr	r4, [r6, #0]
 8017068:	f105 0114 	add.w	r1, r5, #20
 801706c:	46b6      	mov	lr, r6
 801706e:	f04f 0a00 	mov.w	sl, #0
 8017072:	880a      	ldrh	r2, [r1, #0]
 8017074:	f8be b002 	ldrh.w	fp, [lr, #2]
 8017078:	fb09 b202 	mla	r2, r9, r2, fp
 801707c:	4492      	add	sl, r2
 801707e:	b2a4      	uxth	r4, r4
 8017080:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8017084:	f84e 4b04 	str.w	r4, [lr], #4
 8017088:	f851 4b04 	ldr.w	r4, [r1], #4
 801708c:	f8be 2000 	ldrh.w	r2, [lr]
 8017090:	0c24      	lsrs	r4, r4, #16
 8017092:	fb09 2404 	mla	r4, r9, r4, r2
 8017096:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801709a:	458c      	cmp	ip, r1
 801709c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80170a0:	d8e7      	bhi.n	8017072 <__multiply+0xfe>
 80170a2:	9a01      	ldr	r2, [sp, #4]
 80170a4:	50b4      	str	r4, [r6, r2]
 80170a6:	3604      	adds	r6, #4
 80170a8:	e7a3      	b.n	8016ff2 <__multiply+0x7e>
 80170aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d1a5      	bne.n	8016ffe <__multiply+0x8a>
 80170b2:	3f01      	subs	r7, #1
 80170b4:	e7a1      	b.n	8016ffa <__multiply+0x86>
 80170b6:	bf00      	nop
 80170b8:	08023625 	.word	0x08023625
 80170bc:	08023636 	.word	0x08023636

080170c0 <__pow5mult>:
 80170c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170c4:	4615      	mov	r5, r2
 80170c6:	f012 0203 	ands.w	r2, r2, #3
 80170ca:	4606      	mov	r6, r0
 80170cc:	460f      	mov	r7, r1
 80170ce:	d007      	beq.n	80170e0 <__pow5mult+0x20>
 80170d0:	4c25      	ldr	r4, [pc, #148]	; (8017168 <__pow5mult+0xa8>)
 80170d2:	3a01      	subs	r2, #1
 80170d4:	2300      	movs	r3, #0
 80170d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80170da:	f7ff fe9b 	bl	8016e14 <__multadd>
 80170de:	4607      	mov	r7, r0
 80170e0:	10ad      	asrs	r5, r5, #2
 80170e2:	d03d      	beq.n	8017160 <__pow5mult+0xa0>
 80170e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80170e6:	b97c      	cbnz	r4, 8017108 <__pow5mult+0x48>
 80170e8:	2010      	movs	r0, #16
 80170ea:	f7ff fe1d 	bl	8016d28 <malloc>
 80170ee:	4602      	mov	r2, r0
 80170f0:	6270      	str	r0, [r6, #36]	; 0x24
 80170f2:	b928      	cbnz	r0, 8017100 <__pow5mult+0x40>
 80170f4:	4b1d      	ldr	r3, [pc, #116]	; (801716c <__pow5mult+0xac>)
 80170f6:	481e      	ldr	r0, [pc, #120]	; (8017170 <__pow5mult+0xb0>)
 80170f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80170fc:	f7fe feec 	bl	8015ed8 <__assert_func>
 8017100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017104:	6004      	str	r4, [r0, #0]
 8017106:	60c4      	str	r4, [r0, #12]
 8017108:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801710c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017110:	b94c      	cbnz	r4, 8017126 <__pow5mult+0x66>
 8017112:	f240 2171 	movw	r1, #625	; 0x271
 8017116:	4630      	mov	r0, r6
 8017118:	f7ff ff16 	bl	8016f48 <__i2b>
 801711c:	2300      	movs	r3, #0
 801711e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017122:	4604      	mov	r4, r0
 8017124:	6003      	str	r3, [r0, #0]
 8017126:	f04f 0900 	mov.w	r9, #0
 801712a:	07eb      	lsls	r3, r5, #31
 801712c:	d50a      	bpl.n	8017144 <__pow5mult+0x84>
 801712e:	4639      	mov	r1, r7
 8017130:	4622      	mov	r2, r4
 8017132:	4630      	mov	r0, r6
 8017134:	f7ff ff1e 	bl	8016f74 <__multiply>
 8017138:	4639      	mov	r1, r7
 801713a:	4680      	mov	r8, r0
 801713c:	4630      	mov	r0, r6
 801713e:	f7ff fe47 	bl	8016dd0 <_Bfree>
 8017142:	4647      	mov	r7, r8
 8017144:	106d      	asrs	r5, r5, #1
 8017146:	d00b      	beq.n	8017160 <__pow5mult+0xa0>
 8017148:	6820      	ldr	r0, [r4, #0]
 801714a:	b938      	cbnz	r0, 801715c <__pow5mult+0x9c>
 801714c:	4622      	mov	r2, r4
 801714e:	4621      	mov	r1, r4
 8017150:	4630      	mov	r0, r6
 8017152:	f7ff ff0f 	bl	8016f74 <__multiply>
 8017156:	6020      	str	r0, [r4, #0]
 8017158:	f8c0 9000 	str.w	r9, [r0]
 801715c:	4604      	mov	r4, r0
 801715e:	e7e4      	b.n	801712a <__pow5mult+0x6a>
 8017160:	4638      	mov	r0, r7
 8017162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017166:	bf00      	nop
 8017168:	08023788 	.word	0x08023788
 801716c:	08023404 	.word	0x08023404
 8017170:	08023636 	.word	0x08023636

08017174 <__lshift>:
 8017174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017178:	460c      	mov	r4, r1
 801717a:	6849      	ldr	r1, [r1, #4]
 801717c:	6923      	ldr	r3, [r4, #16]
 801717e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017182:	68a3      	ldr	r3, [r4, #8]
 8017184:	4607      	mov	r7, r0
 8017186:	4691      	mov	r9, r2
 8017188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801718c:	f108 0601 	add.w	r6, r8, #1
 8017190:	42b3      	cmp	r3, r6
 8017192:	db0b      	blt.n	80171ac <__lshift+0x38>
 8017194:	4638      	mov	r0, r7
 8017196:	f7ff fddb 	bl	8016d50 <_Balloc>
 801719a:	4605      	mov	r5, r0
 801719c:	b948      	cbnz	r0, 80171b2 <__lshift+0x3e>
 801719e:	4602      	mov	r2, r0
 80171a0:	4b28      	ldr	r3, [pc, #160]	; (8017244 <__lshift+0xd0>)
 80171a2:	4829      	ldr	r0, [pc, #164]	; (8017248 <__lshift+0xd4>)
 80171a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80171a8:	f7fe fe96 	bl	8015ed8 <__assert_func>
 80171ac:	3101      	adds	r1, #1
 80171ae:	005b      	lsls	r3, r3, #1
 80171b0:	e7ee      	b.n	8017190 <__lshift+0x1c>
 80171b2:	2300      	movs	r3, #0
 80171b4:	f100 0114 	add.w	r1, r0, #20
 80171b8:	f100 0210 	add.w	r2, r0, #16
 80171bc:	4618      	mov	r0, r3
 80171be:	4553      	cmp	r3, sl
 80171c0:	db33      	blt.n	801722a <__lshift+0xb6>
 80171c2:	6920      	ldr	r0, [r4, #16]
 80171c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80171c8:	f104 0314 	add.w	r3, r4, #20
 80171cc:	f019 091f 	ands.w	r9, r9, #31
 80171d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80171d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80171d8:	d02b      	beq.n	8017232 <__lshift+0xbe>
 80171da:	f1c9 0e20 	rsb	lr, r9, #32
 80171de:	468a      	mov	sl, r1
 80171e0:	2200      	movs	r2, #0
 80171e2:	6818      	ldr	r0, [r3, #0]
 80171e4:	fa00 f009 	lsl.w	r0, r0, r9
 80171e8:	4302      	orrs	r2, r0
 80171ea:	f84a 2b04 	str.w	r2, [sl], #4
 80171ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80171f2:	459c      	cmp	ip, r3
 80171f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80171f8:	d8f3      	bhi.n	80171e2 <__lshift+0x6e>
 80171fa:	ebac 0304 	sub.w	r3, ip, r4
 80171fe:	3b15      	subs	r3, #21
 8017200:	f023 0303 	bic.w	r3, r3, #3
 8017204:	3304      	adds	r3, #4
 8017206:	f104 0015 	add.w	r0, r4, #21
 801720a:	4584      	cmp	ip, r0
 801720c:	bf38      	it	cc
 801720e:	2304      	movcc	r3, #4
 8017210:	50ca      	str	r2, [r1, r3]
 8017212:	b10a      	cbz	r2, 8017218 <__lshift+0xa4>
 8017214:	f108 0602 	add.w	r6, r8, #2
 8017218:	3e01      	subs	r6, #1
 801721a:	4638      	mov	r0, r7
 801721c:	612e      	str	r6, [r5, #16]
 801721e:	4621      	mov	r1, r4
 8017220:	f7ff fdd6 	bl	8016dd0 <_Bfree>
 8017224:	4628      	mov	r0, r5
 8017226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801722a:	f842 0f04 	str.w	r0, [r2, #4]!
 801722e:	3301      	adds	r3, #1
 8017230:	e7c5      	b.n	80171be <__lshift+0x4a>
 8017232:	3904      	subs	r1, #4
 8017234:	f853 2b04 	ldr.w	r2, [r3], #4
 8017238:	f841 2f04 	str.w	r2, [r1, #4]!
 801723c:	459c      	cmp	ip, r3
 801723e:	d8f9      	bhi.n	8017234 <__lshift+0xc0>
 8017240:	e7ea      	b.n	8017218 <__lshift+0xa4>
 8017242:	bf00      	nop
 8017244:	08023625 	.word	0x08023625
 8017248:	08023636 	.word	0x08023636

0801724c <__mcmp>:
 801724c:	b530      	push	{r4, r5, lr}
 801724e:	6902      	ldr	r2, [r0, #16]
 8017250:	690c      	ldr	r4, [r1, #16]
 8017252:	1b12      	subs	r2, r2, r4
 8017254:	d10e      	bne.n	8017274 <__mcmp+0x28>
 8017256:	f100 0314 	add.w	r3, r0, #20
 801725a:	3114      	adds	r1, #20
 801725c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017260:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017264:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017268:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801726c:	42a5      	cmp	r5, r4
 801726e:	d003      	beq.n	8017278 <__mcmp+0x2c>
 8017270:	d305      	bcc.n	801727e <__mcmp+0x32>
 8017272:	2201      	movs	r2, #1
 8017274:	4610      	mov	r0, r2
 8017276:	bd30      	pop	{r4, r5, pc}
 8017278:	4283      	cmp	r3, r0
 801727a:	d3f3      	bcc.n	8017264 <__mcmp+0x18>
 801727c:	e7fa      	b.n	8017274 <__mcmp+0x28>
 801727e:	f04f 32ff 	mov.w	r2, #4294967295
 8017282:	e7f7      	b.n	8017274 <__mcmp+0x28>

08017284 <__mdiff>:
 8017284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017288:	460c      	mov	r4, r1
 801728a:	4606      	mov	r6, r0
 801728c:	4611      	mov	r1, r2
 801728e:	4620      	mov	r0, r4
 8017290:	4617      	mov	r7, r2
 8017292:	f7ff ffdb 	bl	801724c <__mcmp>
 8017296:	1e05      	subs	r5, r0, #0
 8017298:	d110      	bne.n	80172bc <__mdiff+0x38>
 801729a:	4629      	mov	r1, r5
 801729c:	4630      	mov	r0, r6
 801729e:	f7ff fd57 	bl	8016d50 <_Balloc>
 80172a2:	b930      	cbnz	r0, 80172b2 <__mdiff+0x2e>
 80172a4:	4b39      	ldr	r3, [pc, #228]	; (801738c <__mdiff+0x108>)
 80172a6:	4602      	mov	r2, r0
 80172a8:	f240 2132 	movw	r1, #562	; 0x232
 80172ac:	4838      	ldr	r0, [pc, #224]	; (8017390 <__mdiff+0x10c>)
 80172ae:	f7fe fe13 	bl	8015ed8 <__assert_func>
 80172b2:	2301      	movs	r3, #1
 80172b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80172b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172bc:	bfa4      	itt	ge
 80172be:	463b      	movge	r3, r7
 80172c0:	4627      	movge	r7, r4
 80172c2:	4630      	mov	r0, r6
 80172c4:	6879      	ldr	r1, [r7, #4]
 80172c6:	bfa6      	itte	ge
 80172c8:	461c      	movge	r4, r3
 80172ca:	2500      	movge	r5, #0
 80172cc:	2501      	movlt	r5, #1
 80172ce:	f7ff fd3f 	bl	8016d50 <_Balloc>
 80172d2:	b920      	cbnz	r0, 80172de <__mdiff+0x5a>
 80172d4:	4b2d      	ldr	r3, [pc, #180]	; (801738c <__mdiff+0x108>)
 80172d6:	4602      	mov	r2, r0
 80172d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80172dc:	e7e6      	b.n	80172ac <__mdiff+0x28>
 80172de:	693e      	ldr	r6, [r7, #16]
 80172e0:	60c5      	str	r5, [r0, #12]
 80172e2:	6925      	ldr	r5, [r4, #16]
 80172e4:	f107 0114 	add.w	r1, r7, #20
 80172e8:	f104 0914 	add.w	r9, r4, #20
 80172ec:	f100 0e14 	add.w	lr, r0, #20
 80172f0:	f107 0210 	add.w	r2, r7, #16
 80172f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80172f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80172fc:	46f2      	mov	sl, lr
 80172fe:	2700      	movs	r7, #0
 8017300:	f859 3b04 	ldr.w	r3, [r9], #4
 8017304:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017308:	fa1f f883 	uxth.w	r8, r3
 801730c:	fa17 f78b 	uxtah	r7, r7, fp
 8017310:	0c1b      	lsrs	r3, r3, #16
 8017312:	eba7 0808 	sub.w	r8, r7, r8
 8017316:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801731a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801731e:	fa1f f888 	uxth.w	r8, r8
 8017322:	141f      	asrs	r7, r3, #16
 8017324:	454d      	cmp	r5, r9
 8017326:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801732a:	f84a 3b04 	str.w	r3, [sl], #4
 801732e:	d8e7      	bhi.n	8017300 <__mdiff+0x7c>
 8017330:	1b2b      	subs	r3, r5, r4
 8017332:	3b15      	subs	r3, #21
 8017334:	f023 0303 	bic.w	r3, r3, #3
 8017338:	3304      	adds	r3, #4
 801733a:	3415      	adds	r4, #21
 801733c:	42a5      	cmp	r5, r4
 801733e:	bf38      	it	cc
 8017340:	2304      	movcc	r3, #4
 8017342:	4419      	add	r1, r3
 8017344:	4473      	add	r3, lr
 8017346:	469e      	mov	lr, r3
 8017348:	460d      	mov	r5, r1
 801734a:	4565      	cmp	r5, ip
 801734c:	d30e      	bcc.n	801736c <__mdiff+0xe8>
 801734e:	f10c 0203 	add.w	r2, ip, #3
 8017352:	1a52      	subs	r2, r2, r1
 8017354:	f022 0203 	bic.w	r2, r2, #3
 8017358:	3903      	subs	r1, #3
 801735a:	458c      	cmp	ip, r1
 801735c:	bf38      	it	cc
 801735e:	2200      	movcc	r2, #0
 8017360:	441a      	add	r2, r3
 8017362:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017366:	b17b      	cbz	r3, 8017388 <__mdiff+0x104>
 8017368:	6106      	str	r6, [r0, #16]
 801736a:	e7a5      	b.n	80172b8 <__mdiff+0x34>
 801736c:	f855 8b04 	ldr.w	r8, [r5], #4
 8017370:	fa17 f488 	uxtah	r4, r7, r8
 8017374:	1422      	asrs	r2, r4, #16
 8017376:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801737a:	b2a4      	uxth	r4, r4
 801737c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8017380:	f84e 4b04 	str.w	r4, [lr], #4
 8017384:	1417      	asrs	r7, r2, #16
 8017386:	e7e0      	b.n	801734a <__mdiff+0xc6>
 8017388:	3e01      	subs	r6, #1
 801738a:	e7ea      	b.n	8017362 <__mdiff+0xde>
 801738c:	08023625 	.word	0x08023625
 8017390:	08023636 	.word	0x08023636

08017394 <__d2b>:
 8017394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017398:	4689      	mov	r9, r1
 801739a:	2101      	movs	r1, #1
 801739c:	ec57 6b10 	vmov	r6, r7, d0
 80173a0:	4690      	mov	r8, r2
 80173a2:	f7ff fcd5 	bl	8016d50 <_Balloc>
 80173a6:	4604      	mov	r4, r0
 80173a8:	b930      	cbnz	r0, 80173b8 <__d2b+0x24>
 80173aa:	4602      	mov	r2, r0
 80173ac:	4b25      	ldr	r3, [pc, #148]	; (8017444 <__d2b+0xb0>)
 80173ae:	4826      	ldr	r0, [pc, #152]	; (8017448 <__d2b+0xb4>)
 80173b0:	f240 310a 	movw	r1, #778	; 0x30a
 80173b4:	f7fe fd90 	bl	8015ed8 <__assert_func>
 80173b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80173bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80173c0:	bb35      	cbnz	r5, 8017410 <__d2b+0x7c>
 80173c2:	2e00      	cmp	r6, #0
 80173c4:	9301      	str	r3, [sp, #4]
 80173c6:	d028      	beq.n	801741a <__d2b+0x86>
 80173c8:	4668      	mov	r0, sp
 80173ca:	9600      	str	r6, [sp, #0]
 80173cc:	f7ff fd8c 	bl	8016ee8 <__lo0bits>
 80173d0:	9900      	ldr	r1, [sp, #0]
 80173d2:	b300      	cbz	r0, 8017416 <__d2b+0x82>
 80173d4:	9a01      	ldr	r2, [sp, #4]
 80173d6:	f1c0 0320 	rsb	r3, r0, #32
 80173da:	fa02 f303 	lsl.w	r3, r2, r3
 80173de:	430b      	orrs	r3, r1
 80173e0:	40c2      	lsrs	r2, r0
 80173e2:	6163      	str	r3, [r4, #20]
 80173e4:	9201      	str	r2, [sp, #4]
 80173e6:	9b01      	ldr	r3, [sp, #4]
 80173e8:	61a3      	str	r3, [r4, #24]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	bf14      	ite	ne
 80173ee:	2202      	movne	r2, #2
 80173f0:	2201      	moveq	r2, #1
 80173f2:	6122      	str	r2, [r4, #16]
 80173f4:	b1d5      	cbz	r5, 801742c <__d2b+0x98>
 80173f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80173fa:	4405      	add	r5, r0
 80173fc:	f8c9 5000 	str.w	r5, [r9]
 8017400:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017404:	f8c8 0000 	str.w	r0, [r8]
 8017408:	4620      	mov	r0, r4
 801740a:	b003      	add	sp, #12
 801740c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017414:	e7d5      	b.n	80173c2 <__d2b+0x2e>
 8017416:	6161      	str	r1, [r4, #20]
 8017418:	e7e5      	b.n	80173e6 <__d2b+0x52>
 801741a:	a801      	add	r0, sp, #4
 801741c:	f7ff fd64 	bl	8016ee8 <__lo0bits>
 8017420:	9b01      	ldr	r3, [sp, #4]
 8017422:	6163      	str	r3, [r4, #20]
 8017424:	2201      	movs	r2, #1
 8017426:	6122      	str	r2, [r4, #16]
 8017428:	3020      	adds	r0, #32
 801742a:	e7e3      	b.n	80173f4 <__d2b+0x60>
 801742c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017430:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017434:	f8c9 0000 	str.w	r0, [r9]
 8017438:	6918      	ldr	r0, [r3, #16]
 801743a:	f7ff fd35 	bl	8016ea8 <__hi0bits>
 801743e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017442:	e7df      	b.n	8017404 <__d2b+0x70>
 8017444:	08023625 	.word	0x08023625
 8017448:	08023636 	.word	0x08023636

0801744c <_calloc_r>:
 801744c:	b513      	push	{r0, r1, r4, lr}
 801744e:	434a      	muls	r2, r1
 8017450:	4611      	mov	r1, r2
 8017452:	9201      	str	r2, [sp, #4]
 8017454:	f7fd feb0 	bl	80151b8 <_malloc_r>
 8017458:	4604      	mov	r4, r0
 801745a:	b118      	cbz	r0, 8017464 <_calloc_r+0x18>
 801745c:	9a01      	ldr	r2, [sp, #4]
 801745e:	2100      	movs	r1, #0
 8017460:	f7fd fea1 	bl	80151a6 <memset>
 8017464:	4620      	mov	r0, r4
 8017466:	b002      	add	sp, #8
 8017468:	bd10      	pop	{r4, pc}
	...

0801746c <_free_r>:
 801746c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801746e:	2900      	cmp	r1, #0
 8017470:	d048      	beq.n	8017504 <_free_r+0x98>
 8017472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017476:	9001      	str	r0, [sp, #4]
 8017478:	2b00      	cmp	r3, #0
 801747a:	f1a1 0404 	sub.w	r4, r1, #4
 801747e:	bfb8      	it	lt
 8017480:	18e4      	addlt	r4, r4, r3
 8017482:	f7ff fc59 	bl	8016d38 <__malloc_lock>
 8017486:	4a20      	ldr	r2, [pc, #128]	; (8017508 <_free_r+0x9c>)
 8017488:	9801      	ldr	r0, [sp, #4]
 801748a:	6813      	ldr	r3, [r2, #0]
 801748c:	4615      	mov	r5, r2
 801748e:	b933      	cbnz	r3, 801749e <_free_r+0x32>
 8017490:	6063      	str	r3, [r4, #4]
 8017492:	6014      	str	r4, [r2, #0]
 8017494:	b003      	add	sp, #12
 8017496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801749a:	f7ff bc53 	b.w	8016d44 <__malloc_unlock>
 801749e:	42a3      	cmp	r3, r4
 80174a0:	d90b      	bls.n	80174ba <_free_r+0x4e>
 80174a2:	6821      	ldr	r1, [r4, #0]
 80174a4:	1862      	adds	r2, r4, r1
 80174a6:	4293      	cmp	r3, r2
 80174a8:	bf04      	itt	eq
 80174aa:	681a      	ldreq	r2, [r3, #0]
 80174ac:	685b      	ldreq	r3, [r3, #4]
 80174ae:	6063      	str	r3, [r4, #4]
 80174b0:	bf04      	itt	eq
 80174b2:	1852      	addeq	r2, r2, r1
 80174b4:	6022      	streq	r2, [r4, #0]
 80174b6:	602c      	str	r4, [r5, #0]
 80174b8:	e7ec      	b.n	8017494 <_free_r+0x28>
 80174ba:	461a      	mov	r2, r3
 80174bc:	685b      	ldr	r3, [r3, #4]
 80174be:	b10b      	cbz	r3, 80174c4 <_free_r+0x58>
 80174c0:	42a3      	cmp	r3, r4
 80174c2:	d9fa      	bls.n	80174ba <_free_r+0x4e>
 80174c4:	6811      	ldr	r1, [r2, #0]
 80174c6:	1855      	adds	r5, r2, r1
 80174c8:	42a5      	cmp	r5, r4
 80174ca:	d10b      	bne.n	80174e4 <_free_r+0x78>
 80174cc:	6824      	ldr	r4, [r4, #0]
 80174ce:	4421      	add	r1, r4
 80174d0:	1854      	adds	r4, r2, r1
 80174d2:	42a3      	cmp	r3, r4
 80174d4:	6011      	str	r1, [r2, #0]
 80174d6:	d1dd      	bne.n	8017494 <_free_r+0x28>
 80174d8:	681c      	ldr	r4, [r3, #0]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	6053      	str	r3, [r2, #4]
 80174de:	4421      	add	r1, r4
 80174e0:	6011      	str	r1, [r2, #0]
 80174e2:	e7d7      	b.n	8017494 <_free_r+0x28>
 80174e4:	d902      	bls.n	80174ec <_free_r+0x80>
 80174e6:	230c      	movs	r3, #12
 80174e8:	6003      	str	r3, [r0, #0]
 80174ea:	e7d3      	b.n	8017494 <_free_r+0x28>
 80174ec:	6825      	ldr	r5, [r4, #0]
 80174ee:	1961      	adds	r1, r4, r5
 80174f0:	428b      	cmp	r3, r1
 80174f2:	bf04      	itt	eq
 80174f4:	6819      	ldreq	r1, [r3, #0]
 80174f6:	685b      	ldreq	r3, [r3, #4]
 80174f8:	6063      	str	r3, [r4, #4]
 80174fa:	bf04      	itt	eq
 80174fc:	1949      	addeq	r1, r1, r5
 80174fe:	6021      	streq	r1, [r4, #0]
 8017500:	6054      	str	r4, [r2, #4]
 8017502:	e7c7      	b.n	8017494 <_free_r+0x28>
 8017504:	b003      	add	sp, #12
 8017506:	bd30      	pop	{r4, r5, pc}
 8017508:	24004b84 	.word	0x24004b84

0801750c <__ssputs_r>:
 801750c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017510:	688e      	ldr	r6, [r1, #8]
 8017512:	429e      	cmp	r6, r3
 8017514:	4682      	mov	sl, r0
 8017516:	460c      	mov	r4, r1
 8017518:	4690      	mov	r8, r2
 801751a:	461f      	mov	r7, r3
 801751c:	d838      	bhi.n	8017590 <__ssputs_r+0x84>
 801751e:	898a      	ldrh	r2, [r1, #12]
 8017520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017524:	d032      	beq.n	801758c <__ssputs_r+0x80>
 8017526:	6825      	ldr	r5, [r4, #0]
 8017528:	6909      	ldr	r1, [r1, #16]
 801752a:	eba5 0901 	sub.w	r9, r5, r1
 801752e:	6965      	ldr	r5, [r4, #20]
 8017530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017538:	3301      	adds	r3, #1
 801753a:	444b      	add	r3, r9
 801753c:	106d      	asrs	r5, r5, #1
 801753e:	429d      	cmp	r5, r3
 8017540:	bf38      	it	cc
 8017542:	461d      	movcc	r5, r3
 8017544:	0553      	lsls	r3, r2, #21
 8017546:	d531      	bpl.n	80175ac <__ssputs_r+0xa0>
 8017548:	4629      	mov	r1, r5
 801754a:	f7fd fe35 	bl	80151b8 <_malloc_r>
 801754e:	4606      	mov	r6, r0
 8017550:	b950      	cbnz	r0, 8017568 <__ssputs_r+0x5c>
 8017552:	230c      	movs	r3, #12
 8017554:	f8ca 3000 	str.w	r3, [sl]
 8017558:	89a3      	ldrh	r3, [r4, #12]
 801755a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801755e:	81a3      	strh	r3, [r4, #12]
 8017560:	f04f 30ff 	mov.w	r0, #4294967295
 8017564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017568:	6921      	ldr	r1, [r4, #16]
 801756a:	464a      	mov	r2, r9
 801756c:	f7fd fe0d 	bl	801518a <memcpy>
 8017570:	89a3      	ldrh	r3, [r4, #12]
 8017572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801757a:	81a3      	strh	r3, [r4, #12]
 801757c:	6126      	str	r6, [r4, #16]
 801757e:	6165      	str	r5, [r4, #20]
 8017580:	444e      	add	r6, r9
 8017582:	eba5 0509 	sub.w	r5, r5, r9
 8017586:	6026      	str	r6, [r4, #0]
 8017588:	60a5      	str	r5, [r4, #8]
 801758a:	463e      	mov	r6, r7
 801758c:	42be      	cmp	r6, r7
 801758e:	d900      	bls.n	8017592 <__ssputs_r+0x86>
 8017590:	463e      	mov	r6, r7
 8017592:	4632      	mov	r2, r6
 8017594:	6820      	ldr	r0, [r4, #0]
 8017596:	4641      	mov	r1, r8
 8017598:	f000 fbbe 	bl	8017d18 <memmove>
 801759c:	68a3      	ldr	r3, [r4, #8]
 801759e:	6822      	ldr	r2, [r4, #0]
 80175a0:	1b9b      	subs	r3, r3, r6
 80175a2:	4432      	add	r2, r6
 80175a4:	60a3      	str	r3, [r4, #8]
 80175a6:	6022      	str	r2, [r4, #0]
 80175a8:	2000      	movs	r0, #0
 80175aa:	e7db      	b.n	8017564 <__ssputs_r+0x58>
 80175ac:	462a      	mov	r2, r5
 80175ae:	f000 fbcd 	bl	8017d4c <_realloc_r>
 80175b2:	4606      	mov	r6, r0
 80175b4:	2800      	cmp	r0, #0
 80175b6:	d1e1      	bne.n	801757c <__ssputs_r+0x70>
 80175b8:	6921      	ldr	r1, [r4, #16]
 80175ba:	4650      	mov	r0, sl
 80175bc:	f7ff ff56 	bl	801746c <_free_r>
 80175c0:	e7c7      	b.n	8017552 <__ssputs_r+0x46>
	...

080175c4 <_svfiprintf_r>:
 80175c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175c8:	4698      	mov	r8, r3
 80175ca:	898b      	ldrh	r3, [r1, #12]
 80175cc:	061b      	lsls	r3, r3, #24
 80175ce:	b09d      	sub	sp, #116	; 0x74
 80175d0:	4607      	mov	r7, r0
 80175d2:	460d      	mov	r5, r1
 80175d4:	4614      	mov	r4, r2
 80175d6:	d50e      	bpl.n	80175f6 <_svfiprintf_r+0x32>
 80175d8:	690b      	ldr	r3, [r1, #16]
 80175da:	b963      	cbnz	r3, 80175f6 <_svfiprintf_r+0x32>
 80175dc:	2140      	movs	r1, #64	; 0x40
 80175de:	f7fd fdeb 	bl	80151b8 <_malloc_r>
 80175e2:	6028      	str	r0, [r5, #0]
 80175e4:	6128      	str	r0, [r5, #16]
 80175e6:	b920      	cbnz	r0, 80175f2 <_svfiprintf_r+0x2e>
 80175e8:	230c      	movs	r3, #12
 80175ea:	603b      	str	r3, [r7, #0]
 80175ec:	f04f 30ff 	mov.w	r0, #4294967295
 80175f0:	e0d1      	b.n	8017796 <_svfiprintf_r+0x1d2>
 80175f2:	2340      	movs	r3, #64	; 0x40
 80175f4:	616b      	str	r3, [r5, #20]
 80175f6:	2300      	movs	r3, #0
 80175f8:	9309      	str	r3, [sp, #36]	; 0x24
 80175fa:	2320      	movs	r3, #32
 80175fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017600:	f8cd 800c 	str.w	r8, [sp, #12]
 8017604:	2330      	movs	r3, #48	; 0x30
 8017606:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80177b0 <_svfiprintf_r+0x1ec>
 801760a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801760e:	f04f 0901 	mov.w	r9, #1
 8017612:	4623      	mov	r3, r4
 8017614:	469a      	mov	sl, r3
 8017616:	f813 2b01 	ldrb.w	r2, [r3], #1
 801761a:	b10a      	cbz	r2, 8017620 <_svfiprintf_r+0x5c>
 801761c:	2a25      	cmp	r2, #37	; 0x25
 801761e:	d1f9      	bne.n	8017614 <_svfiprintf_r+0x50>
 8017620:	ebba 0b04 	subs.w	fp, sl, r4
 8017624:	d00b      	beq.n	801763e <_svfiprintf_r+0x7a>
 8017626:	465b      	mov	r3, fp
 8017628:	4622      	mov	r2, r4
 801762a:	4629      	mov	r1, r5
 801762c:	4638      	mov	r0, r7
 801762e:	f7ff ff6d 	bl	801750c <__ssputs_r>
 8017632:	3001      	adds	r0, #1
 8017634:	f000 80aa 	beq.w	801778c <_svfiprintf_r+0x1c8>
 8017638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801763a:	445a      	add	r2, fp
 801763c:	9209      	str	r2, [sp, #36]	; 0x24
 801763e:	f89a 3000 	ldrb.w	r3, [sl]
 8017642:	2b00      	cmp	r3, #0
 8017644:	f000 80a2 	beq.w	801778c <_svfiprintf_r+0x1c8>
 8017648:	2300      	movs	r3, #0
 801764a:	f04f 32ff 	mov.w	r2, #4294967295
 801764e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017652:	f10a 0a01 	add.w	sl, sl, #1
 8017656:	9304      	str	r3, [sp, #16]
 8017658:	9307      	str	r3, [sp, #28]
 801765a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801765e:	931a      	str	r3, [sp, #104]	; 0x68
 8017660:	4654      	mov	r4, sl
 8017662:	2205      	movs	r2, #5
 8017664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017668:	4851      	ldr	r0, [pc, #324]	; (80177b0 <_svfiprintf_r+0x1ec>)
 801766a:	f7e8 fe41 	bl	80002f0 <memchr>
 801766e:	9a04      	ldr	r2, [sp, #16]
 8017670:	b9d8      	cbnz	r0, 80176aa <_svfiprintf_r+0xe6>
 8017672:	06d0      	lsls	r0, r2, #27
 8017674:	bf44      	itt	mi
 8017676:	2320      	movmi	r3, #32
 8017678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801767c:	0711      	lsls	r1, r2, #28
 801767e:	bf44      	itt	mi
 8017680:	232b      	movmi	r3, #43	; 0x2b
 8017682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017686:	f89a 3000 	ldrb.w	r3, [sl]
 801768a:	2b2a      	cmp	r3, #42	; 0x2a
 801768c:	d015      	beq.n	80176ba <_svfiprintf_r+0xf6>
 801768e:	9a07      	ldr	r2, [sp, #28]
 8017690:	4654      	mov	r4, sl
 8017692:	2000      	movs	r0, #0
 8017694:	f04f 0c0a 	mov.w	ip, #10
 8017698:	4621      	mov	r1, r4
 801769a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801769e:	3b30      	subs	r3, #48	; 0x30
 80176a0:	2b09      	cmp	r3, #9
 80176a2:	d94e      	bls.n	8017742 <_svfiprintf_r+0x17e>
 80176a4:	b1b0      	cbz	r0, 80176d4 <_svfiprintf_r+0x110>
 80176a6:	9207      	str	r2, [sp, #28]
 80176a8:	e014      	b.n	80176d4 <_svfiprintf_r+0x110>
 80176aa:	eba0 0308 	sub.w	r3, r0, r8
 80176ae:	fa09 f303 	lsl.w	r3, r9, r3
 80176b2:	4313      	orrs	r3, r2
 80176b4:	9304      	str	r3, [sp, #16]
 80176b6:	46a2      	mov	sl, r4
 80176b8:	e7d2      	b.n	8017660 <_svfiprintf_r+0x9c>
 80176ba:	9b03      	ldr	r3, [sp, #12]
 80176bc:	1d19      	adds	r1, r3, #4
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	9103      	str	r1, [sp, #12]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	bfbb      	ittet	lt
 80176c6:	425b      	neglt	r3, r3
 80176c8:	f042 0202 	orrlt.w	r2, r2, #2
 80176cc:	9307      	strge	r3, [sp, #28]
 80176ce:	9307      	strlt	r3, [sp, #28]
 80176d0:	bfb8      	it	lt
 80176d2:	9204      	strlt	r2, [sp, #16]
 80176d4:	7823      	ldrb	r3, [r4, #0]
 80176d6:	2b2e      	cmp	r3, #46	; 0x2e
 80176d8:	d10c      	bne.n	80176f4 <_svfiprintf_r+0x130>
 80176da:	7863      	ldrb	r3, [r4, #1]
 80176dc:	2b2a      	cmp	r3, #42	; 0x2a
 80176de:	d135      	bne.n	801774c <_svfiprintf_r+0x188>
 80176e0:	9b03      	ldr	r3, [sp, #12]
 80176e2:	1d1a      	adds	r2, r3, #4
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	9203      	str	r2, [sp, #12]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	bfb8      	it	lt
 80176ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80176f0:	3402      	adds	r4, #2
 80176f2:	9305      	str	r3, [sp, #20]
 80176f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80177c0 <_svfiprintf_r+0x1fc>
 80176f8:	7821      	ldrb	r1, [r4, #0]
 80176fa:	2203      	movs	r2, #3
 80176fc:	4650      	mov	r0, sl
 80176fe:	f7e8 fdf7 	bl	80002f0 <memchr>
 8017702:	b140      	cbz	r0, 8017716 <_svfiprintf_r+0x152>
 8017704:	2340      	movs	r3, #64	; 0x40
 8017706:	eba0 000a 	sub.w	r0, r0, sl
 801770a:	fa03 f000 	lsl.w	r0, r3, r0
 801770e:	9b04      	ldr	r3, [sp, #16]
 8017710:	4303      	orrs	r3, r0
 8017712:	3401      	adds	r4, #1
 8017714:	9304      	str	r3, [sp, #16]
 8017716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801771a:	4826      	ldr	r0, [pc, #152]	; (80177b4 <_svfiprintf_r+0x1f0>)
 801771c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017720:	2206      	movs	r2, #6
 8017722:	f7e8 fde5 	bl	80002f0 <memchr>
 8017726:	2800      	cmp	r0, #0
 8017728:	d038      	beq.n	801779c <_svfiprintf_r+0x1d8>
 801772a:	4b23      	ldr	r3, [pc, #140]	; (80177b8 <_svfiprintf_r+0x1f4>)
 801772c:	bb1b      	cbnz	r3, 8017776 <_svfiprintf_r+0x1b2>
 801772e:	9b03      	ldr	r3, [sp, #12]
 8017730:	3307      	adds	r3, #7
 8017732:	f023 0307 	bic.w	r3, r3, #7
 8017736:	3308      	adds	r3, #8
 8017738:	9303      	str	r3, [sp, #12]
 801773a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801773c:	4433      	add	r3, r6
 801773e:	9309      	str	r3, [sp, #36]	; 0x24
 8017740:	e767      	b.n	8017612 <_svfiprintf_r+0x4e>
 8017742:	fb0c 3202 	mla	r2, ip, r2, r3
 8017746:	460c      	mov	r4, r1
 8017748:	2001      	movs	r0, #1
 801774a:	e7a5      	b.n	8017698 <_svfiprintf_r+0xd4>
 801774c:	2300      	movs	r3, #0
 801774e:	3401      	adds	r4, #1
 8017750:	9305      	str	r3, [sp, #20]
 8017752:	4619      	mov	r1, r3
 8017754:	f04f 0c0a 	mov.w	ip, #10
 8017758:	4620      	mov	r0, r4
 801775a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801775e:	3a30      	subs	r2, #48	; 0x30
 8017760:	2a09      	cmp	r2, #9
 8017762:	d903      	bls.n	801776c <_svfiprintf_r+0x1a8>
 8017764:	2b00      	cmp	r3, #0
 8017766:	d0c5      	beq.n	80176f4 <_svfiprintf_r+0x130>
 8017768:	9105      	str	r1, [sp, #20]
 801776a:	e7c3      	b.n	80176f4 <_svfiprintf_r+0x130>
 801776c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017770:	4604      	mov	r4, r0
 8017772:	2301      	movs	r3, #1
 8017774:	e7f0      	b.n	8017758 <_svfiprintf_r+0x194>
 8017776:	ab03      	add	r3, sp, #12
 8017778:	9300      	str	r3, [sp, #0]
 801777a:	462a      	mov	r2, r5
 801777c:	4b0f      	ldr	r3, [pc, #60]	; (80177bc <_svfiprintf_r+0x1f8>)
 801777e:	a904      	add	r1, sp, #16
 8017780:	4638      	mov	r0, r7
 8017782:	f7fd fe05 	bl	8015390 <_printf_float>
 8017786:	1c42      	adds	r2, r0, #1
 8017788:	4606      	mov	r6, r0
 801778a:	d1d6      	bne.n	801773a <_svfiprintf_r+0x176>
 801778c:	89ab      	ldrh	r3, [r5, #12]
 801778e:	065b      	lsls	r3, r3, #25
 8017790:	f53f af2c 	bmi.w	80175ec <_svfiprintf_r+0x28>
 8017794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017796:	b01d      	add	sp, #116	; 0x74
 8017798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801779c:	ab03      	add	r3, sp, #12
 801779e:	9300      	str	r3, [sp, #0]
 80177a0:	462a      	mov	r2, r5
 80177a2:	4b06      	ldr	r3, [pc, #24]	; (80177bc <_svfiprintf_r+0x1f8>)
 80177a4:	a904      	add	r1, sp, #16
 80177a6:	4638      	mov	r0, r7
 80177a8:	f7fe f87e 	bl	80158a8 <_printf_i>
 80177ac:	e7eb      	b.n	8017786 <_svfiprintf_r+0x1c2>
 80177ae:	bf00      	nop
 80177b0:	08023794 	.word	0x08023794
 80177b4:	0802379e 	.word	0x0802379e
 80177b8:	08015391 	.word	0x08015391
 80177bc:	0801750d 	.word	0x0801750d
 80177c0:	0802379a 	.word	0x0802379a

080177c4 <__sfputc_r>:
 80177c4:	6893      	ldr	r3, [r2, #8]
 80177c6:	3b01      	subs	r3, #1
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	b410      	push	{r4}
 80177cc:	6093      	str	r3, [r2, #8]
 80177ce:	da08      	bge.n	80177e2 <__sfputc_r+0x1e>
 80177d0:	6994      	ldr	r4, [r2, #24]
 80177d2:	42a3      	cmp	r3, r4
 80177d4:	db01      	blt.n	80177da <__sfputc_r+0x16>
 80177d6:	290a      	cmp	r1, #10
 80177d8:	d103      	bne.n	80177e2 <__sfputc_r+0x1e>
 80177da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177de:	f000 b95d 	b.w	8017a9c <__swbuf_r>
 80177e2:	6813      	ldr	r3, [r2, #0]
 80177e4:	1c58      	adds	r0, r3, #1
 80177e6:	6010      	str	r0, [r2, #0]
 80177e8:	7019      	strb	r1, [r3, #0]
 80177ea:	4608      	mov	r0, r1
 80177ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177f0:	4770      	bx	lr

080177f2 <__sfputs_r>:
 80177f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177f4:	4606      	mov	r6, r0
 80177f6:	460f      	mov	r7, r1
 80177f8:	4614      	mov	r4, r2
 80177fa:	18d5      	adds	r5, r2, r3
 80177fc:	42ac      	cmp	r4, r5
 80177fe:	d101      	bne.n	8017804 <__sfputs_r+0x12>
 8017800:	2000      	movs	r0, #0
 8017802:	e007      	b.n	8017814 <__sfputs_r+0x22>
 8017804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017808:	463a      	mov	r2, r7
 801780a:	4630      	mov	r0, r6
 801780c:	f7ff ffda 	bl	80177c4 <__sfputc_r>
 8017810:	1c43      	adds	r3, r0, #1
 8017812:	d1f3      	bne.n	80177fc <__sfputs_r+0xa>
 8017814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017818 <_vfiprintf_r>:
 8017818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801781c:	460d      	mov	r5, r1
 801781e:	b09d      	sub	sp, #116	; 0x74
 8017820:	4614      	mov	r4, r2
 8017822:	4698      	mov	r8, r3
 8017824:	4606      	mov	r6, r0
 8017826:	b118      	cbz	r0, 8017830 <_vfiprintf_r+0x18>
 8017828:	6983      	ldr	r3, [r0, #24]
 801782a:	b90b      	cbnz	r3, 8017830 <_vfiprintf_r+0x18>
 801782c:	f7fd fbe8 	bl	8015000 <__sinit>
 8017830:	4b89      	ldr	r3, [pc, #548]	; (8017a58 <_vfiprintf_r+0x240>)
 8017832:	429d      	cmp	r5, r3
 8017834:	d11b      	bne.n	801786e <_vfiprintf_r+0x56>
 8017836:	6875      	ldr	r5, [r6, #4]
 8017838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801783a:	07d9      	lsls	r1, r3, #31
 801783c:	d405      	bmi.n	801784a <_vfiprintf_r+0x32>
 801783e:	89ab      	ldrh	r3, [r5, #12]
 8017840:	059a      	lsls	r2, r3, #22
 8017842:	d402      	bmi.n	801784a <_vfiprintf_r+0x32>
 8017844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017846:	f7fd fc9e 	bl	8015186 <__retarget_lock_acquire_recursive>
 801784a:	89ab      	ldrh	r3, [r5, #12]
 801784c:	071b      	lsls	r3, r3, #28
 801784e:	d501      	bpl.n	8017854 <_vfiprintf_r+0x3c>
 8017850:	692b      	ldr	r3, [r5, #16]
 8017852:	b9eb      	cbnz	r3, 8017890 <_vfiprintf_r+0x78>
 8017854:	4629      	mov	r1, r5
 8017856:	4630      	mov	r0, r6
 8017858:	f000 f972 	bl	8017b40 <__swsetup_r>
 801785c:	b1c0      	cbz	r0, 8017890 <_vfiprintf_r+0x78>
 801785e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017860:	07dc      	lsls	r4, r3, #31
 8017862:	d50e      	bpl.n	8017882 <_vfiprintf_r+0x6a>
 8017864:	f04f 30ff 	mov.w	r0, #4294967295
 8017868:	b01d      	add	sp, #116	; 0x74
 801786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801786e:	4b7b      	ldr	r3, [pc, #492]	; (8017a5c <_vfiprintf_r+0x244>)
 8017870:	429d      	cmp	r5, r3
 8017872:	d101      	bne.n	8017878 <_vfiprintf_r+0x60>
 8017874:	68b5      	ldr	r5, [r6, #8]
 8017876:	e7df      	b.n	8017838 <_vfiprintf_r+0x20>
 8017878:	4b79      	ldr	r3, [pc, #484]	; (8017a60 <_vfiprintf_r+0x248>)
 801787a:	429d      	cmp	r5, r3
 801787c:	bf08      	it	eq
 801787e:	68f5      	ldreq	r5, [r6, #12]
 8017880:	e7da      	b.n	8017838 <_vfiprintf_r+0x20>
 8017882:	89ab      	ldrh	r3, [r5, #12]
 8017884:	0598      	lsls	r0, r3, #22
 8017886:	d4ed      	bmi.n	8017864 <_vfiprintf_r+0x4c>
 8017888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801788a:	f7fd fc7d 	bl	8015188 <__retarget_lock_release_recursive>
 801788e:	e7e9      	b.n	8017864 <_vfiprintf_r+0x4c>
 8017890:	2300      	movs	r3, #0
 8017892:	9309      	str	r3, [sp, #36]	; 0x24
 8017894:	2320      	movs	r3, #32
 8017896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801789a:	f8cd 800c 	str.w	r8, [sp, #12]
 801789e:	2330      	movs	r3, #48	; 0x30
 80178a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017a64 <_vfiprintf_r+0x24c>
 80178a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80178a8:	f04f 0901 	mov.w	r9, #1
 80178ac:	4623      	mov	r3, r4
 80178ae:	469a      	mov	sl, r3
 80178b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178b4:	b10a      	cbz	r2, 80178ba <_vfiprintf_r+0xa2>
 80178b6:	2a25      	cmp	r2, #37	; 0x25
 80178b8:	d1f9      	bne.n	80178ae <_vfiprintf_r+0x96>
 80178ba:	ebba 0b04 	subs.w	fp, sl, r4
 80178be:	d00b      	beq.n	80178d8 <_vfiprintf_r+0xc0>
 80178c0:	465b      	mov	r3, fp
 80178c2:	4622      	mov	r2, r4
 80178c4:	4629      	mov	r1, r5
 80178c6:	4630      	mov	r0, r6
 80178c8:	f7ff ff93 	bl	80177f2 <__sfputs_r>
 80178cc:	3001      	adds	r0, #1
 80178ce:	f000 80aa 	beq.w	8017a26 <_vfiprintf_r+0x20e>
 80178d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178d4:	445a      	add	r2, fp
 80178d6:	9209      	str	r2, [sp, #36]	; 0x24
 80178d8:	f89a 3000 	ldrb.w	r3, [sl]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	f000 80a2 	beq.w	8017a26 <_vfiprintf_r+0x20e>
 80178e2:	2300      	movs	r3, #0
 80178e4:	f04f 32ff 	mov.w	r2, #4294967295
 80178e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178ec:	f10a 0a01 	add.w	sl, sl, #1
 80178f0:	9304      	str	r3, [sp, #16]
 80178f2:	9307      	str	r3, [sp, #28]
 80178f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178f8:	931a      	str	r3, [sp, #104]	; 0x68
 80178fa:	4654      	mov	r4, sl
 80178fc:	2205      	movs	r2, #5
 80178fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017902:	4858      	ldr	r0, [pc, #352]	; (8017a64 <_vfiprintf_r+0x24c>)
 8017904:	f7e8 fcf4 	bl	80002f0 <memchr>
 8017908:	9a04      	ldr	r2, [sp, #16]
 801790a:	b9d8      	cbnz	r0, 8017944 <_vfiprintf_r+0x12c>
 801790c:	06d1      	lsls	r1, r2, #27
 801790e:	bf44      	itt	mi
 8017910:	2320      	movmi	r3, #32
 8017912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017916:	0713      	lsls	r3, r2, #28
 8017918:	bf44      	itt	mi
 801791a:	232b      	movmi	r3, #43	; 0x2b
 801791c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017920:	f89a 3000 	ldrb.w	r3, [sl]
 8017924:	2b2a      	cmp	r3, #42	; 0x2a
 8017926:	d015      	beq.n	8017954 <_vfiprintf_r+0x13c>
 8017928:	9a07      	ldr	r2, [sp, #28]
 801792a:	4654      	mov	r4, sl
 801792c:	2000      	movs	r0, #0
 801792e:	f04f 0c0a 	mov.w	ip, #10
 8017932:	4621      	mov	r1, r4
 8017934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017938:	3b30      	subs	r3, #48	; 0x30
 801793a:	2b09      	cmp	r3, #9
 801793c:	d94e      	bls.n	80179dc <_vfiprintf_r+0x1c4>
 801793e:	b1b0      	cbz	r0, 801796e <_vfiprintf_r+0x156>
 8017940:	9207      	str	r2, [sp, #28]
 8017942:	e014      	b.n	801796e <_vfiprintf_r+0x156>
 8017944:	eba0 0308 	sub.w	r3, r0, r8
 8017948:	fa09 f303 	lsl.w	r3, r9, r3
 801794c:	4313      	orrs	r3, r2
 801794e:	9304      	str	r3, [sp, #16]
 8017950:	46a2      	mov	sl, r4
 8017952:	e7d2      	b.n	80178fa <_vfiprintf_r+0xe2>
 8017954:	9b03      	ldr	r3, [sp, #12]
 8017956:	1d19      	adds	r1, r3, #4
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	9103      	str	r1, [sp, #12]
 801795c:	2b00      	cmp	r3, #0
 801795e:	bfbb      	ittet	lt
 8017960:	425b      	neglt	r3, r3
 8017962:	f042 0202 	orrlt.w	r2, r2, #2
 8017966:	9307      	strge	r3, [sp, #28]
 8017968:	9307      	strlt	r3, [sp, #28]
 801796a:	bfb8      	it	lt
 801796c:	9204      	strlt	r2, [sp, #16]
 801796e:	7823      	ldrb	r3, [r4, #0]
 8017970:	2b2e      	cmp	r3, #46	; 0x2e
 8017972:	d10c      	bne.n	801798e <_vfiprintf_r+0x176>
 8017974:	7863      	ldrb	r3, [r4, #1]
 8017976:	2b2a      	cmp	r3, #42	; 0x2a
 8017978:	d135      	bne.n	80179e6 <_vfiprintf_r+0x1ce>
 801797a:	9b03      	ldr	r3, [sp, #12]
 801797c:	1d1a      	adds	r2, r3, #4
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	9203      	str	r2, [sp, #12]
 8017982:	2b00      	cmp	r3, #0
 8017984:	bfb8      	it	lt
 8017986:	f04f 33ff 	movlt.w	r3, #4294967295
 801798a:	3402      	adds	r4, #2
 801798c:	9305      	str	r3, [sp, #20]
 801798e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017a74 <_vfiprintf_r+0x25c>
 8017992:	7821      	ldrb	r1, [r4, #0]
 8017994:	2203      	movs	r2, #3
 8017996:	4650      	mov	r0, sl
 8017998:	f7e8 fcaa 	bl	80002f0 <memchr>
 801799c:	b140      	cbz	r0, 80179b0 <_vfiprintf_r+0x198>
 801799e:	2340      	movs	r3, #64	; 0x40
 80179a0:	eba0 000a 	sub.w	r0, r0, sl
 80179a4:	fa03 f000 	lsl.w	r0, r3, r0
 80179a8:	9b04      	ldr	r3, [sp, #16]
 80179aa:	4303      	orrs	r3, r0
 80179ac:	3401      	adds	r4, #1
 80179ae:	9304      	str	r3, [sp, #16]
 80179b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179b4:	482c      	ldr	r0, [pc, #176]	; (8017a68 <_vfiprintf_r+0x250>)
 80179b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80179ba:	2206      	movs	r2, #6
 80179bc:	f7e8 fc98 	bl	80002f0 <memchr>
 80179c0:	2800      	cmp	r0, #0
 80179c2:	d03f      	beq.n	8017a44 <_vfiprintf_r+0x22c>
 80179c4:	4b29      	ldr	r3, [pc, #164]	; (8017a6c <_vfiprintf_r+0x254>)
 80179c6:	bb1b      	cbnz	r3, 8017a10 <_vfiprintf_r+0x1f8>
 80179c8:	9b03      	ldr	r3, [sp, #12]
 80179ca:	3307      	adds	r3, #7
 80179cc:	f023 0307 	bic.w	r3, r3, #7
 80179d0:	3308      	adds	r3, #8
 80179d2:	9303      	str	r3, [sp, #12]
 80179d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179d6:	443b      	add	r3, r7
 80179d8:	9309      	str	r3, [sp, #36]	; 0x24
 80179da:	e767      	b.n	80178ac <_vfiprintf_r+0x94>
 80179dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80179e0:	460c      	mov	r4, r1
 80179e2:	2001      	movs	r0, #1
 80179e4:	e7a5      	b.n	8017932 <_vfiprintf_r+0x11a>
 80179e6:	2300      	movs	r3, #0
 80179e8:	3401      	adds	r4, #1
 80179ea:	9305      	str	r3, [sp, #20]
 80179ec:	4619      	mov	r1, r3
 80179ee:	f04f 0c0a 	mov.w	ip, #10
 80179f2:	4620      	mov	r0, r4
 80179f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179f8:	3a30      	subs	r2, #48	; 0x30
 80179fa:	2a09      	cmp	r2, #9
 80179fc:	d903      	bls.n	8017a06 <_vfiprintf_r+0x1ee>
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d0c5      	beq.n	801798e <_vfiprintf_r+0x176>
 8017a02:	9105      	str	r1, [sp, #20]
 8017a04:	e7c3      	b.n	801798e <_vfiprintf_r+0x176>
 8017a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	e7f0      	b.n	80179f2 <_vfiprintf_r+0x1da>
 8017a10:	ab03      	add	r3, sp, #12
 8017a12:	9300      	str	r3, [sp, #0]
 8017a14:	462a      	mov	r2, r5
 8017a16:	4b16      	ldr	r3, [pc, #88]	; (8017a70 <_vfiprintf_r+0x258>)
 8017a18:	a904      	add	r1, sp, #16
 8017a1a:	4630      	mov	r0, r6
 8017a1c:	f7fd fcb8 	bl	8015390 <_printf_float>
 8017a20:	4607      	mov	r7, r0
 8017a22:	1c78      	adds	r0, r7, #1
 8017a24:	d1d6      	bne.n	80179d4 <_vfiprintf_r+0x1bc>
 8017a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a28:	07d9      	lsls	r1, r3, #31
 8017a2a:	d405      	bmi.n	8017a38 <_vfiprintf_r+0x220>
 8017a2c:	89ab      	ldrh	r3, [r5, #12]
 8017a2e:	059a      	lsls	r2, r3, #22
 8017a30:	d402      	bmi.n	8017a38 <_vfiprintf_r+0x220>
 8017a32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a34:	f7fd fba8 	bl	8015188 <__retarget_lock_release_recursive>
 8017a38:	89ab      	ldrh	r3, [r5, #12]
 8017a3a:	065b      	lsls	r3, r3, #25
 8017a3c:	f53f af12 	bmi.w	8017864 <_vfiprintf_r+0x4c>
 8017a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a42:	e711      	b.n	8017868 <_vfiprintf_r+0x50>
 8017a44:	ab03      	add	r3, sp, #12
 8017a46:	9300      	str	r3, [sp, #0]
 8017a48:	462a      	mov	r2, r5
 8017a4a:	4b09      	ldr	r3, [pc, #36]	; (8017a70 <_vfiprintf_r+0x258>)
 8017a4c:	a904      	add	r1, sp, #16
 8017a4e:	4630      	mov	r0, r6
 8017a50:	f7fd ff2a 	bl	80158a8 <_printf_i>
 8017a54:	e7e4      	b.n	8017a20 <_vfiprintf_r+0x208>
 8017a56:	bf00      	nop
 8017a58:	0802338c 	.word	0x0802338c
 8017a5c:	080233ac 	.word	0x080233ac
 8017a60:	0802336c 	.word	0x0802336c
 8017a64:	08023794 	.word	0x08023794
 8017a68:	0802379e 	.word	0x0802379e
 8017a6c:	08015391 	.word	0x08015391
 8017a70:	080177f3 	.word	0x080177f3
 8017a74:	0802379a 	.word	0x0802379a

08017a78 <_read_r>:
 8017a78:	b538      	push	{r3, r4, r5, lr}
 8017a7a:	4d07      	ldr	r5, [pc, #28]	; (8017a98 <_read_r+0x20>)
 8017a7c:	4604      	mov	r4, r0
 8017a7e:	4608      	mov	r0, r1
 8017a80:	4611      	mov	r1, r2
 8017a82:	2200      	movs	r2, #0
 8017a84:	602a      	str	r2, [r5, #0]
 8017a86:	461a      	mov	r2, r3
 8017a88:	f7ea fc8e 	bl	80023a8 <_read>
 8017a8c:	1c43      	adds	r3, r0, #1
 8017a8e:	d102      	bne.n	8017a96 <_read_r+0x1e>
 8017a90:	682b      	ldr	r3, [r5, #0]
 8017a92:	b103      	cbz	r3, 8017a96 <_read_r+0x1e>
 8017a94:	6023      	str	r3, [r4, #0]
 8017a96:	bd38      	pop	{r3, r4, r5, pc}
 8017a98:	24006ad4 	.word	0x24006ad4

08017a9c <__swbuf_r>:
 8017a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a9e:	460e      	mov	r6, r1
 8017aa0:	4614      	mov	r4, r2
 8017aa2:	4605      	mov	r5, r0
 8017aa4:	b118      	cbz	r0, 8017aae <__swbuf_r+0x12>
 8017aa6:	6983      	ldr	r3, [r0, #24]
 8017aa8:	b90b      	cbnz	r3, 8017aae <__swbuf_r+0x12>
 8017aaa:	f7fd faa9 	bl	8015000 <__sinit>
 8017aae:	4b21      	ldr	r3, [pc, #132]	; (8017b34 <__swbuf_r+0x98>)
 8017ab0:	429c      	cmp	r4, r3
 8017ab2:	d12b      	bne.n	8017b0c <__swbuf_r+0x70>
 8017ab4:	686c      	ldr	r4, [r5, #4]
 8017ab6:	69a3      	ldr	r3, [r4, #24]
 8017ab8:	60a3      	str	r3, [r4, #8]
 8017aba:	89a3      	ldrh	r3, [r4, #12]
 8017abc:	071a      	lsls	r2, r3, #28
 8017abe:	d52f      	bpl.n	8017b20 <__swbuf_r+0x84>
 8017ac0:	6923      	ldr	r3, [r4, #16]
 8017ac2:	b36b      	cbz	r3, 8017b20 <__swbuf_r+0x84>
 8017ac4:	6923      	ldr	r3, [r4, #16]
 8017ac6:	6820      	ldr	r0, [r4, #0]
 8017ac8:	1ac0      	subs	r0, r0, r3
 8017aca:	6963      	ldr	r3, [r4, #20]
 8017acc:	b2f6      	uxtb	r6, r6
 8017ace:	4283      	cmp	r3, r0
 8017ad0:	4637      	mov	r7, r6
 8017ad2:	dc04      	bgt.n	8017ade <__swbuf_r+0x42>
 8017ad4:	4621      	mov	r1, r4
 8017ad6:	4628      	mov	r0, r5
 8017ad8:	f7ff f8c2 	bl	8016c60 <_fflush_r>
 8017adc:	bb30      	cbnz	r0, 8017b2c <__swbuf_r+0x90>
 8017ade:	68a3      	ldr	r3, [r4, #8]
 8017ae0:	3b01      	subs	r3, #1
 8017ae2:	60a3      	str	r3, [r4, #8]
 8017ae4:	6823      	ldr	r3, [r4, #0]
 8017ae6:	1c5a      	adds	r2, r3, #1
 8017ae8:	6022      	str	r2, [r4, #0]
 8017aea:	701e      	strb	r6, [r3, #0]
 8017aec:	6963      	ldr	r3, [r4, #20]
 8017aee:	3001      	adds	r0, #1
 8017af0:	4283      	cmp	r3, r0
 8017af2:	d004      	beq.n	8017afe <__swbuf_r+0x62>
 8017af4:	89a3      	ldrh	r3, [r4, #12]
 8017af6:	07db      	lsls	r3, r3, #31
 8017af8:	d506      	bpl.n	8017b08 <__swbuf_r+0x6c>
 8017afa:	2e0a      	cmp	r6, #10
 8017afc:	d104      	bne.n	8017b08 <__swbuf_r+0x6c>
 8017afe:	4621      	mov	r1, r4
 8017b00:	4628      	mov	r0, r5
 8017b02:	f7ff f8ad 	bl	8016c60 <_fflush_r>
 8017b06:	b988      	cbnz	r0, 8017b2c <__swbuf_r+0x90>
 8017b08:	4638      	mov	r0, r7
 8017b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b0c:	4b0a      	ldr	r3, [pc, #40]	; (8017b38 <__swbuf_r+0x9c>)
 8017b0e:	429c      	cmp	r4, r3
 8017b10:	d101      	bne.n	8017b16 <__swbuf_r+0x7a>
 8017b12:	68ac      	ldr	r4, [r5, #8]
 8017b14:	e7cf      	b.n	8017ab6 <__swbuf_r+0x1a>
 8017b16:	4b09      	ldr	r3, [pc, #36]	; (8017b3c <__swbuf_r+0xa0>)
 8017b18:	429c      	cmp	r4, r3
 8017b1a:	bf08      	it	eq
 8017b1c:	68ec      	ldreq	r4, [r5, #12]
 8017b1e:	e7ca      	b.n	8017ab6 <__swbuf_r+0x1a>
 8017b20:	4621      	mov	r1, r4
 8017b22:	4628      	mov	r0, r5
 8017b24:	f000 f80c 	bl	8017b40 <__swsetup_r>
 8017b28:	2800      	cmp	r0, #0
 8017b2a:	d0cb      	beq.n	8017ac4 <__swbuf_r+0x28>
 8017b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8017b30:	e7ea      	b.n	8017b08 <__swbuf_r+0x6c>
 8017b32:	bf00      	nop
 8017b34:	0802338c 	.word	0x0802338c
 8017b38:	080233ac 	.word	0x080233ac
 8017b3c:	0802336c 	.word	0x0802336c

08017b40 <__swsetup_r>:
 8017b40:	4b32      	ldr	r3, [pc, #200]	; (8017c0c <__swsetup_r+0xcc>)
 8017b42:	b570      	push	{r4, r5, r6, lr}
 8017b44:	681d      	ldr	r5, [r3, #0]
 8017b46:	4606      	mov	r6, r0
 8017b48:	460c      	mov	r4, r1
 8017b4a:	b125      	cbz	r5, 8017b56 <__swsetup_r+0x16>
 8017b4c:	69ab      	ldr	r3, [r5, #24]
 8017b4e:	b913      	cbnz	r3, 8017b56 <__swsetup_r+0x16>
 8017b50:	4628      	mov	r0, r5
 8017b52:	f7fd fa55 	bl	8015000 <__sinit>
 8017b56:	4b2e      	ldr	r3, [pc, #184]	; (8017c10 <__swsetup_r+0xd0>)
 8017b58:	429c      	cmp	r4, r3
 8017b5a:	d10f      	bne.n	8017b7c <__swsetup_r+0x3c>
 8017b5c:	686c      	ldr	r4, [r5, #4]
 8017b5e:	89a3      	ldrh	r3, [r4, #12]
 8017b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017b64:	0719      	lsls	r1, r3, #28
 8017b66:	d42c      	bmi.n	8017bc2 <__swsetup_r+0x82>
 8017b68:	06dd      	lsls	r5, r3, #27
 8017b6a:	d411      	bmi.n	8017b90 <__swsetup_r+0x50>
 8017b6c:	2309      	movs	r3, #9
 8017b6e:	6033      	str	r3, [r6, #0]
 8017b70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017b74:	81a3      	strh	r3, [r4, #12]
 8017b76:	f04f 30ff 	mov.w	r0, #4294967295
 8017b7a:	e03e      	b.n	8017bfa <__swsetup_r+0xba>
 8017b7c:	4b25      	ldr	r3, [pc, #148]	; (8017c14 <__swsetup_r+0xd4>)
 8017b7e:	429c      	cmp	r4, r3
 8017b80:	d101      	bne.n	8017b86 <__swsetup_r+0x46>
 8017b82:	68ac      	ldr	r4, [r5, #8]
 8017b84:	e7eb      	b.n	8017b5e <__swsetup_r+0x1e>
 8017b86:	4b24      	ldr	r3, [pc, #144]	; (8017c18 <__swsetup_r+0xd8>)
 8017b88:	429c      	cmp	r4, r3
 8017b8a:	bf08      	it	eq
 8017b8c:	68ec      	ldreq	r4, [r5, #12]
 8017b8e:	e7e6      	b.n	8017b5e <__swsetup_r+0x1e>
 8017b90:	0758      	lsls	r0, r3, #29
 8017b92:	d512      	bpl.n	8017bba <__swsetup_r+0x7a>
 8017b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b96:	b141      	cbz	r1, 8017baa <__swsetup_r+0x6a>
 8017b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b9c:	4299      	cmp	r1, r3
 8017b9e:	d002      	beq.n	8017ba6 <__swsetup_r+0x66>
 8017ba0:	4630      	mov	r0, r6
 8017ba2:	f7ff fc63 	bl	801746c <_free_r>
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8017baa:	89a3      	ldrh	r3, [r4, #12]
 8017bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017bb0:	81a3      	strh	r3, [r4, #12]
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	6063      	str	r3, [r4, #4]
 8017bb6:	6923      	ldr	r3, [r4, #16]
 8017bb8:	6023      	str	r3, [r4, #0]
 8017bba:	89a3      	ldrh	r3, [r4, #12]
 8017bbc:	f043 0308 	orr.w	r3, r3, #8
 8017bc0:	81a3      	strh	r3, [r4, #12]
 8017bc2:	6923      	ldr	r3, [r4, #16]
 8017bc4:	b94b      	cbnz	r3, 8017bda <__swsetup_r+0x9a>
 8017bc6:	89a3      	ldrh	r3, [r4, #12]
 8017bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017bd0:	d003      	beq.n	8017bda <__swsetup_r+0x9a>
 8017bd2:	4621      	mov	r1, r4
 8017bd4:	4630      	mov	r0, r6
 8017bd6:	f000 f84d 	bl	8017c74 <__smakebuf_r>
 8017bda:	89a0      	ldrh	r0, [r4, #12]
 8017bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017be0:	f010 0301 	ands.w	r3, r0, #1
 8017be4:	d00a      	beq.n	8017bfc <__swsetup_r+0xbc>
 8017be6:	2300      	movs	r3, #0
 8017be8:	60a3      	str	r3, [r4, #8]
 8017bea:	6963      	ldr	r3, [r4, #20]
 8017bec:	425b      	negs	r3, r3
 8017bee:	61a3      	str	r3, [r4, #24]
 8017bf0:	6923      	ldr	r3, [r4, #16]
 8017bf2:	b943      	cbnz	r3, 8017c06 <__swsetup_r+0xc6>
 8017bf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017bf8:	d1ba      	bne.n	8017b70 <__swsetup_r+0x30>
 8017bfa:	bd70      	pop	{r4, r5, r6, pc}
 8017bfc:	0781      	lsls	r1, r0, #30
 8017bfe:	bf58      	it	pl
 8017c00:	6963      	ldrpl	r3, [r4, #20]
 8017c02:	60a3      	str	r3, [r4, #8]
 8017c04:	e7f4      	b.n	8017bf0 <__swsetup_r+0xb0>
 8017c06:	2000      	movs	r0, #0
 8017c08:	e7f7      	b.n	8017bfa <__swsetup_r+0xba>
 8017c0a:	bf00      	nop
 8017c0c:	2400025c 	.word	0x2400025c
 8017c10:	0802338c 	.word	0x0802338c
 8017c14:	080233ac 	.word	0x080233ac
 8017c18:	0802336c 	.word	0x0802336c

08017c1c <abort>:
 8017c1c:	b508      	push	{r3, lr}
 8017c1e:	2006      	movs	r0, #6
 8017c20:	f000 f8e2 	bl	8017de8 <raise>
 8017c24:	2001      	movs	r0, #1
 8017c26:	f7ea fbb5 	bl	8002394 <_exit>

08017c2a <__swhatbuf_r>:
 8017c2a:	b570      	push	{r4, r5, r6, lr}
 8017c2c:	460e      	mov	r6, r1
 8017c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c32:	2900      	cmp	r1, #0
 8017c34:	b096      	sub	sp, #88	; 0x58
 8017c36:	4614      	mov	r4, r2
 8017c38:	461d      	mov	r5, r3
 8017c3a:	da07      	bge.n	8017c4c <__swhatbuf_r+0x22>
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	602b      	str	r3, [r5, #0]
 8017c40:	89b3      	ldrh	r3, [r6, #12]
 8017c42:	061a      	lsls	r2, r3, #24
 8017c44:	d410      	bmi.n	8017c68 <__swhatbuf_r+0x3e>
 8017c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017c4a:	e00e      	b.n	8017c6a <__swhatbuf_r+0x40>
 8017c4c:	466a      	mov	r2, sp
 8017c4e:	f000 f8f5 	bl	8017e3c <_fstat_r>
 8017c52:	2800      	cmp	r0, #0
 8017c54:	dbf2      	blt.n	8017c3c <__swhatbuf_r+0x12>
 8017c56:	9a01      	ldr	r2, [sp, #4]
 8017c58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017c5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017c60:	425a      	negs	r2, r3
 8017c62:	415a      	adcs	r2, r3
 8017c64:	602a      	str	r2, [r5, #0]
 8017c66:	e7ee      	b.n	8017c46 <__swhatbuf_r+0x1c>
 8017c68:	2340      	movs	r3, #64	; 0x40
 8017c6a:	2000      	movs	r0, #0
 8017c6c:	6023      	str	r3, [r4, #0]
 8017c6e:	b016      	add	sp, #88	; 0x58
 8017c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08017c74 <__smakebuf_r>:
 8017c74:	898b      	ldrh	r3, [r1, #12]
 8017c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017c78:	079d      	lsls	r5, r3, #30
 8017c7a:	4606      	mov	r6, r0
 8017c7c:	460c      	mov	r4, r1
 8017c7e:	d507      	bpl.n	8017c90 <__smakebuf_r+0x1c>
 8017c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017c84:	6023      	str	r3, [r4, #0]
 8017c86:	6123      	str	r3, [r4, #16]
 8017c88:	2301      	movs	r3, #1
 8017c8a:	6163      	str	r3, [r4, #20]
 8017c8c:	b002      	add	sp, #8
 8017c8e:	bd70      	pop	{r4, r5, r6, pc}
 8017c90:	ab01      	add	r3, sp, #4
 8017c92:	466a      	mov	r2, sp
 8017c94:	f7ff ffc9 	bl	8017c2a <__swhatbuf_r>
 8017c98:	9900      	ldr	r1, [sp, #0]
 8017c9a:	4605      	mov	r5, r0
 8017c9c:	4630      	mov	r0, r6
 8017c9e:	f7fd fa8b 	bl	80151b8 <_malloc_r>
 8017ca2:	b948      	cbnz	r0, 8017cb8 <__smakebuf_r+0x44>
 8017ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ca8:	059a      	lsls	r2, r3, #22
 8017caa:	d4ef      	bmi.n	8017c8c <__smakebuf_r+0x18>
 8017cac:	f023 0303 	bic.w	r3, r3, #3
 8017cb0:	f043 0302 	orr.w	r3, r3, #2
 8017cb4:	81a3      	strh	r3, [r4, #12]
 8017cb6:	e7e3      	b.n	8017c80 <__smakebuf_r+0xc>
 8017cb8:	4b0d      	ldr	r3, [pc, #52]	; (8017cf0 <__smakebuf_r+0x7c>)
 8017cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8017cbc:	89a3      	ldrh	r3, [r4, #12]
 8017cbe:	6020      	str	r0, [r4, #0]
 8017cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017cc4:	81a3      	strh	r3, [r4, #12]
 8017cc6:	9b00      	ldr	r3, [sp, #0]
 8017cc8:	6163      	str	r3, [r4, #20]
 8017cca:	9b01      	ldr	r3, [sp, #4]
 8017ccc:	6120      	str	r0, [r4, #16]
 8017cce:	b15b      	cbz	r3, 8017ce8 <__smakebuf_r+0x74>
 8017cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017cd4:	4630      	mov	r0, r6
 8017cd6:	f000 f8c3 	bl	8017e60 <_isatty_r>
 8017cda:	b128      	cbz	r0, 8017ce8 <__smakebuf_r+0x74>
 8017cdc:	89a3      	ldrh	r3, [r4, #12]
 8017cde:	f023 0303 	bic.w	r3, r3, #3
 8017ce2:	f043 0301 	orr.w	r3, r3, #1
 8017ce6:	81a3      	strh	r3, [r4, #12]
 8017ce8:	89a0      	ldrh	r0, [r4, #12]
 8017cea:	4305      	orrs	r5, r0
 8017cec:	81a5      	strh	r5, [r4, #12]
 8017cee:	e7cd      	b.n	8017c8c <__smakebuf_r+0x18>
 8017cf0:	08014f99 	.word	0x08014f99

08017cf4 <__ascii_mbtowc>:
 8017cf4:	b082      	sub	sp, #8
 8017cf6:	b901      	cbnz	r1, 8017cfa <__ascii_mbtowc+0x6>
 8017cf8:	a901      	add	r1, sp, #4
 8017cfa:	b142      	cbz	r2, 8017d0e <__ascii_mbtowc+0x1a>
 8017cfc:	b14b      	cbz	r3, 8017d12 <__ascii_mbtowc+0x1e>
 8017cfe:	7813      	ldrb	r3, [r2, #0]
 8017d00:	600b      	str	r3, [r1, #0]
 8017d02:	7812      	ldrb	r2, [r2, #0]
 8017d04:	1e10      	subs	r0, r2, #0
 8017d06:	bf18      	it	ne
 8017d08:	2001      	movne	r0, #1
 8017d0a:	b002      	add	sp, #8
 8017d0c:	4770      	bx	lr
 8017d0e:	4610      	mov	r0, r2
 8017d10:	e7fb      	b.n	8017d0a <__ascii_mbtowc+0x16>
 8017d12:	f06f 0001 	mvn.w	r0, #1
 8017d16:	e7f8      	b.n	8017d0a <__ascii_mbtowc+0x16>

08017d18 <memmove>:
 8017d18:	4288      	cmp	r0, r1
 8017d1a:	b510      	push	{r4, lr}
 8017d1c:	eb01 0402 	add.w	r4, r1, r2
 8017d20:	d902      	bls.n	8017d28 <memmove+0x10>
 8017d22:	4284      	cmp	r4, r0
 8017d24:	4623      	mov	r3, r4
 8017d26:	d807      	bhi.n	8017d38 <memmove+0x20>
 8017d28:	1e43      	subs	r3, r0, #1
 8017d2a:	42a1      	cmp	r1, r4
 8017d2c:	d008      	beq.n	8017d40 <memmove+0x28>
 8017d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d36:	e7f8      	b.n	8017d2a <memmove+0x12>
 8017d38:	4402      	add	r2, r0
 8017d3a:	4601      	mov	r1, r0
 8017d3c:	428a      	cmp	r2, r1
 8017d3e:	d100      	bne.n	8017d42 <memmove+0x2a>
 8017d40:	bd10      	pop	{r4, pc}
 8017d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d4a:	e7f7      	b.n	8017d3c <memmove+0x24>

08017d4c <_realloc_r>:
 8017d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d4e:	4607      	mov	r7, r0
 8017d50:	4614      	mov	r4, r2
 8017d52:	460e      	mov	r6, r1
 8017d54:	b921      	cbnz	r1, 8017d60 <_realloc_r+0x14>
 8017d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017d5a:	4611      	mov	r1, r2
 8017d5c:	f7fd ba2c 	b.w	80151b8 <_malloc_r>
 8017d60:	b922      	cbnz	r2, 8017d6c <_realloc_r+0x20>
 8017d62:	f7ff fb83 	bl	801746c <_free_r>
 8017d66:	4625      	mov	r5, r4
 8017d68:	4628      	mov	r0, r5
 8017d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d6c:	f000 f888 	bl	8017e80 <_malloc_usable_size_r>
 8017d70:	42a0      	cmp	r0, r4
 8017d72:	d20f      	bcs.n	8017d94 <_realloc_r+0x48>
 8017d74:	4621      	mov	r1, r4
 8017d76:	4638      	mov	r0, r7
 8017d78:	f7fd fa1e 	bl	80151b8 <_malloc_r>
 8017d7c:	4605      	mov	r5, r0
 8017d7e:	2800      	cmp	r0, #0
 8017d80:	d0f2      	beq.n	8017d68 <_realloc_r+0x1c>
 8017d82:	4631      	mov	r1, r6
 8017d84:	4622      	mov	r2, r4
 8017d86:	f7fd fa00 	bl	801518a <memcpy>
 8017d8a:	4631      	mov	r1, r6
 8017d8c:	4638      	mov	r0, r7
 8017d8e:	f7ff fb6d 	bl	801746c <_free_r>
 8017d92:	e7e9      	b.n	8017d68 <_realloc_r+0x1c>
 8017d94:	4635      	mov	r5, r6
 8017d96:	e7e7      	b.n	8017d68 <_realloc_r+0x1c>

08017d98 <_raise_r>:
 8017d98:	291f      	cmp	r1, #31
 8017d9a:	b538      	push	{r3, r4, r5, lr}
 8017d9c:	4604      	mov	r4, r0
 8017d9e:	460d      	mov	r5, r1
 8017da0:	d904      	bls.n	8017dac <_raise_r+0x14>
 8017da2:	2316      	movs	r3, #22
 8017da4:	6003      	str	r3, [r0, #0]
 8017da6:	f04f 30ff 	mov.w	r0, #4294967295
 8017daa:	bd38      	pop	{r3, r4, r5, pc}
 8017dac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017dae:	b112      	cbz	r2, 8017db6 <_raise_r+0x1e>
 8017db0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017db4:	b94b      	cbnz	r3, 8017dca <_raise_r+0x32>
 8017db6:	4620      	mov	r0, r4
 8017db8:	f000 f830 	bl	8017e1c <_getpid_r>
 8017dbc:	462a      	mov	r2, r5
 8017dbe:	4601      	mov	r1, r0
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dc6:	f000 b817 	b.w	8017df8 <_kill_r>
 8017dca:	2b01      	cmp	r3, #1
 8017dcc:	d00a      	beq.n	8017de4 <_raise_r+0x4c>
 8017dce:	1c59      	adds	r1, r3, #1
 8017dd0:	d103      	bne.n	8017dda <_raise_r+0x42>
 8017dd2:	2316      	movs	r3, #22
 8017dd4:	6003      	str	r3, [r0, #0]
 8017dd6:	2001      	movs	r0, #1
 8017dd8:	e7e7      	b.n	8017daa <_raise_r+0x12>
 8017dda:	2400      	movs	r4, #0
 8017ddc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017de0:	4628      	mov	r0, r5
 8017de2:	4798      	blx	r3
 8017de4:	2000      	movs	r0, #0
 8017de6:	e7e0      	b.n	8017daa <_raise_r+0x12>

08017de8 <raise>:
 8017de8:	4b02      	ldr	r3, [pc, #8]	; (8017df4 <raise+0xc>)
 8017dea:	4601      	mov	r1, r0
 8017dec:	6818      	ldr	r0, [r3, #0]
 8017dee:	f7ff bfd3 	b.w	8017d98 <_raise_r>
 8017df2:	bf00      	nop
 8017df4:	2400025c 	.word	0x2400025c

08017df8 <_kill_r>:
 8017df8:	b538      	push	{r3, r4, r5, lr}
 8017dfa:	4d07      	ldr	r5, [pc, #28]	; (8017e18 <_kill_r+0x20>)
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	4604      	mov	r4, r0
 8017e00:	4608      	mov	r0, r1
 8017e02:	4611      	mov	r1, r2
 8017e04:	602b      	str	r3, [r5, #0]
 8017e06:	f7ea fab5 	bl	8002374 <_kill>
 8017e0a:	1c43      	adds	r3, r0, #1
 8017e0c:	d102      	bne.n	8017e14 <_kill_r+0x1c>
 8017e0e:	682b      	ldr	r3, [r5, #0]
 8017e10:	b103      	cbz	r3, 8017e14 <_kill_r+0x1c>
 8017e12:	6023      	str	r3, [r4, #0]
 8017e14:	bd38      	pop	{r3, r4, r5, pc}
 8017e16:	bf00      	nop
 8017e18:	24006ad4 	.word	0x24006ad4

08017e1c <_getpid_r>:
 8017e1c:	f7ea baa2 	b.w	8002364 <_getpid>

08017e20 <__ascii_wctomb>:
 8017e20:	b149      	cbz	r1, 8017e36 <__ascii_wctomb+0x16>
 8017e22:	2aff      	cmp	r2, #255	; 0xff
 8017e24:	bf85      	ittet	hi
 8017e26:	238a      	movhi	r3, #138	; 0x8a
 8017e28:	6003      	strhi	r3, [r0, #0]
 8017e2a:	700a      	strbls	r2, [r1, #0]
 8017e2c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017e30:	bf98      	it	ls
 8017e32:	2001      	movls	r0, #1
 8017e34:	4770      	bx	lr
 8017e36:	4608      	mov	r0, r1
 8017e38:	4770      	bx	lr
	...

08017e3c <_fstat_r>:
 8017e3c:	b538      	push	{r3, r4, r5, lr}
 8017e3e:	4d07      	ldr	r5, [pc, #28]	; (8017e5c <_fstat_r+0x20>)
 8017e40:	2300      	movs	r3, #0
 8017e42:	4604      	mov	r4, r0
 8017e44:	4608      	mov	r0, r1
 8017e46:	4611      	mov	r1, r2
 8017e48:	602b      	str	r3, [r5, #0]
 8017e4a:	f7ea fad6 	bl	80023fa <_fstat>
 8017e4e:	1c43      	adds	r3, r0, #1
 8017e50:	d102      	bne.n	8017e58 <_fstat_r+0x1c>
 8017e52:	682b      	ldr	r3, [r5, #0]
 8017e54:	b103      	cbz	r3, 8017e58 <_fstat_r+0x1c>
 8017e56:	6023      	str	r3, [r4, #0]
 8017e58:	bd38      	pop	{r3, r4, r5, pc}
 8017e5a:	bf00      	nop
 8017e5c:	24006ad4 	.word	0x24006ad4

08017e60 <_isatty_r>:
 8017e60:	b538      	push	{r3, r4, r5, lr}
 8017e62:	4d06      	ldr	r5, [pc, #24]	; (8017e7c <_isatty_r+0x1c>)
 8017e64:	2300      	movs	r3, #0
 8017e66:	4604      	mov	r4, r0
 8017e68:	4608      	mov	r0, r1
 8017e6a:	602b      	str	r3, [r5, #0]
 8017e6c:	f7ea fad5 	bl	800241a <_isatty>
 8017e70:	1c43      	adds	r3, r0, #1
 8017e72:	d102      	bne.n	8017e7a <_isatty_r+0x1a>
 8017e74:	682b      	ldr	r3, [r5, #0]
 8017e76:	b103      	cbz	r3, 8017e7a <_isatty_r+0x1a>
 8017e78:	6023      	str	r3, [r4, #0]
 8017e7a:	bd38      	pop	{r3, r4, r5, pc}
 8017e7c:	24006ad4 	.word	0x24006ad4

08017e80 <_malloc_usable_size_r>:
 8017e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e84:	1f18      	subs	r0, r3, #4
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	bfbc      	itt	lt
 8017e8a:	580b      	ldrlt	r3, [r1, r0]
 8017e8c:	18c0      	addlt	r0, r0, r3
 8017e8e:	4770      	bx	lr

08017e90 <_init>:
 8017e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e92:	bf00      	nop
 8017e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e96:	bc08      	pop	{r3}
 8017e98:	469e      	mov	lr, r3
 8017e9a:	4770      	bx	lr

08017e9c <_fini>:
 8017e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e9e:	bf00      	nop
 8017ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ea2:	bc08      	pop	{r3}
 8017ea4:	469e      	mov	lr, r3
 8017ea6:	4770      	bx	lr
