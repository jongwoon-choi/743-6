
743-6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019048  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b928  080192e8  080192e8  000292e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08024c10  08024c10  00034c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08024c18  08024c18  00034c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08024c1c  08024c1c  00034c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000430  24000000  08024c20  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000067c0  24000430  08025050  00040430  2**2
                  ALLOC
  8 ._user_heap_stack 00004000  24006bf0  08025050  00046bf0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040430  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005fcbd  00000000  00000000  0004045e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a125  00000000  00000000  000a011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b80  00000000  00000000  000aa240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002800  00000000  00000000  000acdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004635c  00000000  00000000  000af5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c985  00000000  00000000  000f591c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00195711  00000000  00000000  001322a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002c79b2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c59c  00000000  00000000  002c7a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000430 	.word	0x24000430
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080192d0 	.word	0x080192d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000434 	.word	0x24000434
 80002dc:	080192d0 	.word	0x080192d0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <Send_cmd>:
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0


void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	460b      	mov	r3, r1
 8000694:	71bb      	strb	r3, [r7, #6]
 8000696:	4613      	mov	r3, r2
 8000698:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	b29a      	uxth	r2, r3
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	4413      	add	r3, r2
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4413      	add	r3, r2
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	f203 1305 	addw	r3, r3, #261	; 0x105
 80006b2:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 80006b4:	8afb      	ldrh	r3, [r7, #22]
 80006b6:	425b      	negs	r3, r3
 80006b8:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 80006ba:	237e      	movs	r3, #126	; 0x7e
 80006bc:	733b      	strb	r3, [r7, #12]
 80006be:	23ff      	movs	r3, #255	; 0xff
 80006c0:	737b      	strb	r3, [r7, #13]
 80006c2:	2306      	movs	r3, #6
 80006c4:	73bb      	strb	r3, [r7, #14]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	2300      	movs	r3, #0
 80006cc:	743b      	strb	r3, [r7, #16]
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	747b      	strb	r3, [r7, #17]
 80006d2:	797b      	ldrb	r3, [r7, #5]
 80006d4:	74bb      	strb	r3, [r7, #18]
 80006d6:	8afb      	ldrh	r3, [r7, #22]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	74fb      	strb	r3, [r7, #19]
 80006e0:	8afb      	ldrh	r3, [r7, #22]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	753b      	strb	r3, [r7, #20]
 80006e6:	23ef      	movs	r3, #239	; 0xef
 80006e8:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart3, CmdSequence, 10, 100);
 80006ea:	f107 010c 	add.w	r1, r7, #12
 80006ee:	2364      	movs	r3, #100	; 0x64
 80006f0:	220a      	movs	r2, #10
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <Send_cmd+0x78>)
 80006f4:	f00e fde5 	bl	800f2c2 <HAL_UART_Transmit>
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	24004f58 	.word	0x24004f58

08000704 <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8000708:	2201      	movs	r2, #1
 800070a:	2100      	movs	r1, #0
 800070c:	2003      	movs	r0, #3
 800070e:	f7ff ffbb 	bl	8000688 <Send_cmd>
  HAL_Delay(200);
 8000712:	20c8      	movs	r0, #200	; 0xc8
 8000714:	f004 ffa0 	bl	8005658 <HAL_Delay>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <DF_Init>:


void DF_Init (uint8_t volume)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 8000726:	2202      	movs	r2, #2
 8000728:	2100      	movs	r1, #0
 800072a:	203f      	movs	r0, #63	; 0x3f
 800072c:	f7ff ffac 	bl	8000688 <Send_cmd>
	HAL_Delay(200);
 8000730:	20c8      	movs	r0, #200	; 0xc8
 8000732:	f004 ff91 	bl	8005658 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	461a      	mov	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	2006      	movs	r0, #6
 800073e:	f7ff ffa3 	bl	8000688 <Send_cmd>
	HAL_Delay(500);
 8000742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000746:	f004 ff87 	bl	8005658 <HAL_Delay>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <DF_Play>:

void DF_Play (uint16_t num)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	80fb      	strh	r3, [r7, #6]
	Send_cmd(0x03, 0x00, num);
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	2003      	movs	r0, #3
 8000766:	f7ff ff8f 	bl	8000688 <Send_cmd>
	HAL_Delay(200);
 800076a:	20c8      	movs	r0, #200	; 0xc8
 800076c:	f004 ff74 	bl	8005658 <HAL_Delay>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800079c:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_ADC1_Init+0xe8>)
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <MX_ADC1_Init+0xec>)
 80007a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007a2:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fa:	4819      	ldr	r0, [pc, #100]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007fc:	f005 f90c 	bl	8005a18 <HAL_ADC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000806:	f001 fc25 	bl	8002054 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_ADC1_Init+0xe8>)
 8000816:	f005 ff1f 	bl	8006658 <HAL_ADCEx_MultiModeConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000820:	f001 fc18 	bl	8002054 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_ADC1_Init+0xf0>)
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000828:	2306      	movs	r3, #6
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000830:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000834:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000836:	2304      	movs	r3, #4
 8000838:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_ADC1_Init+0xe8>)
 8000848:	f005 fa86 	bl	8005d58 <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000852:	f001 fbff 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24004d44 	.word	0x24004d44
 8000864:	40022000 	.word	0x40022000
 8000868:	1d500080 	.word	0x1d500080

0800086c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000884:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_ADC2_Init+0xc0>)
 8000886:	4a2a      	ldr	r2, [pc, #168]	; (8000930 <MX_ADC2_Init+0xc4>)
 8000888:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_ADC2_Init+0xc0>)
 800088c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000890:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_ADC2_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_ADC2_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_ADC2_Init+0xc0>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC2_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_ADC2_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_ADC2_Init+0xc0>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC2_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_ADC2_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ADC2_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_ADC2_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_ADC2_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ADC2_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ADC2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <MX_ADC2_Init+0xc0>)
 80008e4:	f005 f898 	bl	8005a18 <HAL_ADC_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80008ee:	f001 fbb1 	bl	8002054 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_ADC2_Init+0xc8>)
 80008f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f6:	2306      	movs	r3, #6
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000902:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000904:	2304      	movs	r3, #4
 8000906:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_ADC2_Init+0xc0>)
 8000916:	f005 fa1f 	bl	8005d58 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000920:	f001 fb98 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	24004ce0 	.word	0x24004ce0
 8000930:	40022100 	.word	0x40022100
 8000934:	0c900008 	.word	0x0c900008

08000938 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <MX_ADC3_Init+0xc4>)
 8000954:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000956:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000958:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800095c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800096c:	2204      	movs	r2, #4
 800096e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000972:	2200      	movs	r2, #0
 8000974:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800097e:	2201      	movs	r2, #1
 8000980:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009b0:	f005 f832 	bl	8005a18 <HAL_ADC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80009ba:	f001 fb4b 	bl	8002054 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_ADC3_Init+0xc8>)
 80009c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c2:	2306      	movs	r3, #6
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d0:	2304      	movs	r3, #4
 80009d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009e2:	f005 f9b9 	bl	8005d58 <HAL_ADC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80009ec:	f001 fb32 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	24004da8 	.word	0x24004da8
 80009fc:	58026000 	.word	0x58026000
 8000a00:	2e300800 	.word	0x2e300800

08000a04 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b090      	sub	sp, #64	; 0x40
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a6f      	ldr	r2, [pc, #444]	; (8000be0 <HAL_ADC_MspInit+0x1dc>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d133      	bne.n	8000a8e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a26:	4b6f      	ldr	r3, [pc, #444]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a6d      	ldr	r2, [pc, #436]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a30:	4b6c      	ldr	r3, [pc, #432]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d10e      	bne.n	8000a56 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a38:	4b6b      	ldr	r3, [pc, #428]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a3e:	4a6a      	ldr	r2, [pc, #424]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a40:	f043 0320 	orr.w	r3, r3, #32
 8000a44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a48:	4b67      	ldr	r3, [pc, #412]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b64      	ldr	r3, [pc, #400]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4a62      	ldr	r2, [pc, #392]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4b60      	ldr	r3, [pc, #384]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a84:	4619      	mov	r1, r3
 8000a86:	4859      	ldr	r0, [pc, #356]	; (8000bec <HAL_ADC_MspInit+0x1e8>)
 8000a88:	f006 fe58 	bl	800773c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a8c:	e0a3      	b.n	8000bd6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC2)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a57      	ldr	r2, [pc, #348]	; (8000bf0 <HAL_ADC_MspInit+0x1ec>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d169      	bne.n	8000b6c <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a98:	4b52      	ldr	r3, [pc, #328]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a51      	ldr	r2, [pc, #324]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000aa0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000aa2:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10e      	bne.n	8000ac8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab0:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ab2:	f043 0320 	orr.w	r3, r3, #32
 8000ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aba:	4b4b      	ldr	r3, [pc, #300]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac0:	f003 0320 	and.w	r3, r3, #32
 8000ac4:	623b      	str	r3, [r7, #32]
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b47      	ldr	r3, [pc, #284]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a46      	ldr	r2, [pc, #280]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a3e      	ldr	r2, [pc, #248]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	4a37      	ldr	r2, [pc, #220]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b22:	2340      	movs	r3, #64	; 0x40
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b32:	4619      	mov	r1, r3
 8000b34:	482d      	ldr	r0, [pc, #180]	; (8000bec <HAL_ADC_MspInit+0x1e8>)
 8000b36:	f006 fe01 	bl	800773c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <HAL_ADC_MspInit+0x1f0>)
 8000b4e:	f006 fdf5 	bl	800773c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b62:	4619      	mov	r1, r3
 8000b64:	4824      	ldr	r0, [pc, #144]	; (8000bf8 <HAL_ADC_MspInit+0x1f4>)
 8000b66:	f006 fde9 	bl	800773c <HAL_GPIO_Init>
}
 8000b6a:	e034      	b.n	8000bd6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_ADC_MspInit+0x1f8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12f      	bne.n	8000bd6 <HAL_ADC_MspInit+0x1d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <HAL_ADC_MspInit+0x1f0>)
 8000bc6:	f006 fdb9 	bl	800773c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000bca:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000bce:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000bd2:	f004 fd7f 	bl	80056d4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000bd6:	bf00      	nop
 8000bd8:	3740      	adds	r7, #64	; 0x40
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40022000 	.word	0x40022000
 8000be4:	2400044c 	.word	0x2400044c
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	40022100 	.word	0x40022100
 8000bf4:	58020800 	.word	0x58020800
 8000bf8:	58020400 	.word	0x58020400
 8000bfc:	58026000 	.word	0x58026000

08000c00 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2224      	movs	r2, #36	; 0x24
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f015 fcea 	bl	80165e6 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MX_DAC1_Init+0x74>)
 8000c16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c18:	4815      	ldr	r0, [pc, #84]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c1a:	f005 fedb 	bl	80069d4 <HAL_DAC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c24:	f001 fa16 	bl	8002054 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000c34:	2302      	movs	r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4619      	mov	r1, r3
 8000c42:	480b      	ldr	r0, [pc, #44]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c44:	f005 fee8 	bl	8006a18 <HAL_DAC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c4e:	f001 fa01 	bl	8002054 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2210      	movs	r2, #16
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c5a:	f005 fedd 	bl	8006a18 <HAL_DAC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000c64:	f001 f9f6 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	24004e0c 	.word	0x24004e0c
 8000c74:	40007400 	.word	0x40007400

08000c78 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <HAL_DAC_MspInit+0x80>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d129      	bne.n	8000cee <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca0:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cd6:	2330      	movs	r3, #48	; 0x30
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_DAC_MspInit+0x88>)
 8000cea:	f006 fd27 	bl	800773c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40007400 	.word	0x40007400
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58020000 	.word	0x58020000

08000d04 <RTC_CalendarShow>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

static void RTC_CalendarShow(RTC_DateTypeDef *sdatestructureget,RTC_TimeTypeDef *stimestructureget)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
   /* Both time and date must be obtained or RTC cannot be read next time */
  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, stimestructureget, RTC_FORMAT_BIN);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <RTC_CalendarShow+0x28>)
 8000d14:	f00b ff88 	bl	800cc28 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, sdatestructureget, RTC_FORMAT_BIN);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <RTC_CalendarShow+0x28>)
 8000d1e:	f00b ffdf 	bl	800cce0 <HAL_RTC_GetDate>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24004f34 	.word	0x24004f34

08000d30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <vApplicationGetIdleTaskMemory+0x30>)
 8000d46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	24000450 	.word	0x24000450
 8000d60:	24000504 	.word	0x24000504

08000d64 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b0b8      	sub	sp, #224	; 0xe0
 8000d68:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ea0 <MX_FREERTOS_Init+0x13c>)
 8000d6c:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000d70:	461d      	mov	r5, r3
 8000d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f013 fa5f 	bl	8014248 <osThreadCreate>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a45      	ldr	r2, [pc, #276]	; (8000ea4 <MX_FREERTOS_Init+0x140>)
 8000d8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 256);
 8000d90:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <MX_FREERTOS_Init+0x144>)
 8000d92:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000d96:	461d      	mov	r5, r3
 8000d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000da0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000da4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f013 fa4c 	bl	8014248 <osThreadCreate>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a3e      	ldr	r2, [pc, #248]	; (8000eac <MX_FREERTOS_Init+0x148>)
 8000db4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000db6:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <MX_FREERTOS_Init+0x14c>)
 8000db8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000dca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f013 fa39 	bl	8014248 <osThreadCreate>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a36      	ldr	r2, [pc, #216]	; (8000eb4 <MX_FREERTOS_Init+0x150>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <MX_FREERTOS_Init+0x154>)
 8000dde:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000de2:	461d      	mov	r5, r3
 8000de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000df0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f013 fa26 	bl	8014248 <osThreadCreate>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <MX_FREERTOS_Init+0x158>)
 8000e00:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 128);
 8000e02:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <MX_FREERTOS_Init+0x15c>)
 8000e04:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000e08:	461d      	mov	r5, r3
 8000e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000e16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f013 fa13 	bl	8014248 <osThreadCreate>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <MX_FREERTOS_Init+0x160>)
 8000e26:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, StartTask06, osPriorityNormal, 0, 128);
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <MX_FREERTOS_Init+0x164>)
 8000e2a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e2e:	461d      	mov	r5, r3
 8000e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8000e3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f013 fa00 	bl	8014248 <osThreadCreate>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <MX_FREERTOS_Init+0x168>)
 8000e4c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, StartTask07, osPriorityNormal, 0, 128);
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_FREERTOS_Init+0x16c>)
 8000e50:	f107 041c 	add.w	r4, r7, #28
 8000e54:	461d      	mov	r5, r3
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f013 f9ed 	bl	8014248 <osThreadCreate>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MX_FREERTOS_Init+0x170>)
 8000e72:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask08 */
  osThreadDef(myTask08, StartTask08, osPriorityNormal, 0, 128);
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_FREERTOS_Init+0x174>)
 8000e76:	463c      	mov	r4, r7
 8000e78:	461d      	mov	r5, r3
 8000e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask08Handle = osThreadCreate(osThread(myTask08), NULL);
 8000e86:	463b      	mov	r3, r7
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f013 f9dc 	bl	8014248 <osThreadCreate>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_FREERTOS_Init+0x178>)
 8000e94:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000e96:	bf00      	nop
 8000e98:	37e0      	adds	r7, #224	; 0xe0
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08019348 	.word	0x08019348
 8000ea4:	24004e28 	.word	0x24004e28
 8000ea8:	08019364 	.word	0x08019364
 8000eac:	24004e90 	.word	0x24004e90
 8000eb0:	08019380 	.word	0x08019380
 8000eb4:	24004eac 	.word	0x24004eac
 8000eb8:	0801939c 	.word	0x0801939c
 8000ebc:	24004e3c 	.word	0x24004e3c
 8000ec0:	080193b8 	.word	0x080193b8
 8000ec4:	24004e38 	.word	0x24004e38
 8000ec8:	080193d4 	.word	0x080193d4
 8000ecc:	24004ed0 	.word	0x24004ed0
 8000ed0:	080193f0 	.word	0x080193f0
 8000ed4:	24004eb0 	.word	0x24004eb0
 8000ed8:	0801940c 	.word	0x0801940c
 8000edc:	24004e40 	.word	0x24004e40

08000ee0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ee8:	f014 fd28 	bl	801593c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
		 HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_12);
 8000eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <StartDefaultTask+0x28>)
 8000ef2:	f006 fe04 	bl	8007afe <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin( GPIOE, GPIO_PIN_3);
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <StartDefaultTask+0x2c>)
 8000efa:	f006 fe00 	bl	8007afe <HAL_GPIO_TogglePin>


	//	 HAL_UART_Transmit(&huart4, GUI_sum_mode,sizeof(GUI_sum_mode), 100);

    osDelay(50);
 8000efe:	2032      	movs	r0, #50	; 0x32
 8000f00:	f013 f9ee 	bl	80142e0 <osDelay>
		 HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_12);
 8000f04:	e7f2      	b.n	8000eec <StartDefaultTask+0xc>
 8000f06:	bf00      	nop
 8000f08:	58020400 	.word	0x58020400
 8000f0c:	58021000 	.word	0x58021000

08000f10 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint16_t Dwin_mess;

	while (1)
	{

		if (Rx_recv)   //DWIN string is get completely
 8000f18:	4bc4      	ldr	r3, [pc, #784]	; (800122c <StartTask02+0x31c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 82b8 	beq.w	8001492 <StartTask02+0x582>
		{
			Rx_recv = 0;   //confirmed Rx_rec
 8000f22:	4bc2      	ldr	r3, [pc, #776]	; (800122c <StartTask02+0x31c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
			GUI_boot = true;
 8000f28:	4bc1      	ldr	r3, [pc, #772]	; (8001230 <StartTask02+0x320>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]

			Dwin_mess = (Rx1_Buffer[4] << 8) + Rx1_Buffer[5];
 8000f2e:	4bc1      	ldr	r3, [pc, #772]	; (8001234 <StartTask02+0x324>)
 8000f30:	791b      	ldrb	r3, [r3, #4]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4bbe      	ldr	r3, [pc, #760]	; (8001234 <StartTask02+0x324>)
 8000f3a:	795b      	ldrb	r3, [r3, #5]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	81bb      	strh	r3, [r7, #12]

			switch (Dwin_mess)
 8000f42:	89bb      	ldrh	r3, [r7, #12]
 8000f44:	f241 6215 	movw	r2, #5653	; 0x1615
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	f300 82a7 	bgt.w	800149c <StartTask02+0x58c>
 8000f4e:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8000f52:	da65      	bge.n	8001020 <StartTask02+0x110>
 8000f54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000f58:	f000 809f 	beq.w	800109a <StartTask02+0x18a>
 8000f5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000f60:	f300 829c 	bgt.w	800149c <StartTask02+0x58c>
 8000f64:	f241 3245 	movw	r2, #4933	; 0x1345
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	f000 81a4 	beq.w	80012b6 <StartTask02+0x3a6>
 8000f6e:	f241 3245 	movw	r2, #4933	; 0x1345
 8000f72:	4293      	cmp	r3, r2
 8000f74:	f300 8292 	bgt.w	800149c <StartTask02+0x58c>
 8000f78:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8000f7c:	f000 8131 	beq.w	80011e2 <StartTask02+0x2d2>
 8000f80:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8000f84:	f300 828a 	bgt.w	800149c <StartTask02+0x58c>
 8000f88:	f241 3205 	movw	r2, #4869	; 0x1305
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	f000 81b8 	beq.w	8001302 <StartTask02+0x3f2>
 8000f92:	f241 3205 	movw	r2, #4869	; 0x1305
 8000f96:	4293      	cmp	r3, r2
 8000f98:	f300 8280 	bgt.w	800149c <StartTask02+0x58c>
 8000f9c:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8000fa0:	f000 81a2 	beq.w	80012e8 <StartTask02+0x3d8>
 8000fa4:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8000fa8:	f300 8278 	bgt.w	800149c <StartTask02+0x58c>
 8000fac:	f241 2298 	movw	r2, #4760	; 0x1298
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	f000 80e5 	beq.w	8001180 <StartTask02+0x270>
 8000fb6:	f241 2298 	movw	r2, #4760	; 0x1298
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	f300 826e 	bgt.w	800149c <StartTask02+0x58c>
 8000fc0:	f241 2296 	movw	r2, #4758	; 0x1296
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	f000 80a7 	beq.w	8001118 <StartTask02+0x208>
 8000fca:	f241 2296 	movw	r2, #4758	; 0x1296
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	f300 8264 	bgt.w	800149c <StartTask02+0x58c>
 8000fd4:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000fd8:	f000 81c5 	beq.w	8001366 <StartTask02+0x456>
 8000fdc:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000fe0:	f300 825c 	bgt.w	800149c <StartTask02+0x58c>
 8000fe4:	f5b3 5f93 	cmp.w	r3, #4704	; 0x1260
 8000fe8:	f000 81b2 	beq.w	8001350 <StartTask02+0x440>
 8000fec:	f5b3 5f93 	cmp.w	r3, #4704	; 0x1260
 8000ff0:	f300 8254 	bgt.w	800149c <StartTask02+0x58c>
 8000ff4:	f241 2250 	movw	r2, #4688	; 0x1250
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	f000 8086 	beq.w	800110a <StartTask02+0x1fa>
 8000ffe:	f241 2250 	movw	r2, #4688	; 0x1250
 8001002:	4293      	cmp	r3, r2
 8001004:	f300 824a 	bgt.w	800149c <StartTask02+0x58c>
 8001008:	f5b3 5f92 	cmp.w	r3, #4672	; 0x1240
 800100c:	d076      	beq.n	80010fc <StartTask02+0x1ec>
 800100e:	f5b3 5f92 	cmp.w	r3, #4672	; 0x1240
 8001012:	f300 8243 	bgt.w	800149c <StartTask02+0x58c>
 8001016:	2b0f      	cmp	r3, #15
 8001018:	d036      	beq.n	8001088 <StartTask02+0x178>
 800101a:	2b14      	cmp	r3, #20
 800101c:	d038      	beq.n	8001090 <StartTask02+0x180>
 800101e:	e23d      	b.n	800149c <StartTask02+0x58c>
 8001020:	f5a3 53b0 	sub.w	r3, r3, #5632	; 0x1600
 8001024:	2b15      	cmp	r3, #21
 8001026:	f200 8239 	bhi.w	800149c <StartTask02+0x58c>
 800102a:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <StartTask02+0x120>)
 800102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001030:	0800149d 	.word	0x0800149d
 8001034:	0800149d 	.word	0x0800149d
 8001038:	08001371 	.word	0x08001371
 800103c:	080013c5 	.word	0x080013c5
 8001040:	0800149d 	.word	0x0800149d
 8001044:	0800135b 	.word	0x0800135b
 8001048:	0800140d 	.word	0x0800140d
 800104c:	0800149d 	.word	0x0800149d
 8001050:	08001455 	.word	0x08001455
 8001054:	0800148d 	.word	0x0800148d
 8001058:	0800149d 	.word	0x0800149d
 800105c:	0800149d 	.word	0x0800149d
 8001060:	0800149d 	.word	0x0800149d
 8001064:	0800149d 	.word	0x0800149d
 8001068:	0800149d 	.word	0x0800149d
 800106c:	0800149d 	.word	0x0800149d
 8001070:	0800149d 	.word	0x0800149d
 8001074:	0800149d 	.word	0x0800149d
 8001078:	0800149d 	.word	0x0800149d
 800107c:	0800149d 	.word	0x0800149d
 8001080:	0800131d 	.word	0x0800131d
 8001084:	08001337 	.word	0x08001337
			{
			//Take VP from receive data

			case (0x0F):     // Check LCD power on?
								GUI_boot = true;
 8001088:	4b69      	ldr	r3, [pc, #420]	; (8001230 <StartTask02+0x320>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
			break;
 800108e:	e205      	b.n	800149c <StartTask02+0x58c>

			case (0x0014): //Read no of page on work
								page = Rx1_Buffer[8];
 8001090:	4b68      	ldr	r3, [pc, #416]	; (8001234 <StartTask02+0x324>)
 8001092:	7a1a      	ldrb	r2, [r3, #8]
 8001094:	4b68      	ldr	r3, [pc, #416]	; (8001238 <StartTask02+0x328>)
 8001096:	701a      	strb	r2, [r3, #0]
			break;
 8001098:	e200      	b.n	800149c <StartTask02+0x58c>

			case (0x1400):  //STOP, READY  Variable GUI
				if (!Ready)
 800109a:	4b68      	ldr	r3, [pc, #416]	; (800123c <StartTask02+0x32c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01a      	beq.n	80010de <StartTask02+0x1ce>
				{ //STOP
					Ready = 1;
 80010a8:	4b64      	ldr	r3, [pc, #400]	; (800123c <StartTask02+0x32c>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
					DF_Play(S_ready);  //Ready
 80010ae:	2019      	movs	r0, #25
 80010b0:	f7ff fb4f 	bl	8000752 <DF_Play>
					osDelay(200);
 80010b4:	20c8      	movs	r0, #200	; 0xc8
 80010b6:	f013 f913 	bl	80142e0 <osDelay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Interloc
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c0:	485f      	ldr	r0, [pc, #380]	; (8001240 <StartTask02+0x330>)
 80010c2:	f006 fd03 	bl	8007acc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // AKELA pointer
 80010c6:	2201      	movs	r2, #1
 80010c8:	2101      	movs	r1, #1
 80010ca:	485e      	ldr	r0, [pc, #376]	; (8001244 <StartTask02+0x334>)
 80010cc:	f006 fcfe 	bl	8007acc <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart1, GUI_stop, sizeof(GUI_stop), 100);
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	2208      	movs	r2, #8
 80010d4:	495c      	ldr	r1, [pc, #368]	; (8001248 <StartTask02+0x338>)
 80010d6:	485d      	ldr	r0, [pc, #372]	; (800124c <StartTask02+0x33c>)
 80010d8:	f00e f8f3 	bl	800f2c2 <HAL_UART_Transmit>
					Ready = 0;
					DF_Play(S_stop);  //Stop
					osDelay(200);
	//				// GUI_ready2stop();
				}
			break;
 80010dc:	e1db      	b.n	8001496 <StartTask02+0x586>
				else if (Ready)
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <StartTask02+0x32c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 81d7 	beq.w	8001496 <StartTask02+0x586>
					Ready = 0;
 80010e8:	4b54      	ldr	r3, [pc, #336]	; (800123c <StartTask02+0x32c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
					DF_Play(S_stop);  //Stop
 80010ee:	2005      	movs	r0, #5
 80010f0:	f7ff fb2f 	bl	8000752 <DF_Play>
					osDelay(200);
 80010f4:	20c8      	movs	r0, #200	; 0xc8
 80010f6:	f013 f8f3 	bl	80142e0 <osDelay>
			break;
 80010fa:	e1cc      	b.n	8001496 <StartTask02+0x586>

			case (0x1240):  //TONING Page switching
			Stamp = 0;
 80010fc:	4b54      	ldr	r3, [pc, #336]	; (8001250 <StartTask02+0x340>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
			DF_Play(S_toning); //Toning sound
 8001102:	201a      	movs	r0, #26
 8001104:	f7ff fb25 	bl	8000752 <DF_Play>
			//  EEPROM_Read(Last_mode); //save current mode
			// // show_parameter_toning();
			//  show_ST_key_value();
			// // GUI_ready2stop();
			break;
 8001108:	e1c8      	b.n	800149c <StartTask02+0x58c>

			case (0x1250):  //STAMP page switching
			Stamp = 1;
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <StartTask02+0x340>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
			DF_Play(S_stamp);  //Stamp
 8001110:	2018      	movs	r0, #24
 8001112:	f7ff fb1e 	bl	8000752 <DF_Play>
			//  EEPROM_Read(Last_mode);  //save current mode
			// show_parameter_stamp();
			//  show_ST_key_value();
			// // GUI_ready2stop();
			break;
 8001116:	e1c1      	b.n	800149c <StartTask02+0x58c>

			// ===  Jump to Stamp mode from Monitor mode
			case (0x1296):
			DF_Play(S_Beek);
 8001118:	2013      	movs	r0, #19
 800111a:	f7ff fb1a 	bl	8000752 <DF_Play>
			Monitor = 0;
 800111e:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <StartTask02+0x344>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]

			Stamp = 1;
 8001124:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <StartTask02+0x340>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
			DF_Play(S_stamp);  //Stamp
 800112a:	2018      	movs	r0, #24
 800112c:	f7ff fb11 	bl	8000752 <DF_Play>
			//  EEPROM_Read(Last_mode);  //save current mode
			// show_parameter_stamp();
			//  show_ST_key_value();
			// // GUI_ready2stop(); // clear "ready" state

			GUI_mon_Laser_ON[7] = 1; //Laser OFF
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <StartTask02+0x348>)
 8001132:	2201      	movs	r2, #1
 8001134:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8001136:	2364      	movs	r3, #100	; 0x64
 8001138:	2208      	movs	r2, #8
 800113a:	4947      	ldr	r1, [pc, #284]	; (8001258 <StartTask02+0x348>)
 800113c:	4843      	ldr	r0, [pc, #268]	; (800124c <StartTask02+0x33c>)
 800113e:	f00e f8c0 	bl	800f2c2 <HAL_UART_Transmit>

			// Stop "Laser ON" over Monitor mode
		//	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
		//	HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Interlock stop
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001148:	483d      	ldr	r0, [pc, #244]	; (8001240 <StartTask02+0x330>)
 800114a:	f006 fcbf 	bl	8007acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Enable Stop
 800114e:	2200      	movs	r2, #0
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	4842      	ldr	r0, [pc, #264]	; (800125c <StartTask02+0x34c>)
 8001154:	f006 fcba 	bl	8007acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Fire lamp Off
 8001158:	2200      	movs	r2, #0
 800115a:	2104      	movs	r1, #4
 800115c:	4838      	ldr	r0, [pc, #224]	; (8001240 <StartTask02+0x330>)
 800115e:	f006 fcb5 	bl	8007acc <HAL_GPIO_WritePin>

			GUI_sum_mode[7] = 1;
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <StartTask02+0x350>)
 8001164:	2201      	movs	r2, #1
 8001166:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2208      	movs	r2, #8
 800116c:	493c      	ldr	r1, [pc, #240]	; (8001260 <StartTask02+0x350>)
 800116e:	4837      	ldr	r0, [pc, #220]	; (800124c <StartTask02+0x33c>)
 8001170:	f00e f8a7 	bl	800f2c2 <HAL_UART_Transmit>

			vTaskSuspend(myTask05Handle);	 // STOP DefaultTask
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <StartTask02+0x354>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f013 fb57 	bl	801482c <vTaskSuspend>
			break;
 800117e:	e18d      	b.n	800149c <StartTask02+0x58c>


			// ===  Move to Monitor mode
			case (0x1298):
			DF_Play(S_Beek);
 8001180:	2013      	movs	r0, #19
 8001182:	f7ff fae6 	bl	8000752 <DF_Play>
			Monitor = true;
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <StartTask02+0x344>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
			// // GUI_ready2stop(); // clear "ready" state

			GUI_mon_Laser_ON[7] = 1;  //Laser OFF
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <StartTask02+0x348>)
 800118e:	2201      	movs	r2, #1
 8001190:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8001192:	2364      	movs	r3, #100	; 0x64
 8001194:	2208      	movs	r2, #8
 8001196:	4930      	ldr	r1, [pc, #192]	; (8001258 <StartTask02+0x348>)
 8001198:	482c      	ldr	r0, [pc, #176]	; (800124c <StartTask02+0x33c>)
 800119a:	f00e f892 	bl	800f2c2 <HAL_UART_Transmit>

			GUI_mon_power[6] = 0;     //Start monitor page with Power = 0
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <StartTask02+0x358>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	719a      	strb	r2, [r3, #6]
			GUI_mon_power[7] = 0;
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <StartTask02+0x358>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_power, sizeof(GUI_mon_power),100);//show power0~6
 80011aa:	2364      	movs	r3, #100	; 0x64
 80011ac:	2208      	movs	r2, #8
 80011ae:	492e      	ldr	r1, [pc, #184]	; (8001268 <StartTask02+0x358>)
 80011b0:	4826      	ldr	r0, [pc, #152]	; (800124c <StartTask02+0x33c>)
 80011b2:	f00e f886 	bl	800f2c2 <HAL_UART_Transmit>

			// Stop "Laser ON" over Monitor mode
	//		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//		HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Interlock stop
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011bc:	4820      	ldr	r0, [pc, #128]	; (8001240 <StartTask02+0x330>)
 80011be:	f006 fc85 	bl	8007acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Enable Stop
 80011c2:	2200      	movs	r2, #0
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	4825      	ldr	r0, [pc, #148]	; (800125c <StartTask02+0x34c>)
 80011c8:	f006 fc80 	bl	8007acc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Fire lamp Off
 80011cc:	2200      	movs	r2, #0
 80011ce:	2104      	movs	r1, #4
 80011d0:	481b      	ldr	r0, [pc, #108]	; (8001240 <StartTask02+0x330>)
 80011d2:	f006 fc7b 	bl	8007acc <HAL_GPIO_WritePin>

			vTaskResume(myTask05Handle);   // Strat Monitoring Task(5)
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <StartTask02+0x354>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f013 fbea 	bl	80149b4 <vTaskResume>
			break;
 80011e0:	e15c      	b.n	800149c <StartTask02+0x58c>



			// ===  Laser ON at Monitor mode
			case (0x1340):
				if (!Laser_ON)
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <StartTask02+0x35c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f083 0301 	eor.w	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d03f      	beq.n	8001270 <StartTask02+0x360>
				{
					Laser_ON = 1;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <StartTask02+0x35c>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
					DF_Play(S_ready);  //Ready
 80011f6:	2019      	movs	r0, #25
 80011f8:	f7ff faab 	bl	8000752 <DF_Play>
					osDelay(200);
 80011fc:	20c8      	movs	r0, #200	; 0xc8
 80011fe:	f013 f86f 	bl	80142e0 <osDelay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Interloc
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <StartTask02+0x330>)
 800120a:	f006 fc5f 	bl	8007acc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // AKELA pointer
 800120e:	2201      	movs	r2, #1
 8001210:	2101      	movs	r1, #1
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <StartTask02+0x334>)
 8001214:	f006 fc5a 	bl	8007acc <HAL_GPIO_WritePin>
					GUI_mon_Laser_ON[7] = 0;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <StartTask02+0x348>)
 800121a:	2200      	movs	r2, #0
 800121c:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 800121e:	2364      	movs	r3, #100	; 0x64
 8001220:	2208      	movs	r2, #8
 8001222:	490d      	ldr	r1, [pc, #52]	; (8001258 <StartTask02+0x348>)
 8001224:	4809      	ldr	r0, [pc, #36]	; (800124c <StartTask02+0x33c>)
 8001226:	f00e f84c 	bl	800f2c2 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
					HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Interlock on
					HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0); // Enable stop
					HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0); // AKELA pointer Off
				}
			break;
 800122a:	e137      	b.n	800149c <StartTask02+0x58c>
 800122c:	24004e32 	.word	0x24004e32
 8001230:	24004e30 	.word	0x24004e30
 8001234:	24004eb8 	.word	0x24004eb8
 8001238:	24004eb4 	.word	0x24004eb4
 800123c:	24004eca 	.word	0x24004eca
 8001240:	58020400 	.word	0x58020400
 8001244:	58020800 	.word	0x58020800
 8001248:	24000000 	.word	0x24000000
 800124c:	24005190 	.word	0x24005190
 8001250:	24004e36 	.word	0x24004e36
 8001254:	24004e8c 	.word	0x24004e8c
 8001258:	2400003c 	.word	0x2400003c
 800125c:	58020000 	.word	0x58020000
 8001260:	24000020 	.word	0x24000020
 8001264:	24004e38 	.word	0x24004e38
 8001268:	24000034 	.word	0x24000034
 800126c:	24004e2f 	.word	0x24004e2f
					Laser_ON = 0;
 8001270:	4b8c      	ldr	r3, [pc, #560]	; (80014a4 <StartTask02+0x594>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
					DF_Play(S_stop);  //Stop
 8001276:	2005      	movs	r0, #5
 8001278:	f7ff fa6b 	bl	8000752 <DF_Play>
					osDelay(200);
 800127c:	20c8      	movs	r0, #200	; 0xc8
 800127e:	f013 f82f 	bl	80142e0 <osDelay>
					GUI_mon_Laser_ON[7] = 1;
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <StartTask02+0x598>)
 8001284:	2201      	movs	r2, #1
 8001286:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	2208      	movs	r2, #8
 800128c:	4986      	ldr	r1, [pc, #536]	; (80014a8 <StartTask02+0x598>)
 800128e:	4887      	ldr	r0, [pc, #540]	; (80014ac <StartTask02+0x59c>)
 8001290:	f00e f817 	bl	800f2c2 <HAL_UART_Transmit>
					HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Interlock on
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800129a:	4885      	ldr	r0, [pc, #532]	; (80014b0 <StartTask02+0x5a0>)
 800129c:	f006 fc16 	bl	8007acc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0); // Enable stop
 80012a0:	2200      	movs	r2, #0
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	4883      	ldr	r0, [pc, #524]	; (80014b4 <StartTask02+0x5a4>)
 80012a6:	f006 fc11 	bl	8007acc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0); // AKELA pointer Off
 80012aa:	2200      	movs	r2, #0
 80012ac:	2101      	movs	r1, #1
 80012ae:	4882      	ldr	r0, [pc, #520]	; (80014b8 <StartTask02+0x5a8>)
 80012b0:	f006 fc0c 	bl	8007acc <HAL_GPIO_WritePin>
			break;
 80012b4:	e0f2      	b.n	800149c <StartTask02+0x58c>



			// ===  Increament & decrement adjustment at Monitoring
			case (0x1345):
			DF_Play(S_Beek);
 80012b6:	2013      	movs	r0, #19
 80012b8:	f7ff fa4b 	bl	8000752 <DF_Play>
			// 5*330 = 1650:최고 DAC �???, ?��?�� HP?��?��?�� CW�??? 5 W 출력?��, 330?? Cut&Try�??? ?��?? �???
			Power_DAC = ((Rx1_Buffer[7] << 8) + Rx1_Buffer[8])*330;  //0~2100
 80012bc:	4b7f      	ldr	r3, [pc, #508]	; (80014bc <StartTask02+0x5ac>)
 80012be:	79db      	ldrb	r3, [r3, #7]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4a7e      	ldr	r2, [pc, #504]	; (80014bc <StartTask02+0x5ac>)
 80012c4:	7a12      	ldrb	r2, [r2, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b7b      	ldr	r3, [pc, #492]	; (80014c0 <StartTask02+0x5b0>)
 80012d4:	601a      	str	r2, [r3, #0]
			GUI_mon_power[6] = Rx1_Buffer[7];  //Last_mpower_high
 80012d6:	4b79      	ldr	r3, [pc, #484]	; (80014bc <StartTask02+0x5ac>)
 80012d8:	79da      	ldrb	r2, [r3, #7]
 80012da:	4b7a      	ldr	r3, [pc, #488]	; (80014c4 <StartTask02+0x5b4>)
 80012dc:	719a      	strb	r2, [r3, #6]
			GUI_mon_power[7] = Rx1_Buffer[8];  //Last_mpower_low (real)
 80012de:	4b77      	ldr	r3, [pc, #476]	; (80014bc <StartTask02+0x5ac>)
 80012e0:	7a1a      	ldrb	r2, [r3, #8]
 80012e2:	4b78      	ldr	r3, [pc, #480]	; (80014c4 <StartTask02+0x5b4>)
 80012e4:	71da      	strb	r2, [r3, #7]
		//	HAL_UART_Transmit(&huart1, GUI_mon_power, sizeof(GUI_mon_power),100);//show power0~5

			//  EEPROM_Write(Last_mon_power_high, GUI_mon_power[6]);
			//  EEPROM_Write(Last_mon_power_low, GUI_mon_power[7]);

			break;
 80012e6:	e0d9      	b.n	800149c <StartTask02+0x58c>

			///////////////////
			case (0x1300):  //  Increament & decrement adjustment at STAMP
			DF_Play(S_Beek);
 80012e8:	2013      	movs	r0, #19
 80012ea:	f7ff fa32 	bl	8000752 <DF_Play>
			//  EEPROM_Write( Last_power_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_power_low, Rx1_Buffer[8]);
			Power_DAC = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8];  ///////
 80012ee:	4b73      	ldr	r3, [pc, #460]	; (80014bc <StartTask02+0x5ac>)
 80012f0:	79db      	ldrb	r3, [r3, #7]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	4a71      	ldr	r2, [pc, #452]	; (80014bc <StartTask02+0x5ac>)
 80012f6:	7a12      	ldrb	r2, [r2, #8]
 80012f8:	4413      	add	r3, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <StartTask02+0x5b0>)
 80012fe:	601a      	str	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 8001300:	e0cc      	b.n	800149c <StartTask02+0x58c>

			case (0x1305):  // Increament & decrement adjustment at Toning
			DF_Play(S_Beek);
 8001302:	2013      	movs	r0, #19
 8001304:	f7ff fa25 	bl	8000752 <DF_Play>
			//  EEPROM_Write( Last_power_high_t, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_power_low_t, Rx1_Buffer[8]);
			Power_DAC_t = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8];  ///////
 8001308:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <StartTask02+0x5ac>)
 800130a:	79db      	ldrb	r3, [r3, #7]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4a6b      	ldr	r2, [pc, #428]	; (80014bc <StartTask02+0x5ac>)
 8001310:	7a12      	ldrb	r2, [r2, #8]
 8001312:	4413      	add	r3, r2
 8001314:	461a      	mov	r2, r3
 8001316:	4b6c      	ldr	r3, [pc, #432]	; (80014c8 <StartTask02+0x5b8>)
 8001318:	601a      	str	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 800131a:	e0bf      	b.n	800149c <StartTask02+0x58c>

			case (0x1614):  //save On_time value to eeprom
								//  EEPROM_Write( Last_on_time_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_on_time_low, Rx1_Buffer[8]);
			On_Time = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8]; ///////
 800131c:	4b67      	ldr	r3, [pc, #412]	; (80014bc <StartTask02+0x5ac>)
 800131e:	79db      	ldrb	r3, [r3, #7]
 8001320:	b29b      	uxth	r3, r3
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b29a      	uxth	r2, r3
 8001326:	4b65      	ldr	r3, [pc, #404]	; (80014bc <StartTask02+0x5ac>)
 8001328:	7a1b      	ldrb	r3, [r3, #8]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b66      	ldr	r3, [pc, #408]	; (80014cc <StartTask02+0x5bc>)
 8001332:	801a      	strh	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 8001334:	e0b2      	b.n	800149c <StartTask02+0x58c>

			case (0x1615):  //save Off_time value to eeprom
								//  EEPROM_Write( Last_off_time_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_off_time_low, Rx1_Buffer[8]);
			Off_Time = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8]; ///////
 8001336:	4b61      	ldr	r3, [pc, #388]	; (80014bc <StartTask02+0x5ac>)
 8001338:	79db      	ldrb	r3, [r3, #7]
 800133a:	b29b      	uxth	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b5e      	ldr	r3, [pc, #376]	; (80014bc <StartTask02+0x5ac>)
 8001342:	7a1b      	ldrb	r3, [r3, #8]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4413      	add	r3, r2
 8001348:	b29a      	uxth	r2, r3
 800134a:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <StartTask02+0x5c0>)
 800134c:	801a      	strh	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 800134e:	e0a5      	b.n	800149c <StartTask02+0x58c>

			case (0x1260):  //Pulse value to eeprom
			//  EEPROM_Write( Last_pulse, Rx1_Buffer[8]);
			Pulse = Rx1_Buffer[8];  ///////
 8001350:	4b5a      	ldr	r3, [pc, #360]	; (80014bc <StartTask02+0x5ac>)
 8001352:	7a1a      	ldrb	r2, [r3, #8]
 8001354:	4b5f      	ldr	r3, [pc, #380]	; (80014d4 <StartTask02+0x5c4>)
 8001356:	701a      	strb	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 8001358:	e0a0      	b.n	800149c <StartTask02+0x58c>

			case (0x1605):  //Repeat value to eeprom
			//  EEPROM_Write( Last_repeat, Rx1_Buffer[8]);
			Repeat = Rx1_Buffer[8];
 800135a:	4b58      	ldr	r3, [pc, #352]	; (80014bc <StartTask02+0x5ac>)
 800135c:	7a1b      	ldrb	r3, [r3, #8]
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <StartTask02+0x5c8>)
 8001362:	801a      	strh	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 8001364:	e09a      	b.n	800149c <StartTask02+0x58c>

			case (0x1280):  //Frequency value to eeprom
			//  EEPROM_Write( Last_frequency, Rx1_Buffer[8]);
			Freq = Rx1_Buffer[8];  ///////
 8001366:	4b55      	ldr	r3, [pc, #340]	; (80014bc <StartTask02+0x5ac>)
 8001368:	7a1a      	ldrb	r2, [r3, #8]
 800136a:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <StartTask02+0x5cc>)
 800136c:	701a      	strb	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 800136e:	e095      	b.n	800149c <StartTask02+0x58c>
			//  EEPROM_Write( Last_tcount_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_tcount_low, Rx1_Buffer[8]);
			break;

			case (0x1602):  //SOUND, MUTE Variable GUI
				if (Sound)
 8001370:	4b5b      	ldr	r3, [pc, #364]	; (80014e0 <StartTask02+0x5d0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d012      	beq.n	800139e <StartTask02+0x48e>
				{
					Sound = 0;
 8001378:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <StartTask02+0x5d0>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
					DF_Play(S_sound);  //sound
 800137e:	2007      	movs	r0, #7
 8001380:	f7ff f9e7 	bl	8000752 <DF_Play>
					//  EEPROM_Write( Last_sound, Sound);
					GUI_sound[7] = 0;
 8001384:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <StartTask02+0x5d4>)
 8001386:	2200      	movs	r2, #0
 8001388:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	2208      	movs	r2, #8
 800138e:	4955      	ldr	r1, [pc, #340]	; (80014e4 <StartTask02+0x5d4>)
 8001390:	4846      	ldr	r0, [pc, #280]	; (80014ac <StartTask02+0x59c>)
 8001392:	f00d ff96 	bl	800f2c2 <HAL_UART_Transmit>
					volume(19);
 8001396:	2013      	movs	r0, #19
 8001398:	f000 ffc4 	bl	8002324 <volume>
					GUI_sound[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
					volume(0);
				}
			//  EEPROM_Write( Last_sound, Sound);  //save current mode
			break;
 800139c:	e07e      	b.n	800149c <StartTask02+0x58c>
					Sound = true;
 800139e:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <StartTask02+0x5d0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
					DF_Play(S_mute);  //mute
 80013a4:	200b      	movs	r0, #11
 80013a6:	f7ff f9d4 	bl	8000752 <DF_Play>
					GUI_sound[7] = 1;
 80013aa:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <StartTask02+0x5d4>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
 80013b0:	2364      	movs	r3, #100	; 0x64
 80013b2:	2208      	movs	r2, #8
 80013b4:	494b      	ldr	r1, [pc, #300]	; (80014e4 <StartTask02+0x5d4>)
 80013b6:	483d      	ldr	r0, [pc, #244]	; (80014ac <StartTask02+0x59c>)
 80013b8:	f00d ff83 	bl	800f2c2 <HAL_UART_Transmit>
					volume(0);
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 ffb1 	bl	8002324 <volume>
			break;
 80013c2:	e06b      	b.n	800149c <StartTask02+0x58c>


			case (0x1603):  //FOOT, HAND Variable GUI
				if (Hand_foot)
 80013c4:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <StartTask02+0x5d8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00f      	beq.n	80013ec <StartTask02+0x4dc>
				{
					Hand_foot = 0;
 80013cc:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <StartTask02+0x5d8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
					DF_Play(S_hand);  //hand
 80013d2:	2008      	movs	r0, #8
 80013d4:	f7ff f9bd 	bl	8000752 <DF_Play>
					GUI_foot[7] = 0;
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <StartTask02+0x5dc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	2208      	movs	r2, #8
 80013e2:	4942      	ldr	r1, [pc, #264]	; (80014ec <StartTask02+0x5dc>)
 80013e4:	4831      	ldr	r0, [pc, #196]	; (80014ac <StartTask02+0x59c>)
 80013e6:	f00d ff6c 	bl	800f2c2 <HAL_UART_Transmit>
					DF_Play(S_foot); //foot
					GUI_foot[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
					//  EEPROM_Write( Last_Hand_foot, Hand_foot);
				}
			break;
 80013ea:	e057      	b.n	800149c <StartTask02+0x58c>
					Hand_foot = true;
 80013ec:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <StartTask02+0x5d8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
					DF_Play(S_foot); //foot
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff f9ad 	bl	8000752 <DF_Play>
					GUI_foot[7] = 1;
 80013f8:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <StartTask02+0x5dc>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
 80013fe:	2364      	movs	r3, #100	; 0x64
 8001400:	2208      	movs	r2, #8
 8001402:	493a      	ldr	r1, [pc, #232]	; (80014ec <StartTask02+0x5dc>)
 8001404:	4829      	ldr	r0, [pc, #164]	; (80014ac <StartTask02+0x59c>)
 8001406:	f00d ff5c 	bl	800f2c2 <HAL_UART_Transmit>
			break;
 800140a:	e047      	b.n	800149c <StartTask02+0x58c>

			//======  Select Total counter & energy  ============
			case (0x1606):  //Select between Toggle counts and Energy
				if (Count_energy)
 800140c:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <StartTask02+0x5e0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00f      	beq.n	8001434 <StartTask02+0x524>
				{
			    	Count_energy = 0;
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <StartTask02+0x5e0>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
					DF_Play(S_total_energy);
 800141a:	200d      	movs	r0, #13
 800141c:	f7ff f999 	bl	8000752 <DF_Play>
					GUI_sum_mode[7] = 0;
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <StartTask02+0x5e4>)
 8001422:	2200      	movs	r2, #0
 8001424:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8001426:	2364      	movs	r3, #100	; 0x64
 8001428:	2208      	movs	r2, #8
 800142a:	4932      	ldr	r1, [pc, #200]	; (80014f4 <StartTask02+0x5e4>)
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <StartTask02+0x59c>)
 800142e:	f00d ff48 	bl	800f2c2 <HAL_UART_Transmit>
					DF_Play(S_total_count);
					GUI_sum_mode[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
					//  EEPROM_Write( Last_Count_energy, Count_energy);
				}
			break;
 8001432:	e033      	b.n	800149c <StartTask02+0x58c>
					Count_energy = 1;
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <StartTask02+0x5e0>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
					DF_Play(S_total_count);
 800143a:	200e      	movs	r0, #14
 800143c:	f7ff f989 	bl	8000752 <DF_Play>
					GUI_sum_mode[7] = 1;
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <StartTask02+0x5e4>)
 8001442:	2201      	movs	r2, #1
 8001444:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	2208      	movs	r2, #8
 800144a:	492a      	ldr	r1, [pc, #168]	; (80014f4 <StartTask02+0x5e4>)
 800144c:	4817      	ldr	r0, [pc, #92]	; (80014ac <StartTask02+0x59c>)
 800144e:	f00d ff38 	bl	800f2c2 <HAL_UART_Transmit>
			break;
 8001452:	e023      	b.n	800149c <StartTask02+0x58c>

			//======  Clear Total counter value     ============
			case (0x1608):  // Clear Total counter value
								Key_memo++;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	3301      	adds	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
			if (Key_memo == GUI_save_delay)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d11c      	bne.n	800149a <StartTask02+0x58a>
			{
				DF_Play(S_clear);   //sound 'clear'
 8001460:	2006      	movs	r0, #6
 8001462:	f7ff f976 	bl	8000752 <DF_Play>
				sum_count = 0;
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <StartTask02+0x5e8>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
				sum_count_t = 0;
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <StartTask02+0x5ec>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
				sum_energy = 0;
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <StartTask02+0x5f0>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
				sum_energy_t = 0;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <StartTask02+0x5f4>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, GUI_sum_value,sizeof(GUI_sum_value), 100);
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	220a      	movs	r2, #10
 8001482:	4921      	ldr	r1, [pc, #132]	; (8001508 <StartTask02+0x5f8>)
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <StartTask02+0x59c>)
 8001486:	f00d ff1c 	bl	800f2c2 <HAL_UART_Transmit>
			}
			break;
 800148a:	e006      	b.n	800149a <StartTask02+0x58a>
			case (0x1609): // save last parameter to EEPROM, show value on S2 key
				if (Key_memo >= GUI_save_delay)
						;
				else
						;
			Key_memo = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
			break;
 8001490:	e004      	b.n	800149c <StartTask02+0x58c>



			default:
 8001492:	bf00      	nop
 8001494:	e002      	b.n	800149c <StartTask02+0x58c>
			break;
 8001496:	bf00      	nop
 8001498:	e000      	b.n	800149c <StartTask02+0x58c>
			break;
 800149a:	bf00      	nop
			}  //end of switch
			//================== End of Memory process ======================

		}   //if Rx_recv is received, it will be work.

		osDelay(Delay_task02);
 800149c:	2005      	movs	r0, #5
 800149e:	f012 ff1f 	bl	80142e0 <osDelay>
		if (Rx_recv)   //DWIN string is get completely
 80014a2:	e539      	b.n	8000f18 <StartTask02+0x8>
 80014a4:	24004e2f 	.word	0x24004e2f
 80014a8:	2400003c 	.word	0x2400003c
 80014ac:	24005190 	.word	0x24005190
 80014b0:	58020400 	.word	0x58020400
 80014b4:	58020000 	.word	0x58020000
 80014b8:	58020800 	.word	0x58020800
 80014bc:	24004eb8 	.word	0x24004eb8
 80014c0:	24004e68 	.word	0x24004e68
 80014c4:	24000034 	.word	0x24000034
 80014c8:	24004ed4 	.word	0x24004ed4
 80014cc:	24004e6c 	.word	0x24004e6c
 80014d0:	24004e96 	.word	0x24004e96
 80014d4:	24004e2d 	.word	0x24004e2d
 80014d8:	24004e20 	.word	0x24004e20
 80014dc:	24004e74 	.word	0x24004e74
 80014e0:	24004e2e 	.word	0x24004e2e
 80014e4:	24000008 	.word	0x24000008
 80014e8:	24004e48 	.word	0x24004e48
 80014ec:	24000018 	.word	0x24000018
 80014f0:	24004e2c 	.word	0x24004e2c
 80014f4:	24000020 	.word	0x24000020
 80014f8:	24004e78 	.word	0x24004e78
 80014fc:	24004e24 	.word	0x24004e24
 8001500:	24004e70 	.word	0x24004e70
 8001504:	24004e64 	.word	0x24004e64
 8001508:	24000028 	.word	0x24000028

0800150c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	static uint8_t Rx_len, Rx_indx, data, Rx4_indx;

	while (1)
	{
		//============= UART-4: Hand piece ==============
		if (isEmpty(&uart_4) == 0)
 8001514:	4858      	ldr	r0, [pc, #352]	; (8001678 <StartTask03+0x16c>)
 8001516:	f000 fa6c 	bl	80019f2 <isEmpty>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d153      	bne.n	80015c8 <StartTask03+0xbc>
		{
			data = pop(&uart_4);
 8001520:	4855      	ldr	r0, [pc, #340]	; (8001678 <StartTask03+0x16c>)
 8001522:	f000 fa47 	bl	80019b4 <pop>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <StartTask03+0x170>)
 800152c:	701a      	strb	r2, [r3, #0]

			if (data != 10)   // Line feed? new line
 800152e:	4b53      	ldr	r3, [pc, #332]	; (800167c <StartTask03+0x170>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b0a      	cmp	r3, #10
 8001534:	d00b      	beq.n	800154e <StartTask03+0x42>
			{
				Rx4_Buffer[Rx4_indx++] = data;
 8001536:	4b52      	ldr	r3, [pc, #328]	; (8001680 <StartTask03+0x174>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	b2d1      	uxtb	r1, r2
 800153e:	4a50      	ldr	r2, [pc, #320]	; (8001680 <StartTask03+0x174>)
 8001540:	7011      	strb	r1, [r2, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	4b4d      	ldr	r3, [pc, #308]	; (800167c <StartTask03+0x170>)
 8001546:	7819      	ldrb	r1, [r3, #0]
 8001548:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <StartTask03+0x178>)
 800154a:	5499      	strb	r1, [r3, r2]
 800154c:	e02d      	b.n	80015aa <StartTask03+0x9e>
			}
			else
			{
				Rx4_Buffer[0] = 0x30; // # -> 0 clear
 800154e:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <StartTask03+0x178>)
 8001550:	2230      	movs	r2, #48	; 0x30
 8001552:	701a      	strb	r2, [r3, #0]
				HP_lens = atoi(strtok(Rx4_Buffer, " ")); //Lens 1,2,3
 8001554:	494c      	ldr	r1, [pc, #304]	; (8001688 <StartTask03+0x17c>)
 8001556:	484b      	ldr	r0, [pc, #300]	; (8001684 <StartTask03+0x178>)
 8001558:	f015 fde2 	bl	8017120 <strtok>
 800155c:	4603      	mov	r3, r0
 800155e:	4618      	mov	r0, r3
 8001560:	f014 ff0c 	bl	801637c <atoi>
 8001564:	4603      	mov	r3, r0
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <StartTask03+0x180>)
 800156a:	701a      	strb	r2, [r3, #0]
				HP_Temp = atoi(strtok(NULL, " ")); //Temp. sensor data
 800156c:	4946      	ldr	r1, [pc, #280]	; (8001688 <StartTask03+0x17c>)
 800156e:	2000      	movs	r0, #0
 8001570:	f015 fdd6 	bl	8017120 <strtok>
 8001574:	4603      	mov	r3, r0
 8001576:	4618      	mov	r0, r3
 8001578:	f014 ff00 	bl	801637c <atoi>
 800157c:	4603      	mov	r3, r0
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b43      	ldr	r3, [pc, #268]	; (8001690 <StartTask03+0x184>)
 8001582:	801a      	strh	r2, [r3, #0]
				HP_Fire = atoi(strtok(NULL, " ")); //HP switch detect
 8001584:	4940      	ldr	r1, [pc, #256]	; (8001688 <StartTask03+0x17c>)
 8001586:	2000      	movs	r0, #0
 8001588:	f015 fdca 	bl	8017120 <strtok>
 800158c:	4603      	mov	r3, r0
 800158e:	4618      	mov	r0, r3
 8001590:	f014 fef4 	bl	801637c <atoi>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf14      	ite	ne
 800159a:	2301      	movne	r3, #1
 800159c:	2300      	moveq	r3, #0
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <StartTask03+0x188>)
 80015a2:	701a      	strb	r2, [r3, #0]

				Rx4_indx = 0;   // HP data is received
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <StartTask03+0x174>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
			}   //else

			if (HP_Fire)
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <StartTask03+0x188>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <StartTask03+0xb2>
			{
				 HAL_GPIO_WritePin( GPIOC, GPIO_PIN_7,GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	4838      	ldr	r0, [pc, #224]	; (8001698 <StartTask03+0x18c>)
 80015b8:	f006 fa88 	bl	8007acc <HAL_GPIO_WritePin>
 80015bc:	e004      	b.n	80015c8 <StartTask03+0xbc>
			}
			else
				 HAL_GPIO_WritePin( GPIOC, GPIO_PIN_7,GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	4835      	ldr	r0, [pc, #212]	; (8001698 <StartTask03+0x18c>)
 80015c4:	f006 fa82 	bl	8007acc <HAL_GPIO_WritePin>

    	}  //if

		//============= UART-1: DWIN LCD ==============
		if (isEmpty(&uart_1) == 0)
 80015c8:	4834      	ldr	r0, [pc, #208]	; (800169c <StartTask03+0x190>)
 80015ca:	f000 fa12 	bl	80019f2 <isEmpty>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d14d      	bne.n	8001670 <StartTask03+0x164>
		{  /////Ring buffer check and get all

			data = pop(&uart_1);
 80015d4:	4831      	ldr	r0, [pc, #196]	; (800169c <StartTask03+0x190>)
 80015d6:	f000 f9ed 	bl	80019b4 <pop>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <StartTask03+0x170>)
 80015e0:	701a      	strb	r2, [r3, #0]

			if (data == 0x5A)
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <StartTask03+0x170>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b5a      	cmp	r3, #90	; 0x5a
 80015e8:	d107      	bne.n	80015fa <StartTask03+0xee>
			{			//Find head of string 0x5A/90
				Rx1_Buffer[0] = data;
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <StartTask03+0x170>)
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <StartTask03+0x194>)
 80015f0:	701a      	strb	r2, [r3, #0]
				Rx_recv = 0;
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <StartTask03+0x198>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e03a      	b.n	8001670 <StartTask03+0x164>
			}
			else if (data == 0xA5)
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <StartTask03+0x170>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2ba5      	cmp	r3, #165	; 0xa5
 8001600:	d107      	bne.n	8001612 <StartTask03+0x106>
			{	//head of string  0xA5/165
				Rx1_Buffer[1] = data;
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <StartTask03+0x170>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <StartTask03+0x194>)
 8001608:	705a      	strb	r2, [r3, #1]
				Rx_len = 1;			//Ready to get length of string
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <StartTask03+0x19c>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	e02e      	b.n	8001670 <StartTask03+0x164>
			}

			else if (Rx_len == 1)
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <StartTask03+0x19c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10a      	bne.n	8001630 <StartTask03+0x124>
			{	//Is it a length of string
				Rx1_Buffer[2] = data;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <StartTask03+0x170>)
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <StartTask03+0x194>)
 8001620:	709a      	strb	r2, [r3, #2]
				Rx_len = 0;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <StartTask03+0x19c>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
				Rx_indx = 3;
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <StartTask03+0x1a0>)
 800162a:	2203      	movs	r2, #3
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	e01f      	b.n	8001670 <StartTask03+0x164>
			}

			else
			{
				if (Rx1_Buffer[2] > Rx_indx)
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <StartTask03+0x194>)
 8001632:	789a      	ldrb	r2, [r3, #2]
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <StartTask03+0x1a0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d90b      	bls.n	8001654 <StartTask03+0x148>
					Rx1_Buffer[Rx_indx++] = data;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <StartTask03+0x1a0>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	b2d1      	uxtb	r1, r2
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <StartTask03+0x1a0>)
 8001646:	7011      	strb	r1, [r2, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <StartTask03+0x170>)
 800164c:	7819      	ldrb	r1, [r3, #0]
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <StartTask03+0x194>)
 8001650:	5499      	strb	r1, [r3, r2]
 8001652:	e00d      	b.n	8001670 <StartTask03+0x164>
				else
				{
					Rx1_Buffer[Rx_indx++] = data; //already get length of string
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <StartTask03+0x1a0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	b2d1      	uxtb	r1, r2
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <StartTask03+0x1a0>)
 800165e:	7011      	strb	r1, [r2, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <StartTask03+0x170>)
 8001664:	7819      	ldrb	r1, [r3, #0]
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <StartTask03+0x194>)
 8001668:	5499      	strb	r1, [r3, r2]
					Rx_recv = 1;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <StartTask03+0x198>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
				}

			} //else
		}
		osDelay(Delay_task03);
 8001670:	2001      	movs	r0, #1
 8001672:	f012 fe35 	bl	80142e0 <osDelay>
		if (isEmpty(&uart_4) == 0)
 8001676:	e74d      	b.n	8001514 <StartTask03+0x8>
 8001678:	24004c58 	.word	0x24004c58
 800167c:	24000704 	.word	0x24000704
 8001680:	24000705 	.word	0x24000705
 8001684:	24004e7c 	.word	0x24004e7c
 8001688:	08019428 	.word	0x08019428
 800168c:	24004ecc 	.word	0x24004ecc
 8001690:	24004e34 	.word	0x24004e34
 8001694:	24004e60 	.word	0x24004e60
 8001698:	58020800 	.word	0x58020800
 800169c:	24004c9c 	.word	0x24004c9c
 80016a0:	24004eb8 	.word	0x24004eb8
 80016a4:	24004e32 	.word	0x24004e32
 80016a8:	24000706 	.word	0x24000706
 80016ac:	24000707 	.word	0x24000707

080016b0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	    ttt = (float)HP_Temp/10;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <StartTask04+0x2c>)
 80016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <StartTask04+0x30>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
	//     HAL_UART_Transmit(&huart4,  HP_Temp ,sizeof(3), 100);
	 //   printf("Temp = %d \r\n", HP_Temp);
	    osDelay(200);
 80016d4:	20c8      	movs	r0, #200	; 0xc8
 80016d6:	f012 fe03 	bl	80142e0 <osDelay>
	    ttt = (float)HP_Temp/10;
 80016da:	e7ed      	b.n	80016b8 <StartTask04+0x8>
 80016dc:	24004e34 	.word	0x24004e34
 80016e0:	24004ed8 	.word	0x24004ed8

080016e4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
		RTC_CalendarShow(&sdatestructureget, &stimestructureget);
 80016ec:	4904      	ldr	r1, [pc, #16]	; (8001700 <StartTask05+0x1c>)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <StartTask05+0x20>)
 80016f0:	f7ff fb08 	bl	8000d04 <RTC_CalendarShow>
			sprintf((char *)&text, "Date 20%02d-%02d-%02d ",sdatestructureget.Year,sdatestructureget.Month, sdatestructureget.Date);
		LCD_ShowString(4, 40, 160, 16, 16, text);

		sprintf((char *)&text,"Tick: %d ms",HAL_GetTick());
		LCD_ShowString(4, 74, 160, 16, 16,text);
*/		osDelay(1000);
 80016f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f8:	f012 fdf2 	bl	80142e0 <osDelay>
		RTC_CalendarShow(&sdatestructureget, &stimestructureget);
 80016fc:	e7f6      	b.n	80016ec <StartTask05+0x8>
 80016fe:	bf00      	nop
 8001700:	24004e98 	.word	0x24004e98
 8001704:	24004e44 	.word	0x24004e44

08001708 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
	 for(int k=0;k<100;k++){
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e03f      	b.n	8001796 <StartTask06+0x8e>
	  for(int i=0;i<100;i++){
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	e009      	b.n	8001730 <StartTask06+0x28>
	  	wdata[i] = k;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	b2d9      	uxtb	r1, r3
 8001720:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <StartTask06+0x98>)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4413      	add	r3, r2
 8001726:	460a      	mov	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<100;i++){
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	3301      	adds	r3, #1
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b63      	cmp	r3, #99	; 0x63
 8001734:	ddf2      	ble.n	800171c <StartTask06+0x14>
	  }

	  W25qxx_EraseSector(0);
 8001736:	2000      	movs	r0, #0
 8001738:	f003 fd5a 	bl	80051f0 <W25qxx_EraseSector>
	  W25qxx_PageProgram(wdata, 0, 100);
 800173c:	2264      	movs	r2, #100	; 0x64
 800173e:	2100      	movs	r1, #0
 8001740:	4817      	ldr	r0, [pc, #92]	; (80017a0 <StartTask06+0x98>)
 8001742:	f003 fd9b 	bl	800527c <W25qxx_PageProgram>
	  W25qxx_Read(rdata, 0, 100);
 8001746:	2264      	movs	r2, #100	; 0x64
 8001748:	2100      	movs	r1, #0
 800174a:	4816      	ldr	r0, [pc, #88]	; (80017a4 <StartTask06+0x9c>)
 800174c:	f003 fde8 	bl	8005320 <W25qxx_Read>

	  for(int i =0;i<10;i++){
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	e012      	b.n	800177c <StartTask06+0x74>
	  printf("Write value = %d\r\n",wdata[i]);
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <StartTask06+0x98>)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4619      	mov	r1, r3
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <StartTask06+0xa0>)
 8001762:	f015 fbe7 	bl	8016f34 <iprintf>
	  printf("Read value  = %d\r\n",rdata[i]);
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <StartTask06+0x9c>)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	480e      	ldr	r0, [pc, #56]	; (80017ac <StartTask06+0xa4>)
 8001772:	f015 fbdf 	bl	8016f34 <iprintf>
	  for(int i =0;i<10;i++){
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b09      	cmp	r3, #9
 8001780:	dde9      	ble.n	8001756 <StartTask06+0x4e>
	  }
	  printf("\n\r");
 8001782:	480b      	ldr	r0, [pc, #44]	; (80017b0 <StartTask06+0xa8>)
 8001784:	f015 fbd6 	bl	8016f34 <iprintf>
    osDelay(2000);
 8001788:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800178c:	f012 fda8 	bl	80142e0 <osDelay>
	 for(int k=0;k<100;k++){
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b63      	cmp	r3, #99	; 0x63
 800179a:	ddbc      	ble.n	8001716 <StartTask06+0xe>
 800179c:	e7b8      	b.n	8001710 <StartTask06+0x8>
 800179e:	bf00      	nop
 80017a0:	24000708 	.word	0x24000708
 80017a4:	2400076c 	.word	0x2400076c
 80017a8:	0801942c 	.word	0x0801942c
 80017ac:	08019440 	.word	0x08019440
 80017b0:	08019454 	.word	0x08019454

080017b4 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void const * argument)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	uint8_t first, second;

	//=============  Temperature  ===============
	for (;;)
	{   // HP temperature detection
		first = HP_Temp >> 8;
 80017bc:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <StartTask07+0x184>)
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	121b      	asrs	r3, r3, #8
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	73fb      	strb	r3, [r7, #15]
		second = HP_Temp & 0x00FF;
 80017c8:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <StartTask07+0x184>)
 80017ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ce:	73bb      	strb	r3, [r7, #14]
		GUI_temp[6] = first;  // Disp temperature and show it on LCD
 80017d0:	4a5a      	ldr	r2, [pc, #360]	; (800193c <StartTask07+0x188>)
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	7193      	strb	r3, [r2, #6]
		GUI_temp[7] = second;
 80017d6:	4a59      	ldr	r2, [pc, #356]	; (800193c <StartTask07+0x188>)
 80017d8:	7bbb      	ldrb	r3, [r7, #14]
 80017da:	71d3      	strb	r3, [r2, #7]
		HAL_UART_Transmit(&huart1, GUI_temp, sizeof(GUI_temp), 100);
 80017dc:	2364      	movs	r3, #100	; 0x64
 80017de:	2208      	movs	r2, #8
 80017e0:	4956      	ldr	r1, [pc, #344]	; (800193c <StartTask07+0x188>)
 80017e2:	4857      	ldr	r0, [pc, #348]	; (8001940 <StartTask07+0x18c>)
 80017e4:	f00d fd6d 	bl	800f2c2 <HAL_UART_Transmit>

		//=============  Total energy & count value ===============
		if (Count_energy)
 80017e8:	4b56      	ldr	r3, [pc, #344]	; (8001944 <StartTask07+0x190>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d03f      	beq.n	8001870 <StartTask07+0xbc>
		{
			if (Stamp)
 80017f0:	4b55      	ldr	r3, [pc, #340]	; (8001948 <StartTask07+0x194>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01d      	beq.n	8001834 <StartTask07+0x80>
			{
				GUI_sum_value[6] =  (sum_count) >> 24;
 80017f8:	4b54      	ldr	r3, [pc, #336]	; (800194c <StartTask07+0x198>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	0e1b      	lsrs	r3, r3, #24
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <StartTask07+0x19c>)
 8001802:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] =  ((sum_count) >> 16) & 0xFF;
 8001804:	4b51      	ldr	r3, [pc, #324]	; (800194c <StartTask07+0x198>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <StartTask07+0x19c>)
 800180e:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] =  ((sum_count) >> 8) & 0xFF;
 8001810:	4b4e      	ldr	r3, [pc, #312]	; (800194c <StartTask07+0x198>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <StartTask07+0x19c>)
 800181a:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] =  (sum_count) & 0xFF;
 800181c:	4b4b      	ldr	r3, [pc, #300]	; (800194c <StartTask07+0x198>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <StartTask07+0x19c>)
 8001824:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 8001826:	2364      	movs	r3, #100	; 0x64
 8001828:	220a      	movs	r2, #10
 800182a:	4949      	ldr	r1, [pc, #292]	; (8001950 <StartTask07+0x19c>)
 800182c:	4844      	ldr	r0, [pc, #272]	; (8001940 <StartTask07+0x18c>)
 800182e:	f00d fd48 	bl	800f2c2 <HAL_UART_Transmit>
 8001832:	e07c      	b.n	800192e <StartTask07+0x17a>
						100);
			}
			else
			{
				GUI_sum_value[6] = (sum_count_t) >> 24;
 8001834:	4b47      	ldr	r3, [pc, #284]	; (8001954 <StartTask07+0x1a0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0e1b      	lsrs	r3, r3, #24
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b44      	ldr	r3, [pc, #272]	; (8001950 <StartTask07+0x19c>)
 800183e:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_count_t) >> 16) & 0xFF;
 8001840:	4b44      	ldr	r3, [pc, #272]	; (8001954 <StartTask07+0x1a0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b41      	ldr	r3, [pc, #260]	; (8001950 <StartTask07+0x19c>)
 800184a:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_count_t) >> 8) & 0xFF;
 800184c:	4b41      	ldr	r3, [pc, #260]	; (8001954 <StartTask07+0x1a0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <StartTask07+0x19c>)
 8001856:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_count_t) & 0xFF;
 8001858:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <StartTask07+0x1a0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <StartTask07+0x19c>)
 8001860:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 8001862:	2364      	movs	r3, #100	; 0x64
 8001864:	220a      	movs	r2, #10
 8001866:	493a      	ldr	r1, [pc, #232]	; (8001950 <StartTask07+0x19c>)
 8001868:	4835      	ldr	r0, [pc, #212]	; (8001940 <StartTask07+0x18c>)
 800186a:	f00d fd2a 	bl	800f2c2 <HAL_UART_Transmit>
 800186e:	e05e      	b.n	800192e <StartTask07+0x17a>
						100);
			}
		}
		else
		{
			if (Stamp)
 8001870:	4b35      	ldr	r3, [pc, #212]	; (8001948 <StartTask07+0x194>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d02d      	beq.n	80018d4 <StartTask07+0x120>
			{
				GUI_sum_value[6] = (sum_energy/10) >> 24;
 8001878:	4b37      	ldr	r3, [pc, #220]	; (8001958 <StartTask07+0x1a4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a37      	ldr	r2, [pc, #220]	; (800195c <StartTask07+0x1a8>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	08db      	lsrs	r3, r3, #3
 8001884:	0e1b      	lsrs	r3, r3, #24
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <StartTask07+0x19c>)
 800188a:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_energy/10) >> 16) & 0xFF;
 800188c:	4b32      	ldr	r3, [pc, #200]	; (8001958 <StartTask07+0x1a4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a32      	ldr	r2, [pc, #200]	; (800195c <StartTask07+0x1a8>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	08db      	lsrs	r3, r3, #3
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <StartTask07+0x19c>)
 800189e:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_energy/10) >> 8) & 0xFF;
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <StartTask07+0x1a4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a2d      	ldr	r2, [pc, #180]	; (800195c <StartTask07+0x1a8>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <StartTask07+0x19c>)
 80018b2:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_energy/10) & 0xFF;
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <StartTask07+0x1a4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a28      	ldr	r2, [pc, #160]	; (800195c <StartTask07+0x1a8>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	08db      	lsrs	r3, r3, #3
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <StartTask07+0x19c>)
 80018c4:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 80018c6:	2364      	movs	r3, #100	; 0x64
 80018c8:	220a      	movs	r2, #10
 80018ca:	4921      	ldr	r1, [pc, #132]	; (8001950 <StartTask07+0x19c>)
 80018cc:	481c      	ldr	r0, [pc, #112]	; (8001940 <StartTask07+0x18c>)
 80018ce:	f00d fcf8 	bl	800f2c2 <HAL_UART_Transmit>
 80018d2:	e02c      	b.n	800192e <StartTask07+0x17a>
						100);
			}
			else
			{
				GUI_sum_value[6] = (sum_energy_t/10) >> 24;
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <StartTask07+0x1ac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a20      	ldr	r2, [pc, #128]	; (800195c <StartTask07+0x1a8>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	08db      	lsrs	r3, r3, #3
 80018e0:	0e1b      	lsrs	r3, r3, #24
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <StartTask07+0x19c>)
 80018e6:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_energy_t/10) >> 16) & 0xFF;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <StartTask07+0x1ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1b      	ldr	r2, [pc, #108]	; (800195c <StartTask07+0x1a8>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	08db      	lsrs	r3, r3, #3
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <StartTask07+0x19c>)
 80018fa:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_energy_t/10) >> 8) & 0xFF;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <StartTask07+0x1ac>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <StartTask07+0x1a8>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <StartTask07+0x19c>)
 800190e:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_energy_t/10) & 0xFF;
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <StartTask07+0x1ac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a11      	ldr	r2, [pc, #68]	; (800195c <StartTask07+0x1a8>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	08db      	lsrs	r3, r3, #3
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <StartTask07+0x19c>)
 8001920:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 8001922:	2364      	movs	r3, #100	; 0x64
 8001924:	220a      	movs	r2, #10
 8001926:	490a      	ldr	r1, [pc, #40]	; (8001950 <StartTask07+0x19c>)
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <StartTask07+0x18c>)
 800192a:	f00d fcca 	bl	800f2c2 <HAL_UART_Transmit>
						100);
			}
		}

		osDelay(Delay_task07);  //500ms
 800192e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001932:	f012 fcd5 	bl	80142e0 <osDelay>
		first = HP_Temp >> 8;
 8001936:	e741      	b.n	80017bc <StartTask07+0x8>
 8001938:	24004e34 	.word	0x24004e34
 800193c:	24000010 	.word	0x24000010
 8001940:	24005190 	.word	0x24005190
 8001944:	24004e2c 	.word	0x24004e2c
 8001948:	24004e36 	.word	0x24004e36
 800194c:	24004e78 	.word	0x24004e78
 8001950:	24000028 	.word	0x24000028
 8001954:	24004e24 	.word	0x24004e24
 8001958:	24004e70 	.word	0x24004e70
 800195c:	cccccccd 	.word	0xcccccccd
 8001960:	24004e64 	.word	0x24004e64

08001964 <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void const * argument)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800196c:	2001      	movs	r0, #1
 800196e:	f012 fcb7 	bl	80142e0 <osDelay>
 8001972:	e7fb      	b.n	800196c <StartTask08+0x8>

08001974 <push>:
/* USER CODE BEGIN Application */
//=============== Ring buffer =====================


void push(uart_t *u, uint8_t data)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
	u->buffer[u->head] = data;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	709a      	strb	r2, [r3, #2]
	u->head++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	701a      	strb	r2, [r3, #0]
	if (u->head >= MAX_BUFFER_SIZE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b3f      	cmp	r3, #63	; 0x3f
 80019a0:	d902      	bls.n	80019a8 <push+0x34>
	{
		u->head = 0;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
	}
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <pop>:

uint8_t pop(uart_t *u)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	uint8_t data = u->buffer[u->tail];
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	785b      	ldrb	r3, [r3, #1]
 80019c0:	461a      	mov	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	73fb      	strb	r3, [r7, #15]
	u->tail++;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	705a      	strb	r2, [r3, #1]
	if (u->tail >= MAX_BUFFER_SIZE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	785b      	ldrb	r3, [r3, #1]
 80019da:	2b3f      	cmp	r3, #63	; 0x3f
 80019dc:	d902      	bls.n	80019e4 <pop+0x30>
	{
		u->tail = 0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	705a      	strb	r2, [r3, #1]
	}
	return data;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <isEmpty>:

uint8_t isEmpty(uart_t *u)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	return u->head == u->tail;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	785b      	ldrb	r3, [r3, #1]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	bf0c      	ite	eq
 8001a06:	2301      	moveq	r3, #1
 8001a08:	2300      	movne	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_UART_RxCpltCallback+0x50>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10a      	bne.n	8001a40 <HAL_UART_RxCpltCallback+0x28>
	{
		push(&uart_1, rx1_data);  //save data to Ring buffer
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_UART_RxCpltCallback+0x54>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480f      	ldr	r0, [pc, #60]	; (8001a70 <HAL_UART_RxCpltCallback+0x58>)
 8001a32:	f7ff ff9f 	bl	8001974 <push>
		HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 8001a36:	2201      	movs	r2, #1
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <HAL_UART_RxCpltCallback+0x54>)
 8001a3a:	480e      	ldr	r0, [pc, #56]	; (8001a74 <HAL_UART_RxCpltCallback+0x5c>)
 8001a3c:	f00d fcd8 	bl	800f3f0 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART4)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_UART_RxCpltCallback+0x60>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10a      	bne.n	8001a60 <HAL_UART_RxCpltCallback+0x48>
	{
		push(&uart_4, rx4_data);  //save data to Ring buffer
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_UART_RxCpltCallback+0x64>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480b      	ldr	r0, [pc, #44]	; (8001a80 <HAL_UART_RxCpltCallback+0x68>)
 8001a52:	f7ff ff8f 	bl	8001974 <push>
		HAL_UART_Receive_IT(&huart4, &rx4_data, 1);
 8001a56:	2201      	movs	r2, #1
 8001a58:	4908      	ldr	r1, [pc, #32]	; (8001a7c <HAL_UART_RxCpltCallback+0x64>)
 8001a5a:	480a      	ldr	r0, [pc, #40]	; (8001a84 <HAL_UART_RxCpltCallback+0x6c>)
 8001a5c:	f00d fcc8 	bl	800f3f0 <HAL_UART_Receive_IT>
	}

}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	24004c9b 	.word	0x24004c9b
 8001a70:	24004c9c 	.word	0x24004c9c
 8001a74:	24005190 	.word	0x24005190
 8001a78:	40004c00 	.word	0x40004c00
 8001a7c:	24004c9a 	.word	0x24004c9a
 8001a80:	24004c58 	.word	0x24004c58
 8001a84:	24005220 	.word	0x24005220

08001a88 <MX_GPIO_Init>:
     PC11   ------> SDMMC1_D3
     PC12   ------> SDMMC1_CK
     PD2   ------> SDMMC1_CMD
*/
void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a9e:	4b95      	ldr	r3, [pc, #596]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa4:	4a93      	ldr	r2, [pc, #588]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001aa6:	f043 0310 	orr.w	r3, r3, #16
 8001aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aae:	4b91      	ldr	r3, [pc, #580]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abc:	4b8d      	ldr	r3, [pc, #564]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac2:	4a8c      	ldr	r2, [pc, #560]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001acc:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ada:	4b86      	ldr	r3, [pc, #536]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae0:	4a84      	ldr	r2, [pc, #528]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aea:	4b82      	ldr	r3, [pc, #520]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b7e      	ldr	r3, [pc, #504]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afe:	4a7d      	ldr	r2, [pc, #500]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b08:	4b7a      	ldr	r3, [pc, #488]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	4b77      	ldr	r3, [pc, #476]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1c:	4a75      	ldr	r2, [pc, #468]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b26:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b34:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b44:	4b6b      	ldr	r3, [pc, #428]	; (8001cf4 <MX_GPIO_Init+0x26c>)
 8001b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEY_GPIO_Port, KEY_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2108      	movs	r1, #8
 8001b56:	4868      	ldr	r0, [pc, #416]	; (8001cf8 <MX_GPIO_Init+0x270>)
 8001b58:	f005 ffb8 	bl	8007acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001b62:	4865      	ldr	r0, [pc, #404]	; (8001cf8 <MX_GPIO_Init+0x270>)
 8001b64:	f005 ffb2 	bl	8007acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fire_lamp_GPIO_Port, Fire_lamp_Pin, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6e:	4863      	ldr	r0, [pc, #396]	; (8001cfc <MX_GPIO_Init+0x274>)
 8001b70:	f005 ffac 	bl	8007acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 8001b7a:	4861      	ldr	r0, [pc, #388]	; (8001d00 <MX_GPIO_Init+0x278>)
 8001b7c:	f005 ffa6 	bl	8007acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	485f      	ldr	r0, [pc, #380]	; (8001d04 <MX_GPIO_Init+0x27c>)
 8001b86:	f005 ffa1 	bl	8007acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_CS_GPIO_Port, F_CS_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2140      	movs	r1, #64	; 0x40
 8001b8e:	485c      	ldr	r0, [pc, #368]	; (8001d00 <MX_GPIO_Init+0x278>)
 8001b90:	f005 ff9c 	bl	8007acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001b94:	2308      	movs	r3, #8
 8001b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4853      	ldr	r0, [pc, #332]	; (8001cf8 <MX_GPIO_Init+0x270>)
 8001bac:	f005 fdc6 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 8001bb0:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	484f      	ldr	r0, [pc, #316]	; (8001d04 <MX_GPIO_Init+0x27c>)
 8001bc6:	f005 fdb9 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8001bca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4845      	ldr	r0, [pc, #276]	; (8001cf8 <MX_GPIO_Init+0x270>)
 8001be4:	f005 fdaa 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Fire_lamp_Pin;
 8001be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Fire_lamp_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	483e      	ldr	r0, [pc, #248]	; (8001cfc <MX_GPIO_Init+0x274>)
 8001c02:	f005 fd9b 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4838      	ldr	r0, [pc, #224]	; (8001cfc <MX_GPIO_Init+0x274>)
 8001c1c:	f005 fd8e 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15;
 8001c20:	f44f 4343 	mov.w	r3, #49920	; 0xc300
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	4831      	ldr	r0, [pc, #196]	; (8001d00 <MX_GPIO_Init+0x278>)
 8001c3a:	f005 fd7f 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	482b      	ldr	r0, [pc, #172]	; (8001d00 <MX_GPIO_Init+0x278>)
 8001c54:	f005 fd72 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Test_LED_Pin;
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c60:	2302      	movs	r3, #2
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Test_LED_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4825      	ldr	r0, [pc, #148]	; (8001d04 <MX_GPIO_Init+0x27c>)
 8001c70:	f005 fd64 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c74:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c78:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001c86:	230c      	movs	r3, #12
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	481c      	ldr	r0, [pc, #112]	; (8001d04 <MX_GPIO_Init+0x27c>)
 8001c92:	f005 fd53 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Foot_Pin;
 8001c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Foot_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4817      	ldr	r0, [pc, #92]	; (8001d08 <MX_GPIO_Init+0x280>)
 8001cac:	f005 fd46 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_GPIO_Init+0x278>)
 8001ccc:	f005 fd36 	bl	800773c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_CS_Pin;
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(F_CS_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <MX_GPIO_Init+0x278>)
 8001ce8:	f005 fd28 	bl	800773c <HAL_GPIO_Init>

}
 8001cec:	bf00      	nop
 8001cee:	3730      	adds	r7, #48	; 0x30
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	58024400 	.word	0x58024400
 8001cf8:	58021000 	.word	0x58021000
 8001cfc:	58020400 	.word	0x58020400
 8001d00:	58020c00 	.word	0x58020c00
 8001d04:	58020800 	.word	0x58020800
 8001d08:	58020000 	.word	0x58020000

08001d0c <_write>:
void MX_FREERTOS_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

//printf, putchar, puts ?��?��?�� ?��출되?�� ?��?��
int _write(int fd, char *str, int len) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*)str, len);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	68b8      	ldr	r0, [r7, #8]
 8001d20:	f013 fecc 	bl	8015abc <CDC_Transmit_FS>
	return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <init_uart>:
	HAL_GPIO_WritePin(KEY_GPIO_Port,KEY_Pin,GPIO_PIN_RESET);
	HAL_Delay(Ldelay-1);
}

void init_uart(uart_t *u)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	u->head = 0;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
	u->tail = 0;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	705a      	strb	r2, [r3, #1]
	memset(u->buffer, 0, sizeof(u->buffer));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3302      	adds	r3, #2
 8001d46:	2240      	movs	r2, #64	; 0x40
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f014 fc4b 	bl	80165e6 <memset>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	; 0x30
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_Init();
 8001d5e:	f003 fc1f 	bl	80055a0 <HAL_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d62:	f003 fc1d 	bl	80055a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d66:	f000 f871 	bl	8001e4c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d6a:	f000 f8ff 	bl	8001f6c <PeriphCommonClock_Config>
	RTC_DateTypeDef sdatestructureget  ;
	RTC_TimeTypeDef stimestructureget  ;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6e:	f7ff fe8b 	bl	8001a88 <MX_GPIO_Init>
  MX_RTC_Init();
 8001d72:	f000 fa6b 	bl	800224c <MX_RTC_Init>
  MX_SPI1_Init();
 8001d76:	f000 faf3 	bl	8002360 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001d7a:	f000 fb47 	bl	800240c <MX_SPI4_Init>
  MX_TIM1_Init();
 8001d7e:	f000 fe63 	bl	8002a48 <MX_TIM1_Init>
  MX_UART4_Init();
 8001d82:	f000 ff4d 	bl	8002c20 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001d86:	f000 ff97 	bl	8002cb8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001d8a:	f000 ffe1 	bl	8002d50 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001d8e:	f7fe fdd3 	bl	8000938 <MX_ADC3_Init>
  MX_ADC2_Init();
 8001d92:	f7fe fd6b 	bl	800086c <MX_ADC2_Init>
  MX_DAC1_Init();
 8001d96:	f7fe ff33 	bl	8000c00 <MX_DAC1_Init>
  MX_ADC1_Init();
 8001d9a:	f7fe fced 	bl	8000778 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001d9e:	f000 f92a 	bl	8001ff6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	init_uart(&uart_1);
 8001da2:	4821      	ldr	r0, [pc, #132]	; (8001e28 <main+0xd0>)
 8001da4:	f7ff ffc3 	bl	8001d2e <init_uart>
	init_uart(&uart_4);
 8001da8:	4820      	ldr	r0, [pc, #128]	; (8001e2c <main+0xd4>)
 8001daa:	f7ff ffc0 	bl	8001d2e <init_uart>
	HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 8001dae:	2201      	movs	r2, #1
 8001db0:	491f      	ldr	r1, [pc, #124]	; (8001e30 <main+0xd8>)
 8001db2:	4820      	ldr	r0, [pc, #128]	; (8001e34 <main+0xdc>)
 8001db4:	f00d fb1c 	bl	800f3f0 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &rx4_data, 1);
 8001db8:	2201      	movs	r2, #1
 8001dba:	491f      	ldr	r1, [pc, #124]	; (8001e38 <main+0xe0>)
 8001dbc:	481f      	ldr	r0, [pc, #124]	; (8001e3c <main+0xe4>)
 8001dbe:	f00d fb17 	bl	800f3f0 <HAL_UART_Receive_IT>

	printf("Hello \n\r");
 8001dc2:	481f      	ldr	r0, [pc, #124]	; (8001e40 <main+0xe8>)
 8001dc4:	f015 f8b6 	bl	8016f34 <iprintf>

	DF_Init(15);
 8001dc8:	200f      	movs	r0, #15
 8001dca:	f7fe fca7 	bl	800071c <DF_Init>
	DF_PlayFromStart();
 8001dce:	f7fe fc99 	bl	8000704 <DF_PlayFromStart>


	  w25qxx_Init();
 8001dd2:	f003 f92b 	bl	800502c <w25qxx_Init>

	  for(int i=100;i>0;i--){
 8001dd6:	2364      	movs	r3, #100	; 0x64
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dda:	e009      	b.n	8001df0 <main+0x98>
	  	wdata[i] = i;
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dde:	b2d9      	uxtb	r1, r3
 8001de0:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <main+0xec>)
 8001de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de4:	4413      	add	r3, r2
 8001de6:	460a      	mov	r2, r1
 8001de8:	701a      	strb	r2, [r3, #0]
	  for(int i=100;i>0;i--){
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	3b01      	subs	r3, #1
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	dcf2      	bgt.n	8001ddc <main+0x84>
	  }
	  //W25qxx_Write(wdata, 0, 100);

	  W25qxx_EraseSector(0);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f003 f9fa 	bl	80051f0 <W25qxx_EraseSector>

	  W25qxx_PageProgram(wdata, 0, 100);
 8001dfc:	2264      	movs	r2, #100	; 0x64
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4810      	ldr	r0, [pc, #64]	; (8001e44 <main+0xec>)
 8001e02:	f003 fa3b 	bl	800527c <W25qxx_PageProgram>

	  W25qxx_Read(rdata, 0, 100);
 8001e06:	2264      	movs	r2, #100	; 0x64
 8001e08:	2100      	movs	r1, #0
 8001e0a:	480f      	ldr	r0, [pc, #60]	; (8001e48 <main+0xf0>)
 8001e0c:	f003 fa88 	bl	8005320 <W25qxx_Read>

 	LCD_Test();
 8001e10:	f001 f910 	bl	8003034 <LCD_Test>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001e14:	f7fe ffa6 	bl	8000d64 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001e18:	f012 fa0f 	bl	801423a <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    osDelay(2000);
 8001e1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e20:	f012 fa5e 	bl	80142e0 <osDelay>
 8001e24:	e7fa      	b.n	8001e1c <main+0xc4>
 8001e26:	bf00      	nop
 8001e28:	24004c9c 	.word	0x24004c9c
 8001e2c:	24004c58 	.word	0x24004c58
 8001e30:	24004c9b 	.word	0x24004c9b
 8001e34:	24005190 	.word	0x24005190
 8001e38:	24004c9a 	.word	0x24004c9a
 8001e3c:	24005220 	.word	0x24005220
 8001e40:	08019458 	.word	0x08019458
 8001e44:	24000708 	.word	0x24000708
 8001e48:	2400076c 	.word	0x2400076c

08001e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b09c      	sub	sp, #112	; 0x70
 8001e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e56:	224c      	movs	r2, #76	; 0x4c
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f014 fbc3 	bl	80165e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2220      	movs	r2, #32
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f014 fbbd 	bl	80165e6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f007 f871 	bl	8008f54 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <SystemClock_Config+0x114>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	4a39      	ldr	r2, [pc, #228]	; (8001f60 <SystemClock_Config+0x114>)
 8001e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e80:	6193      	str	r3, [r2, #24]
 8001e82:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <SystemClock_Config+0x114>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <SystemClock_Config+0x118>)
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	4a34      	ldr	r2, [pc, #208]	; (8001f64 <SystemClock_Config+0x118>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e98:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <SystemClock_Config+0x118>)
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ea4:	bf00      	nop
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <SystemClock_Config+0x114>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb2:	d1f8      	bne.n	8001ea6 <SystemClock_Config+0x5a>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001eb4:	f007 f83e 	bl	8008f34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001eb8:	f003 fbf2 	bl	80056a0 <HAL_GetREVID>
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <SystemClock_Config+0x11c>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	4a29      	ldr	r2, [pc, #164]	; (8001f68 <SystemClock_Config+0x11c>)
 8001ec2:	f023 0318 	bic.w	r3, r3, #24
 8001ec6:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <SystemClock_Config+0x11c>)
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	f023 0303 	bic.w	r3, r3, #3
 8001ed0:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <SystemClock_Config+0x11c>)
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001ed8:	2305      	movs	r3, #5
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eea:	2302      	movs	r3, #2
 8001eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8001eee:	2320      	movs	r3, #32
 8001ef0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 8001ef2:	2381      	movs	r3, #129	; 0x81
 8001ef4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001efa:	2301      	movs	r3, #1
 8001efc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001efe:	2302      	movs	r3, #2
 8001f00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f02:	230c      	movs	r3, #12
 8001f04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	4618      	mov	r0, r3
 8001f14:	f007 fcac 	bl	8009870 <HAL_RCC_OscConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001f1e:	f000 f899 	bl	8002054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f22:	233f      	movs	r3, #63	; 0x3f
 8001f24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f26:	2303      	movs	r3, #3
 8001f28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001f2e:	2308      	movs	r3, #8
 8001f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001f32:	2340      	movs	r3, #64	; 0x40
 8001f34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f36:	2340      	movs	r3, #64	; 0x40
 8001f38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001f40:	2340      	movs	r3, #64	; 0x40
 8001f42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2102      	movs	r1, #2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f008 f8a1 	bl	800a090 <HAL_RCC_ClockConfig>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001f54:	f000 f87e 	bl	8002054 <Error_Handler>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3770      	adds	r7, #112	; 0x70
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	58024800 	.word	0x58024800
 8001f64:	58000400 	.word	0x58000400
 8001f68:	58024400 	.word	0x58024400

08001f6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0b0      	sub	sp, #192	; 0xc0
 8001f70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	22bc      	movs	r2, #188	; 0xbc
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f014 fb34 	bl	80165e6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
 8001f7e:	f44f 2342 	mov.w	r3, #794624	; 0xc2000
 8001f82:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001f84:	2302      	movs	r3, #2
 8001f86:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001f88:	230c      	movs	r3, #12
 8001f8a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f90:	2302      	movs	r3, #2
 8001f92:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f98:	23c0      	movs	r3, #192	; 0xc0
 8001f9a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001fa8:	230c      	movs	r3, #12
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 5;
 8001fac:	2305      	movs	r3, #5
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001fb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 8001fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fcc:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001fce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f008 fc24 	bl	800a82c <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <PeriphCommonClock_Config+0x82>
  {
    Error_Handler();
 8001fea:	f000 f833 	bl	8002054 <Error_Handler>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	37c0      	adds	r7, #192	; 0xc0
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2105      	movs	r1, #5
 8001ffe:	2025      	movs	r0, #37	; 0x25
 8002000:	f004 fcc0 	bl	8006984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002004:	2025      	movs	r0, #37	; 0x25
 8002006:	f004 fcd7 	bl	80069b8 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2105      	movs	r1, #5
 800200e:	2027      	movs	r0, #39	; 0x27
 8002010:	f004 fcb8 	bl	8006984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002014:	2027      	movs	r0, #39	; 0x27
 8002016:	f004 fccf 	bl	80069b8 <HAL_NVIC_EnableIRQ>
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2105      	movs	r1, #5
 800201e:	2034      	movs	r0, #52	; 0x34
 8002020:	f004 fcb0 	bl	8006984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002024:	2034      	movs	r0, #52	; 0x34
 8002026:	f004 fcc7 	bl	80069b8 <HAL_NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002042:	f003 fae9 	bl	8005618 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40014800 	.word	0x40014800

08002054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800205c:	e7fe      	b.n	800205c <Error_Handler+0x8>
	...

08002060 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_QUADSPI_Init+0x50>)
 8002066:	4a13      	ldr	r2, [pc, #76]	; (80020b4 <MX_QUADSPI_Init+0x54>)
 8002068:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_QUADSPI_Init+0x50>)
 800206c:	2201      	movs	r2, #1
 800206e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_QUADSPI_Init+0x50>)
 8002072:	2201      	movs	r2, #1
 8002074:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <MX_QUADSPI_Init+0x50>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <MX_QUADSPI_Init+0x50>)
 800207e:	2216      	movs	r2, #22
 8002080:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <MX_QUADSPI_Init+0x50>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_QUADSPI_Init+0x50>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <MX_QUADSPI_Init+0x50>)
 8002090:	2200      	movs	r2, #0
 8002092:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <MX_QUADSPI_Init+0x50>)
 8002096:	2200      	movs	r2, #0
 8002098:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_QUADSPI_Init+0x50>)
 800209c:	f006 ffa4 	bl	8008fe8 <HAL_QSPI_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80020a6:	f7ff ffd5 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	24004ee8 	.word	0x24004ee8
 80020b4:	52005000 	.word	0x52005000

080020b8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0ba      	sub	sp, #232	; 0xe8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d0:	f107 0318 	add.w	r3, r7, #24
 80020d4:	22bc      	movs	r2, #188	; 0xbc
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f014 fa84 	bl	80165e6 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a55      	ldr	r2, [pc, #340]	; (8002238 <HAL_QSPI_MspInit+0x180>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	f040 80a3 	bne.w	8002230 <HAL_QSPI_MspInit+0x178>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80020ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f4:	f107 0318 	add.w	r3, r7, #24
 80020f8:	4618      	mov	r0, r3
 80020fa:	f008 fb97 	bl	800a82c <HAL_RCCEx_PeriphCLKConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8002104:	f7ff ffa6 	bl	8002054 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002108:	4b4c      	ldr	r3, [pc, #304]	; (800223c <HAL_QSPI_MspInit+0x184>)
 800210a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800210e:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_QSPI_MspInit+0x184>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002114:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002118:	4b48      	ldr	r3, [pc, #288]	; (800223c <HAL_QSPI_MspInit+0x184>)
 800211a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800211e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002126:	4b45      	ldr	r3, [pc, #276]	; (800223c <HAL_QSPI_MspInit+0x184>)
 8002128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212c:	4a43      	ldr	r2, [pc, #268]	; (800223c <HAL_QSPI_MspInit+0x184>)
 800212e:	f043 0310 	orr.w	r3, r3, #16
 8002132:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002136:	4b41      	ldr	r3, [pc, #260]	; (800223c <HAL_QSPI_MspInit+0x184>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_QSPI_MspInit+0x184>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214a:	4a3c      	ldr	r2, [pc, #240]	; (800223c <HAL_QSPI_MspInit+0x184>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_QSPI_MspInit+0x184>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_QSPI_MspInit+0x184>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002168:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_QSPI_MspInit+0x184>)
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002172:	4b32      	ldr	r3, [pc, #200]	; (800223c <HAL_QSPI_MspInit+0x184>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002180:	2304      	movs	r3, #4
 8002182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002198:	2309      	movs	r3, #9
 800219a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021a2:	4619      	mov	r1, r3
 80021a4:	4826      	ldr	r0, [pc, #152]	; (8002240 <HAL_QSPI_MspInit+0x188>)
 80021a6:	f005 fac9 	bl	800773c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021aa:	2304      	movs	r3, #4
 80021ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021c2:	2309      	movs	r3, #9
 80021c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021cc:	4619      	mov	r1, r3
 80021ce:	481d      	ldr	r0, [pc, #116]	; (8002244 <HAL_QSPI_MspInit+0x18c>)
 80021d0:	f005 fab4 	bl	800773c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80021d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	2303      	movs	r3, #3
 80021ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021ee:	2309      	movs	r3, #9
 80021f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4813      	ldr	r0, [pc, #76]	; (8002248 <HAL_QSPI_MspInit+0x190>)
 80021fc:	f005 fa9e 	bl	800773c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002200:	2340      	movs	r3, #64	; 0x40
 8002202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002218:	230a      	movs	r3, #10
 800221a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <HAL_QSPI_MspInit+0x18c>)
 8002226:	f005 fa89 	bl	800773c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB6_FMP);
 800222a:	2010      	movs	r0, #16
 800222c:	f005 fc82 	bl	8007b34 <HAL_I2CEx_EnableFastModePlus>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002230:	bf00      	nop
 8002232:	37e8      	adds	r7, #232	; 0xe8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	52005000 	.word	0x52005000
 800223c:	58024400 	.word	0x58024400
 8002240:	58021000 	.word	0x58021000
 8002244:	58020400 	.word	0x58020400
 8002248:	58020c00 	.word	0x58020c00

0800224c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b090      	sub	sp, #64	; 0x40
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
		RTC_TimeTypeDef sTime = {0};
 8002252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]
		  RTC_DateTypeDef sDate = {0};
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
		  RTC_AlarmTypeDef sAlarm = {0};
 8002266:	463b      	mov	r3, r7
 8002268:	2228      	movs	r2, #40	; 0x28
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f014 f9ba 	bl	80165e6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <MX_RTC_Init+0x70>)
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <MX_RTC_Init+0x74>)
 8002276:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <MX_RTC_Init+0x70>)
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <MX_RTC_Init+0x70>)
 8002280:	227f      	movs	r2, #127	; 0x7f
 8002282:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002284:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <MX_RTC_Init+0x70>)
 8002286:	22ff      	movs	r2, #255	; 0xff
 8002288:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_RTC_Init+0x70>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <MX_RTC_Init+0x70>)
 8002292:	2200      	movs	r2, #0
 8002294:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_RTC_Init+0x70>)
 8002298:	2200      	movs	r2, #0
 800229a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <MX_RTC_Init+0x70>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <MX_RTC_Init+0x70>)
 80022a4:	f00a fc48 	bl	800cb38 <HAL_RTC_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80022ae:	f7ff fed1 	bl	8002054 <Error_Handler>
    {
      Error_Handler();
    }
  /* USER CODE END RTC_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	3740      	adds	r7, #64	; 0x40
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	24004f34 	.word	0x24004f34
 80022c0:	58004000 	.word	0x58004000

080022c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0b2      	sub	sp, #200	; 0xc8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	22bc      	movs	r2, #188	; 0xbc
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f014 f986 	bl	80165e6 <memset>
  if(rtcHandle->Instance==RTC)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_RTC_MspInit+0x58>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d116      	bne.n	8002312 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	4618      	mov	r0, r3
 80022f8:	f008 fa98 	bl	800a82c <HAL_RCCEx_PeriphCLKConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002302:	f7ff fea7 	bl	8002054 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RTC_MspInit+0x5c>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <HAL_RTC_MspInit+0x5c>)
 800230c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002312:	bf00      	nop
 8002314:	37c8      	adds	r7, #200	; 0xc8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	58004000 	.word	0x58004000
 8002320:	58024400 	.word	0x58024400

08002324 <volume>:
void play(uint8_t Track) {
	uint8_t play[6] = { 0xAA, 0x07, 0x02, 0x00, Track, Track + 0xB3 };
	HAL_UART_Transmit(&huart3, play, sizeof(play), 100);
}

void volume(uint8_t vol) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
	uint8_t volume[5] = { 0xAA, 0x13, 0x01, vol, vol + 0xBE };
 800232e:	23aa      	movs	r3, #170	; 0xaa
 8002330:	723b      	strb	r3, [r7, #8]
 8002332:	2313      	movs	r3, #19
 8002334:	727b      	strb	r3, [r7, #9]
 8002336:	2301      	movs	r3, #1
 8002338:	72bb      	strb	r3, [r7, #10]
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	72fb      	strb	r3, [r7, #11]
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	3b42      	subs	r3, #66	; 0x42
 8002342:	b2db      	uxtb	r3, r3
 8002344:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, volume, sizeof(volume), 100);
 8002346:	f107 0108 	add.w	r1, r7, #8
 800234a:	2364      	movs	r3, #100	; 0x64
 800234c:	2205      	movs	r2, #5
 800234e:	4803      	ldr	r0, [pc, #12]	; (800235c <volume+0x38>)
 8002350:	f00c ffb7 	bl	800f2c2 <HAL_UART_Transmit>
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	24004f58 	.word	0x24004f58

08002360 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <MX_SPI1_Init+0xa4>)
 8002366:	4a28      	ldr	r2, [pc, #160]	; (8002408 <MX_SPI1_Init+0xa8>)
 8002368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800236a:	4b26      	ldr	r3, [pc, #152]	; (8002404 <MX_SPI1_Init+0xa4>)
 800236c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002370:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <MX_SPI1_Init+0xa4>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <MX_SPI1_Init+0xa4>)
 800237a:	2207      	movs	r2, #7
 800237c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <MX_SPI1_Init+0xa4>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <MX_SPI1_Init+0xa4>)
 8002386:	2200      	movs	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <MX_SPI1_Init+0xa4>)
 800238c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002390:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <MX_SPI1_Init+0xa4>)
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <MX_SPI1_Init+0xa4>)
 800239a:	2200      	movs	r2, #0
 800239c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023b6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_SPI1_Init+0xa4>)
 80023f0:	f00a fd72 	bl	800ced8 <HAL_SPI_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80023fa:	f7ff fe2b 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	24005070 	.word	0x24005070
 8002408:	40013000 	.word	0x40013000

0800240c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002410:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002412:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <MX_SPI4_Init+0xac>)
 8002414:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002416:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002418:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800241c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 800241e:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002420:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002424:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002428:	2207      	movs	r2, #7
 800242a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <MX_SPI4_Init+0xa8>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002434:	2200      	movs	r2, #0
 8002436:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <MX_SPI4_Init+0xa8>)
 800243a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800243e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002446:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_SPI4_Init+0xa8>)
 800244a:	2200      	movs	r2, #0
 800244c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002450:	2200      	movs	r2, #0
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002456:	2200      	movs	r2, #0
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <MX_SPI4_Init+0xa8>)
 800245c:	2200      	movs	r2, #0
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002466:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_SPI4_Init+0xa8>)
 800246a:	2200      	movs	r2, #0
 800246c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002470:	2200      	movs	r2, #0
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002476:	2200      	movs	r2, #0
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_SPI4_Init+0xa8>)
 800247c:	2200      	movs	r2, #0
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002482:	2200      	movs	r2, #0
 8002484:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002488:	2200      	movs	r2, #0
 800248a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_SPI4_Init+0xa8>)
 800248e:	2200      	movs	r2, #0
 8002490:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <MX_SPI4_Init+0xa8>)
 8002494:	2200      	movs	r2, #0
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_SPI4_Init+0xa8>)
 800249a:	2200      	movs	r2, #0
 800249c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_SPI4_Init+0xa8>)
 80024a0:	f00a fd1a 	bl	800ced8 <HAL_SPI_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80024aa:	f7ff fdd3 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	24004fe8 	.word	0x24004fe8
 80024b8:	40013400 	.word	0x40013400

080024bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0bc      	sub	sp, #240	; 0xf0
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d4:	f107 0320 	add.w	r3, r7, #32
 80024d8:	22bc      	movs	r2, #188	; 0xbc
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f014 f882 	bl	80165e6 <memset>
  if(spiHandle->Instance==SPI1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a53      	ldr	r2, [pc, #332]	; (8002634 <HAL_SPI_MspInit+0x178>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d166      	bne.n	80025ba <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80024ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f6:	f107 0320 	add.w	r3, r7, #32
 80024fa:	4618      	mov	r0, r3
 80024fc:	f008 f996 	bl	800a82c <HAL_RCCEx_PeriphCLKConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002506:	f7ff fda5 	bl	8002054 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800250a:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 800250c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002510:	4a49      	ldr	r2, [pc, #292]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 8002512:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002516:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 800251c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002528:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 800252a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252e:	4a42      	ldr	r2, [pc, #264]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002538:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002546:	4b3c      	ldr	r3, [pc, #240]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 8002548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254c:	4a3a      	ldr	r2, [pc, #232]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002556:	4b38      	ldr	r3, [pc, #224]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 8002558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002576:	2301      	movs	r3, #1
 8002578:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800257c:	2305      	movs	r3, #5
 800257e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002582:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002586:	4619      	mov	r1, r3
 8002588:	482c      	ldr	r0, [pc, #176]	; (800263c <HAL_SPI_MspInit+0x180>)
 800258a:	f005 f8d7 	bl	800773c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800258e:	2318      	movs	r3, #24
 8002590:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025a6:	2305      	movs	r3, #5
 80025a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025b0:	4619      	mov	r1, r3
 80025b2:	4823      	ldr	r0, [pc, #140]	; (8002640 <HAL_SPI_MspInit+0x184>)
 80025b4:	f005 f8c2 	bl	800773c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80025b8:	e038      	b.n	800262c <HAL_SPI_MspInit+0x170>
  else if(spiHandle->Instance==SPI4)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_SPI_MspInit+0x188>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d133      	bne.n	800262c <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 80025c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ca:	4a1b      	ldr	r2, [pc, #108]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 80025cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 80025d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 80025e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e8:	4a13      	ldr	r2, [pc, #76]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_SPI_MspInit+0x17c>)
 80025f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002600:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002604:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002614:	2301      	movs	r3, #1
 8002616:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800261a:	2305      	movs	r3, #5
 800261c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002620:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002624:	4619      	mov	r1, r3
 8002626:	4808      	ldr	r0, [pc, #32]	; (8002648 <HAL_SPI_MspInit+0x18c>)
 8002628:	f005 f888 	bl	800773c <HAL_GPIO_Init>
}
 800262c:	bf00      	nop
 800262e:	37f0      	adds	r7, #240	; 0xf0
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40013000 	.word	0x40013000
 8002638:	58024400 	.word	0x58024400
 800263c:	58020c00 	.word	0x58020c00
 8002640:	58020400 	.word	0x58020400
 8002644:	40013400 	.word	0x40013400
 8002648:	58021000 	.word	0x58021000

0800264c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_MspInit+0x38>)
 8002654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002658:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <HAL_MspInit+0x38>)
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_MspInit+0x38>)
 8002664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	210f      	movs	r1, #15
 8002674:	f06f 0001 	mvn.w	r0, #1
 8002678:	f004 f984 	bl	8006984 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	58024400 	.word	0x58024400

08002688 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08e      	sub	sp, #56	; 0x38
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b0f      	cmp	r3, #15
 8002694:	d844      	bhi.n	8002720 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8002696:	2200      	movs	r2, #0
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	2076      	movs	r0, #118	; 0x76
 800269c:	f004 f972 	bl	8006984 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80026a0:	2076      	movs	r0, #118	; 0x76
 80026a2:	f004 f989 	bl	80069b8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80026a6:	4a24      	ldr	r2, [pc, #144]	; (8002738 <HAL_InitTick+0xb0>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_InitTick+0xb4>)
 80026ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026b2:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_InitTick+0xb4>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026bc:	4b1f      	ldr	r3, [pc, #124]	; (800273c <HAL_InitTick+0xb4>)
 80026be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026ca:	f107 020c 	add.w	r2, r7, #12
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f008 f867 	bl	800a7a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80026da:	f008 f84f 	bl	800a77c <HAL_RCC_GetPCLK2Freq>
 80026de:	4603      	mov	r3, r0
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e6:	4a16      	ldr	r2, [pc, #88]	; (8002740 <HAL_InitTick+0xb8>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	0c9b      	lsrs	r3, r3, #18
 80026ee:	3b01      	subs	r3, #1
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <HAL_InitTick+0xbc>)
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <HAL_InitTick+0xc0>)
 80026f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_InitTick+0xbc>)
 80026fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026fe:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002700:	4a10      	ldr	r2, [pc, #64]	; (8002744 <HAL_InitTick+0xbc>)
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_InitTick+0xbc>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_InitTick+0xbc>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002712:	480c      	ldr	r0, [pc, #48]	; (8002744 <HAL_InitTick+0xbc>)
 8002714:	f00b fc9b 	bl	800e04e <HAL_TIM_Base_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d107      	bne.n	800272e <HAL_InitTick+0xa6>
 800271e:	e001      	b.n	8002724 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e005      	b.n	8002730 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002724:	4807      	ldr	r0, [pc, #28]	; (8002744 <HAL_InitTick+0xbc>)
 8002726:	f00b fcf3 	bl	800e110 <HAL_TIM_Base_Start_IT>
 800272a:	4603      	mov	r3, r0
 800272c:	e000      	b.n	8002730 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
}
 8002730:	4618      	mov	r0, r3
 8002732:	3738      	adds	r7, #56	; 0x38
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	240000e0 	.word	0x240000e0
 800273c:	58024400 	.word	0x58024400
 8002740:	431bde83 	.word	0x431bde83
 8002744:	240050f8 	.word	0x240050f8
 8002748:	40014800 	.word	0x40014800

0800274c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <NMI_Handler+0x4>

08002752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <MemManage_Handler+0x4>

0800275e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <BusFault_Handler+0x4>

08002764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <UsageFault_Handler+0x4>

0800276a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <USART1_IRQHandler+0x10>)
 800277e:	f00c fe7d 	bl	800f47c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	24005190 	.word	0x24005190

0800278c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <USART3_IRQHandler+0x10>)
 8002792:	f00c fe73 	bl	800f47c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	24004f58 	.word	0x24004f58

080027a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <UART4_IRQHandler+0x10>)
 80027a6:	f00c fe69 	bl	800f47c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	24005220 	.word	0x24005220

080027b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <OTG_FS_IRQHandler+0x10>)
 80027ba:	f005 fb36 	bl	8007e2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	240067d8 	.word	0x240067d8

080027c8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <TIM17_IRQHandler+0x10>)
 80027ce:	f00b fd66 	bl	800e29e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	240050f8 	.word	0x240050f8

080027dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
	return 1;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <_kill>:

int _kill(int pid, int sig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027f6:	f013 fdc5 	bl	8016384 <__errno>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2216      	movs	r2, #22
 80027fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_exit>:

void _exit (int status)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002814:	f04f 31ff 	mov.w	r1, #4294967295
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ffe7 	bl	80027ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800281e:	e7fe      	b.n	800281e <_exit+0x12>

08002820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e00a      	b.n	8002848 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002832:	f3af 8000 	nop.w
 8002836:	4601      	mov	r1, r0
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	dbf0      	blt.n	8002832 <_read+0x12>
	}

return len;
 8002850:	687b      	ldr	r3, [r7, #4]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_close>:
	}
	return len;
}

int _close(int file)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
	return -1;
 8002862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002882:	605a      	str	r2, [r3, #4]
	return 0;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <_isatty>:

int _isatty(int file)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	return 1;
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
	return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <_sbrk+0x5c>)
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <_sbrk+0x60>)
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <_sbrk+0x64>)
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <_sbrk+0x68>)
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <_sbrk+0x64>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d207      	bcs.n	8002904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f4:	f013 fd46 	bl	8016384 <__errno>
 80028f8:	4603      	mov	r3, r0
 80028fa:	220c      	movs	r2, #12
 80028fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	e009      	b.n	8002918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <_sbrk+0x64>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <_sbrk+0x64>)
 8002914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	24080000 	.word	0x24080000
 8002924:	00002000 	.word	0x00002000
 8002928:	240007d0 	.word	0x240007d0
 800292c:	24006bf0 	.word	0x24006bf0

08002930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002934:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <SystemInit+0xec>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	4a38      	ldr	r2, [pc, #224]	; (8002a1c <SystemInit+0xec>)
 800293c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <SystemInit+0xf0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	2b06      	cmp	r3, #6
 800294e:	d807      	bhi.n	8002960 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002950:	4b33      	ldr	r3, [pc, #204]	; (8002a20 <SystemInit+0xf0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 030f 	bic.w	r3, r3, #15
 8002958:	4a31      	ldr	r2, [pc, #196]	; (8002a20 <SystemInit+0xf0>)
 800295a:	f043 0307 	orr.w	r3, r3, #7
 800295e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002960:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <SystemInit+0xf4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2f      	ldr	r2, [pc, #188]	; (8002a24 <SystemInit+0xf4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800296c:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <SystemInit+0xf4>)
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <SystemInit+0xf4>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	492b      	ldr	r1, [pc, #172]	; (8002a24 <SystemInit+0xf4>)
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <SystemInit+0xf8>)
 800297a:	4013      	ands	r3, r2
 800297c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800297e:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <SystemInit+0xf0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800298a:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <SystemInit+0xf0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 030f 	bic.w	r3, r3, #15
 8002992:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <SystemInit+0xf0>)
 8002994:	f043 0307 	orr.w	r3, r3, #7
 8002998:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <SystemInit+0xf4>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <SystemInit+0xf4>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80029a6:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <SystemInit+0xf4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <SystemInit+0xf4>)
 80029ae:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <SystemInit+0xfc>)
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <SystemInit+0xf4>)
 80029b4:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <SystemInit+0x100>)
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <SystemInit+0xf4>)
 80029ba:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <SystemInit+0x104>)
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029be:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <SystemInit+0xf4>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <SystemInit+0xf4>)
 80029c6:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <SystemInit+0x104>)
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <SystemInit+0xf4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <SystemInit+0xf4>)
 80029d2:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <SystemInit+0x104>)
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <SystemInit+0xf4>)
 80029d8:	2200      	movs	r2, #0
 80029da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <SystemInit+0xf4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <SystemInit+0xf4>)
 80029e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <SystemInit+0xf4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <SystemInit+0x108>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <SystemInit+0x10c>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029fa:	d202      	bcs.n	8002a02 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <SystemInit+0x110>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <SystemInit+0x114>)
 8002a04:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002a08:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a0a:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <SystemInit+0xec>)
 8002a0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a10:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00
 8002a20:	52002000 	.word	0x52002000
 8002a24:	58024400 	.word	0x58024400
 8002a28:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a2c:	02020200 	.word	0x02020200
 8002a30:	01ff0000 	.word	0x01ff0000
 8002a34:	01010280 	.word	0x01010280
 8002a38:	5c001000 	.word	0x5c001000
 8002a3c:	ffff0000 	.word	0xffff0000
 8002a40:	51008108 	.word	0x51008108
 8002a44:	52004000 	.word	0x52004000

08002a48 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b096      	sub	sp, #88	; 0x58
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	615a      	str	r2, [r3, #20]
 8002a6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a6e:	1d3b      	adds	r3, r7, #4
 8002a70:	222c      	movs	r2, #44	; 0x2c
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f013 fdb6 	bl	80165e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a7a:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002a7c:	4a38      	ldr	r2, [pc, #224]	; (8002b60 <MX_TIM1_Init+0x118>)
 8002a7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 8002a80:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002a82:	2277      	movs	r2, #119	; 0x77
 8002a84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a86:	4b35      	ldr	r3, [pc, #212]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002a8c:	4b33      	ldr	r3, [pc, #204]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002a8e:	2263      	movs	r2, #99	; 0x63
 8002a90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a92:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a9e:	4b2f      	ldr	r3, [pc, #188]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002aa4:	482d      	ldr	r0, [pc, #180]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002aa6:	f00b fba3 	bl	800e1f0 <HAL_TIM_PWM_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002ab0:	f7ff fad0 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4825      	ldr	r0, [pc, #148]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002ac8:	f00c fa62 	bl	800ef90 <HAL_TIMEx_MasterConfigSynchronization>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002ad2:	f7ff fabf 	bl	8002054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ad6:	2360      	movs	r3, #96	; 0x60
 8002ad8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002af6:	2204      	movs	r2, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4818      	ldr	r0, [pc, #96]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002afc:	f00b fcee 	bl	800e4dc <HAL_TIM_PWM_ConfigChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002b06:	f7ff faa5 	bl	8002054 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4807      	ldr	r0, [pc, #28]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002b40:	f00c faae 	bl	800f0a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002b4a:	f7ff fa83 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b4e:	4803      	ldr	r0, [pc, #12]	; (8002b5c <MX_TIM1_Init+0x114>)
 8002b50:	f000 f82a 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 8002b54:	bf00      	nop
 8002b56:	3758      	adds	r7, #88	; 0x58
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	24005144 	.word	0x24005144
 8002b60:	40010000 	.word	0x40010000

08002b64 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_TIM_PWM_MspInit+0x40>)
 8002b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b7c:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_TIM_PWM_MspInit+0x40>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_TIM_PWM_MspInit+0x40>)
 8002b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	58024400 	.word	0x58024400

08002ba8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <HAL_TIM_MspPostInit+0x6c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d11f      	bne.n	8002c0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <HAL_TIM_MspPostInit+0x70>)
 8002bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd0:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <HAL_TIM_MspPostInit+0x70>)
 8002bd2:	f043 0310 	orr.w	r3, r3, #16
 8002bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_TIM_MspPostInit+0x70>)
 8002bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bfe:	f107 030c 	add.w	r3, r7, #12
 8002c02:	4619      	mov	r1, r3
 8002c04:	4805      	ldr	r0, [pc, #20]	; (8002c1c <HAL_TIM_MspPostInit+0x74>)
 8002c06:	f004 fd99 	bl	800773c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c0a:	bf00      	nop
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40010000 	.word	0x40010000
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	58021000 	.word	0x58021000

08002c20 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <MX_UART4_Init+0x94>)
 8002c28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002c2a:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c44:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c46:	220c      	movs	r2, #12
 8002c48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c4a:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c50:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c56:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c68:	4811      	ldr	r0, [pc, #68]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c6a:	f00c fada 	bl	800f222 <HAL_UART_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002c74:	f7ff f9ee 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c78:	2100      	movs	r1, #0
 8002c7a:	480d      	ldr	r0, [pc, #52]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c7c:	f00e f9f9 	bl	8011072 <HAL_UARTEx_SetTxFifoThreshold>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002c86:	f7ff f9e5 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4808      	ldr	r0, [pc, #32]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c8e:	f00e fa2e 	bl	80110ee <HAL_UARTEx_SetRxFifoThreshold>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002c98:	f7ff f9dc 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002c9c:	4804      	ldr	r0, [pc, #16]	; (8002cb0 <MX_UART4_Init+0x90>)
 8002c9e:	f00e f9af 	bl	8011000 <HAL_UARTEx_DisableFifoMode>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002ca8:	f7ff f9d4 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	24005220 	.word	0x24005220
 8002cb4:	40004c00 	.word	0x40004c00

08002cb8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cbc:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002cbe:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <MX_USART1_UART_Init+0x94>)
 8002cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cca:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cd6:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002cde:	220c      	movs	r2, #12
 8002ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce2:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d00:	4811      	ldr	r0, [pc, #68]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002d02:	f00c fa8e 	bl	800f222 <HAL_UART_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d0c:	f7ff f9a2 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d10:	2100      	movs	r1, #0
 8002d12:	480d      	ldr	r0, [pc, #52]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002d14:	f00e f9ad 	bl	8011072 <HAL_UARTEx_SetTxFifoThreshold>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d1e:	f7ff f999 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d22:	2100      	movs	r1, #0
 8002d24:	4808      	ldr	r0, [pc, #32]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002d26:	f00e f9e2 	bl	80110ee <HAL_UARTEx_SetRxFifoThreshold>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d30:	f7ff f990 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d34:	4804      	ldr	r0, [pc, #16]	; (8002d48 <MX_USART1_UART_Init+0x90>)
 8002d36:	f00e f963 	bl	8011000 <HAL_UARTEx_DisableFifoMode>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d40:	f7ff f988 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	24005190 	.word	0x24005190
 8002d4c:	40011000 	.word	0x40011000

08002d50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d56:	4a23      	ldr	r2, [pc, #140]	; (8002de4 <MX_USART3_UART_Init+0x94>)
 8002d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d5a:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d76:	220c      	movs	r2, #12
 8002d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d8c:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d98:	4811      	ldr	r0, [pc, #68]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002d9a:	f00c fa42 	bl	800f222 <HAL_UART_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002da4:	f7ff f956 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da8:	2100      	movs	r1, #0
 8002daa:	480d      	ldr	r0, [pc, #52]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002dac:	f00e f961 	bl	8011072 <HAL_UARTEx_SetTxFifoThreshold>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002db6:	f7ff f94d 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4808      	ldr	r0, [pc, #32]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002dbe:	f00e f996 	bl	80110ee <HAL_UARTEx_SetRxFifoThreshold>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002dc8:	f7ff f944 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002dcc:	4804      	ldr	r0, [pc, #16]	; (8002de0 <MX_USART3_UART_Init+0x90>)
 8002dce:	f00e f917 	bl	8011000 <HAL_UARTEx_DisableFifoMode>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002dd8:	f7ff f93c 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	24004f58 	.word	0x24004f58
 8002de4:	40004800 	.word	0x40004800

08002de8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b0bc      	sub	sp, #240	; 0xf0
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e00:	f107 0320 	add.w	r3, r7, #32
 8002e04:	22bc      	movs	r2, #188	; 0xbc
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f013 fbec 	bl	80165e6 <memset>
  if(uartHandle->Instance==UART4)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6d      	ldr	r2, [pc, #436]	; (8002fc8 <HAL_UART_MspInit+0x1e0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d142      	bne.n	8002e9e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e22:	f107 0320 	add.w	r3, r7, #32
 8002e26:	4618      	mov	r0, r3
 8002e28:	f007 fd00 	bl	800a82c <HAL_RCCEx_PeriphCLKConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e32:	f7ff f90f 	bl	8002054 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e36:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e3c:	4a63      	ldr	r2, [pc, #396]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e46:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e54:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5a:	4a5c      	ldr	r2, [pc, #368]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e64:	4b59      	ldr	r3, [pc, #356]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e72:	2303      	movs	r3, #3
 8002e74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e94:	4619      	mov	r1, r3
 8002e96:	484e      	ldr	r0, [pc, #312]	; (8002fd0 <HAL_UART_MspInit+0x1e8>)
 8002e98:	f004 fc50 	bl	800773c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e9c:	e090      	b.n	8002fc0 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a4c      	ldr	r2, [pc, #304]	; (8002fd4 <HAL_UART_MspInit+0x1ec>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d143      	bne.n	8002f30 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eb2:	f107 0320 	add.w	r3, r7, #32
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f007 fcb8 	bl	800a82c <HAL_RCCEx_PeriphCLKConfig>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8002ec2:	f7ff f8c7 	bl	8002054 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ec6:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ecc:	4a3f      	ldr	r2, [pc, #252]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002ece:	f043 0310 	orr.w	r3, r3, #16
 8002ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ed6:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee4:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eea:	4a38      	ldr	r2, [pc, #224]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ef4:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002f02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f26:	4619      	mov	r1, r3
 8002f28:	482b      	ldr	r0, [pc, #172]	; (8002fd8 <HAL_UART_MspInit+0x1f0>)
 8002f2a:	f004 fc07 	bl	800773c <HAL_GPIO_Init>
}
 8002f2e:	e047      	b.n	8002fc0 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART3)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a29      	ldr	r2, [pc, #164]	; (8002fdc <HAL_UART_MspInit+0x1f4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d142      	bne.n	8002fc0 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f44:	f107 0320 	add.w	r3, r7, #32
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f007 fc6f 	bl	800a82c <HAL_RCCEx_PeriphCLKConfig>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8002f54:	f7ff f87e 	bl	8002054 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f58:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f68:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f7c:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002f7e:	f043 0302 	orr.w	r3, r3, #2
 8002f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_UART_MspInit+0x1e4>)
 8002f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fae:	2307      	movs	r3, #7
 8002fb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4807      	ldr	r0, [pc, #28]	; (8002fd8 <HAL_UART_MspInit+0x1f0>)
 8002fbc:	f004 fbbe 	bl	800773c <HAL_GPIO_Init>
}
 8002fc0:	bf00      	nop
 8002fc2:	37f0      	adds	r7, #240	; 0xf0
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40004c00 	.word	0x40004c00
 8002fcc:	58024400 	.word	0x58024400
 8002fd0:	58020000 	.word	0x58020000
 8002fd4:	40011000 	.word	0x40011000
 8002fd8:	58020400 	.word	0x58020400
 8002fdc:	40004800 	.word	0x40004800

08002fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fe4:	f7ff fca4 	bl	8002930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fea:	490d      	ldr	r1, [pc, #52]	; (8003020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003000:	4c0a      	ldr	r4, [pc, #40]	; (800302c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800300e:	f013 fab5 	bl	801657c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003012:	f7fe fea1 	bl	8001d58 <main>
  bx  lr
 8003016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003018:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800301c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003020:	24000430 	.word	0x24000430
  ldr r2, =_sidata
 8003024:	08024c20 	.word	0x08024c20
  ldr r2, =_sbss
 8003028:	24000430 	.word	0x24000430
  ldr r4, =_ebss
 800302c:	24006bf0 	.word	0x24006bf0

08003030 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003030:	e7fe      	b.n	8003030 <ADC3_IRQHandler>
	...

08003034 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8003034:	b5b0      	push	{r4, r5, r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af02      	add	r7, sp, #8
/*	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
	ST7735Ctx.Panel = HannStar_Panel;
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
	#elif TFT18
*/	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 800303a:	4b7c      	ldr	r3, [pc, #496]	; (800322c <LCD_Test+0x1f8>)
 800303c:	2203      	movs	r2, #3
 800303e:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = BOE_Panel;
 8003040:	4b7a      	ldr	r3, [pc, #488]	; (800322c <LCD_Test+0x1f8>)
 8003042:	2201      	movs	r2, #1
 8003044:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_1_8a_inch_screen;
 8003046:	4b79      	ldr	r3, [pc, #484]	; (800322c <LCD_Test+0x1f8>)
 8003048:	2202      	movs	r2, #2
 800304a:	735a      	strb	r2, [r3, #13]
//	#else
//	error "Unknown Screen"
	
//	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 800304c:	4978      	ldr	r1, [pc, #480]	; (8003230 <LCD_Test+0x1fc>)
 800304e:	4879      	ldr	r0, [pc, #484]	; (8003234 <LCD_Test+0x200>)
 8003050:	f000 fcb4 	bl	80039bc <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8003054:	4b78      	ldr	r3, [pc, #480]	; (8003238 <LCD_Test+0x204>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a74      	ldr	r2, [pc, #464]	; (800322c <LCD_Test+0x1f8>)
 800305a:	2105      	movs	r1, #5
 800305c:	4875      	ldr	r0, [pc, #468]	; (8003234 <LCD_Test+0x200>)
 800305e:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8003060:	4b75      	ldr	r3, [pc, #468]	; (8003238 <LCD_Test+0x204>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4975      	ldr	r1, [pc, #468]	; (800323c <LCD_Test+0x208>)
 8003066:	4873      	ldr	r0, [pc, #460]	; (8003234 <LCD_Test+0x200>)
 8003068:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 800306a:	2000      	movs	r0, #0
 800306c:	f000 f8f8 	bl	8003260 <LCD_SetBrightness>
/*	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
	#elif TFT18
*/	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
 8003070:	4b71      	ldr	r3, [pc, #452]	; (8003238 <LCD_Test+0x204>)
 8003072:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003074:	4b72      	ldr	r3, [pc, #456]	; (8003240 <LCD_Test+0x20c>)
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	486e      	ldr	r0, [pc, #440]	; (8003234 <LCD_Test+0x200>)
 800307c:	47a0      	blx	r4
//	#endif
	
  uint32_t tick = get_tick();
 800307e:	f002 fadf 	bl	8005640 <HAL_GetTick>
 8003082:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8003084:	e06a      	b.n	800315c <LCD_Test+0x128>
	{
		delay_ms(10);
 8003086:	200a      	movs	r0, #10
 8003088:	f002 fae6 	bl	8005658 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 800308c:	f002 fad8 	bl	8005640 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309a:	d80f      	bhi.n	80030bc <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 800309c:	f002 fad0 	bl	8005640 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2264      	movs	r2, #100	; 0x64
 80030a8:	fb02 f303 	mul.w	r3, r2, r3
 80030ac:	4a65      	ldr	r2, [pc, #404]	; (8003244 <LCD_Test+0x210>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f8d3 	bl	8003260 <LCD_SetBrightness>
 80030ba:	e04f      	b.n	800315c <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 80030bc:	f002 fac0 	bl	8005640 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d83d      	bhi.n	800314a <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 80030ce:	f002 fab7 	bl	8005640 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80030dc:	4a5a      	ldr	r2, [pc, #360]	; (8003248 <LCD_Test+0x214>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	08da      	lsrs	r2, r3, #3
 80030e4:	463b      	mov	r3, r7
 80030e6:	4959      	ldr	r1, [pc, #356]	; (800324c <LCD_Test+0x218>)
 80030e8:	4618      	mov	r0, r3
 80030ea:	f013 ffb5 	bl	8017058 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 80030ee:	4b4f      	ldr	r3, [pc, #316]	; (800322c <LCD_Test+0x1f8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b1e      	subs	r3, #30
 80030f6:	b298      	uxth	r0, r3
 80030f8:	4b4c      	ldr	r3, [pc, #304]	; (800322c <LCD_Test+0x1f8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	463b      	mov	r3, r7
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2310      	movs	r3, #16
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2310      	movs	r3, #16
 8003108:	2101      	movs	r1, #1
 800310a:	f000 fb09 	bl	8003720 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 800310e:	4b4a      	ldr	r3, [pc, #296]	; (8003238 <LCD_Test+0x204>)
 8003110:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003112:	4b46      	ldr	r3, [pc, #280]	; (800322c <LCD_Test+0x1f8>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	1edd      	subs	r5, r3, #3
 8003118:	f002 fa92 	bl	8005640 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003126:	4a41      	ldr	r2, [pc, #260]	; (800322c <LCD_Test+0x1f8>)
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	4a45      	ldr	r2, [pc, #276]	; (8003244 <LCD_Test+0x210>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	09db      	lsrs	r3, r3, #7
 8003136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800313a:	9201      	str	r2, [sp, #4]
 800313c:	2203      	movs	r2, #3
 800313e:	9200      	str	r2, [sp, #0]
 8003140:	462a      	mov	r2, r5
 8003142:	2100      	movs	r1, #0
 8003144:	483b      	ldr	r0, [pc, #236]	; (8003234 <LCD_Test+0x200>)
 8003146:	47a0      	blx	r4
 8003148:	e008      	b.n	800315c <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 800314a:	f002 fa79 	bl	8005640 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003158:	4293      	cmp	r3, r2
 800315a:	d807      	bhi.n	800316c <LCD_Test+0x138>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 800315c:	2108      	movs	r1, #8
 800315e:	483c      	ldr	r0, [pc, #240]	; (8003250 <LCD_Test+0x21c>)
 8003160:	f004 fc9c 	bl	8007a9c <HAL_GPIO_ReadPin>
 8003164:	4603      	mov	r3, r0
 8003166:	2b01      	cmp	r3, #1
 8003168:	d18d      	bne.n	8003086 <LCD_Test+0x52>
 800316a:	e004      	b.n	8003176 <LCD_Test+0x142>
			break;
 800316c:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800316e:	e002      	b.n	8003176 <LCD_Test+0x142>
	{
		delay_ms(10);
 8003170:	200a      	movs	r0, #10
 8003172:	f002 fa71 	bl	8005658 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8003176:	2108      	movs	r1, #8
 8003178:	4835      	ldr	r0, [pc, #212]	; (8003250 <LCD_Test+0x21c>)
 800317a:	f004 fc8f 	bl	8007a9c <HAL_GPIO_ReadPin>
 800317e:	4603      	mov	r3, r0
 8003180:	2b01      	cmp	r3, #1
 8003182:	d0f5      	beq.n	8003170 <LCD_Test+0x13c>
	}
	LCD_Light(0, 300);
 8003184:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003188:	2000      	movs	r0, #0
 800318a:	f000 f885 	bl	8003298 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 800318e:	4b2a      	ldr	r3, [pc, #168]	; (8003238 <LCD_Test+0x204>)
 8003190:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <LCD_Test+0x1f8>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <LCD_Test+0x1f8>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2100      	movs	r1, #0
 800319c:	9101      	str	r1, [sp, #4]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	4823      	ldr	r0, [pc, #140]	; (8003234 <LCD_Test+0x200>)
 80031a8:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 80031aa:	463b      	mov	r3, r7
 80031ac:	4929      	ldr	r1, [pc, #164]	; (8003254 <LCD_Test+0x220>)
 80031ae:	4618      	mov	r0, r3
 80031b0:	f013 ff52 	bl	8017058 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 80031b4:	4b1d      	ldr	r3, [pc, #116]	; (800322c <LCD_Test+0x1f8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	463b      	mov	r3, r7
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	2310      	movs	r3, #16
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2310      	movs	r3, #16
 80031c4:	2104      	movs	r1, #4
 80031c6:	2004      	movs	r0, #4
 80031c8:	f000 faaa 	bl	8003720 <LCD_ShowString>
	sprintf((char *)&text, "STM32H743 %X", HAL_GetDEVID());
 80031cc:	f002 fa74 	bl	80056b8 <HAL_GetDEVID>
 80031d0:	4602      	mov	r2, r0
 80031d2:	463b      	mov	r3, r7
 80031d4:	4920      	ldr	r1, [pc, #128]	; (8003258 <LCD_Test+0x224>)
 80031d6:	4618      	mov	r0, r3
 80031d8:	f013 ff3e 	bl	8017058 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 80031dc:	4b13      	ldr	r3, [pc, #76]	; (800322c <LCD_Test+0x1f8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	463b      	mov	r3, r7
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	2310      	movs	r3, #16
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	2310      	movs	r3, #16
 80031ec:	2116      	movs	r1, #22
 80031ee:	2004      	movs	r0, #4
 80031f0:	f000 fa96 	bl	8003720 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <LCD_Test+0x208>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	463b      	mov	r3, r7
 80031fa:	4918      	ldr	r1, [pc, #96]	; (800325c <LCD_Test+0x228>)
 80031fc:	4618      	mov	r0, r3
 80031fe:	f013 ff2b 	bl	8017058 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <LCD_Test+0x1f8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	b29a      	uxth	r2, r3
 8003208:	463b      	mov	r3, r7
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	2310      	movs	r3, #16
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2310      	movs	r3, #16
 8003212:	2128      	movs	r1, #40	; 0x28
 8003214:	2004      	movs	r0, #4
 8003216:	f000 fa83 	bl	8003720 <LCD_ShowString>

	LCD_Light(100, 200);
 800321a:	21c8      	movs	r1, #200	; 0xc8
 800321c:	2064      	movs	r0, #100	; 0x64
 800321e:	f000 f83b 	bl	8003298 <LCD_Light>
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bdb0      	pop	{r4, r5, r7, pc}
 800322a:	bf00      	nop
 800322c:	240052ec 	.word	0x240052ec
 8003230:	2400004c 	.word	0x2400004c
 8003234:	240052b4 	.word	0x240052b4
 8003238:	24000070 	.word	0x24000070
 800323c:	240052b0 	.word	0x240052b0
 8003240:	08019f5c 	.word	0x08019f5c
 8003244:	10624dd3 	.word	0x10624dd3
 8003248:	cccccccd 	.word	0xcccccccd
 800324c:	08019464 	.word	0x08019464
 8003250:	58021000 	.word	0x58021000
 8003254:	0801946c 	.word	0x0801946c
 8003258:	0801947c 	.word	0x0801947c
 800325c:	0801948c 	.word	0x0801948c

08003260 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <LCD_SetBrightness+0x1c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	24005144 	.word	0x24005144

08003280 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <LCD_GetBrightness+0x14>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	24005144 	.word	0x24005144

08003298 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	; 0x28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 80032a2:	f7ff ffed 	bl	8003280 <LCD_GetBrightness>
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 80032ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d05e      	beq.n	8003372 <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d05c      	beq.n	8003376 <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c6:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80032d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032dc:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ea:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80032fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003300:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8003304:	edd7 6a07 	vldr	s13, [r7, #28]
 8003308:	ed97 7a06 	vldr	s14, [r7, #24]
 800330c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003310:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8003314:	f002 f994 	bl	8005640 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 800331a:	2001      	movs	r0, #1
 800331c:	f002 f99c 	bl	8005658 <HAL_Delay>
		
		time_now = get_tick()-tick;
 8003320:	f002 f98e 	bl	8005640 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003336:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 800333a:	ed97 7a06 	vldr	s14, [r7, #24]
 800333e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003354:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 8003358:	edd7 7a03 	vldr	s15, [r7, #12]
 800335c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003360:	ee17 0a90 	vmov	r0, s15
 8003364:	f7ff ff7c 	bl	8003260 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 8003368:	6a3a      	ldr	r2, [r7, #32]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d204      	bcs.n	800337a <LCD_Light+0xe2>
		delay_ms(1);
 8003370:	e7d3      	b.n	800331a <LCD_Light+0x82>
		return;
 8003372:	bf00      	nop
 8003374:	e002      	b.n	800337c <LCD_Light+0xe4>
		return;
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <LCD_Light+0xe4>
		if(time_now >= time) break;
 800337a:	bf00      	nop
		
	}
}
 800337c:	3728      	adds	r7, #40	; 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8003384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003388:	b08c      	sub	sp, #48	; 0x30
 800338a:	af02      	add	r7, sp, #8
 800338c:	4604      	mov	r4, r0
 800338e:	4608      	mov	r0, r1
 8003390:	4611      	mov	r1, r2
 8003392:	461a      	mov	r2, r3
 8003394:	4623      	mov	r3, r4
 8003396:	80fb      	strh	r3, [r7, #6]
 8003398:	4603      	mov	r3, r0
 800339a:	80bb      	strh	r3, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	70fb      	strb	r3, [r7, #3]
 80033a0:	4613      	mov	r3, r2
 80033a2:	70bb      	strb	r3, [r7, #2]
 80033a4:	466b      	mov	r3, sp
 80033a6:	4698      	mov	r8, r3
  uint8_t temp,t1,t;
	uint16_t y0=y;
 80033a8:	88bb      	ldrh	r3, [r7, #4]
 80033aa:	843b      	strh	r3, [r7, #32]
	uint16_t x0=x;
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	83fb      	strh	r3, [r7, #30]
	uint16_t colortemp=POINT_COLOR; 
 80033b0:	4bb2      	ldr	r3, [pc, #712]	; (800367c <LCD_ShowChar+0x2f8>)
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	83bb      	strh	r3, [r7, #28]
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 80033b6:	78bb      	ldrb	r3, [r7, #2]
 80033b8:	2b0c      	cmp	r3, #12
 80033ba:	d101      	bne.n	80033c0 <LCD_ShowChar+0x3c>
 80033bc:	2406      	movs	r4, #6
 80033be:	e000      	b.n	80033c2 <LCD_ShowChar+0x3e>
 80033c0:	2408      	movs	r4, #8
 80033c2:	78bd      	ldrb	r5, [r7, #2]
 80033c4:	1e63      	subs	r3, r4, #1
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	4623      	mov	r3, r4
 80033ca:	4618      	mov	r0, r3
 80033cc:	f04f 0100 	mov.w	r1, #0
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	010b      	lsls	r3, r1, #4
 80033da:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80033de:	0102      	lsls	r2, r0, #4
 80033e0:	4623      	mov	r3, r4
 80033e2:	005e      	lsls	r6, r3, #1
 80033e4:	462b      	mov	r3, r5
 80033e6:	3b01      	subs	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	4623      	mov	r3, r4
 80033ec:	4618      	mov	r0, r3
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	b2ea      	uxtb	r2, r5
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	fb02 fe01 	mul.w	lr, r2, r1
 80033fc:	fb00 fc03 	mul.w	ip, r0, r3
 8003400:	44f4      	add	ip, lr
 8003402:	fba0 2302 	umull	r2, r3, r0, r2
 8003406:	eb0c 0103 	add.w	r1, ip, r3
 800340a:	460b      	mov	r3, r1
 800340c:	f04f 0000 	mov.w	r0, #0
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	0119      	lsls	r1, r3, #4
 8003416:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800341a:	0110      	lsls	r0, r2, #4
 800341c:	4623      	mov	r3, r4
 800341e:	4618      	mov	r0, r3
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	b2ea      	uxtb	r2, r5
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	fb02 fe01 	mul.w	lr, r2, r1
 800342e:	fb00 fc03 	mul.w	ip, r0, r3
 8003432:	44f4      	add	ip, lr
 8003434:	fba0 2302 	umull	r2, r3, r0, r2
 8003438:	eb0c 0103 	add.w	r1, ip, r3
 800343c:	460b      	mov	r3, r1
 800343e:	f04f 0000 	mov.w	r0, #0
 8003442:	f04f 0100 	mov.w	r1, #0
 8003446:	0119      	lsls	r1, r3, #4
 8003448:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800344c:	0110      	lsls	r0, r2, #4
 800344e:	4623      	mov	r3, r4
 8003450:	462a      	mov	r2, r5
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	3307      	adds	r3, #7
 800345a:	08db      	lsrs	r3, r3, #3
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	ebad 0d03 	sub.w	sp, sp, r3
 8003462:	ab02      	add	r3, sp, #8
 8003464:	3301      	adds	r3, #1
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	613b      	str	r3, [r7, #16]
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 800346c:	f107 0308 	add.w	r3, r7, #8
 8003470:	4619      	mov	r1, r3
 8003472:	4883      	ldr	r0, [pc, #524]	; (8003680 <LCD_ShowChar+0x2fc>)
 8003474:	f001 fbfe 	bl	8004c74 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	4619      	mov	r1, r3
 800347e:	4880      	ldr	r0, [pc, #512]	; (8003680 <LCD_ShowChar+0x2fc>)
 8003480:	f001 fc0a 	bl	8004c98 <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	3b20      	subs	r3, #32
 8003488:	70fb      	strb	r3, [r7, #3]
	count = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if(!mode) //�ǵ��ӷ�ʽ
 800348e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 8096 	bne.w	80035c4 <LCD_ShowChar+0x240>
	{
		for(t=0;t<size;t++)
 8003498:	2300      	movs	r3, #0
 800349a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800349e:	e08a      	b.n	80035b6 <LCD_ShowChar+0x232>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80034a0:	78bb      	ldrb	r3, [r7, #2]
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d10d      	bne.n	80034c2 <LCD_ShowChar+0x13e>
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80034ac:	4875      	ldr	r0, [pc, #468]	; (8003684 <LCD_ShowChar+0x300>)
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4403      	add	r3, r0
 80034b8:	440b      	add	r3, r1
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034c0:	e009      	b.n	80034d6 <LCD_ShowChar+0x152>
			else temp=asc2_1608[num][t];		 //����1608����
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80034c8:	496f      	ldr	r1, [pc, #444]	; (8003688 <LCD_ShowChar+0x304>)
 80034ca:	0112      	lsls	r2, r2, #4
 80034cc:	440a      	add	r2, r1
 80034ce:	4413      	add	r3, r2
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			
			for(t1=0;t1<8;t1++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80034dc:	e060      	b.n	80035a0 <LCD_ShowChar+0x21c>
			{			    
				if(temp&0x80)
 80034de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	da0c      	bge.n	8003500 <LCD_ShowChar+0x17c>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80034e6:	8bbb      	ldrh	r3, [r7, #28]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	b21a      	sxth	r2, r3
 80034ec:	8bbb      	ldrh	r3, [r7, #28]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	b21b      	sxth	r3, r3
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b21b      	sxth	r3, r3
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	4b60      	ldr	r3, [pc, #384]	; (800367c <LCD_ShowChar+0x2f8>)
 80034fc:	801a      	strh	r2, [r3, #0]
 80034fe:	e00d      	b.n	800351c <LCD_ShowChar+0x198>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8003500:	4b62      	ldr	r3, [pc, #392]	; (800368c <LCD_ShowChar+0x308>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	b21a      	sxth	r2, r3
 8003508:	4b60      	ldr	r3, [pc, #384]	; (800368c <LCD_ShowChar+0x308>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	b29b      	uxth	r3, r3
 8003510:	b21b      	sxth	r3, r3
 8003512:	4313      	orrs	r3, r2
 8003514:	b21b      	sxth	r3, r3
 8003516:	b29a      	uxth	r2, r3
 8003518:	4b58      	ldr	r3, [pc, #352]	; (800367c <LCD_ShowChar+0x2f8>)
 800351a:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 800351c:	0872      	lsrs	r2, r6, #1
 800351e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003520:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461c      	mov	r4, r3
 800352a:	4b54      	ldr	r3, [pc, #336]	; (800367c <LCD_ShowChar+0x2f8>)
 800352c:	8818      	ldrh	r0, [r3, #0]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	fb01 f202 	mul.w	r2, r1, r2
 8003534:	4422      	add	r2, r4
 8003536:	4601      	mov	r1, r0
 8003538:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 800353c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800353e:	3301      	adds	r3, #1
 8003540:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 8003542:	78bb      	ldrb	r3, [r7, #2]
 8003544:	b29b      	uxth	r3, r3
 8003546:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003548:	429a      	cmp	r2, r3
 800354a:	d301      	bcc.n	8003550 <LCD_ShowChar+0x1cc>
 800354c:	2300      	movs	r3, #0
 800354e:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 8003550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 800355a:	88bb      	ldrh	r3, [r7, #4]
 800355c:	3301      	adds	r3, #1
 800355e:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8003560:	88ba      	ldrh	r2, [r7, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	429a      	cmp	r2, r3
 8003566:	d303      	bcc.n	8003570 <LCD_ShowChar+0x1ec>
 8003568:	4a44      	ldr	r2, [pc, #272]	; (800367c <LCD_ShowChar+0x2f8>)
 800356a:	8bbb      	ldrh	r3, [r7, #28]
 800356c:	8013      	strh	r3, [r2, #0]
 800356e:	e0ce      	b.n	800370e <LCD_ShowChar+0x38a>
				if((y-y0)==size)
 8003570:	88ba      	ldrh	r2, [r7, #4]
 8003572:	8c3b      	ldrh	r3, [r7, #32]
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	78bb      	ldrb	r3, [r7, #2]
 8003578:	429a      	cmp	r2, r3
 800357a:	d10c      	bne.n	8003596 <LCD_ShowChar+0x212>
				{
					y=y0;
 800357c:	8c3b      	ldrh	r3, [r7, #32]
 800357e:	80bb      	strh	r3, [r7, #4]
					x++;
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	3301      	adds	r3, #1
 8003584:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	d30d      	bcc.n	80035aa <LCD_ShowChar+0x226>
 800358e:	4a3b      	ldr	r2, [pc, #236]	; (800367c <LCD_ShowChar+0x2f8>)
 8003590:	8bbb      	ldrh	r3, [r7, #28]
 8003592:	8013      	strh	r3, [r2, #0]
 8003594:	e0bb      	b.n	800370e <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 8003596:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800359a:	3301      	adds	r3, #1
 800359c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80035a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035a4:	2b07      	cmp	r3, #7
 80035a6:	d99a      	bls.n	80034de <LCD_ShowChar+0x15a>
 80035a8:	e000      	b.n	80035ac <LCD_ShowChar+0x228>
					break;
 80035aa:	bf00      	nop
		for(t=0;t<size;t++)
 80035ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035b0:	3301      	adds	r3, #1
 80035b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035b6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80035ba:	78bb      	ldrb	r3, [r7, #2]
 80035bc:	429a      	cmp	r2, r3
 80035be:	f4ff af6f 	bcc.w	80034a0 <LCD_ShowChar+0x11c>
 80035c2:	e08e      	b.n	80036e2 <LCD_ShowChar+0x35e>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035ca:	e084      	b.n	80036d6 <LCD_ShowChar+0x352>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80035cc:	78bb      	ldrb	r3, [r7, #2]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d10d      	bne.n	80035ee <LCD_ShowChar+0x26a>
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80035d8:	482a      	ldr	r0, [pc, #168]	; (8003684 <LCD_ShowChar+0x300>)
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4403      	add	r3, r0
 80035e4:	440b      	add	r3, r1
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035ec:	e009      	b.n	8003602 <LCD_ShowChar+0x27e>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035f4:	4924      	ldr	r1, [pc, #144]	; (8003688 <LCD_ShowChar+0x304>)
 80035f6:	0112      	lsls	r2, r2, #4
 80035f8:	440a      	add	r2, r1
 80035fa:	4413      	add	r3, r2
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(t1=0;t1<8;t1++)
 8003602:	2300      	movs	r3, #0
 8003604:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003608:	e05a      	b.n	80036c0 <LCD_ShowChar+0x33c>
			{			    
				if(temp&0x80)
 800360a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800360e:	2b00      	cmp	r3, #0
 8003610:	da19      	bge.n	8003646 <LCD_ShowChar+0x2c2>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8003612:	4b1a      	ldr	r3, [pc, #104]	; (800367c <LCD_ShowChar+0x2f8>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	b21a      	sxth	r2, r3
 800361a:	4b18      	ldr	r3, [pc, #96]	; (800367c <LCD_ShowChar+0x2f8>)
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	b29b      	uxth	r3, r3
 8003622:	b21b      	sxth	r3, r3
 8003624:	4313      	orrs	r3, r2
 8003626:	b218      	sxth	r0, r3
 8003628:	0872      	lsrs	r2, r6, #1
 800362a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800362c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461c      	mov	r4, r3
 8003636:	b280      	uxth	r0, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	fb01 f202 	mul.w	r2, r1, r2
 800363e:	4422      	add	r2, r4
 8003640:	4601      	mov	r1, r0
 8003642:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8003646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003648:	3301      	adds	r3, #1
 800364a:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 800364c:	78bb      	ldrb	r3, [r7, #2]
 800364e:	b29b      	uxth	r3, r3
 8003650:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003652:	429a      	cmp	r2, r3
 8003654:	d301      	bcc.n	800365a <LCD_ShowChar+0x2d6>
 8003656:	2300      	movs	r3, #0
 8003658:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 800365a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 8003664:	88bb      	ldrh	r3, [r7, #4]
 8003666:	3301      	adds	r3, #1
 8003668:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800366a:	88ba      	ldrh	r2, [r7, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	429a      	cmp	r2, r3
 8003670:	d30e      	bcc.n	8003690 <LCD_ShowChar+0x30c>
 8003672:	4a02      	ldr	r2, [pc, #8]	; (800367c <LCD_ShowChar+0x2f8>)
 8003674:	8bbb      	ldrh	r3, [r7, #28]
 8003676:	8013      	strh	r3, [r2, #0]
 8003678:	e049      	b.n	800370e <LCD_ShowChar+0x38a>
 800367a:	bf00      	nop
 800367c:	2400006c 	.word	0x2400006c
 8003680:	240052b4 	.word	0x240052b4
 8003684:	080194f8 	.word	0x080194f8
 8003688:	0801996c 	.word	0x0801996c
 800368c:	240007d4 	.word	0x240007d4
				if((y-y0)==size)
 8003690:	88ba      	ldrh	r2, [r7, #4]
 8003692:	8c3b      	ldrh	r3, [r7, #32]
 8003694:	1ad2      	subs	r2, r2, r3
 8003696:	78bb      	ldrb	r3, [r7, #2]
 8003698:	429a      	cmp	r2, r3
 800369a:	d10c      	bne.n	80036b6 <LCD_ShowChar+0x332>
				{
					y=y0;
 800369c:	8c3b      	ldrh	r3, [r7, #32]
 800369e:	80bb      	strh	r3, [r7, #4]
					x++;
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	3301      	adds	r3, #1
 80036a4:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 80036a6:	88fa      	ldrh	r2, [r7, #6]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d30d      	bcc.n	80036ca <LCD_ShowChar+0x346>
 80036ae:	4a1a      	ldr	r2, [pc, #104]	; (8003718 <LCD_ShowChar+0x394>)
 80036b0:	8bbb      	ldrh	r3, [r7, #28]
 80036b2:	8013      	strh	r3, [r2, #0]
 80036b4:	e02b      	b.n	800370e <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 80036b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036ba:	3301      	adds	r3, #1
 80036bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80036c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036c4:	2b07      	cmp	r3, #7
 80036c6:	d9a0      	bls.n	800360a <LCD_ShowChar+0x286>
 80036c8:	e000      	b.n	80036cc <LCD_ShowChar+0x348>
					break;
 80036ca:	bf00      	nop
		for(t=0;t<size;t++)
 80036cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80036d0:	3301      	adds	r3, #1
 80036d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80036d6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80036da:	78bb      	ldrb	r3, [r7, #2]
 80036dc:	429a      	cmp	r2, r3
 80036de:	f4ff af75 	bcc.w	80035cc <LCD_ShowChar+0x248>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 80036e2:	8bf9      	ldrh	r1, [r7, #30]
 80036e4:	8c38      	ldrh	r0, [r7, #32]
 80036e6:	693c      	ldr	r4, [r7, #16]
 80036e8:	78bb      	ldrb	r3, [r7, #2]
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d101      	bne.n	80036f2 <LCD_ShowChar+0x36e>
 80036ee:	2306      	movs	r3, #6
 80036f0:	e000      	b.n	80036f4 <LCD_ShowChar+0x370>
 80036f2:	2308      	movs	r3, #8
 80036f4:	78ba      	ldrb	r2, [r7, #2]
 80036f6:	9201      	str	r2, [sp, #4]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4623      	mov	r3, r4
 80036fc:	4602      	mov	r2, r0
 80036fe:	4807      	ldr	r0, [pc, #28]	; (800371c <LCD_ShowChar+0x398>)
 8003700:	f001 f90a 	bl	8004918 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8003704:	4a04      	ldr	r2, [pc, #16]	; (8003718 <LCD_ShowChar+0x394>)
 8003706:	8bbb      	ldrh	r3, [r7, #28]
 8003708:	8013      	strh	r3, [r2, #0]
 800370a:	46c5      	mov	sp, r8
 800370c:	e000      	b.n	8003710 <LCD_ShowChar+0x38c>
 800370e:	46c5      	mov	sp, r8
}   
 8003710:	3728      	adds	r7, #40	; 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003718:	2400006c 	.word	0x2400006c
 800371c:	240052b4 	.word	0x240052b4

08003720 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af02      	add	r7, sp, #8
 8003726:	4604      	mov	r4, r0
 8003728:	4608      	mov	r0, r1
 800372a:	4611      	mov	r1, r2
 800372c:	461a      	mov	r2, r3
 800372e:	4623      	mov	r3, r4
 8003730:	80fb      	strh	r3, [r7, #6]
 8003732:	4603      	mov	r3, r0
 8003734:	80bb      	strh	r3, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	807b      	strh	r3, [r7, #2]
 800373a:	4613      	mov	r3, r2
 800373c:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	4413      	add	r3, r2
 8003748:	807b      	strh	r3, [r7, #2]
	height+=y;
 800374a:	883a      	ldrh	r2, [r7, #0]
 800374c:	88bb      	ldrh	r3, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8003752:	e024      	b.n	800379e <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	429a      	cmp	r2, r3
 800375a:	d307      	bcc.n	800376c <LCD_ShowString+0x4c>
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	80fb      	strh	r3, [r7, #6]
 8003760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003764:	b29a      	uxth	r2, r3
 8003766:	88bb      	ldrh	r3, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 800376c:	88ba      	ldrh	r2, [r7, #4]
 800376e:	883b      	ldrh	r3, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d21d      	bcs.n	80037b0 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	f897 3020 	ldrb.w	r3, [r7, #32]
 800377c:	88b9      	ldrh	r1, [r7, #4]
 800377e:	88f8      	ldrh	r0, [r7, #6]
 8003780:	2400      	movs	r4, #0
 8003782:	9400      	str	r4, [sp, #0]
 8003784:	f7ff fdfe 	bl	8003384 <LCD_ShowChar>
        x+=size/2;
 8003788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	b29a      	uxth	r2, r3
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	4413      	add	r3, r2
 8003796:	80fb      	strh	r3, [r7, #6]
        p++;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	3301      	adds	r3, #1
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b7e      	cmp	r3, #126	; 0x7e
 80037a4:	d805      	bhi.n	80037b2 <LCD_ShowString+0x92>
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b1f      	cmp	r3, #31
 80037ac:	d8d2      	bhi.n	8003754 <LCD_ShowString+0x34>
    }  
}
 80037ae:	e000      	b.n	80037b2 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 80037b0:	bf00      	nop
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd90      	pop	{r4, r7, pc}
	...

080037bc <lcd_init>:

static int32_t lcd_init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 80037c6:	2104      	movs	r1, #4
 80037c8:	4803      	ldr	r0, [pc, #12]	; (80037d8 <lcd_init+0x1c>)
 80037ca:	f00b fb27 	bl	800ee1c <HAL_TIMEx_PWMN_Start>
	return result;
 80037ce:	687b      	ldr	r3, [r7, #4]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	24005144 	.word	0x24005144

080037dc <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80037e0:	f001 ff2e 	bl	8005640 <HAL_GetTick>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 80037fa:	2200      	movs	r2, #0
 80037fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003800:	481d      	ldr	r0, [pc, #116]	; (8003878 <lcd_writereg+0x8c>)
 8003802:	f004 f963 	bl	8007acc <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8003806:	2200      	movs	r2, #0
 8003808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800380c:	481a      	ldr	r0, [pc, #104]	; (8003878 <lcd_writereg+0x8c>)
 800380e:	f004 f95d 	bl	8007acc <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8003812:	f107 010f 	add.w	r1, r7, #15
 8003816:	2364      	movs	r3, #100	; 0x64
 8003818:	2201      	movs	r2, #1
 800381a:	4818      	ldr	r0, [pc, #96]	; (800387c <lcd_writereg+0x90>)
 800381c:	f009 fc5e 	bl	800d0dc <HAL_SPI_Transmit>
 8003820:	4603      	mov	r3, r0
 8003822:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8003824:	2201      	movs	r2, #1
 8003826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800382a:	4813      	ldr	r0, [pc, #76]	; (8003878 <lcd_writereg+0x8c>)
 800382c:	f004 f94e 	bl	8007acc <HAL_GPIO_WritePin>
	if(length > 0)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	b29a      	uxth	r2, r3
 800383a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	480e      	ldr	r0, [pc, #56]	; (800387c <lcd_writereg+0x90>)
 8003842:	f009 fc4b 	bl	800d0dc <HAL_SPI_Transmit>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4413      	add	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8003850:	2201      	movs	r2, #1
 8003852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003856:	4808      	ldr	r0, [pc, #32]	; (8003878 <lcd_writereg+0x8c>)
 8003858:	f004 f938 	bl	8007acc <HAL_GPIO_WritePin>
	if(result>0){
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	dd03      	ble.n	800386a <lcd_writereg+0x7e>
		result = -1;}
 8003862:	f04f 33ff 	mov.w	r3, #4294967295
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e001      	b.n	800386e <lcd_writereg+0x82>
	else{
		result = 0;}
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
	return result;
 800386e:	697b      	ldr	r3, [r7, #20]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	58021000 	.word	0x58021000
 800387c:	24004fe8 	.word	0x24004fe8

08003880 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 800388c:	2200      	movs	r2, #0
 800388e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003892:	481b      	ldr	r0, [pc, #108]	; (8003900 <lcd_readreg+0x80>)
 8003894:	f004 f91a 	bl	8007acc <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8003898:	2200      	movs	r2, #0
 800389a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800389e:	4818      	ldr	r0, [pc, #96]	; (8003900 <lcd_readreg+0x80>)
 80038a0:	f004 f914 	bl	8007acc <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80038a4:	1df9      	adds	r1, r7, #7
 80038a6:	2364      	movs	r3, #100	; 0x64
 80038a8:	2201      	movs	r2, #1
 80038aa:	4816      	ldr	r0, [pc, #88]	; (8003904 <lcd_readreg+0x84>)
 80038ac:	f009 fc16 	bl	800d0dc <HAL_SPI_Transmit>
 80038b0:	4603      	mov	r3, r0
 80038b2:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 80038b4:	2201      	movs	r2, #1
 80038b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ba:	4811      	ldr	r0, [pc, #68]	; (8003900 <lcd_readreg+0x80>)
 80038bc:	f004 f906 	bl	8007acc <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 80038c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038c4:	2201      	movs	r2, #1
 80038c6:	6839      	ldr	r1, [r7, #0]
 80038c8:	480e      	ldr	r0, [pc, #56]	; (8003904 <lcd_readreg+0x84>)
 80038ca:	f009 fdf9 	bl	800d4c0 <HAL_SPI_Receive>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80038d8:	2201      	movs	r2, #1
 80038da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038de:	4808      	ldr	r0, [pc, #32]	; (8003900 <lcd_readreg+0x80>)
 80038e0:	f004 f8f4 	bl	8007acc <HAL_GPIO_WritePin>
	if(result>0){
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	dd03      	ble.n	80038f2 <lcd_readreg+0x72>
		result = -1;}
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e001      	b.n	80038f6 <lcd_readreg+0x76>
	else{
		result = 0;}
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
	return result;
 80038f6:	68fb      	ldr	r3, [r7, #12]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	58021000 	.word	0x58021000
 8003904:	24004fe8 	.word	0x24004fe8

08003908 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8003912:	2200      	movs	r2, #0
 8003914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003918:	480f      	ldr	r0, [pc, #60]	; (8003958 <lcd_senddata+0x50>)
 800391a:	f004 f8d7 	bl	8007acc <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b29a      	uxth	r2, r3
 8003922:	2364      	movs	r3, #100	; 0x64
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	480d      	ldr	r0, [pc, #52]	; (800395c <lcd_senddata+0x54>)
 8003928:	f009 fbd8 	bl	800d0dc <HAL_SPI_Transmit>
 800392c:	4603      	mov	r3, r0
 800392e:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8003930:	2201      	movs	r2, #1
 8003932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003936:	4808      	ldr	r0, [pc, #32]	; (8003958 <lcd_senddata+0x50>)
 8003938:	f004 f8c8 	bl	8007acc <HAL_GPIO_WritePin>
	if(result>0){
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	dd03      	ble.n	800394a <lcd_senddata+0x42>
		result = -1;}
 8003942:	f04f 33ff 	mov.w	r3, #4294967295
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e001      	b.n	800394e <lcd_senddata+0x46>
	else{
		result = 0;}
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
	return result;
 800394e:	68fb      	ldr	r3, [r7, #12]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	58021000 	.word	0x58021000
 800395c:	24004fe8 	.word	0x24004fe8

08003960 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 800396a:	2200      	movs	r2, #0
 800396c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003970:	4810      	ldr	r0, [pc, #64]	; (80039b4 <lcd_recvdata+0x54>)
 8003972:	f004 f8ab 	bl	8007acc <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	b29a      	uxth	r2, r3
 800397a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	480d      	ldr	r0, [pc, #52]	; (80039b8 <lcd_recvdata+0x58>)
 8003982:	f009 fd9d 	bl	800d4c0 <HAL_SPI_Receive>
 8003986:	4603      	mov	r3, r0
 8003988:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 800398a:	2201      	movs	r2, #1
 800398c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003990:	4808      	ldr	r0, [pc, #32]	; (80039b4 <lcd_recvdata+0x54>)
 8003992:	f004 f89b 	bl	8007acc <HAL_GPIO_WritePin>
	if(result>0){
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	dd03      	ble.n	80039a4 <lcd_recvdata+0x44>
		result = -1;}
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	e001      	b.n	80039a8 <lcd_recvdata+0x48>
	else{
		result = 0;}
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
	return result;
 80039a8:	68fb      	ldr	r3, [r7, #12]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	58021000 	.word	0x58021000
 80039b8:	24004fe8 	.word	0x24004fe8

080039bc <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 80039cc:	f04f 33ff 	mov.w	r3, #4294967295
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	e03a      	b.n	8003a4a <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	891a      	ldrh	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <ST7735_RegisterBusIO+0x98>)
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <ST7735_RegisterBusIO+0x9c>)
 8003a1e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0e      	ldr	r2, [pc, #56]	; (8003a5c <ST7735_RegisterBusIO+0xa0>)
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a0d      	ldr	r2, [pc, #52]	; (8003a60 <ST7735_RegisterBusIO+0xa4>)
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4798      	blx	r3
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	e002      	b.n	8003a4a <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8003a44:	f04f 33ff 	mov.w	r3, #4294967295
 8003a48:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	08004ec5 	.word	0x08004ec5
 8003a58:	08004eed 	.word	0x08004eed
 8003a5c:	08004f17 	.word	0x08004f17
 8003a60:	08004f3b 	.word	0x08004f3b

08003a64 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e3a6      	b.n	80041cc <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f103 0020 	add.w	r0, r3, #32
 8003a88:	f107 0213 	add.w	r2, r7, #19
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2101      	movs	r1, #1
 8003a90:	f001 fa92 	bl	8004fb8 <st7735_write_reg>
 8003a94:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8003a96:	2178      	movs	r1, #120	; 0x78
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f001 fa60 	bl	8004f5e <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f103 0020 	add.w	r0, r3, #32
 8003aa8:	f107 0213 	add.w	r2, r7, #19
 8003aac:	2300      	movs	r3, #0
 8003aae:	2101      	movs	r1, #1
 8003ab0:	f001 fa82 	bl	8004fb8 <st7735_write_reg>
 8003ab4:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8003ab6:	2178      	movs	r1, #120	; 0x78
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f001 fa50 	bl	8004f5e <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f103 0020 	add.w	r0, r3, #32
 8003ac8:	f107 0213 	add.w	r2, r7, #19
 8003acc:	2301      	movs	r3, #1
 8003ace:	2111      	movs	r1, #17
 8003ad0:	f001 fa72 	bl	8004fb8 <st7735_write_reg>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	4413      	add	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f103 0020 	add.w	r0, r3, #32
 8003ae2:	f107 0213 	add.w	r2, r7, #19
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	21b1      	movs	r1, #177	; 0xb1
 8003aea:	f001 fa65 	bl	8004fb8 <st7735_write_reg>
 8003aee:	4602      	mov	r2, r0
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4413      	add	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8003af6:	2301      	movs	r3, #1
 8003af8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3320      	adds	r3, #32
 8003afe:	f107 0113 	add.w	r1, r7, #19
 8003b02:	2201      	movs	r2, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 fa6c 	bl	8004fe2 <st7735_send_data>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	4413      	add	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003b12:	232c      	movs	r3, #44	; 0x2c
 8003b14:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3320      	adds	r3, #32
 8003b1a:	f107 0113 	add.w	r1, r7, #19
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 fa5e 	bl	8004fe2 <st7735_send_data>
 8003b26:	4602      	mov	r2, r0
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003b2e:	232d      	movs	r3, #45	; 0x2d
 8003b30:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3320      	adds	r3, #32
 8003b36:	f107 0113 	add.w	r1, r7, #19
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fa50 	bl	8004fe2 <st7735_send_data>
 8003b42:	4602      	mov	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	4413      	add	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f103 0020 	add.w	r0, r3, #32
 8003b54:	f107 0213 	add.w	r2, r7, #19
 8003b58:	2301      	movs	r3, #1
 8003b5a:	21b2      	movs	r1, #178	; 0xb2
 8003b5c:	f001 fa2c 	bl	8004fb8 <st7735_write_reg>
 8003b60:	4602      	mov	r2, r0
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4413      	add	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003b68:	232c      	movs	r3, #44	; 0x2c
 8003b6a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3320      	adds	r3, #32
 8003b70:	f107 0113 	add.w	r1, r7, #19
 8003b74:	2201      	movs	r2, #1
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 fa33 	bl	8004fe2 <st7735_send_data>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	4413      	add	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003b84:	232d      	movs	r3, #45	; 0x2d
 8003b86:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3320      	adds	r3, #32
 8003b8c:	f107 0113 	add.w	r1, r7, #19
 8003b90:	2201      	movs	r2, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fa25 	bl	8004fe2 <st7735_send_data>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f103 0020 	add.w	r0, r3, #32
 8003baa:	f107 0213 	add.w	r2, r7, #19
 8003bae:	2301      	movs	r3, #1
 8003bb0:	21b3      	movs	r1, #179	; 0xb3
 8003bb2:	f001 fa01 	bl	8004fb8 <st7735_write_reg>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4413      	add	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003bbe:	232c      	movs	r3, #44	; 0x2c
 8003bc0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3320      	adds	r3, #32
 8003bc6:	f107 0113 	add.w	r1, r7, #19
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 fa08 	bl	8004fe2 <st7735_send_data>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003bda:	232d      	movs	r3, #45	; 0x2d
 8003bdc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3320      	adds	r3, #32
 8003be2:	f107 0113 	add.w	r1, r7, #19
 8003be6:	2201      	movs	r2, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 f9fa 	bl	8004fe2 <st7735_send_data>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3320      	adds	r3, #32
 8003bfe:	f107 0113 	add.w	r1, r7, #19
 8003c02:	2201      	movs	r2, #1
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 f9ec 	bl	8004fe2 <st7735_send_data>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003c12:	232c      	movs	r3, #44	; 0x2c
 8003c14:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3320      	adds	r3, #32
 8003c1a:	f107 0113 	add.w	r1, r7, #19
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f9de 	bl	8004fe2 <st7735_send_data>
 8003c26:	4602      	mov	r2, r0
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003c2e:	232d      	movs	r3, #45	; 0x2d
 8003c30:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3320      	adds	r3, #32
 8003c36:	f107 0113 	add.w	r1, r7, #19
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f9d0 	bl	8004fe2 <st7735_send_data>
 8003c42:	4602      	mov	r2, r0
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f103 0020 	add.w	r0, r3, #32
 8003c54:	f107 0213 	add.w	r2, r7, #19
 8003c58:	2301      	movs	r3, #1
 8003c5a:	21b4      	movs	r1, #180	; 0xb4
 8003c5c:	f001 f9ac 	bl	8004fb8 <st7735_write_reg>
 8003c60:	4602      	mov	r2, r0
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	4413      	add	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8003c68:	23a2      	movs	r3, #162	; 0xa2
 8003c6a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f103 0020 	add.w	r0, r3, #32
 8003c72:	f107 0213 	add.w	r2, r7, #19
 8003c76:	2301      	movs	r3, #1
 8003c78:	21c0      	movs	r1, #192	; 0xc0
 8003c7a:	f001 f99d 	bl	8004fb8 <st7735_write_reg>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4413      	add	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8003c86:	2302      	movs	r3, #2
 8003c88:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3320      	adds	r3, #32
 8003c8e:	f107 0113 	add.w	r1, r7, #19
 8003c92:	2201      	movs	r2, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 f9a4 	bl	8004fe2 <st7735_send_data>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8003ca2:	2384      	movs	r3, #132	; 0x84
 8003ca4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3320      	adds	r3, #32
 8003caa:	f107 0113 	add.w	r1, r7, #19
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 f996 	bl	8004fe2 <st7735_send_data>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8003cbe:	23c5      	movs	r3, #197	; 0xc5
 8003cc0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f103 0020 	add.w	r0, r3, #32
 8003cc8:	f107 0213 	add.w	r2, r7, #19
 8003ccc:	2301      	movs	r3, #1
 8003cce:	21c1      	movs	r1, #193	; 0xc1
 8003cd0:	f001 f972 	bl	8004fb8 <st7735_write_reg>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4413      	add	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8003cdc:	230a      	movs	r3, #10
 8003cde:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f103 0020 	add.w	r0, r3, #32
 8003ce6:	f107 0213 	add.w	r2, r7, #19
 8003cea:	2301      	movs	r3, #1
 8003cec:	21c2      	movs	r1, #194	; 0xc2
 8003cee:	f001 f963 	bl	8004fb8 <st7735_write_reg>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3320      	adds	r3, #32
 8003d02:	f107 0113 	add.w	r1, r7, #19
 8003d06:	2201      	movs	r2, #1
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 f96a 	bl	8004fe2 <st7735_send_data>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4413      	add	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8003d16:	238a      	movs	r3, #138	; 0x8a
 8003d18:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f103 0020 	add.w	r0, r3, #32
 8003d20:	f107 0213 	add.w	r2, r7, #19
 8003d24:	2301      	movs	r3, #1
 8003d26:	21c3      	movs	r1, #195	; 0xc3
 8003d28:	f001 f946 	bl	8004fb8 <st7735_write_reg>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4413      	add	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8003d34:	232a      	movs	r3, #42	; 0x2a
 8003d36:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3320      	adds	r3, #32
 8003d3c:	f107 0113 	add.w	r1, r7, #19
 8003d40:	2201      	movs	r2, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 f94d 	bl	8004fe2 <st7735_send_data>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8003d50:	238a      	movs	r3, #138	; 0x8a
 8003d52:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f103 0020 	add.w	r0, r3, #32
 8003d5a:	f107 0213 	add.w	r2, r7, #19
 8003d5e:	2301      	movs	r3, #1
 8003d60:	21c4      	movs	r1, #196	; 0xc4
 8003d62:	f001 f929 	bl	8004fb8 <st7735_write_reg>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8003d6e:	23ee      	movs	r3, #238	; 0xee
 8003d70:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3320      	adds	r3, #32
 8003d76:	f107 0113 	add.w	r1, r7, #19
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 f930 	bl	8004fe2 <st7735_send_data>
 8003d82:	4602      	mov	r2, r0
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4413      	add	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8003d8a:	230e      	movs	r3, #14
 8003d8c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f103 0020 	add.w	r0, r3, #32
 8003d94:	f107 0213 	add.w	r2, r7, #19
 8003d98:	2301      	movs	r3, #1
 8003d9a:	21c5      	movs	r1, #197	; 0xc5
 8003d9c:	f001 f90c 	bl	8004fb8 <st7735_write_reg>
 8003da0:	4602      	mov	r2, r0
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4413      	add	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7b1b      	ldrb	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f103 0020 	add.w	r0, r3, #32
 8003db6:	f107 0213 	add.w	r2, r7, #19
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2121      	movs	r1, #33	; 0x21
 8003dbe:	f001 f8fb 	bl	8004fb8 <st7735_write_reg>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e00c      	b.n	8003de6 <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f103 0020 	add.w	r0, r3, #32
 8003dd2:	f107 0213 	add.w	r2, r7, #19
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2120      	movs	r1, #32
 8003dda:	f001 f8ed 	bl	8004fb8 <st7735_write_reg>
 8003dde:	4602      	mov	r2, r0
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	4413      	add	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f103 0020 	add.w	r0, r3, #32
 8003dec:	f107 0208 	add.w	r2, r7, #8
 8003df0:	2301      	movs	r3, #1
 8003df2:	213a      	movs	r1, #58	; 0x3a
 8003df4:	f001 f8e0 	bl	8004fb8 <st7735_write_reg>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8003e00:	2302      	movs	r3, #2
 8003e02:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f103 0020 	add.w	r0, r3, #32
 8003e0a:	f107 0213 	add.w	r2, r7, #19
 8003e0e:	2301      	movs	r3, #1
 8003e10:	21e0      	movs	r1, #224	; 0xe0
 8003e12:	f001 f8d1 	bl	8004fb8 <st7735_write_reg>
 8003e16:	4602      	mov	r2, r0
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8003e1e:	231c      	movs	r3, #28
 8003e20:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3320      	adds	r3, #32
 8003e26:	f107 0113 	add.w	r1, r7, #19
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 f8d8 	bl	8004fe2 <st7735_send_data>
 8003e32:	4602      	mov	r2, r0
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	4413      	add	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8003e3a:	2307      	movs	r3, #7
 8003e3c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3320      	adds	r3, #32
 8003e42:	f107 0113 	add.w	r1, r7, #19
 8003e46:	2201      	movs	r2, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 f8ca 	bl	8004fe2 <st7735_send_data>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	4413      	add	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8003e56:	2312      	movs	r3, #18
 8003e58:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3320      	adds	r3, #32
 8003e5e:	f107 0113 	add.w	r1, r7, #19
 8003e62:	2201      	movs	r2, #1
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 f8bc 	bl	8004fe2 <st7735_send_data>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	4413      	add	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8003e72:	2337      	movs	r3, #55	; 0x37
 8003e74:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3320      	adds	r3, #32
 8003e7a:	f107 0113 	add.w	r1, r7, #19
 8003e7e:	2201      	movs	r2, #1
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 f8ae 	bl	8004fe2 <st7735_send_data>
 8003e86:	4602      	mov	r2, r0
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8003e8e:	2332      	movs	r3, #50	; 0x32
 8003e90:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3320      	adds	r3, #32
 8003e96:	f107 0113 	add.w	r1, r7, #19
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 f8a0 	bl	8004fe2 <st7735_send_data>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003eaa:	2329      	movs	r3, #41	; 0x29
 8003eac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3320      	adds	r3, #32
 8003eb2:	f107 0113 	add.w	r1, r7, #19
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 f892 	bl	8004fe2 <st7735_send_data>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003ec6:	232d      	movs	r3, #45	; 0x2d
 8003ec8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3320      	adds	r3, #32
 8003ece:	f107 0113 	add.w	r1, r7, #19
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 f884 	bl	8004fe2 <st7735_send_data>
 8003eda:	4602      	mov	r2, r0
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4413      	add	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003ee2:	2329      	movs	r3, #41	; 0x29
 8003ee4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3320      	adds	r3, #32
 8003eea:	f107 0113 	add.w	r1, r7, #19
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 f876 	bl	8004fe2 <st7735_send_data>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4413      	add	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8003efe:	2325      	movs	r3, #37	; 0x25
 8003f00:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3320      	adds	r3, #32
 8003f06:	f107 0113 	add.w	r1, r7, #19
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 f868 	bl	8004fe2 <st7735_send_data>
 8003f12:	4602      	mov	r2, r0
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	4413      	add	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8003f1a:	232b      	movs	r3, #43	; 0x2b
 8003f1c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3320      	adds	r3, #32
 8003f22:	f107 0113 	add.w	r1, r7, #19
 8003f26:	2201      	movs	r2, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 f85a 	bl	8004fe2 <st7735_send_data>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	4413      	add	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8003f36:	2339      	movs	r3, #57	; 0x39
 8003f38:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3320      	adds	r3, #32
 8003f3e:	f107 0113 	add.w	r1, r7, #19
 8003f42:	2201      	movs	r2, #1
 8003f44:	4618      	mov	r0, r3
 8003f46:	f001 f84c 	bl	8004fe2 <st7735_send_data>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4413      	add	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3320      	adds	r3, #32
 8003f5a:	f107 0113 	add.w	r1, r7, #19
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4618      	mov	r0, r3
 8003f62:	f001 f83e 	bl	8004fe2 <st7735_send_data>
 8003f66:	4602      	mov	r2, r0
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3320      	adds	r3, #32
 8003f76:	f107 0113 	add.w	r1, r7, #19
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 f830 	bl	8004fe2 <st7735_send_data>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	4413      	add	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3320      	adds	r3, #32
 8003f92:	f107 0113 	add.w	r1, r7, #19
 8003f96:	2201      	movs	r2, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 f822 	bl	8004fe2 <st7735_send_data>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8003fa6:	2310      	movs	r3, #16
 8003fa8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3320      	adds	r3, #32
 8003fae:	f107 0113 	add.w	r1, r7, #19
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f814 	bl	8004fe2 <st7735_send_data>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f103 0020 	add.w	r0, r3, #32
 8003fcc:	f107 0213 	add.w	r2, r7, #19
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	21e1      	movs	r1, #225	; 0xe1
 8003fd4:	f000 fff0 	bl	8004fb8 <st7735_write_reg>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	4413      	add	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8003fe0:	231d      	movs	r3, #29
 8003fe2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3320      	adds	r3, #32
 8003fe8:	f107 0113 	add.w	r1, r7, #19
 8003fec:	2201      	movs	r2, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fff7 	bl	8004fe2 <st7735_send_data>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8003ffc:	2307      	movs	r3, #7
 8003ffe:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3320      	adds	r3, #32
 8004004:	f107 0113 	add.w	r1, r7, #19
 8004008:	2201      	movs	r2, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f000 ffe9 	bl	8004fe2 <st7735_send_data>
 8004010:	4602      	mov	r2, r0
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	4413      	add	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8004018:	2306      	movs	r3, #6
 800401a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3320      	adds	r3, #32
 8004020:	f107 0113 	add.w	r1, r7, #19
 8004024:	2201      	movs	r2, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f000 ffdb 	bl	8004fe2 <st7735_send_data>
 800402c:	4602      	mov	r2, r0
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	4413      	add	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8004034:	232e      	movs	r3, #46	; 0x2e
 8004036:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3320      	adds	r3, #32
 800403c:	f107 0113 	add.w	r1, r7, #19
 8004040:	2201      	movs	r2, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f000 ffcd 	bl	8004fe2 <st7735_send_data>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	4413      	add	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8004050:	232c      	movs	r3, #44	; 0x2c
 8004052:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3320      	adds	r3, #32
 8004058:	f107 0113 	add.w	r1, r7, #19
 800405c:	2201      	movs	r2, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f000 ffbf 	bl	8004fe2 <st7735_send_data>
 8004064:	4602      	mov	r2, r0
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	4413      	add	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 800406c:	2329      	movs	r3, #41	; 0x29
 800406e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3320      	adds	r3, #32
 8004074:	f107 0113 	add.w	r1, r7, #19
 8004078:	2201      	movs	r2, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f000 ffb1 	bl	8004fe2 <st7735_send_data>
 8004080:	4602      	mov	r2, r0
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	4413      	add	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8004088:	232d      	movs	r3, #45	; 0x2d
 800408a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3320      	adds	r3, #32
 8004090:	f107 0113 	add.w	r1, r7, #19
 8004094:	2201      	movs	r2, #1
 8004096:	4618      	mov	r0, r3
 8004098:	f000 ffa3 	bl	8004fe2 <st7735_send_data>
 800409c:	4602      	mov	r2, r0
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4413      	add	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80040a4:	232e      	movs	r3, #46	; 0x2e
 80040a6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3320      	adds	r3, #32
 80040ac:	f107 0113 	add.w	r1, r7, #19
 80040b0:	2201      	movs	r2, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 ff95 	bl	8004fe2 <st7735_send_data>
 80040b8:	4602      	mov	r2, r0
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	4413      	add	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 80040c0:	232e      	movs	r3, #46	; 0x2e
 80040c2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3320      	adds	r3, #32
 80040c8:	f107 0113 	add.w	r1, r7, #19
 80040cc:	2201      	movs	r2, #1
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 ff87 	bl	8004fe2 <st7735_send_data>
 80040d4:	4602      	mov	r2, r0
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	4413      	add	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 80040dc:	2337      	movs	r3, #55	; 0x37
 80040de:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3320      	adds	r3, #32
 80040e4:	f107 0113 	add.w	r1, r7, #19
 80040e8:	2201      	movs	r2, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 ff79 	bl	8004fe2 <st7735_send_data>
 80040f0:	4602      	mov	r2, r0
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	4413      	add	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 80040f8:	233f      	movs	r3, #63	; 0x3f
 80040fa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3320      	adds	r3, #32
 8004100:	f107 0113 	add.w	r1, r7, #19
 8004104:	2201      	movs	r2, #1
 8004106:	4618      	mov	r0, r3
 8004108:	f000 ff6b 	bl	8004fe2 <st7735_send_data>
 800410c:	4602      	mov	r2, r0
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4413      	add	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8004114:	2300      	movs	r3, #0
 8004116:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3320      	adds	r3, #32
 800411c:	f107 0113 	add.w	r1, r7, #19
 8004120:	2201      	movs	r2, #1
 8004122:	4618      	mov	r0, r3
 8004124:	f000 ff5d 	bl	8004fe2 <st7735_send_data>
 8004128:	4602      	mov	r2, r0
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4413      	add	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8004130:	2300      	movs	r3, #0
 8004132:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3320      	adds	r3, #32
 8004138:	f107 0113 	add.w	r1, r7, #19
 800413c:	2201      	movs	r2, #1
 800413e:	4618      	mov	r0, r3
 8004140:	f000 ff4f 	bl	8004fe2 <st7735_send_data>
 8004144:	4602      	mov	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4413      	add	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 800414c:	2302      	movs	r3, #2
 800414e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3320      	adds	r3, #32
 8004154:	f107 0113 	add.w	r1, r7, #19
 8004158:	2201      	movs	r2, #1
 800415a:	4618      	mov	r0, r3
 800415c:	f000 ff41 	bl	8004fe2 <st7735_send_data>
 8004160:	4602      	mov	r2, r0
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4413      	add	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8004168:	2310      	movs	r3, #16
 800416a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3320      	adds	r3, #32
 8004170:	f107 0113 	add.w	r1, r7, #19
 8004174:	2201      	movs	r2, #1
 8004176:	4618      	mov	r0, r3
 8004178:	f000 ff33 	bl	8004fe2 <st7735_send_data>
 800417c:	4602      	mov	r2, r0
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	4413      	add	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8004184:	2300      	movs	r3, #0
 8004186:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f103 0020 	add.w	r0, r3, #32
 800418e:	f107 0213 	add.w	r2, r7, #19
 8004192:	2301      	movs	r3, #1
 8004194:	2113      	movs	r1, #19
 8004196:	f000 ff0f 	bl	8004fb8 <st7735_write_reg>
 800419a:	4602      	mov	r2, r0
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	4413      	add	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f103 0020 	add.w	r0, r3, #32
 80041a8:	f107 0213 	add.w	r2, r7, #19
 80041ac:	2301      	movs	r3, #1
 80041ae:	2129      	movs	r1, #41	; 0x29
 80041b0:	f000 ff02 	bl	8004fb8 <st7735_write_reg>
 80041b4:	4602      	mov	r2, r0
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	4413      	add	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f944 	bl	800444c <ST7735_SetOrientation>
 80041c4:	4602      	mov	r2, r0
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	4413      	add	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 80041d2:	f04f 33ff 	mov.w	r3, #4294967295
 80041d6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80041d8:	697b      	ldr	r3, [r7, #20]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3320      	adds	r3, #32
 8004206:	f107 0208 	add.w	r2, r7, #8
 800420a:	21da      	movs	r1, #218	; 0xda
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fec0 	bl	8004f92 <st7735_read_reg>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e02d      	b.n	800427c <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f103 0020 	add.w	r0, r3, #32
 8004226:	f107 0308 	add.w	r3, r7, #8
 800422a:	3301      	adds	r3, #1
 800422c:	461a      	mov	r2, r3
 800422e:	21db      	movs	r1, #219	; 0xdb
 8004230:	f000 feaf 	bl	8004f92 <st7735_read_reg>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 800423a:	f04f 33ff 	mov.w	r3, #4294967295
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e01c      	b.n	800427c <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f103 0020 	add.w	r0, r3, #32
 8004248:	f107 0308 	add.w	r3, r7, #8
 800424c:	3302      	adds	r3, #2
 800424e:	461a      	mov	r2, r3
 8004250:	21dc      	movs	r1, #220	; 0xdc
 8004252:	f000 fe9e 	bl	8004f92 <st7735_read_reg>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e00b      	b.n	800427c <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8004264:	7abb      	ldrb	r3, [r7, #10]
 8004266:	461a      	mov	r2, r3
 8004268:	7a7b      	ldrb	r3, [r7, #9]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	431a      	orrs	r2, r3
 800426e:	7a3b      	ldrb	r3, [r7, #8]
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	431a      	orrs	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800427c:	68fb      	ldr	r3, [r7, #12]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f103 0020 	add.w	r0, r3, #32
 800429a:	f107 020b 	add.w	r2, r7, #11
 800429e:	2300      	movs	r3, #0
 80042a0:	2113      	movs	r1, #19
 80042a2:	f000 fe89 	bl	8004fb8 <st7735_write_reg>
 80042a6:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80042a8:	210a      	movs	r1, #10
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fe57 	bl	8004f5e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f103 0020 	add.w	r0, r3, #32
 80042b6:	f107 020b 	add.w	r2, r7, #11
 80042ba:	2300      	movs	r3, #0
 80042bc:	2129      	movs	r1, #41	; 0x29
 80042be:	f000 fe7b 	bl	8004fb8 <st7735_write_reg>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80042ca:	210a      	movs	r1, #10
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fe46 	bl	8004f5e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f103 0020 	add.w	r0, r3, #32
 80042d8:	f107 020b 	add.w	r2, r7, #11
 80042dc:	2300      	movs	r3, #0
 80042de:	2136      	movs	r1, #54	; 0x36
 80042e0:	f000 fe6a 	bl	8004fb8 <st7735_write_reg>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80042ec:	4b16      	ldr	r3, [pc, #88]	; (8004348 <ST7735_DisplayOn+0xc0>)
 80042ee:	7b1b      	ldrb	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80042f4:	4b14      	ldr	r3, [pc, #80]	; (8004348 <ST7735_DisplayOn+0xc0>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4a14      	ldr	r2, [pc, #80]	; (800434c <ST7735_DisplayOn+0xc4>)
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4413      	add	r3, r2
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004302:	f043 0308 	orr.w	r3, r3, #8
 8004306:	b2db      	uxtb	r3, r3
 8004308:	e006      	b.n	8004318 <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800430a:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <ST7735_DisplayOn+0xc0>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	4a0f      	ldr	r2, [pc, #60]	; (800434c <ST7735_DisplayOn+0xc4>)
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004316:	b2db      	uxtb	r3, r3
 8004318:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3320      	adds	r3, #32
 800431e:	f107 010b 	add.w	r1, r7, #11
 8004322:	2201      	movs	r2, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fe5c 	bl	8004fe2 <st7735_send_data>
 800432a:	4602      	mov	r2, r0
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
 800433c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800433e:	68fb      	ldr	r3, [r7, #12]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	240052ec 	.word	0x240052ec
 800434c:	240000bc 	.word	0x240000bc

08004350 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f103 0020 	add.w	r0, r3, #32
 8004362:	f107 020b 	add.w	r2, r7, #11
 8004366:	2300      	movs	r3, #0
 8004368:	2113      	movs	r1, #19
 800436a:	f000 fe25 	bl	8004fb8 <st7735_write_reg>
 800436e:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8004370:	210a      	movs	r1, #10
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fdf3 	bl	8004f5e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f103 0020 	add.w	r0, r3, #32
 800437e:	f107 020b 	add.w	r2, r7, #11
 8004382:	2300      	movs	r3, #0
 8004384:	2128      	movs	r1, #40	; 0x28
 8004386:	f000 fe17 	bl	8004fb8 <st7735_write_reg>
 800438a:	4602      	mov	r2, r0
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8004392:	210a      	movs	r1, #10
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fde2 	bl	8004f5e <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f103 0020 	add.w	r0, r3, #32
 80043a0:	f107 020b 	add.w	r2, r7, #11
 80043a4:	2300      	movs	r3, #0
 80043a6:	2136      	movs	r1, #54	; 0x36
 80043a8:	f000 fe06 	bl	8004fb8 <st7735_write_reg>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80043b4:	4b16      	ldr	r3, [pc, #88]	; (8004410 <ST7735_DisplayOff+0xc0>)
 80043b6:	7b1b      	ldrb	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80043bc:	4b14      	ldr	r3, [pc, #80]	; (8004410 <ST7735_DisplayOff+0xc0>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4a14      	ldr	r2, [pc, #80]	; (8004414 <ST7735_DisplayOff+0xc4>)
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4413      	add	r3, r2
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80043ca:	f043 0308 	orr.w	r3, r3, #8
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	e006      	b.n	80043e0 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <ST7735_DisplayOff+0xc0>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4a0f      	ldr	r2, [pc, #60]	; (8004414 <ST7735_DisplayOff+0xc4>)
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3320      	adds	r3, #32
 80043e6:	f107 010b 	add.w	r1, r7, #11
 80043ea:	2201      	movs	r2, #1
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fdf8 	bl	8004fe2 <st7735_send_data>
 80043f2:	4602      	mov	r2, r0
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8004400:	f04f 33ff 	mov.w	r3, #4294967295
 8004404:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004406:	68fb      	ldr	r3, [r7, #12]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	240052ec 	.word	0x240052ec
 8004414:	240000bc 	.word	0x240000bc

08004418 <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af02      	add	r7, sp, #8
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <ST7735_SetOrientation+0x1a>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d119      	bne.n	800449a <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	7b5b      	ldrb	r3, [r3, #13]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d106      	bne.n	800447c <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 800446e:	4b3c      	ldr	r3, [pc, #240]	; (8004560 <ST7735_SetOrientation+0x114>)
 8004470:	2250      	movs	r2, #80	; 0x50
 8004472:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8004474:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <ST7735_SetOrientation+0x114>)
 8004476:	22a0      	movs	r2, #160	; 0xa0
 8004478:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800447a:	e028      	b.n	80044ce <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	7b5b      	ldrb	r3, [r3, #13]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <ST7735_SetOrientation+0x40>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	7b5b      	ldrb	r3, [r3, #13]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d120      	bne.n	80044ce <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 800448c:	4b34      	ldr	r3, [pc, #208]	; (8004560 <ST7735_SetOrientation+0x114>)
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 8004492:	4b33      	ldr	r3, [pc, #204]	; (8004560 <ST7735_SetOrientation+0x114>)
 8004494:	22a0      	movs	r2, #160	; 0xa0
 8004496:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004498:	e019      	b.n	80044ce <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	7b5b      	ldrb	r3, [r3, #13]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d106      	bne.n	80044b0 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 80044a2:	4b2f      	ldr	r3, [pc, #188]	; (8004560 <ST7735_SetOrientation+0x114>)
 80044a4:	22a0      	movs	r2, #160	; 0xa0
 80044a6:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 80044a8:	4b2d      	ldr	r3, [pc, #180]	; (8004560 <ST7735_SetOrientation+0x114>)
 80044aa:	2250      	movs	r2, #80	; 0x50
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	e00f      	b.n	80044d0 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	7b5b      	ldrb	r3, [r3, #13]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <ST7735_SetOrientation+0x74>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	7b5b      	ldrb	r3, [r3, #13]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d107      	bne.n	80044d0 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 80044c0:	4b27      	ldr	r3, [pc, #156]	; (8004560 <ST7735_SetOrientation+0x114>)
 80044c2:	22a0      	movs	r2, #160	; 0xa0
 80044c4:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 80044c6:	4b26      	ldr	r3, [pc, #152]	; (8004560 <ST7735_SetOrientation+0x114>)
 80044c8:	2280      	movs	r2, #128	; 0x80
 80044ca:	605a      	str	r2, [r3, #4]
 80044cc:	e000      	b.n	80044d0 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80044ce:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	4a22      	ldr	r2, [pc, #136]	; (8004560 <ST7735_SetOrientation+0x114>)
 80044d6:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	7b1a      	ldrb	r2, [r3, #12]
 80044dc:	4b20      	ldr	r3, [pc, #128]	; (8004560 <ST7735_SetOrientation+0x114>)
 80044de:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	7b5a      	ldrb	r2, [r3, #13]
 80044e4:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <ST7735_SetOrientation+0x114>)
 80044e6:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80044e8:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <ST7735_SetOrientation+0x114>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <ST7735_SetOrientation+0x114>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	4613      	mov	r3, r2
 80044f4:	2200      	movs	r2, #0
 80044f6:	2100      	movs	r1, #0
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fbdf 	bl	8004cbc <ST7735_SetDisplayWindow>
 80044fe:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004500:	4b17      	ldr	r3, [pc, #92]	; (8004560 <ST7735_SetOrientation+0x114>)
 8004502:	7b1b      	ldrb	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8004508:	4b15      	ldr	r3, [pc, #84]	; (8004560 <ST7735_SetOrientation+0x114>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a15      	ldr	r2, [pc, #84]	; (8004564 <ST7735_SetOrientation+0x118>)
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4413      	add	r3, r2
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004516:	f043 0308 	orr.w	r3, r3, #8
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e006      	b.n	800452c <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <ST7735_SetOrientation+0x114>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4a10      	ldr	r2, [pc, #64]	; (8004564 <ST7735_SetOrientation+0x118>)
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800452a:	b2db      	uxtb	r3, r3
 800452c:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f103 0020 	add.w	r0, r3, #32
 8004534:	f107 020b 	add.w	r2, r7, #11
 8004538:	2301      	movs	r3, #1
 800453a:	2136      	movs	r1, #54	; 0x36
 800453c:	f000 fd3c 	bl	8004fb8 <st7735_write_reg>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4413      	add	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 800454e:	f04f 33ff 	mov.w	r3, #4294967295
 8004552:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004554:	68fb      	ldr	r3, [r7, #12]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	240052ec 	.word	0x240052ec
 8004564:	240000bc 	.word	0x240000bc

08004568 <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <ST7735_GetOrientation+0x20>)
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	240052ec 	.word	0x240052ec

0800458c <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8004598:	4b59      	ldr	r3, [pc, #356]	; (8004700 <ST7735_SetCursor+0x174>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d821      	bhi.n	80045e4 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80045a0:	4b57      	ldr	r3, [pc, #348]	; (8004700 <ST7735_SetCursor+0x174>)
 80045a2:	7b5b      	ldrb	r3, [r3, #13]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10e      	bne.n	80045c6 <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80045a8:	4b55      	ldr	r3, [pc, #340]	; (8004700 <ST7735_SetCursor+0x174>)
 80045aa:	7b1b      	ldrb	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <ST7735_SetCursor+0x32>
				Xpos += 26;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	331a      	adds	r3, #26
 80045b4:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3301      	adds	r3, #1
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	e033      	b.n	8004626 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3318      	adds	r3, #24
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	e02f      	b.n	8004626 <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 80045c6:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <ST7735_SetCursor+0x174>)
 80045c8:	7b5b      	ldrb	r3, [r3, #13]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d12b      	bne.n	8004626 <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 80045ce:	4b4c      	ldr	r3, [pc, #304]	; (8004700 <ST7735_SetCursor+0x174>)
 80045d0:	7b1b      	ldrb	r3, [r3, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d127      	bne.n	8004626 <ST7735_SetCursor+0x9a>
				Xpos += 2;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	3302      	adds	r3, #2
 80045da:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3301      	adds	r3, #1
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	e020      	b.n	8004626 <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80045e4:	4b46      	ldr	r3, [pc, #280]	; (8004700 <ST7735_SetCursor+0x174>)
 80045e6:	7b5b      	ldrb	r3, [r3, #13]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10e      	bne.n	800460a <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80045ec:	4b44      	ldr	r3, [pc, #272]	; (8004700 <ST7735_SetCursor+0x174>)
 80045ee:	7b1b      	ldrb	r3, [r3, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <ST7735_SetCursor+0x76>
				Xpos += 1;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	331a      	adds	r3, #26
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	e011      	b.n	8004626 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3318      	adds	r3, #24
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	e00d      	b.n	8004626 <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800460a:	4b3d      	ldr	r3, [pc, #244]	; (8004700 <ST7735_SetCursor+0x174>)
 800460c:	7b5b      	ldrb	r3, [r3, #13]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d109      	bne.n	8004626 <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004612:	4b3b      	ldr	r3, [pc, #236]	; (8004700 <ST7735_SetCursor+0x174>)
 8004614:	7b1b      	ldrb	r3, [r3, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d105      	bne.n	8004626 <ST7735_SetCursor+0x9a>
				Xpos += 1;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3301      	adds	r3, #1
 800461e:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3302      	adds	r3, #2
 8004624:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f103 0020 	add.w	r0, r3, #32
 800462c:	f107 0213 	add.w	r2, r7, #19
 8004630:	2300      	movs	r3, #0
 8004632:	212a      	movs	r1, #42	; 0x2a
 8004634:	f000 fcc0 	bl	8004fb8 <st7735_write_reg>
 8004638:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	0a1b      	lsrs	r3, r3, #8
 800463e:	b2db      	uxtb	r3, r3
 8004640:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3320      	adds	r3, #32
 8004646:	f107 0113 	add.w	r1, r7, #19
 800464a:	2201      	movs	r2, #1
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fcc8 	bl	8004fe2 <st7735_send_data>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3320      	adds	r3, #32
 8004664:	f107 0113 	add.w	r1, r7, #19
 8004668:	2201      	movs	r2, #1
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fcb9 	bl	8004fe2 <st7735_send_data>
 8004670:	4602      	mov	r2, r0
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	4413      	add	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f103 0020 	add.w	r0, r3, #32
 800467e:	f107 0213 	add.w	r2, r7, #19
 8004682:	2300      	movs	r3, #0
 8004684:	212b      	movs	r1, #43	; 0x2b
 8004686:	f000 fc97 	bl	8004fb8 <st7735_write_reg>
 800468a:	4602      	mov	r2, r0
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	4413      	add	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	0a1b      	lsrs	r3, r3, #8
 8004696:	b2db      	uxtb	r3, r3
 8004698:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3320      	adds	r3, #32
 800469e:	f107 0113 	add.w	r1, r7, #19
 80046a2:	2201      	movs	r2, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fc9c 	bl	8004fe2 <st7735_send_data>
 80046aa:	4602      	mov	r2, r0
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	4413      	add	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3320      	adds	r3, #32
 80046bc:	f107 0113 	add.w	r1, r7, #19
 80046c0:	2201      	movs	r2, #1
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fc8d 	bl	8004fe2 <st7735_send_data>
 80046c8:	4602      	mov	r2, r0
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	4413      	add	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f103 0020 	add.w	r0, r3, #32
 80046d6:	f107 0213 	add.w	r2, r7, #19
 80046da:	2300      	movs	r3, #0
 80046dc:	212c      	movs	r1, #44	; 0x2c
 80046de:	f000 fc6b 	bl	8004fb8 <st7735_write_reg>
 80046e2:	4602      	mov	r2, r0
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	4413      	add	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 80046f0:	f04f 33ff 	mov.w	r3, #4294967295
 80046f4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80046f6:	697b      	ldr	r3, [r7, #20]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	240052ec 	.word	0x240052ec

08004704 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b090      	sub	sp, #64	; 0x40
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	330a      	adds	r3, #10
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	330b      	adds	r3, #11
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	441a      	add	r2, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	441a      	add	r2, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	330d      	adds	r3, #13
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	061b      	lsls	r3, r3, #24
 800473e:	4413      	add	r3, r2
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	3312      	adds	r3, #18
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	3313      	adds	r3, #19
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	441a      	add	r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	3314      	adds	r3, #20
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	041b      	lsls	r3, r3, #16
 800475c:	441a      	add	r2, r3
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	3315      	adds	r3, #21
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	4413      	add	r3, r2
 8004768:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	3316      	adds	r3, #22
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	3317      	adds	r3, #23
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	441a      	add	r2, r3
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	3318      	adds	r3, #24
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	441a      	add	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	3319      	adds	r3, #25
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	4413      	add	r3, r2
 8004790:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	3302      	adds	r3, #2
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	3303      	adds	r3, #3
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	441a      	add	r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	3304      	adds	r3, #4
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	041b      	lsls	r3, r3, #16
 80047ac:	441a      	add	r2, r3
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	3305      	adds	r3, #5
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	4413      	add	r3, r2
 80047b8:	61fb      	str	r3, [r7, #28]
  size = size - index;
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	4413      	add	r3, r2
 80047c8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 80047ca:	4b51      	ldr	r3, [pc, #324]	; (8004910 <ST7735_DrawBitmap+0x20c>)
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	1ad2      	subs	r2, r2, r3
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fa6a 	bl	8004cbc <ST7735_SetDisplayWindow>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 80047ee:	f04f 33ff 	mov.w	r3, #4294967295
 80047f2:	637b      	str	r3, [r7, #52]	; 0x34
 80047f4:	e087      	b.n	8004906 <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80047f6:	4b46      	ldr	r3, [pc, #280]	; (8004910 <ST7735_DrawBitmap+0x20c>)
 80047f8:	7b1b      	ldrb	r3, [r3, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 80047fe:	4b44      	ldr	r3, [pc, #272]	; (8004910 <ST7735_DrawBitmap+0x20c>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	4a44      	ldr	r2, [pc, #272]	; (8004914 <ST7735_DrawBitmap+0x210>)
 8004804:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004808:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800480a:	f043 0308 	orr.w	r3, r3, #8
 800480e:	b2db      	uxtb	r3, r3
 8004810:	e005      	b.n	800481e <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 8004812:	4b3f      	ldr	r3, [pc, #252]	; (8004910 <ST7735_DrawBitmap+0x20c>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	4a3f      	ldr	r2, [pc, #252]	; (8004914 <ST7735_DrawBitmap+0x210>)
 8004818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800481c:	b2db      	uxtb	r3, r3
 800481e:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f103 0020 	add.w	r0, r3, #32
 8004826:	f107 0213 	add.w	r2, r7, #19
 800482a:	2301      	movs	r3, #1
 800482c:	2136      	movs	r1, #54	; 0x36
 800482e:	f000 fbc3 	bl	8004fb8 <st7735_write_reg>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
 800483e:	e062      	b.n	8004906 <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7ff fea1 	bl	800458c <ST7735_SetCursor>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 8004850:	f04f 33ff 	mov.w	r3, #4294967295
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
 8004856:	e056      	b.n	8004906 <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3320      	adds	r3, #32
 8004868:	f107 0114 	add.w	r1, r7, #20
 800486c:	2202      	movs	r2, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fbb7 	bl	8004fe2 <st7735_send_data>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 800487a:	f04f 33ff 	mov.w	r3, #4294967295
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004880:	e009      	b.n	8004896 <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	3302      	adds	r3, #2
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	3302      	adds	r3, #2
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 800488e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	429a      	cmp	r2, r3
 8004894:	d3e0      	bcc.n	8004858 <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004896:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <ST7735_DrawBitmap+0x20c>)
 8004898:	7b1b      	ldrb	r3, [r3, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <ST7735_DrawBitmap+0x20c>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <ST7735_DrawBitmap+0x210>)
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80048ac:	f043 0308 	orr.w	r3, r3, #8
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e006      	b.n	80048c2 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 80048b4:	4b16      	ldr	r3, [pc, #88]	; (8004910 <ST7735_DrawBitmap+0x20c>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a16      	ldr	r2, [pc, #88]	; (8004914 <ST7735_DrawBitmap+0x210>)
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f103 0020 	add.w	r0, r3, #32
 80048ca:	f107 0213 	add.w	r2, r7, #19
 80048ce:	2301      	movs	r3, #1
 80048d0:	2136      	movs	r1, #54	; 0x36
 80048d2:	f000 fb71 	bl	8004fb8 <st7735_write_reg>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 80048dc:	f04f 33ff 	mov.w	r3, #4294967295
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34
 80048e2:	e010      	b.n	8004906 <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <ST7735_DrawBitmap+0x20c>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <ST7735_DrawBitmap+0x20c>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	4613      	mov	r3, r2
 80048f0:	2200      	movs	r2, #0
 80048f2:	2100      	movs	r1, #0
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f9e1 	bl	8004cbc <ST7735_SetDisplayWindow>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8004900:	f04f 33ff 	mov.w	r3, #4294967295
 8004904:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 8004906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004908:	4618      	mov	r0, r3
 800490a:	3738      	adds	r7, #56	; 0x38
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	240052ec 	.word	0x240052ec
 8004914:	240000bc 	.word	0x240000bc

08004918 <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	441a      	add	r2, r3
 8004934:	4b2b      	ldr	r3, [pc, #172]	; (80049e4 <ST7735_FillRGBRect+0xcc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d806      	bhi.n	800494a <ST7735_FillRGBRect+0x32>
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	441a      	add	r2, r3
 8004942:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <ST7735_FillRGBRect+0xcc>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d903      	bls.n	8004952 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	e042      	b.n	80049d8 <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	e03b      	b.n	80049d0 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	461a      	mov	r2, r3
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7ff fe12 	bl	800458c <ST7735_SetCursor>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 800496e:	f04f 33ff 	mov.w	r3, #4294967295
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	e029      	b.n	80049ca <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e013      	b.n	80049a4 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	7811      	ldrb	r1, [r2, #0]
 8004984:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <ST7735_FillRGBRect+0xd0>)
 8004986:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	3301      	adds	r3, #1
 8004992:	7811      	ldrb	r1, [r2, #0]
 8004994:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <ST7735_FillRGBRect+0xd0>)
 8004996:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	3302      	adds	r3, #2
 800499c:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	3301      	adds	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d3e7      	bcc.n	800497c <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f103 0020 	add.w	r0, r3, #32
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	461a      	mov	r2, r3
 80049b8:	490b      	ldr	r1, [pc, #44]	; (80049e8 <ST7735_FillRGBRect+0xd0>)
 80049ba:	f000 fb12 	bl	8004fe2 <st7735_send_data>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	3301      	adds	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d3bf      	bcc.n	8004958 <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 80049d8:	69fb      	ldr	r3, [r7, #28]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	240052ec 	.word	0x240052ec
 80049e8:	240007d8 	.word	0x240007d8

080049ec <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	441a      	add	r2, r3
 8004a04:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <ST7735_DrawHLine+0x98>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d903      	bls.n	8004a14 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e032      	b.n	8004a7a <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff fdb7 	bl	800458c <ST7735_SetCursor>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8004a24:	f04f 33ff 	mov.w	r3, #4294967295
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e026      	b.n	8004a7a <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	e010      	b.n	8004a54 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	0a1a      	lsrs	r2, r3, #8
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	b2d1      	uxtb	r1, r2
 8004a3c:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <ST7735_DrawHLine+0x9c>)
 8004a3e:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	3301      	adds	r3, #1
 8004a46:	6a3a      	ldr	r2, [r7, #32]
 8004a48:	b2d1      	uxtb	r1, r2
 8004a4a:	4a0f      	ldr	r2, [pc, #60]	; (8004a88 <ST7735_DrawHLine+0x9c>)
 8004a4c:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3301      	adds	r3, #1
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d3ea      	bcc.n	8004a32 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f103 0020 	add.w	r0, r3, #32
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	461a      	mov	r2, r3
 8004a68:	4907      	ldr	r1, [pc, #28]	; (8004a88 <ST7735_DrawHLine+0x9c>)
 8004a6a:	f000 faba 	bl	8004fe2 <st7735_send_data>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8004a74:	f04f 33ff 	mov.w	r3, #4294967295
 8004a78:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004a7a:	697b      	ldr	r3, [r7, #20]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	240052ec 	.word	0x240052ec
 8004a88:	24000a58 	.word	0x24000a58

08004a8c <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	441a      	add	r2, r3
 8004aa4:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <ST7735_DrawVLine+0x64>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d903      	bls.n	8004ab4 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8004aac:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e018      	b.n	8004ae6 <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	e011      	b.n	8004ade <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	441a      	add	r2, r3
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f841 	bl	8004b4c <ST7735_SetPixel>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad4:	617b      	str	r3, [r7, #20]
        break;
 8004ad6:	e006      	b.n	8004ae6 <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	3301      	adds	r3, #1
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d3e9      	bcc.n	8004aba <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8004ae6:	697b      	ldr	r3, [r7, #20]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	240052ec 	.word	0x240052ec

08004af4 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	e014      	b.n	8004b3a <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8004b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff ff66 	bl	80049ec <ST7735_DrawHLine>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2a:	61fb      	str	r3, [r7, #28]
      break;
 8004b2c:	e009      	b.n	8004b42 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	3301      	adds	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	3301      	adds	r3, #1
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d3e6      	bcc.n	8004b10 <ST7735_FillRect+0x1c>
  }

  return ret;
 8004b42:	69fb      	ldr	r3, [r7, #28]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	8a7b      	ldrh	r3, [r7, #18]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8004b76:	4b16      	ldr	r3, [pc, #88]	; (8004bd0 <ST7735_SetPixel+0x84>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d204      	bcs.n	8004b8a <ST7735_SetPixel+0x3e>
 8004b80:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <ST7735_SetPixel+0x84>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d303      	bcc.n	8004b92 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8004b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e019      	b.n	8004bc6 <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fcf8 	bl	800458c <ST7735_SetCursor>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8004ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e00d      	b.n	8004bc6 <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3320      	adds	r3, #32
 8004bae:	f107 0112 	add.w	r1, r7, #18
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fa14 	bl	8004fe2 <st7735_send_data>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8004bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8004bc6:	697b      	ldr	r3, [r7, #20]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	240052ec 	.word	0x240052ec

08004bd4 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fcd0 	bl	800458c <ST7735_SetCursor>
 8004bec:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3320      	adds	r3, #32
 8004bf2:	f107 0211 	add.w	r2, r7, #17
 8004bf6:	212e      	movs	r1, #46	; 0x2e
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 f9ca 	bl	8004f92 <st7735_read_reg>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4413      	add	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3320      	adds	r3, #32
 8004c0a:	f107 0111 	add.w	r1, r7, #17
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f9f8 	bl	8005006 <st7735_recv_data>
 8004c16:	4602      	mov	r2, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3320      	adds	r3, #32
 8004c22:	f107 0113 	add.w	r1, r7, #19
 8004c26:	2201      	movs	r2, #1
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 f9ec 	bl	8005006 <st7735_recv_data>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	4413      	add	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3320      	adds	r3, #32
 8004c3a:	f107 0112 	add.w	r1, r7, #18
 8004c3e:	2201      	movs	r2, #1
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 f9e0 	bl	8005006 <st7735_recv_data>
 8004c46:	4602      	mov	r2, r0
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	461a      	mov	r2, r3
 8004c52:	7cbb      	ldrb	r3, [r7, #18]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	441a      	add	r2, r3
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004c68:	697b      	ldr	r3, [r7, #20]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <ST7735_GetXSize+0x20>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	240052ec 	.word	0x240052ec

08004c98 <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <ST7735_GetYSize+0x20>)
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	240052ec 	.word	0x240052ec

08004cbc <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8004cca:	4b7d      	ldr	r3, [pc, #500]	; (8004ec0 <ST7735_SetDisplayWindow+0x204>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d821      	bhi.n	8004d16 <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8004cd2:	4b7b      	ldr	r3, [pc, #492]	; (8004ec0 <ST7735_SetDisplayWindow+0x204>)
 8004cd4:	7b5b      	ldrb	r3, [r3, #13]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10e      	bne.n	8004cf8 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8004cda:	4b79      	ldr	r3, [pc, #484]	; (8004ec0 <ST7735_SetDisplayWindow+0x204>)
 8004cdc:	7b1b      	ldrb	r3, [r3, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	331a      	adds	r3, #26
 8004ce6:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3301      	adds	r3, #1
 8004cec:	607b      	str	r3, [r7, #4]
 8004cee:	e036      	b.n	8004d5e <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	3318      	adds	r3, #24
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	e032      	b.n	8004d5e <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8004cf8:	4b71      	ldr	r3, [pc, #452]	; (8004ec0 <ST7735_SetDisplayWindow+0x204>)
 8004cfa:	7b5b      	ldrb	r3, [r3, #13]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d12e      	bne.n	8004d5e <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004d00:	4b6f      	ldr	r3, [pc, #444]	; (8004ec0 <ST7735_SetDisplayWindow+0x204>)
 8004d02:	7b1b      	ldrb	r3, [r3, #12]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d12a      	bne.n	8004d5e <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	3302      	adds	r3, #2
 8004d0c:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3301      	adds	r3, #1
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e023      	b.n	8004d5e <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8004d16:	4b6a      	ldr	r3, [pc, #424]	; (8004ec0 <ST7735_SetDisplayWindow+0x204>)
 8004d18:	7b5b      	ldrb	r3, [r3, #13]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d111      	bne.n	8004d42 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8004d1e:	4b68      	ldr	r3, [pc, #416]	; (8004ec0 <ST7735_SetDisplayWindow+0x204>)
 8004d20:	7b1b      	ldrb	r3, [r3, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	331a      	adds	r3, #26
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	e014      	b.n	8004d5e <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	3301      	adds	r3, #1
 8004d38:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3318      	adds	r3, #24
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	e00d      	b.n	8004d5e <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8004d42:	4b5f      	ldr	r3, [pc, #380]	; (8004ec0 <ST7735_SetDisplayWindow+0x204>)
 8004d44:	7b5b      	ldrb	r3, [r3, #13]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d109      	bne.n	8004d5e <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004d4a:	4b5d      	ldr	r3, [pc, #372]	; (8004ec0 <ST7735_SetDisplayWindow+0x204>)
 8004d4c:	7b1b      	ldrb	r3, [r3, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f103 0020 	add.w	r0, r3, #32
 8004d64:	f107 0213 	add.w	r2, r7, #19
 8004d68:	2300      	movs	r3, #0
 8004d6a:	212a      	movs	r1, #42	; 0x2a
 8004d6c:	f000 f924 	bl	8004fb8 <st7735_write_reg>
 8004d70:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3320      	adds	r3, #32
 8004d7e:	f107 0113 	add.w	r1, r7, #19
 8004d82:	2201      	movs	r2, #1
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f92c 	bl	8004fe2 <st7735_send_data>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3320      	adds	r3, #32
 8004d9c:	f107 0113 	add.w	r1, r7, #19
 8004da0:	2201      	movs	r2, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f91d 	bl	8004fe2 <st7735_send_data>
 8004da8:	4602      	mov	r2, r0
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	4413      	add	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	4413      	add	r3, r2
 8004db6:	3b01      	subs	r3, #1
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3320      	adds	r3, #32
 8004dc2:	f107 0113 	add.w	r1, r7, #19
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 f90a 	bl	8004fe2 <st7735_send_data>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	4413      	add	r3, r2
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3320      	adds	r3, #32
 8004dec:	f107 0113 	add.w	r1, r7, #19
 8004df0:	2201      	movs	r2, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f8f5 	bl	8004fe2 <st7735_send_data>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f103 0020 	add.w	r0, r3, #32
 8004e06:	f107 0213 	add.w	r2, r7, #19
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	212b      	movs	r1, #43	; 0x2b
 8004e0e:	f000 f8d3 	bl	8004fb8 <st7735_write_reg>
 8004e12:	4602      	mov	r2, r0
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0a1b      	lsrs	r3, r3, #8
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3320      	adds	r3, #32
 8004e26:	f107 0113 	add.w	r1, r7, #19
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 f8d8 	bl	8004fe2 <st7735_send_data>
 8004e32:	4602      	mov	r2, r0
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3320      	adds	r3, #32
 8004e44:	f107 0113 	add.w	r1, r7, #19
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f8c9 	bl	8004fe2 <st7735_send_data>
 8004e50:	4602      	mov	r2, r0
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	4413      	add	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	0a1b      	lsrs	r3, r3, #8
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3320      	adds	r3, #32
 8004e6a:	f107 0113 	add.w	r1, r7, #19
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f8b6 	bl	8004fe2 <st7735_send_data>
 8004e76:	4602      	mov	r2, r0
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3320      	adds	r3, #32
 8004e94:	f107 0113 	add.w	r1, r7, #19
 8004e98:	2201      	movs	r2, #1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f8a1 	bl	8004fe2 <st7735_send_data>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8004eae:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004eb4:	697b      	ldr	r3, [r7, #20]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	240052ec 	.word	0x240052ec

08004ec4 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	7afa      	ldrb	r2, [r7, #11]
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4798      	blx	r3
 8004ee2:	4603      	mov	r3, r0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	7af8      	ldrb	r0, [r7, #11]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4798      	blx	r3
 8004f0c:	4603      	mov	r3, r0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b086      	sub	sp, #24
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	68b8      	ldr	r0, [r7, #8]
 8004f2e:	4798      	blx	r3
 8004f30:	4603      	mov	r3, r0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	68b8      	ldr	r0, [r7, #8]
 8004f52:	4798      	blx	r3
 8004f54:	4603      	mov	r3, r0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	4798      	blx	r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004f72:	bf00      	nop
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	4798      	blx	r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d8f5      	bhi.n	8004f74 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	607a      	str	r2, [r7, #4]
 8004f9e:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	6910      	ldr	r0, [r2, #16]
 8004fa8:	7af9      	ldrb	r1, [r7, #11]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4798      	blx	r3
 8004fae:	4603      	mov	r3, r0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681c      	ldr	r4, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6918      	ldr	r0, [r3, #16]
 8004fd0:	7af9      	ldrb	r1, [r7, #11]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	47a0      	blx	r4
 8004fd8:	4603      	mov	r3, r0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd90      	pop	{r4, r7, pc}

08004fe2 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	6910      	ldr	r0, [r2, #16]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	4798      	blx	r3
 8004ffc:	4603      	mov	r3, r0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	6910      	ldr	r0, [r2, #16]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	4798      	blx	r3
 8005020:	4603      	mov	r3, r0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <w25qxx_Init>:
w25qxx_StatusTypeDef w25qxx_Mode = w25qxx_SPIMode;
uint8_t w25qxx_StatusReg[3];
uint16_t w25qxx_ID;

void w25qxx_Init(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8005030:	2005      	movs	r0, #5
 8005032:	f000 fb11 	bl	8005658 <HAL_Delay>
	MX_QUADSPI_Init();
 8005036:	f7fd f813 	bl	8002060 <MX_QUADSPI_Init>
	QSPI_ResetDevice(&hqspi);
 800503a:	4808      	ldr	r0, [pc, #32]	; (800505c <w25qxx_Init+0x30>)
 800503c:	f000 f9c6 	bl	80053cc <QSPI_ResetDevice>
	HAL_Delay(0); // 1ms wait device stable
 8005040:	2000      	movs	r0, #0
 8005042:	f000 fb09 	bl	8005658 <HAL_Delay>
	w25qxx_ID = w25qxx_GetID();
 8005046:	f000 f80d 	bl	8005064 <w25qxx_GetID>
 800504a:	4603      	mov	r3, r0
 800504c:	461a      	mov	r2, r3
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <w25qxx_Init+0x34>)
 8005050:	801a      	strh	r2, [r3, #0]
	w25qxx_ReadAllStatusReg();
 8005052:	f000 f897 	bl	8005184 <w25qxx_ReadAllStatusReg>
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	24004ee8 	.word	0x24004ee8
 8005060:	240052fc 	.word	0x240052fc

08005064 <w25qxx_GetID>:

uint16_t w25qxx_GetID(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af06      	add	r7, sp, #24
	uint8_t ID[6];
	uint16_t deviceID;
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <w25qxx_GetID+0x94>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b05      	cmp	r3, #5
 8005070:	d114      	bne.n	800509c <w25qxx_GetID+0x38>
		QSPI_Send_CMD(&hqspi,W25X_QUAD_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,6,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8005072:	2306      	movs	r3, #6
 8005074:	9304      	str	r3, [sp, #16]
 8005076:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800507a:	9303      	str	r3, [sp, #12]
 800507c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005080:	9302      	str	r3, [sp, #8]
 8005082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	2306      	movs	r3, #6
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005090:	2200      	movs	r2, #0
 8005092:	2194      	movs	r1, #148	; 0x94
 8005094:	4819      	ldr	r0, [pc, #100]	; (80050fc <w25qxx_GetID+0x98>)
 8005096:	f000 f9f2 	bl	800547e <QSPI_Send_CMD>
 800509a:	e013      	b.n	80050c4 <w25qxx_GetID+0x60>
	else
		QSPI_Send_CMD(&hqspi,W25X_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 800509c:	2306      	movs	r3, #6
 800509e:	9304      	str	r3, [sp, #16]
 80050a0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80050a4:	9303      	str	r3, [sp, #12]
 80050a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050aa:	9302      	str	r3, [sp, #8]
 80050ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	2300      	movs	r3, #0
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050ba:	2200      	movs	r2, #0
 80050bc:	2190      	movs	r1, #144	; 0x90
 80050be:	480f      	ldr	r0, [pc, #60]	; (80050fc <w25qxx_GetID+0x98>)
 80050c0:	f000 f9dd 	bl	800547e <QSPI_Send_CMD>

	/* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, ID, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050c4:	463b      	mov	r3, r7
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4619      	mov	r1, r3
 80050cc:	480b      	ldr	r0, [pc, #44]	; (80050fc <w25qxx_GetID+0x98>)
 80050ce:	f004 f8ef 	bl	80092b0 <HAL_QSPI_Receive>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <w25qxx_GetID+0x78>
  {
    return w25qxx_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e008      	b.n	80050ee <w25qxx_GetID+0x8a>
  }
	deviceID = (ID[0] << 8) | ID[1];
 80050dc:	783b      	ldrb	r3, [r7, #0]
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	b21a      	sxth	r2, r3
 80050e2:	787b      	ldrb	r3, [r7, #1]
 80050e4:	b21b      	sxth	r3, r3
 80050e6:	4313      	orrs	r3, r2
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	80fb      	strh	r3, [r7, #6]

	return deviceID;
 80050ec:	88fb      	ldrh	r3, [r7, #6]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	240000dc 	.word	0x240000dc
 80050fc:	24004ee8 	.word	0x24004ee8

08005100 <w25qxx_ReadSR>:

uint8_t w25qxx_ReadSR(uint8_t SR)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	; 0x28
 8005104:	af06      	add	r7, sp, #24
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
	if(w25qxx_Mode == w25qxx_SPIMode)
 800510e:	4b1b      	ldr	r3, [pc, #108]	; (800517c <w25qxx_ReadSR+0x7c>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b05      	cmp	r3, #5
 8005114:	d112      	bne.n	800513c <w25qxx_ReadSR+0x3c>
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE, QSPI_DATA_1_LINE, 1);
 8005116:	79f9      	ldrb	r1, [r7, #7]
 8005118:	2301      	movs	r3, #1
 800511a:	9304      	str	r3, [sp, #16]
 800511c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005120:	9303      	str	r3, [sp, #12]
 8005122:	2300      	movs	r3, #0
 8005124:	9302      	str	r3, [sp, #8]
 8005126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	2300      	movs	r3, #0
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	2300      	movs	r3, #0
 8005132:	2200      	movs	r2, #0
 8005134:	4812      	ldr	r0, [pc, #72]	; (8005180 <w25qxx_ReadSR+0x80>)
 8005136:	f000 f9a2 	bl	800547e <QSPI_Send_CMD>
 800513a:	e011      	b.n	8005160 <w25qxx_ReadSR+0x60>
	else
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 800513c:	79f9      	ldrb	r1, [r7, #7]
 800513e:	2301      	movs	r3, #1
 8005140:	9304      	str	r3, [sp, #16]
 8005142:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	2300      	movs	r3, #0
 800514a:	9302      	str	r3, [sp, #8]
 800514c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	2300      	movs	r3, #0
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	2200      	movs	r2, #0
 800515a:	4809      	ldr	r0, [pc, #36]	; (8005180 <w25qxx_ReadSR+0x80>)
 800515c:	f000 f98f 	bl	800547e <QSPI_Send_CMD>
	
	if (HAL_QSPI_Receive(&hqspi,&byte,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005160:	f107 030f 	add.w	r3, r7, #15
 8005164:	f241 3288 	movw	r2, #5000	; 0x1388
 8005168:	4619      	mov	r1, r3
 800516a:	4805      	ldr	r0, [pc, #20]	; (8005180 <w25qxx_ReadSR+0x80>)
 800516c:	f004 f8a0 	bl	80092b0 <HAL_QSPI_Receive>
	{
		
	}
  return byte;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	240000dc 	.word	0x240000dc
 8005180:	24004ee8 	.word	0x24004ee8

08005184 <w25qxx_ReadAllStatusReg>:

  return HAL_QSPI_Transmit(&hqspi,&data,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
}

uint8_t w25qxx_ReadAllStatusReg(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
	
	w25qxx_StatusReg[0] = w25qxx_ReadSR(W25X_ReadStatusReg1);
 8005188:	2005      	movs	r0, #5
 800518a:	f7ff ffb9 	bl	8005100 <w25qxx_ReadSR>
 800518e:	4603      	mov	r3, r0
 8005190:	461a      	mov	r2, r3
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <w25qxx_ReadAllStatusReg+0x34>)
 8005194:	701a      	strb	r2, [r3, #0]
	w25qxx_StatusReg[1] = w25qxx_ReadSR(W25X_ReadStatusReg2);
 8005196:	2035      	movs	r0, #53	; 0x35
 8005198:	f7ff ffb2 	bl	8005100 <w25qxx_ReadSR>
 800519c:	4603      	mov	r3, r0
 800519e:	461a      	mov	r2, r3
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <w25qxx_ReadAllStatusReg+0x34>)
 80051a2:	705a      	strb	r2, [r3, #1]
	w25qxx_StatusReg[2] = w25qxx_ReadSR(W25X_ReadStatusReg3);
 80051a4:	2015      	movs	r0, #21
 80051a6:	f7ff ffab 	bl	8005100 <w25qxx_ReadSR>
 80051aa:	4603      	mov	r3, r0
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b02      	ldr	r3, [pc, #8]	; (80051b8 <w25qxx_ReadAllStatusReg+0x34>)
 80051b0:	709a      	strb	r2, [r3, #2]
	return w25qxx_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	24005300 	.word	0x24005300

080051bc <W25QXX_Wait_Busy>:

//�ȴ�����
void W25QXX_Wait_Busy(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
	while((w25qxx_ReadSR(W25X_ReadStatusReg1) & 0x01) == 0x01);
 80051c0:	bf00      	nop
 80051c2:	2005      	movs	r0, #5
 80051c4:	f7ff ff9c 	bl	8005100 <w25qxx_ReadSR>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d0f7      	beq.n	80051c2 <W25QXX_Wait_Busy+0x6>
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <W25qxx_WriteEnable>:
  }
  return w25qxx_OK;
}

uint8_t W25qxx_WriteEnable(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
	return QSPI_WriteEnable(&hqspi);
 80051dc:	4803      	ldr	r0, [pc, #12]	; (80051ec <W25qxx_WriteEnable+0x14>)
 80051de:	f000 f983 	bl	80054e8 <QSPI_WriteEnable>
 80051e2:	4603      	mov	r3, r0
 80051e4:	b2db      	uxtb	r3, r3
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	24004ee8 	.word	0x24004ee8

080051f0 <W25qxx_EraseSector>:
  * @brief  Erase 4KB Sector of the OSPI memory.
	* @param  SectorAddress: Sector address to erase
  * @retval QSPI memory status
  */
uint8_t W25qxx_EraseSector(uint32_t SectorAddress)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af06      	add	r7, sp, #24
 80051f6:	6078      	str	r0, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 80051f8:	f7ff ffee 	bl	80051d8 <W25qxx_WriteEnable>
	W25QXX_Wait_Busy();
 80051fc:	f7ff ffde 	bl	80051bc <W25QXX_Wait_Busy>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8005200:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <W25qxx_EraseSector+0x84>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b05      	cmp	r3, #5
 8005206:	d115      	bne.n	8005234 <W25qxx_EraseSector+0x44>
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_NONE,0);
 8005208:	2300      	movs	r3, #0
 800520a:	9304      	str	r3, [sp, #16]
 800520c:	2300      	movs	r3, #0
 800520e:	9303      	str	r3, [sp, #12]
 8005210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005214:	9302      	str	r3, [sp, #8]
 8005216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	2300      	movs	r3, #0
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	2120      	movs	r1, #32
 8005228:	4813      	ldr	r0, [pc, #76]	; (8005278 <W25qxx_EraseSector+0x88>)
 800522a:	f000 f928 	bl	800547e <QSPI_Send_CMD>
 800522e:	4603      	mov	r3, r0
 8005230:	73fb      	strb	r3, [r7, #15]
 8005232:	e014      	b.n	800525e <W25qxx_EraseSector+0x6e>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_NONE,0);
 8005234:	2300      	movs	r3, #0
 8005236:	9304      	str	r3, [sp, #16]
 8005238:	2300      	movs	r3, #0
 800523a:	9303      	str	r3, [sp, #12]
 800523c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	2300      	movs	r3, #0
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	2120      	movs	r1, #32
 8005254:	4808      	ldr	r0, [pc, #32]	; (8005278 <W25qxx_EraseSector+0x88>)
 8005256:	f000 f912 	bl	800547e <QSPI_Send_CMD>
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]
	
	/* �ȴ�������� */
	if(result == w25qxx_OK)
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <W25qxx_EraseSector+0x78>
		W25QXX_Wait_Busy();
 8005264:	f7ff ffaa 	bl	80051bc <W25QXX_Wait_Busy>

	return result;
 8005268:	7bfb      	ldrb	r3, [r7, #15]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	240000dc 	.word	0x240000dc
 8005278:	24004ee8 	.word	0x24004ee8

0800527c <W25qxx_PageProgram>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write. Range 1 ~ W25qxx page size
  * @retval QSPI memory status
  */
uint8_t W25qxx_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08c      	sub	sp, #48	; 0x30
 8005280:	af06      	add	r7, sp, #24
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8005288:	f7ff ffa6 	bl	80051d8 <W25qxx_WriteEnable>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 800528c:	4b22      	ldr	r3, [pc, #136]	; (8005318 <W25qxx_PageProgram+0x9c>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b05      	cmp	r3, #5
 8005292:	d116      	bne.n	80052c2 <W25qxx_PageProgram+0x46>
		result = QSPI_Send_CMD(&hqspi,W25X_QUAD_INPUT_PAGE_PROG_CMD,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_4_LINES,Size);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800529c:	9303      	str	r3, [sp, #12]
 800529e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052a2:	9302      	str	r3, [sp, #8]
 80052a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	2132      	movs	r1, #50	; 0x32
 80052b6:	4819      	ldr	r0, [pc, #100]	; (800531c <W25qxx_PageProgram+0xa0>)
 80052b8:	f000 f8e1 	bl	800547e <QSPI_Send_CMD>
 80052bc:	4603      	mov	r3, r0
 80052be:	75fb      	strb	r3, [r7, #23]
 80052c0:	e015      	b.n	80052ee <W25qxx_PageProgram+0x72>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_PageProgram,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_4_LINES,Size);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	9304      	str	r3, [sp, #16]
 80052c6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80052ca:	9303      	str	r3, [sp, #12]
 80052cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052d0:	9302      	str	r3, [sp, #8]
 80052d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	2300      	movs	r3, #0
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	2102      	movs	r1, #2
 80052e4:	480d      	ldr	r0, [pc, #52]	; (800531c <W25qxx_PageProgram+0xa0>)
 80052e6:	f000 f8ca 	bl	800547e <QSPI_Send_CMD>
 80052ea:	4603      	mov	r3, r0
 80052ec:	75fb      	strb	r3, [r7, #23]
	
	if(result == w25qxx_OK)
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d107      	bne.n	8005304 <W25qxx_PageProgram+0x88>
		result = HAL_QSPI_Transmit(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80052f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	4808      	ldr	r0, [pc, #32]	; (800531c <W25qxx_PageProgram+0xa0>)
 80052fc:	f003 ff46 	bl	800918c <HAL_QSPI_Transmit>
 8005300:	4603      	mov	r3, r0
 8005302:	75fb      	strb	r3, [r7, #23]
	
	/* �ȴ�д����� */
	if(result == w25qxx_OK)
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <W25qxx_PageProgram+0x92>
		W25QXX_Wait_Busy();
 800530a:	f7ff ff57 	bl	80051bc <W25QXX_Wait_Busy>
	
  return result;
 800530e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	240000dc 	.word	0x240000dc
 800531c:	24004ee8 	.word	0x24004ee8

08005320 <W25qxx_Read>:
//��ָ����ַ��ʼ��ȡָ�����ȵ�����
//pBuffer:���ݴ洢��
//ReadAddr:��ʼ��ȡ�ĵ�ַ(���32bit)
//NumByteToRead:Ҫ��ȡ���ֽ���(���65535)
uint8_t W25qxx_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b094      	sub	sp, #80	; 0x50
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
	
	QSPI_CommandTypeDef      s_command;

	/* Configure the command for the read instruction */
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 800532c:	4b25      	ldr	r3, [pc, #148]	; (80053c4 <W25qxx_Read+0xa4>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b04      	cmp	r3, #4
 8005332:	d107      	bne.n	8005344 <W25qxx_Read+0x24>
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8005334:	23eb      	movs	r3, #235	; 0xeb
 8005336:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8005338:	f44f 7340 	mov.w	r3, #768	; 0x300
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD;
 800533e:	2306      	movs	r3, #6
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
 8005342:	e006      	b.n	8005352 <W25qxx_Read+0x32>
	}
	else 
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 8005344:	23eb      	movs	r3, #235	; 0xeb
 8005346:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
		s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD-2;
 800534e:	2304      	movs	r3, #4
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
  }
	
	s_command.Address           = ReadAddr;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	61bb      	str	r3, [r7, #24]
	s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005356:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800535a:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 800535c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005360:	623b      	str	r3, [r7, #32]

	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8005362:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.AlternateBytes    = 0xFF;
 8005368:	23ff      	movs	r3, #255	; 0xff
 800536a:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 800536c:	2300      	movs	r3, #0
 800536e:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.DataMode          = QSPI_DATA_4_LINES;	
 8005370:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005374:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.NbData            = Size;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
		
	s_command.DdrMode         = QSPI_DDR_MODE_DISABLE;
 800537a:	2300      	movs	r3, #0
 800537c:	643b      	str	r3, [r7, #64]	; 0x40

	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800537e:	2300      	movs	r3, #0
 8005380:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005382:	2300      	movs	r3, #0
 8005384:	64bb      	str	r3, [r7, #72]	; 0x48
	
	result = HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005386:	f107 0314 	add.w	r3, r7, #20
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4619      	mov	r1, r3
 8005390:	480d      	ldr	r0, [pc, #52]	; (80053c8 <W25qxx_Read+0xa8>)
 8005392:	f003 fe9d 	bl	80090d0 <HAL_QSPI_Command>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	if(result == w25qxx_OK)
 800539c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d108      	bne.n	80053b6 <W25qxx_Read+0x96>
		result = HAL_QSPI_Receive(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80053a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a8:	68f9      	ldr	r1, [r7, #12]
 80053aa:	4807      	ldr	r0, [pc, #28]	; (80053c8 <W25qxx_Read+0xa8>)
 80053ac:	f003 ff80 	bl	80092b0 <HAL_QSPI_Receive>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	return result;
 80053b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3750      	adds	r7, #80	; 0x50
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	240000dc 	.word	0x240000dc
 80053c8:	24004ee8 	.word	0x24004ee8

080053cc <QSPI_ResetDevice>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetDevice(QSPI_HandleTypeDef *hqspi)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b090      	sub	sp, #64	; 0x40
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80053d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053d8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 80053da:	2366      	movs	r3, #102	; 0x66
 80053dc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80053e6:	2300      	movs	r3, #0
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80053f2:	2300      	movs	r3, #0
 80053f4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80053f6:	2300      	movs	r3, #0
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053fa:	f107 0308 	add.w	r3, r7, #8
 80053fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005402:	4619      	mov	r1, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f003 fe63 	bl	80090d0 <HAL_QSPI_Command>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <QSPI_ResetDevice+0x48>
  {
    return w25qxx_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e030      	b.n	8005476 <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset device command */
  s_command.Instruction = W25X_ResetDevice;
 8005414:	2399      	movs	r3, #153	; 0x99
 8005416:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005418:	f107 0308 	add.w	r3, r7, #8
 800541c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f003 fe54 	bl	80090d0 <HAL_QSPI_Command>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <QSPI_ResetDevice+0x66>
  {
    return w25qxx_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e021      	b.n	8005476 <QSPI_ResetDevice+0xaa>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005432:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005436:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 8005438:	2366      	movs	r3, #102	; 0x66
 800543a:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800543c:	f107 0308 	add.w	r3, r7, #8
 8005440:	f241 3288 	movw	r2, #5000	; 0x1388
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f003 fe42 	bl	80090d0 <HAL_QSPI_Command>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <QSPI_ResetDevice+0x8a>
  {
    return w25qxx_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e00f      	b.n	8005476 <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset memory command */
  s_command.Instruction = W25X_ResetDevice;
 8005456:	2399      	movs	r3, #153	; 0x99
 8005458:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f003 fe33 	bl	80090d0 <HAL_QSPI_Command>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <QSPI_ResetDevice+0xa8>
  {
    return w25qxx_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <QSPI_ResetDevice+0xaa>
  }
	
  return w25qxx_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3740      	adds	r7, #64	; 0x40
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <QSPI_Send_CMD>:
 * @return  uint8_t			w25qxx_OK:����
 *                      w25qxx_ERROR:����
 */
static uint8_t QSPI_Send_CMD(QSPI_HandleTypeDef *hqspi,uint32_t instruction, uint32_t address,uint32_t addressSize,uint32_t dummyCycles, 
                    uint32_t instructionMode,uint32_t addressMode, uint32_t dataMode, uint32_t dataSize)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b092      	sub	sp, #72	; 0x48
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
 800548a:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction        = instruction;   
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	613b      	str	r3, [r7, #16]
	  Cmdhandler.InstructionMode    = instructionMode;  
 8005490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28
	
    Cmdhandler.Address            = address;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	617b      	str	r3, [r7, #20]
    Cmdhandler.AddressSize        = addressSize;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	61fb      	str	r3, [r7, #28]
	  Cmdhandler.AddressMode        = addressMode;
 800549c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  
	  Cmdhandler.AlternateBytes     = 0x00;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61bb      	str	r3, [r7, #24]
    Cmdhandler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80054a4:	2300      	movs	r3, #0
 80054a6:	623b      	str	r3, [r7, #32]
	  Cmdhandler.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;                              
 80054a8:	2300      	movs	r3, #0
 80054aa:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DummyCycles        = dummyCycles;                   
 80054ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
       					      				
    Cmdhandler.DataMode           = dataMode;
 80054b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.NbData             = dataSize; 
 80054b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38
	
    Cmdhandler.DdrMode            = QSPI_DDR_MODE_DISABLE;           	
 80054b8:	2300      	movs	r3, #0
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 80054bc:	2300      	movs	r3, #0
 80054be:	643b      	str	r3, [r7, #64]	; 0x40
    Cmdhandler.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 80054c0:	2300      	movs	r3, #0
 80054c2:	647b      	str	r3, [r7, #68]	; 0x44

    if(HAL_QSPI_Command(hqspi, &Cmdhandler, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054c4:	f107 0310 	add.w	r3, r7, #16
 80054c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054cc:	4619      	mov	r1, r3
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f003 fdfe 	bl	80090d0 <HAL_QSPI_Command>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <QSPI_Send_CMD+0x60>
      return w25qxx_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <QSPI_Send_CMD+0x62>

    return w25qxx_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3748      	adds	r7, #72	; 0x48
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b096      	sub	sp, #88	; 0x58
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
	if(w25qxx_Mode == w25qxx_QPIMode)
 80054f0:	4b2a      	ldr	r3, [pc, #168]	; (800559c <QSPI_WriteEnable+0xb4>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d103      	bne.n	8005500 <QSPI_WriteEnable+0x18>
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80054f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80054fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80054fe:	e002      	b.n	8005506 <QSPI_WriteEnable+0x1e>
	else 
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8005500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005504:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = W25X_WriteEnable;
 8005506:	2306      	movs	r3, #6
 8005508:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800550a:	2300      	movs	r3, #0
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800550e:	2300      	movs	r3, #0
 8005510:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8005512:	2300      	movs	r3, #0
 8005514:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800551a:	2300      	movs	r3, #0
 800551c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800551e:	2300      	movs	r3, #0
 8005520:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005522:	2300      	movs	r3, #0
 8005524:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005526:	f107 0320 	add.w	r3, r7, #32
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f003 fdcd 	bl	80090d0 <HAL_QSPI_Command>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <QSPI_WriteEnable+0x58>
  {
    return w25qxx_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e028      	b.n	8005592 <QSPI_WriteEnable+0xaa>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = W25X_SR_WREN;
 8005540:	2302      	movs	r3, #2
 8005542:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = W25X_SR_WREN;
 8005544:	2302      	movs	r3, #2
 8005546:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005548:	2300      	movs	r3, #0
 800554a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8005550:	2310      	movs	r3, #16
 8005552:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005558:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = W25X_ReadStatusReg1;
 800555a:	2305      	movs	r3, #5
 800555c:	623b      	str	r3, [r7, #32]
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <QSPI_WriteEnable+0xb4>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b04      	cmp	r3, #4
 8005564:	d103      	bne.n	800556e <QSPI_WriteEnable+0x86>
		s_command.DataMode     = QSPI_DATA_4_LINES;
 8005566:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800556a:	647b      	str	r3, [r7, #68]	; 0x44
 800556c:	e002      	b.n	8005574 <QSPI_WriteEnable+0x8c>
  else 
		s_command.DataMode     = QSPI_DATA_1_LINE;
 800556e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005572:	647b      	str	r3, [r7, #68]	; 0x44
	
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005574:	f107 0208 	add.w	r2, r7, #8
 8005578:	f107 0120 	add.w	r1, r7, #32
 800557c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f003 ff32 	bl	80093ea <HAL_QSPI_AutoPolling>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <QSPI_WriteEnable+0xa8>
  {
    return w25qxx_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <QSPI_WriteEnable+0xaa>
  }

  return w25qxx_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3758      	adds	r7, #88	; 0x58
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	240000dc 	.word	0x240000dc

080055a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055a6:	2003      	movs	r0, #3
 80055a8:	f001 f9e1 	bl	800696e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055ac:	f004 ff26 	bl	800a3fc <HAL_RCC_GetSysClockFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <HAL_Init+0x68>)
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	4913      	ldr	r1, [pc, #76]	; (800560c <HAL_Init+0x6c>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
 80055c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055ca:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <HAL_Init+0x68>)
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	4a0e      	ldr	r2, [pc, #56]	; (800560c <HAL_Init+0x6c>)
 80055d4:	5cd3      	ldrb	r3, [r2, r3]
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
 80055e0:	4a0b      	ldr	r2, [pc, #44]	; (8005610 <HAL_Init+0x70>)
 80055e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055e4:	4a0b      	ldr	r2, [pc, #44]	; (8005614 <HAL_Init+0x74>)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055ea:	200f      	movs	r0, #15
 80055ec:	f7fd f84c 	bl	8002688 <HAL_InitTick>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e002      	b.n	8005600 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80055fa:	f7fd f827 	bl	800264c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	58024400 	.word	0x58024400
 800560c:	080194e8 	.word	0x080194e8
 8005610:	24000048 	.word	0x24000048
 8005614:	24000044 	.word	0x24000044

08005618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_IncTick+0x20>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <HAL_IncTick+0x24>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4413      	add	r3, r2
 8005628:	4a04      	ldr	r2, [pc, #16]	; (800563c <HAL_IncTick+0x24>)
 800562a:	6013      	str	r3, [r2, #0]
}
 800562c:	bf00      	nop
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	240000e4 	.word	0x240000e4
 800563c:	24005304 	.word	0x24005304

08005640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  return uwTick;
 8005644:	4b03      	ldr	r3, [pc, #12]	; (8005654 <HAL_GetTick+0x14>)
 8005646:	681b      	ldr	r3, [r3, #0]
}
 8005648:	4618      	mov	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	24005304 	.word	0x24005304

08005658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005660:	f7ff ffee 	bl	8005640 <HAL_GetTick>
 8005664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d005      	beq.n	800567e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005672:	4b0a      	ldr	r3, [pc, #40]	; (800569c <HAL_Delay+0x44>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800567e:	bf00      	nop
 8005680:	f7ff ffde 	bl	8005640 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	429a      	cmp	r2, r3
 800568e:	d8f7      	bhi.n	8005680 <HAL_Delay+0x28>
  {
  }
}
 8005690:	bf00      	nop
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	240000e4 	.word	0x240000e4

080056a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80056a4:	4b03      	ldr	r3, [pc, #12]	; (80056b4 <HAL_GetREVID+0x14>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	0c1b      	lsrs	r3, r3, #16
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	5c001000 	.word	0x5c001000

080056b8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <HAL_GetDEVID+0x18>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	5c001000 	.word	0x5c001000

080056d4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80056de:	4b07      	ldr	r3, [pc, #28]	; (80056fc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	401a      	ands	r2, r3
 80056e8:	4904      	ldr	r1, [pc, #16]	; (80056fc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	58000400 	.word	0x58000400

08005700 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	609a      	str	r2, [r3, #8]
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3360      	adds	r3, #96	; 0x60
 800577a:	461a      	mov	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	430b      	orrs	r3, r1
 8005796:	431a      	orrs	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	fa01 f303 	lsl.w	r3, r1, r3
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	611a      	str	r2, [r3, #16]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80057da:	b480      	push	{r7}
 80057dc:	b087      	sub	sp, #28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3360      	adds	r3, #96	; 0x60
 80057ea:	461a      	mov	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	431a      	orrs	r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	601a      	str	r2, [r3, #0]
  }
}
 8005804:	bf00      	nop
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3330      	adds	r3, #48	; 0x30
 8005820:	461a      	mov	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0a1b      	lsrs	r3, r3, #8
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	f003 030c 	and.w	r3, r3, #12
 800582c:	4413      	add	r3, r2
 800582e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	211f      	movs	r1, #31
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	401a      	ands	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	0e9b      	lsrs	r3, r3, #26
 8005848:	f003 011f 	and.w	r1, r3, #31
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	431a      	orrs	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3314      	adds	r3, #20
 8005878:	461a      	mov	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	0e5b      	lsrs	r3, r3, #25
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	4413      	add	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	0d1b      	lsrs	r3, r3, #20
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2107      	movs	r1, #7
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	401a      	ands	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	0d1b      	lsrs	r3, r3, #20
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ac:	431a      	orrs	r2, r3
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058d8:	43db      	mvns	r3, r3
 80058da:	401a      	ands	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f003 0318 	and.w	r3, r3, #24
 80058e2:	4908      	ldr	r1, [pc, #32]	; (8005904 <LL_ADC_SetChannelSingleDiff+0x44>)
 80058e4:	40d9      	lsrs	r1, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	400b      	ands	r3, r1
 80058ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058ee:	431a      	orrs	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80058f6:	bf00      	nop
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	000fffff 	.word	0x000fffff

08005908 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005916:	4013      	ands	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6093      	str	r3, [r2, #8]
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	5fffffc0 	.word	0x5fffffc0

0800592c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800593c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005940:	d101      	bne.n	8005946 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <LL_ADC_EnableInternalRegulator+0x24>)
 8005962:	4013      	ands	r3, r2
 8005964:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	6fffffc0 	.word	0x6fffffc0

0800597c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005990:	d101      	bne.n	8005996 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <LL_ADC_IsEnabled+0x18>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <LL_ADC_IsEnabled+0x1a>
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d101      	bne.n	80059e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d101      	bne.n	8005a08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b089      	sub	sp, #36	; 0x24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e18e      	b.n	8005d50 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fa ffdf 	bl	8000a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff ff67 	bl	800592c <LL_ADC_IsDeepPowerDownEnabled>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff ff4d 	bl	8005908 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff ff82 	bl	800597c <LL_ADC_IsInternalRegulatorEnabled>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d114      	bne.n	8005aa8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff ff66 	bl	8005954 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a88:	4b9a      	ldr	r3, [pc, #616]	; (8005cf4 <HAL_ADC_Init+0x2dc>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	099b      	lsrs	r3, r3, #6
 8005a8e:	4a9a      	ldr	r2, [pc, #616]	; (8005cf8 <HAL_ADC_Init+0x2e0>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	099b      	lsrs	r3, r3, #6
 8005a96:	3301      	adds	r3, #1
 8005a98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a9a:	e002      	b.n	8005aa2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f9      	bne.n	8005a9c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff ff65 	bl	800597c <LL_ADC_IsInternalRegulatorEnabled>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10d      	bne.n	8005ad4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abc:	f043 0210 	orr.w	r2, r3, #16
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac8:	f043 0201 	orr.w	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff ff76 	bl	80059ca <LL_ADC_REG_IsConversionOngoing>
 8005ade:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f040 8128 	bne.w	8005d3e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 8124 	bne.w	8005d3e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005afe:	f043 0202 	orr.w	r2, r3, #2
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff ff4a 	bl	80059a4 <LL_ADC_IsEnabled>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d136      	bne.n	8005b84 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a78      	ldr	r2, [pc, #480]	; (8005cfc <HAL_ADC_Init+0x2e4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_ADC_Init+0x112>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a76      	ldr	r2, [pc, #472]	; (8005d00 <HAL_ADC_Init+0x2e8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d10e      	bne.n	8005b48 <HAL_ADC_Init+0x130>
 8005b2a:	4874      	ldr	r0, [pc, #464]	; (8005cfc <HAL_ADC_Init+0x2e4>)
 8005b2c:	f7ff ff3a 	bl	80059a4 <LL_ADC_IsEnabled>
 8005b30:	4604      	mov	r4, r0
 8005b32:	4873      	ldr	r0, [pc, #460]	; (8005d00 <HAL_ADC_Init+0x2e8>)
 8005b34:	f7ff ff36 	bl	80059a4 <LL_ADC_IsEnabled>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	4323      	orrs	r3, r4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf0c      	ite	eq
 8005b40:	2301      	moveq	r3, #1
 8005b42:	2300      	movne	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	e008      	b.n	8005b5a <HAL_ADC_Init+0x142>
 8005b48:	486e      	ldr	r0, [pc, #440]	; (8005d04 <HAL_ADC_Init+0x2ec>)
 8005b4a:	f7ff ff2b 	bl	80059a4 <LL_ADC_IsEnabled>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bf0c      	ite	eq
 8005b54:	2301      	moveq	r3, #1
 8005b56:	2300      	movne	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d012      	beq.n	8005b84 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a66      	ldr	r2, [pc, #408]	; (8005cfc <HAL_ADC_Init+0x2e4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_ADC_Init+0x15a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a64      	ldr	r2, [pc, #400]	; (8005d00 <HAL_ADC_Init+0x2e8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d101      	bne.n	8005b76 <HAL_ADC_Init+0x15e>
 8005b72:	4a65      	ldr	r2, [pc, #404]	; (8005d08 <HAL_ADC_Init+0x2f0>)
 8005b74:	e000      	b.n	8005b78 <HAL_ADC_Init+0x160>
 8005b76:	4a65      	ldr	r2, [pc, #404]	; (8005d0c <HAL_ADC_Init+0x2f4>)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7ff fdbe 	bl	8005700 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005b84:	f7ff fd8c 	bl	80056a0 <HAL_GetREVID>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d914      	bls.n	8005bbc <HAL_ADC_Init+0x1a4>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b10      	cmp	r3, #16
 8005b98:	d110      	bne.n	8005bbc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	7d5b      	ldrb	r3, [r3, #21]
 8005b9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ba4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005baa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7f1b      	ldrb	r3, [r3, #28]
 8005bb0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005bb2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005bb4:	f043 030c 	orr.w	r3, r3, #12
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	e00d      	b.n	8005bd8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	7d5b      	ldrb	r3, [r3, #21]
 8005bc0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005bc6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005bcc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	7f1b      	ldrb	r3, [r3, #28]
 8005bd2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	7f1b      	ldrb	r3, [r3, #28]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d106      	bne.n	8005bee <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	045b      	lsls	r3, r3, #17
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	4b3f      	ldr	r3, [pc, #252]	; (8005d10 <HAL_ADC_Init+0x2f8>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff fed1 	bl	80059ca <LL_ADC_REG_IsConversionOngoing>
 8005c28:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff fede 	bl	80059f0 <LL_ADC_INJ_IsConversionOngoing>
 8005c34:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d14a      	bne.n	8005cd2 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d147      	bne.n	8005cd2 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	7d1b      	ldrb	r3, [r3, #20]
 8005c46:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <HAL_ADC_Init+0x2fc>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6812      	ldr	r2, [r2, #0]
 8005c5e:	69b9      	ldr	r1, [r7, #24]
 8005c60:	430b      	orrs	r3, r1
 8005c62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d11b      	bne.n	8005ca6 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	4b27      	ldr	r3, [pc, #156]	; (8005d18 <HAL_ADC_Init+0x300>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c82:	3a01      	subs	r2, #1
 8005c84:	0411      	lsls	r1, r2, #16
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c8a:	4311      	orrs	r1, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c90:	4311      	orrs	r1, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c96:	430a      	orrs	r2, r1
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	611a      	str	r2, [r3, #16]
 8005ca4:	e007      	b.n	8005cb6 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fb93 	bl	80063f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d120      	bne.n	8005d1c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	f023 010f 	bic.w	r1, r3, #15
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	1e5a      	subs	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8005cf2:	e01b      	b.n	8005d2c <HAL_ADC_Init+0x314>
 8005cf4:	24000044 	.word	0x24000044
 8005cf8:	053e2d63 	.word	0x053e2d63
 8005cfc:	40022000 	.word	0x40022000
 8005d00:	40022100 	.word	0x40022100
 8005d04:	58026000 	.word	0x58026000
 8005d08:	40022300 	.word	0x40022300
 8005d0c:	58026300 	.word	0x58026300
 8005d10:	fff0c003 	.word	0xfff0c003
 8005d14:	ffffbffc 	.word	0xffffbffc
 8005d18:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 020f 	bic.w	r2, r2, #15
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d30:	f023 0303 	bic.w	r3, r3, #3
 8005d34:	f043 0201 	orr.w	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
 8005d3c:	e007      	b.n	8005d4e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	f043 0210 	orr.w	r2, r3, #16
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3724      	adds	r7, #36	; 0x24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd90      	pop	{r4, r7, pc}

08005d58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d58:	b590      	push	{r4, r7, lr}
 8005d5a:	b0a1      	sub	sp, #132	; 0x84
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4a9d      	ldr	r2, [pc, #628]	; (8005fe8 <HAL_ADC_ConfigChannel+0x290>)
 8005d72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_ADC_ConfigChannel+0x2a>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e321      	b.n	80063c6 <HAL_ADC_ConfigChannel+0x66e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fe1b 	bl	80059ca <LL_ADC_REG_IsConversionOngoing>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f040 8306 	bne.w	80063a8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d108      	bne.n	8005dba <HAL_ADC_ConfigChannel+0x62>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	0e9b      	lsrs	r3, r3, #26
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	2201      	movs	r2, #1
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	e016      	b.n	8005de8 <HAL_ADC_ConfigChannel+0x90>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dc2:	fa93 f3a3 	rbit	r3, r3
 8005dc6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dca:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005dd2:	2320      	movs	r3, #32
 8005dd4:	e003      	b.n	8005dde <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dd8:	fab3 f383 	clz	r3, r3
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	2201      	movs	r2, #1
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	69d1      	ldr	r1, [r2, #28]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6812      	ldr	r2, [r2, #0]
 8005df2:	430b      	orrs	r3, r1
 8005df4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6859      	ldr	r1, [r3, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f7ff fd04 	bl	8005810 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fddc 	bl	80059ca <LL_ADC_REG_IsConversionOngoing>
 8005e12:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fde9 	bl	80059f0 <LL_ADC_INJ_IsConversionOngoing>
 8005e1e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 80b3 	bne.w	8005f8e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 80af 	bne.w	8005f8e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	6819      	ldr	r1, [r3, #0]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f7ff fd13 	bl	8005868 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e42:	4b6a      	ldr	r3, [pc, #424]	; (8005fec <HAL_ADC_ConfigChannel+0x294>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e4e:	d10b      	bne.n	8005e68 <HAL_ADC_ConfigChannel+0x110>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	089b      	lsrs	r3, r3, #2
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	e01d      	b.n	8005ea4 <HAL_ADC_ConfigChannel+0x14c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x136>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	089b      	lsrs	r3, r3, #2
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	e00a      	b.n	8005ea4 <HAL_ADC_ConfigChannel+0x14c>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695a      	ldr	r2, [r3, #20]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	089b      	lsrs	r3, r3, #2
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d027      	beq.n	8005efe <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	6919      	ldr	r1, [r3, #16]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ebc:	f7ff fc54 	bl	8005768 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	6919      	ldr	r1, [r3, #16]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	7e5b      	ldrb	r3, [r3, #25]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d102      	bne.n	8005ed6 <HAL_ADC_ConfigChannel+0x17e>
 8005ed0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ed4:	e000      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x180>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f7ff fc7e 	bl	80057da <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6919      	ldr	r1, [r3, #16]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	7e1b      	ldrb	r3, [r3, #24]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d102      	bne.n	8005ef4 <HAL_ADC_ConfigChannel+0x19c>
 8005eee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ef2:	e000      	b.n	8005ef6 <HAL_ADC_ConfigChannel+0x19e>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f7ff fc56 	bl	80057a8 <LL_ADC_SetDataRightShift>
 8005efc:	e047      	b.n	8005f8e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	069b      	lsls	r3, r3, #26
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d107      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f20:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	069b      	lsls	r3, r3, #26
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d107      	bne.n	8005f46 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f44:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	069b      	lsls	r3, r3, #26
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d107      	bne.n	8005f6a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f68:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	069b      	lsls	r3, r3, #26
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d107      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f8c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fd06 	bl	80059a4 <LL_ADC_IsEnabled>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f040 820d 	bne.w	80063ba <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	6819      	ldr	r1, [r3, #0]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	461a      	mov	r2, r3
 8005fae:	f7ff fc87 	bl	80058c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <HAL_ADC_ConfigChannel+0x290>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	f040 8133 	bne.w	8006224 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d110      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x298>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	0e9b      	lsrs	r3, r3, #26
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	2b09      	cmp	r3, #9
 8005fdc:	bf94      	ite	ls
 8005fde:	2301      	movls	r3, #1
 8005fe0:	2300      	movhi	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	e01e      	b.n	8006024 <HAL_ADC_ConfigChannel+0x2cc>
 8005fe6:	bf00      	nop
 8005fe8:	47ff0000 	.word	0x47ff0000
 8005fec:	5c001000 	.word	0x5c001000
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ff8:	fa93 f3a3 	rbit	r3, r3
 8005ffc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006000:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8006008:	2320      	movs	r3, #32
 800600a:	e003      	b.n	8006014 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800600c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800600e:	fab3 f383 	clz	r3, r3
 8006012:	b2db      	uxtb	r3, r3
 8006014:	3301      	adds	r3, #1
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2b09      	cmp	r3, #9
 800601c:	bf94      	ite	ls
 800601e:	2301      	movls	r3, #1
 8006020:	2300      	movhi	r3, #0
 8006022:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006024:	2b00      	cmp	r3, #0
 8006026:	d079      	beq.n	800611c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006030:	2b00      	cmp	r3, #0
 8006032:	d107      	bne.n	8006044 <HAL_ADC_ConfigChannel+0x2ec>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	0e9b      	lsrs	r3, r3, #26
 800603a:	3301      	adds	r3, #1
 800603c:	069b      	lsls	r3, r3, #26
 800603e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006042:	e015      	b.n	8006070 <HAL_ADC_ConfigChannel+0x318>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604c:	fa93 f3a3 	rbit	r3, r3
 8006050:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006054:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800605c:	2320      	movs	r3, #32
 800605e:	e003      	b.n	8006068 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006062:	fab3 f383 	clz	r3, r3
 8006066:	b2db      	uxtb	r3, r3
 8006068:	3301      	adds	r3, #1
 800606a:	069b      	lsls	r3, r3, #26
 800606c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <HAL_ADC_ConfigChannel+0x338>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	0e9b      	lsrs	r3, r3, #26
 8006082:	3301      	adds	r3, #1
 8006084:	f003 031f 	and.w	r3, r3, #31
 8006088:	2101      	movs	r1, #1
 800608a:	fa01 f303 	lsl.w	r3, r1, r3
 800608e:	e017      	b.n	80060c0 <HAL_ADC_ConfigChannel+0x368>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006098:	fa93 f3a3 	rbit	r3, r3
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800609e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80060a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80060a8:	2320      	movs	r3, #32
 80060aa:	e003      	b.n	80060b4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80060ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ae:	fab3 f383 	clz	r3, r3
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	3301      	adds	r3, #1
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	2101      	movs	r1, #1
 80060bc:	fa01 f303 	lsl.w	r3, r1, r3
 80060c0:	ea42 0103 	orr.w	r1, r2, r3
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <HAL_ADC_ConfigChannel+0x38e>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	0e9b      	lsrs	r3, r3, #26
 80060d6:	3301      	adds	r3, #1
 80060d8:	f003 021f 	and.w	r2, r3, #31
 80060dc:	4613      	mov	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	4413      	add	r3, r2
 80060e2:	051b      	lsls	r3, r3, #20
 80060e4:	e018      	b.n	8006118 <HAL_ADC_ConfigChannel+0x3c0>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ee:	fa93 f3a3 	rbit	r3, r3
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80060fe:	2320      	movs	r3, #32
 8006100:	e003      	b.n	800610a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	fab3 f383 	clz	r3, r3
 8006108:	b2db      	uxtb	r3, r3
 800610a:	3301      	adds	r3, #1
 800610c:	f003 021f 	and.w	r2, r3, #31
 8006110:	4613      	mov	r3, r2
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	4413      	add	r3, r2
 8006116:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006118:	430b      	orrs	r3, r1
 800611a:	e07e      	b.n	800621a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x3e0>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	0e9b      	lsrs	r3, r3, #26
 800612e:	3301      	adds	r3, #1
 8006130:	069b      	lsls	r3, r3, #26
 8006132:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006136:	e015      	b.n	8006164 <HAL_ADC_ConfigChannel+0x40c>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	fa93 f3a3 	rbit	r3, r3
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006150:	2320      	movs	r3, #32
 8006152:	e003      	b.n	800615c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	fab3 f383 	clz	r3, r3
 800615a:	b2db      	uxtb	r3, r3
 800615c:	3301      	adds	r3, #1
 800615e:	069b      	lsls	r3, r3, #26
 8006160:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800616c:	2b00      	cmp	r3, #0
 800616e:	d109      	bne.n	8006184 <HAL_ADC_ConfigChannel+0x42c>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	0e9b      	lsrs	r3, r3, #26
 8006176:	3301      	adds	r3, #1
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2101      	movs	r1, #1
 800617e:	fa01 f303 	lsl.w	r3, r1, r3
 8006182:	e017      	b.n	80061b4 <HAL_ADC_ConfigChannel+0x45c>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	fa93 f3a3 	rbit	r3, r3
 8006190:	61bb      	str	r3, [r7, #24]
  return result;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800619c:	2320      	movs	r3, #32
 800619e:	e003      	b.n	80061a8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	fab3 f383 	clz	r3, r3
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	3301      	adds	r3, #1
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	2101      	movs	r1, #1
 80061b0:	fa01 f303 	lsl.w	r3, r1, r3
 80061b4:	ea42 0103 	orr.w	r1, r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10d      	bne.n	80061e0 <HAL_ADC_ConfigChannel+0x488>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	0e9b      	lsrs	r3, r3, #26
 80061ca:	3301      	adds	r3, #1
 80061cc:	f003 021f 	and.w	r2, r3, #31
 80061d0:	4613      	mov	r3, r2
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	4413      	add	r3, r2
 80061d6:	3b1e      	subs	r3, #30
 80061d8:	051b      	lsls	r3, r3, #20
 80061da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061de:	e01b      	b.n	8006218 <HAL_ADC_ConfigChannel+0x4c0>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	fa93 f3a3 	rbit	r3, r3
 80061ec:	60fb      	str	r3, [r7, #12]
  return result;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80061f8:	2320      	movs	r3, #32
 80061fa:	e003      	b.n	8006204 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	fab3 f383 	clz	r3, r3
 8006202:	b2db      	uxtb	r3, r3
 8006204:	3301      	adds	r3, #1
 8006206:	f003 021f 	and.w	r2, r3, #31
 800620a:	4613      	mov	r3, r2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	4413      	add	r3, r2
 8006210:	3b1e      	subs	r3, #30
 8006212:	051b      	lsls	r3, r3, #20
 8006214:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006218:	430b      	orrs	r3, r1
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	6892      	ldr	r2, [r2, #8]
 800621e:	4619      	mov	r1, r3
 8006220:	f7ff fb22 	bl	8005868 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f280 80c6 	bge.w	80063ba <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a67      	ldr	r2, [pc, #412]	; (80063d0 <HAL_ADC_ConfigChannel+0x678>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d004      	beq.n	8006242 <HAL_ADC_ConfigChannel+0x4ea>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a65      	ldr	r2, [pc, #404]	; (80063d4 <HAL_ADC_ConfigChannel+0x67c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d101      	bne.n	8006246 <HAL_ADC_ConfigChannel+0x4ee>
 8006242:	4b65      	ldr	r3, [pc, #404]	; (80063d8 <HAL_ADC_ConfigChannel+0x680>)
 8006244:	e000      	b.n	8006248 <HAL_ADC_ConfigChannel+0x4f0>
 8006246:	4b65      	ldr	r3, [pc, #404]	; (80063dc <HAL_ADC_ConfigChannel+0x684>)
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fa7f 	bl	800574c <LL_ADC_GetCommonPathInternalCh>
 800624e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a5e      	ldr	r2, [pc, #376]	; (80063d0 <HAL_ADC_ConfigChannel+0x678>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d004      	beq.n	8006264 <HAL_ADC_ConfigChannel+0x50c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5d      	ldr	r2, [pc, #372]	; (80063d4 <HAL_ADC_ConfigChannel+0x67c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d10e      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x52a>
 8006264:	485a      	ldr	r0, [pc, #360]	; (80063d0 <HAL_ADC_ConfigChannel+0x678>)
 8006266:	f7ff fb9d 	bl	80059a4 <LL_ADC_IsEnabled>
 800626a:	4604      	mov	r4, r0
 800626c:	4859      	ldr	r0, [pc, #356]	; (80063d4 <HAL_ADC_ConfigChannel+0x67c>)
 800626e:	f7ff fb99 	bl	80059a4 <LL_ADC_IsEnabled>
 8006272:	4603      	mov	r3, r0
 8006274:	4323      	orrs	r3, r4
 8006276:	2b00      	cmp	r3, #0
 8006278:	bf0c      	ite	eq
 800627a:	2301      	moveq	r3, #1
 800627c:	2300      	movne	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	e008      	b.n	8006294 <HAL_ADC_ConfigChannel+0x53c>
 8006282:	4857      	ldr	r0, [pc, #348]	; (80063e0 <HAL_ADC_ConfigChannel+0x688>)
 8006284:	f7ff fb8e 	bl	80059a4 <LL_ADC_IsEnabled>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	bf0c      	ite	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	2300      	movne	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d07d      	beq.n	8006394 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a51      	ldr	r2, [pc, #324]	; (80063e4 <HAL_ADC_ConfigChannel+0x68c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d130      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x5ac>
 80062a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d12b      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a4b      	ldr	r2, [pc, #300]	; (80063e0 <HAL_ADC_ConfigChannel+0x688>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	f040 8081 	bne.w	80063ba <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a44      	ldr	r2, [pc, #272]	; (80063d0 <HAL_ADC_ConfigChannel+0x678>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d004      	beq.n	80062cc <HAL_ADC_ConfigChannel+0x574>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a43      	ldr	r2, [pc, #268]	; (80063d4 <HAL_ADC_ConfigChannel+0x67c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d101      	bne.n	80062d0 <HAL_ADC_ConfigChannel+0x578>
 80062cc:	4a42      	ldr	r2, [pc, #264]	; (80063d8 <HAL_ADC_ConfigChannel+0x680>)
 80062ce:	e000      	b.n	80062d2 <HAL_ADC_ConfigChannel+0x57a>
 80062d0:	4a42      	ldr	r2, [pc, #264]	; (80063dc <HAL_ADC_ConfigChannel+0x684>)
 80062d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062d8:	4619      	mov	r1, r3
 80062da:	4610      	mov	r0, r2
 80062dc:	f7ff fa23 	bl	8005726 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062e0:	4b41      	ldr	r3, [pc, #260]	; (80063e8 <HAL_ADC_ConfigChannel+0x690>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	099b      	lsrs	r3, r3, #6
 80062e6:	4a41      	ldr	r2, [pc, #260]	; (80063ec <HAL_ADC_ConfigChannel+0x694>)
 80062e8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ec:	099b      	lsrs	r3, r3, #6
 80062ee:	3301      	adds	r3, #1
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80062f4:	e002      	b.n	80062fc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f9      	bne.n	80062f6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006302:	e05a      	b.n	80063ba <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a39      	ldr	r2, [pc, #228]	; (80063f0 <HAL_ADC_ConfigChannel+0x698>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d11e      	bne.n	800634c <HAL_ADC_ConfigChannel+0x5f4>
 800630e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d119      	bne.n	800634c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a30      	ldr	r2, [pc, #192]	; (80063e0 <HAL_ADC_ConfigChannel+0x688>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d14b      	bne.n	80063ba <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <HAL_ADC_ConfigChannel+0x678>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_ADC_ConfigChannel+0x5de>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a28      	ldr	r2, [pc, #160]	; (80063d4 <HAL_ADC_ConfigChannel+0x67c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d101      	bne.n	800633a <HAL_ADC_ConfigChannel+0x5e2>
 8006336:	4a28      	ldr	r2, [pc, #160]	; (80063d8 <HAL_ADC_ConfigChannel+0x680>)
 8006338:	e000      	b.n	800633c <HAL_ADC_ConfigChannel+0x5e4>
 800633a:	4a28      	ldr	r2, [pc, #160]	; (80063dc <HAL_ADC_ConfigChannel+0x684>)
 800633c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f7ff f9ee 	bl	8005726 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800634a:	e036      	b.n	80063ba <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a28      	ldr	r2, [pc, #160]	; (80063f4 <HAL_ADC_ConfigChannel+0x69c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d131      	bne.n	80063ba <HAL_ADC_ConfigChannel+0x662>
 8006356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d12c      	bne.n	80063ba <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1e      	ldr	r2, [pc, #120]	; (80063e0 <HAL_ADC_ConfigChannel+0x688>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d127      	bne.n	80063ba <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <HAL_ADC_ConfigChannel+0x678>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_ADC_ConfigChannel+0x626>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <HAL_ADC_ConfigChannel+0x67c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d101      	bne.n	8006382 <HAL_ADC_ConfigChannel+0x62a>
 800637e:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <HAL_ADC_ConfigChannel+0x680>)
 8006380:	e000      	b.n	8006384 <HAL_ADC_ConfigChannel+0x62c>
 8006382:	4a16      	ldr	r2, [pc, #88]	; (80063dc <HAL_ADC_ConfigChannel+0x684>)
 8006384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006386:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f7ff f9ca 	bl	8005726 <LL_ADC_SetCommonPathInternalCh>
 8006392:	e012      	b.n	80063ba <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006398:	f043 0220 	orr.w	r2, r3, #32
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80063a6:	e008      	b.n	80063ba <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80063c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3784      	adds	r7, #132	; 0x84
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd90      	pop	{r4, r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40022000 	.word	0x40022000
 80063d4:	40022100 	.word	0x40022100
 80063d8:	40022300 	.word	0x40022300
 80063dc:	58026300 	.word	0x58026300
 80063e0:	58026000 	.word	0x58026000
 80063e4:	cb840000 	.word	0xcb840000
 80063e8:	24000044 	.word	0x24000044
 80063ec:	053e2d63 	.word	0x053e2d63
 80063f0:	c7520000 	.word	0xc7520000
 80063f4:	cfb80000 	.word	0xcfb80000

080063f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a79      	ldr	r2, [pc, #484]	; (80065ec <ADC_ConfigureBoostMode+0x1f4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <ADC_ConfigureBoostMode+0x1c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a78      	ldr	r2, [pc, #480]	; (80065f0 <ADC_ConfigureBoostMode+0x1f8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d109      	bne.n	8006428 <ADC_ConfigureBoostMode+0x30>
 8006414:	4b77      	ldr	r3, [pc, #476]	; (80065f4 <ADC_ConfigureBoostMode+0x1fc>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800641c:	2b00      	cmp	r3, #0
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e008      	b.n	800643a <ADC_ConfigureBoostMode+0x42>
 8006428:	4b73      	ldr	r3, [pc, #460]	; (80065f8 <ADC_ConfigureBoostMode+0x200>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006430:	2b00      	cmp	r3, #0
 8006432:	bf14      	ite	ne
 8006434:	2301      	movne	r3, #1
 8006436:	2300      	moveq	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d01c      	beq.n	8006478 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800643e:	f004 f957 	bl	800a6f0 <HAL_RCC_GetHCLKFreq>
 8006442:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800644c:	d010      	beq.n	8006470 <ADC_ConfigureBoostMode+0x78>
 800644e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006452:	d871      	bhi.n	8006538 <ADC_ConfigureBoostMode+0x140>
 8006454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006458:	d002      	beq.n	8006460 <ADC_ConfigureBoostMode+0x68>
 800645a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800645e:	d16b      	bne.n	8006538 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	0c1b      	lsrs	r3, r3, #16
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	60fb      	str	r3, [r7, #12]
        break;
 800646e:	e066      	b.n	800653e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	089b      	lsrs	r3, r3, #2
 8006474:	60fb      	str	r3, [r7, #12]
        break;
 8006476:	e062      	b.n	800653e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006478:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800647c:	f005 f916 	bl	800b6ac <HAL_RCCEx_GetPeriphCLKFreq>
 8006480:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800648a:	d051      	beq.n	8006530 <ADC_ConfigureBoostMode+0x138>
 800648c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006490:	d854      	bhi.n	800653c <ADC_ConfigureBoostMode+0x144>
 8006492:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006496:	d047      	beq.n	8006528 <ADC_ConfigureBoostMode+0x130>
 8006498:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800649c:	d84e      	bhi.n	800653c <ADC_ConfigureBoostMode+0x144>
 800649e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80064a2:	d03d      	beq.n	8006520 <ADC_ConfigureBoostMode+0x128>
 80064a4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80064a8:	d848      	bhi.n	800653c <ADC_ConfigureBoostMode+0x144>
 80064aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064ae:	d033      	beq.n	8006518 <ADC_ConfigureBoostMode+0x120>
 80064b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064b4:	d842      	bhi.n	800653c <ADC_ConfigureBoostMode+0x144>
 80064b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80064ba:	d029      	beq.n	8006510 <ADC_ConfigureBoostMode+0x118>
 80064bc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80064c0:	d83c      	bhi.n	800653c <ADC_ConfigureBoostMode+0x144>
 80064c2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80064c6:	d01a      	beq.n	80064fe <ADC_ConfigureBoostMode+0x106>
 80064c8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80064cc:	d836      	bhi.n	800653c <ADC_ConfigureBoostMode+0x144>
 80064ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80064d2:	d014      	beq.n	80064fe <ADC_ConfigureBoostMode+0x106>
 80064d4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80064d8:	d830      	bhi.n	800653c <ADC_ConfigureBoostMode+0x144>
 80064da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064de:	d00e      	beq.n	80064fe <ADC_ConfigureBoostMode+0x106>
 80064e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e4:	d82a      	bhi.n	800653c <ADC_ConfigureBoostMode+0x144>
 80064e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80064ea:	d008      	beq.n	80064fe <ADC_ConfigureBoostMode+0x106>
 80064ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80064f0:	d824      	bhi.n	800653c <ADC_ConfigureBoostMode+0x144>
 80064f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064f6:	d002      	beq.n	80064fe <ADC_ConfigureBoostMode+0x106>
 80064f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064fc:	d11e      	bne.n	800653c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	0c9b      	lsrs	r3, r3, #18
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	60fb      	str	r3, [r7, #12]
        break;
 800650e:	e016      	b.n	800653e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	60fb      	str	r3, [r7, #12]
        break;
 8006516:	e012      	b.n	800653e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	60fb      	str	r3, [r7, #12]
        break;
 800651e:	e00e      	b.n	800653e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	099b      	lsrs	r3, r3, #6
 8006524:	60fb      	str	r3, [r7, #12]
        break;
 8006526:	e00a      	b.n	800653e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	09db      	lsrs	r3, r3, #7
 800652c:	60fb      	str	r3, [r7, #12]
        break;
 800652e:	e006      	b.n	800653e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	60fb      	str	r3, [r7, #12]
        break;
 8006536:	e002      	b.n	800653e <ADC_ConfigureBoostMode+0x146>
        break;
 8006538:	bf00      	nop
 800653a:	e000      	b.n	800653e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800653c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800653e:	f7ff f8af 	bl	80056a0 <HAL_GetREVID>
 8006542:	4603      	mov	r3, r0
 8006544:	f241 0203 	movw	r2, #4099	; 0x1003
 8006548:	4293      	cmp	r3, r2
 800654a:	d815      	bhi.n	8006578 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4a2b      	ldr	r2, [pc, #172]	; (80065fc <ADC_ConfigureBoostMode+0x204>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d908      	bls.n	8006566 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006562:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006564:	e03e      	b.n	80065e4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006574:	609a      	str	r2, [r3, #8]
}
 8006576:	e035      	b.n	80065e4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <ADC_ConfigureBoostMode+0x208>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d808      	bhi.n	8006598 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006594:	609a      	str	r2, [r3, #8]
}
 8006596:	e025      	b.n	80065e4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <ADC_ConfigureBoostMode+0x20c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d80a      	bhi.n	80065b6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065b2:	609a      	str	r2, [r3, #8]
}
 80065b4:	e016      	b.n	80065e4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4a13      	ldr	r2, [pc, #76]	; (8006608 <ADC_ConfigureBoostMode+0x210>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d80a      	bhi.n	80065d4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d0:	609a      	str	r2, [r3, #8]
}
 80065d2:	e007      	b.n	80065e4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80065e2:	609a      	str	r2, [r3, #8]
}
 80065e4:	bf00      	nop
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40022000 	.word	0x40022000
 80065f0:	40022100 	.word	0x40022100
 80065f4:	40022300 	.word	0x40022300
 80065f8:	58026300 	.word	0x58026300
 80065fc:	01312d00 	.word	0x01312d00
 8006600:	005f5e10 	.word	0x005f5e10
 8006604:	00bebc20 	.word	0x00bebc20
 8006608:	017d7840 	.word	0x017d7840

0800660c <LL_ADC_IsEnabled>:
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <LL_ADC_IsEnabled+0x18>
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <LL_ADC_IsEnabled+0x1a>
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <LL_ADC_REG_IsConversionOngoing>:
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b04      	cmp	r3, #4
 8006644:	d101      	bne.n	800664a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b09f      	sub	sp, #124	; 0x7c
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006672:	2302      	movs	r3, #2
 8006674:	e0be      	b.n	80067f4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800667e:	2300      	movs	r3, #0
 8006680:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006682:	2300      	movs	r3, #0
 8006684:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a5c      	ldr	r2, [pc, #368]	; (80067fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d102      	bne.n	8006696 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006690:	4b5b      	ldr	r3, [pc, #364]	; (8006800 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006692:	60bb      	str	r3, [r7, #8]
 8006694:	e001      	b.n	800669a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006696:	2300      	movs	r3, #0
 8006698:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10b      	bne.n	80066b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e09d      	b.n	80067f4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff ffb9 	bl	8006632 <LL_ADC_REG_IsConversionOngoing>
 80066c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff ffb3 	bl	8006632 <LL_ADC_REG_IsConversionOngoing>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d17f      	bne.n	80067d2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80066d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d17c      	bne.n	80067d2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a47      	ldr	r2, [pc, #284]	; (80067fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d004      	beq.n	80066ec <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a46      	ldr	r2, [pc, #280]	; (8006800 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d101      	bne.n	80066f0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80066ec:	4b45      	ldr	r3, [pc, #276]	; (8006804 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80066ee:	e000      	b.n	80066f2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80066f0:	4b45      	ldr	r3, [pc, #276]	; (8006808 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80066f2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d039      	beq.n	8006770 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80066fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	431a      	orrs	r2, r3
 800670a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a3a      	ldr	r2, [pc, #232]	; (80067fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a38      	ldr	r2, [pc, #224]	; (8006800 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d10e      	bne.n	8006740 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006722:	4836      	ldr	r0, [pc, #216]	; (80067fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006724:	f7ff ff72 	bl	800660c <LL_ADC_IsEnabled>
 8006728:	4604      	mov	r4, r0
 800672a:	4835      	ldr	r0, [pc, #212]	; (8006800 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800672c:	f7ff ff6e 	bl	800660c <LL_ADC_IsEnabled>
 8006730:	4603      	mov	r3, r0
 8006732:	4323      	orrs	r3, r4
 8006734:	2b00      	cmp	r3, #0
 8006736:	bf0c      	ite	eq
 8006738:	2301      	moveq	r3, #1
 800673a:	2300      	movne	r3, #0
 800673c:	b2db      	uxtb	r3, r3
 800673e:	e008      	b.n	8006752 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006740:	4832      	ldr	r0, [pc, #200]	; (800680c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006742:	f7ff ff63 	bl	800660c <LL_ADC_IsEnabled>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	bf0c      	ite	eq
 800674c:	2301      	moveq	r3, #1
 800674e:	2300      	movne	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d047      	beq.n	80067e6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	4b2d      	ldr	r3, [pc, #180]	; (8006810 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800675c:	4013      	ands	r3, r2
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	6811      	ldr	r1, [r2, #0]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	6892      	ldr	r2, [r2, #8]
 8006766:	430a      	orrs	r2, r1
 8006768:	431a      	orrs	r2, r3
 800676a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800676c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800676e:	e03a      	b.n	80067e6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1e      	ldr	r2, [pc, #120]	; (80067fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d004      	beq.n	8006790 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1d      	ldr	r2, [pc, #116]	; (8006800 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10e      	bne.n	80067ae <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006790:	481a      	ldr	r0, [pc, #104]	; (80067fc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006792:	f7ff ff3b 	bl	800660c <LL_ADC_IsEnabled>
 8006796:	4604      	mov	r4, r0
 8006798:	4819      	ldr	r0, [pc, #100]	; (8006800 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800679a:	f7ff ff37 	bl	800660c <LL_ADC_IsEnabled>
 800679e:	4603      	mov	r3, r0
 80067a0:	4323      	orrs	r3, r4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bf0c      	ite	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	2300      	movne	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	e008      	b.n	80067c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80067ae:	4817      	ldr	r0, [pc, #92]	; (800680c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80067b0:	f7ff ff2c 	bl	800660c <LL_ADC_IsEnabled>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bf0c      	ite	eq
 80067ba:	2301      	moveq	r3, #1
 80067bc:	2300      	movne	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d010      	beq.n	80067e6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80067c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	4b11      	ldr	r3, [pc, #68]	; (8006810 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067ce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067d0:	e009      	b.n	80067e6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80067e4:	e000      	b.n	80067e8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067e6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80067f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	377c      	adds	r7, #124	; 0x7c
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd90      	pop	{r4, r7, pc}
 80067fc:	40022000 	.word	0x40022000
 8006800:	40022100 	.word	0x40022100
 8006804:	40022300 	.word	0x40022300
 8006808:	58026300 	.word	0x58026300
 800680c:	58026000 	.word	0x58026000
 8006810:	fffff0e0 	.word	0xfffff0e0

08006814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006824:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <__NVIC_SetPriorityGrouping+0x40>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006830:	4013      	ands	r3, r2
 8006832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <__NVIC_SetPriorityGrouping+0x44>)
 800683e:	4313      	orrs	r3, r2
 8006840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006842:	4a04      	ldr	r2, [pc, #16]	; (8006854 <__NVIC_SetPriorityGrouping+0x40>)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	60d3      	str	r3, [r2, #12]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	e000ed00 	.word	0xe000ed00
 8006858:	05fa0000 	.word	0x05fa0000

0800685c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006860:	4b04      	ldr	r3, [pc, #16]	; (8006874 <__NVIC_GetPriorityGrouping+0x18>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	0a1b      	lsrs	r3, r3, #8
 8006866:	f003 0307 	and.w	r3, r3, #7
}
 800686a:	4618      	mov	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	e000ed00 	.word	0xe000ed00

08006878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006886:	2b00      	cmp	r3, #0
 8006888:	db0b      	blt.n	80068a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	f003 021f 	and.w	r2, r3, #31
 8006890:	4907      	ldr	r1, [pc, #28]	; (80068b0 <__NVIC_EnableIRQ+0x38>)
 8006892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006896:	095b      	lsrs	r3, r3, #5
 8006898:	2001      	movs	r0, #1
 800689a:	fa00 f202 	lsl.w	r2, r0, r2
 800689e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	e000e100 	.word	0xe000e100

080068b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	6039      	str	r1, [r7, #0]
 80068be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	db0a      	blt.n	80068de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	490c      	ldr	r1, [pc, #48]	; (8006900 <__NVIC_SetPriority+0x4c>)
 80068ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068d2:	0112      	lsls	r2, r2, #4
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	440b      	add	r3, r1
 80068d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068dc:	e00a      	b.n	80068f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	4908      	ldr	r1, [pc, #32]	; (8006904 <__NVIC_SetPriority+0x50>)
 80068e4:	88fb      	ldrh	r3, [r7, #6]
 80068e6:	f003 030f 	and.w	r3, r3, #15
 80068ea:	3b04      	subs	r3, #4
 80068ec:	0112      	lsls	r2, r2, #4
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	440b      	add	r3, r1
 80068f2:	761a      	strb	r2, [r3, #24]
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	e000e100 	.word	0xe000e100
 8006904:	e000ed00 	.word	0xe000ed00

08006908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006908:	b480      	push	{r7}
 800690a:	b089      	sub	sp, #36	; 0x24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	f1c3 0307 	rsb	r3, r3, #7
 8006922:	2b04      	cmp	r3, #4
 8006924:	bf28      	it	cs
 8006926:	2304      	movcs	r3, #4
 8006928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	3304      	adds	r3, #4
 800692e:	2b06      	cmp	r3, #6
 8006930:	d902      	bls.n	8006938 <NVIC_EncodePriority+0x30>
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	3b03      	subs	r3, #3
 8006936:	e000      	b.n	800693a <NVIC_EncodePriority+0x32>
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800693c:	f04f 32ff 	mov.w	r2, #4294967295
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	fa02 f303 	lsl.w	r3, r2, r3
 8006946:	43da      	mvns	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	401a      	ands	r2, r3
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006950:	f04f 31ff 	mov.w	r1, #4294967295
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	fa01 f303 	lsl.w	r3, r1, r3
 800695a:	43d9      	mvns	r1, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006960:	4313      	orrs	r3, r2
         );
}
 8006962:	4618      	mov	r0, r3
 8006964:	3724      	adds	r7, #36	; 0x24
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff ff4c 	bl	8006814 <__NVIC_SetPriorityGrouping>
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006992:	f7ff ff63 	bl	800685c <__NVIC_GetPriorityGrouping>
 8006996:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	6978      	ldr	r0, [r7, #20]
 800699e:	f7ff ffb3 	bl	8006908 <NVIC_EncodePriority>
 80069a2:	4602      	mov	r2, r0
 80069a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069a8:	4611      	mov	r1, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff ff82 	bl	80068b4 <__NVIC_SetPriority>
}
 80069b0:	bf00      	nop
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff ff56 	bl	8006878 <__NVIC_EnableIRQ>
}
 80069cc:	bf00      	nop
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e014      	b.n	8006a10 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	791b      	ldrb	r3, [r3, #4]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d105      	bne.n	80069fc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fa f93e 	bl	8000c78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	795b      	ldrb	r3, [r3, #5]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_DAC_ConfigChannel+0x18>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e11d      	b.n	8006c6c <HAL_DAC_ConfigChannel+0x254>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d174      	bne.n	8006b2e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006a44:	f7fe fdfc 	bl	8005640 <HAL_GetTick>
 8006a48:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d134      	bne.n	8006aba <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006a50:	e011      	b.n	8006a76 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006a52:	f7fe fdf5 	bl	8005640 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d90a      	bls.n	8006a76 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	f043 0208 	orr.w	r2, r3, #8
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2203      	movs	r2, #3
 8006a70:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e0fa      	b.n	8006c6c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a7c:	4b7d      	ldr	r3, [pc, #500]	; (8006c74 <HAL_DAC_ConfigChannel+0x25c>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8006a84:	2001      	movs	r0, #1
 8006a86:	f7fe fde7 	bl	8005658 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	6992      	ldr	r2, [r2, #24]
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40
 8006a94:	e01e      	b.n	8006ad4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006a96:	f7fe fdd3 	bl	8005640 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d90a      	bls.n	8006aba <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f043 0208 	orr.w	r2, r3, #8
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e0d8      	b.n	8006c6c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	dbe8      	blt.n	8006a96 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	f7fe fdc7 	bl	8005658 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	6992      	ldr	r2, [r2, #24]
 8006ad2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	ea02 0103 	and.w	r1, r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	69da      	ldr	r2, [r3, #28]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	409a      	lsls	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	21ff      	movs	r1, #255	; 0xff
 8006b10:	fa01 f303 	lsl.w	r3, r1, r3
 8006b14:	43db      	mvns	r3, r3
 8006b16:	ea02 0103 	and.w	r1, r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	409a      	lsls	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d11d      	bne.n	8006b72 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	221f      	movs	r2, #31
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2207      	movs	r2, #7
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43db      	mvns	r3, r3
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d102      	bne.n	8006b9c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
 8006b9a:	e00f      	b.n	8006bbc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d102      	bne.n	8006baa <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	e008      	b.n	8006bbc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d102      	bne.n	8006bb8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e001      	b.n	8006bbc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f003 0310 	and.w	r3, r3, #16
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6819      	ldr	r1, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfa:	43da      	mvns	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	400a      	ands	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006c16:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f003 0310 	and.w	r3, r3, #16
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	fa02 f303 	lsl.w	r3, r2, r3
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6819      	ldr	r1, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	22c0      	movs	r2, #192	; 0xc0
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	43da      	mvns	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	400a      	ands	r2, r1
 8006c5c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3720      	adds	r7, #32
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20008000 	.word	0x20008000

08006c78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006c80:	f7fe fcde 	bl	8005640 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e2dc      	b.n	800724a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d008      	beq.n	8006cae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2280      	movs	r2, #128	; 0x80
 8006ca0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e2cd      	b.n	800724a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a76      	ldr	r2, [pc, #472]	; (8006e8c <HAL_DMA_Abort+0x214>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d04a      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a74      	ldr	r2, [pc, #464]	; (8006e90 <HAL_DMA_Abort+0x218>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d045      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a73      	ldr	r2, [pc, #460]	; (8006e94 <HAL_DMA_Abort+0x21c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d040      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a71      	ldr	r2, [pc, #452]	; (8006e98 <HAL_DMA_Abort+0x220>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d03b      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a70      	ldr	r2, [pc, #448]	; (8006e9c <HAL_DMA_Abort+0x224>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d036      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a6e      	ldr	r2, [pc, #440]	; (8006ea0 <HAL_DMA_Abort+0x228>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d031      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a6d      	ldr	r2, [pc, #436]	; (8006ea4 <HAL_DMA_Abort+0x22c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d02c      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a6b      	ldr	r2, [pc, #428]	; (8006ea8 <HAL_DMA_Abort+0x230>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d027      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a6a      	ldr	r2, [pc, #424]	; (8006eac <HAL_DMA_Abort+0x234>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a68      	ldr	r2, [pc, #416]	; (8006eb0 <HAL_DMA_Abort+0x238>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01d      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a67      	ldr	r2, [pc, #412]	; (8006eb4 <HAL_DMA_Abort+0x23c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a65      	ldr	r2, [pc, #404]	; (8006eb8 <HAL_DMA_Abort+0x240>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a64      	ldr	r2, [pc, #400]	; (8006ebc <HAL_DMA_Abort+0x244>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a62      	ldr	r2, [pc, #392]	; (8006ec0 <HAL_DMA_Abort+0x248>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a61      	ldr	r2, [pc, #388]	; (8006ec4 <HAL_DMA_Abort+0x24c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a5f      	ldr	r2, [pc, #380]	; (8006ec8 <HAL_DMA_Abort+0x250>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d101      	bne.n	8006d52 <HAL_DMA_Abort+0xda>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <HAL_DMA_Abort+0xdc>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d013      	beq.n	8006d80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 021e 	bic.w	r2, r2, #30
 8006d66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e00a      	b.n	8006d96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 020e 	bic.w	r2, r2, #14
 8006d8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3c      	ldr	r2, [pc, #240]	; (8006e8c <HAL_DMA_Abort+0x214>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d072      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a3a      	ldr	r2, [pc, #232]	; (8006e90 <HAL_DMA_Abort+0x218>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d06d      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a39      	ldr	r2, [pc, #228]	; (8006e94 <HAL_DMA_Abort+0x21c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d068      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a37      	ldr	r2, [pc, #220]	; (8006e98 <HAL_DMA_Abort+0x220>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d063      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a36      	ldr	r2, [pc, #216]	; (8006e9c <HAL_DMA_Abort+0x224>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d05e      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a34      	ldr	r2, [pc, #208]	; (8006ea0 <HAL_DMA_Abort+0x228>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d059      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a33      	ldr	r2, [pc, #204]	; (8006ea4 <HAL_DMA_Abort+0x22c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d054      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a31      	ldr	r2, [pc, #196]	; (8006ea8 <HAL_DMA_Abort+0x230>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d04f      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a30      	ldr	r2, [pc, #192]	; (8006eac <HAL_DMA_Abort+0x234>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d04a      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a2e      	ldr	r2, [pc, #184]	; (8006eb0 <HAL_DMA_Abort+0x238>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d045      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a2d      	ldr	r2, [pc, #180]	; (8006eb4 <HAL_DMA_Abort+0x23c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d040      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a2b      	ldr	r2, [pc, #172]	; (8006eb8 <HAL_DMA_Abort+0x240>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d03b      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a2a      	ldr	r2, [pc, #168]	; (8006ebc <HAL_DMA_Abort+0x244>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d036      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a28      	ldr	r2, [pc, #160]	; (8006ec0 <HAL_DMA_Abort+0x248>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d031      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a27      	ldr	r2, [pc, #156]	; (8006ec4 <HAL_DMA_Abort+0x24c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d02c      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a25      	ldr	r2, [pc, #148]	; (8006ec8 <HAL_DMA_Abort+0x250>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d027      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a24      	ldr	r2, [pc, #144]	; (8006ecc <HAL_DMA_Abort+0x254>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d022      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a22      	ldr	r2, [pc, #136]	; (8006ed0 <HAL_DMA_Abort+0x258>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01d      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a21      	ldr	r2, [pc, #132]	; (8006ed4 <HAL_DMA_Abort+0x25c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d018      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a1f      	ldr	r2, [pc, #124]	; (8006ed8 <HAL_DMA_Abort+0x260>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d013      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1e      	ldr	r2, [pc, #120]	; (8006edc <HAL_DMA_Abort+0x264>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <HAL_DMA_Abort+0x268>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1b      	ldr	r2, [pc, #108]	; (8006ee4 <HAL_DMA_Abort+0x26c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a19      	ldr	r2, [pc, #100]	; (8006ee8 <HAL_DMA_Abort+0x270>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d132      	bne.n	8006eec <HAL_DMA_Abort+0x274>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e031      	b.n	8006eee <HAL_DMA_Abort+0x276>
 8006e8a:	bf00      	nop
 8006e8c:	40020010 	.word	0x40020010
 8006e90:	40020028 	.word	0x40020028
 8006e94:	40020040 	.word	0x40020040
 8006e98:	40020058 	.word	0x40020058
 8006e9c:	40020070 	.word	0x40020070
 8006ea0:	40020088 	.word	0x40020088
 8006ea4:	400200a0 	.word	0x400200a0
 8006ea8:	400200b8 	.word	0x400200b8
 8006eac:	40020410 	.word	0x40020410
 8006eb0:	40020428 	.word	0x40020428
 8006eb4:	40020440 	.word	0x40020440
 8006eb8:	40020458 	.word	0x40020458
 8006ebc:	40020470 	.word	0x40020470
 8006ec0:	40020488 	.word	0x40020488
 8006ec4:	400204a0 	.word	0x400204a0
 8006ec8:	400204b8 	.word	0x400204b8
 8006ecc:	58025408 	.word	0x58025408
 8006ed0:	5802541c 	.word	0x5802541c
 8006ed4:	58025430 	.word	0x58025430
 8006ed8:	58025444 	.word	0x58025444
 8006edc:	58025458 	.word	0x58025458
 8006ee0:	5802546c 	.word	0x5802546c
 8006ee4:	58025480 	.word	0x58025480
 8006ee8:	58025494 	.word	0x58025494
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a6d      	ldr	r2, [pc, #436]	; (80070bc <HAL_DMA_Abort+0x444>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d04a      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a6b      	ldr	r2, [pc, #428]	; (80070c0 <HAL_DMA_Abort+0x448>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a6a      	ldr	r2, [pc, #424]	; (80070c4 <HAL_DMA_Abort+0x44c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d040      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a68      	ldr	r2, [pc, #416]	; (80070c8 <HAL_DMA_Abort+0x450>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d03b      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a67      	ldr	r2, [pc, #412]	; (80070cc <HAL_DMA_Abort+0x454>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d036      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a65      	ldr	r2, [pc, #404]	; (80070d0 <HAL_DMA_Abort+0x458>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a64      	ldr	r2, [pc, #400]	; (80070d4 <HAL_DMA_Abort+0x45c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d02c      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a62      	ldr	r2, [pc, #392]	; (80070d8 <HAL_DMA_Abort+0x460>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d027      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a61      	ldr	r2, [pc, #388]	; (80070dc <HAL_DMA_Abort+0x464>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a5f      	ldr	r2, [pc, #380]	; (80070e0 <HAL_DMA_Abort+0x468>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a5e      	ldr	r2, [pc, #376]	; (80070e4 <HAL_DMA_Abort+0x46c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a5c      	ldr	r2, [pc, #368]	; (80070e8 <HAL_DMA_Abort+0x470>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a5b      	ldr	r2, [pc, #364]	; (80070ec <HAL_DMA_Abort+0x474>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a59      	ldr	r2, [pc, #356]	; (80070f0 <HAL_DMA_Abort+0x478>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a58      	ldr	r2, [pc, #352]	; (80070f4 <HAL_DMA_Abort+0x47c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a56      	ldr	r2, [pc, #344]	; (80070f8 <HAL_DMA_Abort+0x480>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d108      	bne.n	8006fb4 <HAL_DMA_Abort+0x33c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0201 	bic.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	e007      	b.n	8006fc4 <HAL_DMA_Abort+0x34c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006fc4:	e013      	b.n	8006fee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fc6:	f7fe fb3b 	bl	8005640 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b05      	cmp	r3, #5
 8006fd2:	d90c      	bls.n	8006fee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2203      	movs	r2, #3
 8006fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e12d      	b.n	800724a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e5      	bne.n	8006fc6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a2f      	ldr	r2, [pc, #188]	; (80070bc <HAL_DMA_Abort+0x444>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d04a      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a2d      	ldr	r2, [pc, #180]	; (80070c0 <HAL_DMA_Abort+0x448>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d045      	beq.n	800709a <HAL_DMA_Abort+0x422>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a2c      	ldr	r2, [pc, #176]	; (80070c4 <HAL_DMA_Abort+0x44c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d040      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a2a      	ldr	r2, [pc, #168]	; (80070c8 <HAL_DMA_Abort+0x450>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d03b      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a29      	ldr	r2, [pc, #164]	; (80070cc <HAL_DMA_Abort+0x454>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d036      	beq.n	800709a <HAL_DMA_Abort+0x422>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a27      	ldr	r2, [pc, #156]	; (80070d0 <HAL_DMA_Abort+0x458>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d031      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a26      	ldr	r2, [pc, #152]	; (80070d4 <HAL_DMA_Abort+0x45c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d02c      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a24      	ldr	r2, [pc, #144]	; (80070d8 <HAL_DMA_Abort+0x460>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d027      	beq.n	800709a <HAL_DMA_Abort+0x422>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a23      	ldr	r2, [pc, #140]	; (80070dc <HAL_DMA_Abort+0x464>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d022      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a21      	ldr	r2, [pc, #132]	; (80070e0 <HAL_DMA_Abort+0x468>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01d      	beq.n	800709a <HAL_DMA_Abort+0x422>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a20      	ldr	r2, [pc, #128]	; (80070e4 <HAL_DMA_Abort+0x46c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d018      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1e      	ldr	r2, [pc, #120]	; (80070e8 <HAL_DMA_Abort+0x470>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d013      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1d      	ldr	r2, [pc, #116]	; (80070ec <HAL_DMA_Abort+0x474>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00e      	beq.n	800709a <HAL_DMA_Abort+0x422>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <HAL_DMA_Abort+0x478>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a1a      	ldr	r2, [pc, #104]	; (80070f4 <HAL_DMA_Abort+0x47c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <HAL_DMA_Abort+0x480>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d101      	bne.n	800709e <HAL_DMA_Abort+0x426>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <HAL_DMA_Abort+0x428>
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d02b      	beq.n	80070fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	223f      	movs	r2, #63	; 0x3f
 80070b4:	409a      	lsls	r2, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	609a      	str	r2, [r3, #8]
 80070ba:	e02a      	b.n	8007112 <HAL_DMA_Abort+0x49a>
 80070bc:	40020010 	.word	0x40020010
 80070c0:	40020028 	.word	0x40020028
 80070c4:	40020040 	.word	0x40020040
 80070c8:	40020058 	.word	0x40020058
 80070cc:	40020070 	.word	0x40020070
 80070d0:	40020088 	.word	0x40020088
 80070d4:	400200a0 	.word	0x400200a0
 80070d8:	400200b8 	.word	0x400200b8
 80070dc:	40020410 	.word	0x40020410
 80070e0:	40020428 	.word	0x40020428
 80070e4:	40020440 	.word	0x40020440
 80070e8:	40020458 	.word	0x40020458
 80070ec:	40020470 	.word	0x40020470
 80070f0:	40020488 	.word	0x40020488
 80070f4:	400204a0 	.word	0x400204a0
 80070f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007100:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2201      	movs	r2, #1
 800710c:	409a      	lsls	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a4f      	ldr	r2, [pc, #316]	; (8007254 <HAL_DMA_Abort+0x5dc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d072      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a4d      	ldr	r2, [pc, #308]	; (8007258 <HAL_DMA_Abort+0x5e0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d06d      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a4c      	ldr	r2, [pc, #304]	; (800725c <HAL_DMA_Abort+0x5e4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d068      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a4a      	ldr	r2, [pc, #296]	; (8007260 <HAL_DMA_Abort+0x5e8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d063      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a49      	ldr	r2, [pc, #292]	; (8007264 <HAL_DMA_Abort+0x5ec>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d05e      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a47      	ldr	r2, [pc, #284]	; (8007268 <HAL_DMA_Abort+0x5f0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d059      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a46      	ldr	r2, [pc, #280]	; (800726c <HAL_DMA_Abort+0x5f4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d054      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a44      	ldr	r2, [pc, #272]	; (8007270 <HAL_DMA_Abort+0x5f8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d04f      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a43      	ldr	r2, [pc, #268]	; (8007274 <HAL_DMA_Abort+0x5fc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d04a      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a41      	ldr	r2, [pc, #260]	; (8007278 <HAL_DMA_Abort+0x600>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d045      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a40      	ldr	r2, [pc, #256]	; (800727c <HAL_DMA_Abort+0x604>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d040      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a3e      	ldr	r2, [pc, #248]	; (8007280 <HAL_DMA_Abort+0x608>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d03b      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a3d      	ldr	r2, [pc, #244]	; (8007284 <HAL_DMA_Abort+0x60c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d036      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a3b      	ldr	r2, [pc, #236]	; (8007288 <HAL_DMA_Abort+0x610>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d031      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a3a      	ldr	r2, [pc, #232]	; (800728c <HAL_DMA_Abort+0x614>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d02c      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a38      	ldr	r2, [pc, #224]	; (8007290 <HAL_DMA_Abort+0x618>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d027      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a37      	ldr	r2, [pc, #220]	; (8007294 <HAL_DMA_Abort+0x61c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d022      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a35      	ldr	r2, [pc, #212]	; (8007298 <HAL_DMA_Abort+0x620>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d01d      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a34      	ldr	r2, [pc, #208]	; (800729c <HAL_DMA_Abort+0x624>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d018      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a32      	ldr	r2, [pc, #200]	; (80072a0 <HAL_DMA_Abort+0x628>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a31      	ldr	r2, [pc, #196]	; (80072a4 <HAL_DMA_Abort+0x62c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00e      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2f      	ldr	r2, [pc, #188]	; (80072a8 <HAL_DMA_Abort+0x630>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2e      	ldr	r2, [pc, #184]	; (80072ac <HAL_DMA_Abort+0x634>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <HAL_DMA_Abort+0x638>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d101      	bne.n	8007206 <HAL_DMA_Abort+0x58e>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <HAL_DMA_Abort+0x590>
 8007206:	2300      	movs	r3, #0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d015      	beq.n	8007238 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007214:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00c      	beq.n	8007238 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800722c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007236:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40020010 	.word	0x40020010
 8007258:	40020028 	.word	0x40020028
 800725c:	40020040 	.word	0x40020040
 8007260:	40020058 	.word	0x40020058
 8007264:	40020070 	.word	0x40020070
 8007268:	40020088 	.word	0x40020088
 800726c:	400200a0 	.word	0x400200a0
 8007270:	400200b8 	.word	0x400200b8
 8007274:	40020410 	.word	0x40020410
 8007278:	40020428 	.word	0x40020428
 800727c:	40020440 	.word	0x40020440
 8007280:	40020458 	.word	0x40020458
 8007284:	40020470 	.word	0x40020470
 8007288:	40020488 	.word	0x40020488
 800728c:	400204a0 	.word	0x400204a0
 8007290:	400204b8 	.word	0x400204b8
 8007294:	58025408 	.word	0x58025408
 8007298:	5802541c 	.word	0x5802541c
 800729c:	58025430 	.word	0x58025430
 80072a0:	58025444 	.word	0x58025444
 80072a4:	58025458 	.word	0x58025458
 80072a8:	5802546c 	.word	0x5802546c
 80072ac:	58025480 	.word	0x58025480
 80072b0:	58025494 	.word	0x58025494

080072b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e205      	b.n	80076d2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d004      	beq.n	80072dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2280      	movs	r2, #128	; 0x80
 80072d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e1fa      	b.n	80076d2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a8c      	ldr	r2, [pc, #560]	; (8007514 <HAL_DMA_Abort_IT+0x260>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d04a      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a8b      	ldr	r2, [pc, #556]	; (8007518 <HAL_DMA_Abort_IT+0x264>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d045      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a89      	ldr	r2, [pc, #548]	; (800751c <HAL_DMA_Abort_IT+0x268>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d040      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a88      	ldr	r2, [pc, #544]	; (8007520 <HAL_DMA_Abort_IT+0x26c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d03b      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a86      	ldr	r2, [pc, #536]	; (8007524 <HAL_DMA_Abort_IT+0x270>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d036      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a85      	ldr	r2, [pc, #532]	; (8007528 <HAL_DMA_Abort_IT+0x274>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d031      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a83      	ldr	r2, [pc, #524]	; (800752c <HAL_DMA_Abort_IT+0x278>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d02c      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a82      	ldr	r2, [pc, #520]	; (8007530 <HAL_DMA_Abort_IT+0x27c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d027      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a80      	ldr	r2, [pc, #512]	; (8007534 <HAL_DMA_Abort_IT+0x280>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d022      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a7f      	ldr	r2, [pc, #508]	; (8007538 <HAL_DMA_Abort_IT+0x284>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d01d      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a7d      	ldr	r2, [pc, #500]	; (800753c <HAL_DMA_Abort_IT+0x288>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d018      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a7c      	ldr	r2, [pc, #496]	; (8007540 <HAL_DMA_Abort_IT+0x28c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a7a      	ldr	r2, [pc, #488]	; (8007544 <HAL_DMA_Abort_IT+0x290>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00e      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a79      	ldr	r2, [pc, #484]	; (8007548 <HAL_DMA_Abort_IT+0x294>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a77      	ldr	r2, [pc, #476]	; (800754c <HAL_DMA_Abort_IT+0x298>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a76      	ldr	r2, [pc, #472]	; (8007550 <HAL_DMA_Abort_IT+0x29c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d101      	bne.n	8007380 <HAL_DMA_Abort_IT+0xcc>
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <HAL_DMA_Abort_IT+0xce>
 8007380:	2300      	movs	r3, #0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d065      	beq.n	8007452 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2204      	movs	r2, #4
 800738a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a60      	ldr	r2, [pc, #384]	; (8007514 <HAL_DMA_Abort_IT+0x260>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d04a      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a5e      	ldr	r2, [pc, #376]	; (8007518 <HAL_DMA_Abort_IT+0x264>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d045      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a5d      	ldr	r2, [pc, #372]	; (800751c <HAL_DMA_Abort_IT+0x268>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d040      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a5b      	ldr	r2, [pc, #364]	; (8007520 <HAL_DMA_Abort_IT+0x26c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d03b      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a5a      	ldr	r2, [pc, #360]	; (8007524 <HAL_DMA_Abort_IT+0x270>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d036      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a58      	ldr	r2, [pc, #352]	; (8007528 <HAL_DMA_Abort_IT+0x274>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d031      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a57      	ldr	r2, [pc, #348]	; (800752c <HAL_DMA_Abort_IT+0x278>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d02c      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a55      	ldr	r2, [pc, #340]	; (8007530 <HAL_DMA_Abort_IT+0x27c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d027      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a54      	ldr	r2, [pc, #336]	; (8007534 <HAL_DMA_Abort_IT+0x280>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d022      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a52      	ldr	r2, [pc, #328]	; (8007538 <HAL_DMA_Abort_IT+0x284>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d01d      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a51      	ldr	r2, [pc, #324]	; (800753c <HAL_DMA_Abort_IT+0x288>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d018      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a4f      	ldr	r2, [pc, #316]	; (8007540 <HAL_DMA_Abort_IT+0x28c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d013      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a4e      	ldr	r2, [pc, #312]	; (8007544 <HAL_DMA_Abort_IT+0x290>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00e      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a4c      	ldr	r2, [pc, #304]	; (8007548 <HAL_DMA_Abort_IT+0x294>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d009      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a4b      	ldr	r2, [pc, #300]	; (800754c <HAL_DMA_Abort_IT+0x298>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d004      	beq.n	800742e <HAL_DMA_Abort_IT+0x17a>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a49      	ldr	r2, [pc, #292]	; (8007550 <HAL_DMA_Abort_IT+0x29c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d108      	bne.n	8007440 <HAL_DMA_Abort_IT+0x18c>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0201 	bic.w	r2, r2, #1
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e147      	b.n	80076d0 <HAL_DMA_Abort_IT+0x41c>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0201 	bic.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	e13e      	b.n	80076d0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 020e 	bic.w	r2, r2, #14
 8007460:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2b      	ldr	r2, [pc, #172]	; (8007514 <HAL_DMA_Abort_IT+0x260>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d04a      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a29      	ldr	r2, [pc, #164]	; (8007518 <HAL_DMA_Abort_IT+0x264>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d045      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a28      	ldr	r2, [pc, #160]	; (800751c <HAL_DMA_Abort_IT+0x268>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d040      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a26      	ldr	r2, [pc, #152]	; (8007520 <HAL_DMA_Abort_IT+0x26c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d03b      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a25      	ldr	r2, [pc, #148]	; (8007524 <HAL_DMA_Abort_IT+0x270>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d036      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a23      	ldr	r2, [pc, #140]	; (8007528 <HAL_DMA_Abort_IT+0x274>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d031      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a22      	ldr	r2, [pc, #136]	; (800752c <HAL_DMA_Abort_IT+0x278>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d02c      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a20      	ldr	r2, [pc, #128]	; (8007530 <HAL_DMA_Abort_IT+0x27c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d027      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a1f      	ldr	r2, [pc, #124]	; (8007534 <HAL_DMA_Abort_IT+0x280>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d022      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1d      	ldr	r2, [pc, #116]	; (8007538 <HAL_DMA_Abort_IT+0x284>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d01d      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1c      	ldr	r2, [pc, #112]	; (800753c <HAL_DMA_Abort_IT+0x288>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d018      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1a      	ldr	r2, [pc, #104]	; (8007540 <HAL_DMA_Abort_IT+0x28c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d013      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a19      	ldr	r2, [pc, #100]	; (8007544 <HAL_DMA_Abort_IT+0x290>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00e      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a17      	ldr	r2, [pc, #92]	; (8007548 <HAL_DMA_Abort_IT+0x294>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d009      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a16      	ldr	r2, [pc, #88]	; (800754c <HAL_DMA_Abort_IT+0x298>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d004      	beq.n	8007502 <HAL_DMA_Abort_IT+0x24e>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a14      	ldr	r2, [pc, #80]	; (8007550 <HAL_DMA_Abort_IT+0x29c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d128      	bne.n	8007554 <HAL_DMA_Abort_IT+0x2a0>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e027      	b.n	8007564 <HAL_DMA_Abort_IT+0x2b0>
 8007514:	40020010 	.word	0x40020010
 8007518:	40020028 	.word	0x40020028
 800751c:	40020040 	.word	0x40020040
 8007520:	40020058 	.word	0x40020058
 8007524:	40020070 	.word	0x40020070
 8007528:	40020088 	.word	0x40020088
 800752c:	400200a0 	.word	0x400200a0
 8007530:	400200b8 	.word	0x400200b8
 8007534:	40020410 	.word	0x40020410
 8007538:	40020428 	.word	0x40020428
 800753c:	40020440 	.word	0x40020440
 8007540:	40020458 	.word	0x40020458
 8007544:	40020470 	.word	0x40020470
 8007548:	40020488 	.word	0x40020488
 800754c:	400204a0 	.word	0x400204a0
 8007550:	400204b8 	.word	0x400204b8
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0201 	bic.w	r2, r2, #1
 8007562:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a5c      	ldr	r2, [pc, #368]	; (80076dc <HAL_DMA_Abort_IT+0x428>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d072      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a5b      	ldr	r2, [pc, #364]	; (80076e0 <HAL_DMA_Abort_IT+0x42c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d06d      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a59      	ldr	r2, [pc, #356]	; (80076e4 <HAL_DMA_Abort_IT+0x430>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d068      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a58      	ldr	r2, [pc, #352]	; (80076e8 <HAL_DMA_Abort_IT+0x434>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d063      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a56      	ldr	r2, [pc, #344]	; (80076ec <HAL_DMA_Abort_IT+0x438>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d05e      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a55      	ldr	r2, [pc, #340]	; (80076f0 <HAL_DMA_Abort_IT+0x43c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d059      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a53      	ldr	r2, [pc, #332]	; (80076f4 <HAL_DMA_Abort_IT+0x440>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d054      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a52      	ldr	r2, [pc, #328]	; (80076f8 <HAL_DMA_Abort_IT+0x444>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d04f      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a50      	ldr	r2, [pc, #320]	; (80076fc <HAL_DMA_Abort_IT+0x448>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d04a      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a4f      	ldr	r2, [pc, #316]	; (8007700 <HAL_DMA_Abort_IT+0x44c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d045      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a4d      	ldr	r2, [pc, #308]	; (8007704 <HAL_DMA_Abort_IT+0x450>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d040      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a4c      	ldr	r2, [pc, #304]	; (8007708 <HAL_DMA_Abort_IT+0x454>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d03b      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a4a      	ldr	r2, [pc, #296]	; (800770c <HAL_DMA_Abort_IT+0x458>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d036      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a49      	ldr	r2, [pc, #292]	; (8007710 <HAL_DMA_Abort_IT+0x45c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d031      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a47      	ldr	r2, [pc, #284]	; (8007714 <HAL_DMA_Abort_IT+0x460>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d02c      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a46      	ldr	r2, [pc, #280]	; (8007718 <HAL_DMA_Abort_IT+0x464>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d027      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a44      	ldr	r2, [pc, #272]	; (800771c <HAL_DMA_Abort_IT+0x468>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d022      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a43      	ldr	r2, [pc, #268]	; (8007720 <HAL_DMA_Abort_IT+0x46c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d01d      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a41      	ldr	r2, [pc, #260]	; (8007724 <HAL_DMA_Abort_IT+0x470>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d018      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a40      	ldr	r2, [pc, #256]	; (8007728 <HAL_DMA_Abort_IT+0x474>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d013      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a3e      	ldr	r2, [pc, #248]	; (800772c <HAL_DMA_Abort_IT+0x478>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00e      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a3d      	ldr	r2, [pc, #244]	; (8007730 <HAL_DMA_Abort_IT+0x47c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d009      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a3b      	ldr	r2, [pc, #236]	; (8007734 <HAL_DMA_Abort_IT+0x480>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <HAL_DMA_Abort_IT+0x3a0>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a3a      	ldr	r2, [pc, #232]	; (8007738 <HAL_DMA_Abort_IT+0x484>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d101      	bne.n	8007658 <HAL_DMA_Abort_IT+0x3a4>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <HAL_DMA_Abort_IT+0x3a6>
 8007658:	2300      	movs	r3, #0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d028      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800766c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007672:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2201      	movs	r2, #1
 800767e:	409a      	lsls	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800768c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00c      	beq.n	80076b0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40020010 	.word	0x40020010
 80076e0:	40020028 	.word	0x40020028
 80076e4:	40020040 	.word	0x40020040
 80076e8:	40020058 	.word	0x40020058
 80076ec:	40020070 	.word	0x40020070
 80076f0:	40020088 	.word	0x40020088
 80076f4:	400200a0 	.word	0x400200a0
 80076f8:	400200b8 	.word	0x400200b8
 80076fc:	40020410 	.word	0x40020410
 8007700:	40020428 	.word	0x40020428
 8007704:	40020440 	.word	0x40020440
 8007708:	40020458 	.word	0x40020458
 800770c:	40020470 	.word	0x40020470
 8007710:	40020488 	.word	0x40020488
 8007714:	400204a0 	.word	0x400204a0
 8007718:	400204b8 	.word	0x400204b8
 800771c:	58025408 	.word	0x58025408
 8007720:	5802541c 	.word	0x5802541c
 8007724:	58025430 	.word	0x58025430
 8007728:	58025444 	.word	0x58025444
 800772c:	58025458 	.word	0x58025458
 8007730:	5802546c 	.word	0x5802546c
 8007734:	58025480 	.word	0x58025480
 8007738:	58025494 	.word	0x58025494

0800773c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800773c:	b480      	push	{r7}
 800773e:	b089      	sub	sp, #36	; 0x24
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800774a:	4b89      	ldr	r3, [pc, #548]	; (8007970 <HAL_GPIO_Init+0x234>)
 800774c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800774e:	e194      	b.n	8007a7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	2101      	movs	r1, #1
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	fa01 f303 	lsl.w	r3, r1, r3
 800775c:	4013      	ands	r3, r2
 800775e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 8186 	beq.w	8007a74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d00b      	beq.n	8007788 <HAL_GPIO_Init+0x4c>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d007      	beq.n	8007788 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800777c:	2b11      	cmp	r3, #17
 800777e:	d003      	beq.n	8007788 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b12      	cmp	r3, #18
 8007786:	d130      	bne.n	80077ea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	2203      	movs	r2, #3
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	43db      	mvns	r3, r3
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	4013      	ands	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80077be:	2201      	movs	r2, #1
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	43db      	mvns	r3, r3
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	4013      	ands	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	091b      	lsrs	r3, r3, #4
 80077d4:	f003 0201 	and.w	r2, r3, #1
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	fa02 f303 	lsl.w	r3, r2, r3
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	2203      	movs	r2, #3
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	43db      	mvns	r3, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4013      	ands	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	4313      	orrs	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d003      	beq.n	800782a <HAL_GPIO_Init+0xee>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b12      	cmp	r3, #18
 8007828:	d123      	bne.n	8007872 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	08da      	lsrs	r2, r3, #3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	3208      	adds	r2, #8
 8007832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	220f      	movs	r2, #15
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	43db      	mvns	r3, r3
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	4013      	ands	r3, r2
 800784c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	691a      	ldr	r2, [r3, #16]
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	fa02 f303 	lsl.w	r3, r2, r3
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	4313      	orrs	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	08da      	lsrs	r2, r3, #3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3208      	adds	r2, #8
 800786c:	69b9      	ldr	r1, [r7, #24]
 800786e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	2203      	movs	r2, #3
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	43db      	mvns	r3, r3
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	4013      	ands	r3, r2
 8007888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f003 0203 	and.w	r2, r3, #3
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	4313      	orrs	r3, r2
 800789e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 80e0 	beq.w	8007a74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078b4:	4b2f      	ldr	r3, [pc, #188]	; (8007974 <HAL_GPIO_Init+0x238>)
 80078b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078ba:	4a2e      	ldr	r2, [pc, #184]	; (8007974 <HAL_GPIO_Init+0x238>)
 80078bc:	f043 0302 	orr.w	r3, r3, #2
 80078c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80078c4:	4b2b      	ldr	r3, [pc, #172]	; (8007974 <HAL_GPIO_Init+0x238>)
 80078c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078d2:	4a29      	ldr	r2, [pc, #164]	; (8007978 <HAL_GPIO_Init+0x23c>)
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	089b      	lsrs	r3, r3, #2
 80078d8:	3302      	adds	r3, #2
 80078da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f003 0303 	and.w	r3, r3, #3
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	220f      	movs	r2, #15
 80078ea:	fa02 f303 	lsl.w	r3, r2, r3
 80078ee:	43db      	mvns	r3, r3
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	4013      	ands	r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a20      	ldr	r2, [pc, #128]	; (800797c <HAL_GPIO_Init+0x240>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d052      	beq.n	80079a4 <HAL_GPIO_Init+0x268>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a1f      	ldr	r2, [pc, #124]	; (8007980 <HAL_GPIO_Init+0x244>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d031      	beq.n	800796a <HAL_GPIO_Init+0x22e>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a1e      	ldr	r2, [pc, #120]	; (8007984 <HAL_GPIO_Init+0x248>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d02b      	beq.n	8007966 <HAL_GPIO_Init+0x22a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a1d      	ldr	r2, [pc, #116]	; (8007988 <HAL_GPIO_Init+0x24c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d025      	beq.n	8007962 <HAL_GPIO_Init+0x226>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a1c      	ldr	r2, [pc, #112]	; (800798c <HAL_GPIO_Init+0x250>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d01f      	beq.n	800795e <HAL_GPIO_Init+0x222>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <HAL_GPIO_Init+0x254>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d019      	beq.n	800795a <HAL_GPIO_Init+0x21e>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1a      	ldr	r2, [pc, #104]	; (8007994 <HAL_GPIO_Init+0x258>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d013      	beq.n	8007956 <HAL_GPIO_Init+0x21a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a19      	ldr	r2, [pc, #100]	; (8007998 <HAL_GPIO_Init+0x25c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d00d      	beq.n	8007952 <HAL_GPIO_Init+0x216>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a18      	ldr	r2, [pc, #96]	; (800799c <HAL_GPIO_Init+0x260>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d007      	beq.n	800794e <HAL_GPIO_Init+0x212>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a17      	ldr	r2, [pc, #92]	; (80079a0 <HAL_GPIO_Init+0x264>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d101      	bne.n	800794a <HAL_GPIO_Init+0x20e>
 8007946:	2309      	movs	r3, #9
 8007948:	e02d      	b.n	80079a6 <HAL_GPIO_Init+0x26a>
 800794a:	230a      	movs	r3, #10
 800794c:	e02b      	b.n	80079a6 <HAL_GPIO_Init+0x26a>
 800794e:	2308      	movs	r3, #8
 8007950:	e029      	b.n	80079a6 <HAL_GPIO_Init+0x26a>
 8007952:	2307      	movs	r3, #7
 8007954:	e027      	b.n	80079a6 <HAL_GPIO_Init+0x26a>
 8007956:	2306      	movs	r3, #6
 8007958:	e025      	b.n	80079a6 <HAL_GPIO_Init+0x26a>
 800795a:	2305      	movs	r3, #5
 800795c:	e023      	b.n	80079a6 <HAL_GPIO_Init+0x26a>
 800795e:	2304      	movs	r3, #4
 8007960:	e021      	b.n	80079a6 <HAL_GPIO_Init+0x26a>
 8007962:	2303      	movs	r3, #3
 8007964:	e01f      	b.n	80079a6 <HAL_GPIO_Init+0x26a>
 8007966:	2302      	movs	r3, #2
 8007968:	e01d      	b.n	80079a6 <HAL_GPIO_Init+0x26a>
 800796a:	2301      	movs	r3, #1
 800796c:	e01b      	b.n	80079a6 <HAL_GPIO_Init+0x26a>
 800796e:	bf00      	nop
 8007970:	58000080 	.word	0x58000080
 8007974:	58024400 	.word	0x58024400
 8007978:	58000400 	.word	0x58000400
 800797c:	58020000 	.word	0x58020000
 8007980:	58020400 	.word	0x58020400
 8007984:	58020800 	.word	0x58020800
 8007988:	58020c00 	.word	0x58020c00
 800798c:	58021000 	.word	0x58021000
 8007990:	58021400 	.word	0x58021400
 8007994:	58021800 	.word	0x58021800
 8007998:	58021c00 	.word	0x58021c00
 800799c:	58022000 	.word	0x58022000
 80079a0:	58022400 	.word	0x58022400
 80079a4:	2300      	movs	r3, #0
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	f002 0203 	and.w	r2, r2, #3
 80079ac:	0092      	lsls	r2, r2, #2
 80079ae:	4093      	lsls	r3, r2
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079b6:	4938      	ldr	r1, [pc, #224]	; (8007a98 <HAL_GPIO_Init+0x35c>)
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	089b      	lsrs	r3, r3, #2
 80079bc:	3302      	adds	r3, #2
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	43db      	mvns	r3, r3
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	4013      	ands	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	43db      	mvns	r3, r3
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	4013      	ands	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	43db      	mvns	r3, r3
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	4013      	ands	r3, r2
 8007a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	43db      	mvns	r3, r3
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	4013      	ands	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	3301      	adds	r3, #1
 8007a78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	fa22 f303 	lsr.w	r3, r2, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f47f ae63 	bne.w	8007750 <HAL_GPIO_Init+0x14>
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	3724      	adds	r7, #36	; 0x24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	58000400 	.word	0x58000400

08007a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	887b      	ldrh	r3, [r7, #2]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
 8007ab8:	e001      	b.n	8007abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	807b      	strh	r3, [r7, #2]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007adc:	787b      	ldrb	r3, [r7, #1]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ae2:	887a      	ldrh	r2, [r7, #2]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ae8:	e003      	b.n	8007af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007aea:	887b      	ldrh	r3, [r7, #2]
 8007aec:	041a      	lsls	r2, r3, #16
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	619a      	str	r2, [r3, #24]
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b085      	sub	sp, #20
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	460b      	mov	r3, r1
 8007b08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b10:	887a      	ldrh	r2, [r7, #2]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	4013      	ands	r3, r2
 8007b16:	041a      	lsls	r2, r3, #16
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	43d9      	mvns	r1, r3
 8007b1c:	887b      	ldrh	r3, [r7, #2]
 8007b1e:	400b      	ands	r3, r1
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	619a      	str	r2, [r3, #24]
}
 8007b26:	bf00      	nop
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
	...

08007b34 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b42:	4a0c      	ldr	r2, [pc, #48]	; (8007b74 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007b44:	f043 0302 	orr.w	r3, r3, #2
 8007b48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b4c:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8007b5a:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	4906      	ldr	r1, [pc, #24]	; (8007b78 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	604b      	str	r3, [r1, #4]
}
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	58024400 	.word	0x58024400
 8007b78:	58000400 	.word	0x58000400

08007b7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b7e:	b08f      	sub	sp, #60	; 0x3c
 8007b80:	af0a      	add	r7, sp, #40	; 0x28
 8007b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e116      	b.n	8007dbc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d106      	bne.n	8007bae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f00e f8cf 	bl	8015d4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f009 fc3c 	bl	801144a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	687e      	ldr	r6, [r7, #4]
 8007bda:	466d      	mov	r5, sp
 8007bdc:	f106 0410 	add.w	r4, r6, #16
 8007be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007be8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007bec:	e885 0003 	stmia.w	r5, {r0, r1}
 8007bf0:	1d33      	adds	r3, r6, #4
 8007bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bf4:	6838      	ldr	r0, [r7, #0]
 8007bf6:	f009 fb07 	bl	8011208 <USB_CoreInit>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e0d7      	b.n	8007dbc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f009 fc2a 	bl	801146c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
 8007c1c:	e04a      	b.n	8007cb4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007c1e:	7bfa      	ldrb	r2, [r7, #15]
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	1a9b      	subs	r3, r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	333d      	adds	r3, #61	; 0x3d
 8007c2e:	2201      	movs	r2, #1
 8007c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007c32:	7bfa      	ldrb	r2, [r7, #15]
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	1a9b      	subs	r3, r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	333c      	adds	r3, #60	; 0x3c
 8007c42:	7bfa      	ldrb	r2, [r7, #15]
 8007c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007c46:	7bfa      	ldrb	r2, [r7, #15]
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	b298      	uxth	r0, r3
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	3342      	adds	r3, #66	; 0x42
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007c5e:	7bfa      	ldrb	r2, [r7, #15]
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	333f      	adds	r3, #63	; 0x3f
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007c72:	7bfa      	ldrb	r2, [r7, #15]
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	4613      	mov	r3, r2
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	440b      	add	r3, r1
 8007c80:	3344      	adds	r3, #68	; 0x44
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007c86:	7bfa      	ldrb	r2, [r7, #15]
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	1a9b      	subs	r3, r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	3348      	adds	r3, #72	; 0x48
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007c9a:	7bfa      	ldrb	r2, [r7, #15]
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	1a9b      	subs	r3, r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	3350      	adds	r3, #80	; 0x50
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	7bfa      	ldrb	r2, [r7, #15]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d3af      	bcc.n	8007c1e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	73fb      	strb	r3, [r7, #15]
 8007cc2:	e044      	b.n	8007d4e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007cc4:	7bfa      	ldrb	r2, [r7, #15]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007cda:	7bfa      	ldrb	r2, [r7, #15]
 8007cdc:	6879      	ldr	r1, [r7, #4]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007cec:	7bfa      	ldrb	r2, [r7, #15]
 8007cee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007cf0:	7bfa      	ldrb	r2, [r7, #15]
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007d02:	2200      	movs	r2, #0
 8007d04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007d06:	7bfa      	ldrb	r2, [r7, #15]
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007d1c:	7bfa      	ldrb	r2, [r7, #15]
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	4613      	mov	r3, r2
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	440b      	add	r3, r1
 8007d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007d32:	7bfa      	ldrb	r2, [r7, #15]
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	73fb      	strb	r3, [r7, #15]
 8007d4e:	7bfa      	ldrb	r2, [r7, #15]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d3b5      	bcc.n	8007cc4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	687e      	ldr	r6, [r7, #4]
 8007d60:	466d      	mov	r5, sp
 8007d62:	f106 0410 	add.w	r4, r6, #16
 8007d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8007d76:	1d33      	adds	r3, r6, #4
 8007d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d7a:	6838      	ldr	r0, [r7, #0]
 8007d7c:	f009 fba0 	bl	80114c0 <USB_DevInit>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d005      	beq.n	8007d92 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e014      	b.n	8007dbc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d102      	bne.n	8007db0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 f892 	bl	8008ed4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f00a fc20 	bl	80125fa <USB_DevDisconnect>

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dc4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_PCD_Start+0x1c>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e020      	b.n	8007e22 <HAL_PCD_Start+0x5e>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d109      	bne.n	8007e04 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d005      	beq.n	8007e04 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f009 fb0d 	bl	8011428 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f00a fbd0 	bl	80125b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007e2a:	b590      	push	{r4, r7, lr}
 8007e2c:	b08d      	sub	sp, #52	; 0x34
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f00a fc8e 	bl	8012762 <USB_GetMode>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f040 83ca 	bne.w	80085e2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f00a fbf2 	bl	801263c <USB_ReadInterrupts>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 83c0 	beq.w	80085e0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f00a fbe9 	bl	801263c <USB_ReadInterrupts>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d107      	bne.n	8007e84 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695a      	ldr	r2, [r3, #20]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f002 0202 	and.w	r2, r2, #2
 8007e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f00a fbd7 	bl	801263c <USB_ReadInterrupts>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f003 0310 	and.w	r3, r3, #16
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d161      	bne.n	8007f5c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0210 	bic.w	r2, r2, #16
 8007ea6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	f003 020f 	and.w	r2, r3, #15
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	1a9b      	subs	r3, r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	0c5b      	lsrs	r3, r3, #17
 8007ecc:	f003 030f 	and.w	r3, r3, #15
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d124      	bne.n	8007f1e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007eda:	4013      	ands	r3, r2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d035      	beq.n	8007f4c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	091b      	lsrs	r3, r3, #4
 8007ee8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	6a38      	ldr	r0, [r7, #32]
 8007ef4:	f00a fa0e 	bl	8012314 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	091b      	lsrs	r3, r3, #4
 8007f00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f04:	441a      	add	r2, r3
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	091b      	lsrs	r3, r3, #4
 8007f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f16:	441a      	add	r2, r3
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	619a      	str	r2, [r3, #24]
 8007f1c:	e016      	b.n	8007f4c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	0c5b      	lsrs	r3, r3, #17
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	2b06      	cmp	r3, #6
 8007f28:	d110      	bne.n	8007f4c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f30:	2208      	movs	r2, #8
 8007f32:	4619      	mov	r1, r3
 8007f34:	6a38      	ldr	r0, [r7, #32]
 8007f36:	f00a f9ed 	bl	8012314 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	091b      	lsrs	r3, r3, #4
 8007f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f46:	441a      	add	r2, r3
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699a      	ldr	r2, [r3, #24]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0210 	orr.w	r2, r2, #16
 8007f5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f00a fb6b 	bl	801263c <USB_ReadInterrupts>
 8007f66:	4603      	mov	r3, r0
 8007f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f70:	d16e      	bne.n	8008050 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f00a fb71 	bl	8012662 <USB_ReadDevAllOutEpInterrupt>
 8007f80:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007f82:	e062      	b.n	800804a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d057      	beq.n	800803e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f00a fb96 	bl	80126ca <USB_ReadDevOutEPInterrupt>
 8007f9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00c      	beq.n	8007fc4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	2301      	movs	r3, #1
 8007fba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fdde 	bl	8008b80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f003 0308 	and.w	r3, r3, #8
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00c      	beq.n	8007fe8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fda:	461a      	mov	r2, r3
 8007fdc:	2308      	movs	r3, #8
 8007fde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fed8 	bl	8008d98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f003 0310 	and.w	r3, r3, #16
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d008      	beq.n	8008004 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffe:	461a      	mov	r2, r3
 8008000:	2310      	movs	r3, #16
 8008002:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b00      	cmp	r3, #0
 800800c:	d008      	beq.n	8008020 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801a:	461a      	mov	r2, r3
 800801c:	2320      	movs	r3, #32
 800801e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d009      	beq.n	800803e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008036:	461a      	mov	r2, r3
 8008038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800803c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	3301      	adds	r3, #1
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008046:	085b      	lsrs	r3, r3, #1
 8008048:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	2b00      	cmp	r3, #0
 800804e:	d199      	bne.n	8007f84 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4618      	mov	r0, r3
 8008056:	f00a faf1 	bl	801263c <USB_ReadInterrupts>
 800805a:	4603      	mov	r3, r0
 800805c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008064:	f040 80c0 	bne.w	80081e8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4618      	mov	r0, r3
 800806e:	f00a fb12 	bl	8012696 <USB_ReadDevAllInEpInterrupt>
 8008072:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008078:	e0b2      	b.n	80081e0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80a7 	beq.w	80081d4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808c:	b2d2      	uxtb	r2, r2
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f00a fb38 	bl	8012706 <USB_ReadDevInEPInterrupt>
 8008096:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d057      	beq.n	8008152 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	2201      	movs	r2, #1
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	43db      	mvns	r3, r3
 80080bc:	69f9      	ldr	r1, [r7, #28]
 80080be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080c2:	4013      	ands	r3, r2
 80080c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d2:	461a      	mov	r2, r3
 80080d4:	2301      	movs	r3, #1
 80080d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d132      	bne.n	8008146 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e4:	4613      	mov	r3, r2
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	3348      	adds	r3, #72	; 0x48
 80080f0:	6819      	ldr	r1, [r3, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f6:	4613      	mov	r3, r2
 80080f8:	00db      	lsls	r3, r3, #3
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4403      	add	r3, r0
 8008100:	3344      	adds	r3, #68	; 0x44
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4419      	add	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810a:	4613      	mov	r3, r2
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	1a9b      	subs	r3, r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4403      	add	r3, r0
 8008114:	3348      	adds	r3, #72	; 0x48
 8008116:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	2b00      	cmp	r3, #0
 800811c:	d113      	bne.n	8008146 <HAL_PCD_IRQHandler+0x31c>
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008122:	4613      	mov	r3, r2
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	3350      	adds	r3, #80	; 0x50
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d108      	bne.n	8008146 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800813e:	461a      	mov	r2, r3
 8008140:	2101      	movs	r1, #1
 8008142:	f00a fb41 	bl	80127c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	b2db      	uxtb	r3, r3
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f00d fe7e 	bl	8015e4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b00      	cmp	r3, #0
 800815a:	d008      	beq.n	800816e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008168:	461a      	mov	r2, r3
 800816a:	2308      	movs	r3, #8
 800816c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f003 0310 	and.w	r3, r3, #16
 8008174:	2b00      	cmp	r3, #0
 8008176:	d008      	beq.n	800818a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008184:	461a      	mov	r2, r3
 8008186:	2310      	movs	r3, #16
 8008188:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008190:	2b00      	cmp	r3, #0
 8008192:	d008      	beq.n	80081a6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a0:	461a      	mov	r2, r3
 80081a2:	2340      	movs	r3, #64	; 0x40
 80081a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d008      	beq.n	80081c2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081bc:	461a      	mov	r2, r3
 80081be:	2302      	movs	r3, #2
 80081c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80081cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fc48 	bl	8008a64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	3301      	adds	r3, #1
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80081da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f47f af49 	bne.w	800807a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f00a fa25 	bl	801263c <USB_ReadInterrupts>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081fc:	d122      	bne.n	8008244 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800820c:	f023 0301 	bic.w	r3, r3, #1
 8008210:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008218:	2b01      	cmp	r3, #1
 800821a:	d108      	bne.n	800822e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008224:	2100      	movs	r1, #0
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fe78 	bl	8008f1c <HAL_PCDEx_LPM_Callback>
 800822c:	e002      	b.n	8008234 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f00d fe84 	bl	8015f3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695a      	ldr	r2, [r3, #20]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f00a f9f7 	bl	801263c <USB_ReadInterrupts>
 800824e:	4603      	mov	r3, r0
 8008250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008258:	d112      	bne.n	8008280 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b01      	cmp	r3, #1
 8008268:	d102      	bne.n	8008270 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f00d fe40 	bl	8015ef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695a      	ldr	r2, [r3, #20]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800827e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f00a f9d9 	bl	801263c <USB_ReadInterrupts>
 800828a:	4603      	mov	r3, r0
 800828c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008294:	d121      	bne.n	80082da <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695a      	ldr	r2, [r3, #20]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80082a4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d111      	bne.n	80082d4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082be:	089b      	lsrs	r3, r3, #2
 80082c0:	f003 020f 	and.w	r2, r3, #15
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80082ca:	2101      	movs	r1, #1
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fe25 	bl	8008f1c <HAL_PCDEx_LPM_Callback>
 80082d2:	e002      	b.n	80082da <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f00d fe0b 	bl	8015ef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f00a f9ac 	bl	801263c <USB_ReadInterrupts>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ee:	f040 80c7 	bne.w	8008480 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	69fa      	ldr	r2, [r7, #28]
 80082fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2110      	movs	r1, #16
 800830c:	4618      	mov	r0, r3
 800830e:	f009 fa35 	bl	801177c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008312:	2300      	movs	r3, #0
 8008314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008316:	e056      	b.n	80083c6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008324:	461a      	mov	r2, r3
 8008326:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800832a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	440a      	add	r2, r1
 8008342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800834a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800835c:	0151      	lsls	r1, r2, #5
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	440a      	add	r2, r1
 8008362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008366:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800836a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008378:	461a      	mov	r2, r3
 800837a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800837e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	4413      	add	r3, r2
 8008388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008390:	0151      	lsls	r1, r2, #5
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	440a      	add	r2, r1
 8008396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800839a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800839e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	3301      	adds	r3, #1
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d3a3      	bcc.n	8008318 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	69fa      	ldr	r2, [r7, #28]
 80083da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80083e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d016      	beq.n	800841a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f6:	69fa      	ldr	r2, [r7, #28]
 80083f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083fc:	f043 030b 	orr.w	r3, r3, #11
 8008400:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840c:	69fa      	ldr	r2, [r7, #28]
 800840e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008412:	f043 030b 	orr.w	r3, r3, #11
 8008416:	6453      	str	r3, [r2, #68]	; 0x44
 8008418:	e015      	b.n	8008446 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008420:	695a      	ldr	r2, [r3, #20]
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008428:	4619      	mov	r1, r3
 800842a:	f242 032b 	movw	r3, #8235	; 0x202b
 800842e:	4313      	orrs	r3, r2
 8008430:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008440:	f043 030b 	orr.w	r3, r3, #11
 8008444:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69fa      	ldr	r2, [r7, #28]
 8008450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008454:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008458:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800846a:	461a      	mov	r2, r3
 800846c:	f00a f9ac 	bl	80127c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	695a      	ldr	r2, [r3, #20]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800847e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f00a f8d9 	bl	801263c <USB_ReadInterrupts>
 800848a:	4603      	mov	r3, r0
 800848c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008494:	d124      	bne.n	80084e0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f00a f970 	bl	8012780 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f009 f9ca 	bl	801183e <USB_GetDevSpeed>
 80084aa:	4603      	mov	r3, r0
 80084ac:	461a      	mov	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681c      	ldr	r4, [r3, #0]
 80084b6:	f002 f91b 	bl	800a6f0 <HAL_RCC_GetHCLKFreq>
 80084ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	4620      	mov	r0, r4
 80084c6:	f008 ff0d 	bl	80112e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f00d fce7 	bl	8015e9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695a      	ldr	r2, [r3, #20]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80084de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f00a f8a9 	bl	801263c <USB_ReadInterrupts>
 80084ea:	4603      	mov	r3, r0
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d10a      	bne.n	800850a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f00d fcc4 	bl	8015e82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695a      	ldr	r2, [r3, #20]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f002 0208 	and.w	r2, r2, #8
 8008508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f00a f894 	bl	801263c <USB_ReadInterrupts>
 8008514:	4603      	mov	r3, r0
 8008516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800851a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800851e:	d10f      	bne.n	8008540 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	b2db      	uxtb	r3, r3
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f00d fd26 	bl	8015f7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	695a      	ldr	r2, [r3, #20]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800853e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4618      	mov	r0, r3
 8008546:	f00a f879 	bl	801263c <USB_ReadInterrupts>
 800854a:	4603      	mov	r3, r0
 800854c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008550:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008554:	d10f      	bne.n	8008576 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	b2db      	uxtb	r3, r3
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f00d fcf9 	bl	8015f58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	695a      	ldr	r2, [r3, #20]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	f00a f85e 	bl	801263c <USB_ReadInterrupts>
 8008580:	4603      	mov	r3, r0
 8008582:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858a:	d10a      	bne.n	80085a2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f00d fd07 	bl	8015fa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80085a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f00a f848 	bl	801263c <USB_ReadInterrupts>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f003 0304 	and.w	r3, r3, #4
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	d115      	bne.n	80085e2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f00d fcf7 	bl	8015fbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6859      	ldr	r1, [r3, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	e000      	b.n	80085e2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80085e0:	bf00      	nop
    }
  }
}
 80085e2:	3734      	adds	r7, #52	; 0x34
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd90      	pop	{r4, r7, pc}

080085e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_PCD_SetAddress+0x1a>
 80085fe:	2302      	movs	r3, #2
 8008600:	e013      	b.n	800862a <HAL_PCD_SetAddress+0x42>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	78fa      	ldrb	r2, [r7, #3]
 800860e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	78fa      	ldrb	r2, [r7, #3]
 8008618:	4611      	mov	r1, r2
 800861a:	4618      	mov	r0, r3
 800861c:	f009 ffa6 	bl	801256c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	4608      	mov	r0, r1
 800863c:	4611      	mov	r1, r2
 800863e:	461a      	mov	r2, r3
 8008640:	4603      	mov	r3, r0
 8008642:	70fb      	strb	r3, [r7, #3]
 8008644:	460b      	mov	r3, r1
 8008646:	803b      	strh	r3, [r7, #0]
 8008648:	4613      	mov	r3, r2
 800864a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008654:	2b00      	cmp	r3, #0
 8008656:	da0f      	bge.n	8008678 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	f003 020f 	and.w	r2, r3, #15
 800865e:	4613      	mov	r3, r2
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	3338      	adds	r3, #56	; 0x38
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	4413      	add	r3, r2
 800866c:	3304      	adds	r3, #4
 800866e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	705a      	strb	r2, [r3, #1]
 8008676:	e00f      	b.n	8008698 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	f003 020f 	and.w	r2, r3, #15
 800867e:	4613      	mov	r3, r2
 8008680:	00db      	lsls	r3, r3, #3
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	4413      	add	r3, r2
 800868e:	3304      	adds	r3, #4
 8008690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80086a4:	883a      	ldrh	r2, [r7, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	78ba      	ldrb	r2, [r7, #2]
 80086ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b29a      	uxth	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80086c2:	78bb      	ldrb	r3, [r7, #2]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d102      	bne.n	80086ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_PCD_EP_Open+0xaa>
 80086d8:	2302      	movs	r3, #2
 80086da:	e00e      	b.n	80086fa <HAL_PCD_EP_Open+0xc8>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68f9      	ldr	r1, [r7, #12]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f009 f8cc 	bl	8011888 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80086f8:	7afb      	ldrb	r3, [r7, #11]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800870e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008712:	2b00      	cmp	r3, #0
 8008714:	da0f      	bge.n	8008736 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	f003 020f 	and.w	r2, r3, #15
 800871c:	4613      	mov	r3, r2
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	1a9b      	subs	r3, r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	3338      	adds	r3, #56	; 0x38
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	4413      	add	r3, r2
 800872a:	3304      	adds	r3, #4
 800872c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2201      	movs	r2, #1
 8008732:	705a      	strb	r2, [r3, #1]
 8008734:	e00f      	b.n	8008756 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008736:	78fb      	ldrb	r3, [r7, #3]
 8008738:	f003 020f 	and.w	r2, r3, #15
 800873c:	4613      	mov	r3, r2
 800873e:	00db      	lsls	r3, r3, #3
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	4413      	add	r3, r2
 800874c:	3304      	adds	r3, #4
 800874e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	f003 030f 	and.w	r3, r3, #15
 800875c:	b2da      	uxtb	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_PCD_EP_Close+0x6e>
 800876c:	2302      	movs	r3, #2
 800876e:	e00e      	b.n	800878e <HAL_PCD_EP_Close+0x8c>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68f9      	ldr	r1, [r7, #12]
 800877e:	4618      	mov	r0, r3
 8008780:	f009 f90a 	bl	8011998 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b086      	sub	sp, #24
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
 80087a2:	460b      	mov	r3, r1
 80087a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	f003 020f 	and.w	r2, r3, #15
 80087ac:	4613      	mov	r3, r2
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	1a9b      	subs	r3, r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4413      	add	r3, r2
 80087bc:	3304      	adds	r3, #4
 80087be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2200      	movs	r2, #0
 80087d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2200      	movs	r2, #0
 80087d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d102      	bne.n	80087f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80087f2:	7afb      	ldrb	r3, [r7, #11]
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d109      	bne.n	8008810 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	b2db      	uxtb	r3, r3
 8008806:	461a      	mov	r2, r3
 8008808:	6979      	ldr	r1, [r7, #20]
 800880a:	f009 fbed 	bl	8011fe8 <USB_EP0StartXfer>
 800880e:	e008      	b.n	8008822 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	461a      	mov	r2, r3
 800881c:	6979      	ldr	r1, [r7, #20]
 800881e:	f009 f997 	bl	8011b50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	f003 020f 	and.w	r2, r3, #15
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800884e:	681b      	ldr	r3, [r3, #0]
}
 8008850:	4618      	mov	r0, r3
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	460b      	mov	r3, r1
 800886a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800886c:	7afb      	ldrb	r3, [r7, #11]
 800886e:	f003 020f 	and.w	r2, r3, #15
 8008872:	4613      	mov	r3, r2
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	1a9b      	subs	r3, r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	3338      	adds	r3, #56	; 0x38
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	3304      	adds	r3, #4
 8008882:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2200      	movs	r2, #0
 8008894:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2201      	movs	r2, #1
 800889a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800889c:	7afb      	ldrb	r3, [r7, #11]
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d102      	bne.n	80088b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088b6:	7afb      	ldrb	r3, [r7, #11]
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	6979      	ldr	r1, [r7, #20]
 80088ce:	f009 fb8b 	bl	8011fe8 <USB_EP0StartXfer>
 80088d2:	e008      	b.n	80088e6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	461a      	mov	r2, r3
 80088e0:	6979      	ldr	r1, [r7, #20]
 80088e2:	f009 f935 	bl	8011b50 <USB_EPStartXfer>
  }

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	460b      	mov	r3, r1
 80088fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	f003 020f 	and.w	r2, r3, #15
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d901      	bls.n	800890e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e050      	b.n	80089b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800890e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008912:	2b00      	cmp	r3, #0
 8008914:	da0f      	bge.n	8008936 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	f003 020f 	and.w	r2, r3, #15
 800891c:	4613      	mov	r3, r2
 800891e:	00db      	lsls	r3, r3, #3
 8008920:	1a9b      	subs	r3, r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	3338      	adds	r3, #56	; 0x38
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	4413      	add	r3, r2
 800892a:	3304      	adds	r3, #4
 800892c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2201      	movs	r2, #1
 8008932:	705a      	strb	r2, [r3, #1]
 8008934:	e00d      	b.n	8008952 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008936:	78fa      	ldrb	r2, [r7, #3]
 8008938:	4613      	mov	r3, r2
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	4413      	add	r3, r2
 8008948:	3304      	adds	r3, #4
 800894a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2201      	movs	r2, #1
 8008956:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	f003 030f 	and.w	r3, r3, #15
 800895e:	b2da      	uxtb	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800896a:	2b01      	cmp	r3, #1
 800896c:	d101      	bne.n	8008972 <HAL_PCD_EP_SetStall+0x82>
 800896e:	2302      	movs	r3, #2
 8008970:	e01e      	b.n	80089b0 <HAL_PCD_EP_SetStall+0xc0>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68f9      	ldr	r1, [r7, #12]
 8008980:	4618      	mov	r0, r3
 8008982:	f009 fd1f 	bl	80123c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10a      	bne.n	80089a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6818      	ldr	r0, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	b2d9      	uxtb	r1, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80089a0:	461a      	mov	r2, r3
 80089a2:	f009 ff11 	bl	80127c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	f003 020f 	and.w	r2, r3, #15
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d901      	bls.n	80089d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e042      	b.n	8008a5c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80089d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	da0f      	bge.n	80089fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	f003 020f 	and.w	r2, r3, #15
 80089e4:	4613      	mov	r3, r2
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	1a9b      	subs	r3, r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	3338      	adds	r3, #56	; 0x38
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	4413      	add	r3, r2
 80089f2:	3304      	adds	r3, #4
 80089f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	705a      	strb	r2, [r3, #1]
 80089fc:	e00f      	b.n	8008a1e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	f003 020f 	and.w	r2, r3, #15
 8008a04:	4613      	mov	r3, r2
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	1a9b      	subs	r3, r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	4413      	add	r3, r2
 8008a14:	3304      	adds	r3, #4
 8008a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	f003 030f 	and.w	r3, r3, #15
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <HAL_PCD_EP_ClrStall+0x86>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e00e      	b.n	8008a5c <HAL_PCD_EP_ClrStall+0xa4>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68f9      	ldr	r1, [r7, #12]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f009 fd27 	bl	80124a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08a      	sub	sp, #40	; 0x28
 8008a68:	af02      	add	r7, sp, #8
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	3338      	adds	r3, #56	; 0x38
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	4413      	add	r3, r2
 8008a88:	3304      	adds	r3, #4
 8008a8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	699a      	ldr	r2, [r3, #24]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d901      	bls.n	8008a9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e06c      	b.n	8008b76 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	695a      	ldr	r2, [r3, #20]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d902      	bls.n	8008ab8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	3303      	adds	r3, #3
 8008abc:	089b      	lsrs	r3, r3, #2
 8008abe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ac0:	e02b      	b.n	8008b1a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	695a      	ldr	r2, [r3, #20]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	69fa      	ldr	r2, [r7, #28]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d902      	bls.n	8008ade <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3303      	adds	r3, #3
 8008ae2:	089b      	lsrs	r3, r3, #2
 8008ae4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	68d9      	ldr	r1, [r3, #12]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	4603      	mov	r3, r0
 8008afc:	6978      	ldr	r0, [r7, #20]
 8008afe:	f009 fbcb 	bl	8012298 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	441a      	add	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	699a      	ldr	r2, [r3, #24]
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	441a      	add	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d809      	bhi.n	8008b44 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	699a      	ldr	r2, [r3, #24]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d203      	bcs.n	8008b44 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1be      	bne.n	8008ac2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	695a      	ldr	r2, [r3, #20]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d811      	bhi.n	8008b74 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f003 030f 	and.w	r3, r3, #15
 8008b56:	2201      	movs	r2, #1
 8008b58:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	43db      	mvns	r3, r3
 8008b6a:	6939      	ldr	r1, [r7, #16]
 8008b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b70:	4013      	ands	r3, r2
 8008b72:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3720      	adds	r7, #32
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
	...

08008b80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	333c      	adds	r3, #60	; 0x3c
 8008b98:	3304      	adds	r3, #4
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	015a      	lsls	r2, r3, #5
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	f040 80a0 	bne.w	8008cf8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f003 0308 	and.w	r3, r3, #8
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d015      	beq.n	8008bee <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4a72      	ldr	r2, [pc, #456]	; (8008d90 <PCD_EP_OutXfrComplete_int+0x210>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	f240 80dd 	bls.w	8008d86 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 80d7 	beq.w	8008d86 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be4:	461a      	mov	r2, r3
 8008be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bea:	6093      	str	r3, [r2, #8]
 8008bec:	e0cb      	b.n	8008d86 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f003 0320 	and.w	r3, r3, #32
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d009      	beq.n	8008c0c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c04:	461a      	mov	r2, r3
 8008c06:	2320      	movs	r3, #32
 8008c08:	6093      	str	r3, [r2, #8]
 8008c0a:	e0bc      	b.n	8008d86 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f040 80b7 	bne.w	8008d86 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a5d      	ldr	r2, [pc, #372]	; (8008d90 <PCD_EP_OutXfrComplete_int+0x210>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d90f      	bls.n	8008c40 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00a      	beq.n	8008c40 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c36:	461a      	mov	r2, r3
 8008c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c3c:	6093      	str	r3, [r2, #8]
 8008c3e:	e0a2      	b.n	8008d86 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	4613      	mov	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	1a9b      	subs	r3, r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008c52:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	0159      	lsls	r1, r3, #5
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	440b      	add	r3, r1
 8008c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008c66:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	1a9b      	subs	r3, r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4403      	add	r3, r0
 8008c76:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008c7a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	4613      	mov	r3, r2
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	440b      	add	r3, r1
 8008c8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	4613      	mov	r3, r2
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	1a9b      	subs	r3, r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4403      	add	r3, r0
 8008c9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4419      	add	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	4613      	mov	r3, r2
 8008cac:	00db      	lsls	r3, r3, #3
 8008cae:	1a9b      	subs	r3, r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4403      	add	r3, r0
 8008cb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008cb8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d114      	bne.n	8008cea <PCD_EP_OutXfrComplete_int+0x16a>
 8008cc0:	6879      	ldr	r1, [r7, #4]
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d108      	bne.n	8008cea <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	f009 fd6f 	bl	80127c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f00d f891 	bl	8015e18 <HAL_PCD_DataOutStageCallback>
 8008cf6:	e046      	b.n	8008d86 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4a26      	ldr	r2, [pc, #152]	; (8008d94 <PCD_EP_OutXfrComplete_int+0x214>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d124      	bne.n	8008d4a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d16:	461a      	mov	r2, r3
 8008d18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d1c:	6093      	str	r3, [r2, #8]
 8008d1e:	e032      	b.n	8008d86 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d008      	beq.n	8008d3c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d36:	461a      	mov	r2, r3
 8008d38:	2320      	movs	r3, #32
 8008d3a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f00d f868 	bl	8015e18 <HAL_PCD_DataOutStageCallback>
 8008d48:	e01d      	b.n	8008d86 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d114      	bne.n	8008d7a <PCD_EP_OutXfrComplete_int+0x1fa>
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	4613      	mov	r3, r2
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	1a9b      	subs	r3, r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	440b      	add	r3, r1
 8008d5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d108      	bne.n	8008d7a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6818      	ldr	r0, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d72:	461a      	mov	r2, r3
 8008d74:	2100      	movs	r1, #0
 8008d76:	f009 fd27 	bl	80127c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f00d f849 	bl	8015e18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	4f54300a 	.word	0x4f54300a
 8008d94:	4f54310a 	.word	0x4f54310a

08008d98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	333c      	adds	r3, #60	; 0x3c
 8008db0:	3304      	adds	r3, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4a15      	ldr	r2, [pc, #84]	; (8008e20 <PCD_EP_OutSetupPacket_int+0x88>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d90e      	bls.n	8008dec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d009      	beq.n	8008dec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de4:	461a      	mov	r2, r3
 8008de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f00d f801 	bl	8015df4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4a0a      	ldr	r2, [pc, #40]	; (8008e20 <PCD_EP_OutSetupPacket_int+0x88>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d90c      	bls.n	8008e14 <PCD_EP_OutSetupPacket_int+0x7c>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d108      	bne.n	8008e14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6818      	ldr	r0, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	2101      	movs	r1, #1
 8008e10:	f009 fcda 	bl	80127c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	4f54300a 	.word	0x4f54300a

08008e24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
 8008e30:	4613      	mov	r3, r2
 8008e32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008e3c:	78fb      	ldrb	r3, [r7, #3]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d107      	bne.n	8008e52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008e42:	883b      	ldrh	r3, [r7, #0]
 8008e44:	0419      	lsls	r1, r3, #16
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8008e50:	e028      	b.n	8008ea4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e58:	0c1b      	lsrs	r3, r3, #16
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
 8008e64:	e00d      	b.n	8008e82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	3340      	adds	r3, #64	; 0x40
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	0c1b      	lsrs	r3, r3, #16
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	4413      	add	r3, r2
 8008e7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	73fb      	strb	r3, [r7, #15]
 8008e82:	7bfa      	ldrb	r2, [r7, #15]
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d3ec      	bcc.n	8008e66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008e8c:	883b      	ldrh	r3, [r7, #0]
 8008e8e:	0418      	lsls	r0, r3, #16
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6819      	ldr	r1, [r3, #0]
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	4302      	orrs	r2, r0
 8008e9c:	3340      	adds	r3, #64	; 0x40
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	887a      	ldrh	r2, [r7, #2]
 8008ec4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <HAL_PCDEx_ActivateLPM+0x44>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	10000003 	.word	0x10000003

08008f1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a04      	ldr	r2, [pc, #16]	; (8008f50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f42:	6013      	str	r3, [r2, #0]
}
 8008f44:	bf00      	nop
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	58024800 	.word	0x58024800

08008f54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008f5c:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d00a      	beq.n	8008f7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008f68:	4b16      	ldr	r3, [pc, #88]	; (8008fc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d001      	beq.n	8008f7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e01f      	b.n	8008fba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e01d      	b.n	8008fba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008f7e:	4b11      	ldr	r3, [pc, #68]	; (8008fc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	f023 0207 	bic.w	r2, r3, #7
 8008f86:	490f      	ldr	r1, [pc, #60]	; (8008fc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008f8e:	f7fc fb57 	bl	8005640 <HAL_GetTick>
 8008f92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008f94:	e009      	b.n	8008faa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008f96:	f7fc fb53 	bl	8005640 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fa4:	d901      	bls.n	8008faa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e007      	b.n	8008fba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008faa:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fb6:	d1ee      	bne.n	8008f96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	58024800 	.word	0x58024800

08008fc8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008fcc:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	4a04      	ldr	r2, [pc, #16]	; (8008fe4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fd6:	60d3      	str	r3, [r2, #12]
}
 8008fd8:	bf00      	nop
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	58024800 	.word	0x58024800

08008fe8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008ff0:	f7fc fb26 	bl	8005640 <HAL_GetTick>
 8008ff4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e05f      	b.n	80090c0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d107      	bne.n	800901c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7f9 f853 	bl	80020b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009012:	f241 3188 	movw	r1, #5000	; 0x1388
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa5e 	bl	80094d8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	3b01      	subs	r3, #1
 800902c:	021a      	lsls	r2, r3, #8
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	430a      	orrs	r2, r1
 8009034:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	2120      	movs	r1, #32
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fa56 	bl	80094f4 <QSPI_WaitFlagStateUntilTimeout>
 8009048:	4603      	mov	r3, r0
 800904a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800904c:	7afb      	ldrb	r3, [r7, #11]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d135      	bne.n	80090be <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	4b1b      	ldr	r3, [pc, #108]	; (80090c8 <HAL_QSPI_Init+0xe0>)
 800905a:	4013      	ands	r3, r2
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	6852      	ldr	r2, [r2, #4]
 8009060:	0611      	lsls	r1, r2, #24
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	68d2      	ldr	r2, [r2, #12]
 8009066:	4311      	orrs	r1, r2
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	69d2      	ldr	r2, [r2, #28]
 800906c:	4311      	orrs	r1, r2
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	6a12      	ldr	r2, [r2, #32]
 8009072:	4311      	orrs	r1, r2
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	6812      	ldr	r2, [r2, #0]
 8009078:	430b      	orrs	r3, r1
 800907a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <HAL_QSPI_Init+0xe4>)
 8009084:	4013      	ands	r3, r2
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	6912      	ldr	r2, [r2, #16]
 800908a:	0411      	lsls	r1, r2, #16
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6952      	ldr	r2, [r2, #20]
 8009090:	4311      	orrs	r1, r2
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6992      	ldr	r2, [r2, #24]
 8009096:	4311      	orrs	r1, r2
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	6812      	ldr	r2, [r2, #0]
 800909c:	430b      	orrs	r3, r1
 800909e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0201 	orr.w	r2, r2, #1
 80090ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80090be:	7afb      	ldrb	r3, [r7, #11]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	00ffff2f 	.word	0x00ffff2f
 80090cc:	ffe0f8fe 	.word	0xffe0f8fe

080090d0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80090dc:	f7fc fab0 	bl	8005640 <HAL_GetTick>
 80090e0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <HAL_QSPI_Command+0x22>
 80090ee:	2302      	movs	r3, #2
 80090f0:	e048      	b.n	8009184 <HAL_QSPI_Command+0xb4>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b01      	cmp	r3, #1
 8009104:	d137      	bne.n	8009176 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	2200      	movs	r2, #0
 800911c:	2120      	movs	r1, #32
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 f9e8 	bl	80094f4 <QSPI_WaitFlagStateUntilTimeout>
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d125      	bne.n	800917a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800912e:	2200      	movs	r2, #0
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 fa15 	bl	8009562 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b00      	cmp	r3, #0
 800913e:	d115      	bne.n	800916c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	2201      	movs	r2, #1
 8009148:	2102      	movs	r1, #2
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 f9d2 	bl	80094f4 <QSPI_WaitFlagStateUntilTimeout>
 8009150:	4603      	mov	r3, r0
 8009152:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8009154:	7dfb      	ldrb	r3, [r7, #23]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10f      	bne.n	800917a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2202      	movs	r2, #2
 8009160:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2201      	movs	r2, #1
 8009166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800916a:	e006      	b.n	800917a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009174:	e001      	b.n	800917a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8009176:	2302      	movs	r3, #2
 8009178:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8009182:	7dfb      	ldrb	r3, [r7, #23]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b08a      	sub	sp, #40	; 0x28
 8009190:	af02      	add	r7, sp, #8
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800919c:	f7fc fa50 	bl	8005640 <HAL_GetTick>
 80091a0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3320      	adds	r3, #32
 80091a8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d101      	bne.n	80091ba <HAL_QSPI_Transmit+0x2e>
 80091b6:	2302      	movs	r3, #2
 80091b8:	e076      	b.n	80092a8 <HAL_QSPI_Transmit+0x11c>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d165      	bne.n	800929a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d056      	beq.n	8009288 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2212      	movs	r2, #18
 80091de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	695a      	ldr	r2, [r3, #20]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800920e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8009210:	e01b      	b.n	800924a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	2201      	movs	r2, #1
 800921a:	2104      	movs	r1, #4
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 f969 	bl	80094f4 <QSPI_WaitFlagStateUntilTimeout>
 8009222:	4603      	mov	r3, r0
 8009224:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8009226:	7ffb      	ldrb	r3, [r7, #31]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d113      	bne.n	8009254 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	781a      	ldrb	r2, [r3, #0]
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	1e5a      	subs	r2, r3, #1
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1df      	bne.n	8009212 <HAL_QSPI_Transmit+0x86>
 8009252:	e000      	b.n	8009256 <HAL_QSPI_Transmit+0xca>
          break;
 8009254:	bf00      	nop
      }

      if (status == HAL_OK)
 8009256:	7ffb      	ldrb	r3, [r7, #31]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d110      	bne.n	800927e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	2201      	movs	r2, #1
 8009264:	2102      	movs	r1, #2
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 f944 	bl	80094f4 <QSPI_WaitFlagStateUntilTimeout>
 800926c:	4603      	mov	r3, r0
 800926e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8009270:	7ffb      	ldrb	r3, [r7, #31]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d103      	bne.n	800927e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2202      	movs	r2, #2
 800927c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009286:	e00a      	b.n	800929e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928c:	f043 0208 	orr.w	r2, r3, #8
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	77fb      	strb	r3, [r7, #31]
 8009298:	e001      	b.n	800929e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800929a:	2302      	movs	r3, #2
 800929c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80092a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3720      	adds	r7, #32
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08a      	sub	sp, #40	; 0x28
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80092c0:	f7fc f9be 	bl	8005640 <HAL_GetTick>
 80092c4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3320      	adds	r3, #32
 80092d4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d101      	bne.n	80092e6 <HAL_QSPI_Receive+0x36>
 80092e2:	2302      	movs	r3, #2
 80092e4:	e07d      	b.n	80093e2 <HAL_QSPI_Receive+0x132>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d16c      	bne.n	80093d4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d05d      	beq.n	80093c2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2222      	movs	r2, #34	; 0x22
 800930a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800933e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8009348:	e01c      	b.n	8009384 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	2201      	movs	r2, #1
 8009352:	2106      	movs	r1, #6
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 f8cd 	bl	80094f4 <QSPI_WaitFlagStateUntilTimeout>
 800935a:	4603      	mov	r3, r0
 800935c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800935e:	7ffb      	ldrb	r3, [r7, #31]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d114      	bne.n	800938e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	7812      	ldrb	r2, [r2, #0]
 800936c:	b2d2      	uxtb	r2, r2
 800936e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937e:	1e5a      	subs	r2, r3, #1
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1de      	bne.n	800934a <HAL_QSPI_Receive+0x9a>
 800938c:	e000      	b.n	8009390 <HAL_QSPI_Receive+0xe0>
          break;
 800938e:	bf00      	nop
      }

      if (status == HAL_OK)
 8009390:	7ffb      	ldrb	r3, [r7, #31]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d110      	bne.n	80093b8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	2201      	movs	r2, #1
 800939e:	2102      	movs	r1, #2
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f8a7 	bl	80094f4 <QSPI_WaitFlagStateUntilTimeout>
 80093a6:	4603      	mov	r3, r0
 80093a8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80093aa:	7ffb      	ldrb	r3, [r7, #31]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d103      	bne.n	80093b8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2202      	movs	r2, #2
 80093b6:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093c0:	e00a      	b.n	80093d8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c6:	f043 0208 	orr.w	r2, r3, #8
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	77fb      	strb	r3, [r7, #31]
 80093d2:	e001      	b.n	80093d8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80093d4:	2302      	movs	r3, #2
 80093d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80093e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3720      	adds	r7, #32
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b088      	sub	sp, #32
 80093ee:	af02      	add	r7, sp, #8
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	607a      	str	r2, [r7, #4]
 80093f6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80093f8:	f7fc f922 	bl	8005640 <HAL_GetTick>
 80093fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <HAL_QSPI_AutoPolling+0x24>
 800940a:	2302      	movs	r3, #2
 800940c:	e060      	b.n	80094d0 <HAL_QSPI_AutoPolling+0xe6>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b01      	cmp	r3, #1
 8009420:	d14f      	bne.n	80094c2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2242      	movs	r2, #66	; 0x42
 800942c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2200      	movs	r2, #0
 8009438:	2120      	movs	r1, #32
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f85a 	bl	80094f4 <QSPI_WaitFlagStateUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d13d      	bne.n	80094c6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6852      	ldr	r2, [r2, #4]
 800945c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	6892      	ldr	r2, [r2, #8]
 8009466:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	431a      	orrs	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8009480:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800948a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800948e:	68b9      	ldr	r1, [r7, #8]
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 f866 	bl	8009562 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	2201      	movs	r2, #1
 800949e:	2108      	movs	r1, #8
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 f827 	bl	80094f4 <QSPI_WaitFlagStateUntilTimeout>
 80094a6:	4603      	mov	r3, r0
 80094a8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10a      	bne.n	80094c6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2208      	movs	r2, #8
 80094b6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094c0:	e001      	b.n	80094c6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80094c2:	2302      	movs	r3, #2
 80094c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	4613      	mov	r3, r2
 8009502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009504:	e01a      	b.n	800953c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d016      	beq.n	800953c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800950e:	f7fc f897 	bl	8005640 <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	429a      	cmp	r2, r3
 800951c:	d302      	bcc.n	8009524 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10b      	bne.n	800953c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2204      	movs	r2, #4
 8009528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009530:	f043 0201 	orr.w	r2, r3, #1
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e00e      	b.n	800955a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689a      	ldr	r2, [r3, #8]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	4013      	ands	r3, r2
 8009546:	2b00      	cmp	r3, #0
 8009548:	bf14      	ite	ne
 800954a:	2301      	movne	r3, #1
 800954c:	2300      	moveq	r3, #0
 800954e:	b2db      	uxtb	r3, r3
 8009550:	461a      	mov	r2, r3
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	429a      	cmp	r2, r3
 8009556:	d1d6      	bne.n	8009506 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	2b00      	cmp	r3, #0
 8009574:	d009      	beq.n	800958a <QSPI_Config+0x28>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800957c:	d005      	beq.n	800958a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3a01      	subs	r2, #1
 8009588:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 80b9 	beq.w	8009706 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d05f      	beq.n	800965c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	6892      	ldr	r2, [r2, #8]
 80095a4:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d031      	beq.n	8009612 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b6:	431a      	orrs	r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095bc:	431a      	orrs	r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	431a      	orrs	r2, r3
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	049b      	lsls	r3, r3, #18
 80095ca:	431a      	orrs	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	431a      	orrs	r2, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	431a      	orrs	r2, r3
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	431a      	orrs	r2, r3
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	431a      	orrs	r2, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	431a      	orrs	r2, r3
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	ea42 0103 	orr.w	r1, r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009602:	f000 812e 	beq.w	8009862 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	6852      	ldr	r2, [r2, #4]
 800960e:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8009610:	e127      	b.n	8009862 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	431a      	orrs	r2, r3
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009620:	431a      	orrs	r2, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	431a      	orrs	r2, r3
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	049b      	lsls	r3, r3, #18
 800962e:	431a      	orrs	r2, r3
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	431a      	orrs	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	431a      	orrs	r2, r3
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	431a      	orrs	r2, r3
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	431a      	orrs	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	ea42 0103 	orr.w	r1, r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	430a      	orrs	r2, r1
 8009658:	615a      	str	r2, [r3, #20]
}
 800965a:	e102      	b.n	8009862 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d02e      	beq.n	80096c2 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966c:	431a      	orrs	r2, r3
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009672:	431a      	orrs	r2, r3
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	431a      	orrs	r2, r3
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	049b      	lsls	r3, r3, #18
 8009680:	431a      	orrs	r2, r3
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	6a1b      	ldr	r3, [r3, #32]
 8009686:	431a      	orrs	r2, r3
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	431a      	orrs	r2, r3
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	431a      	orrs	r2, r3
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	431a      	orrs	r2, r3
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	ea42 0103 	orr.w	r1, r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80096b2:	f000 80d6 	beq.w	8009862 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	6852      	ldr	r2, [r2, #4]
 80096be:	619a      	str	r2, [r3, #24]
}
 80096c0:	e0cf      	b.n	8009862 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ca:	431a      	orrs	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d0:	431a      	orrs	r2, r3
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	431a      	orrs	r2, r3
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	049b      	lsls	r3, r3, #18
 80096de:	431a      	orrs	r2, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	431a      	orrs	r2, r3
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	431a      	orrs	r2, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	431a      	orrs	r2, r3
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	ea42 0103 	orr.w	r1, r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	430a      	orrs	r2, r1
 8009702:	615a      	str	r2, [r3, #20]
}
 8009704:	e0ad      	b.n	8009862 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d058      	beq.n	80097c0 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	6892      	ldr	r2, [r2, #8]
 8009716:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d02d      	beq.n	800977c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009728:	431a      	orrs	r2, r3
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972e:	431a      	orrs	r2, r3
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	431a      	orrs	r2, r3
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	049b      	lsls	r3, r3, #18
 800973c:	431a      	orrs	r2, r3
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	431a      	orrs	r2, r3
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	431a      	orrs	r2, r3
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	431a      	orrs	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	431a      	orrs	r2, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	ea42 0103 	orr.w	r1, r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	430a      	orrs	r2, r1
 8009766:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800976e:	d078      	beq.n	8009862 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	6852      	ldr	r2, [r2, #4]
 8009778:	619a      	str	r2, [r3, #24]
}
 800977a:	e072      	b.n	8009862 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009784:	431a      	orrs	r2, r3
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978a:	431a      	orrs	r2, r3
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	431a      	orrs	r2, r3
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	049b      	lsls	r3, r3, #18
 8009798:	431a      	orrs	r2, r3
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	431a      	orrs	r2, r3
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	431a      	orrs	r2, r3
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	ea42 0103 	orr.w	r1, r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	615a      	str	r2, [r3, #20]
}
 80097be:	e050      	b.n	8009862 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d02a      	beq.n	800981e <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d0:	431a      	orrs	r2, r3
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d6:	431a      	orrs	r2, r3
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	431a      	orrs	r2, r3
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	049b      	lsls	r3, r3, #18
 80097e4:	431a      	orrs	r2, r3
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	431a      	orrs	r2, r3
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	431a      	orrs	r2, r3
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	431a      	orrs	r2, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	ea42 0103 	orr.w	r1, r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	430a      	orrs	r2, r1
 8009808:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009810:	d027      	beq.n	8009862 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	6852      	ldr	r2, [r2, #4]
 800981a:	619a      	str	r2, [r3, #24]
}
 800981c:	e021      	b.n	8009862 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009822:	2b00      	cmp	r3, #0
 8009824:	d01d      	beq.n	8009862 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982e:	431a      	orrs	r2, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009834:	431a      	orrs	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983a:	431a      	orrs	r2, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	695b      	ldr	r3, [r3, #20]
 8009840:	049b      	lsls	r3, r3, #18
 8009842:	431a      	orrs	r2, r3
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	431a      	orrs	r2, r3
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	69db      	ldr	r3, [r3, #28]
 800984e:	431a      	orrs	r2, r3
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	ea42 0103 	orr.w	r1, r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	430a      	orrs	r2, r1
 8009860:	615a      	str	r2, [r3, #20]
}
 8009862:	bf00      	nop
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
	...

08009870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08c      	sub	sp, #48	; 0x30
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e3ff      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 0301 	and.w	r3, r3, #1
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 8087 	beq.w	800999e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009890:	4b99      	ldr	r3, [pc, #612]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009898:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800989a:	4b97      	ldr	r3, [pc, #604]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 800989c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a2:	2b10      	cmp	r3, #16
 80098a4:	d007      	beq.n	80098b6 <HAL_RCC_OscConfig+0x46>
 80098a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a8:	2b18      	cmp	r3, #24
 80098aa:	d110      	bne.n	80098ce <HAL_RCC_OscConfig+0x5e>
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	f003 0303 	and.w	r3, r3, #3
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d10b      	bne.n	80098ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098b6:	4b90      	ldr	r3, [pc, #576]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d06c      	beq.n	800999c <HAL_RCC_OscConfig+0x12c>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d168      	bne.n	800999c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e3d9      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098d6:	d106      	bne.n	80098e6 <HAL_RCC_OscConfig+0x76>
 80098d8:	4b87      	ldr	r3, [pc, #540]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a86      	ldr	r2, [pc, #536]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 80098de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	e02e      	b.n	8009944 <HAL_RCC_OscConfig+0xd4>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10c      	bne.n	8009908 <HAL_RCC_OscConfig+0x98>
 80098ee:	4b82      	ldr	r3, [pc, #520]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a81      	ldr	r2, [pc, #516]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 80098f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	4b7f      	ldr	r3, [pc, #508]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a7e      	ldr	r2, [pc, #504]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	e01d      	b.n	8009944 <HAL_RCC_OscConfig+0xd4>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009910:	d10c      	bne.n	800992c <HAL_RCC_OscConfig+0xbc>
 8009912:	4b79      	ldr	r3, [pc, #484]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a78      	ldr	r2, [pc, #480]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	4b76      	ldr	r3, [pc, #472]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a75      	ldr	r2, [pc, #468]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	e00b      	b.n	8009944 <HAL_RCC_OscConfig+0xd4>
 800992c:	4b72      	ldr	r3, [pc, #456]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a71      	ldr	r2, [pc, #452]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	4b6f      	ldr	r3, [pc, #444]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a6e      	ldr	r2, [pc, #440]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 800993e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d013      	beq.n	8009974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800994c:	f7fb fe78 	bl	8005640 <HAL_GetTick>
 8009950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009952:	e008      	b.n	8009966 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009954:	f7fb fe74 	bl	8005640 <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	2b64      	cmp	r3, #100	; 0x64
 8009960:	d901      	bls.n	8009966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e38d      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009966:	4b64      	ldr	r3, [pc, #400]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0f0      	beq.n	8009954 <HAL_RCC_OscConfig+0xe4>
 8009972:	e014      	b.n	800999e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009974:	f7fb fe64 	bl	8005640 <HAL_GetTick>
 8009978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800997a:	e008      	b.n	800998e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800997c:	f7fb fe60 	bl	8005640 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	2b64      	cmp	r3, #100	; 0x64
 8009988:	d901      	bls.n	800998e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e379      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800998e:	4b5a      	ldr	r3, [pc, #360]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1f0      	bne.n	800997c <HAL_RCC_OscConfig+0x10c>
 800999a:	e000      	b.n	800999e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800999c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 80ae 	beq.w	8009b08 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ac:	4b52      	ldr	r3, [pc, #328]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099b6:	4b50      	ldr	r3, [pc, #320]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 80099b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ba:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d007      	beq.n	80099d2 <HAL_RCC_OscConfig+0x162>
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	2b18      	cmp	r3, #24
 80099c6:	d13a      	bne.n	8009a3e <HAL_RCC_OscConfig+0x1ce>
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	f003 0303 	and.w	r3, r3, #3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d135      	bne.n	8009a3e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099d2:	4b49      	ldr	r3, [pc, #292]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 0304 	and.w	r3, r3, #4
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <HAL_RCC_OscConfig+0x17a>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e34b      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099ea:	f7fb fe59 	bl	80056a0 <HAL_GetREVID>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d817      	bhi.n	8009a28 <HAL_RCC_OscConfig+0x1b8>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b40      	cmp	r3, #64	; 0x40
 80099fe:	d108      	bne.n	8009a12 <HAL_RCC_OscConfig+0x1a2>
 8009a00:	4b3d      	ldr	r3, [pc, #244]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009a08:	4a3b      	ldr	r2, [pc, #236]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a0e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a10:	e07a      	b.n	8009b08 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a12:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	031b      	lsls	r3, r3, #12
 8009a20:	4935      	ldr	r1, [pc, #212]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a22:	4313      	orrs	r3, r2
 8009a24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a26:	e06f      	b.n	8009b08 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a28:	4b33      	ldr	r3, [pc, #204]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	061b      	lsls	r3, r3, #24
 8009a36:	4930      	ldr	r1, [pc, #192]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a3c:	e064      	b.n	8009b08 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d045      	beq.n	8009ad2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a46:	4b2c      	ldr	r3, [pc, #176]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f023 0219 	bic.w	r2, r3, #25
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	4929      	ldr	r1, [pc, #164]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a58:	f7fb fdf2 	bl	8005640 <HAL_GetTick>
 8009a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a5e:	e008      	b.n	8009a72 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a60:	f7fb fdee 	bl	8005640 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d901      	bls.n	8009a72 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e307      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a72:	4b21      	ldr	r3, [pc, #132]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0304 	and.w	r3, r3, #4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0f0      	beq.n	8009a60 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a7e:	f7fb fe0f 	bl	80056a0 <HAL_GetREVID>
 8009a82:	4603      	mov	r3, r0
 8009a84:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d817      	bhi.n	8009abc <HAL_RCC_OscConfig+0x24c>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b40      	cmp	r3, #64	; 0x40
 8009a92:	d108      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x236>
 8009a94:	4b18      	ldr	r3, [pc, #96]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009a9c:	4a16      	ldr	r2, [pc, #88]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aa2:	6053      	str	r3, [r2, #4]
 8009aa4:	e030      	b.n	8009b08 <HAL_RCC_OscConfig+0x298>
 8009aa6:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	031b      	lsls	r3, r3, #12
 8009ab4:	4910      	ldr	r1, [pc, #64]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	604b      	str	r3, [r1, #4]
 8009aba:	e025      	b.n	8009b08 <HAL_RCC_OscConfig+0x298>
 8009abc:	4b0e      	ldr	r3, [pc, #56]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	061b      	lsls	r3, r3, #24
 8009aca:	490b      	ldr	r1, [pc, #44]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009acc:	4313      	orrs	r3, r2
 8009ace:	604b      	str	r3, [r1, #4]
 8009ad0:	e01a      	b.n	8009b08 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ad2:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a08      	ldr	r2, [pc, #32]	; (8009af8 <HAL_RCC_OscConfig+0x288>)
 8009ad8:	f023 0301 	bic.w	r3, r3, #1
 8009adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ade:	f7fb fdaf 	bl	8005640 <HAL_GetTick>
 8009ae2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ae4:	e00a      	b.n	8009afc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ae6:	f7fb fdab 	bl	8005640 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d903      	bls.n	8009afc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e2c4      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
 8009af8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009afc:	4ba4      	ldr	r3, [pc, #656]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1ee      	bne.n	8009ae6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0310 	and.w	r3, r3, #16
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80a9 	beq.w	8009c68 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b16:	4b9e      	ldr	r3, [pc, #632]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b20:	4b9b      	ldr	r3, [pc, #620]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b24:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	2b08      	cmp	r3, #8
 8009b2a:	d007      	beq.n	8009b3c <HAL_RCC_OscConfig+0x2cc>
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	2b18      	cmp	r3, #24
 8009b30:	d13a      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x338>
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f003 0303 	and.w	r3, r3, #3
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d135      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b3c:	4b94      	ldr	r3, [pc, #592]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d005      	beq.n	8009b54 <HAL_RCC_OscConfig+0x2e4>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	2b80      	cmp	r3, #128	; 0x80
 8009b4e:	d001      	beq.n	8009b54 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e296      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b54:	f7fb fda4 	bl	80056a0 <HAL_GetREVID>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d817      	bhi.n	8009b92 <HAL_RCC_OscConfig+0x322>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	d108      	bne.n	8009b7c <HAL_RCC_OscConfig+0x30c>
 8009b6a:	4b89      	ldr	r3, [pc, #548]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009b72:	4a87      	ldr	r2, [pc, #540]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009b74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b78:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b7a:	e075      	b.n	8009c68 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b7c:	4b84      	ldr	r3, [pc, #528]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	069b      	lsls	r3, r3, #26
 8009b8a:	4981      	ldr	r1, [pc, #516]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b90:	e06a      	b.n	8009c68 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b92:	4b7f      	ldr	r3, [pc, #508]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	061b      	lsls	r3, r3, #24
 8009ba0:	497b      	ldr	r1, [pc, #492]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ba6:	e05f      	b.n	8009c68 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	69db      	ldr	r3, [r3, #28]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d042      	beq.n	8009c36 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009bb0:	4b77      	ldr	r3, [pc, #476]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a76      	ldr	r2, [pc, #472]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bbc:	f7fb fd40 	bl	8005640 <HAL_GetTick>
 8009bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009bc2:	e008      	b.n	8009bd6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009bc4:	f7fb fd3c 	bl	8005640 <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d901      	bls.n	8009bd6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e255      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009bd6:	4b6e      	ldr	r3, [pc, #440]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0f0      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009be2:	f7fb fd5d 	bl	80056a0 <HAL_GetREVID>
 8009be6:	4603      	mov	r3, r0
 8009be8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d817      	bhi.n	8009c20 <HAL_RCC_OscConfig+0x3b0>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	2b20      	cmp	r3, #32
 8009bf6:	d108      	bne.n	8009c0a <HAL_RCC_OscConfig+0x39a>
 8009bf8:	4b65      	ldr	r3, [pc, #404]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c00:	4a63      	ldr	r2, [pc, #396]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c06:	6053      	str	r3, [r2, #4]
 8009c08:	e02e      	b.n	8009c68 <HAL_RCC_OscConfig+0x3f8>
 8009c0a:	4b61      	ldr	r3, [pc, #388]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	069b      	lsls	r3, r3, #26
 8009c18:	495d      	ldr	r1, [pc, #372]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	604b      	str	r3, [r1, #4]
 8009c1e:	e023      	b.n	8009c68 <HAL_RCC_OscConfig+0x3f8>
 8009c20:	4b5b      	ldr	r3, [pc, #364]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a1b      	ldr	r3, [r3, #32]
 8009c2c:	061b      	lsls	r3, r3, #24
 8009c2e:	4958      	ldr	r1, [pc, #352]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	60cb      	str	r3, [r1, #12]
 8009c34:	e018      	b.n	8009c68 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c36:	4b56      	ldr	r3, [pc, #344]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a55      	ldr	r2, [pc, #340]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c42:	f7fb fcfd 	bl	8005640 <HAL_GetTick>
 8009c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c48:	e008      	b.n	8009c5c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009c4a:	f7fb fcf9 	bl	8005640 <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d901      	bls.n	8009c5c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e212      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c5c:	4b4c      	ldr	r3, [pc, #304]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1f0      	bne.n	8009c4a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0308 	and.w	r3, r3, #8
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d036      	beq.n	8009ce2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	695b      	ldr	r3, [r3, #20]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d019      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c7c:	4b44      	ldr	r3, [pc, #272]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c80:	4a43      	ldr	r2, [pc, #268]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009c82:	f043 0301 	orr.w	r3, r3, #1
 8009c86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c88:	f7fb fcda 	bl	8005640 <HAL_GetTick>
 8009c8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c8e:	e008      	b.n	8009ca2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c90:	f7fb fcd6 	bl	8005640 <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d901      	bls.n	8009ca2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e1ef      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ca2:	4b3b      	ldr	r3, [pc, #236]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ca6:	f003 0302 	and.w	r3, r3, #2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0f0      	beq.n	8009c90 <HAL_RCC_OscConfig+0x420>
 8009cae:	e018      	b.n	8009ce2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cb0:	4b37      	ldr	r3, [pc, #220]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cb4:	4a36      	ldr	r2, [pc, #216]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009cb6:	f023 0301 	bic.w	r3, r3, #1
 8009cba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cbc:	f7fb fcc0 	bl	8005640 <HAL_GetTick>
 8009cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009cc2:	e008      	b.n	8009cd6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cc4:	f7fb fcbc 	bl	8005640 <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d901      	bls.n	8009cd6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e1d5      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009cd6:	4b2e      	ldr	r3, [pc, #184]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f0      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d036      	beq.n	8009d5c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d019      	beq.n	8009d2a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009cf6:	4b26      	ldr	r3, [pc, #152]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a25      	ldr	r2, [pc, #148]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d02:	f7fb fc9d 	bl	8005640 <HAL_GetTick>
 8009d06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d08:	e008      	b.n	8009d1c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009d0a:	f7fb fc99 	bl	8005640 <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d901      	bls.n	8009d1c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e1b2      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d1c:	4b1c      	ldr	r3, [pc, #112]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0f0      	beq.n	8009d0a <HAL_RCC_OscConfig+0x49a>
 8009d28:	e018      	b.n	8009d5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d2a:	4b19      	ldr	r3, [pc, #100]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a18      	ldr	r2, [pc, #96]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d36:	f7fb fc83 	bl	8005640 <HAL_GetTick>
 8009d3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d3c:	e008      	b.n	8009d50 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009d3e:	f7fb fc7f 	bl	8005640 <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d901      	bls.n	8009d50 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e198      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d50:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <HAL_RCC_OscConfig+0x520>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f0      	bne.n	8009d3e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 8085 	beq.w	8009e74 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <HAL_RCC_OscConfig+0x524>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a09      	ldr	r2, [pc, #36]	; (8009d94 <HAL_RCC_OscConfig+0x524>)
 8009d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d76:	f7fb fc63 	bl	8005640 <HAL_GetTick>
 8009d7a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d7c:	e00c      	b.n	8009d98 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009d7e:	f7fb fc5f 	bl	8005640 <HAL_GetTick>
 8009d82:	4602      	mov	r2, r0
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	2b64      	cmp	r3, #100	; 0x64
 8009d8a:	d905      	bls.n	8009d98 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e178      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
 8009d90:	58024400 	.word	0x58024400
 8009d94:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d98:	4b96      	ldr	r3, [pc, #600]	; (8009ff4 <HAL_RCC_OscConfig+0x784>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d0ec      	beq.n	8009d7e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d106      	bne.n	8009dba <HAL_RCC_OscConfig+0x54a>
 8009dac:	4b92      	ldr	r3, [pc, #584]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db0:	4a91      	ldr	r2, [pc, #580]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009db2:	f043 0301 	orr.w	r3, r3, #1
 8009db6:	6713      	str	r3, [r2, #112]	; 0x70
 8009db8:	e02d      	b.n	8009e16 <HAL_RCC_OscConfig+0x5a6>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10c      	bne.n	8009ddc <HAL_RCC_OscConfig+0x56c>
 8009dc2:	4b8d      	ldr	r3, [pc, #564]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc6:	4a8c      	ldr	r2, [pc, #560]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009dc8:	f023 0301 	bic.w	r3, r3, #1
 8009dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8009dce:	4b8a      	ldr	r3, [pc, #552]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd2:	4a89      	ldr	r2, [pc, #548]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009dd4:	f023 0304 	bic.w	r3, r3, #4
 8009dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8009dda:	e01c      	b.n	8009e16 <HAL_RCC_OscConfig+0x5a6>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	2b05      	cmp	r3, #5
 8009de2:	d10c      	bne.n	8009dfe <HAL_RCC_OscConfig+0x58e>
 8009de4:	4b84      	ldr	r3, [pc, #528]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de8:	4a83      	ldr	r2, [pc, #524]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009dea:	f043 0304 	orr.w	r3, r3, #4
 8009dee:	6713      	str	r3, [r2, #112]	; 0x70
 8009df0:	4b81      	ldr	r3, [pc, #516]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df4:	4a80      	ldr	r2, [pc, #512]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009df6:	f043 0301 	orr.w	r3, r3, #1
 8009dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8009dfc:	e00b      	b.n	8009e16 <HAL_RCC_OscConfig+0x5a6>
 8009dfe:	4b7e      	ldr	r3, [pc, #504]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e02:	4a7d      	ldr	r2, [pc, #500]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009e04:	f023 0301 	bic.w	r3, r3, #1
 8009e08:	6713      	str	r3, [r2, #112]	; 0x70
 8009e0a:	4b7b      	ldr	r3, [pc, #492]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0e:	4a7a      	ldr	r2, [pc, #488]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009e10:	f023 0304 	bic.w	r3, r3, #4
 8009e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d015      	beq.n	8009e4a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e1e:	f7fb fc0f 	bl	8005640 <HAL_GetTick>
 8009e22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e24:	e00a      	b.n	8009e3c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e26:	f7fb fc0b 	bl	8005640 <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d901      	bls.n	8009e3c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e122      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e3c:	4b6e      	ldr	r3, [pc, #440]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e40:	f003 0302 	and.w	r3, r3, #2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0ee      	beq.n	8009e26 <HAL_RCC_OscConfig+0x5b6>
 8009e48:	e014      	b.n	8009e74 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e4a:	f7fb fbf9 	bl	8005640 <HAL_GetTick>
 8009e4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e50:	e00a      	b.n	8009e68 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e52:	f7fb fbf5 	bl	8005640 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d901      	bls.n	8009e68 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e10c      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e68:	4b63      	ldr	r3, [pc, #396]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1ee      	bne.n	8009e52 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 8101 	beq.w	800a080 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009e7e:	4b5e      	ldr	r3, [pc, #376]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e86:	2b18      	cmp	r3, #24
 8009e88:	f000 80bc 	beq.w	800a004 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	f040 8095 	bne.w	8009fc0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e96:	4b58      	ldr	r3, [pc, #352]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a57      	ldr	r2, [pc, #348]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ea2:	f7fb fbcd 	bl	8005640 <HAL_GetTick>
 8009ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ea8:	e008      	b.n	8009ebc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009eaa:	f7fb fbc9 	bl	8005640 <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d901      	bls.n	8009ebc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e0e2      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ebc:	4b4e      	ldr	r3, [pc, #312]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1f0      	bne.n	8009eaa <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ec8:	4b4b      	ldr	r3, [pc, #300]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ecc:	4b4b      	ldr	r3, [pc, #300]	; (8009ffc <HAL_RCC_OscConfig+0x78c>)
 8009ece:	4013      	ands	r3, r2
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ed8:	0112      	lsls	r2, r2, #4
 8009eda:	430a      	orrs	r2, r1
 8009edc:	4946      	ldr	r1, [pc, #280]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	628b      	str	r3, [r1, #40]	; 0x28
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	025b      	lsls	r3, r3, #9
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efc:	3b01      	subs	r3, #1
 8009efe:	041b      	lsls	r3, r3, #16
 8009f00:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f04:	431a      	orrs	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	061b      	lsls	r3, r3, #24
 8009f0e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f12:	4939      	ldr	r1, [pc, #228]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f14:	4313      	orrs	r3, r2
 8009f16:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009f18:	4b37      	ldr	r3, [pc, #220]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1c:	4a36      	ldr	r2, [pc, #216]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f1e:	f023 0301 	bic.w	r3, r3, #1
 8009f22:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f24:	4b34      	ldr	r3, [pc, #208]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f28:	4b35      	ldr	r3, [pc, #212]	; (800a000 <HAL_RCC_OscConfig+0x790>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f30:	00d2      	lsls	r2, r2, #3
 8009f32:	4931      	ldr	r1, [pc, #196]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f38:	4b2f      	ldr	r3, [pc, #188]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	f023 020c 	bic.w	r2, r3, #12
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f44:	492c      	ldr	r1, [pc, #176]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009f4a:	4b2b      	ldr	r3, [pc, #172]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4e:	f023 0202 	bic.w	r2, r3, #2
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f56:	4928      	ldr	r1, [pc, #160]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f5c:	4b26      	ldr	r3, [pc, #152]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f60:	4a25      	ldr	r2, [pc, #148]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f68:	4b23      	ldr	r3, [pc, #140]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6c:	4a22      	ldr	r2, [pc, #136]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009f74:	4b20      	ldr	r3, [pc, #128]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	4a1f      	ldr	r2, [pc, #124]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009f80:	4b1d      	ldr	r3, [pc, #116]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	4a1c      	ldr	r2, [pc, #112]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f86:	f043 0301 	orr.w	r3, r3, #1
 8009f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f8c:	4b1a      	ldr	r3, [pc, #104]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a19      	ldr	r2, [pc, #100]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f98:	f7fb fb52 	bl	8005640 <HAL_GetTick>
 8009f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f9e:	e008      	b.n	8009fb2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fa0:	f7fb fb4e 	bl	8005640 <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d901      	bls.n	8009fb2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e067      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fb2:	4b11      	ldr	r3, [pc, #68]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0f0      	beq.n	8009fa0 <HAL_RCC_OscConfig+0x730>
 8009fbe:	e05f      	b.n	800a080 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fc0:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a0c      	ldr	r2, [pc, #48]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fcc:	f7fb fb38 	bl	8005640 <HAL_GetTick>
 8009fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fd2:	e008      	b.n	8009fe6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fd4:	f7fb fb34 	bl	8005640 <HAL_GetTick>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d901      	bls.n	8009fe6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e04d      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fe6:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <HAL_RCC_OscConfig+0x788>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1f0      	bne.n	8009fd4 <HAL_RCC_OscConfig+0x764>
 8009ff2:	e045      	b.n	800a080 <HAL_RCC_OscConfig+0x810>
 8009ff4:	58024800 	.word	0x58024800
 8009ff8:	58024400 	.word	0x58024400
 8009ffc:	fffffc0c 	.word	0xfffffc0c
 800a000:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a004:	4b21      	ldr	r3, [pc, #132]	; (800a08c <HAL_RCC_OscConfig+0x81c>)
 800a006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a008:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a00a:	4b20      	ldr	r3, [pc, #128]	; (800a08c <HAL_RCC_OscConfig+0x81c>)
 800a00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	2b01      	cmp	r3, #1
 800a016:	d031      	beq.n	800a07c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f003 0203 	and.w	r2, r3, #3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a022:	429a      	cmp	r2, r3
 800a024:	d12a      	bne.n	800a07c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	091b      	lsrs	r3, r3, #4
 800a02a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a032:	429a      	cmp	r2, r3
 800a034:	d122      	bne.n	800a07c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a040:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a042:	429a      	cmp	r2, r3
 800a044:	d11a      	bne.n	800a07c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	0a5b      	lsrs	r3, r3, #9
 800a04a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a052:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a054:	429a      	cmp	r2, r3
 800a056:	d111      	bne.n	800a07c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	0c1b      	lsrs	r3, r3, #16
 800a05c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a064:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a066:	429a      	cmp	r2, r3
 800a068:	d108      	bne.n	800a07c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	0e1b      	lsrs	r3, r3, #24
 800a06e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a076:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a078:	429a      	cmp	r2, r3
 800a07a:	d001      	beq.n	800a080 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e000      	b.n	800a082 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3730      	adds	r7, #48	; 0x30
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	58024400 	.word	0x58024400

0800a090 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e19c      	b.n	800a3de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a0a4:	4b8a      	ldr	r3, [pc, #552]	; (800a2d0 <HAL_RCC_ClockConfig+0x240>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 030f 	and.w	r3, r3, #15
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d910      	bls.n	800a0d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0b2:	4b87      	ldr	r3, [pc, #540]	; (800a2d0 <HAL_RCC_ClockConfig+0x240>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f023 020f 	bic.w	r2, r3, #15
 800a0ba:	4985      	ldr	r1, [pc, #532]	; (800a2d0 <HAL_RCC_ClockConfig+0x240>)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0c2:	4b83      	ldr	r3, [pc, #524]	; (800a2d0 <HAL_RCC_ClockConfig+0x240>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 030f 	and.w	r3, r3, #15
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d001      	beq.n	800a0d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e184      	b.n	800a3de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d010      	beq.n	800a102 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	691a      	ldr	r2, [r3, #16]
 800a0e4:	4b7b      	ldr	r3, [pc, #492]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d908      	bls.n	800a102 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0f0:	4b78      	ldr	r3, [pc, #480]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	4975      	ldr	r1, [pc, #468]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0308 	and.w	r3, r3, #8
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d010      	beq.n	800a130 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	695a      	ldr	r2, [r3, #20]
 800a112:	4b70      	ldr	r3, [pc, #448]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d908      	bls.n	800a130 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a11e:	4b6d      	ldr	r3, [pc, #436]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	496a      	ldr	r1, [pc, #424]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0310 	and.w	r3, r3, #16
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d010      	beq.n	800a15e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	699a      	ldr	r2, [r3, #24]
 800a140:	4b64      	ldr	r3, [pc, #400]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a142:	69db      	ldr	r3, [r3, #28]
 800a144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a148:	429a      	cmp	r2, r3
 800a14a:	d908      	bls.n	800a15e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a14c:	4b61      	ldr	r3, [pc, #388]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	495e      	ldr	r1, [pc, #376]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d010      	beq.n	800a18c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	69da      	ldr	r2, [r3, #28]
 800a16e:	4b59      	ldr	r3, [pc, #356]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a176:	429a      	cmp	r2, r3
 800a178:	d908      	bls.n	800a18c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a17a:	4b56      	ldr	r3, [pc, #344]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	4953      	ldr	r1, [pc, #332]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a188:	4313      	orrs	r3, r2
 800a18a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d010      	beq.n	800a1ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68da      	ldr	r2, [r3, #12]
 800a19c:	4b4d      	ldr	r3, [pc, #308]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	f003 030f 	and.w	r3, r3, #15
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d908      	bls.n	800a1ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1a8:	4b4a      	ldr	r3, [pc, #296]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	f023 020f 	bic.w	r2, r3, #15
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	4947      	ldr	r1, [pc, #284]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d055      	beq.n	800a272 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a1c6:	4b43      	ldr	r3, [pc, #268]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	4940      	ldr	r1, [pc, #256]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d107      	bne.n	800a1f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1e0:	4b3c      	ldr	r3, [pc, #240]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d121      	bne.n	800a230 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e0f6      	b.n	800a3de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	d107      	bne.n	800a208 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1f8:	4b36      	ldr	r3, [pc, #216]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a200:	2b00      	cmp	r3, #0
 800a202:	d115      	bne.n	800a230 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e0ea      	b.n	800a3de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d107      	bne.n	800a220 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a210:	4b30      	ldr	r3, [pc, #192]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d109      	bne.n	800a230 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e0de      	b.n	800a3de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a220:	4b2c      	ldr	r3, [pc, #176]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e0d6      	b.n	800a3de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a230:	4b28      	ldr	r3, [pc, #160]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	f023 0207 	bic.w	r2, r3, #7
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	4925      	ldr	r1, [pc, #148]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a23e:	4313      	orrs	r3, r2
 800a240:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a242:	f7fb f9fd 	bl	8005640 <HAL_GetTick>
 800a246:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a248:	e00a      	b.n	800a260 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a24a:	f7fb f9f9 	bl	8005640 <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	f241 3288 	movw	r2, #5000	; 0x1388
 800a258:	4293      	cmp	r3, r2
 800a25a:	d901      	bls.n	800a260 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e0be      	b.n	800a3de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a260:	4b1c      	ldr	r3, [pc, #112]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	00db      	lsls	r3, r3, #3
 800a26e:	429a      	cmp	r2, r3
 800a270:	d1eb      	bne.n	800a24a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0302 	and.w	r3, r3, #2
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d010      	beq.n	800a2a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68da      	ldr	r2, [r3, #12]
 800a282:	4b14      	ldr	r3, [pc, #80]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	f003 030f 	and.w	r3, r3, #15
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d208      	bcs.n	800a2a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a28e:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	f023 020f 	bic.w	r2, r3, #15
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	490e      	ldr	r1, [pc, #56]	; (800a2d4 <HAL_RCC_ClockConfig+0x244>)
 800a29c:	4313      	orrs	r3, r2
 800a29e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a2a0:	4b0b      	ldr	r3, [pc, #44]	; (800a2d0 <HAL_RCC_ClockConfig+0x240>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d214      	bcs.n	800a2d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2ae:	4b08      	ldr	r3, [pc, #32]	; (800a2d0 <HAL_RCC_ClockConfig+0x240>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f023 020f 	bic.w	r2, r3, #15
 800a2b6:	4906      	ldr	r1, [pc, #24]	; (800a2d0 <HAL_RCC_ClockConfig+0x240>)
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2be:	4b04      	ldr	r3, [pc, #16]	; (800a2d0 <HAL_RCC_ClockConfig+0x240>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 030f 	and.w	r3, r3, #15
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d005      	beq.n	800a2d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e086      	b.n	800a3de <HAL_RCC_ClockConfig+0x34e>
 800a2d0:	52002000 	.word	0x52002000
 800a2d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0304 	and.w	r3, r3, #4
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d010      	beq.n	800a306 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691a      	ldr	r2, [r3, #16]
 800a2e8:	4b3f      	ldr	r3, [pc, #252]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d208      	bcs.n	800a306 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2f4:	4b3c      	ldr	r3, [pc, #240]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	4939      	ldr	r1, [pc, #228]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a302:	4313      	orrs	r3, r2
 800a304:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0308 	and.w	r3, r3, #8
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d010      	beq.n	800a334 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695a      	ldr	r2, [r3, #20]
 800a316:	4b34      	ldr	r3, [pc, #208]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a31e:	429a      	cmp	r2, r3
 800a320:	d208      	bcs.n	800a334 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a322:	4b31      	ldr	r3, [pc, #196]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	492e      	ldr	r1, [pc, #184]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a330:	4313      	orrs	r3, r2
 800a332:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0310 	and.w	r3, r3, #16
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d010      	beq.n	800a362 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	699a      	ldr	r2, [r3, #24]
 800a344:	4b28      	ldr	r3, [pc, #160]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d208      	bcs.n	800a362 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a350:	4b25      	ldr	r3, [pc, #148]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	4922      	ldr	r1, [pc, #136]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0320 	and.w	r3, r3, #32
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d010      	beq.n	800a390 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	69da      	ldr	r2, [r3, #28]
 800a372:	4b1d      	ldr	r3, [pc, #116]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d208      	bcs.n	800a390 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a37e:	4b1a      	ldr	r3, [pc, #104]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	4917      	ldr	r1, [pc, #92]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a390:	f000 f834 	bl	800a3fc <HAL_RCC_GetSysClockFreq>
 800a394:	4602      	mov	r2, r0
 800a396:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	0a1b      	lsrs	r3, r3, #8
 800a39c:	f003 030f 	and.w	r3, r3, #15
 800a3a0:	4912      	ldr	r1, [pc, #72]	; (800a3ec <HAL_RCC_ClockConfig+0x35c>)
 800a3a2:	5ccb      	ldrb	r3, [r1, r3]
 800a3a4:	f003 031f 	and.w	r3, r3, #31
 800a3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a3ae:	4b0e      	ldr	r3, [pc, #56]	; (800a3e8 <HAL_RCC_ClockConfig+0x358>)
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	f003 030f 	and.w	r3, r3, #15
 800a3b6:	4a0d      	ldr	r2, [pc, #52]	; (800a3ec <HAL_RCC_ClockConfig+0x35c>)
 800a3b8:	5cd3      	ldrb	r3, [r2, r3]
 800a3ba:	f003 031f 	and.w	r3, r3, #31
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c4:	4a0a      	ldr	r2, [pc, #40]	; (800a3f0 <HAL_RCC_ClockConfig+0x360>)
 800a3c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3c8:	4a0a      	ldr	r2, [pc, #40]	; (800a3f4 <HAL_RCC_ClockConfig+0x364>)
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a3ce:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <HAL_RCC_ClockConfig+0x368>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7f8 f958 	bl	8002688 <HAL_InitTick>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3718      	adds	r7, #24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	58024400 	.word	0x58024400
 800a3ec:	080194e8 	.word	0x080194e8
 800a3f0:	24000048 	.word	0x24000048
 800a3f4:	24000044 	.word	0x24000044
 800a3f8:	240000e0 	.word	0x240000e0

0800a3fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b089      	sub	sp, #36	; 0x24
 800a400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a402:	4bb3      	ldr	r3, [pc, #716]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a40a:	2b18      	cmp	r3, #24
 800a40c:	f200 8155 	bhi.w	800a6ba <HAL_RCC_GetSysClockFreq+0x2be>
 800a410:	a201      	add	r2, pc, #4	; (adr r2, 800a418 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a416:	bf00      	nop
 800a418:	0800a47d 	.word	0x0800a47d
 800a41c:	0800a6bb 	.word	0x0800a6bb
 800a420:	0800a6bb 	.word	0x0800a6bb
 800a424:	0800a6bb 	.word	0x0800a6bb
 800a428:	0800a6bb 	.word	0x0800a6bb
 800a42c:	0800a6bb 	.word	0x0800a6bb
 800a430:	0800a6bb 	.word	0x0800a6bb
 800a434:	0800a6bb 	.word	0x0800a6bb
 800a438:	0800a4a3 	.word	0x0800a4a3
 800a43c:	0800a6bb 	.word	0x0800a6bb
 800a440:	0800a6bb 	.word	0x0800a6bb
 800a444:	0800a6bb 	.word	0x0800a6bb
 800a448:	0800a6bb 	.word	0x0800a6bb
 800a44c:	0800a6bb 	.word	0x0800a6bb
 800a450:	0800a6bb 	.word	0x0800a6bb
 800a454:	0800a6bb 	.word	0x0800a6bb
 800a458:	0800a4a9 	.word	0x0800a4a9
 800a45c:	0800a6bb 	.word	0x0800a6bb
 800a460:	0800a6bb 	.word	0x0800a6bb
 800a464:	0800a6bb 	.word	0x0800a6bb
 800a468:	0800a6bb 	.word	0x0800a6bb
 800a46c:	0800a6bb 	.word	0x0800a6bb
 800a470:	0800a6bb 	.word	0x0800a6bb
 800a474:	0800a6bb 	.word	0x0800a6bb
 800a478:	0800a4af 	.word	0x0800a4af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a47c:	4b94      	ldr	r3, [pc, #592]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0320 	and.w	r3, r3, #32
 800a484:	2b00      	cmp	r3, #0
 800a486:	d009      	beq.n	800a49c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a488:	4b91      	ldr	r3, [pc, #580]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	08db      	lsrs	r3, r3, #3
 800a48e:	f003 0303 	and.w	r3, r3, #3
 800a492:	4a90      	ldr	r2, [pc, #576]	; (800a6d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a494:	fa22 f303 	lsr.w	r3, r2, r3
 800a498:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a49a:	e111      	b.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a49c:	4b8d      	ldr	r3, [pc, #564]	; (800a6d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a49e:	61bb      	str	r3, [r7, #24]
    break;
 800a4a0:	e10e      	b.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a4a2:	4b8d      	ldr	r3, [pc, #564]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a4a4:	61bb      	str	r3, [r7, #24]
    break;
 800a4a6:	e10b      	b.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a4a8:	4b8c      	ldr	r3, [pc, #560]	; (800a6dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a4aa:	61bb      	str	r3, [r7, #24]
    break;
 800a4ac:	e108      	b.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4ae:	4b88      	ldr	r3, [pc, #544]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b2:	f003 0303 	and.w	r3, r3, #3
 800a4b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a4b8:	4b85      	ldr	r3, [pc, #532]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4bc:	091b      	lsrs	r3, r3, #4
 800a4be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a4c4:	4b82      	ldr	r3, [pc, #520]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a4ce:	4b80      	ldr	r3, [pc, #512]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d2:	08db      	lsrs	r3, r3, #3
 800a4d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	fb02 f303 	mul.w	r3, r2, r3
 800a4de:	ee07 3a90 	vmov	s15, r3
 800a4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 80e1 	beq.w	800a6b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	f000 8083 	beq.w	800a600 <HAL_RCC_GetSysClockFreq+0x204>
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	f200 80a1 	bhi.w	800a644 <HAL_RCC_GetSysClockFreq+0x248>
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <HAL_RCC_GetSysClockFreq+0x114>
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d056      	beq.n	800a5bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800a50e:	e099      	b.n	800a644 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a510:	4b6f      	ldr	r3, [pc, #444]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d02d      	beq.n	800a578 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a51c:	4b6c      	ldr	r3, [pc, #432]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	08db      	lsrs	r3, r3, #3
 800a522:	f003 0303 	and.w	r3, r3, #3
 800a526:	4a6b      	ldr	r2, [pc, #428]	; (800a6d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a528:	fa22 f303 	lsr.w	r3, r2, r3
 800a52c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	ee07 3a90 	vmov	s15, r3
 800a534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	ee07 3a90 	vmov	s15, r3
 800a53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a546:	4b62      	ldr	r3, [pc, #392]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54e:	ee07 3a90 	vmov	s15, r3
 800a552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a556:	ed97 6a02 	vldr	s12, [r7, #8]
 800a55a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a6e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a572:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a576:	e087      	b.n	800a688 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	ee07 3a90 	vmov	s15, r3
 800a57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a582:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a6e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a58a:	4b51      	ldr	r3, [pc, #324]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a59a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a59e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a6e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ba:	e065      	b.n	800a688 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a6e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ce:	4b40      	ldr	r3, [pc, #256]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a6e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5fe:	e043      	b.n	800a688 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	ee07 3a90 	vmov	s15, r3
 800a606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a60a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a6ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800a60e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a612:	4b2f      	ldr	r3, [pc, #188]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a622:	ed97 6a02 	vldr	s12, [r7, #8]
 800a626:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a6e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a62a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a62e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a63a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a63e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a642:	e021      	b.n	800a688 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a64e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a6e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a656:	4b1e      	ldr	r3, [pc, #120]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a65e:	ee07 3a90 	vmov	s15, r3
 800a662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a666:	ed97 6a02 	vldr	s12, [r7, #8]
 800a66a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a6e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a66e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a67a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a686:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a688:	4b11      	ldr	r3, [pc, #68]	; (800a6d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68c:	0a5b      	lsrs	r3, r3, #9
 800a68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a692:	3301      	adds	r3, #1
 800a694:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	ee07 3a90 	vmov	s15, r3
 800a69c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ac:	ee17 3a90 	vmov	r3, s15
 800a6b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a6b2:	e005      	b.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	61bb      	str	r3, [r7, #24]
    break;
 800a6b8:	e002      	b.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a6ba:	4b07      	ldr	r3, [pc, #28]	; (800a6d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a6bc:	61bb      	str	r3, [r7, #24]
    break;
 800a6be:	bf00      	nop
  }

  return sysclockfreq;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3724      	adds	r7, #36	; 0x24
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	58024400 	.word	0x58024400
 800a6d4:	03d09000 	.word	0x03d09000
 800a6d8:	003d0900 	.word	0x003d0900
 800a6dc:	017d7840 	.word	0x017d7840
 800a6e0:	46000000 	.word	0x46000000
 800a6e4:	4c742400 	.word	0x4c742400
 800a6e8:	4a742400 	.word	0x4a742400
 800a6ec:	4bbebc20 	.word	0x4bbebc20

0800a6f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a6f6:	f7ff fe81 	bl	800a3fc <HAL_RCC_GetSysClockFreq>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	4b10      	ldr	r3, [pc, #64]	; (800a740 <HAL_RCC_GetHCLKFreq+0x50>)
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	0a1b      	lsrs	r3, r3, #8
 800a702:	f003 030f 	and.w	r3, r3, #15
 800a706:	490f      	ldr	r1, [pc, #60]	; (800a744 <HAL_RCC_GetHCLKFreq+0x54>)
 800a708:	5ccb      	ldrb	r3, [r1, r3]
 800a70a:	f003 031f 	and.w	r3, r3, #31
 800a70e:	fa22 f303 	lsr.w	r3, r2, r3
 800a712:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a714:	4b0a      	ldr	r3, [pc, #40]	; (800a740 <HAL_RCC_GetHCLKFreq+0x50>)
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	4a09      	ldr	r2, [pc, #36]	; (800a744 <HAL_RCC_GetHCLKFreq+0x54>)
 800a71e:	5cd3      	ldrb	r3, [r2, r3]
 800a720:	f003 031f 	and.w	r3, r3, #31
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	fa22 f303 	lsr.w	r3, r2, r3
 800a72a:	4a07      	ldr	r2, [pc, #28]	; (800a748 <HAL_RCC_GetHCLKFreq+0x58>)
 800a72c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a72e:	4a07      	ldr	r2, [pc, #28]	; (800a74c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a734:	4b04      	ldr	r3, [pc, #16]	; (800a748 <HAL_RCC_GetHCLKFreq+0x58>)
 800a736:	681b      	ldr	r3, [r3, #0]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	58024400 	.word	0x58024400
 800a744:	080194e8 	.word	0x080194e8
 800a748:	24000048 	.word	0x24000048
 800a74c:	24000044 	.word	0x24000044

0800a750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a754:	f7ff ffcc 	bl	800a6f0 <HAL_RCC_GetHCLKFreq>
 800a758:	4602      	mov	r2, r0
 800a75a:	4b06      	ldr	r3, [pc, #24]	; (800a774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	091b      	lsrs	r3, r3, #4
 800a760:	f003 0307 	and.w	r3, r3, #7
 800a764:	4904      	ldr	r1, [pc, #16]	; (800a778 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a766:	5ccb      	ldrb	r3, [r1, r3]
 800a768:	f003 031f 	and.w	r3, r3, #31
 800a76c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a770:	4618      	mov	r0, r3
 800a772:	bd80      	pop	{r7, pc}
 800a774:	58024400 	.word	0x58024400
 800a778:	080194e8 	.word	0x080194e8

0800a77c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a780:	f7ff ffb6 	bl	800a6f0 <HAL_RCC_GetHCLKFreq>
 800a784:	4602      	mov	r2, r0
 800a786:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	0a1b      	lsrs	r3, r3, #8
 800a78c:	f003 0307 	and.w	r3, r3, #7
 800a790:	4904      	ldr	r1, [pc, #16]	; (800a7a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a792:	5ccb      	ldrb	r3, [r1, r3]
 800a794:	f003 031f 	and.w	r3, r3, #31
 800a798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	58024400 	.word	0x58024400
 800a7a4:	080194e8 	.word	0x080194e8

0800a7a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	223f      	movs	r2, #63	; 0x3f
 800a7b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a7b8:	4b1a      	ldr	r3, [pc, #104]	; (800a824 <HAL_RCC_GetClockConfig+0x7c>)
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	f003 0207 	and.w	r2, r3, #7
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a7c4:	4b17      	ldr	r3, [pc, #92]	; (800a824 <HAL_RCC_GetClockConfig+0x7c>)
 800a7c6:	699b      	ldr	r3, [r3, #24]
 800a7c8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a7d0:	4b14      	ldr	r3, [pc, #80]	; (800a824 <HAL_RCC_GetClockConfig+0x7c>)
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	f003 020f 	and.w	r2, r3, #15
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a7dc:	4b11      	ldr	r3, [pc, #68]	; (800a824 <HAL_RCC_GetClockConfig+0x7c>)
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a7e8:	4b0e      	ldr	r3, [pc, #56]	; (800a824 <HAL_RCC_GetClockConfig+0x7c>)
 800a7ea:	69db      	ldr	r3, [r3, #28]
 800a7ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a7f4:	4b0b      	ldr	r3, [pc, #44]	; (800a824 <HAL_RCC_GetClockConfig+0x7c>)
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a800:	4b08      	ldr	r3, [pc, #32]	; (800a824 <HAL_RCC_GetClockConfig+0x7c>)
 800a802:	6a1b      	ldr	r3, [r3, #32]
 800a804:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a80c:	4b06      	ldr	r3, [pc, #24]	; (800a828 <HAL_RCC_GetClockConfig+0x80>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 020f 	and.w	r2, r3, #15
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	601a      	str	r2, [r3, #0]
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	58024400 	.word	0x58024400
 800a828:	52002000 	.word	0x52002000

0800a82c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a834:	2300      	movs	r3, #0
 800a836:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a838:	2300      	movs	r3, #0
 800a83a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a844:	2b00      	cmp	r3, #0
 800a846:	d03f      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a84c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a850:	d02a      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a852:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a856:	d824      	bhi.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a858:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a85c:	d018      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a85e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a862:	d81e      	bhi.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a86c:	d007      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a86e:	e018      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a870:	4bab      	ldr	r3, [pc, #684]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a874:	4aaa      	ldr	r2, [pc, #680]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a87a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a87c:	e015      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	3304      	adds	r3, #4
 800a882:	2102      	movs	r1, #2
 800a884:	4618      	mov	r0, r3
 800a886:	f001 fff3 	bl	800c870 <RCCEx_PLL2_Config>
 800a88a:	4603      	mov	r3, r0
 800a88c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a88e:	e00c      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3324      	adds	r3, #36	; 0x24
 800a894:	2102      	movs	r1, #2
 800a896:	4618      	mov	r0, r3
 800a898:	f002 f89c 	bl	800c9d4 <RCCEx_PLL3_Config>
 800a89c:	4603      	mov	r3, r0
 800a89e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a8a0:	e003      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a6:	e000      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a8a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d109      	bne.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a8b0:	4b9b      	ldr	r3, [pc, #620]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8bc:	4998      	ldr	r1, [pc, #608]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	650b      	str	r3, [r1, #80]	; 0x50
 800a8c2:	e001      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c4:	7dfb      	ldrb	r3, [r7, #23]
 800a8c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d03d      	beq.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	d826      	bhi.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a8dc:	a201      	add	r2, pc, #4	; (adr r2, 800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e2:	bf00      	nop
 800a8e4:	0800a8f9 	.word	0x0800a8f9
 800a8e8:	0800a907 	.word	0x0800a907
 800a8ec:	0800a919 	.word	0x0800a919
 800a8f0:	0800a931 	.word	0x0800a931
 800a8f4:	0800a931 	.word	0x0800a931
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8f8:	4b89      	ldr	r3, [pc, #548]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fc:	4a88      	ldr	r2, [pc, #544]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a8fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a904:	e015      	b.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	3304      	adds	r3, #4
 800a90a:	2100      	movs	r1, #0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f001 ffaf 	bl	800c870 <RCCEx_PLL2_Config>
 800a912:	4603      	mov	r3, r0
 800a914:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a916:	e00c      	b.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	3324      	adds	r3, #36	; 0x24
 800a91c:	2100      	movs	r1, #0
 800a91e:	4618      	mov	r0, r3
 800a920:	f002 f858 	bl	800c9d4 <RCCEx_PLL3_Config>
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a928:	e003      	b.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	75fb      	strb	r3, [r7, #23]
      break;
 800a92e:	e000      	b.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a930:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d109      	bne.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a938:	4b79      	ldr	r3, [pc, #484]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a93c:	f023 0207 	bic.w	r2, r3, #7
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a944:	4976      	ldr	r1, [pc, #472]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a946:	4313      	orrs	r3, r2
 800a948:	650b      	str	r3, [r1, #80]	; 0x50
 800a94a:	e001      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d042      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a964:	d02b      	beq.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a96a:	d825      	bhi.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a96c:	2bc0      	cmp	r3, #192	; 0xc0
 800a96e:	d028      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a970:	2bc0      	cmp	r3, #192	; 0xc0
 800a972:	d821      	bhi.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a974:	2b80      	cmp	r3, #128	; 0x80
 800a976:	d016      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a978:	2b80      	cmp	r3, #128	; 0x80
 800a97a:	d81d      	bhi.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a980:	2b40      	cmp	r3, #64	; 0x40
 800a982:	d007      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a984:	e018      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a986:	4b66      	ldr	r3, [pc, #408]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98a:	4a65      	ldr	r2, [pc, #404]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a98c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a990:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a992:	e017      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3304      	adds	r3, #4
 800a998:	2100      	movs	r1, #0
 800a99a:	4618      	mov	r0, r3
 800a99c:	f001 ff68 	bl	800c870 <RCCEx_PLL2_Config>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a9a4:	e00e      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3324      	adds	r3, #36	; 0x24
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f002 f811 	bl	800c9d4 <RCCEx_PLL3_Config>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a9b6:	e005      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a9bc:	e002      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a9be:	bf00      	nop
 800a9c0:	e000      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a9c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d109      	bne.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a9ca:	4b55      	ldr	r3, [pc, #340]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d6:	4952      	ldr	r1, [pc, #328]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	650b      	str	r3, [r1, #80]	; 0x50
 800a9dc:	e001      	b.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
 800a9e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d049      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9f8:	d030      	beq.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a9fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9fe:	d82a      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa04:	d02c      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800aa06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa0a:	d824      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa10:	d018      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800aa12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa16:	d81e      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800aa1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa20:	d007      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aa22:	e018      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa24:	4b3e      	ldr	r3, [pc, #248]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	4a3d      	ldr	r2, [pc, #244]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa30:	e017      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3304      	adds	r3, #4
 800aa36:	2100      	movs	r1, #0
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f001 ff19 	bl	800c870 <RCCEx_PLL2_Config>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aa42:	e00e      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3324      	adds	r3, #36	; 0x24
 800aa48:	2100      	movs	r1, #0
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f001 ffc2 	bl	800c9d4 <RCCEx_PLL3_Config>
 800aa50:	4603      	mov	r3, r0
 800aa52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa54:	e005      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	75fb      	strb	r3, [r7, #23]
      break;
 800aa5a:	e002      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aa5c:	bf00      	nop
 800aa5e:	e000      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aa60:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa62:	7dfb      	ldrb	r3, [r7, #23]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa68:	4b2d      	ldr	r3, [pc, #180]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa6c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa76:	492a      	ldr	r1, [pc, #168]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	658b      	str	r3, [r1, #88]	; 0x58
 800aa7c:	e001      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
 800aa80:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d04c      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa98:	d030      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800aa9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa9e:	d82a      	bhi.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aaa0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aaa4:	d02c      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800aaa6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aaaa:	d824      	bhi.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aaac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aab0:	d018      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800aab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aab6:	d81e      	bhi.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d003      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aabc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aac0:	d007      	beq.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aac2:	e018      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac4:	4b16      	ldr	r3, [pc, #88]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	4a15      	ldr	r2, [pc, #84]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aaca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aace:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aad0:	e017      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3304      	adds	r3, #4
 800aad6:	2100      	movs	r1, #0
 800aad8:	4618      	mov	r0, r3
 800aada:	f001 fec9 	bl	800c870 <RCCEx_PLL2_Config>
 800aade:	4603      	mov	r3, r0
 800aae0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aae2:	e00e      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	3324      	adds	r3, #36	; 0x24
 800aae8:	2100      	movs	r1, #0
 800aaea:	4618      	mov	r0, r3
 800aaec:	f001 ff72 	bl	800c9d4 <RCCEx_PLL3_Config>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aaf4:	e005      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	75fb      	strb	r3, [r7, #23]
      break;
 800aafa:	e002      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800aafc:	bf00      	nop
 800aafe:	e000      	b.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800ab00:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab02:	7dfb      	ldrb	r3, [r7, #23]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10d      	bne.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab08:	4b05      	ldr	r3, [pc, #20]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab16:	4902      	ldr	r1, [pc, #8]	; (800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	658b      	str	r3, [r1, #88]	; 0x58
 800ab1c:	e004      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800ab1e:	bf00      	nop
 800ab20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d032      	beq.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab38:	2b30      	cmp	r3, #48	; 0x30
 800ab3a:	d01c      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ab3c:	2b30      	cmp	r3, #48	; 0x30
 800ab3e:	d817      	bhi.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ab40:	2b20      	cmp	r3, #32
 800ab42:	d00c      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800ab44:	2b20      	cmp	r3, #32
 800ab46:	d813      	bhi.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d016      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800ab4c:	2b10      	cmp	r3, #16
 800ab4e:	d10f      	bne.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab50:	4baf      	ldr	r3, [pc, #700]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	4aae      	ldr	r2, [pc, #696]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ab5c:	e00e      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3304      	adds	r3, #4
 800ab62:	2102      	movs	r1, #2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f001 fe83 	bl	800c870 <RCCEx_PLL2_Config>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ab6e:	e005      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	75fb      	strb	r3, [r7, #23]
      break;
 800ab74:	e002      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ab76:	bf00      	nop
 800ab78:	e000      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800ab7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab7c:	7dfb      	ldrb	r3, [r7, #23]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d109      	bne.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab82:	4ba3      	ldr	r3, [pc, #652]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab8e:	49a0      	ldr	r1, [pc, #640]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ab94:	e001      	b.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
 800ab98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d047      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abae:	d030      	beq.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800abb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abb4:	d82a      	bhi.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800abb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abba:	d02c      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800abbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abc0:	d824      	bhi.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800abc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abc6:	d018      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800abc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abcc:	d81e      	bhi.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800abd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abd6:	d007      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800abd8:	e018      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abda:	4b8d      	ldr	r3, [pc, #564]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800abdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abde:	4a8c      	ldr	r2, [pc, #560]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800abe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abe4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800abe6:	e017      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3304      	adds	r3, #4
 800abec:	2100      	movs	r1, #0
 800abee:	4618      	mov	r0, r3
 800abf0:	f001 fe3e 	bl	800c870 <RCCEx_PLL2_Config>
 800abf4:	4603      	mov	r3, r0
 800abf6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800abf8:	e00e      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	3324      	adds	r3, #36	; 0x24
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f001 fee7 	bl	800c9d4 <RCCEx_PLL3_Config>
 800ac06:	4603      	mov	r3, r0
 800ac08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ac0a:	e005      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac10:	e002      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800ac12:	bf00      	nop
 800ac14:	e000      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800ac16:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac18:	7dfb      	ldrb	r3, [r7, #23]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d109      	bne.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac1e:	4b7c      	ldr	r3, [pc, #496]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac22:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac2a:	4979      	ldr	r1, [pc, #484]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	650b      	str	r3, [r1, #80]	; 0x50
 800ac30:	e001      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac32:	7dfb      	ldrb	r3, [r7, #23]
 800ac34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d049      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac4a:	d02e      	beq.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800ac4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac50:	d828      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac56:	d02a      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x482>
 800ac58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac5c:	d822      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac62:	d026      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800ac64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac68:	d81c      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac6e:	d010      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800ac70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac74:	d816      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d01d      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800ac7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac7e:	d111      	bne.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3304      	adds	r3, #4
 800ac84:	2101      	movs	r1, #1
 800ac86:	4618      	mov	r0, r3
 800ac88:	f001 fdf2 	bl	800c870 <RCCEx_PLL2_Config>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ac90:	e012      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	3324      	adds	r3, #36	; 0x24
 800ac96:	2101      	movs	r1, #1
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f001 fe9b 	bl	800c9d4 <RCCEx_PLL3_Config>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aca2:	e009      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	75fb      	strb	r3, [r7, #23]
      break;
 800aca8:	e006      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800acaa:	bf00      	nop
 800acac:	e004      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800acae:	bf00      	nop
 800acb0:	e002      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800acb2:	bf00      	nop
 800acb4:	e000      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800acb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d109      	bne.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800acbe:	4b54      	ldr	r3, [pc, #336]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800acc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acca:	4951      	ldr	r1, [pc, #324]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800accc:	4313      	orrs	r3, r2
 800acce:	650b      	str	r3, [r1, #80]	; 0x50
 800acd0:	e001      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d04b      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ace8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acec:	d02e      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800acee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acf2:	d828      	bhi.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800acf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf8:	d02a      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800acfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acfe:	d822      	bhi.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ad00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad04:	d026      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800ad06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad0a:	d81c      	bhi.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ad0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad10:	d010      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800ad12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad16:	d816      	bhi.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01d      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800ad1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad20:	d111      	bne.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3304      	adds	r3, #4
 800ad26:	2101      	movs	r1, #1
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f001 fda1 	bl	800c870 <RCCEx_PLL2_Config>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ad32:	e012      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3324      	adds	r3, #36	; 0x24
 800ad38:	2101      	movs	r1, #1
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f001 fe4a 	bl	800c9d4 <RCCEx_PLL3_Config>
 800ad40:	4603      	mov	r3, r0
 800ad42:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ad44:	e009      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	75fb      	strb	r3, [r7, #23]
      break;
 800ad4a:	e006      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ad4c:	bf00      	nop
 800ad4e:	e004      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ad50:	bf00      	nop
 800ad52:	e002      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ad54:	bf00      	nop
 800ad56:	e000      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800ad58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10a      	bne.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad60:	4b2b      	ldr	r3, [pc, #172]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad64:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad6e:	4928      	ldr	r1, [pc, #160]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ad70:	4313      	orrs	r3, r2
 800ad72:	658b      	str	r3, [r1, #88]	; 0x58
 800ad74:	e001      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d02f      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad8e:	d00e      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ad90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad94:	d814      	bhi.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d015      	beq.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ad9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad9e:	d10f      	bne.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ada0:	4b1b      	ldr	r3, [pc, #108]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ada2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada4:	4a1a      	ldr	r2, [pc, #104]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ada6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800adac:	e00c      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3304      	adds	r3, #4
 800adb2:	2101      	movs	r1, #1
 800adb4:	4618      	mov	r0, r3
 800adb6:	f001 fd5b 	bl	800c870 <RCCEx_PLL2_Config>
 800adba:	4603      	mov	r3, r0
 800adbc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800adbe:	e003      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	75fb      	strb	r3, [r7, #23]
      break;
 800adc4:	e000      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800adc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800adce:	4b10      	ldr	r3, [pc, #64]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800add0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adda:	490d      	ldr	r1, [pc, #52]	; (800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800addc:	4313      	orrs	r3, r2
 800adde:	650b      	str	r3, [r1, #80]	; 0x50
 800ade0:	e001      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
 800ade4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d033      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d81c      	bhi.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800adfa:	a201      	add	r2, pc, #4	; (adr r2, 800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800adfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae00:	0800ae3b 	.word	0x0800ae3b
 800ae04:	0800ae15 	.word	0x0800ae15
 800ae08:	0800ae23 	.word	0x0800ae23
 800ae0c:	0800ae3b 	.word	0x0800ae3b
 800ae10:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae14:	4bb8      	ldr	r3, [pc, #736]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	4ab7      	ldr	r2, [pc, #732]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ae20:	e00c      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3304      	adds	r3, #4
 800ae26:	2102      	movs	r1, #2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f001 fd21 	bl	800c870 <RCCEx_PLL2_Config>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ae32:	e003      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	75fb      	strb	r3, [r7, #23]
      break;
 800ae38:	e000      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ae3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d109      	bne.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae42:	4bad      	ldr	r3, [pc, #692]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae46:	f023 0203 	bic.w	r2, r3, #3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae4e:	49aa      	ldr	r1, [pc, #680]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ae50:	4313      	orrs	r3, r2
 800ae52:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ae54:	e001      	b.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae56:	7dfb      	ldrb	r3, [r7, #23]
 800ae58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f000 8086 	beq.w	800af74 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae68:	4ba4      	ldr	r3, [pc, #656]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4aa3      	ldr	r2, [pc, #652]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ae6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae74:	f7fa fbe4 	bl	8005640 <HAL_GetTick>
 800ae78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae7a:	e009      	b.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae7c:	f7fa fbe0 	bl	8005640 <HAL_GetTick>
 800ae80:	4602      	mov	r2, r0
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b64      	cmp	r3, #100	; 0x64
 800ae88:	d902      	bls.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	75fb      	strb	r3, [r7, #23]
        break;
 800ae8e:	e005      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae90:	4b9a      	ldr	r3, [pc, #616]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d0ef      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d166      	bne.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aea2:	4b95      	ldr	r3, [pc, #596]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aea4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aeac:	4053      	eors	r3, r2
 800aeae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d013      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aeb6:	4b90      	ldr	r3, [pc, #576]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aeb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aebe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aec0:	4b8d      	ldr	r3, [pc, #564]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec4:	4a8c      	ldr	r2, [pc, #560]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aecc:	4b8a      	ldr	r3, [pc, #552]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed0:	4a89      	ldr	r2, [pc, #548]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aed6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aed8:	4a87      	ldr	r2, [pc, #540]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aee8:	d115      	bne.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeea:	f7fa fba9 	bl	8005640 <HAL_GetTick>
 800aeee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aef0:	e00b      	b.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aef2:	f7fa fba5 	bl	8005640 <HAL_GetTick>
 800aef6:	4602      	mov	r2, r0
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	f241 3288 	movw	r2, #5000	; 0x1388
 800af00:	4293      	cmp	r3, r2
 800af02:	d902      	bls.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800af04:	2303      	movs	r3, #3
 800af06:	75fb      	strb	r3, [r7, #23]
            break;
 800af08:	e005      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af0a:	4b7b      	ldr	r3, [pc, #492]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af0e:	f003 0302 	and.w	r3, r3, #2
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0ed      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d126      	bne.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af2a:	d10d      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800af2c:	4b72      	ldr	r3, [pc, #456]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af3a:	0919      	lsrs	r1, r3, #4
 800af3c:	4b70      	ldr	r3, [pc, #448]	; (800b100 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800af3e:	400b      	ands	r3, r1
 800af40:	496d      	ldr	r1, [pc, #436]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af42:	4313      	orrs	r3, r2
 800af44:	610b      	str	r3, [r1, #16]
 800af46:	e005      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800af48:	4b6b      	ldr	r3, [pc, #428]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	4a6a      	ldr	r2, [pc, #424]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af52:	6113      	str	r3, [r2, #16]
 800af54:	4b68      	ldr	r3, [pc, #416]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af62:	4965      	ldr	r1, [pc, #404]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800af64:	4313      	orrs	r3, r2
 800af66:	670b      	str	r3, [r1, #112]	; 0x70
 800af68:	e004      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
 800af6c:	75bb      	strb	r3, [r7, #22]
 800af6e:	e001      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af70:	7dfb      	ldrb	r3, [r7, #23]
 800af72:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d07e      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af84:	2b28      	cmp	r3, #40	; 0x28
 800af86:	d867      	bhi.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800af88:	a201      	add	r2, pc, #4	; (adr r2, 800af90 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800af8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8e:	bf00      	nop
 800af90:	0800b05f 	.word	0x0800b05f
 800af94:	0800b059 	.word	0x0800b059
 800af98:	0800b059 	.word	0x0800b059
 800af9c:	0800b059 	.word	0x0800b059
 800afa0:	0800b059 	.word	0x0800b059
 800afa4:	0800b059 	.word	0x0800b059
 800afa8:	0800b059 	.word	0x0800b059
 800afac:	0800b059 	.word	0x0800b059
 800afb0:	0800b035 	.word	0x0800b035
 800afb4:	0800b059 	.word	0x0800b059
 800afb8:	0800b059 	.word	0x0800b059
 800afbc:	0800b059 	.word	0x0800b059
 800afc0:	0800b059 	.word	0x0800b059
 800afc4:	0800b059 	.word	0x0800b059
 800afc8:	0800b059 	.word	0x0800b059
 800afcc:	0800b059 	.word	0x0800b059
 800afd0:	0800b047 	.word	0x0800b047
 800afd4:	0800b059 	.word	0x0800b059
 800afd8:	0800b059 	.word	0x0800b059
 800afdc:	0800b059 	.word	0x0800b059
 800afe0:	0800b059 	.word	0x0800b059
 800afe4:	0800b059 	.word	0x0800b059
 800afe8:	0800b059 	.word	0x0800b059
 800afec:	0800b059 	.word	0x0800b059
 800aff0:	0800b05f 	.word	0x0800b05f
 800aff4:	0800b059 	.word	0x0800b059
 800aff8:	0800b059 	.word	0x0800b059
 800affc:	0800b059 	.word	0x0800b059
 800b000:	0800b059 	.word	0x0800b059
 800b004:	0800b059 	.word	0x0800b059
 800b008:	0800b059 	.word	0x0800b059
 800b00c:	0800b059 	.word	0x0800b059
 800b010:	0800b05f 	.word	0x0800b05f
 800b014:	0800b059 	.word	0x0800b059
 800b018:	0800b059 	.word	0x0800b059
 800b01c:	0800b059 	.word	0x0800b059
 800b020:	0800b059 	.word	0x0800b059
 800b024:	0800b059 	.word	0x0800b059
 800b028:	0800b059 	.word	0x0800b059
 800b02c:	0800b059 	.word	0x0800b059
 800b030:	0800b05f 	.word	0x0800b05f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3304      	adds	r3, #4
 800b038:	2101      	movs	r1, #1
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 fc18 	bl	800c870 <RCCEx_PLL2_Config>
 800b040:	4603      	mov	r3, r0
 800b042:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b044:	e00c      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	3324      	adds	r3, #36	; 0x24
 800b04a:	2101      	movs	r1, #1
 800b04c:	4618      	mov	r0, r3
 800b04e:	f001 fcc1 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b052:	4603      	mov	r3, r0
 800b054:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b056:	e003      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	75fb      	strb	r3, [r7, #23]
      break;
 800b05c:	e000      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b05e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b060:	7dfb      	ldrb	r3, [r7, #23]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d109      	bne.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b066:	4b24      	ldr	r3, [pc, #144]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b06a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b072:	4921      	ldr	r1, [pc, #132]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b074:	4313      	orrs	r3, r2
 800b076:	654b      	str	r3, [r1, #84]	; 0x54
 800b078:	e001      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 0302 	and.w	r3, r3, #2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d03e      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b08e:	2b05      	cmp	r3, #5
 800b090:	d820      	bhi.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b092:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b098:	0800b0db 	.word	0x0800b0db
 800b09c:	0800b0b1 	.word	0x0800b0b1
 800b0a0:	0800b0c3 	.word	0x0800b0c3
 800b0a4:	0800b0db 	.word	0x0800b0db
 800b0a8:	0800b0db 	.word	0x0800b0db
 800b0ac:	0800b0db 	.word	0x0800b0db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f001 fbda 	bl	800c870 <RCCEx_PLL2_Config>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b0c0:	e00c      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3324      	adds	r3, #36	; 0x24
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 fc83 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b0d2:	e003      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0d8:	e000      	b.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b0da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0dc:	7dfb      	ldrb	r3, [r7, #23]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d110      	bne.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b0e2:	4b05      	ldr	r3, [pc, #20]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0e6:	f023 0207 	bic.w	r2, r3, #7
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0ee:	4902      	ldr	r1, [pc, #8]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	654b      	str	r3, [r1, #84]	; 0x54
 800b0f4:	e008      	b.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b0f6:	bf00      	nop
 800b0f8:	58024400 	.word	0x58024400
 800b0fc:	58024800 	.word	0x58024800
 800b100:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d039      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b11a:	2b05      	cmp	r3, #5
 800b11c:	d820      	bhi.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b11e:	a201      	add	r2, pc, #4	; (adr r2, 800b124 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b124:	0800b167 	.word	0x0800b167
 800b128:	0800b13d 	.word	0x0800b13d
 800b12c:	0800b14f 	.word	0x0800b14f
 800b130:	0800b167 	.word	0x0800b167
 800b134:	0800b167 	.word	0x0800b167
 800b138:	0800b167 	.word	0x0800b167
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3304      	adds	r3, #4
 800b140:	2101      	movs	r1, #1
 800b142:	4618      	mov	r0, r3
 800b144:	f001 fb94 	bl	800c870 <RCCEx_PLL2_Config>
 800b148:	4603      	mov	r3, r0
 800b14a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b14c:	e00c      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3324      	adds	r3, #36	; 0x24
 800b152:	2101      	movs	r1, #1
 800b154:	4618      	mov	r0, r3
 800b156:	f001 fc3d 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b15a:	4603      	mov	r3, r0
 800b15c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b15e:	e003      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	75fb      	strb	r3, [r7, #23]
      break;
 800b164:	e000      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b166:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b168:	7dfb      	ldrb	r3, [r7, #23]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10a      	bne.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b16e:	4bb7      	ldr	r3, [pc, #732]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b172:	f023 0207 	bic.w	r2, r3, #7
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b17c:	49b3      	ldr	r1, [pc, #716]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b17e:	4313      	orrs	r3, r2
 800b180:	658b      	str	r3, [r1, #88]	; 0x58
 800b182:	e001      	b.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b184:	7dfb      	ldrb	r3, [r7, #23]
 800b186:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f003 0320 	and.w	r3, r3, #32
 800b190:	2b00      	cmp	r3, #0
 800b192:	d04b      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b19a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b19e:	d02e      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b1a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1a4:	d828      	bhi.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1aa:	d02a      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1b0:	d822      	bhi.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b1b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1b6:	d026      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b1b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1bc:	d81c      	bhi.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b1be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c2:	d010      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b1c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c8:	d816      	bhi.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d01d      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b1ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1d2:	d111      	bne.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	2100      	movs	r1, #0
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f001 fb48 	bl	800c870 <RCCEx_PLL2_Config>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b1e4:	e012      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	3324      	adds	r3, #36	; 0x24
 800b1ea:	2102      	movs	r1, #2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f001 fbf1 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b1f6:	e009      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b1fc:	e006      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b1fe:	bf00      	nop
 800b200:	e004      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b202:	bf00      	nop
 800b204:	e002      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b206:	bf00      	nop
 800b208:	e000      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b20a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10a      	bne.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b212:	4b8e      	ldr	r3, [pc, #568]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b216:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b220:	498a      	ldr	r1, [pc, #552]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b222:	4313      	orrs	r3, r2
 800b224:	654b      	str	r3, [r1, #84]	; 0x54
 800b226:	e001      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b234:	2b00      	cmp	r3, #0
 800b236:	d04b      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b23e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b242:	d02e      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b244:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b248:	d828      	bhi.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b24a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b24e:	d02a      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b254:	d822      	bhi.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b25a:	d026      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b25c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b260:	d81c      	bhi.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b266:	d010      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b26c:	d816      	bhi.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d01d      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b276:	d111      	bne.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3304      	adds	r3, #4
 800b27c:	2100      	movs	r1, #0
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 faf6 	bl	800c870 <RCCEx_PLL2_Config>
 800b284:	4603      	mov	r3, r0
 800b286:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b288:	e012      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3324      	adds	r3, #36	; 0x24
 800b28e:	2102      	movs	r1, #2
 800b290:	4618      	mov	r0, r3
 800b292:	f001 fb9f 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b296:	4603      	mov	r3, r0
 800b298:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b29a:	e009      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	75fb      	strb	r3, [r7, #23]
      break;
 800b2a0:	e006      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b2a2:	bf00      	nop
 800b2a4:	e004      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b2a6:	bf00      	nop
 800b2a8:	e002      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b2aa:	bf00      	nop
 800b2ac:	e000      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b2ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2b0:	7dfb      	ldrb	r3, [r7, #23]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10a      	bne.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b2b6:	4b65      	ldr	r3, [pc, #404]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2c4:	4961      	ldr	r1, [pc, #388]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	658b      	str	r3, [r1, #88]	; 0x58
 800b2ca:	e001      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2cc:	7dfb      	ldrb	r3, [r7, #23]
 800b2ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d04b      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b2e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b2e6:	d02e      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b2e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b2ec:	d828      	bhi.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b2ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2f2:	d02a      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b2f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2f8:	d822      	bhi.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b2fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b2fe:	d026      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b300:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b304:	d81c      	bhi.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b30a:	d010      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b30c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b310:	d816      	bhi.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b312:	2b00      	cmp	r3, #0
 800b314:	d01d      	beq.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b31a:	d111      	bne.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3304      	adds	r3, #4
 800b320:	2100      	movs	r1, #0
 800b322:	4618      	mov	r0, r3
 800b324:	f001 faa4 	bl	800c870 <RCCEx_PLL2_Config>
 800b328:	4603      	mov	r3, r0
 800b32a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b32c:	e012      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	3324      	adds	r3, #36	; 0x24
 800b332:	2102      	movs	r1, #2
 800b334:	4618      	mov	r0, r3
 800b336:	f001 fb4d 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b33a:	4603      	mov	r3, r0
 800b33c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b33e:	e009      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	75fb      	strb	r3, [r7, #23]
      break;
 800b344:	e006      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b346:	bf00      	nop
 800b348:	e004      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b34a:	bf00      	nop
 800b34c:	e002      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b34e:	bf00      	nop
 800b350:	e000      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b352:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b354:	7dfb      	ldrb	r3, [r7, #23]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10a      	bne.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b35a:	4b3c      	ldr	r3, [pc, #240]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b35c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b35e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b368:	4938      	ldr	r1, [pc, #224]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	658b      	str	r3, [r1, #88]	; 0x58
 800b36e:	e001      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b370:	7dfb      	ldrb	r3, [r7, #23]
 800b372:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 0308 	and.w	r3, r3, #8
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d01a      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b38a:	d10a      	bne.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	3324      	adds	r3, #36	; 0x24
 800b390:	2102      	movs	r1, #2
 800b392:	4618      	mov	r0, r3
 800b394:	f001 fb1e 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b3a2:	4b2a      	ldr	r3, [pc, #168]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3b0:	4926      	ldr	r1, [pc, #152]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 0310 	and.w	r3, r3, #16
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d01a      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3cc:	d10a      	bne.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3324      	adds	r3, #36	; 0x24
 800b3d2:	2102      	movs	r1, #2
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f001 fafd 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b3e4:	4b19      	ldr	r3, [pc, #100]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b3e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3f2:	4916      	ldr	r1, [pc, #88]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b400:	2b00      	cmp	r3, #0
 800b402:	d036      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b40a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b40e:	d01f      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b414:	d817      	bhi.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b416:	2b00      	cmp	r3, #0
 800b418:	d003      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b41a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b41e:	d009      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b420:	e011      	b.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	3304      	adds	r3, #4
 800b426:	2100      	movs	r1, #0
 800b428:	4618      	mov	r0, r3
 800b42a:	f001 fa21 	bl	800c870 <RCCEx_PLL2_Config>
 800b42e:	4603      	mov	r3, r0
 800b430:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b432:	e00e      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3324      	adds	r3, #36	; 0x24
 800b438:	2102      	movs	r1, #2
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 faca 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b440:	4603      	mov	r3, r0
 800b442:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b444:	e005      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	75fb      	strb	r3, [r7, #23]
      break;
 800b44a:	e002      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b44c:	58024400 	.word	0x58024400
      break;
 800b450:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b452:	7dfb      	ldrb	r3, [r7, #23]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10a      	bne.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b458:	4b93      	ldr	r3, [pc, #588]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b45c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b466:	4990      	ldr	r1, [pc, #576]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b468:	4313      	orrs	r3, r2
 800b46a:	658b      	str	r3, [r1, #88]	; 0x58
 800b46c:	e001      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b46e:	7dfb      	ldrb	r3, [r7, #23]
 800b470:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d033      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b488:	d01c      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b48a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b48e:	d816      	bhi.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b494:	d003      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b49a:	d007      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b49c:	e00f      	b.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b49e:	4b82      	ldr	r3, [pc, #520]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a2:	4a81      	ldr	r2, [pc, #516]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b4aa:	e00c      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3324      	adds	r3, #36	; 0x24
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f001 fa8e 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b4bc:	e003      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4c2:	e000      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b4c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4c6:	7dfb      	ldrb	r3, [r7, #23]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10a      	bne.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b4cc:	4b76      	ldr	r3, [pc, #472]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4da:	4973      	ldr	r1, [pc, #460]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	654b      	str	r3, [r1, #84]	; 0x54
 800b4e0:	e001      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d029      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d003      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b4fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4fe:	d007      	beq.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b500:	e00f      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b502:	4b69      	ldr	r3, [pc, #420]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b506:	4a68      	ldr	r2, [pc, #416]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b50c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b50e:	e00b      	b.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	3304      	adds	r3, #4
 800b514:	2102      	movs	r1, #2
 800b516:	4618      	mov	r0, r3
 800b518:	f001 f9aa 	bl	800c870 <RCCEx_PLL2_Config>
 800b51c:	4603      	mov	r3, r0
 800b51e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b520:	e002      	b.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	75fb      	strb	r3, [r7, #23]
      break;
 800b526:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b528:	7dfb      	ldrb	r3, [r7, #23]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d109      	bne.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b52e:	4b5e      	ldr	r3, [pc, #376]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b532:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b53a:	495b      	ldr	r1, [pc, #364]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b53c:	4313      	orrs	r3, r2
 800b53e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b540:	e001      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	3324      	adds	r3, #36	; 0x24
 800b556:	2102      	movs	r1, #2
 800b558:	4618      	mov	r0, r3
 800b55a:	f001 fa3b 	bl	800c9d4 <RCCEx_PLL3_Config>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d030      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b57c:	d017      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b57e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b582:	d811      	bhi.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b588:	d013      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b58a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b58e:	d80b      	bhi.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b590:	2b00      	cmp	r3, #0
 800b592:	d010      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b598:	d106      	bne.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b59a:	4b43      	ldr	r3, [pc, #268]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59e:	4a42      	ldr	r2, [pc, #264]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b5a6:	e007      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b5ac:	e004      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b5ae:	bf00      	nop
 800b5b0:	e002      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b5b2:	bf00      	nop
 800b5b4:	e000      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b5b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5b8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d109      	bne.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b5be:	4b3a      	ldr	r3, [pc, #232]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ca:	4937      	ldr	r1, [pc, #220]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	654b      	str	r3, [r1, #84]	; 0x54
 800b5d0:	e001      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
 800b5d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d008      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b5e2:	4b31      	ldr	r3, [pc, #196]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ee:	492e      	ldr	r1, [pc, #184]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d009      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b600:	4b29      	ldr	r3, [pc, #164]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b60e:	4926      	ldr	r1, [pc, #152]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b610:	4313      	orrs	r3, r2
 800b612:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d008      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b620:	4b21      	ldr	r3, [pc, #132]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b624:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b62c:	491e      	ldr	r1, [pc, #120]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b62e:	4313      	orrs	r3, r2
 800b630:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00d      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b63e:	4b1a      	ldr	r3, [pc, #104]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	4a19      	ldr	r2, [pc, #100]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b644:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b648:	6113      	str	r3, [r2, #16]
 800b64a:	4b17      	ldr	r3, [pc, #92]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b64c:	691a      	ldr	r2, [r3, #16]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b654:	4914      	ldr	r1, [pc, #80]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b656:	4313      	orrs	r3, r2
 800b658:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	da08      	bge.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b662:	4b11      	ldr	r3, [pc, #68]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66e:	490e      	ldr	r1, [pc, #56]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b670:	4313      	orrs	r3, r2
 800b672:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d009      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b680:	4b09      	ldr	r3, [pc, #36]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b684:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b68e:	4906      	ldr	r1, [pc, #24]	; (800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b690:	4313      	orrs	r3, r2
 800b692:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b694:	7dbb      	ldrb	r3, [r7, #22]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	e000      	b.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3718      	adds	r7, #24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	58024400 	.word	0x58024400

0800b6ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b090      	sub	sp, #64	; 0x40
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ba:	f040 8095 	bne.w	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b6be:	4bae      	ldr	r3, [pc, #696]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c2:	f003 0307 	and.w	r3, r3, #7
 800b6c6:	633b      	str	r3, [r7, #48]	; 0x30
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	2b04      	cmp	r3, #4
 800b6cc:	f200 8088 	bhi.w	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b6d0:	a201      	add	r2, pc, #4	; (adr r2, 800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800b6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d6:	bf00      	nop
 800b6d8:	0800b6ed 	.word	0x0800b6ed
 800b6dc:	0800b715 	.word	0x0800b715
 800b6e0:	0800b73d 	.word	0x0800b73d
 800b6e4:	0800b7d9 	.word	0x0800b7d9
 800b6e8:	0800b765 	.word	0x0800b765

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6ec:	4ba2      	ldr	r3, [pc, #648]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6f8:	d108      	bne.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 ff64 	bl	800c5cc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b708:	f000 bc95 	b.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b710:	f000 bc91 	b.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b714:	4b98      	ldr	r3, [pc, #608]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b71c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b720:	d108      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b722:	f107 0318 	add.w	r3, r7, #24
 800b726:	4618      	mov	r0, r3
 800b728:	f000 fca8 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b730:	f000 bc81 	b.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b734:	2300      	movs	r3, #0
 800b736:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b738:	f000 bc7d 	b.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b73c:	4b8e      	ldr	r3, [pc, #568]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b748:	d108      	bne.n	800b75c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b74a:	f107 030c 	add.w	r3, r7, #12
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 fde8 	bl	800c324 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b758:	f000 bc6d 	b.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b760:	f000 bc69 	b.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b764:	4b84      	ldr	r3, [pc, #528]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b768:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b76c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b76e:	4b82      	ldr	r3, [pc, #520]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f003 0304 	and.w	r3, r3, #4
 800b776:	2b04      	cmp	r3, #4
 800b778:	d10c      	bne.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800b77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d109      	bne.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b780:	4b7d      	ldr	r3, [pc, #500]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	08db      	lsrs	r3, r3, #3
 800b786:	f003 0303 	and.w	r3, r3, #3
 800b78a:	4a7c      	ldr	r2, [pc, #496]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b78c:	fa22 f303 	lsr.w	r3, r2, r3
 800b790:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b792:	e01f      	b.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b794:	4b78      	ldr	r3, [pc, #480]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b79c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7a0:	d106      	bne.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7a8:	d102      	bne.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b7aa:	4b75      	ldr	r3, [pc, #468]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7ae:	e011      	b.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7b0:	4b71      	ldr	r3, [pc, #452]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7bc:	d106      	bne.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800b7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7c4:	d102      	bne.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b7c6:	4b6f      	ldr	r3, [pc, #444]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7ca:	e003      	b.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b7d0:	f000 bc31 	b.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7d4:	f000 bc2f 	b.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b7d8:	4b6b      	ldr	r3, [pc, #428]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7dc:	f000 bc2b 	b.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7e4:	f000 bc27 	b.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ee:	f040 8095 	bne.w	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b7f2:	4b61      	ldr	r3, [pc, #388]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b7fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b802:	d04d      	beq.n	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800b804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b80a:	f200 8084 	bhi.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	2bc0      	cmp	r3, #192	; 0xc0
 800b812:	d07d      	beq.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b816:	2bc0      	cmp	r3, #192	; 0xc0
 800b818:	d87d      	bhi.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	2b80      	cmp	r3, #128	; 0x80
 800b81e:	d02d      	beq.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	2b80      	cmp	r3, #128	; 0x80
 800b824:	d877      	bhi.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	2b40      	cmp	r3, #64	; 0x40
 800b830:	d012      	beq.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b832:	e070      	b.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b834:	4b50      	ldr	r3, [pc, #320]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b83c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b840:	d107      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b846:	4618      	mov	r0, r3
 800b848:	f000 fec0 	bl	800c5cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b850:	e3f1      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b856:	e3ee      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b858:	4b47      	ldr	r3, [pc, #284]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b864:	d107      	bne.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b866:	f107 0318 	add.w	r3, r7, #24
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 fc06 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b874:	e3df      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b87a:	e3dc      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b87c:	4b3e      	ldr	r3, [pc, #248]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b888:	d107      	bne.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b88a:	f107 030c 	add.w	r3, r7, #12
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 fd48 	bl	800c324 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b898:	e3cd      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b89e:	e3ca      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b8a0:	4b35      	ldr	r3, [pc, #212]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8a8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8aa:	4b33      	ldr	r3, [pc, #204]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 0304 	and.w	r3, r3, #4
 800b8b2:	2b04      	cmp	r3, #4
 800b8b4:	d10c      	bne.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800b8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d109      	bne.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b8bc:	4b2e      	ldr	r3, [pc, #184]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	08db      	lsrs	r3, r3, #3
 800b8c2:	f003 0303 	and.w	r3, r3, #3
 800b8c6:	4a2d      	ldr	r2, [pc, #180]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b8c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8ce:	e01e      	b.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8d0:	4b29      	ldr	r3, [pc, #164]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8dc:	d106      	bne.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8e4:	d102      	bne.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b8e6:	4b26      	ldr	r3, [pc, #152]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800b8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8ea:	e010      	b.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8ec:	4b22      	ldr	r3, [pc, #136]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8f8:	d106      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b900:	d102      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b902:	4b20      	ldr	r3, [pc, #128]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b904:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b906:	e002      	b.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b908:	2300      	movs	r3, #0
 800b90a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b90c:	e393      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b90e:	e392      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b910:	4b1d      	ldr	r3, [pc, #116]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b914:	e38f      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b91a:	e38c      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b922:	f040 80a7 	bne.w	800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b926:	4b14      	ldr	r3, [pc, #80]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b92a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b92e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b936:	d05f      	beq.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b93e:	f200 8096 	bhi.w	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b948:	f000 808e 	beq.w	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800b94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b952:	f200 808c 	bhi.w	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b95c:	d03a      	beq.n	800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b964:	f200 8083 	bhi.w	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00e      	beq.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b974:	d01c      	beq.n	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800b976:	e07a      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b978:	58024400 	.word	0x58024400
 800b97c:	03d09000 	.word	0x03d09000
 800b980:	003d0900 	.word	0x003d0900
 800b984:	017d7840 	.word	0x017d7840
 800b988:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b98c:	4baa      	ldr	r3, [pc, #680]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b998:	d107      	bne.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 fe14 	bl	800c5cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9a8:	e345      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9ae:	e342      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9b0:	4ba1      	ldr	r3, [pc, #644]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9bc:	d107      	bne.n	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9be:	f107 0318 	add.w	r3, r7, #24
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 fb5a 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9cc:	e333      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9d2:	e330      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9d4:	4b98      	ldr	r3, [pc, #608]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9e0:	d107      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9e2:	f107 030c 	add.w	r3, r7, #12
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 fc9c 	bl	800c324 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b9f0:	e321      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b9f6:	e31e      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b9f8:	4b8f      	ldr	r3, [pc, #572]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b9fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba00:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba02:	4b8d      	ldr	r3, [pc, #564]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f003 0304 	and.w	r3, r3, #4
 800ba0a:	2b04      	cmp	r3, #4
 800ba0c:	d10c      	bne.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800ba0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d109      	bne.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba14:	4b88      	ldr	r3, [pc, #544]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	08db      	lsrs	r3, r3, #3
 800ba1a:	f003 0303 	and.w	r3, r3, #3
 800ba1e:	4a87      	ldr	r2, [pc, #540]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ba20:	fa22 f303 	lsr.w	r3, r2, r3
 800ba24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba26:	e01e      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba28:	4b83      	ldr	r3, [pc, #524]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba34:	d106      	bne.n	800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800ba36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba3c:	d102      	bne.n	800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ba3e:	4b80      	ldr	r3, [pc, #512]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ba40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba42:	e010      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba44:	4b7c      	ldr	r3, [pc, #496]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba50:	d106      	bne.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800ba52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba58:	d102      	bne.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ba5a:	4b7a      	ldr	r3, [pc, #488]	; (800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ba5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba5e:	e002      	b.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ba64:	e2e7      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ba66:	e2e6      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ba68:	4b77      	ldr	r3, [pc, #476]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800ba6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba6c:	e2e3      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ba72:	e2e0      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba7a:	f040 809c 	bne.w	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ba7e:	4b6e      	ldr	r3, [pc, #440]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ba80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba82:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ba86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba8e:	d054      	beq.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba96:	f200 808b 	bhi.w	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800baa0:	f000 8083 	beq.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800baa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800baaa:	f200 8081 	bhi.w	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bab4:	d02f      	beq.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800babc:	d878      	bhi.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800baca:	d012      	beq.n	800baf2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800bacc:	e070      	b.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bace:	4b5a      	ldr	r3, [pc, #360]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bada:	d107      	bne.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800badc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 fd73 	bl	800c5cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800baea:	e2a4      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800baec:	2300      	movs	r3, #0
 800baee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800baf0:	e2a1      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baf2:	4b51      	ldr	r3, [pc, #324]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bafa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bafe:	d107      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb00:	f107 0318 	add.w	r3, r7, #24
 800bb04:	4618      	mov	r0, r3
 800bb06:	f000 fab9 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800bb0e:	e292      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bb10:	2300      	movs	r3, #0
 800bb12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb14:	e28f      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb16:	4b48      	ldr	r3, [pc, #288]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb22:	d107      	bne.n	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb24:	f107 030c 	add.w	r3, r7, #12
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 fbfb 	bl	800c324 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bb32:	e280      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb38:	e27d      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bb3a:	4b3f      	ldr	r3, [pc, #252]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb42:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb44:	4b3c      	ldr	r3, [pc, #240]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	d10c      	bne.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800bb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d109      	bne.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb56:	4b38      	ldr	r3, [pc, #224]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	08db      	lsrs	r3, r3, #3
 800bb5c:	f003 0303 	and.w	r3, r3, #3
 800bb60:	4a36      	ldr	r2, [pc, #216]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bb62:	fa22 f303 	lsr.w	r3, r2, r3
 800bb66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb68:	e01e      	b.n	800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb6a:	4b33      	ldr	r3, [pc, #204]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb76:	d106      	bne.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800bb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb7e:	d102      	bne.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bb80:	4b2f      	ldr	r3, [pc, #188]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800bb82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb84:	e010      	b.n	800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb86:	4b2c      	ldr	r3, [pc, #176]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb92:	d106      	bne.n	800bba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800bb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb9a:	d102      	bne.n	800bba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bb9c:	4b29      	ldr	r3, [pc, #164]	; (800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800bb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bba0:	e002      	b.n	800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bba6:	e246      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bba8:	e245      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bbaa:	4b27      	ldr	r3, [pc, #156]	; (800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800bbac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbae:	e242      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbb4:	e23f      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbbc:	f040 80a8 	bne.w	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800bbc0:	4b1d      	ldr	r3, [pc, #116]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bbc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bbc8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbd0:	d060      	beq.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800bbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbd8:	f200 8097 	bhi.w	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbe2:	f000 808f 	beq.w	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800bbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbec:	f200 808d 	bhi.w	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbf6:	d03b      	beq.n	800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800bbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbfe:	f200 8084 	bhi.w	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d004      	beq.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800bc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc0e:	d01d      	beq.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800bc10:	e07b      	b.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc12:	4b09      	ldr	r3, [pc, #36]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc1e:	d107      	bne.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc24:	4618      	mov	r0, r3
 800bc26:	f000 fcd1 	bl	800c5cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bc2e:	e202      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc34:	e1ff      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc36:	bf00      	nop
 800bc38:	58024400 	.word	0x58024400
 800bc3c:	03d09000 	.word	0x03d09000
 800bc40:	003d0900 	.word	0x003d0900
 800bc44:	017d7840 	.word	0x017d7840
 800bc48:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc4c:	4ba3      	ldr	r3, [pc, #652]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc58:	d107      	bne.n	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc5a:	f107 0318 	add.w	r3, r7, #24
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fa0c 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bc68:	e1e5      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc6e:	e1e2      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc70:	4b9a      	ldr	r3, [pc, #616]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc7c:	d107      	bne.n	800bc8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc7e:	f107 030c 	add.w	r3, r7, #12
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 fb4e 	bl	800c324 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bc8c:	e1d3      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc92:	e1d0      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bc94:	4b91      	ldr	r3, [pc, #580]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bc96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc9c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc9e:	4b8f      	ldr	r3, [pc, #572]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f003 0304 	and.w	r3, r3, #4
 800bca6:	2b04      	cmp	r3, #4
 800bca8:	d10c      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800bcaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d109      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcb0:	4b8a      	ldr	r3, [pc, #552]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	08db      	lsrs	r3, r3, #3
 800bcb6:	f003 0303 	and.w	r3, r3, #3
 800bcba:	4a89      	ldr	r2, [pc, #548]	; (800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bcbc:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcc2:	e01e      	b.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bcc4:	4b85      	ldr	r3, [pc, #532]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd0:	d106      	bne.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800bcd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcd8:	d102      	bne.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bcda:	4b82      	ldr	r3, [pc, #520]	; (800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800bcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcde:	e010      	b.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bce0:	4b7e      	ldr	r3, [pc, #504]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcec:	d106      	bne.n	800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcf4:	d102      	bne.n	800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bcf6:	4b7c      	ldr	r3, [pc, #496]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcfa:	e002      	b.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bd00:	e199      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd02:	e198      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bd04:	4b79      	ldr	r3, [pc, #484]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800bd06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd08:	e195      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd0e:	e192      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bd16:	d173      	bne.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800bd18:	4b70      	ldr	r3, [pc, #448]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bd1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bd20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd28:	d02f      	beq.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd30:	d863      	bhi.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800bd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d004      	beq.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd3e:	d012      	beq.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800bd40:	e05b      	b.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd42:	4b66      	ldr	r3, [pc, #408]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd4e:	d107      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd50:	f107 0318 	add.w	r3, r7, #24
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 f991 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bd5e:	e16a      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd64:	e167      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd66:	4b5d      	ldr	r3, [pc, #372]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd72:	d107      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd74:	f107 030c 	add.w	r3, r7, #12
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f000 fad3 	bl	800c324 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bd82:	e158      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd88:	e155      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bd8a:	4b54      	ldr	r3, [pc, #336]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bd8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd92:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd94:	4b51      	ldr	r3, [pc, #324]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b04      	cmp	r3, #4
 800bd9e:	d10c      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800bda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d109      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bda6:	4b4d      	ldr	r3, [pc, #308]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	08db      	lsrs	r3, r3, #3
 800bdac:	f003 0303 	and.w	r3, r3, #3
 800bdb0:	4a4b      	ldr	r2, [pc, #300]	; (800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bdb2:	fa22 f303 	lsr.w	r3, r2, r3
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdb8:	e01e      	b.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdba:	4b48      	ldr	r3, [pc, #288]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc6:	d106      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdce:	d102      	bne.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bdd0:	4b44      	ldr	r3, [pc, #272]	; (800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdd4:	e010      	b.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdd6:	4b41      	ldr	r3, [pc, #260]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bde2:	d106      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800bde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdea:	d102      	bne.n	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bdec:	4b3e      	ldr	r3, [pc, #248]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf0:	e002      	b.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bdf6:	e11e      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdf8:	e11d      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdfe:	e11a      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be06:	d133      	bne.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800be08:	4b34      	ldr	r3, [pc, #208]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be10:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800be12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be14:	2b00      	cmp	r3, #0
 800be16:	d004      	beq.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800be18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be1e:	d012      	beq.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800be20:	e023      	b.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be22:	4b2e      	ldr	r3, [pc, #184]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be2e:	d107      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be34:	4618      	mov	r0, r3
 800be36:	f000 fbc9 	bl	800c5cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800be3e:	e0fa      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be44:	e0f7      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be46:	4b25      	ldr	r3, [pc, #148]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be52:	d107      	bne.n	800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be54:	f107 0318 	add.w	r3, r7, #24
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 f90f 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800be5e:	6a3b      	ldr	r3, [r7, #32]
 800be60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800be62:	e0e8      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be68:	e0e5      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be6e:	e0e2      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be76:	f040 808f 	bne.w	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800be7a:	4b18      	ldr	r3, [pc, #96]	; (800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800be7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be7e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800be82:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800be84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be8a:	d075      	beq.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800be8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be92:	d87e      	bhi.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be9a:	d060      	beq.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800be9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bea2:	d876      	bhi.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800beaa:	d045      	beq.n	800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800beac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800beb2:	d86e      	bhi.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beba:	d02b      	beq.n	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bec2:	d866      	bhi.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d004      	beq.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800beca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800becc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bed0:	d00e      	beq.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800bed2:	e05e      	b.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bed4:	f000 f8bc 	bl	800c050 <HAL_RCCEx_GetD3PCLK1Freq>
 800bed8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800beda:	e0ac      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bedc:	58024400 	.word	0x58024400
 800bee0:	03d09000 	.word	0x03d09000
 800bee4:	003d0900 	.word	0x003d0900
 800bee8:	017d7840 	.word	0x017d7840
 800beec:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bef0:	4b53      	ldr	r3, [pc, #332]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800befc:	d107      	bne.n	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800befe:	f107 0318 	add.w	r3, r7, #24
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 f8ba 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf0c:	e093      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf12:	e090      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf14:	4b4a      	ldr	r3, [pc, #296]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf20:	d107      	bne.n	800bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf22:	f107 030c 	add.w	r3, r7, #12
 800bf26:	4618      	mov	r0, r3
 800bf28:	f000 f9fc 	bl	800c324 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf30:	e081      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf36:	e07e      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bf38:	4b41      	ldr	r3, [pc, #260]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f003 0304 	and.w	r3, r3, #4
 800bf40:	2b04      	cmp	r3, #4
 800bf42:	d109      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf44:	4b3e      	ldr	r3, [pc, #248]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	08db      	lsrs	r3, r3, #3
 800bf4a:	f003 0303 	and.w	r3, r3, #3
 800bf4e:	4a3d      	ldr	r2, [pc, #244]	; (800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bf50:	fa22 f303 	lsr.w	r3, r2, r3
 800bf54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf56:	e06e      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf5c:	e06b      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bf5e:	4b38      	ldr	r3, [pc, #224]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf6a:	d102      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800bf6c:	4b36      	ldr	r3, [pc, #216]	; (800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bf70:	e061      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf76:	e05e      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bf78:	4b31      	ldr	r3, [pc, #196]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf84:	d102      	bne.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800bf86:	4b31      	ldr	r3, [pc, #196]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bf88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bf8a:	e054      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf90:	e051      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800bf92:	2300      	movs	r3, #0
 800bf94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf96:	e04e      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf9e:	d148      	bne.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800bfa0:	4b27      	ldr	r3, [pc, #156]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfa8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfb0:	d02a      	beq.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfb8:	d838      	bhi.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d004      	beq.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfc6:	d00d      	beq.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bfc8:	e030      	b.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bfca:	4b1d      	ldr	r3, [pc, #116]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfd6:	d102      	bne.n	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800bfd8:	4b1c      	ldr	r3, [pc, #112]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bfda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800bfdc:	e02b      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfe2:	e028      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfe4:	4b16      	ldr	r3, [pc, #88]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bff0:	d107      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 fae8 	bl	800c5cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c000:	e019      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c002:	2300      	movs	r3, #0
 800c004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c006:	e016      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c008:	4b0d      	ldr	r3, [pc, #52]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c014:	d107      	bne.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c016:	f107 0318 	add.w	r3, r7, #24
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 f82e 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c024:	e007      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c026:	2300      	movs	r3, #0
 800c028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c02a:	e004      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c02c:	2300      	movs	r3, #0
 800c02e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c030:	e001      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800c032:	2300      	movs	r3, #0
 800c034:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3740      	adds	r7, #64	; 0x40
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	58024400 	.word	0x58024400
 800c044:	03d09000 	.word	0x03d09000
 800c048:	003d0900 	.word	0x003d0900
 800c04c:	017d7840 	.word	0x017d7840

0800c050 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c054:	f7fe fb4c 	bl	800a6f0 <HAL_RCC_GetHCLKFreq>
 800c058:	4602      	mov	r2, r0
 800c05a:	4b06      	ldr	r3, [pc, #24]	; (800c074 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	091b      	lsrs	r3, r3, #4
 800c060:	f003 0307 	and.w	r3, r3, #7
 800c064:	4904      	ldr	r1, [pc, #16]	; (800c078 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c066:	5ccb      	ldrb	r3, [r1, r3]
 800c068:	f003 031f 	and.w	r3, r3, #31
 800c06c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c070:	4618      	mov	r0, r3
 800c072:	bd80      	pop	{r7, pc}
 800c074:	58024400 	.word	0x58024400
 800c078:	080194e8 	.word	0x080194e8

0800c07c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b089      	sub	sp, #36	; 0x24
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c084:	4ba1      	ldr	r3, [pc, #644]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c088:	f003 0303 	and.w	r3, r3, #3
 800c08c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c08e:	4b9f      	ldr	r3, [pc, #636]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c092:	0b1b      	lsrs	r3, r3, #12
 800c094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c098:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c09a:	4b9c      	ldr	r3, [pc, #624]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09e:	091b      	lsrs	r3, r3, #4
 800c0a0:	f003 0301 	and.w	r3, r3, #1
 800c0a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c0a6:	4b99      	ldr	r3, [pc, #612]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0aa:	08db      	lsrs	r3, r3, #3
 800c0ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	fb02 f303 	mul.w	r3, r2, r3
 800c0b6:	ee07 3a90 	vmov	s15, r3
 800c0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 8111 	beq.w	800c2ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	f000 8083 	beq.w	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	f200 80a1 	bhi.w	800c21c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d003      	beq.n	800c0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d056      	beq.n	800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c0e6:	e099      	b.n	800c21c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0e8:	4b88      	ldr	r3, [pc, #544]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 0320 	and.w	r3, r3, #32
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d02d      	beq.n	800c150 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0f4:	4b85      	ldr	r3, [pc, #532]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	08db      	lsrs	r3, r3, #3
 800c0fa:	f003 0303 	and.w	r3, r3, #3
 800c0fe:	4a84      	ldr	r2, [pc, #528]	; (800c310 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c100:	fa22 f303 	lsr.w	r3, r2, r3
 800c104:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	ee07 3a90 	vmov	s15, r3
 800c10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	ee07 3a90 	vmov	s15, r3
 800c116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c11a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c11e:	4b7b      	ldr	r3, [pc, #492]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c126:	ee07 3a90 	vmov	s15, r3
 800c12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c12e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c132:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c13e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c14a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c14e:	e087      	b.n	800c260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	ee07 3a90 	vmov	s15, r3
 800c156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c15a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c318 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c162:	4b6a      	ldr	r3, [pc, #424]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16a:	ee07 3a90 	vmov	s15, r3
 800c16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c172:	ed97 6a03 	vldr	s12, [r7, #12]
 800c176:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c18e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c192:	e065      	b.n	800c260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	ee07 3a90 	vmov	s15, r3
 800c19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1a6:	4b59      	ldr	r3, [pc, #356]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1d6:	e043      	b.n	800c260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	ee07 3a90 	vmov	s15, r3
 800c1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c320 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ea:	4b48      	ldr	r3, [pc, #288]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f2:	ee07 3a90 	vmov	s15, r3
 800c1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c20a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c21a:	e021      	b.n	800c260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	ee07 3a90 	vmov	s15, r3
 800c222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c226:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c31c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c22e:	4b37      	ldr	r3, [pc, #220]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c236:	ee07 3a90 	vmov	s15, r3
 800c23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c23e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c242:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c24e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c25a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c25e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c260:	4b2a      	ldr	r3, [pc, #168]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c264:	0a5b      	lsrs	r3, r3, #9
 800c266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c26a:	ee07 3a90 	vmov	s15, r3
 800c26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c286:	ee17 2a90 	vmov	r2, s15
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c28e:	4b1f      	ldr	r3, [pc, #124]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c292:	0c1b      	lsrs	r3, r3, #16
 800c294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c298:	ee07 3a90 	vmov	s15, r3
 800c29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2b4:	ee17 2a90 	vmov	r2, s15
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c2bc:	4b13      	ldr	r3, [pc, #76]	; (800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c0:	0e1b      	lsrs	r3, r3, #24
 800c2c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2c6:	ee07 3a90 	vmov	s15, r3
 800c2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2e2:	ee17 2a90 	vmov	r2, s15
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c2ea:	e008      	b.n	800c2fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	609a      	str	r2, [r3, #8]
}
 800c2fe:	bf00      	nop
 800c300:	3724      	adds	r7, #36	; 0x24
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	58024400 	.word	0x58024400
 800c310:	03d09000 	.word	0x03d09000
 800c314:	46000000 	.word	0x46000000
 800c318:	4c742400 	.word	0x4c742400
 800c31c:	4a742400 	.word	0x4a742400
 800c320:	4bbebc20 	.word	0x4bbebc20

0800c324 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c324:	b480      	push	{r7}
 800c326:	b089      	sub	sp, #36	; 0x24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c32c:	4ba1      	ldr	r3, [pc, #644]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c330:	f003 0303 	and.w	r3, r3, #3
 800c334:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c336:	4b9f      	ldr	r3, [pc, #636]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c33a:	0d1b      	lsrs	r3, r3, #20
 800c33c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c340:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c342:	4b9c      	ldr	r3, [pc, #624]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c346:	0a1b      	lsrs	r3, r3, #8
 800c348:	f003 0301 	and.w	r3, r3, #1
 800c34c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c34e:	4b99      	ldr	r3, [pc, #612]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c352:	08db      	lsrs	r3, r3, #3
 800c354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c358:	693a      	ldr	r2, [r7, #16]
 800c35a:	fb02 f303 	mul.w	r3, r2, r3
 800c35e:	ee07 3a90 	vmov	s15, r3
 800c362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c366:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 8111 	beq.w	800c594 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	2b02      	cmp	r3, #2
 800c376:	f000 8083 	beq.w	800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	f200 80a1 	bhi.w	800c4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d003      	beq.n	800c390 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d056      	beq.n	800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c38e:	e099      	b.n	800c4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c390:	4b88      	ldr	r3, [pc, #544]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f003 0320 	and.w	r3, r3, #32
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d02d      	beq.n	800c3f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c39c:	4b85      	ldr	r3, [pc, #532]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	08db      	lsrs	r3, r3, #3
 800c3a2:	f003 0303 	and.w	r3, r3, #3
 800c3a6:	4a84      	ldr	r2, [pc, #528]	; (800c5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	ee07 3a90 	vmov	s15, r3
 800c3b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	ee07 3a90 	vmov	s15, r3
 800c3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3c6:	4b7b      	ldr	r3, [pc, #492]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ce:	ee07 3a90 	vmov	s15, r3
 800c3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c5bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c3f6:	e087      	b.n	800c508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	ee07 3a90 	vmov	s15, r3
 800c3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c402:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c40a:	4b6a      	ldr	r3, [pc, #424]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c412:	ee07 3a90 	vmov	s15, r3
 800c416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c41a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c41e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c5bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c43a:	e065      	b.n	800c508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	ee07 3a90 	vmov	s15, r3
 800c442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c446:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c44e:	4b59      	ldr	r3, [pc, #356]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c456:	ee07 3a90 	vmov	s15, r3
 800c45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c45e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c462:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c5bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c46e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c47a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c47e:	e043      	b.n	800c508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	ee07 3a90 	vmov	s15, r3
 800c486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c48a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c492:	4b48      	ldr	r3, [pc, #288]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c49a:	ee07 3a90 	vmov	s15, r3
 800c49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c5bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4c2:	e021      	b.n	800c508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	ee07 3a90 	vmov	s15, r3
 800c4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4d6:	4b37      	ldr	r3, [pc, #220]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4de:	ee07 3a90 	vmov	s15, r3
 800c4e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c5bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c506:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c508:	4b2a      	ldr	r3, [pc, #168]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50c:	0a5b      	lsrs	r3, r3, #9
 800c50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c512:	ee07 3a90 	vmov	s15, r3
 800c516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c51a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c51e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c522:	edd7 6a07 	vldr	s13, [r7, #28]
 800c526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c52a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c52e:	ee17 2a90 	vmov	r2, s15
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c536:	4b1f      	ldr	r3, [pc, #124]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53a:	0c1b      	lsrs	r3, r3, #16
 800c53c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c540:	ee07 3a90 	vmov	s15, r3
 800c544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c54c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c550:	edd7 6a07 	vldr	s13, [r7, #28]
 800c554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c55c:	ee17 2a90 	vmov	r2, s15
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c564:	4b13      	ldr	r3, [pc, #76]	; (800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c568:	0e1b      	lsrs	r3, r3, #24
 800c56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c56e:	ee07 3a90 	vmov	s15, r3
 800c572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c57a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c57e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c58a:	ee17 2a90 	vmov	r2, s15
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c592:	e008      	b.n	800c5a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	609a      	str	r2, [r3, #8]
}
 800c5a6:	bf00      	nop
 800c5a8:	3724      	adds	r7, #36	; 0x24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	58024400 	.word	0x58024400
 800c5b8:	03d09000 	.word	0x03d09000
 800c5bc:	46000000 	.word	0x46000000
 800c5c0:	4c742400 	.word	0x4c742400
 800c5c4:	4a742400 	.word	0x4a742400
 800c5c8:	4bbebc20 	.word	0x4bbebc20

0800c5cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b089      	sub	sp, #36	; 0x24
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5d4:	4ba0      	ldr	r3, [pc, #640]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d8:	f003 0303 	and.w	r3, r3, #3
 800c5dc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c5de:	4b9e      	ldr	r3, [pc, #632]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e2:	091b      	lsrs	r3, r3, #4
 800c5e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5e8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c5ea:	4b9b      	ldr	r3, [pc, #620]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ee:	f003 0301 	and.w	r3, r3, #1
 800c5f2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c5f4:	4b98      	ldr	r3, [pc, #608]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f8:	08db      	lsrs	r3, r3, #3
 800c5fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5fe:	693a      	ldr	r2, [r7, #16]
 800c600:	fb02 f303 	mul.w	r3, r2, r3
 800c604:	ee07 3a90 	vmov	s15, r3
 800c608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c60c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 8111 	beq.w	800c83a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	f000 8083 	beq.w	800c726 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	2b02      	cmp	r3, #2
 800c624:	f200 80a1 	bhi.w	800c76a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d003      	beq.n	800c636 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d056      	beq.n	800c6e2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c634:	e099      	b.n	800c76a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c636:	4b88      	ldr	r3, [pc, #544]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f003 0320 	and.w	r3, r3, #32
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d02d      	beq.n	800c69e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c642:	4b85      	ldr	r3, [pc, #532]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	08db      	lsrs	r3, r3, #3
 800c648:	f003 0303 	and.w	r3, r3, #3
 800c64c:	4a83      	ldr	r2, [pc, #524]	; (800c85c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c64e:	fa22 f303 	lsr.w	r3, r2, r3
 800c652:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	ee07 3a90 	vmov	s15, r3
 800c65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	ee07 3a90 	vmov	s15, r3
 800c664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c66c:	4b7a      	ldr	r3, [pc, #488]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c674:	ee07 3a90 	vmov	s15, r3
 800c678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c67c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c680:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c860 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c68c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c694:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c698:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c69c:	e087      	b.n	800c7ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	ee07 3a90 	vmov	s15, r3
 800c6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6a8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c864 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c6ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6b0:	4b69      	ldr	r3, [pc, #420]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6b8:	ee07 3a90 	vmov	s15, r3
 800c6bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6c4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c860 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c6c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6e0:	e065      	b.n	800c7ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	ee07 3a90 	vmov	s15, r3
 800c6e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c868 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c6f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6f4:	4b58      	ldr	r3, [pc, #352]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6fc:	ee07 3a90 	vmov	s15, r3
 800c700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c704:	ed97 6a03 	vldr	s12, [r7, #12]
 800c708:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c860 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c70c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c71c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c720:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c724:	e043      	b.n	800c7ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	ee07 3a90 	vmov	s15, r3
 800c72c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c730:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c86c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c738:	4b47      	ldr	r3, [pc, #284]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c73a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c73c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c740:	ee07 3a90 	vmov	s15, r3
 800c744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c748:	ed97 6a03 	vldr	s12, [r7, #12]
 800c74c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c860 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c75c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c760:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c764:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c768:	e021      	b.n	800c7ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	ee07 3a90 	vmov	s15, r3
 800c770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c774:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c864 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c77c:	4b36      	ldr	r3, [pc, #216]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c784:	ee07 3a90 	vmov	s15, r3
 800c788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c78c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c790:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c860 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c79c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7ac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c7ae:	4b2a      	ldr	r3, [pc, #168]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b2:	0a5b      	lsrs	r3, r3, #9
 800c7b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7b8:	ee07 3a90 	vmov	s15, r3
 800c7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7d4:	ee17 2a90 	vmov	r2, s15
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c7dc:	4b1e      	ldr	r3, [pc, #120]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e0:	0c1b      	lsrs	r3, r3, #16
 800c7e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7e6:	ee07 3a90 	vmov	s15, r3
 800c7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c802:	ee17 2a90 	vmov	r2, s15
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c80a:	4b13      	ldr	r3, [pc, #76]	; (800c858 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80e:	0e1b      	lsrs	r3, r3, #24
 800c810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c814:	ee07 3a90 	vmov	s15, r3
 800c818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c81c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c820:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c824:	edd7 6a07 	vldr	s13, [r7, #28]
 800c828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c82c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c830:	ee17 2a90 	vmov	r2, s15
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c838:	e008      	b.n	800c84c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2200      	movs	r2, #0
 800c83e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	609a      	str	r2, [r3, #8]
}
 800c84c:	bf00      	nop
 800c84e:	3724      	adds	r7, #36	; 0x24
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr
 800c858:	58024400 	.word	0x58024400
 800c85c:	03d09000 	.word	0x03d09000
 800c860:	46000000 	.word	0x46000000
 800c864:	4c742400 	.word	0x4c742400
 800c868:	4a742400 	.word	0x4a742400
 800c86c:	4bbebc20 	.word	0x4bbebc20

0800c870 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c87e:	4b53      	ldr	r3, [pc, #332]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c882:	f003 0303 	and.w	r3, r3, #3
 800c886:	2b03      	cmp	r3, #3
 800c888:	d101      	bne.n	800c88e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e099      	b.n	800c9c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c88e:	4b4f      	ldr	r3, [pc, #316]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a4e      	ldr	r2, [pc, #312]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c894:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c89a:	f7f8 fed1 	bl	8005640 <HAL_GetTick>
 800c89e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8a0:	e008      	b.n	800c8b4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c8a2:	f7f8 fecd 	bl	8005640 <HAL_GetTick>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d901      	bls.n	800c8b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	e086      	b.n	800c9c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8b4:	4b45      	ldr	r3, [pc, #276]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1f0      	bne.n	800c8a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c8c0:	4b42      	ldr	r3, [pc, #264]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	031b      	lsls	r3, r3, #12
 800c8ce:	493f      	ldr	r1, [pc, #252]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	628b      	str	r3, [r1, #40]	; 0x28
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	025b      	lsls	r3, r3, #9
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	431a      	orrs	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	041b      	lsls	r3, r3, #16
 800c8f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	061b      	lsls	r3, r3, #24
 800c900:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c904:	4931      	ldr	r1, [pc, #196]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c906:	4313      	orrs	r3, r2
 800c908:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c90a:	4b30      	ldr	r3, [pc, #192]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	492d      	ldr	r1, [pc, #180]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c918:	4313      	orrs	r3, r2
 800c91a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c91c:	4b2b      	ldr	r3, [pc, #172]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c920:	f023 0220 	bic.w	r2, r3, #32
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	4928      	ldr	r1, [pc, #160]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c92a:	4313      	orrs	r3, r2
 800c92c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c92e:	4b27      	ldr	r3, [pc, #156]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c932:	4a26      	ldr	r2, [pc, #152]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c934:	f023 0310 	bic.w	r3, r3, #16
 800c938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c93a:	4b24      	ldr	r3, [pc, #144]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c93c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c93e:	4b24      	ldr	r3, [pc, #144]	; (800c9d0 <RCCEx_PLL2_Config+0x160>)
 800c940:	4013      	ands	r3, r2
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	69d2      	ldr	r2, [r2, #28]
 800c946:	00d2      	lsls	r2, r2, #3
 800c948:	4920      	ldr	r1, [pc, #128]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c94a:	4313      	orrs	r3, r2
 800c94c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c94e:	4b1f      	ldr	r3, [pc, #124]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c952:	4a1e      	ldr	r2, [pc, #120]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c954:	f043 0310 	orr.w	r3, r3, #16
 800c958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d106      	bne.n	800c96e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c960:	4b1a      	ldr	r3, [pc, #104]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c964:	4a19      	ldr	r2, [pc, #100]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c96a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c96c:	e00f      	b.n	800c98e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d106      	bne.n	800c982 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c974:	4b15      	ldr	r3, [pc, #84]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c978:	4a14      	ldr	r2, [pc, #80]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c97a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c97e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c980:	e005      	b.n	800c98e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c982:	4b12      	ldr	r3, [pc, #72]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c986:	4a11      	ldr	r2, [pc, #68]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c98c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c98e:	4b0f      	ldr	r3, [pc, #60]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a0e      	ldr	r2, [pc, #56]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c994:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c99a:	f7f8 fe51 	bl	8005640 <HAL_GetTick>
 800c99e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9a0:	e008      	b.n	800c9b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c9a2:	f7f8 fe4d 	bl	8005640 <HAL_GetTick>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	d901      	bls.n	800c9b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c9b0:	2303      	movs	r3, #3
 800c9b2:	e006      	b.n	800c9c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9b4:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <RCCEx_PLL2_Config+0x15c>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d0f0      	beq.n	800c9a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	58024400 	.word	0x58024400
 800c9d0:	ffff0007 	.word	0xffff0007

0800c9d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c9e2:	4b53      	ldr	r3, [pc, #332]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800c9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e6:	f003 0303 	and.w	r3, r3, #3
 800c9ea:	2b03      	cmp	r3, #3
 800c9ec:	d101      	bne.n	800c9f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e099      	b.n	800cb26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c9f2:	4b4f      	ldr	r3, [pc, #316]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a4e      	ldr	r2, [pc, #312]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800c9f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9fe:	f7f8 fe1f 	bl	8005640 <HAL_GetTick>
 800ca02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca04:	e008      	b.n	800ca18 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ca06:	f7f8 fe1b 	bl	8005640 <HAL_GetTick>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d901      	bls.n	800ca18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca14:	2303      	movs	r3, #3
 800ca16:	e086      	b.n	800cb26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca18:	4b45      	ldr	r3, [pc, #276]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1f0      	bne.n	800ca06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ca24:	4b42      	ldr	r3, [pc, #264]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800ca26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	051b      	lsls	r3, r3, #20
 800ca32:	493f      	ldr	r1, [pc, #252]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800ca34:	4313      	orrs	r3, r2
 800ca36:	628b      	str	r3, [r1, #40]	; 0x28
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	025b      	lsls	r3, r3, #9
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	431a      	orrs	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	3b01      	subs	r3, #1
 800ca54:	041b      	lsls	r3, r3, #16
 800ca56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	3b01      	subs	r3, #1
 800ca62:	061b      	lsls	r3, r3, #24
 800ca64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ca68:	4931      	ldr	r1, [pc, #196]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ca6e:	4b30      	ldr	r3, [pc, #192]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800ca70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	695b      	ldr	r3, [r3, #20]
 800ca7a:	492d      	ldr	r1, [pc, #180]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ca80:	4b2b      	ldr	r3, [pc, #172]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800ca82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	699b      	ldr	r3, [r3, #24]
 800ca8c:	4928      	ldr	r1, [pc, #160]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ca92:	4b27      	ldr	r3, [pc, #156]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800ca94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca96:	4a26      	ldr	r2, [pc, #152]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800ca98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ca9e:	4b24      	ldr	r3, [pc, #144]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800caa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caa2:	4b24      	ldr	r3, [pc, #144]	; (800cb34 <RCCEx_PLL3_Config+0x160>)
 800caa4:	4013      	ands	r3, r2
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	69d2      	ldr	r2, [r2, #28]
 800caaa:	00d2      	lsls	r2, r2, #3
 800caac:	4920      	ldr	r1, [pc, #128]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800caae:	4313      	orrs	r3, r2
 800cab0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cab2:	4b1f      	ldr	r3, [pc, #124]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800cab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab6:	4a1e      	ldr	r2, [pc, #120]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800cab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cabc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d106      	bne.n	800cad2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cac4:	4b1a      	ldr	r3, [pc, #104]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800cac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac8:	4a19      	ldr	r2, [pc, #100]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800caca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cace:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cad0:	e00f      	b.n	800caf2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d106      	bne.n	800cae6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cad8:	4b15      	ldr	r3, [pc, #84]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800cada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cadc:	4a14      	ldr	r2, [pc, #80]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800cade:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cae2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cae4:	e005      	b.n	800caf2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cae6:	4b12      	ldr	r3, [pc, #72]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800cae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caea:	4a11      	ldr	r2, [pc, #68]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800caec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800caf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800caf2:	4b0f      	ldr	r3, [pc, #60]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a0e      	ldr	r2, [pc, #56]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800caf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cafc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cafe:	f7f8 fd9f 	bl	8005640 <HAL_GetTick>
 800cb02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb04:	e008      	b.n	800cb18 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cb06:	f7f8 fd9b 	bl	8005640 <HAL_GetTick>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	1ad3      	subs	r3, r2, r3
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d901      	bls.n	800cb18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb14:	2303      	movs	r3, #3
 800cb16:	e006      	b.n	800cb26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cb18:	4b05      	ldr	r3, [pc, #20]	; (800cb30 <RCCEx_PLL3_Config+0x15c>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d0f0      	beq.n	800cb06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	58024400 	.word	0x58024400
 800cb34:	ffff0007 	.word	0xffff0007

0800cb38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d067      	beq.n	800cc1a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d106      	bne.n	800cb64 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7f5 fbb0 	bl	80022c4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2202      	movs	r2, #2
 800cb68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	22ca      	movs	r2, #202	; 0xca
 800cb72:	625a      	str	r2, [r3, #36]	; 0x24
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2253      	movs	r2, #83	; 0x53
 800cb7a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f923 	bl	800cdc8 <RTC_EnterInitMode>
 800cb82:	4603      	mov	r3, r0
 800cb84:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d13b      	bne.n	800cc04 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	6899      	ldr	r1, [r3, #8]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	4b23      	ldr	r3, [pc, #140]	; (800cc24 <HAL_RTC_Init+0xec>)
 800cb98:	400b      	ands	r3, r1
 800cb9a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6899      	ldr	r1, [r3, #8]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685a      	ldr	r2, [r3, #4]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	691b      	ldr	r3, [r3, #16]
 800cbaa:	431a      	orrs	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	699b      	ldr	r3, [r3, #24]
 800cbb0:	431a      	orrs	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	430a      	orrs	r2, r1
 800cbb8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	0419      	lsls	r1, r3, #16
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	68da      	ldr	r2, [r3, #12]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	430a      	orrs	r2, r1
 800cbca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 f92b 	bl	800ce28 <RTC_ExitInitMode>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d113      	bne.n	800cc04 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f022 0203 	bic.w	r2, r2, #3
 800cbea:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	69da      	ldr	r2, [r3, #28]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	695b      	ldr	r3, [r3, #20]
 800cbfa:	431a      	orrs	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	430a      	orrs	r2, r1
 800cc02:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	22ff      	movs	r2, #255	; 0xff
 800cc0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d103      	bne.n	800cc1a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2201      	movs	r2, #1
 800cc16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	ff8fffbf 	.word	0xff8fffbf

0800cc28 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	4b22      	ldr	r3, [pc, #136]	; (800ccdc <HAL_RTC_GetTime+0xb4>)
 800cc54:	4013      	ands	r3, r2
 800cc56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	0c1b      	lsrs	r3, r3, #16
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	0a1b      	lsrs	r3, r3, #8
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	0d9b      	lsrs	r3, r3, #22
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	f003 0301 	and.w	r3, r3, #1
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d11a      	bne.n	800ccd2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 f8ff 	bl	800cea4 <RTC_Bcd2ToByte>
 800cca6:	4603      	mov	r3, r0
 800cca8:	461a      	mov	r2, r3
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	785b      	ldrb	r3, [r3, #1]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 f8f6 	bl	800cea4 <RTC_Bcd2ToByte>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	461a      	mov	r2, r3
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	789b      	ldrb	r3, [r3, #2]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 f8ed 	bl	800cea4 <RTC_Bcd2ToByte>
 800ccca:	4603      	mov	r3, r0
 800cccc:	461a      	mov	r2, r3
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3718      	adds	r7, #24
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	007f7f7f 	.word	0x007f7f7f

0800cce0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b086      	sub	sp, #24
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	685a      	ldr	r2, [r3, #4]
 800ccf2:	4b21      	ldr	r3, [pc, #132]	; (800cd78 <HAL_RTC_GetDate+0x98>)
 800ccf4:	4013      	ands	r3, r2
 800ccf6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	0c1b      	lsrs	r3, r3, #16
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	0a1b      	lsrs	r3, r3, #8
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	f003 031f 	and.w	r3, r3, #31
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	0b5b      	lsrs	r3, r3, #13
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	f003 0307 	and.w	r3, r3, #7
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d11a      	bne.n	800cd6c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	78db      	ldrb	r3, [r3, #3]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f000 f8b2 	bl	800cea4 <RTC_Bcd2ToByte>
 800cd40:	4603      	mov	r3, r0
 800cd42:	461a      	mov	r2, r3
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	785b      	ldrb	r3, [r3, #1]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 f8a9 	bl	800cea4 <RTC_Bcd2ToByte>
 800cd52:	4603      	mov	r3, r0
 800cd54:	461a      	mov	r2, r3
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	789b      	ldrb	r3, [r3, #2]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f000 f8a0 	bl	800cea4 <RTC_Bcd2ToByte>
 800cd64:	4603      	mov	r3, r0
 800cd66:	461a      	mov	r2, r3
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cd6c:	2300      	movs	r3, #0
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3718      	adds	r7, #24
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	00ffff3f 	.word	0x00ffff3f

0800cd7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68da      	ldr	r2, [r3, #12]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cd92:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800cd94:	f7f8 fc54 	bl	8005640 <HAL_GetTick>
 800cd98:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cd9a:	e009      	b.n	800cdb0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cd9c:	f7f8 fc50 	bl	8005640 <HAL_GetTick>
 800cda0:	4602      	mov	r2, r0
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdaa:	d901      	bls.n	800cdb0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e007      	b.n	800cdc0 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	f003 0320 	and.w	r3, r3, #32
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d0ee      	beq.n	800cd9c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800cdbe:	2300      	movs	r3, #0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d11d      	bne.n	800ce1e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cdec:	f7f8 fc28 	bl	8005640 <HAL_GetTick>
 800cdf0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cdf2:	e00d      	b.n	800ce10 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cdf4:	f7f8 fc24 	bl	8005640 <HAL_GetTick>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce02:	d905      	bls.n	800ce10 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ce04:	2303      	movs	r3, #3
 800ce06:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2203      	movs	r2, #3
 800ce0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d0ea      	beq.n	800cdf4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800ce34:	4b1a      	ldr	r3, [pc, #104]	; (800cea0 <RTC_ExitInitMode+0x78>)
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	4a19      	ldr	r2, [pc, #100]	; (800cea0 <RTC_ExitInitMode+0x78>)
 800ce3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce3e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ce40:	4b17      	ldr	r3, [pc, #92]	; (800cea0 <RTC_ExitInitMode+0x78>)
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	f003 0320 	and.w	r3, r3, #32
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10c      	bne.n	800ce66 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7ff ff95 	bl	800cd7c <HAL_RTC_WaitForSynchro>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d01e      	beq.n	800ce96 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2203      	movs	r2, #3
 800ce5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ce60:	2303      	movs	r3, #3
 800ce62:	73fb      	strb	r3, [r7, #15]
 800ce64:	e017      	b.n	800ce96 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ce66:	4b0e      	ldr	r3, [pc, #56]	; (800cea0 <RTC_ExitInitMode+0x78>)
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	4a0d      	ldr	r2, [pc, #52]	; (800cea0 <RTC_ExitInitMode+0x78>)
 800ce6c:	f023 0320 	bic.w	r3, r3, #32
 800ce70:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f7ff ff82 	bl	800cd7c <HAL_RTC_WaitForSynchro>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d005      	beq.n	800ce8a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2203      	movs	r2, #3
 800ce82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ce86:	2303      	movs	r3, #3
 800ce88:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ce8a:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <RTC_ExitInitMode+0x78>)
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	4a04      	ldr	r2, [pc, #16]	; (800cea0 <RTC_ExitInitMode+0x78>)
 800ce90:	f043 0320 	orr.w	r3, r3, #32
 800ce94:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	58004000 	.word	0x58004000

0800cea4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ceae:	79fb      	ldrb	r3, [r7, #7]
 800ceb0:	091b      	lsrs	r3, r3, #4
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	0092      	lsls	r2, r2, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	f003 030f 	and.w	r3, r3, #15
 800cec4:	b2da      	uxtb	r2, r3
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
 800cec8:	4413      	add	r3, r2
 800ceca:	b2db      	uxtb	r3, r3
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3714      	adds	r7, #20
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800cee0:	2300      	movs	r3, #0
 800cee2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d101      	bne.n	800ceee <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e0eb      	b.n	800d0c6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a75      	ldr	r2, [pc, #468]	; (800d0d0 <HAL_SPI_Init+0x1f8>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d00f      	beq.n	800cf1e <HAL_SPI_Init+0x46>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a74      	ldr	r2, [pc, #464]	; (800d0d4 <HAL_SPI_Init+0x1fc>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d00a      	beq.n	800cf1e <HAL_SPI_Init+0x46>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a72      	ldr	r2, [pc, #456]	; (800d0d8 <HAL_SPI_Init+0x200>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d005      	beq.n	800cf1e <HAL_SPI_Init+0x46>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	2b0f      	cmp	r3, #15
 800cf18:	d901      	bls.n	800cf1e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e0d3      	b.n	800d0c6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f001 f87a 	bl	800e018 <SPI_GetPacketSize>
 800cf24:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a69      	ldr	r2, [pc, #420]	; (800d0d0 <HAL_SPI_Init+0x1f8>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d00c      	beq.n	800cf4a <HAL_SPI_Init+0x72>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a67      	ldr	r2, [pc, #412]	; (800d0d4 <HAL_SPI_Init+0x1fc>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d007      	beq.n	800cf4a <HAL_SPI_Init+0x72>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a66      	ldr	r2, [pc, #408]	; (800d0d8 <HAL_SPI_Init+0x200>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d002      	beq.n	800cf4a <HAL_SPI_Init+0x72>
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2b08      	cmp	r3, #8
 800cf48:	d811      	bhi.n	800cf6e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cf4e:	4a60      	ldr	r2, [pc, #384]	; (800d0d0 <HAL_SPI_Init+0x1f8>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d009      	beq.n	800cf68 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a5e      	ldr	r2, [pc, #376]	; (800d0d4 <HAL_SPI_Init+0x1fc>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d004      	beq.n	800cf68 <HAL_SPI_Init+0x90>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4a5d      	ldr	r2, [pc, #372]	; (800d0d8 <HAL_SPI_Init+0x200>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d104      	bne.n	800cf72 <HAL_SPI_Init+0x9a>
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	2b10      	cmp	r3, #16
 800cf6c:	d901      	bls.n	800cf72 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e0a9      	b.n	800d0c6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d106      	bne.n	800cf8c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7f5 fa98 	bl	80024bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2202      	movs	r2, #2
 800cf90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f022 0201 	bic.w	r2, r2, #1
 800cfa2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	699b      	ldr	r3, [r3, #24]
 800cfa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cfac:	d119      	bne.n	800cfe2 <HAL_SPI_Init+0x10a>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cfb6:	d103      	bne.n	800cfc0 <HAL_SPI_Init+0xe8>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d008      	beq.n	800cfd2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10c      	bne.n	800cfe2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfd0:	d107      	bne.n	800cfe2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cfe0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	69da      	ldr	r2, [r3, #28]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfea:	431a      	orrs	r2, r3
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	431a      	orrs	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cff4:	ea42 0103 	orr.w	r1, r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68da      	ldr	r2, [r3, #12]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	430a      	orrs	r2, r1
 800d002:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00c:	431a      	orrs	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d012:	431a      	orrs	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	699b      	ldr	r3, [r3, #24]
 800d018:	431a      	orrs	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	431a      	orrs	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	695b      	ldr	r3, [r3, #20]
 800d024:	431a      	orrs	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6a1b      	ldr	r3, [r3, #32]
 800d02a:	431a      	orrs	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	431a      	orrs	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d036:	431a      	orrs	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	431a      	orrs	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d042:	ea42 0103 	orr.w	r1, r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	430a      	orrs	r2, r1
 800d050:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d113      	bne.n	800d082 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d06c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d080:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f022 0201 	bic.w	r2, r2, #1
 800d090:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00a      	beq.n	800d0b4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	430a      	orrs	r2, r1
 800d0b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	40013000 	.word	0x40013000
 800d0d4:	40003800 	.word	0x40003800
 800d0d8:	40003c00 	.word	0x40003c00

0800d0dc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b08a      	sub	sp, #40	; 0x28
 800d0e0:	af02      	add	r7, sp, #8
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	603b      	str	r3, [r7, #0]
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3320      	adds	r3, #32
 800d0f2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d101      	bne.n	800d106 <HAL_SPI_Transmit+0x2a>
 800d102:	2302      	movs	r3, #2
 800d104:	e1d7      	b.n	800d4b6 <HAL_SPI_Transmit+0x3da>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2201      	movs	r2, #1
 800d10a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d10e:	f7f8 fa97 	bl	8005640 <HAL_GetTick>
 800d112:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d007      	beq.n	800d130 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d120:	2302      	movs	r3, #2
 800d122:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d12c:	7efb      	ldrb	r3, [r7, #27]
 800d12e:	e1c2      	b.n	800d4b6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d002      	beq.n	800d13c <HAL_SPI_Transmit+0x60>
 800d136:	88fb      	ldrh	r3, [r7, #6]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d107      	bne.n	800d14c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d13c:	2301      	movs	r3, #1
 800d13e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d148:	7efb      	ldrb	r3, [r7, #27]
 800d14a:	e1b4      	b.n	800d4b6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2203      	movs	r2, #3
 800d150:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2200      	movs	r2, #0
 800d158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	68ba      	ldr	r2, [r7, #8]
 800d160:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	88fa      	ldrh	r2, [r7, #6]
 800d166:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	88fa      	ldrh	r2, [r7, #6]
 800d16e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2200      	movs	r2, #0
 800d18c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d19c:	d107      	bne.n	800d1ae <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	685a      	ldr	r2, [r3, #4]
 800d1b4:	4b96      	ldr	r3, [pc, #600]	; (800d410 <HAL_SPI_Transmit+0x334>)
 800d1b6:	4013      	ands	r3, r2
 800d1b8:	88f9      	ldrh	r1, [r7, #6]
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	6812      	ldr	r2, [r2, #0]
 800d1be:	430b      	orrs	r3, r1
 800d1c0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f042 0201 	orr.w	r2, r2, #1
 800d1d0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1da:	d107      	bne.n	800d1ec <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	2b0f      	cmp	r3, #15
 800d1f2:	d947      	bls.n	800d284 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d1f4:	e03f      	b.n	800d276 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	695b      	ldr	r3, [r3, #20]
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b02      	cmp	r3, #2
 800d202:	d114      	bne.n	800d22e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6812      	ldr	r2, [r2, #0]
 800d20e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d214:	1d1a      	adds	r2, r3, #4
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d220:	b29b      	uxth	r3, r3
 800d222:	3b01      	subs	r3, #1
 800d224:	b29a      	uxth	r2, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d22c:	e023      	b.n	800d276 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d22e:	f7f8 fa07 	bl	8005640 <HAL_GetTick>
 800d232:	4602      	mov	r2, r0
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	683a      	ldr	r2, [r7, #0]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d803      	bhi.n	800d246 <HAL_SPI_Transmit+0x16a>
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d244:	d102      	bne.n	800d24c <HAL_SPI_Transmit+0x170>
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d114      	bne.n	800d276 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f000 fe15 	bl	800de7c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e11f      	b.n	800d4b6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1b9      	bne.n	800d1f6 <HAL_SPI_Transmit+0x11a>
 800d282:	e0f2      	b.n	800d46a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	2b07      	cmp	r3, #7
 800d28a:	f240 80e7 	bls.w	800d45c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d28e:	e05d      	b.n	800d34c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	695b      	ldr	r3, [r3, #20]
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b02      	cmp	r3, #2
 800d29c:	d132      	bne.n	800d304 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d918      	bls.n	800d2dc <HAL_SPI_Transmit+0x200>
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d014      	beq.n	800d2dc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6812      	ldr	r2, [r2, #0]
 800d2bc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2c2:	1d1a      	adds	r2, r3, #4
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	3b02      	subs	r3, #2
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d2da:	e037      	b.n	800d34c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2e0:	881a      	ldrh	r2, [r3, #0]
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2ea:	1c9a      	adds	r2, r3, #2
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d302:	e023      	b.n	800d34c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d304:	f7f8 f99c 	bl	8005640 <HAL_GetTick>
 800d308:	4602      	mov	r2, r0
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	683a      	ldr	r2, [r7, #0]
 800d310:	429a      	cmp	r2, r3
 800d312:	d803      	bhi.n	800d31c <HAL_SPI_Transmit+0x240>
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31a:	d102      	bne.n	800d322 <HAL_SPI_Transmit+0x246>
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d114      	bne.n	800d34c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f000 fdaa 	bl	800de7c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	e0b4      	b.n	800d4b6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d352:	b29b      	uxth	r3, r3
 800d354:	2b00      	cmp	r3, #0
 800d356:	d19b      	bne.n	800d290 <HAL_SPI_Transmit+0x1b4>
 800d358:	e087      	b.n	800d46a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	695b      	ldr	r3, [r3, #20]
 800d360:	f003 0302 	and.w	r3, r3, #2
 800d364:	2b02      	cmp	r3, #2
 800d366:	d155      	bne.n	800d414 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d36e:	b29b      	uxth	r3, r3
 800d370:	2b03      	cmp	r3, #3
 800d372:	d918      	bls.n	800d3a6 <HAL_SPI_Transmit+0x2ca>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d378:	2b40      	cmp	r3, #64	; 0x40
 800d37a:	d914      	bls.n	800d3a6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6812      	ldr	r2, [r2, #0]
 800d386:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d38c:	1d1a      	adds	r2, r3, #4
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d398:	b29b      	uxth	r3, r3
 800d39a:	3b04      	subs	r3, #4
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d3a4:	e05a      	b.n	800d45c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d917      	bls.n	800d3e2 <HAL_SPI_Transmit+0x306>
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d013      	beq.n	800d3e2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3be:	881a      	ldrh	r2, [r3, #0]
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3c8:	1c9a      	adds	r2, r3, #2
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	3b02      	subs	r3, #2
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d3e0:	e03c      	b.n	800d45c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	3320      	adds	r3, #32
 800d3ec:	7812      	ldrb	r2, [r2, #0]
 800d3ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3f4:	1c5a      	adds	r2, r3, #1
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d400:	b29b      	uxth	r3, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	b29a      	uxth	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d40c:	e026      	b.n	800d45c <HAL_SPI_Transmit+0x380>
 800d40e:	bf00      	nop
 800d410:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d414:	f7f8 f914 	bl	8005640 <HAL_GetTick>
 800d418:	4602      	mov	r2, r0
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	1ad3      	subs	r3, r2, r3
 800d41e:	683a      	ldr	r2, [r7, #0]
 800d420:	429a      	cmp	r2, r3
 800d422:	d803      	bhi.n	800d42c <HAL_SPI_Transmit+0x350>
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d42a:	d102      	bne.n	800d432 <HAL_SPI_Transmit+0x356>
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d114      	bne.n	800d45c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f000 fd22 	bl	800de7c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d446:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2201      	movs	r2, #1
 800d454:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	e02c      	b.n	800d4b6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d462:	b29b      	uxth	r3, r3
 800d464:	2b00      	cmp	r3, #0
 800d466:	f47f af78 	bne.w	800d35a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	2200      	movs	r2, #0
 800d472:	2108      	movs	r1, #8
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f000 fda1 	bl	800dfbc <SPI_WaitOnFlagUntilTimeout>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d007      	beq.n	800d490 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d486:	f043 0220 	orr.w	r2, r3, #32
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f000 fcf3 	bl	800de7c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d001      	beq.n	800d4b4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e000      	b.n	800d4b6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d4b4:	7efb      	ldrb	r3, [r7, #27]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3720      	adds	r7, #32
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop

0800d4c0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b08a      	sub	sp, #40	; 0x28
 800d4c4:	af02      	add	r7, sp, #8
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	603b      	str	r3, [r7, #0]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	3330      	adds	r3, #48	; 0x30
 800d4da:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4e4:	d112      	bne.n	800d50c <HAL_SPI_Receive+0x4c>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d10e      	bne.n	800d50c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2204      	movs	r2, #4
 800d4f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d4f6:	88fa      	ldrh	r2, [r7, #6]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	4613      	mov	r3, r2
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	68b9      	ldr	r1, [r7, #8]
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f000 f9ce 	bl	800d8a4 <HAL_SPI_TransmitReceive>
 800d508:	4603      	mov	r3, r0
 800d50a:	e1c7      	b.n	800d89c <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d512:	2b01      	cmp	r3, #1
 800d514:	d101      	bne.n	800d51a <HAL_SPI_Receive+0x5a>
 800d516:	2302      	movs	r3, #2
 800d518:	e1c0      	b.n	800d89c <HAL_SPI_Receive+0x3dc>
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2201      	movs	r2, #1
 800d51e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d522:	f7f8 f88d 	bl	8005640 <HAL_GetTick>
 800d526:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	2b01      	cmp	r3, #1
 800d532:	d007      	beq.n	800d544 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800d534:	2302      	movs	r3, #2
 800d536:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d540:	7ffb      	ldrb	r3, [r7, #31]
 800d542:	e1ab      	b.n	800d89c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <HAL_SPI_Receive+0x90>
 800d54a:	88fb      	ldrh	r3, [r7, #6]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d107      	bne.n	800d560 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800d550:	2301      	movs	r3, #1
 800d552:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d55c:	7ffb      	ldrb	r3, [r7, #31]
 800d55e:	e19d      	b.n	800d89c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2204      	movs	r2, #4
 800d564:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	88fa      	ldrh	r2, [r7, #6]
 800d57a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	88fa      	ldrh	r2, [r7, #6]
 800d582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2200      	movs	r2, #0
 800d58a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2200      	movs	r2, #0
 800d590:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d5b0:	d107      	bne.n	800d5c2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d5c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	4b94      	ldr	r3, [pc, #592]	; (800d81c <HAL_SPI_Receive+0x35c>)
 800d5ca:	4013      	ands	r3, r2
 800d5cc:	88f9      	ldrh	r1, [r7, #6]
 800d5ce:	68fa      	ldr	r2, [r7, #12]
 800d5d0:	6812      	ldr	r2, [r2, #0]
 800d5d2:	430b      	orrs	r3, r1
 800d5d4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f042 0201 	orr.w	r2, r2, #1
 800d5e4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d5ee:	d107      	bne.n	800d600 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	2b0f      	cmp	r3, #15
 800d606:	d948      	bls.n	800d69a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d608:	e040      	b.n	800d68c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	695a      	ldr	r2, [r3, #20]
 800d610:	f248 0308 	movw	r3, #32776	; 0x8008
 800d614:	4013      	ands	r3, r2
 800d616:	2b00      	cmp	r3, #0
 800d618:	d014      	beq.n	800d644 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d622:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d624:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d62a:	1d1a      	adds	r2, r3, #4
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d636:	b29b      	uxth	r3, r3
 800d638:	3b01      	subs	r3, #1
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d642:	e023      	b.n	800d68c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d644:	f7f7 fffc 	bl	8005640 <HAL_GetTick>
 800d648:	4602      	mov	r2, r0
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	429a      	cmp	r2, r3
 800d652:	d803      	bhi.n	800d65c <HAL_SPI_Receive+0x19c>
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65a:	d102      	bne.n	800d662 <HAL_SPI_Receive+0x1a2>
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d114      	bne.n	800d68c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f000 fc0a 	bl	800de7c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d676:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2201      	movs	r2, #1
 800d684:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d688:	2301      	movs	r3, #1
 800d68a:	e107      	b.n	800d89c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d692:	b29b      	uxth	r3, r3
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1b8      	bne.n	800d60a <HAL_SPI_Receive+0x14a>
 800d698:	e0ed      	b.n	800d876 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	2b07      	cmp	r3, #7
 800d6a0:	f240 80e2 	bls.w	800d868 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d6a4:	e05b      	b.n	800d75e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	695b      	ldr	r3, [r3, #20]
 800d6ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d030      	beq.n	800d716 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d014      	beq.n	800d6ec <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d6cc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6d2:	1d1a      	adds	r2, r3, #4
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	3b02      	subs	r3, #2
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d6ea:	e038      	b.n	800d75e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6f0:	69ba      	ldr	r2, [r7, #24]
 800d6f2:	8812      	ldrh	r2, [r2, #0]
 800d6f4:	b292      	uxth	r2, r2
 800d6f6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6fc:	1c9a      	adds	r2, r3, #2
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d708:	b29b      	uxth	r3, r3
 800d70a:	3b01      	subs	r3, #1
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d714:	e023      	b.n	800d75e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d716:	f7f7 ff93 	bl	8005640 <HAL_GetTick>
 800d71a:	4602      	mov	r2, r0
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	683a      	ldr	r2, [r7, #0]
 800d722:	429a      	cmp	r2, r3
 800d724:	d803      	bhi.n	800d72e <HAL_SPI_Receive+0x26e>
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72c:	d102      	bne.n	800d734 <HAL_SPI_Receive+0x274>
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d114      	bne.n	800d75e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f000 fba1 	bl	800de7c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2200      	movs	r2, #0
 800d73e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d748:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2201      	movs	r2, #1
 800d756:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d75a:	2301      	movs	r3, #1
 800d75c:	e09e      	b.n	800d89c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d764:	b29b      	uxth	r3, r3
 800d766:	2b00      	cmp	r3, #0
 800d768:	d19d      	bne.n	800d6a6 <HAL_SPI_Receive+0x1e6>
 800d76a:	e084      	b.n	800d876 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	695b      	ldr	r3, [r3, #20]
 800d772:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d776:	2b00      	cmp	r3, #0
 800d778:	d052      	beq.n	800d820 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d784:	2b00      	cmp	r3, #0
 800d786:	d014      	beq.n	800d7b2 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d790:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d792:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d798:	1d1a      	adds	r2, r3, #4
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	3b04      	subs	r3, #4
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d7b0:	e05a      	b.n	800d868 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	695b      	ldr	r3, [r3, #20]
 800d7b8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d7bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7c0:	d914      	bls.n	800d7ec <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7c6:	69ba      	ldr	r2, [r7, #24]
 800d7c8:	8812      	ldrh	r2, [r2, #0]
 800d7ca:	b292      	uxth	r2, r2
 800d7cc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7d2:	1c9a      	adds	r2, r3, #2
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	3b02      	subs	r3, #2
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d7ea:	e03d      	b.n	800d868 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7f8:	7812      	ldrb	r2, [r2, #0]
 800d7fa:	b2d2      	uxtb	r2, r2
 800d7fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d80e:	b29b      	uxth	r3, r3
 800d810:	3b01      	subs	r3, #1
 800d812:	b29a      	uxth	r2, r3
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d81a:	e025      	b.n	800d868 <HAL_SPI_Receive+0x3a8>
 800d81c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d820:	f7f7 ff0e 	bl	8005640 <HAL_GetTick>
 800d824:	4602      	mov	r2, r0
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	683a      	ldr	r2, [r7, #0]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d803      	bhi.n	800d838 <HAL_SPI_Receive+0x378>
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d836:	d102      	bne.n	800d83e <HAL_SPI_Receive+0x37e>
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d114      	bne.n	800d868 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f000 fb1c 	bl	800de7c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2200      	movs	r2, #0
 800d848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d852:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2201      	movs	r2, #1
 800d860:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	e019      	b.n	800d89c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d86e:	b29b      	uxth	r3, r3
 800d870:	2b00      	cmp	r3, #0
 800d872:	f47f af7b 	bne.w	800d76c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f000 fb00 	bl	800de7c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2200      	movs	r2, #0
 800d880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2201      	movs	r2, #1
 800d888:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d892:	2b00      	cmp	r3, #0
 800d894:	d001      	beq.n	800d89a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800d896:	2301      	movs	r3, #1
 800d898:	e000      	b.n	800d89c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800d89a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3720      	adds	r7, #32
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b08e      	sub	sp, #56	; 0x38
 800d8a8:	af02      	add	r7, sp, #8
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
 800d8b0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	3320      	adds	r3, #32
 800d8be:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3330      	adds	r3, #48	; 0x30
 800d8c6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d101      	bne.n	800d8d6 <HAL_SPI_TransmitReceive+0x32>
 800d8d2:	2302      	movs	r3, #2
 800d8d4:	e2ce      	b.n	800de74 <HAL_SPI_TransmitReceive+0x5d0>
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2201      	movs	r2, #1
 800d8da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8de:	f7f7 feaf 	bl	8005640 <HAL_GetTick>
 800d8e2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d8e4:	887b      	ldrh	r3, [r7, #2]
 800d8e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d8e8:	887b      	ldrh	r3, [r7, #2]
 800d8ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d8f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d8fa:	7efb      	ldrb	r3, [r7, #27]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d014      	beq.n	800d92a <HAL_SPI_TransmitReceive+0x86>
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d906:	d106      	bne.n	800d916 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d102      	bne.n	800d916 <HAL_SPI_TransmitReceive+0x72>
 800d910:	7efb      	ldrb	r3, [r7, #27]
 800d912:	2b04      	cmp	r3, #4
 800d914:	d009      	beq.n	800d92a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800d916:	2302      	movs	r3, #2
 800d918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d924:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d928:	e2a4      	b.n	800de74 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d005      	beq.n	800d93c <HAL_SPI_TransmitReceive+0x98>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d002      	beq.n	800d93c <HAL_SPI_TransmitReceive+0x98>
 800d936:	887b      	ldrh	r3, [r7, #2]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d109      	bne.n	800d950 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d93c:	2301      	movs	r3, #1
 800d93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d94a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d94e:	e291      	b.n	800de74 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d956:	b2db      	uxtb	r3, r3
 800d958:	2b04      	cmp	r3, #4
 800d95a:	d003      	beq.n	800d964 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2205      	movs	r2, #5
 800d960:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2200      	movs	r2, #0
 800d968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	887a      	ldrh	r2, [r7, #2]
 800d976:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	887a      	ldrh	r2, [r7, #2]
 800d97e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	887a      	ldrh	r2, [r7, #2]
 800d98c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	887a      	ldrh	r2, [r7, #2]
 800d994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2200      	movs	r2, #0
 800d99c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	685a      	ldr	r2, [r3, #4]
 800d9aa:	4b9f      	ldr	r3, [pc, #636]	; (800dc28 <HAL_SPI_TransmitReceive+0x384>)
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	8879      	ldrh	r1, [r7, #2]
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	6812      	ldr	r2, [r2, #0]
 800d9b4:	430b      	orrs	r3, r1
 800d9b6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f042 0201 	orr.w	r2, r2, #1
 800d9c6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9d0:	d107      	bne.n	800d9e2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	2b0f      	cmp	r3, #15
 800d9e8:	d970      	bls.n	800dacc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d9ea:	e068      	b.n	800dabe <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	f003 0302 	and.w	r3, r3, #2
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d11a      	bne.n	800da30 <HAL_SPI_TransmitReceive+0x18c>
 800d9fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d017      	beq.n	800da30 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	6812      	ldr	r2, [r2, #0]
 800da0a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da10:	1d1a      	adds	r2, r3, #4
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	3b01      	subs	r3, #1
 800da20:	b29a      	uxth	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	695a      	ldr	r2, [r3, #20]
 800da36:	f248 0308 	movw	r3, #32776	; 0x8008
 800da3a:	4013      	ands	r3, r2
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d01a      	beq.n	800da76 <HAL_SPI_TransmitReceive+0x1d2>
 800da40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da42:	2b00      	cmp	r3, #0
 800da44:	d017      	beq.n	800da76 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800da50:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da56:	1d1a      	adds	r2, r3, #4
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da62:	b29b      	uxth	r3, r3
 800da64:	3b01      	subs	r3, #1
 800da66:	b29a      	uxth	r2, r3
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da74:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da76:	f7f7 fde3 	bl	8005640 <HAL_GetTick>
 800da7a:	4602      	mov	r2, r0
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da82:	429a      	cmp	r2, r3
 800da84:	d803      	bhi.n	800da8e <HAL_SPI_TransmitReceive+0x1ea>
 800da86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da8c:	d102      	bne.n	800da94 <HAL_SPI_TransmitReceive+0x1f0>
 800da8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da90:	2b00      	cmp	r3, #0
 800da92:	d114      	bne.n	800dabe <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800da94:	68f8      	ldr	r0, [r7, #12]
 800da96:	f000 f9f1 	bl	800de7c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800daa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2201      	movs	r2, #1
 800dab6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800daba:	2301      	movs	r3, #1
 800dabc:	e1da      	b.n	800de74 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dabe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d193      	bne.n	800d9ec <HAL_SPI_TransmitReceive+0x148>
 800dac4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d190      	bne.n	800d9ec <HAL_SPI_TransmitReceive+0x148>
 800daca:	e1ac      	b.n	800de26 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	2b07      	cmp	r3, #7
 800dad2:	f240 81a0 	bls.w	800de16 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dad6:	e0a9      	b.n	800dc2c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	695b      	ldr	r3, [r3, #20]
 800dade:	f003 0302 	and.w	r3, r3, #2
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d139      	bne.n	800db5a <HAL_SPI_TransmitReceive+0x2b6>
 800dae6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d036      	beq.n	800db5a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800daec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d91c      	bls.n	800db2c <HAL_SPI_TransmitReceive+0x288>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d018      	beq.n	800db2c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6812      	ldr	r2, [r2, #0]
 800db04:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db0a:	1d1a      	adds	r2, r3, #4
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db16:	b29b      	uxth	r3, r3
 800db18:	3b02      	subs	r3, #2
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800db2a:	e016      	b.n	800db5a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db30:	881a      	ldrh	r2, [r3, #0]
 800db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db34:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db3a:	1c9a      	adds	r2, r3, #2
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db46:	b29b      	uxth	r3, r3
 800db48:	3b01      	subs	r3, #1
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db58:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800db64:	2b00      	cmp	r3, #0
 800db66:	d03a      	beq.n	800dbde <HAL_SPI_TransmitReceive+0x33a>
 800db68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d037      	beq.n	800dbde <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	695b      	ldr	r3, [r3, #20]
 800db74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d018      	beq.n	800dbae <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800db86:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db8c:	1d1a      	adds	r2, r3, #4
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db98:	b29b      	uxth	r3, r3
 800db9a:	3b02      	subs	r3, #2
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbaa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dbac:	e017      	b.n	800dbde <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbb2:	6a3a      	ldr	r2, [r7, #32]
 800dbb4:	8812      	ldrh	r2, [r2, #0]
 800dbb6:	b292      	uxth	r2, r2
 800dbb8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbbe:	1c9a      	adds	r2, r3, #2
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbdc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbde:	f7f7 fd2f 	bl	8005640 <HAL_GetTick>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	1ad3      	subs	r3, r2, r3
 800dbe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d803      	bhi.n	800dbf6 <HAL_SPI_TransmitReceive+0x352>
 800dbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf4:	d102      	bne.n	800dbfc <HAL_SPI_TransmitReceive+0x358>
 800dbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d117      	bne.n	800dc2c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	f000 f93d 	bl	800de7c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2200      	movs	r2, #0
 800dc06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	e126      	b.n	800de74 <HAL_SPI_TransmitReceive+0x5d0>
 800dc26:	bf00      	nop
 800dc28:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dc2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f47f af52 	bne.w	800dad8 <HAL_SPI_TransmitReceive+0x234>
 800dc34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f47f af4e 	bne.w	800dad8 <HAL_SPI_TransmitReceive+0x234>
 800dc3c:	e0f3      	b.n	800de26 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	695b      	ldr	r3, [r3, #20]
 800dc44:	f003 0302 	and.w	r3, r3, #2
 800dc48:	2b02      	cmp	r3, #2
 800dc4a:	d15a      	bne.n	800dd02 <HAL_SPI_TransmitReceive+0x45e>
 800dc4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d057      	beq.n	800dd02 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dc52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	d91c      	bls.n	800dc92 <HAL_SPI_TransmitReceive+0x3ee>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc5c:	2b40      	cmp	r3, #64	; 0x40
 800dc5e:	d918      	bls.n	800dc92 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6812      	ldr	r2, [r2, #0]
 800dc6a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc70:	1d1a      	adds	r2, r3, #4
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	3b04      	subs	r3, #4
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dc90:	e037      	b.n	800dd02 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dc92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d91b      	bls.n	800dcd0 <HAL_SPI_TransmitReceive+0x42c>
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d017      	beq.n	800dcd0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dca4:	881a      	ldrh	r2, [r3, #0]
 800dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcae:	1c9a      	adds	r2, r3, #2
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	3b02      	subs	r3, #2
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dccc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dcce:	e018      	b.n	800dd02 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3320      	adds	r3, #32
 800dcda:	7812      	ldrb	r2, [r2, #0]
 800dcdc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd00:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	695b      	ldr	r3, [r3, #20]
 800dd08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d05e      	beq.n	800ddce <HAL_SPI_TransmitReceive+0x52a>
 800dd10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d05b      	beq.n	800ddce <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	695b      	ldr	r3, [r3, #20]
 800dd1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d018      	beq.n	800dd56 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd2e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd34:	1d1a      	adds	r2, r3, #4
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	3b04      	subs	r3, #4
 800dd44:	b29a      	uxth	r2, r3
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dd54:	e03b      	b.n	800ddce <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	695b      	ldr	r3, [r3, #20]
 800dd5c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800dd60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd64:	d918      	bls.n	800dd98 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd6a:	6a3a      	ldr	r2, [r7, #32]
 800dd6c:	8812      	ldrh	r2, [r2, #0]
 800dd6e:	b292      	uxth	r2, r2
 800dd70:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd76:	1c9a      	adds	r2, r3, #2
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	3b02      	subs	r3, #2
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd94:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dd96:	e01a      	b.n	800ddce <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dda4:	7812      	ldrb	r2, [r2, #0]
 800dda6:	b2d2      	uxtb	r2, r2
 800dda8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddae:	1c5a      	adds	r2, r3, #1
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	3b01      	subs	r3, #1
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddcc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddce:	f7f7 fc37 	bl	8005640 <HAL_GetTick>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	1ad3      	subs	r3, r2, r3
 800ddd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d803      	bhi.n	800dde6 <HAL_SPI_TransmitReceive+0x542>
 800ddde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dde4:	d102      	bne.n	800ddec <HAL_SPI_TransmitReceive+0x548>
 800dde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d114      	bne.n	800de16 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f000 f845 	bl	800de7c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2201      	movs	r2, #1
 800de0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e02e      	b.n	800de74 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800de16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f47f af10 	bne.w	800dc3e <HAL_SPI_TransmitReceive+0x39a>
 800de1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de20:	2b00      	cmp	r3, #0
 800de22:	f47f af0c 	bne.w	800dc3e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800de26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	2200      	movs	r2, #0
 800de2e:	2108      	movs	r1, #8
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f000 f8c3 	bl	800dfbc <SPI_WaitOnFlagUntilTimeout>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d007      	beq.n	800de4c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de42:	f043 0220 	orr.w	r2, r3, #32
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f000 f815 	bl	800de7c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2200      	movs	r2, #0
 800de56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2201      	movs	r2, #1
 800de5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d001      	beq.n	800de70 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	e001      	b.n	800de74 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800de70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800de74:	4618      	mov	r0, r3
 800de76:	3730      	adds	r7, #48	; 0x30
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	699a      	ldr	r2, [r3, #24]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f042 0208 	orr.w	r2, r2, #8
 800de9a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	699a      	ldr	r2, [r3, #24]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f042 0210 	orr.w	r2, r2, #16
 800deaa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f022 0201 	bic.w	r2, r2, #1
 800deba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	6919      	ldr	r1, [r3, #16]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	4b3c      	ldr	r3, [pc, #240]	; (800dfb8 <SPI_CloseTransfer+0x13c>)
 800dec8:	400b      	ands	r3, r1
 800deca:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	689a      	ldr	r2, [r3, #8]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800deda:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	2b04      	cmp	r3, #4
 800dee6:	d014      	beq.n	800df12 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f003 0320 	and.w	r3, r3, #32
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00f      	beq.n	800df12 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800def8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	699a      	ldr	r2, [r3, #24]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f042 0220 	orr.w	r2, r2, #32
 800df10:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	2b03      	cmp	r3, #3
 800df1c:	d014      	beq.n	800df48 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00f      	beq.n	800df48 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df2e:	f043 0204 	orr.w	r2, r3, #4
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	699a      	ldr	r2, [r3, #24]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df46:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00f      	beq.n	800df72 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df58:	f043 0201 	orr.w	r2, r3, #1
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	699a      	ldr	r2, [r3, #24]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df70:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00f      	beq.n	800df9c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df82:	f043 0208 	orr.w	r2, r3, #8
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	699a      	ldr	r2, [r3, #24]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df9a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800dfac:	bf00      	nop
 800dfae:	3714      	adds	r7, #20
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr
 800dfb8:	fffffc90 	.word	0xfffffc90

0800dfbc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	603b      	str	r3, [r7, #0]
 800dfc8:	4613      	mov	r3, r2
 800dfca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dfcc:	e010      	b.n	800dff0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfce:	f7f7 fb37 	bl	8005640 <HAL_GetTick>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	69ba      	ldr	r2, [r7, #24]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d803      	bhi.n	800dfe6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe4:	d102      	bne.n	800dfec <SPI_WaitOnFlagUntilTimeout+0x30>
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d101      	bne.n	800dff0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800dfec:	2303      	movs	r3, #3
 800dfee:	e00f      	b.n	800e010 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	695a      	ldr	r2, [r3, #20]
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	4013      	ands	r3, r2
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	bf0c      	ite	eq
 800e000:	2301      	moveq	r3, #1
 800e002:	2300      	movne	r3, #0
 800e004:	b2db      	uxtb	r3, r3
 800e006:	461a      	mov	r2, r3
 800e008:	79fb      	ldrb	r3, [r7, #7]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d0df      	beq.n	800dfce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e00e:	2300      	movs	r3, #0
}
 800e010:	4618      	mov	r0, r3
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e018:	b480      	push	{r7}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e024:	095b      	lsrs	r3, r3, #5
 800e026:	3301      	adds	r3, #1
 800e028:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	3301      	adds	r3, #1
 800e030:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	3307      	adds	r3, #7
 800e036:	08db      	lsrs	r3, r3, #3
 800e038:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	fb02 f303 	mul.w	r3, r2, r3
}
 800e042:	4618      	mov	r0, r3
 800e044:	3714      	adds	r7, #20
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr

0800e04e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d101      	bne.n	800e060 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e05c:	2301      	movs	r3, #1
 800e05e:	e049      	b.n	800e0f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d106      	bne.n	800e07a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2200      	movs	r2, #0
 800e070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f841 	bl	800e0fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2202      	movs	r2, #2
 800e07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	3304      	adds	r3, #4
 800e08a:	4619      	mov	r1, r3
 800e08c:	4610      	mov	r0, r2
 800e08e:	f000 fb5d 	bl	800e74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2201      	movs	r2, #1
 800e096:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	2b01      	cmp	r3, #1
 800e122:	d001      	beq.n	800e128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e124:	2301      	movs	r3, #1
 800e126:	e04f      	b.n	800e1c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2202      	movs	r2, #2
 800e12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68da      	ldr	r2, [r3, #12]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f042 0201 	orr.w	r2, r2, #1
 800e13e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a23      	ldr	r2, [pc, #140]	; (800e1d4 <HAL_TIM_Base_Start_IT+0xc4>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d01d      	beq.n	800e186 <HAL_TIM_Base_Start_IT+0x76>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e152:	d018      	beq.n	800e186 <HAL_TIM_Base_Start_IT+0x76>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a1f      	ldr	r2, [pc, #124]	; (800e1d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d013      	beq.n	800e186 <HAL_TIM_Base_Start_IT+0x76>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a1e      	ldr	r2, [pc, #120]	; (800e1dc <HAL_TIM_Base_Start_IT+0xcc>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d00e      	beq.n	800e186 <HAL_TIM_Base_Start_IT+0x76>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a1c      	ldr	r2, [pc, #112]	; (800e1e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d009      	beq.n	800e186 <HAL_TIM_Base_Start_IT+0x76>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a1b      	ldr	r2, [pc, #108]	; (800e1e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d004      	beq.n	800e186 <HAL_TIM_Base_Start_IT+0x76>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a19      	ldr	r2, [pc, #100]	; (800e1e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d115      	bne.n	800e1b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	689a      	ldr	r2, [r3, #8]
 800e18c:	4b17      	ldr	r3, [pc, #92]	; (800e1ec <HAL_TIM_Base_Start_IT+0xdc>)
 800e18e:	4013      	ands	r3, r2
 800e190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b06      	cmp	r3, #6
 800e196:	d015      	beq.n	800e1c4 <HAL_TIM_Base_Start_IT+0xb4>
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e19e:	d011      	beq.n	800e1c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f042 0201 	orr.w	r2, r2, #1
 800e1ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1b0:	e008      	b.n	800e1c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f042 0201 	orr.w	r2, r2, #1
 800e1c0:	601a      	str	r2, [r3, #0]
 800e1c2:	e000      	b.n	800e1c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	40010000 	.word	0x40010000
 800e1d8:	40000400 	.word	0x40000400
 800e1dc:	40000800 	.word	0x40000800
 800e1e0:	40000c00 	.word	0x40000c00
 800e1e4:	40010400 	.word	0x40010400
 800e1e8:	40001800 	.word	0x40001800
 800e1ec:	00010007 	.word	0x00010007

0800e1f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e1fe:	2301      	movs	r3, #1
 800e200:	e049      	b.n	800e296 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d106      	bne.n	800e21c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2200      	movs	r2, #0
 800e212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7f4 fca4 	bl	8002b64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2202      	movs	r2, #2
 800e220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3304      	adds	r3, #4
 800e22c:	4619      	mov	r1, r3
 800e22e:	4610      	mov	r0, r2
 800e230:	f000 fa8c 	bl	800e74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2201      	movs	r2, #1
 800e238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2201      	movs	r2, #1
 800e240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2201      	movs	r2, #1
 800e260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2201      	movs	r2, #1
 800e268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b082      	sub	sp, #8
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	f003 0302 	and.w	r3, r3, #2
 800e2b0:	2b02      	cmp	r3, #2
 800e2b2:	d122      	bne.n	800e2fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	f003 0302 	and.w	r3, r3, #2
 800e2be:	2b02      	cmp	r3, #2
 800e2c0:	d11b      	bne.n	800e2fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f06f 0202 	mvn.w	r2, #2
 800e2ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	699b      	ldr	r3, [r3, #24]
 800e2d8:	f003 0303 	and.w	r3, r3, #3
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d003      	beq.n	800e2e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 fa15 	bl	800e710 <HAL_TIM_IC_CaptureCallback>
 800e2e6:	e005      	b.n	800e2f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 fa07 	bl	800e6fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 fa18 	bl	800e724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	691b      	ldr	r3, [r3, #16]
 800e300:	f003 0304 	and.w	r3, r3, #4
 800e304:	2b04      	cmp	r3, #4
 800e306:	d122      	bne.n	800e34e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	f003 0304 	and.w	r3, r3, #4
 800e312:	2b04      	cmp	r3, #4
 800e314:	d11b      	bne.n	800e34e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f06f 0204 	mvn.w	r2, #4
 800e31e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2202      	movs	r2, #2
 800e324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e330:	2b00      	cmp	r3, #0
 800e332:	d003      	beq.n	800e33c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 f9eb 	bl	800e710 <HAL_TIM_IC_CaptureCallback>
 800e33a:	e005      	b.n	800e348 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 f9dd 	bl	800e6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 f9ee 	bl	800e724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	691b      	ldr	r3, [r3, #16]
 800e354:	f003 0308 	and.w	r3, r3, #8
 800e358:	2b08      	cmp	r3, #8
 800e35a:	d122      	bne.n	800e3a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	f003 0308 	and.w	r3, r3, #8
 800e366:	2b08      	cmp	r3, #8
 800e368:	d11b      	bne.n	800e3a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f06f 0208 	mvn.w	r2, #8
 800e372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2204      	movs	r2, #4
 800e378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	69db      	ldr	r3, [r3, #28]
 800e380:	f003 0303 	and.w	r3, r3, #3
 800e384:	2b00      	cmp	r3, #0
 800e386:	d003      	beq.n	800e390 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f9c1 	bl	800e710 <HAL_TIM_IC_CaptureCallback>
 800e38e:	e005      	b.n	800e39c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 f9b3 	bl	800e6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f9c4 	bl	800e724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	691b      	ldr	r3, [r3, #16]
 800e3a8:	f003 0310 	and.w	r3, r3, #16
 800e3ac:	2b10      	cmp	r3, #16
 800e3ae:	d122      	bne.n	800e3f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	f003 0310 	and.w	r3, r3, #16
 800e3ba:	2b10      	cmp	r3, #16
 800e3bc:	d11b      	bne.n	800e3f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f06f 0210 	mvn.w	r2, #16
 800e3c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2208      	movs	r2, #8
 800e3cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	69db      	ldr	r3, [r3, #28]
 800e3d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d003      	beq.n	800e3e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f997 	bl	800e710 <HAL_TIM_IC_CaptureCallback>
 800e3e2:	e005      	b.n	800e3f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 f989 	bl	800e6fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f99a 	bl	800e724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	691b      	ldr	r3, [r3, #16]
 800e3fc:	f003 0301 	and.w	r3, r3, #1
 800e400:	2b01      	cmp	r3, #1
 800e402:	d10e      	bne.n	800e422 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d107      	bne.n	800e422 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f06f 0201 	mvn.w	r2, #1
 800e41a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f7f3 fe07 	bl	8002030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	691b      	ldr	r3, [r3, #16]
 800e428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e42c:	2b80      	cmp	r3, #128	; 0x80
 800e42e:	d10e      	bne.n	800e44e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e43a:	2b80      	cmp	r3, #128	; 0x80
 800e43c:	d107      	bne.n	800e44e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 feb1 	bl	800f1b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	691b      	ldr	r3, [r3, #16]
 800e454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e45c:	d10e      	bne.n	800e47c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e468:	2b80      	cmp	r3, #128	; 0x80
 800e46a:	d107      	bne.n	800e47c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 fea4 	bl	800f1c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e486:	2b40      	cmp	r3, #64	; 0x40
 800e488:	d10e      	bne.n	800e4a8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e494:	2b40      	cmp	r3, #64	; 0x40
 800e496:	d107      	bne.n	800e4a8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e4a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 f948 	bl	800e738 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	f003 0320 	and.w	r3, r3, #32
 800e4b2:	2b20      	cmp	r3, #32
 800e4b4:	d10e      	bne.n	800e4d4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	f003 0320 	and.w	r3, r3, #32
 800e4c0:	2b20      	cmp	r3, #32
 800e4c2:	d107      	bne.n	800e4d4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f06f 0220 	mvn.w	r2, #32
 800e4cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 fe64 	bl	800f19c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4d4:	bf00      	nop
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d101      	bne.n	800e4f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e4f2:	2302      	movs	r3, #2
 800e4f4:	e0fd      	b.n	800e6f2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2b14      	cmp	r3, #20
 800e502:	f200 80f0 	bhi.w	800e6e6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e506:	a201      	add	r2, pc, #4	; (adr r2, 800e50c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50c:	0800e561 	.word	0x0800e561
 800e510:	0800e6e7 	.word	0x0800e6e7
 800e514:	0800e6e7 	.word	0x0800e6e7
 800e518:	0800e6e7 	.word	0x0800e6e7
 800e51c:	0800e5a1 	.word	0x0800e5a1
 800e520:	0800e6e7 	.word	0x0800e6e7
 800e524:	0800e6e7 	.word	0x0800e6e7
 800e528:	0800e6e7 	.word	0x0800e6e7
 800e52c:	0800e5e3 	.word	0x0800e5e3
 800e530:	0800e6e7 	.word	0x0800e6e7
 800e534:	0800e6e7 	.word	0x0800e6e7
 800e538:	0800e6e7 	.word	0x0800e6e7
 800e53c:	0800e623 	.word	0x0800e623
 800e540:	0800e6e7 	.word	0x0800e6e7
 800e544:	0800e6e7 	.word	0x0800e6e7
 800e548:	0800e6e7 	.word	0x0800e6e7
 800e54c:	0800e665 	.word	0x0800e665
 800e550:	0800e6e7 	.word	0x0800e6e7
 800e554:	0800e6e7 	.word	0x0800e6e7
 800e558:	0800e6e7 	.word	0x0800e6e7
 800e55c:	0800e6a5 	.word	0x0800e6a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68b9      	ldr	r1, [r7, #8]
 800e566:	4618      	mov	r0, r3
 800e568:	f000 f98a 	bl	800e880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	699a      	ldr	r2, [r3, #24]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f042 0208 	orr.w	r2, r2, #8
 800e57a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	699a      	ldr	r2, [r3, #24]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f022 0204 	bic.w	r2, r2, #4
 800e58a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6999      	ldr	r1, [r3, #24]
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	691a      	ldr	r2, [r3, #16]
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	430a      	orrs	r2, r1
 800e59c:	619a      	str	r2, [r3, #24]
      break;
 800e59e:	e0a3      	b.n	800e6e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	68b9      	ldr	r1, [r7, #8]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f000 f9fa 	bl	800e9a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	699a      	ldr	r2, [r3, #24]
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	699a      	ldr	r2, [r3, #24]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	6999      	ldr	r1, [r3, #24]
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	691b      	ldr	r3, [r3, #16]
 800e5d6:	021a      	lsls	r2, r3, #8
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	430a      	orrs	r2, r1
 800e5de:	619a      	str	r2, [r3, #24]
      break;
 800e5e0:	e082      	b.n	800e6e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	68b9      	ldr	r1, [r7, #8]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f000 fa63 	bl	800eab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	69da      	ldr	r2, [r3, #28]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f042 0208 	orr.w	r2, r2, #8
 800e5fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	69da      	ldr	r2, [r3, #28]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f022 0204 	bic.w	r2, r2, #4
 800e60c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	69d9      	ldr	r1, [r3, #28]
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	691a      	ldr	r2, [r3, #16]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	430a      	orrs	r2, r1
 800e61e:	61da      	str	r2, [r3, #28]
      break;
 800e620:	e062      	b.n	800e6e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	68b9      	ldr	r1, [r7, #8]
 800e628:	4618      	mov	r0, r3
 800e62a:	f000 fac9 	bl	800ebc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	69da      	ldr	r2, [r3, #28]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e63c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	69da      	ldr	r2, [r3, #28]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e64c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	69d9      	ldr	r1, [r3, #28]
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	021a      	lsls	r2, r3, #8
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	430a      	orrs	r2, r1
 800e660:	61da      	str	r2, [r3, #28]
      break;
 800e662:	e041      	b.n	800e6e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	68b9      	ldr	r1, [r7, #8]
 800e66a:	4618      	mov	r0, r3
 800e66c:	f000 fb10 	bl	800ec90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f042 0208 	orr.w	r2, r2, #8
 800e67e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f022 0204 	bic.w	r2, r2, #4
 800e68e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	691a      	ldr	r2, [r3, #16]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	430a      	orrs	r2, r1
 800e6a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e6a2:	e021      	b.n	800e6e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f000 fb52 	bl	800ed54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	691b      	ldr	r3, [r3, #16]
 800e6da:	021a      	lsls	r2, r3, #8
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	430a      	orrs	r2, r1
 800e6e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e6e4:	e000      	b.n	800e6e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800e6e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop

0800e6fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e704:	bf00      	nop
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e718:	bf00      	nop
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b085      	sub	sp, #20
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4a40      	ldr	r2, [pc, #256]	; (800e860 <TIM_Base_SetConfig+0x114>)
 800e760:	4293      	cmp	r3, r2
 800e762:	d013      	beq.n	800e78c <TIM_Base_SetConfig+0x40>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e76a:	d00f      	beq.n	800e78c <TIM_Base_SetConfig+0x40>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a3d      	ldr	r2, [pc, #244]	; (800e864 <TIM_Base_SetConfig+0x118>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d00b      	beq.n	800e78c <TIM_Base_SetConfig+0x40>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4a3c      	ldr	r2, [pc, #240]	; (800e868 <TIM_Base_SetConfig+0x11c>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d007      	beq.n	800e78c <TIM_Base_SetConfig+0x40>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a3b      	ldr	r2, [pc, #236]	; (800e86c <TIM_Base_SetConfig+0x120>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d003      	beq.n	800e78c <TIM_Base_SetConfig+0x40>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a3a      	ldr	r2, [pc, #232]	; (800e870 <TIM_Base_SetConfig+0x124>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d108      	bne.n	800e79e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4a2f      	ldr	r2, [pc, #188]	; (800e860 <TIM_Base_SetConfig+0x114>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d01f      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7ac:	d01b      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a2c      	ldr	r2, [pc, #176]	; (800e864 <TIM_Base_SetConfig+0x118>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d017      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a2b      	ldr	r2, [pc, #172]	; (800e868 <TIM_Base_SetConfig+0x11c>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d013      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a2a      	ldr	r2, [pc, #168]	; (800e86c <TIM_Base_SetConfig+0x120>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d00f      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a29      	ldr	r2, [pc, #164]	; (800e870 <TIM_Base_SetConfig+0x124>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d00b      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a28      	ldr	r2, [pc, #160]	; (800e874 <TIM_Base_SetConfig+0x128>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d007      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a27      	ldr	r2, [pc, #156]	; (800e878 <TIM_Base_SetConfig+0x12c>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d003      	beq.n	800e7e6 <TIM_Base_SetConfig+0x9a>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a26      	ldr	r2, [pc, #152]	; (800e87c <TIM_Base_SetConfig+0x130>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d108      	bne.n	800e7f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	4313      	orrs	r3, r2
 800e804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	689a      	ldr	r2, [r3, #8]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a10      	ldr	r2, [pc, #64]	; (800e860 <TIM_Base_SetConfig+0x114>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d00f      	beq.n	800e844 <TIM_Base_SetConfig+0xf8>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	4a12      	ldr	r2, [pc, #72]	; (800e870 <TIM_Base_SetConfig+0x124>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d00b      	beq.n	800e844 <TIM_Base_SetConfig+0xf8>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a11      	ldr	r2, [pc, #68]	; (800e874 <TIM_Base_SetConfig+0x128>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d007      	beq.n	800e844 <TIM_Base_SetConfig+0xf8>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a10      	ldr	r2, [pc, #64]	; (800e878 <TIM_Base_SetConfig+0x12c>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d003      	beq.n	800e844 <TIM_Base_SetConfig+0xf8>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a0f      	ldr	r2, [pc, #60]	; (800e87c <TIM_Base_SetConfig+0x130>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d103      	bne.n	800e84c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	691a      	ldr	r2, [r3, #16]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2201      	movs	r2, #1
 800e850:	615a      	str	r2, [r3, #20]
}
 800e852:	bf00      	nop
 800e854:	3714      	adds	r7, #20
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	40010000 	.word	0x40010000
 800e864:	40000400 	.word	0x40000400
 800e868:	40000800 	.word	0x40000800
 800e86c:	40000c00 	.word	0x40000c00
 800e870:	40010400 	.word	0x40010400
 800e874:	40014000 	.word	0x40014000
 800e878:	40014400 	.word	0x40014400
 800e87c:	40014800 	.word	0x40014800

0800e880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e880:	b480      	push	{r7}
 800e882:	b087      	sub	sp, #28
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a1b      	ldr	r3, [r3, #32]
 800e88e:	f023 0201 	bic.w	r2, r3, #1
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	699b      	ldr	r3, [r3, #24]
 800e8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	4b37      	ldr	r3, [pc, #220]	; (800e988 <TIM_OC1_SetConfig+0x108>)
 800e8ac:	4013      	ands	r3, r2
 800e8ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f023 0303 	bic.w	r3, r3, #3
 800e8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	f023 0302 	bic.w	r3, r3, #2
 800e8c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	689b      	ldr	r3, [r3, #8]
 800e8ce:	697a      	ldr	r2, [r7, #20]
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4a2d      	ldr	r2, [pc, #180]	; (800e98c <TIM_OC1_SetConfig+0x10c>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d00f      	beq.n	800e8fc <TIM_OC1_SetConfig+0x7c>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4a2c      	ldr	r2, [pc, #176]	; (800e990 <TIM_OC1_SetConfig+0x110>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d00b      	beq.n	800e8fc <TIM_OC1_SetConfig+0x7c>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4a2b      	ldr	r2, [pc, #172]	; (800e994 <TIM_OC1_SetConfig+0x114>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d007      	beq.n	800e8fc <TIM_OC1_SetConfig+0x7c>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4a2a      	ldr	r2, [pc, #168]	; (800e998 <TIM_OC1_SetConfig+0x118>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d003      	beq.n	800e8fc <TIM_OC1_SetConfig+0x7c>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	4a29      	ldr	r2, [pc, #164]	; (800e99c <TIM_OC1_SetConfig+0x11c>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d10c      	bne.n	800e916 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	f023 0308 	bic.w	r3, r3, #8
 800e902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	697a      	ldr	r2, [r7, #20]
 800e90a:	4313      	orrs	r3, r2
 800e90c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	f023 0304 	bic.w	r3, r3, #4
 800e914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4a1c      	ldr	r2, [pc, #112]	; (800e98c <TIM_OC1_SetConfig+0x10c>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d00f      	beq.n	800e93e <TIM_OC1_SetConfig+0xbe>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	4a1b      	ldr	r2, [pc, #108]	; (800e990 <TIM_OC1_SetConfig+0x110>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d00b      	beq.n	800e93e <TIM_OC1_SetConfig+0xbe>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4a1a      	ldr	r2, [pc, #104]	; (800e994 <TIM_OC1_SetConfig+0x114>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d007      	beq.n	800e93e <TIM_OC1_SetConfig+0xbe>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	4a19      	ldr	r2, [pc, #100]	; (800e998 <TIM_OC1_SetConfig+0x118>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d003      	beq.n	800e93e <TIM_OC1_SetConfig+0xbe>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4a18      	ldr	r2, [pc, #96]	; (800e99c <TIM_OC1_SetConfig+0x11c>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d111      	bne.n	800e962 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e94c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	695b      	ldr	r3, [r3, #20]
 800e952:	693a      	ldr	r2, [r7, #16]
 800e954:	4313      	orrs	r3, r2
 800e956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	699b      	ldr	r3, [r3, #24]
 800e95c:	693a      	ldr	r2, [r7, #16]
 800e95e:	4313      	orrs	r3, r2
 800e960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	693a      	ldr	r2, [r7, #16]
 800e966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	685a      	ldr	r2, [r3, #4]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	697a      	ldr	r2, [r7, #20]
 800e97a:	621a      	str	r2, [r3, #32]
}
 800e97c:	bf00      	nop
 800e97e:	371c      	adds	r7, #28
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr
 800e988:	fffeff8f 	.word	0xfffeff8f
 800e98c:	40010000 	.word	0x40010000
 800e990:	40010400 	.word	0x40010400
 800e994:	40014000 	.word	0x40014000
 800e998:	40014400 	.word	0x40014400
 800e99c:	40014800 	.word	0x40014800

0800e9a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b087      	sub	sp, #28
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a1b      	ldr	r3, [r3, #32]
 800e9ae:	f023 0210 	bic.w	r2, r3, #16
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6a1b      	ldr	r3, [r3, #32]
 800e9ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	699b      	ldr	r3, [r3, #24]
 800e9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	4b34      	ldr	r3, [pc, #208]	; (800ea9c <TIM_OC2_SetConfig+0xfc>)
 800e9cc:	4013      	ands	r3, r2
 800e9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	021b      	lsls	r3, r3, #8
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	f023 0320 	bic.w	r3, r3, #32
 800e9ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	011b      	lsls	r3, r3, #4
 800e9f2:	697a      	ldr	r2, [r7, #20]
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	4a29      	ldr	r2, [pc, #164]	; (800eaa0 <TIM_OC2_SetConfig+0x100>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d003      	beq.n	800ea08 <TIM_OC2_SetConfig+0x68>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	4a28      	ldr	r2, [pc, #160]	; (800eaa4 <TIM_OC2_SetConfig+0x104>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d10d      	bne.n	800ea24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	011b      	lsls	r3, r3, #4
 800ea16:	697a      	ldr	r2, [r7, #20]
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	4a1e      	ldr	r2, [pc, #120]	; (800eaa0 <TIM_OC2_SetConfig+0x100>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d00f      	beq.n	800ea4c <TIM_OC2_SetConfig+0xac>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	4a1d      	ldr	r2, [pc, #116]	; (800eaa4 <TIM_OC2_SetConfig+0x104>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d00b      	beq.n	800ea4c <TIM_OC2_SetConfig+0xac>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	4a1c      	ldr	r2, [pc, #112]	; (800eaa8 <TIM_OC2_SetConfig+0x108>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d007      	beq.n	800ea4c <TIM_OC2_SetConfig+0xac>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a1b      	ldr	r2, [pc, #108]	; (800eaac <TIM_OC2_SetConfig+0x10c>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d003      	beq.n	800ea4c <TIM_OC2_SetConfig+0xac>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a1a      	ldr	r2, [pc, #104]	; (800eab0 <TIM_OC2_SetConfig+0x110>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d113      	bne.n	800ea74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	693a      	ldr	r2, [r7, #16]
 800ea64:	4313      	orrs	r3, r2
 800ea66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	699b      	ldr	r3, [r3, #24]
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	693a      	ldr	r2, [r7, #16]
 800ea70:	4313      	orrs	r3, r2
 800ea72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	693a      	ldr	r2, [r7, #16]
 800ea78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	685a      	ldr	r2, [r3, #4]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	621a      	str	r2, [r3, #32]
}
 800ea8e:	bf00      	nop
 800ea90:	371c      	adds	r7, #28
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	feff8fff 	.word	0xfeff8fff
 800eaa0:	40010000 	.word	0x40010000
 800eaa4:	40010400 	.word	0x40010400
 800eaa8:	40014000 	.word	0x40014000
 800eaac:	40014400 	.word	0x40014400
 800eab0:	40014800 	.word	0x40014800

0800eab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b087      	sub	sp, #28
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6a1b      	ldr	r3, [r3, #32]
 800eace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	69db      	ldr	r3, [r3, #28]
 800eada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f023 0303 	bic.w	r3, r3, #3
 800eaea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eafc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	021b      	lsls	r3, r3, #8
 800eb04:	697a      	ldr	r2, [r7, #20]
 800eb06:	4313      	orrs	r3, r2
 800eb08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4a27      	ldr	r2, [pc, #156]	; (800ebac <TIM_OC3_SetConfig+0xf8>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d003      	beq.n	800eb1a <TIM_OC3_SetConfig+0x66>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	4a26      	ldr	r2, [pc, #152]	; (800ebb0 <TIM_OC3_SetConfig+0xfc>)
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d10d      	bne.n	800eb36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	68db      	ldr	r3, [r3, #12]
 800eb26:	021b      	lsls	r3, r3, #8
 800eb28:	697a      	ldr	r2, [r7, #20]
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	4a1c      	ldr	r2, [pc, #112]	; (800ebac <TIM_OC3_SetConfig+0xf8>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d00f      	beq.n	800eb5e <TIM_OC3_SetConfig+0xaa>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	4a1b      	ldr	r2, [pc, #108]	; (800ebb0 <TIM_OC3_SetConfig+0xfc>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d00b      	beq.n	800eb5e <TIM_OC3_SetConfig+0xaa>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4a1a      	ldr	r2, [pc, #104]	; (800ebb4 <TIM_OC3_SetConfig+0x100>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d007      	beq.n	800eb5e <TIM_OC3_SetConfig+0xaa>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a19      	ldr	r2, [pc, #100]	; (800ebb8 <TIM_OC3_SetConfig+0x104>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d003      	beq.n	800eb5e <TIM_OC3_SetConfig+0xaa>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4a18      	ldr	r2, [pc, #96]	; (800ebbc <TIM_OC3_SetConfig+0x108>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d113      	bne.n	800eb86 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	695b      	ldr	r3, [r3, #20]
 800eb72:	011b      	lsls	r3, r3, #4
 800eb74:	693a      	ldr	r2, [r7, #16]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	699b      	ldr	r3, [r3, #24]
 800eb7e:	011b      	lsls	r3, r3, #4
 800eb80:	693a      	ldr	r2, [r7, #16]
 800eb82:	4313      	orrs	r3, r2
 800eb84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	693a      	ldr	r2, [r7, #16]
 800eb8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	685a      	ldr	r2, [r3, #4]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	621a      	str	r2, [r3, #32]
}
 800eba0:	bf00      	nop
 800eba2:	371c      	adds	r7, #28
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr
 800ebac:	40010000 	.word	0x40010000
 800ebb0:	40010400 	.word	0x40010400
 800ebb4:	40014000 	.word	0x40014000
 800ebb8:	40014400 	.word	0x40014400
 800ebbc:	40014800 	.word	0x40014800

0800ebc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b087      	sub	sp, #28
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a1b      	ldr	r3, [r3, #32]
 800ebda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	69db      	ldr	r3, [r3, #28]
 800ebe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	021b      	lsls	r3, r3, #8
 800ebfe:	68fa      	ldr	r2, [r7, #12]
 800ec00:	4313      	orrs	r3, r2
 800ec02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	031b      	lsls	r3, r3, #12
 800ec12:	693a      	ldr	r2, [r7, #16]
 800ec14:	4313      	orrs	r3, r2
 800ec16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	4a18      	ldr	r2, [pc, #96]	; (800ec7c <TIM_OC4_SetConfig+0xbc>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d00f      	beq.n	800ec40 <TIM_OC4_SetConfig+0x80>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	4a17      	ldr	r2, [pc, #92]	; (800ec80 <TIM_OC4_SetConfig+0xc0>)
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d00b      	beq.n	800ec40 <TIM_OC4_SetConfig+0x80>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	4a16      	ldr	r2, [pc, #88]	; (800ec84 <TIM_OC4_SetConfig+0xc4>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d007      	beq.n	800ec40 <TIM_OC4_SetConfig+0x80>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	4a15      	ldr	r2, [pc, #84]	; (800ec88 <TIM_OC4_SetConfig+0xc8>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d003      	beq.n	800ec40 <TIM_OC4_SetConfig+0x80>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4a14      	ldr	r2, [pc, #80]	; (800ec8c <TIM_OC4_SetConfig+0xcc>)
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d109      	bne.n	800ec54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	695b      	ldr	r3, [r3, #20]
 800ec4c:	019b      	lsls	r3, r3, #6
 800ec4e:	697a      	ldr	r2, [r7, #20]
 800ec50:	4313      	orrs	r3, r2
 800ec52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	697a      	ldr	r2, [r7, #20]
 800ec58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	685a      	ldr	r2, [r3, #4]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	693a      	ldr	r2, [r7, #16]
 800ec6c:	621a      	str	r2, [r3, #32]
}
 800ec6e:	bf00      	nop
 800ec70:	371c      	adds	r7, #28
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop
 800ec7c:	40010000 	.word	0x40010000
 800ec80:	40010400 	.word	0x40010400
 800ec84:	40014000 	.word	0x40014000
 800ec88:	40014400 	.word	0x40014400
 800ec8c:	40014800 	.word	0x40014800

0800ec90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b087      	sub	sp, #28
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6a1b      	ldr	r3, [r3, #32]
 800ec9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a1b      	ldr	r3, [r3, #32]
 800ecaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ecd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	041b      	lsls	r3, r3, #16
 800ecd8:	693a      	ldr	r2, [r7, #16]
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4a17      	ldr	r2, [pc, #92]	; (800ed40 <TIM_OC5_SetConfig+0xb0>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d00f      	beq.n	800ed06 <TIM_OC5_SetConfig+0x76>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4a16      	ldr	r2, [pc, #88]	; (800ed44 <TIM_OC5_SetConfig+0xb4>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d00b      	beq.n	800ed06 <TIM_OC5_SetConfig+0x76>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	4a15      	ldr	r2, [pc, #84]	; (800ed48 <TIM_OC5_SetConfig+0xb8>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d007      	beq.n	800ed06 <TIM_OC5_SetConfig+0x76>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4a14      	ldr	r2, [pc, #80]	; (800ed4c <TIM_OC5_SetConfig+0xbc>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d003      	beq.n	800ed06 <TIM_OC5_SetConfig+0x76>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4a13      	ldr	r2, [pc, #76]	; (800ed50 <TIM_OC5_SetConfig+0xc0>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d109      	bne.n	800ed1a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ed0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	695b      	ldr	r3, [r3, #20]
 800ed12:	021b      	lsls	r3, r3, #8
 800ed14:	697a      	ldr	r2, [r7, #20]
 800ed16:	4313      	orrs	r3, r2
 800ed18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	697a      	ldr	r2, [r7, #20]
 800ed1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	685a      	ldr	r2, [r3, #4]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	693a      	ldr	r2, [r7, #16]
 800ed32:	621a      	str	r2, [r3, #32]
}
 800ed34:	bf00      	nop
 800ed36:	371c      	adds	r7, #28
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr
 800ed40:	40010000 	.word	0x40010000
 800ed44:	40010400 	.word	0x40010400
 800ed48:	40014000 	.word	0x40014000
 800ed4c:	40014400 	.word	0x40014400
 800ed50:	40014800 	.word	0x40014800

0800ed54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ed54:	b480      	push	{r7}
 800ed56:	b087      	sub	sp, #28
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6a1b      	ldr	r3, [r3, #32]
 800ed62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6a1b      	ldr	r3, [r3, #32]
 800ed6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	021b      	lsls	r3, r3, #8
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ed96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	051b      	lsls	r3, r3, #20
 800ed9e:	693a      	ldr	r2, [r7, #16]
 800eda0:	4313      	orrs	r3, r2
 800eda2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4a18      	ldr	r2, [pc, #96]	; (800ee08 <TIM_OC6_SetConfig+0xb4>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d00f      	beq.n	800edcc <TIM_OC6_SetConfig+0x78>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4a17      	ldr	r2, [pc, #92]	; (800ee0c <TIM_OC6_SetConfig+0xb8>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d00b      	beq.n	800edcc <TIM_OC6_SetConfig+0x78>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4a16      	ldr	r2, [pc, #88]	; (800ee10 <TIM_OC6_SetConfig+0xbc>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	d007      	beq.n	800edcc <TIM_OC6_SetConfig+0x78>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	4a15      	ldr	r2, [pc, #84]	; (800ee14 <TIM_OC6_SetConfig+0xc0>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d003      	beq.n	800edcc <TIM_OC6_SetConfig+0x78>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4a14      	ldr	r2, [pc, #80]	; (800ee18 <TIM_OC6_SetConfig+0xc4>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d109      	bne.n	800ede0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800edd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	695b      	ldr	r3, [r3, #20]
 800edd8:	029b      	lsls	r3, r3, #10
 800edda:	697a      	ldr	r2, [r7, #20]
 800eddc:	4313      	orrs	r3, r2
 800edde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	697a      	ldr	r2, [r7, #20]
 800ede4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	68fa      	ldr	r2, [r7, #12]
 800edea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	685a      	ldr	r2, [r3, #4]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	693a      	ldr	r2, [r7, #16]
 800edf8:	621a      	str	r2, [r3, #32]
}
 800edfa:	bf00      	nop
 800edfc:	371c      	adds	r7, #28
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
 800ee06:	bf00      	nop
 800ee08:	40010000 	.word	0x40010000
 800ee0c:	40010400 	.word	0x40010400
 800ee10:	40014000 	.word	0x40014000
 800ee14:	40014400 	.word	0x40014400
 800ee18:	40014800 	.word	0x40014800

0800ee1c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d109      	bne.n	800ee40 <HAL_TIMEx_PWMN_Start+0x24>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	bf14      	ite	ne
 800ee38:	2301      	movne	r3, #1
 800ee3a:	2300      	moveq	r3, #0
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	e022      	b.n	800ee86 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	2b04      	cmp	r3, #4
 800ee44:	d109      	bne.n	800ee5a <HAL_TIMEx_PWMN_Start+0x3e>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	bf14      	ite	ne
 800ee52:	2301      	movne	r3, #1
 800ee54:	2300      	moveq	r3, #0
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	e015      	b.n	800ee86 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	2b08      	cmp	r3, #8
 800ee5e:	d109      	bne.n	800ee74 <HAL_TIMEx_PWMN_Start+0x58>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	bf14      	ite	ne
 800ee6c:	2301      	movne	r3, #1
 800ee6e:	2300      	moveq	r3, #0
 800ee70:	b2db      	uxtb	r3, r3
 800ee72:	e008      	b.n	800ee86 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	bf14      	ite	ne
 800ee80:	2301      	movne	r3, #1
 800ee82:	2300      	moveq	r3, #0
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e06e      	b.n	800ef6c <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d104      	bne.n	800ee9e <HAL_TIMEx_PWMN_Start+0x82>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2202      	movs	r2, #2
 800ee98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee9c:	e013      	b.n	800eec6 <HAL_TIMEx_PWMN_Start+0xaa>
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b04      	cmp	r3, #4
 800eea2:	d104      	bne.n	800eeae <HAL_TIMEx_PWMN_Start+0x92>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2202      	movs	r2, #2
 800eea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eeac:	e00b      	b.n	800eec6 <HAL_TIMEx_PWMN_Start+0xaa>
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	2b08      	cmp	r3, #8
 800eeb2:	d104      	bne.n	800eebe <HAL_TIMEx_PWMN_Start+0xa2>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2202      	movs	r2, #2
 800eeb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eebc:	e003      	b.n	800eec6 <HAL_TIMEx_PWMN_Start+0xaa>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2202      	movs	r2, #2
 800eec2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2204      	movs	r2, #4
 800eecc:	6839      	ldr	r1, [r7, #0]
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 f982 	bl	800f1d8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eee2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4a22      	ldr	r2, [pc, #136]	; (800ef74 <HAL_TIMEx_PWMN_Start+0x158>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d01d      	beq.n	800ef2a <HAL_TIMEx_PWMN_Start+0x10e>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eef6:	d018      	beq.n	800ef2a <HAL_TIMEx_PWMN_Start+0x10e>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4a1e      	ldr	r2, [pc, #120]	; (800ef78 <HAL_TIMEx_PWMN_Start+0x15c>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d013      	beq.n	800ef2a <HAL_TIMEx_PWMN_Start+0x10e>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a1d      	ldr	r2, [pc, #116]	; (800ef7c <HAL_TIMEx_PWMN_Start+0x160>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d00e      	beq.n	800ef2a <HAL_TIMEx_PWMN_Start+0x10e>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a1b      	ldr	r2, [pc, #108]	; (800ef80 <HAL_TIMEx_PWMN_Start+0x164>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d009      	beq.n	800ef2a <HAL_TIMEx_PWMN_Start+0x10e>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a1a      	ldr	r2, [pc, #104]	; (800ef84 <HAL_TIMEx_PWMN_Start+0x168>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d004      	beq.n	800ef2a <HAL_TIMEx_PWMN_Start+0x10e>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a18      	ldr	r2, [pc, #96]	; (800ef88 <HAL_TIMEx_PWMN_Start+0x16c>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d115      	bne.n	800ef56 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	689a      	ldr	r2, [r3, #8]
 800ef30:	4b16      	ldr	r3, [pc, #88]	; (800ef8c <HAL_TIMEx_PWMN_Start+0x170>)
 800ef32:	4013      	ands	r3, r2
 800ef34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2b06      	cmp	r3, #6
 800ef3a:	d015      	beq.n	800ef68 <HAL_TIMEx_PWMN_Start+0x14c>
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef42:	d011      	beq.n	800ef68 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f042 0201 	orr.w	r2, r2, #1
 800ef52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef54:	e008      	b.n	800ef68 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f042 0201 	orr.w	r2, r2, #1
 800ef64:	601a      	str	r2, [r3, #0]
 800ef66:	e000      	b.n	800ef6a <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef6a:	2300      	movs	r3, #0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	40010000 	.word	0x40010000
 800ef78:	40000400 	.word	0x40000400
 800ef7c:	40000800 	.word	0x40000800
 800ef80:	40000c00 	.word	0x40000c00
 800ef84:	40010400 	.word	0x40010400
 800ef88:	40001800 	.word	0x40001800
 800ef8c:	00010007 	.word	0x00010007

0800ef90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b085      	sub	sp, #20
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d101      	bne.n	800efa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800efa4:	2302      	movs	r3, #2
 800efa6:	e068      	b.n	800f07a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2201      	movs	r2, #1
 800efac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2202      	movs	r2, #2
 800efb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4a2e      	ldr	r2, [pc, #184]	; (800f088 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d004      	beq.n	800efdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4a2d      	ldr	r2, [pc, #180]	; (800f08c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d108      	bne.n	800efee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800efe2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	4313      	orrs	r3, r2
 800efec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eff4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	68fa      	ldr	r2, [r7, #12]
 800effc:	4313      	orrs	r3, r2
 800effe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a1e      	ldr	r2, [pc, #120]	; (800f088 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d01d      	beq.n	800f04e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f01a:	d018      	beq.n	800f04e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	4a1b      	ldr	r2, [pc, #108]	; (800f090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d013      	beq.n	800f04e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4a1a      	ldr	r2, [pc, #104]	; (800f094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d00e      	beq.n	800f04e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4a18      	ldr	r2, [pc, #96]	; (800f098 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d009      	beq.n	800f04e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4a13      	ldr	r2, [pc, #76]	; (800f08c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d004      	beq.n	800f04e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a14      	ldr	r2, [pc, #80]	; (800f09c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d10c      	bne.n	800f068 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	689b      	ldr	r3, [r3, #8]
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	4313      	orrs	r3, r2
 800f05e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68ba      	ldr	r2, [r7, #8]
 800f066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2201      	movs	r2, #1
 800f06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2200      	movs	r2, #0
 800f074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f078:	2300      	movs	r3, #0
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3714      	adds	r7, #20
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr
 800f086:	bf00      	nop
 800f088:	40010000 	.word	0x40010000
 800f08c:	40010400 	.word	0x40010400
 800f090:	40000400 	.word	0x40000400
 800f094:	40000800 	.word	0x40000800
 800f098:	40000c00 	.word	0x40000c00
 800f09c:	40001800 	.word	0x40001800

0800f0a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d101      	bne.n	800f0bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f0b8:	2302      	movs	r3, #2
 800f0ba:	e065      	b.n	800f188 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	689b      	ldr	r3, [r3, #8]
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	691b      	ldr	r3, [r3, #16]
 800f106:	4313      	orrs	r3, r2
 800f108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	4313      	orrs	r3, r2
 800f116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f122:	4313      	orrs	r3, r2
 800f124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	699b      	ldr	r3, [r3, #24]
 800f130:	041b      	lsls	r3, r3, #16
 800f132:	4313      	orrs	r3, r2
 800f134:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a16      	ldr	r2, [pc, #88]	; (800f194 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d004      	beq.n	800f14a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4a14      	ldr	r2, [pc, #80]	; (800f198 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d115      	bne.n	800f176 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f154:	051b      	lsls	r3, r3, #20
 800f156:	4313      	orrs	r3, r2
 800f158:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	69db      	ldr	r3, [r3, #28]
 800f164:	4313      	orrs	r3, r2
 800f166:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	4313      	orrs	r3, r2
 800f174:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f186:	2300      	movs	r3, #0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3714      	adds	r7, #20
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr
 800f194:	40010000 	.word	0x40010000
 800f198:	40010400 	.word	0x40010400

0800f19c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f1a4:	bf00      	nop
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f1b8:	bf00      	nop
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f1cc:	bf00      	nop
 800f1ce:	370c      	adds	r7, #12
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b087      	sub	sp, #28
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f003 031f 	and.w	r3, r3, #31
 800f1ea:	2204      	movs	r2, #4
 800f1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f1f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6a1a      	ldr	r2, [r3, #32]
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	43db      	mvns	r3, r3
 800f1fa:	401a      	ands	r2, r3
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6a1a      	ldr	r2, [r3, #32]
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	f003 031f 	and.w	r3, r3, #31
 800f20a:	6879      	ldr	r1, [r7, #4]
 800f20c:	fa01 f303 	lsl.w	r3, r1, r3
 800f210:	431a      	orrs	r2, r3
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	621a      	str	r2, [r3, #32]
}
 800f216:	bf00      	nop
 800f218:	371c      	adds	r7, #28
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr

0800f222 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b082      	sub	sp, #8
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f230:	2301      	movs	r3, #1
 800f232:	e042      	b.n	800f2ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d106      	bne.n	800f24c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f7f3 fdce 	bl	8002de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2224      	movs	r2, #36	; 0x24
 800f250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f022 0201 	bic.w	r2, r2, #1
 800f262:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 fbe3 	bl	800fa30 <UART_SetConfig>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d101      	bne.n	800f274 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f270:	2301      	movs	r3, #1
 800f272:	e022      	b.n	800f2ba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d002      	beq.n	800f282 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f001 f937 	bl	80104f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	685a      	ldr	r2, [r3, #4]
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f290:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	689a      	ldr	r2, [r3, #8]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f2a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	681a      	ldr	r2, [r3, #0]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f042 0201 	orr.w	r2, r2, #1
 800f2b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f001 f9be 	bl	8010634 <UART_CheckIdleState>
 800f2b8:	4603      	mov	r3, r0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3708      	adds	r7, #8
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b08a      	sub	sp, #40	; 0x28
 800f2c6:	af02      	add	r7, sp, #8
 800f2c8:	60f8      	str	r0, [r7, #12]
 800f2ca:	60b9      	str	r1, [r7, #8]
 800f2cc:	603b      	str	r3, [r7, #0]
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2d8:	2b20      	cmp	r3, #32
 800f2da:	f040 8083 	bne.w	800f3e4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d002      	beq.n	800f2ea <HAL_UART_Transmit+0x28>
 800f2e4:	88fb      	ldrh	r3, [r7, #6]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d101      	bne.n	800f2ee <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e07b      	b.n	800f3e6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d101      	bne.n	800f2fc <HAL_UART_Transmit+0x3a>
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	e074      	b.n	800f3e6 <HAL_UART_Transmit+0x124>
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	2201      	movs	r2, #1
 800f300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2200      	movs	r2, #0
 800f308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2221      	movs	r2, #33	; 0x21
 800f310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f314:	f7f6 f994 	bl	8005640 <HAL_GetTick>
 800f318:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	88fa      	ldrh	r2, [r7, #6]
 800f31e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	88fa      	ldrh	r2, [r7, #6]
 800f326:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f332:	d108      	bne.n	800f346 <HAL_UART_Transmit+0x84>
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d104      	bne.n	800f346 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f33c:	2300      	movs	r3, #0
 800f33e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	61bb      	str	r3, [r7, #24]
 800f344:	e003      	b.n	800f34e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f34a:	2300      	movs	r3, #0
 800f34c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2200      	movs	r2, #0
 800f352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f356:	e02c      	b.n	800f3b2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	9300      	str	r3, [sp, #0]
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	2200      	movs	r2, #0
 800f360:	2180      	movs	r1, #128	; 0x80
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f001 f9b1 	bl	80106ca <UART_WaitOnFlagUntilTimeout>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d001      	beq.n	800f372 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f36e:	2303      	movs	r3, #3
 800f370:	e039      	b.n	800f3e6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10b      	bne.n	800f390 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	461a      	mov	r2, r3
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f386:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	3302      	adds	r3, #2
 800f38c:	61bb      	str	r3, [r7, #24]
 800f38e:	e007      	b.n	800f3a0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	781a      	ldrb	r2, [r3, #0]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	3301      	adds	r3, #1
 800f39e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d1cc      	bne.n	800f358 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	2140      	movs	r1, #64	; 0x40
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f001 f97e 	bl	80106ca <UART_WaitOnFlagUntilTimeout>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d001      	beq.n	800f3d8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f3d4:	2303      	movs	r3, #3
 800f3d6:	e006      	b.n	800f3e6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2220      	movs	r2, #32
 800f3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	e000      	b.n	800f3e6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f3e4:	2302      	movs	r3, #2
  }
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3720      	adds	r7, #32
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
	...

0800f3f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f404:	2b20      	cmp	r3, #32
 800f406:	d131      	bne.n	800f46c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d002      	beq.n	800f414 <HAL_UART_Receive_IT+0x24>
 800f40e:	88fb      	ldrh	r3, [r7, #6]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d101      	bne.n	800f418 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f414:	2301      	movs	r3, #1
 800f416:	e02a      	b.n	800f46e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d101      	bne.n	800f426 <HAL_UART_Receive_IT+0x36>
 800f422:	2302      	movs	r3, #2
 800f424:	e023      	b.n	800f46e <HAL_UART_Receive_IT+0x7e>
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2201      	movs	r2, #1
 800f42a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4a0f      	ldr	r2, [pc, #60]	; (800f478 <HAL_UART_Receive_IT+0x88>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d00e      	beq.n	800f45c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d007      	beq.n	800f45c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f45a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f45c:	88fb      	ldrh	r3, [r7, #6]
 800f45e:	461a      	mov	r2, r3
 800f460:	68b9      	ldr	r1, [r7, #8]
 800f462:	68f8      	ldr	r0, [r7, #12]
 800f464:	f001 f9b2 	bl	80107cc <UART_Start_Receive_IT>
 800f468:	4603      	mov	r3, r0
 800f46a:	e000      	b.n	800f46e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f46c:	2302      	movs	r3, #2
  }
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	58000c00 	.word	0x58000c00

0800f47c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b088      	sub	sp, #32
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	69db      	ldr	r3, [r3, #28]
 800f48a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f49c:	69fa      	ldr	r2, [r7, #28]
 800f49e:	f640 030f 	movw	r3, #2063	; 0x80f
 800f4a2:	4013      	ands	r3, r2
 800f4a4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d118      	bne.n	800f4de <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	f003 0320 	and.w	r3, r3, #32
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d013      	beq.n	800f4de <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	f003 0320 	and.w	r3, r3, #32
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d104      	bne.n	800f4ca <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d009      	beq.n	800f4de <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f000 8282 	beq.w	800f9d8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	4798      	blx	r3
      }
      return;
 800f4dc:	e27c      	b.n	800f9d8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f000 80ef 	beq.w	800f6c4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f4e6:	697a      	ldr	r2, [r7, #20]
 800f4e8:	4b73      	ldr	r3, [pc, #460]	; (800f6b8 <HAL_UART_IRQHandler+0x23c>)
 800f4ea:	4013      	ands	r3, r2
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d105      	bne.n	800f4fc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f4f0:	69ba      	ldr	r2, [r7, #24]
 800f4f2:	4b72      	ldr	r3, [pc, #456]	; (800f6bc <HAL_UART_IRQHandler+0x240>)
 800f4f4:	4013      	ands	r3, r2
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	f000 80e4 	beq.w	800f6c4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	f003 0301 	and.w	r3, r3, #1
 800f502:	2b00      	cmp	r3, #0
 800f504:	d010      	beq.n	800f528 <HAL_UART_IRQHandler+0xac>
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00b      	beq.n	800f528 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2201      	movs	r2, #1
 800f516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f51e:	f043 0201 	orr.w	r2, r3, #1
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	f003 0302 	and.w	r3, r3, #2
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d010      	beq.n	800f554 <HAL_UART_IRQHandler+0xd8>
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	f003 0301 	and.w	r3, r3, #1
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00b      	beq.n	800f554 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2202      	movs	r2, #2
 800f542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f54a:	f043 0204 	orr.w	r2, r3, #4
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	f003 0304 	and.w	r3, r3, #4
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d010      	beq.n	800f580 <HAL_UART_IRQHandler+0x104>
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	f003 0301 	and.w	r3, r3, #1
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00b      	beq.n	800f580 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2204      	movs	r2, #4
 800f56e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f576:	f043 0202 	orr.w	r2, r3, #2
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	f003 0308 	and.w	r3, r3, #8
 800f586:	2b00      	cmp	r3, #0
 800f588:	d015      	beq.n	800f5b6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f58a:	69bb      	ldr	r3, [r7, #24]
 800f58c:	f003 0320 	and.w	r3, r3, #32
 800f590:	2b00      	cmp	r3, #0
 800f592:	d104      	bne.n	800f59e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f594:	697a      	ldr	r2, [r7, #20]
 800f596:	4b48      	ldr	r3, [pc, #288]	; (800f6b8 <HAL_UART_IRQHandler+0x23c>)
 800f598:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00b      	beq.n	800f5b6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2208      	movs	r2, #8
 800f5a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5ac:	f043 0208 	orr.w	r2, r3, #8
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d011      	beq.n	800f5e4 <HAL_UART_IRQHandler+0x168>
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00c      	beq.n	800f5e4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5da:	f043 0220 	orr.w	r2, r3, #32
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	f000 81f6 	beq.w	800f9dc <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	f003 0320 	and.w	r3, r3, #32
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d011      	beq.n	800f61e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	f003 0320 	and.w	r3, r3, #32
 800f600:	2b00      	cmp	r3, #0
 800f602:	d104      	bne.n	800f60e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d007      	beq.n	800f61e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f612:	2b00      	cmp	r3, #0
 800f614:	d003      	beq.n	800f61e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f624:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f630:	2b40      	cmp	r3, #64	; 0x40
 800f632:	d004      	beq.n	800f63e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d031      	beq.n	800f6a2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f001 f982 	bl	8010948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f64e:	2b40      	cmp	r3, #64	; 0x40
 800f650:	d123      	bne.n	800f69a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	689a      	ldr	r2, [r3, #8]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f660:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f666:	2b00      	cmp	r3, #0
 800f668:	d013      	beq.n	800f692 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f66e:	4a14      	ldr	r2, [pc, #80]	; (800f6c0 <HAL_UART_IRQHandler+0x244>)
 800f670:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f676:	4618      	mov	r0, r3
 800f678:	f7f7 fe1c 	bl	80072b4 <HAL_DMA_Abort_IT>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d017      	beq.n	800f6b2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f68c:	4610      	mov	r0, r2
 800f68e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f690:	e00f      	b.n	800f6b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f000 f9b6 	bl	800fa04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f698:	e00b      	b.n	800f6b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f000 f9b2 	bl	800fa04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6a0:	e007      	b.n	800f6b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 f9ae 	bl	800fa04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f6b0:	e194      	b.n	800f9dc <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6b2:	bf00      	nop
    return;
 800f6b4:	e192      	b.n	800f9dc <HAL_UART_IRQHandler+0x560>
 800f6b6:	bf00      	nop
 800f6b8:	10000001 	.word	0x10000001
 800f6bc:	04000120 	.word	0x04000120
 800f6c0:	080109ad 	.word	0x080109ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	f040 810f 	bne.w	800f8ec <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	f003 0310 	and.w	r3, r3, #16
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	f000 8109 	beq.w	800f8ec <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	f003 0310 	and.w	r3, r3, #16
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f000 8103 	beq.w	800f8ec <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2210      	movs	r2, #16
 800f6ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6f8:	2b40      	cmp	r3, #64	; 0x40
 800f6fa:	f040 80bb 	bne.w	800f874 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a96      	ldr	r2, [pc, #600]	; (800f960 <HAL_UART_IRQHandler+0x4e4>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d059      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4a94      	ldr	r2, [pc, #592]	; (800f964 <HAL_UART_IRQHandler+0x4e8>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d053      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4a92      	ldr	r2, [pc, #584]	; (800f968 <HAL_UART_IRQHandler+0x4ec>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d04d      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4a90      	ldr	r2, [pc, #576]	; (800f96c <HAL_UART_IRQHandler+0x4f0>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d047      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4a8e      	ldr	r2, [pc, #568]	; (800f970 <HAL_UART_IRQHandler+0x4f4>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d041      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4a8c      	ldr	r2, [pc, #560]	; (800f974 <HAL_UART_IRQHandler+0x4f8>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d03b      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a8a      	ldr	r2, [pc, #552]	; (800f978 <HAL_UART_IRQHandler+0x4fc>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d035      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	4a88      	ldr	r2, [pc, #544]	; (800f97c <HAL_UART_IRQHandler+0x500>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d02f      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4a86      	ldr	r2, [pc, #536]	; (800f980 <HAL_UART_IRQHandler+0x504>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d029      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a84      	ldr	r2, [pc, #528]	; (800f984 <HAL_UART_IRQHandler+0x508>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d023      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4a82      	ldr	r2, [pc, #520]	; (800f988 <HAL_UART_IRQHandler+0x50c>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d01d      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4a80      	ldr	r2, [pc, #512]	; (800f98c <HAL_UART_IRQHandler+0x510>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d017      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a7e      	ldr	r2, [pc, #504]	; (800f990 <HAL_UART_IRQHandler+0x514>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d011      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a7c      	ldr	r2, [pc, #496]	; (800f994 <HAL_UART_IRQHandler+0x518>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d00b      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a7a      	ldr	r2, [pc, #488]	; (800f998 <HAL_UART_IRQHandler+0x51c>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d005      	beq.n	800f7be <HAL_UART_IRQHandler+0x342>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	4a78      	ldr	r2, [pc, #480]	; (800f99c <HAL_UART_IRQHandler+0x520>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d105      	bne.n	800f7ca <HAL_UART_IRQHandler+0x34e>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	e004      	b.n	800f7d4 <HAL_UART_IRQHandler+0x358>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800f7d6:	893b      	ldrh	r3, [r7, #8]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f000 8101 	beq.w	800f9e0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f7e4:	893a      	ldrh	r2, [r7, #8]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	f080 80fa 	bcs.w	800f9e0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	893a      	ldrh	r2, [r7, #8]
 800f7f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7f8:	69db      	ldr	r3, [r3, #28]
 800f7fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7fe:	d02b      	beq.n	800f858 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f80e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	689a      	ldr	r2, [r3, #8]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f022 0201 	bic.w	r2, r2, #1
 800f81e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	689a      	ldr	r2, [r3, #8]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f82e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2220      	movs	r2, #32
 800f834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2200      	movs	r2, #0
 800f83c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f022 0210 	bic.w	r2, r2, #16
 800f84c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f852:	4618      	mov	r0, r3
 800f854:	f7f7 fa10 	bl	8006c78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f864:	b29b      	uxth	r3, r3
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	b29b      	uxth	r3, r3
 800f86a:	4619      	mov	r1, r3
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 f8d3 	bl	800fa18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f872:	e0b5      	b.n	800f9e0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f880:	b29b      	uxth	r3, r3
 800f882:	1ad3      	subs	r3, r2, r3
 800f884:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f000 80a8 	beq.w	800f9e4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800f894:	897b      	ldrh	r3, [r7, #10]
 800f896:	2b00      	cmp	r3, #0
 800f898:	f000 80a4 	beq.w	800f9e4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f8aa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	6899      	ldr	r1, [r3, #8]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	4b3a      	ldr	r3, [pc, #232]	; (800f9a0 <HAL_UART_IRQHandler+0x524>)
 800f8b8:	400b      	ands	r3, r1
 800f8ba:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2220      	movs	r2, #32
 800f8c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f022 0210 	bic.w	r2, r2, #16
 800f8de:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f8e0:	897b      	ldrh	r3, [r7, #10]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f000 f897 	bl	800fa18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f8ea:	e07b      	b.n	800f9e4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00d      	beq.n	800f912 <HAL_UART_IRQHandler+0x496>
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d008      	beq.n	800f912 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f001 fb5a 	bl	8010fc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f910:	e06b      	b.n	800f9ea <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d012      	beq.n	800f942 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f91c:	69bb      	ldr	r3, [r7, #24]
 800f91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f922:	2b00      	cmp	r3, #0
 800f924:	d104      	bne.n	800f930 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d008      	beq.n	800f942 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f934:	2b00      	cmp	r3, #0
 800f936:	d057      	beq.n	800f9e8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	4798      	blx	r3
    }
    return;
 800f940:	e052      	b.n	800f9e8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d02b      	beq.n	800f9a4 <HAL_UART_IRQHandler+0x528>
 800f94c:	69bb      	ldr	r3, [r7, #24]
 800f94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f952:	2b00      	cmp	r3, #0
 800f954:	d026      	beq.n	800f9a4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f001 f83e 	bl	80109d8 <UART_EndTransmit_IT>
    return;
 800f95c:	e045      	b.n	800f9ea <HAL_UART_IRQHandler+0x56e>
 800f95e:	bf00      	nop
 800f960:	40020010 	.word	0x40020010
 800f964:	40020028 	.word	0x40020028
 800f968:	40020040 	.word	0x40020040
 800f96c:	40020058 	.word	0x40020058
 800f970:	40020070 	.word	0x40020070
 800f974:	40020088 	.word	0x40020088
 800f978:	400200a0 	.word	0x400200a0
 800f97c:	400200b8 	.word	0x400200b8
 800f980:	40020410 	.word	0x40020410
 800f984:	40020428 	.word	0x40020428
 800f988:	40020440 	.word	0x40020440
 800f98c:	40020458 	.word	0x40020458
 800f990:	40020470 	.word	0x40020470
 800f994:	40020488 	.word	0x40020488
 800f998:	400204a0 	.word	0x400204a0
 800f99c:	400204b8 	.word	0x400204b8
 800f9a0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d008      	beq.n	800f9c0 <HAL_UART_IRQHandler+0x544>
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d003      	beq.n	800f9c0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f001 fb17 	bl	8010fec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f9be:	e014      	b.n	800f9ea <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d00f      	beq.n	800f9ea <HAL_UART_IRQHandler+0x56e>
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	da0c      	bge.n	800f9ea <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f001 fb01 	bl	8010fd8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f9d6:	e008      	b.n	800f9ea <HAL_UART_IRQHandler+0x56e>
      return;
 800f9d8:	bf00      	nop
 800f9da:	e006      	b.n	800f9ea <HAL_UART_IRQHandler+0x56e>
    return;
 800f9dc:	bf00      	nop
 800f9de:	e004      	b.n	800f9ea <HAL_UART_IRQHandler+0x56e>
      return;
 800f9e0:	bf00      	nop
 800f9e2:	e002      	b.n	800f9ea <HAL_UART_IRQHandler+0x56e>
      return;
 800f9e4:	bf00      	nop
 800f9e6:	e000      	b.n	800f9ea <HAL_UART_IRQHandler+0x56e>
    return;
 800f9e8:	bf00      	nop
  }
}
 800f9ea:	3720      	adds	r7, #32
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f9f8:	bf00      	nop
 800f9fa:	370c      	adds	r7, #12
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr

0800fa04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fa0c:	bf00      	nop
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b083      	sub	sp, #12
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	460b      	mov	r3, r1
 800fa22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fa24:	bf00      	nop
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa30:	b5b0      	push	{r4, r5, r7, lr}
 800fa32:	b08e      	sub	sp, #56	; 0x38
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	689a      	ldr	r2, [r3, #8]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	691b      	ldr	r3, [r3, #16]
 800fa46:	431a      	orrs	r2, r3
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	695b      	ldr	r3, [r3, #20]
 800fa4c:	431a      	orrs	r2, r3
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	69db      	ldr	r3, [r3, #28]
 800fa52:	4313      	orrs	r3, r2
 800fa54:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	4bbf      	ldr	r3, [pc, #764]	; (800fd5c <UART_SetConfig+0x32c>)
 800fa5e:	4013      	ands	r3, r2
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	6812      	ldr	r2, [r2, #0]
 800fa64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fa66:	430b      	orrs	r3, r1
 800fa68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	68da      	ldr	r2, [r3, #12]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	430a      	orrs	r2, r1
 800fa7e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	699b      	ldr	r3, [r3, #24]
 800fa84:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4ab5      	ldr	r2, [pc, #724]	; (800fd60 <UART_SetConfig+0x330>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d004      	beq.n	800fa9a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6a1b      	ldr	r3, [r3, #32]
 800fa94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa96:	4313      	orrs	r3, r2
 800fa98:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	689a      	ldr	r2, [r3, #8]
 800faa0:	4bb0      	ldr	r3, [pc, #704]	; (800fd64 <UART_SetConfig+0x334>)
 800faa2:	4013      	ands	r3, r2
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	6812      	ldr	r2, [r2, #0]
 800faa8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800faaa:	430b      	orrs	r3, r1
 800faac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab4:	f023 010f 	bic.w	r1, r3, #15
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	430a      	orrs	r2, r1
 800fac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4aa7      	ldr	r2, [pc, #668]	; (800fd68 <UART_SetConfig+0x338>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d176      	bne.n	800fbbc <UART_SetConfig+0x18c>
 800face:	4ba7      	ldr	r3, [pc, #668]	; (800fd6c <UART_SetConfig+0x33c>)
 800fad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fad6:	2b28      	cmp	r3, #40	; 0x28
 800fad8:	d86c      	bhi.n	800fbb4 <UART_SetConfig+0x184>
 800fada:	a201      	add	r2, pc, #4	; (adr r2, 800fae0 <UART_SetConfig+0xb0>)
 800fadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae0:	0800fb85 	.word	0x0800fb85
 800fae4:	0800fbb5 	.word	0x0800fbb5
 800fae8:	0800fbb5 	.word	0x0800fbb5
 800faec:	0800fbb5 	.word	0x0800fbb5
 800faf0:	0800fbb5 	.word	0x0800fbb5
 800faf4:	0800fbb5 	.word	0x0800fbb5
 800faf8:	0800fbb5 	.word	0x0800fbb5
 800fafc:	0800fbb5 	.word	0x0800fbb5
 800fb00:	0800fb8d 	.word	0x0800fb8d
 800fb04:	0800fbb5 	.word	0x0800fbb5
 800fb08:	0800fbb5 	.word	0x0800fbb5
 800fb0c:	0800fbb5 	.word	0x0800fbb5
 800fb10:	0800fbb5 	.word	0x0800fbb5
 800fb14:	0800fbb5 	.word	0x0800fbb5
 800fb18:	0800fbb5 	.word	0x0800fbb5
 800fb1c:	0800fbb5 	.word	0x0800fbb5
 800fb20:	0800fb95 	.word	0x0800fb95
 800fb24:	0800fbb5 	.word	0x0800fbb5
 800fb28:	0800fbb5 	.word	0x0800fbb5
 800fb2c:	0800fbb5 	.word	0x0800fbb5
 800fb30:	0800fbb5 	.word	0x0800fbb5
 800fb34:	0800fbb5 	.word	0x0800fbb5
 800fb38:	0800fbb5 	.word	0x0800fbb5
 800fb3c:	0800fbb5 	.word	0x0800fbb5
 800fb40:	0800fb9d 	.word	0x0800fb9d
 800fb44:	0800fbb5 	.word	0x0800fbb5
 800fb48:	0800fbb5 	.word	0x0800fbb5
 800fb4c:	0800fbb5 	.word	0x0800fbb5
 800fb50:	0800fbb5 	.word	0x0800fbb5
 800fb54:	0800fbb5 	.word	0x0800fbb5
 800fb58:	0800fbb5 	.word	0x0800fbb5
 800fb5c:	0800fbb5 	.word	0x0800fbb5
 800fb60:	0800fba5 	.word	0x0800fba5
 800fb64:	0800fbb5 	.word	0x0800fbb5
 800fb68:	0800fbb5 	.word	0x0800fbb5
 800fb6c:	0800fbb5 	.word	0x0800fbb5
 800fb70:	0800fbb5 	.word	0x0800fbb5
 800fb74:	0800fbb5 	.word	0x0800fbb5
 800fb78:	0800fbb5 	.word	0x0800fbb5
 800fb7c:	0800fbb5 	.word	0x0800fbb5
 800fb80:	0800fbad 	.word	0x0800fbad
 800fb84:	2301      	movs	r3, #1
 800fb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb8a:	e222      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fb8c:	2304      	movs	r3, #4
 800fb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb92:	e21e      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fb94:	2308      	movs	r3, #8
 800fb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb9a:	e21a      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fb9c:	2310      	movs	r3, #16
 800fb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fba2:	e216      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fba4:	2320      	movs	r3, #32
 800fba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbaa:	e212      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fbac:	2340      	movs	r3, #64	; 0x40
 800fbae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbb2:	e20e      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fbb4:	2380      	movs	r3, #128	; 0x80
 800fbb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbba:	e20a      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a6b      	ldr	r2, [pc, #428]	; (800fd70 <UART_SetConfig+0x340>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d130      	bne.n	800fc28 <UART_SetConfig+0x1f8>
 800fbc6:	4b69      	ldr	r3, [pc, #420]	; (800fd6c <UART_SetConfig+0x33c>)
 800fbc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbca:	f003 0307 	and.w	r3, r3, #7
 800fbce:	2b05      	cmp	r3, #5
 800fbd0:	d826      	bhi.n	800fc20 <UART_SetConfig+0x1f0>
 800fbd2:	a201      	add	r2, pc, #4	; (adr r2, 800fbd8 <UART_SetConfig+0x1a8>)
 800fbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbd8:	0800fbf1 	.word	0x0800fbf1
 800fbdc:	0800fbf9 	.word	0x0800fbf9
 800fbe0:	0800fc01 	.word	0x0800fc01
 800fbe4:	0800fc09 	.word	0x0800fc09
 800fbe8:	0800fc11 	.word	0x0800fc11
 800fbec:	0800fc19 	.word	0x0800fc19
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbf6:	e1ec      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fbf8:	2304      	movs	r3, #4
 800fbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbfe:	e1e8      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc00:	2308      	movs	r3, #8
 800fc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc06:	e1e4      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc08:	2310      	movs	r3, #16
 800fc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc0e:	e1e0      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc10:	2320      	movs	r3, #32
 800fc12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc16:	e1dc      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc18:	2340      	movs	r3, #64	; 0x40
 800fc1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc1e:	e1d8      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc20:	2380      	movs	r3, #128	; 0x80
 800fc22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc26:	e1d4      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4a51      	ldr	r2, [pc, #324]	; (800fd74 <UART_SetConfig+0x344>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d130      	bne.n	800fc94 <UART_SetConfig+0x264>
 800fc32:	4b4e      	ldr	r3, [pc, #312]	; (800fd6c <UART_SetConfig+0x33c>)
 800fc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc36:	f003 0307 	and.w	r3, r3, #7
 800fc3a:	2b05      	cmp	r3, #5
 800fc3c:	d826      	bhi.n	800fc8c <UART_SetConfig+0x25c>
 800fc3e:	a201      	add	r2, pc, #4	; (adr r2, 800fc44 <UART_SetConfig+0x214>)
 800fc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc44:	0800fc5d 	.word	0x0800fc5d
 800fc48:	0800fc65 	.word	0x0800fc65
 800fc4c:	0800fc6d 	.word	0x0800fc6d
 800fc50:	0800fc75 	.word	0x0800fc75
 800fc54:	0800fc7d 	.word	0x0800fc7d
 800fc58:	0800fc85 	.word	0x0800fc85
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc62:	e1b6      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc64:	2304      	movs	r3, #4
 800fc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc6a:	e1b2      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc6c:	2308      	movs	r3, #8
 800fc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc72:	e1ae      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc74:	2310      	movs	r3, #16
 800fc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc7a:	e1aa      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc7c:	2320      	movs	r3, #32
 800fc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc82:	e1a6      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc84:	2340      	movs	r3, #64	; 0x40
 800fc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc8a:	e1a2      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc8c:	2380      	movs	r3, #128	; 0x80
 800fc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc92:	e19e      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4a37      	ldr	r2, [pc, #220]	; (800fd78 <UART_SetConfig+0x348>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d130      	bne.n	800fd00 <UART_SetConfig+0x2d0>
 800fc9e:	4b33      	ldr	r3, [pc, #204]	; (800fd6c <UART_SetConfig+0x33c>)
 800fca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fca2:	f003 0307 	and.w	r3, r3, #7
 800fca6:	2b05      	cmp	r3, #5
 800fca8:	d826      	bhi.n	800fcf8 <UART_SetConfig+0x2c8>
 800fcaa:	a201      	add	r2, pc, #4	; (adr r2, 800fcb0 <UART_SetConfig+0x280>)
 800fcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb0:	0800fcc9 	.word	0x0800fcc9
 800fcb4:	0800fcd1 	.word	0x0800fcd1
 800fcb8:	0800fcd9 	.word	0x0800fcd9
 800fcbc:	0800fce1 	.word	0x0800fce1
 800fcc0:	0800fce9 	.word	0x0800fce9
 800fcc4:	0800fcf1 	.word	0x0800fcf1
 800fcc8:	2300      	movs	r3, #0
 800fcca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcce:	e180      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fcd0:	2304      	movs	r3, #4
 800fcd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcd6:	e17c      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fcd8:	2308      	movs	r3, #8
 800fcda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcde:	e178      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fce0:	2310      	movs	r3, #16
 800fce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fce6:	e174      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fce8:	2320      	movs	r3, #32
 800fcea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcee:	e170      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fcf0:	2340      	movs	r3, #64	; 0x40
 800fcf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcf6:	e16c      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fcf8:	2380      	movs	r3, #128	; 0x80
 800fcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcfe:	e168      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4a1d      	ldr	r2, [pc, #116]	; (800fd7c <UART_SetConfig+0x34c>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d142      	bne.n	800fd90 <UART_SetConfig+0x360>
 800fd0a:	4b18      	ldr	r3, [pc, #96]	; (800fd6c <UART_SetConfig+0x33c>)
 800fd0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd0e:	f003 0307 	and.w	r3, r3, #7
 800fd12:	2b05      	cmp	r3, #5
 800fd14:	d838      	bhi.n	800fd88 <UART_SetConfig+0x358>
 800fd16:	a201      	add	r2, pc, #4	; (adr r2, 800fd1c <UART_SetConfig+0x2ec>)
 800fd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd1c:	0800fd35 	.word	0x0800fd35
 800fd20:	0800fd3d 	.word	0x0800fd3d
 800fd24:	0800fd45 	.word	0x0800fd45
 800fd28:	0800fd4d 	.word	0x0800fd4d
 800fd2c:	0800fd55 	.word	0x0800fd55
 800fd30:	0800fd81 	.word	0x0800fd81
 800fd34:	2300      	movs	r3, #0
 800fd36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd3a:	e14a      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fd3c:	2304      	movs	r3, #4
 800fd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd42:	e146      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fd44:	2308      	movs	r3, #8
 800fd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd4a:	e142      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fd4c:	2310      	movs	r3, #16
 800fd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd52:	e13e      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fd54:	2320      	movs	r3, #32
 800fd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd5a:	e13a      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fd5c:	cfff69f3 	.word	0xcfff69f3
 800fd60:	58000c00 	.word	0x58000c00
 800fd64:	11fff4ff 	.word	0x11fff4ff
 800fd68:	40011000 	.word	0x40011000
 800fd6c:	58024400 	.word	0x58024400
 800fd70:	40004400 	.word	0x40004400
 800fd74:	40004800 	.word	0x40004800
 800fd78:	40004c00 	.word	0x40004c00
 800fd7c:	40005000 	.word	0x40005000
 800fd80:	2340      	movs	r3, #64	; 0x40
 800fd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd86:	e124      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fd88:	2380      	movs	r3, #128	; 0x80
 800fd8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd8e:	e120      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4acc      	ldr	r2, [pc, #816]	; (80100c8 <UART_SetConfig+0x698>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d176      	bne.n	800fe88 <UART_SetConfig+0x458>
 800fd9a:	4bcc      	ldr	r3, [pc, #816]	; (80100cc <UART_SetConfig+0x69c>)
 800fd9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fda2:	2b28      	cmp	r3, #40	; 0x28
 800fda4:	d86c      	bhi.n	800fe80 <UART_SetConfig+0x450>
 800fda6:	a201      	add	r2, pc, #4	; (adr r2, 800fdac <UART_SetConfig+0x37c>)
 800fda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdac:	0800fe51 	.word	0x0800fe51
 800fdb0:	0800fe81 	.word	0x0800fe81
 800fdb4:	0800fe81 	.word	0x0800fe81
 800fdb8:	0800fe81 	.word	0x0800fe81
 800fdbc:	0800fe81 	.word	0x0800fe81
 800fdc0:	0800fe81 	.word	0x0800fe81
 800fdc4:	0800fe81 	.word	0x0800fe81
 800fdc8:	0800fe81 	.word	0x0800fe81
 800fdcc:	0800fe59 	.word	0x0800fe59
 800fdd0:	0800fe81 	.word	0x0800fe81
 800fdd4:	0800fe81 	.word	0x0800fe81
 800fdd8:	0800fe81 	.word	0x0800fe81
 800fddc:	0800fe81 	.word	0x0800fe81
 800fde0:	0800fe81 	.word	0x0800fe81
 800fde4:	0800fe81 	.word	0x0800fe81
 800fde8:	0800fe81 	.word	0x0800fe81
 800fdec:	0800fe61 	.word	0x0800fe61
 800fdf0:	0800fe81 	.word	0x0800fe81
 800fdf4:	0800fe81 	.word	0x0800fe81
 800fdf8:	0800fe81 	.word	0x0800fe81
 800fdfc:	0800fe81 	.word	0x0800fe81
 800fe00:	0800fe81 	.word	0x0800fe81
 800fe04:	0800fe81 	.word	0x0800fe81
 800fe08:	0800fe81 	.word	0x0800fe81
 800fe0c:	0800fe69 	.word	0x0800fe69
 800fe10:	0800fe81 	.word	0x0800fe81
 800fe14:	0800fe81 	.word	0x0800fe81
 800fe18:	0800fe81 	.word	0x0800fe81
 800fe1c:	0800fe81 	.word	0x0800fe81
 800fe20:	0800fe81 	.word	0x0800fe81
 800fe24:	0800fe81 	.word	0x0800fe81
 800fe28:	0800fe81 	.word	0x0800fe81
 800fe2c:	0800fe71 	.word	0x0800fe71
 800fe30:	0800fe81 	.word	0x0800fe81
 800fe34:	0800fe81 	.word	0x0800fe81
 800fe38:	0800fe81 	.word	0x0800fe81
 800fe3c:	0800fe81 	.word	0x0800fe81
 800fe40:	0800fe81 	.word	0x0800fe81
 800fe44:	0800fe81 	.word	0x0800fe81
 800fe48:	0800fe81 	.word	0x0800fe81
 800fe4c:	0800fe79 	.word	0x0800fe79
 800fe50:	2301      	movs	r3, #1
 800fe52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe56:	e0bc      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fe58:	2304      	movs	r3, #4
 800fe5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe5e:	e0b8      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fe60:	2308      	movs	r3, #8
 800fe62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe66:	e0b4      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fe68:	2310      	movs	r3, #16
 800fe6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe6e:	e0b0      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fe70:	2320      	movs	r3, #32
 800fe72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe76:	e0ac      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fe78:	2340      	movs	r3, #64	; 0x40
 800fe7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe7e:	e0a8      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fe80:	2380      	movs	r3, #128	; 0x80
 800fe82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe86:	e0a4      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	4a90      	ldr	r2, [pc, #576]	; (80100d0 <UART_SetConfig+0x6a0>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d130      	bne.n	800fef4 <UART_SetConfig+0x4c4>
 800fe92:	4b8e      	ldr	r3, [pc, #568]	; (80100cc <UART_SetConfig+0x69c>)
 800fe94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe96:	f003 0307 	and.w	r3, r3, #7
 800fe9a:	2b05      	cmp	r3, #5
 800fe9c:	d826      	bhi.n	800feec <UART_SetConfig+0x4bc>
 800fe9e:	a201      	add	r2, pc, #4	; (adr r2, 800fea4 <UART_SetConfig+0x474>)
 800fea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fea4:	0800febd 	.word	0x0800febd
 800fea8:	0800fec5 	.word	0x0800fec5
 800feac:	0800fecd 	.word	0x0800fecd
 800feb0:	0800fed5 	.word	0x0800fed5
 800feb4:	0800fedd 	.word	0x0800fedd
 800feb8:	0800fee5 	.word	0x0800fee5
 800febc:	2300      	movs	r3, #0
 800febe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fec2:	e086      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fec4:	2304      	movs	r3, #4
 800fec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feca:	e082      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fecc:	2308      	movs	r3, #8
 800fece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fed2:	e07e      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fed4:	2310      	movs	r3, #16
 800fed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feda:	e07a      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fedc:	2320      	movs	r3, #32
 800fede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fee2:	e076      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fee4:	2340      	movs	r3, #64	; 0x40
 800fee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800feea:	e072      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800feec:	2380      	movs	r3, #128	; 0x80
 800feee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fef2:	e06e      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4a76      	ldr	r2, [pc, #472]	; (80100d4 <UART_SetConfig+0x6a4>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d130      	bne.n	800ff60 <UART_SetConfig+0x530>
 800fefe:	4b73      	ldr	r3, [pc, #460]	; (80100cc <UART_SetConfig+0x69c>)
 800ff00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff02:	f003 0307 	and.w	r3, r3, #7
 800ff06:	2b05      	cmp	r3, #5
 800ff08:	d826      	bhi.n	800ff58 <UART_SetConfig+0x528>
 800ff0a:	a201      	add	r2, pc, #4	; (adr r2, 800ff10 <UART_SetConfig+0x4e0>)
 800ff0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff10:	0800ff29 	.word	0x0800ff29
 800ff14:	0800ff31 	.word	0x0800ff31
 800ff18:	0800ff39 	.word	0x0800ff39
 800ff1c:	0800ff41 	.word	0x0800ff41
 800ff20:	0800ff49 	.word	0x0800ff49
 800ff24:	0800ff51 	.word	0x0800ff51
 800ff28:	2300      	movs	r3, #0
 800ff2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff2e:	e050      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ff30:	2304      	movs	r3, #4
 800ff32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff36:	e04c      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ff38:	2308      	movs	r3, #8
 800ff3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff3e:	e048      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ff40:	2310      	movs	r3, #16
 800ff42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff46:	e044      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ff48:	2320      	movs	r3, #32
 800ff4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff4e:	e040      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ff50:	2340      	movs	r3, #64	; 0x40
 800ff52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff56:	e03c      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ff58:	2380      	movs	r3, #128	; 0x80
 800ff5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff5e:	e038      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a5c      	ldr	r2, [pc, #368]	; (80100d8 <UART_SetConfig+0x6a8>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d130      	bne.n	800ffcc <UART_SetConfig+0x59c>
 800ff6a:	4b58      	ldr	r3, [pc, #352]	; (80100cc <UART_SetConfig+0x69c>)
 800ff6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff6e:	f003 0307 	and.w	r3, r3, #7
 800ff72:	2b05      	cmp	r3, #5
 800ff74:	d826      	bhi.n	800ffc4 <UART_SetConfig+0x594>
 800ff76:	a201      	add	r2, pc, #4	; (adr r2, 800ff7c <UART_SetConfig+0x54c>)
 800ff78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff7c:	0800ff95 	.word	0x0800ff95
 800ff80:	0800ff9d 	.word	0x0800ff9d
 800ff84:	0800ffa5 	.word	0x0800ffa5
 800ff88:	0800ffad 	.word	0x0800ffad
 800ff8c:	0800ffb5 	.word	0x0800ffb5
 800ff90:	0800ffbd 	.word	0x0800ffbd
 800ff94:	2302      	movs	r3, #2
 800ff96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff9a:	e01a      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ff9c:	2304      	movs	r3, #4
 800ff9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffa2:	e016      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ffa4:	2308      	movs	r3, #8
 800ffa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffaa:	e012      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ffac:	2310      	movs	r3, #16
 800ffae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffb2:	e00e      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ffb4:	2320      	movs	r3, #32
 800ffb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffba:	e00a      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ffbc:	2340      	movs	r3, #64	; 0x40
 800ffbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffc2:	e006      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ffc4:	2380      	movs	r3, #128	; 0x80
 800ffc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffca:	e002      	b.n	800ffd2 <UART_SetConfig+0x5a2>
 800ffcc:	2380      	movs	r3, #128	; 0x80
 800ffce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4a40      	ldr	r2, [pc, #256]	; (80100d8 <UART_SetConfig+0x6a8>)
 800ffd8:	4293      	cmp	r3, r2
 800ffda:	f040 80ef 	bne.w	80101bc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ffde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ffe2:	2b20      	cmp	r3, #32
 800ffe4:	dc46      	bgt.n	8010074 <UART_SetConfig+0x644>
 800ffe6:	2b02      	cmp	r3, #2
 800ffe8:	f2c0 8081 	blt.w	80100ee <UART_SetConfig+0x6be>
 800ffec:	3b02      	subs	r3, #2
 800ffee:	2b1e      	cmp	r3, #30
 800fff0:	d87d      	bhi.n	80100ee <UART_SetConfig+0x6be>
 800fff2:	a201      	add	r2, pc, #4	; (adr r2, 800fff8 <UART_SetConfig+0x5c8>)
 800fff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff8:	0801007b 	.word	0x0801007b
 800fffc:	080100ef 	.word	0x080100ef
 8010000:	08010083 	.word	0x08010083
 8010004:	080100ef 	.word	0x080100ef
 8010008:	080100ef 	.word	0x080100ef
 801000c:	080100ef 	.word	0x080100ef
 8010010:	08010093 	.word	0x08010093
 8010014:	080100ef 	.word	0x080100ef
 8010018:	080100ef 	.word	0x080100ef
 801001c:	080100ef 	.word	0x080100ef
 8010020:	080100ef 	.word	0x080100ef
 8010024:	080100ef 	.word	0x080100ef
 8010028:	080100ef 	.word	0x080100ef
 801002c:	080100ef 	.word	0x080100ef
 8010030:	080100a3 	.word	0x080100a3
 8010034:	080100ef 	.word	0x080100ef
 8010038:	080100ef 	.word	0x080100ef
 801003c:	080100ef 	.word	0x080100ef
 8010040:	080100ef 	.word	0x080100ef
 8010044:	080100ef 	.word	0x080100ef
 8010048:	080100ef 	.word	0x080100ef
 801004c:	080100ef 	.word	0x080100ef
 8010050:	080100ef 	.word	0x080100ef
 8010054:	080100ef 	.word	0x080100ef
 8010058:	080100ef 	.word	0x080100ef
 801005c:	080100ef 	.word	0x080100ef
 8010060:	080100ef 	.word	0x080100ef
 8010064:	080100ef 	.word	0x080100ef
 8010068:	080100ef 	.word	0x080100ef
 801006c:	080100ef 	.word	0x080100ef
 8010070:	080100e1 	.word	0x080100e1
 8010074:	2b40      	cmp	r3, #64	; 0x40
 8010076:	d036      	beq.n	80100e6 <UART_SetConfig+0x6b6>
 8010078:	e039      	b.n	80100ee <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801007a:	f7fb ffe9 	bl	800c050 <HAL_RCCEx_GetD3PCLK1Freq>
 801007e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010080:	e03b      	b.n	80100fa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010082:	f107 0314 	add.w	r3, r7, #20
 8010086:	4618      	mov	r0, r3
 8010088:	f7fb fff8 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010090:	e033      	b.n	80100fa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010092:	f107 0308 	add.w	r3, r7, #8
 8010096:	4618      	mov	r0, r3
 8010098:	f7fc f944 	bl	800c324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100a0:	e02b      	b.n	80100fa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100a2:	4b0a      	ldr	r3, [pc, #40]	; (80100cc <UART_SetConfig+0x69c>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	f003 0320 	and.w	r3, r3, #32
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d009      	beq.n	80100c2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100ae:	4b07      	ldr	r3, [pc, #28]	; (80100cc <UART_SetConfig+0x69c>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	08db      	lsrs	r3, r3, #3
 80100b4:	f003 0303 	and.w	r3, r3, #3
 80100b8:	4a08      	ldr	r2, [pc, #32]	; (80100dc <UART_SetConfig+0x6ac>)
 80100ba:	fa22 f303 	lsr.w	r3, r2, r3
 80100be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80100c0:	e01b      	b.n	80100fa <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80100c2:	4b06      	ldr	r3, [pc, #24]	; (80100dc <UART_SetConfig+0x6ac>)
 80100c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100c6:	e018      	b.n	80100fa <UART_SetConfig+0x6ca>
 80100c8:	40011400 	.word	0x40011400
 80100cc:	58024400 	.word	0x58024400
 80100d0:	40007800 	.word	0x40007800
 80100d4:	40007c00 	.word	0x40007c00
 80100d8:	58000c00 	.word	0x58000c00
 80100dc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80100e0:	4bc4      	ldr	r3, [pc, #784]	; (80103f4 <UART_SetConfig+0x9c4>)
 80100e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100e4:	e009      	b.n	80100fa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80100ec:	e005      	b.n	80100fa <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80100ee:	2300      	movs	r3, #0
 80100f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80100f2:	2301      	movs	r3, #1
 80100f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80100f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80100fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f000 81da 	beq.w	80104b6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010106:	4abc      	ldr	r2, [pc, #752]	; (80103f8 <UART_SetConfig+0x9c8>)
 8010108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801010c:	461a      	mov	r2, r3
 801010e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010110:	fbb3 f3f2 	udiv	r3, r3, r2
 8010114:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	685a      	ldr	r2, [r3, #4]
 801011a:	4613      	mov	r3, r2
 801011c:	005b      	lsls	r3, r3, #1
 801011e:	4413      	add	r3, r2
 8010120:	6a3a      	ldr	r2, [r7, #32]
 8010122:	429a      	cmp	r2, r3
 8010124:	d305      	bcc.n	8010132 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801012c:	6a3a      	ldr	r2, [r7, #32]
 801012e:	429a      	cmp	r2, r3
 8010130:	d903      	bls.n	801013a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8010132:	2301      	movs	r3, #1
 8010134:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010138:	e1bd      	b.n	80104b6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801013a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013c:	4618      	mov	r0, r3
 801013e:	f04f 0100 	mov.w	r1, #0
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010146:	4aac      	ldr	r2, [pc, #688]	; (80103f8 <UART_SetConfig+0x9c8>)
 8010148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801014c:	b29a      	uxth	r2, r3
 801014e:	f04f 0300 	mov.w	r3, #0
 8010152:	f7f0 f91d 	bl	8000390 <__aeabi_uldivmod>
 8010156:	4602      	mov	r2, r0
 8010158:	460b      	mov	r3, r1
 801015a:	4610      	mov	r0, r2
 801015c:	4619      	mov	r1, r3
 801015e:	f04f 0200 	mov.w	r2, #0
 8010162:	f04f 0300 	mov.w	r3, #0
 8010166:	020b      	lsls	r3, r1, #8
 8010168:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801016c:	0202      	lsls	r2, r0, #8
 801016e:	6879      	ldr	r1, [r7, #4]
 8010170:	6849      	ldr	r1, [r1, #4]
 8010172:	0849      	lsrs	r1, r1, #1
 8010174:	4608      	mov	r0, r1
 8010176:	f04f 0100 	mov.w	r1, #0
 801017a:	1814      	adds	r4, r2, r0
 801017c:	eb43 0501 	adc.w	r5, r3, r1
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	461a      	mov	r2, r3
 8010186:	f04f 0300 	mov.w	r3, #0
 801018a:	4620      	mov	r0, r4
 801018c:	4629      	mov	r1, r5
 801018e:	f7f0 f8ff 	bl	8000390 <__aeabi_uldivmod>
 8010192:	4602      	mov	r2, r0
 8010194:	460b      	mov	r3, r1
 8010196:	4613      	mov	r3, r2
 8010198:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801019a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80101a0:	d308      	bcc.n	80101b4 <UART_SetConfig+0x784>
 80101a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101a8:	d204      	bcs.n	80101b4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101b0:	60da      	str	r2, [r3, #12]
 80101b2:	e180      	b.n	80104b6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80101b4:	2301      	movs	r3, #1
 80101b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80101ba:	e17c      	b.n	80104b6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	69db      	ldr	r3, [r3, #28]
 80101c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80101c4:	f040 80bf 	bne.w	8010346 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80101c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80101cc:	2b20      	cmp	r3, #32
 80101ce:	dc49      	bgt.n	8010264 <UART_SetConfig+0x834>
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	db7c      	blt.n	80102ce <UART_SetConfig+0x89e>
 80101d4:	2b20      	cmp	r3, #32
 80101d6:	d87a      	bhi.n	80102ce <UART_SetConfig+0x89e>
 80101d8:	a201      	add	r2, pc, #4	; (adr r2, 80101e0 <UART_SetConfig+0x7b0>)
 80101da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101de:	bf00      	nop
 80101e0:	0801026b 	.word	0x0801026b
 80101e4:	08010273 	.word	0x08010273
 80101e8:	080102cf 	.word	0x080102cf
 80101ec:	080102cf 	.word	0x080102cf
 80101f0:	0801027b 	.word	0x0801027b
 80101f4:	080102cf 	.word	0x080102cf
 80101f8:	080102cf 	.word	0x080102cf
 80101fc:	080102cf 	.word	0x080102cf
 8010200:	0801028b 	.word	0x0801028b
 8010204:	080102cf 	.word	0x080102cf
 8010208:	080102cf 	.word	0x080102cf
 801020c:	080102cf 	.word	0x080102cf
 8010210:	080102cf 	.word	0x080102cf
 8010214:	080102cf 	.word	0x080102cf
 8010218:	080102cf 	.word	0x080102cf
 801021c:	080102cf 	.word	0x080102cf
 8010220:	0801029b 	.word	0x0801029b
 8010224:	080102cf 	.word	0x080102cf
 8010228:	080102cf 	.word	0x080102cf
 801022c:	080102cf 	.word	0x080102cf
 8010230:	080102cf 	.word	0x080102cf
 8010234:	080102cf 	.word	0x080102cf
 8010238:	080102cf 	.word	0x080102cf
 801023c:	080102cf 	.word	0x080102cf
 8010240:	080102cf 	.word	0x080102cf
 8010244:	080102cf 	.word	0x080102cf
 8010248:	080102cf 	.word	0x080102cf
 801024c:	080102cf 	.word	0x080102cf
 8010250:	080102cf 	.word	0x080102cf
 8010254:	080102cf 	.word	0x080102cf
 8010258:	080102cf 	.word	0x080102cf
 801025c:	080102cf 	.word	0x080102cf
 8010260:	080102c1 	.word	0x080102c1
 8010264:	2b40      	cmp	r3, #64	; 0x40
 8010266:	d02e      	beq.n	80102c6 <UART_SetConfig+0x896>
 8010268:	e031      	b.n	80102ce <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801026a:	f7fa fa71 	bl	800a750 <HAL_RCC_GetPCLK1Freq>
 801026e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010270:	e033      	b.n	80102da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010272:	f7fa fa83 	bl	800a77c <HAL_RCC_GetPCLK2Freq>
 8010276:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010278:	e02f      	b.n	80102da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801027a:	f107 0314 	add.w	r3, r7, #20
 801027e:	4618      	mov	r0, r3
 8010280:	f7fb fefc 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010284:	69bb      	ldr	r3, [r7, #24]
 8010286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010288:	e027      	b.n	80102da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801028a:	f107 0308 	add.w	r3, r7, #8
 801028e:	4618      	mov	r0, r3
 8010290:	f7fc f848 	bl	800c324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010298:	e01f      	b.n	80102da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801029a:	4b58      	ldr	r3, [pc, #352]	; (80103fc <UART_SetConfig+0x9cc>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f003 0320 	and.w	r3, r3, #32
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d009      	beq.n	80102ba <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80102a6:	4b55      	ldr	r3, [pc, #340]	; (80103fc <UART_SetConfig+0x9cc>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	08db      	lsrs	r3, r3, #3
 80102ac:	f003 0303 	and.w	r3, r3, #3
 80102b0:	4a53      	ldr	r2, [pc, #332]	; (8010400 <UART_SetConfig+0x9d0>)
 80102b2:	fa22 f303 	lsr.w	r3, r2, r3
 80102b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80102b8:	e00f      	b.n	80102da <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80102ba:	4b51      	ldr	r3, [pc, #324]	; (8010400 <UART_SetConfig+0x9d0>)
 80102bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80102be:	e00c      	b.n	80102da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80102c0:	4b4c      	ldr	r3, [pc, #304]	; (80103f4 <UART_SetConfig+0x9c4>)
 80102c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80102c4:	e009      	b.n	80102da <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80102cc:	e005      	b.n	80102da <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80102ce:	2300      	movs	r3, #0
 80102d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80102d2:	2301      	movs	r3, #1
 80102d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80102d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80102da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f000 80ea 	beq.w	80104b6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e6:	4a44      	ldr	r2, [pc, #272]	; (80103f8 <UART_SetConfig+0x9c8>)
 80102e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102ec:	461a      	mov	r2, r3
 80102ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80102f4:	005a      	lsls	r2, r3, #1
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	085b      	lsrs	r3, r3, #1
 80102fc:	441a      	add	r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	fbb2 f3f3 	udiv	r3, r2, r3
 8010306:	b29b      	uxth	r3, r3
 8010308:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801030a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030c:	2b0f      	cmp	r3, #15
 801030e:	d916      	bls.n	801033e <UART_SetConfig+0x90e>
 8010310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010316:	d212      	bcs.n	801033e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031a:	b29b      	uxth	r3, r3
 801031c:	f023 030f 	bic.w	r3, r3, #15
 8010320:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010324:	085b      	lsrs	r3, r3, #1
 8010326:	b29b      	uxth	r3, r3
 8010328:	f003 0307 	and.w	r3, r3, #7
 801032c:	b29a      	uxth	r2, r3
 801032e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010330:	4313      	orrs	r3, r2
 8010332:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801033a:	60da      	str	r2, [r3, #12]
 801033c:	e0bb      	b.n	80104b6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801033e:	2301      	movs	r3, #1
 8010340:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010344:	e0b7      	b.n	80104b6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010346:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801034a:	2b20      	cmp	r3, #32
 801034c:	dc4a      	bgt.n	80103e4 <UART_SetConfig+0x9b4>
 801034e:	2b00      	cmp	r3, #0
 8010350:	f2c0 8086 	blt.w	8010460 <UART_SetConfig+0xa30>
 8010354:	2b20      	cmp	r3, #32
 8010356:	f200 8083 	bhi.w	8010460 <UART_SetConfig+0xa30>
 801035a:	a201      	add	r2, pc, #4	; (adr r2, 8010360 <UART_SetConfig+0x930>)
 801035c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010360:	080103eb 	.word	0x080103eb
 8010364:	08010405 	.word	0x08010405
 8010368:	08010461 	.word	0x08010461
 801036c:	08010461 	.word	0x08010461
 8010370:	0801040d 	.word	0x0801040d
 8010374:	08010461 	.word	0x08010461
 8010378:	08010461 	.word	0x08010461
 801037c:	08010461 	.word	0x08010461
 8010380:	0801041d 	.word	0x0801041d
 8010384:	08010461 	.word	0x08010461
 8010388:	08010461 	.word	0x08010461
 801038c:	08010461 	.word	0x08010461
 8010390:	08010461 	.word	0x08010461
 8010394:	08010461 	.word	0x08010461
 8010398:	08010461 	.word	0x08010461
 801039c:	08010461 	.word	0x08010461
 80103a0:	0801042d 	.word	0x0801042d
 80103a4:	08010461 	.word	0x08010461
 80103a8:	08010461 	.word	0x08010461
 80103ac:	08010461 	.word	0x08010461
 80103b0:	08010461 	.word	0x08010461
 80103b4:	08010461 	.word	0x08010461
 80103b8:	08010461 	.word	0x08010461
 80103bc:	08010461 	.word	0x08010461
 80103c0:	08010461 	.word	0x08010461
 80103c4:	08010461 	.word	0x08010461
 80103c8:	08010461 	.word	0x08010461
 80103cc:	08010461 	.word	0x08010461
 80103d0:	08010461 	.word	0x08010461
 80103d4:	08010461 	.word	0x08010461
 80103d8:	08010461 	.word	0x08010461
 80103dc:	08010461 	.word	0x08010461
 80103e0:	08010453 	.word	0x08010453
 80103e4:	2b40      	cmp	r3, #64	; 0x40
 80103e6:	d037      	beq.n	8010458 <UART_SetConfig+0xa28>
 80103e8:	e03a      	b.n	8010460 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103ea:	f7fa f9b1 	bl	800a750 <HAL_RCC_GetPCLK1Freq>
 80103ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80103f0:	e03c      	b.n	801046c <UART_SetConfig+0xa3c>
 80103f2:	bf00      	nop
 80103f4:	003d0900 	.word	0x003d0900
 80103f8:	080247a0 	.word	0x080247a0
 80103fc:	58024400 	.word	0x58024400
 8010400:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010404:	f7fa f9ba 	bl	800a77c <HAL_RCC_GetPCLK2Freq>
 8010408:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801040a:	e02f      	b.n	801046c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801040c:	f107 0314 	add.w	r3, r7, #20
 8010410:	4618      	mov	r0, r3
 8010412:	f7fb fe33 	bl	800c07c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801041a:	e027      	b.n	801046c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801041c:	f107 0308 	add.w	r3, r7, #8
 8010420:	4618      	mov	r0, r3
 8010422:	f7fb ff7f 	bl	800c324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801042a:	e01f      	b.n	801046c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801042c:	4b2c      	ldr	r3, [pc, #176]	; (80104e0 <UART_SetConfig+0xab0>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f003 0320 	and.w	r3, r3, #32
 8010434:	2b00      	cmp	r3, #0
 8010436:	d009      	beq.n	801044c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010438:	4b29      	ldr	r3, [pc, #164]	; (80104e0 <UART_SetConfig+0xab0>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	08db      	lsrs	r3, r3, #3
 801043e:	f003 0303 	and.w	r3, r3, #3
 8010442:	4a28      	ldr	r2, [pc, #160]	; (80104e4 <UART_SetConfig+0xab4>)
 8010444:	fa22 f303 	lsr.w	r3, r2, r3
 8010448:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801044a:	e00f      	b.n	801046c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 801044c:	4b25      	ldr	r3, [pc, #148]	; (80104e4 <UART_SetConfig+0xab4>)
 801044e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010450:	e00c      	b.n	801046c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010452:	4b25      	ldr	r3, [pc, #148]	; (80104e8 <UART_SetConfig+0xab8>)
 8010454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010456:	e009      	b.n	801046c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801045c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801045e:	e005      	b.n	801046c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8010460:	2300      	movs	r3, #0
 8010462:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010464:	2301      	movs	r3, #1
 8010466:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801046a:	bf00      	nop
    }

    if (pclk != 0U)
 801046c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046e:	2b00      	cmp	r3, #0
 8010470:	d021      	beq.n	80104b6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010476:	4a1d      	ldr	r2, [pc, #116]	; (80104ec <UART_SetConfig+0xabc>)
 8010478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801047c:	461a      	mov	r2, r3
 801047e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010480:	fbb3 f2f2 	udiv	r2, r3, r2
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	085b      	lsrs	r3, r3, #1
 801048a:	441a      	add	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	fbb2 f3f3 	udiv	r3, r2, r3
 8010494:	b29b      	uxth	r3, r3
 8010496:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049a:	2b0f      	cmp	r3, #15
 801049c:	d908      	bls.n	80104b0 <UART_SetConfig+0xa80>
 801049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104a4:	d204      	bcs.n	80104b0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104ac:	60da      	str	r2, [r3, #12]
 80104ae:	e002      	b.n	80104b6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80104b0:	2301      	movs	r3, #1
 80104b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2201      	movs	r2, #1
 80104ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2201      	movs	r2, #1
 80104c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2200      	movs	r2, #0
 80104d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80104d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3738      	adds	r7, #56	; 0x38
 80104da:	46bd      	mov	sp, r7
 80104dc:	bdb0      	pop	{r4, r5, r7, pc}
 80104de:	bf00      	nop
 80104e0:	58024400 	.word	0x58024400
 80104e4:	03d09000 	.word	0x03d09000
 80104e8:	003d0900 	.word	0x003d0900
 80104ec:	080247a0 	.word	0x080247a0

080104f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104fc:	f003 0301 	and.w	r3, r3, #1
 8010500:	2b00      	cmp	r3, #0
 8010502:	d00a      	beq.n	801051a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	430a      	orrs	r2, r1
 8010518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801051e:	f003 0302 	and.w	r3, r3, #2
 8010522:	2b00      	cmp	r3, #0
 8010524:	d00a      	beq.n	801053c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	685b      	ldr	r3, [r3, #4]
 801052c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	430a      	orrs	r2, r1
 801053a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010540:	f003 0304 	and.w	r3, r3, #4
 8010544:	2b00      	cmp	r3, #0
 8010546:	d00a      	beq.n	801055e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	430a      	orrs	r2, r1
 801055c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010562:	f003 0308 	and.w	r3, r3, #8
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00a      	beq.n	8010580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	430a      	orrs	r2, r1
 801057e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010584:	f003 0310 	and.w	r3, r3, #16
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00a      	beq.n	80105a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	689b      	ldr	r3, [r3, #8]
 8010592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	430a      	orrs	r2, r1
 80105a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105a6:	f003 0320 	and.w	r3, r3, #32
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00a      	beq.n	80105c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	689b      	ldr	r3, [r3, #8]
 80105b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	430a      	orrs	r2, r1
 80105c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d01a      	beq.n	8010606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	430a      	orrs	r2, r1
 80105e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80105ee:	d10a      	bne.n	8010606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	430a      	orrs	r2, r1
 8010604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801060e:	2b00      	cmp	r3, #0
 8010610:	d00a      	beq.n	8010628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	430a      	orrs	r2, r1
 8010626:	605a      	str	r2, [r3, #4]
  }
}
 8010628:	bf00      	nop
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b086      	sub	sp, #24
 8010638:	af02      	add	r7, sp, #8
 801063a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2200      	movs	r2, #0
 8010640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010644:	f7f4 fffc 	bl	8005640 <HAL_GetTick>
 8010648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f003 0308 	and.w	r3, r3, #8
 8010654:	2b08      	cmp	r3, #8
 8010656:	d10e      	bne.n	8010676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2200      	movs	r2, #0
 8010662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 f82f 	bl	80106ca <UART_WaitOnFlagUntilTimeout>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	d001      	beq.n	8010676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010672:	2303      	movs	r3, #3
 8010674:	e025      	b.n	80106c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f003 0304 	and.w	r3, r3, #4
 8010680:	2b04      	cmp	r3, #4
 8010682:	d10e      	bne.n	80106a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010688:	9300      	str	r3, [sp, #0]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2200      	movs	r2, #0
 801068e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 f819 	bl	80106ca <UART_WaitOnFlagUntilTimeout>
 8010698:	4603      	mov	r3, r0
 801069a:	2b00      	cmp	r3, #0
 801069c:	d001      	beq.n	80106a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801069e:	2303      	movs	r3, #3
 80106a0:	e00f      	b.n	80106c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2220      	movs	r2, #32
 80106a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2220      	movs	r2, #32
 80106ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2200      	movs	r2, #0
 80106b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b084      	sub	sp, #16
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	60f8      	str	r0, [r7, #12]
 80106d2:	60b9      	str	r1, [r7, #8]
 80106d4:	603b      	str	r3, [r7, #0]
 80106d6:	4613      	mov	r3, r2
 80106d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106da:	e062      	b.n	80107a2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e2:	d05e      	beq.n	80107a2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106e4:	f7f4 ffac 	bl	8005640 <HAL_GetTick>
 80106e8:	4602      	mov	r2, r0
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	69ba      	ldr	r2, [r7, #24]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d302      	bcc.n	80106fa <UART_WaitOnFlagUntilTimeout+0x30>
 80106f4:	69bb      	ldr	r3, [r7, #24]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d11d      	bne.n	8010736 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010708:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	689a      	ldr	r2, [r3, #8]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f022 0201 	bic.w	r2, r2, #1
 8010718:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2220      	movs	r2, #32
 801071e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2220      	movs	r2, #32
 8010726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2200      	movs	r2, #0
 801072e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010732:	2303      	movs	r3, #3
 8010734:	e045      	b.n	80107c2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f003 0304 	and.w	r3, r3, #4
 8010740:	2b00      	cmp	r3, #0
 8010742:	d02e      	beq.n	80107a2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	69db      	ldr	r3, [r3, #28]
 801074a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801074e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010752:	d126      	bne.n	80107a2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801075c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801076c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	689a      	ldr	r2, [r3, #8]
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f022 0201 	bic.w	r2, r2, #1
 801077c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	2220      	movs	r2, #32
 8010782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2220      	movs	r2, #32
 801078a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2220      	movs	r2, #32
 8010792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2200      	movs	r2, #0
 801079a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801079e:	2303      	movs	r3, #3
 80107a0:	e00f      	b.n	80107c2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	69da      	ldr	r2, [r3, #28]
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	4013      	ands	r3, r2
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	bf0c      	ite	eq
 80107b2:	2301      	moveq	r3, #1
 80107b4:	2300      	movne	r3, #0
 80107b6:	b2db      	uxtb	r3, r3
 80107b8:	461a      	mov	r2, r3
 80107ba:	79fb      	ldrb	r3, [r7, #7]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d08d      	beq.n	80106dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80107c0:	2300      	movs	r3, #0
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3710      	adds	r7, #16
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
	...

080107cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b085      	sub	sp, #20
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	60b9      	str	r1, [r7, #8]
 80107d6:	4613      	mov	r3, r2
 80107d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	68ba      	ldr	r2, [r7, #8]
 80107de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	88fa      	ldrh	r2, [r7, #6]
 80107e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	88fa      	ldrh	r2, [r7, #6]
 80107ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2200      	movs	r2, #0
 80107f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	689b      	ldr	r3, [r3, #8]
 80107fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107fe:	d10e      	bne.n	801081e <UART_Start_Receive_IT+0x52>
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	691b      	ldr	r3, [r3, #16]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d105      	bne.n	8010814 <UART_Start_Receive_IT+0x48>
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801080e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010812:	e02d      	b.n	8010870 <UART_Start_Receive_IT+0xa4>
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	22ff      	movs	r2, #255	; 0xff
 8010818:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801081c:	e028      	b.n	8010870 <UART_Start_Receive_IT+0xa4>
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	689b      	ldr	r3, [r3, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d10d      	bne.n	8010842 <UART_Start_Receive_IT+0x76>
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	691b      	ldr	r3, [r3, #16]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d104      	bne.n	8010838 <UART_Start_Receive_IT+0x6c>
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	22ff      	movs	r2, #255	; 0xff
 8010832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010836:	e01b      	b.n	8010870 <UART_Start_Receive_IT+0xa4>
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	227f      	movs	r2, #127	; 0x7f
 801083c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010840:	e016      	b.n	8010870 <UART_Start_Receive_IT+0xa4>
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	689b      	ldr	r3, [r3, #8]
 8010846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801084a:	d10d      	bne.n	8010868 <UART_Start_Receive_IT+0x9c>
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	691b      	ldr	r3, [r3, #16]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d104      	bne.n	801085e <UART_Start_Receive_IT+0x92>
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	227f      	movs	r2, #127	; 0x7f
 8010858:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801085c:	e008      	b.n	8010870 <UART_Start_Receive_IT+0xa4>
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	223f      	movs	r2, #63	; 0x3f
 8010862:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010866:	e003      	b.n	8010870 <UART_Start_Receive_IT+0xa4>
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2200      	movs	r2, #0
 801086c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2200      	movs	r2, #0
 8010874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2222      	movs	r2, #34	; 0x22
 801087c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	689a      	ldr	r2, [r3, #8]
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f042 0201 	orr.w	r2, r2, #1
 801088e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010898:	d12a      	bne.n	80108f0 <UART_Start_Receive_IT+0x124>
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80108a0:	88fa      	ldrh	r2, [r7, #6]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d324      	bcc.n	80108f0 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	689b      	ldr	r3, [r3, #8]
 80108aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108ae:	d107      	bne.n	80108c0 <UART_Start_Receive_IT+0xf4>
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	691b      	ldr	r3, [r3, #16]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d103      	bne.n	80108c0 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	4a1f      	ldr	r2, [pc, #124]	; (8010938 <UART_Start_Receive_IT+0x16c>)
 80108bc:	671a      	str	r2, [r3, #112]	; 0x70
 80108be:	e002      	b.n	80108c6 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	4a1e      	ldr	r2, [pc, #120]	; (801093c <UART_Start_Receive_IT+0x170>)
 80108c4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2200      	movs	r2, #0
 80108ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80108dc:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	689a      	ldr	r2, [r3, #8]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80108ec:	609a      	str	r2, [r3, #8]
 80108ee:	e01b      	b.n	8010928 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108f8:	d107      	bne.n	801090a <UART_Start_Receive_IT+0x13e>
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	691b      	ldr	r3, [r3, #16]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d103      	bne.n	801090a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	4a0e      	ldr	r2, [pc, #56]	; (8010940 <UART_Start_Receive_IT+0x174>)
 8010906:	671a      	str	r2, [r3, #112]	; 0x70
 8010908:	e002      	b.n	8010910 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	4a0d      	ldr	r2, [pc, #52]	; (8010944 <UART_Start_Receive_IT+0x178>)
 801090e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2200      	movs	r2, #0
 8010914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8010926:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8010928:	2300      	movs	r3, #0
}
 801092a:	4618      	mov	r0, r3
 801092c:	3714      	adds	r7, #20
 801092e:	46bd      	mov	sp, r7
 8010930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010934:	4770      	bx	lr
 8010936:	bf00      	nop
 8010938:	08010dc1 	.word	0x08010dc1
 801093c:	08010bbd 	.word	0x08010bbd
 8010940:	08010ae5 	.word	0x08010ae5
 8010944:	08010a0d 	.word	0x08010a0d

08010948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010948:	b480      	push	{r7}
 801094a:	b083      	sub	sp, #12
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	681a      	ldr	r2, [r3, #0]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801095e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6899      	ldr	r1, [r3, #8]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	4b0f      	ldr	r3, [pc, #60]	; (80109a8 <UART_EndRxTransfer+0x60>)
 801096c:	400b      	ands	r3, r1
 801096e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010974:	2b01      	cmp	r3, #1
 8010976:	d107      	bne.n	8010988 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f022 0210 	bic.w	r2, r2, #16
 8010986:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2220      	movs	r2, #32
 801098c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2200      	movs	r2, #0
 801099a:	671a      	str	r2, [r3, #112]	; 0x70
}
 801099c:	bf00      	nop
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr
 80109a8:	effffffe 	.word	0xeffffffe

080109ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2200      	movs	r2, #0
 80109be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2200      	movs	r2, #0
 80109c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f7ff f81a 	bl	800fa04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109d0:	bf00      	nop
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109ee:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2220      	movs	r2, #32
 80109f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f7fe fff6 	bl	800f9f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a04:	bf00      	nop
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a1a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a22:	2b22      	cmp	r3, #34	; 0x22
 8010a24:	d152      	bne.n	8010acc <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a2c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010a2e:	89bb      	ldrh	r3, [r7, #12]
 8010a30:	b2d9      	uxtb	r1, r3
 8010a32:	89fb      	ldrh	r3, [r7, #14]
 8010a34:	b2da      	uxtb	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a3a:	400a      	ands	r2, r1
 8010a3c:	b2d2      	uxtb	r2, r2
 8010a3e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a44:	1c5a      	adds	r2, r3, #1
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	3b01      	subs	r3, #1
 8010a54:	b29a      	uxth	r2, r3
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d139      	bne.n	8010adc <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010a76:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	689a      	ldr	r2, [r3, #8]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f022 0201 	bic.w	r2, r2, #1
 8010a86:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2220      	movs	r2, #32
 8010a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d10f      	bne.n	8010abe <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	f022 0210 	bic.w	r2, r2, #16
 8010aac:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f7fe ffae 	bl	800fa18 <HAL_UARTEx_RxEventCallback>
 8010abc:	e002      	b.n	8010ac4 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f7f0 ffaa 	bl	8001a18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010aca:	e007      	b.n	8010adc <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	699a      	ldr	r2, [r3, #24]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f042 0208 	orr.w	r2, r2, #8
 8010ada:	619a      	str	r2, [r3, #24]
}
 8010adc:	bf00      	nop
 8010ade:	3710      	adds	r7, #16
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010af2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010afa:	2b22      	cmp	r3, #34	; 0x22
 8010afc:	d152      	bne.n	8010ba4 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b04:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b0a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8010b0c:	89ba      	ldrh	r2, [r7, #12]
 8010b0e:	89fb      	ldrh	r3, [r7, #14]
 8010b10:	4013      	ands	r3, r2
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b1c:	1c9a      	adds	r2, r3, #2
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	3b01      	subs	r3, #1
 8010b2c:	b29a      	uxth	r2, r3
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d139      	bne.n	8010bb4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010b4e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	689a      	ldr	r2, [r3, #8]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f022 0201 	bic.w	r2, r2, #1
 8010b5e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2220      	movs	r2, #32
 8010b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d10f      	bne.n	8010b96 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f022 0210 	bic.w	r2, r2, #16
 8010b84:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f7fe ff42 	bl	800fa18 <HAL_UARTEx_RxEventCallback>
 8010b94:	e002      	b.n	8010b9c <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7f0 ff3e 	bl	8001a18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010ba2:	e007      	b.n	8010bb4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	699a      	ldr	r2, [r3, #24]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f042 0208 	orr.w	r2, r2, #8
 8010bb2:	619a      	str	r2, [r3, #24]
}
 8010bb4:	bf00      	nop
 8010bb6:	3710      	adds	r7, #16
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}

08010bbc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b088      	sub	sp, #32
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010bca:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	69db      	ldr	r3, [r3, #28]
 8010bd2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	689b      	ldr	r3, [r3, #8]
 8010be2:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bea:	2b22      	cmp	r3, #34	; 0x22
 8010bec:	f040 80d8 	bne.w	8010da0 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010bf6:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010bf8:	e0a8      	b.n	8010d4c <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c00:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010c02:	89bb      	ldrh	r3, [r7, #12]
 8010c04:	b2d9      	uxtb	r1, r3
 8010c06:	8b7b      	ldrh	r3, [r7, #26]
 8010c08:	b2da      	uxtb	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c0e:	400a      	ands	r2, r1
 8010c10:	b2d2      	uxtb	r2, r2
 8010c12:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	3b01      	subs	r3, #1
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	69db      	ldr	r3, [r3, #28]
 8010c36:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	f003 0307 	and.w	r3, r3, #7
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d04d      	beq.n	8010cde <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	f003 0301 	and.w	r3, r3, #1
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d010      	beq.n	8010c6e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d00b      	beq.n	8010c6e <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c64:	f043 0201 	orr.w	r2, r3, #1
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	f003 0302 	and.w	r3, r3, #2
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d010      	beq.n	8010c9a <UART_RxISR_8BIT_FIFOEN+0xde>
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	f003 0301 	and.w	r3, r3, #1
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00b      	beq.n	8010c9a <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2202      	movs	r2, #2
 8010c88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c90:	f043 0204 	orr.w	r2, r3, #4
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	f003 0304 	and.w	r3, r3, #4
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d010      	beq.n	8010cc6 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	f003 0301 	and.w	r3, r3, #1
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00b      	beq.n	8010cc6 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2204      	movs	r2, #4
 8010cb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010cbc:	f043 0202 	orr.w	r2, r3, #2
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d006      	beq.n	8010cde <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f7fe fe97 	bl	800fa04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d130      	bne.n	8010d4c <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010cf8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	6899      	ldr	r1, [r3, #8]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	4b2c      	ldr	r3, [pc, #176]	; (8010db8 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 8010d06:	400b      	ands	r3, r1
 8010d08:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2220      	movs	r2, #32
 8010d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2200      	movs	r2, #0
 8010d16:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d10f      	bne.n	8010d40 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f022 0210 	bic.w	r2, r2, #16
 8010d2e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d36:	4619      	mov	r1, r3
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f7fe fe6d 	bl	800fa18 <HAL_UARTEx_RxEventCallback>
 8010d3e:	e002      	b.n	8010d46 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7f0 fe69 	bl	8001a18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d4c:	89fb      	ldrh	r3, [r7, #14]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d005      	beq.n	8010d5e <UART_RxISR_8BIT_FIFOEN+0x1a2>
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	f003 0320 	and.w	r3, r3, #32
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f47f af4e 	bne.w	8010bfa <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d64:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010d66:	897b      	ldrh	r3, [r7, #10]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d021      	beq.n	8010db0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d72:	897a      	ldrh	r2, [r7, #10]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d21b      	bcs.n	8010db0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	689a      	ldr	r2, [r3, #8]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8010d86:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4a0c      	ldr	r2, [pc, #48]	; (8010dbc <UART_RxISR_8BIT_FIFOEN+0x200>)
 8010d8c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f042 0220 	orr.w	r2, r2, #32
 8010d9c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d9e:	e007      	b.n	8010db0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	699a      	ldr	r2, [r3, #24]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f042 0208 	orr.w	r2, r2, #8
 8010dae:	619a      	str	r2, [r3, #24]
}
 8010db0:	bf00      	nop
 8010db2:	3720      	adds	r7, #32
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	effffffe 	.word	0xeffffffe
 8010dbc:	08010a0d 	.word	0x08010a0d

08010dc0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b08a      	sub	sp, #40	; 0x28
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010dce:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	69db      	ldr	r3, [r3, #28]
 8010dd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	689b      	ldr	r3, [r3, #8]
 8010de6:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dee:	2b22      	cmp	r3, #34	; 0x22
 8010df0:	f040 80d8 	bne.w	8010fa4 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010dfa:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010dfc:	e0a8      	b.n	8010f50 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e04:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e0a:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8010e0c:	8aba      	ldrh	r2, [r7, #20]
 8010e0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e10:	4013      	ands	r3, r2
 8010e12:	b29a      	uxth	r2, r3
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e1c:	1c9a      	adds	r2, r3, #2
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	69db      	ldr	r3, [r3, #28]
 8010e3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	f003 0307 	and.w	r3, r3, #7
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d04d      	beq.n	8010ee2 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e48:	f003 0301 	and.w	r3, r3, #1
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d010      	beq.n	8010e72 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00b      	beq.n	8010e72 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2201      	movs	r2, #1
 8010e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e68:	f043 0201 	orr.w	r2, r3, #1
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e74:	f003 0302 	and.w	r3, r3, #2
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d010      	beq.n	8010e9e <UART_RxISR_16BIT_FIFOEN+0xde>
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	f003 0301 	and.w	r3, r3, #1
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d00b      	beq.n	8010e9e <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2202      	movs	r2, #2
 8010e8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e94:	f043 0204 	orr.w	r2, r3, #4
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea0:	f003 0304 	and.w	r3, r3, #4
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d010      	beq.n	8010eca <UART_RxISR_16BIT_FIFOEN+0x10a>
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	f003 0301 	and.w	r3, r3, #1
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d00b      	beq.n	8010eca <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2204      	movs	r2, #4
 8010eb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ec0:	f043 0202 	orr.w	r2, r3, #2
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d006      	beq.n	8010ee2 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f7fe fd95 	bl	800fa04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2200      	movs	r2, #0
 8010ede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ee8:	b29b      	uxth	r3, r3
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d130      	bne.n	8010f50 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010efc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	6899      	ldr	r1, [r3, #8]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	4b2c      	ldr	r3, [pc, #176]	; (8010fbc <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 8010f0a:	400b      	ands	r3, r1
 8010f0c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2220      	movs	r2, #32
 8010f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d10f      	bne.n	8010f44 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f022 0210 	bic.w	r2, r2, #16
 8010f32:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f7fe fd6b 	bl	800fa18 <HAL_UARTEx_RxEventCallback>
 8010f42:	e002      	b.n	8010f4a <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f7f0 fd67 	bl	8001a18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010f50:	8afb      	ldrh	r3, [r7, #22]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d005      	beq.n	8010f62 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8010f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f58:	f003 0320 	and.w	r3, r3, #32
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f47f af4e 	bne.w	8010dfe <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f68:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010f6a:	89fb      	ldrh	r3, [r7, #14]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d021      	beq.n	8010fb4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010f76:	89fa      	ldrh	r2, [r7, #14]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d21b      	bcs.n	8010fb4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	689a      	ldr	r2, [r3, #8]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8010f8a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	4a0c      	ldr	r2, [pc, #48]	; (8010fc0 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8010f90:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	681a      	ldr	r2, [r3, #0]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f042 0220 	orr.w	r2, r2, #32
 8010fa0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010fa2:	e007      	b.n	8010fb4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	699a      	ldr	r2, [r3, #24]
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	f042 0208 	orr.w	r2, r2, #8
 8010fb2:	619a      	str	r2, [r3, #24]
}
 8010fb4:	bf00      	nop
 8010fb6:	3728      	adds	r7, #40	; 0x28
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}
 8010fbc:	effffffe 	.word	0xeffffffe
 8010fc0:	08010ae5 	.word	0x08010ae5

08010fc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b083      	sub	sp, #12
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010fcc:	bf00      	nop
 8010fce:	370c      	adds	r7, #12
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b083      	sub	sp, #12
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010fe0:	bf00      	nop
 8010fe2:	370c      	adds	r7, #12
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr

08010fec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b083      	sub	sp, #12
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010ff4:	bf00      	nop
 8010ff6:	370c      	adds	r7, #12
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr

08011000 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011000:	b480      	push	{r7}
 8011002:	b085      	sub	sp, #20
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801100e:	2b01      	cmp	r3, #1
 8011010:	d101      	bne.n	8011016 <HAL_UARTEx_DisableFifoMode+0x16>
 8011012:	2302      	movs	r3, #2
 8011014:	e027      	b.n	8011066 <HAL_UARTEx_DisableFifoMode+0x66>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2201      	movs	r2, #1
 801101a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2224      	movs	r2, #36	; 0x24
 8011022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f022 0201 	bic.w	r2, r2, #1
 801103c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011044:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2200      	movs	r2, #0
 801104a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	68fa      	ldr	r2, [r7, #12]
 8011052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2220      	movs	r2, #32
 8011058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2200      	movs	r2, #0
 8011060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011064:	2300      	movs	r3, #0
}
 8011066:	4618      	mov	r0, r3
 8011068:	3714      	adds	r7, #20
 801106a:	46bd      	mov	sp, r7
 801106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011070:	4770      	bx	lr

08011072 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011072:	b580      	push	{r7, lr}
 8011074:	b084      	sub	sp, #16
 8011076:	af00      	add	r7, sp, #0
 8011078:	6078      	str	r0, [r7, #4]
 801107a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011082:	2b01      	cmp	r3, #1
 8011084:	d101      	bne.n	801108a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011086:	2302      	movs	r3, #2
 8011088:	e02d      	b.n	80110e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2201      	movs	r2, #1
 801108e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2224      	movs	r2, #36	; 0x24
 8011096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	f022 0201 	bic.w	r2, r2, #1
 80110b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	689b      	ldr	r3, [r3, #8]
 80110b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	683a      	ldr	r2, [r7, #0]
 80110c2:	430a      	orrs	r2, r1
 80110c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f000 f850 	bl	801116c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	68fa      	ldr	r2, [r7, #12]
 80110d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2220      	movs	r2, #32
 80110d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2200      	movs	r2, #0
 80110e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80110e4:	2300      	movs	r3, #0
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3710      	adds	r7, #16
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}

080110ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110ee:	b580      	push	{r7, lr}
 80110f0:	b084      	sub	sp, #16
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	6078      	str	r0, [r7, #4]
 80110f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d101      	bne.n	8011106 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011102:	2302      	movs	r3, #2
 8011104:	e02d      	b.n	8011162 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2201      	movs	r2, #1
 801110a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2224      	movs	r2, #36	; 0x24
 8011112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	f022 0201 	bic.w	r2, r2, #1
 801112c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	689b      	ldr	r3, [r3, #8]
 8011134:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	430a      	orrs	r2, r1
 8011140:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f000 f812 	bl	801116c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	68fa      	ldr	r2, [r7, #12]
 801114e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2220      	movs	r2, #32
 8011154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2200      	movs	r2, #0
 801115c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011160:	2300      	movs	r3, #0
}
 8011162:	4618      	mov	r0, r3
 8011164:	3710      	adds	r7, #16
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
	...

0801116c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801116c:	b480      	push	{r7}
 801116e:	b085      	sub	sp, #20
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011178:	2b00      	cmp	r3, #0
 801117a:	d108      	bne.n	801118e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2201      	movs	r2, #1
 8011180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2201      	movs	r2, #1
 8011188:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801118c:	e031      	b.n	80111f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801118e:	2310      	movs	r3, #16
 8011190:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011192:	2310      	movs	r3, #16
 8011194:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	689b      	ldr	r3, [r3, #8]
 801119c:	0e5b      	lsrs	r3, r3, #25
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	f003 0307 	and.w	r3, r3, #7
 80111a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	689b      	ldr	r3, [r3, #8]
 80111ac:	0f5b      	lsrs	r3, r3, #29
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	f003 0307 	and.w	r3, r3, #7
 80111b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111b6:	7bbb      	ldrb	r3, [r7, #14]
 80111b8:	7b3a      	ldrb	r2, [r7, #12]
 80111ba:	4911      	ldr	r1, [pc, #68]	; (8011200 <UARTEx_SetNbDataToProcess+0x94>)
 80111bc:	5c8a      	ldrb	r2, [r1, r2]
 80111be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111c2:	7b3a      	ldrb	r2, [r7, #12]
 80111c4:	490f      	ldr	r1, [pc, #60]	; (8011204 <UARTEx_SetNbDataToProcess+0x98>)
 80111c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111d4:	7bfb      	ldrb	r3, [r7, #15]
 80111d6:	7b7a      	ldrb	r2, [r7, #13]
 80111d8:	4909      	ldr	r1, [pc, #36]	; (8011200 <UARTEx_SetNbDataToProcess+0x94>)
 80111da:	5c8a      	ldrb	r2, [r1, r2]
 80111dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80111e0:	7b7a      	ldrb	r2, [r7, #13]
 80111e2:	4908      	ldr	r1, [pc, #32]	; (8011204 <UARTEx_SetNbDataToProcess+0x98>)
 80111e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80111f2:	bf00      	nop
 80111f4:	3714      	adds	r7, #20
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	080247b8 	.word	0x080247b8
 8011204:	080247c0 	.word	0x080247c0

08011208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011208:	b084      	sub	sp, #16
 801120a:	b580      	push	{r7, lr}
 801120c:	b084      	sub	sp, #16
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
 8011212:	f107 001c 	add.w	r0, r7, #28
 8011216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121c:	2b01      	cmp	r3, #1
 801121e:	d120      	bne.n	8011262 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	68da      	ldr	r2, [r3, #12]
 8011230:	4b2a      	ldr	r3, [pc, #168]	; (80112dc <USB_CoreInit+0xd4>)
 8011232:	4013      	ands	r3, r2
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011246:	2b01      	cmp	r3, #1
 8011248:	d105      	bne.n	8011256 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	68db      	ldr	r3, [r3, #12]
 801124e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f001 fb14 	bl	8012884 <USB_CoreReset>
 801125c:	4603      	mov	r3, r0
 801125e:	73fb      	strb	r3, [r7, #15]
 8011260:	e01a      	b.n	8011298 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f001 fb08 	bl	8012884 <USB_CoreReset>
 8011274:	4603      	mov	r3, r0
 8011276:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801127a:	2b00      	cmp	r3, #0
 801127c:	d106      	bne.n	801128c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011282:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	639a      	str	r2, [r3, #56]	; 0x38
 801128a:	e005      	b.n	8011298 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011290:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129a:	2b01      	cmp	r3, #1
 801129c:	d116      	bne.n	80112cc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112a2:	b29a      	uxth	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80112ac:	4b0c      	ldr	r3, [pc, #48]	; (80112e0 <USB_CoreInit+0xd8>)
 80112ae:	4313      	orrs	r3, r2
 80112b0:	687a      	ldr	r2, [r7, #4]
 80112b2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	689b      	ldr	r3, [r3, #8]
 80112b8:	f043 0206 	orr.w	r2, r3, #6
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	f043 0220 	orr.w	r2, r3, #32
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80112cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3710      	adds	r7, #16
 80112d2:	46bd      	mov	sp, r7
 80112d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80112d8:	b004      	add	sp, #16
 80112da:	4770      	bx	lr
 80112dc:	ffbdffbf 	.word	0xffbdffbf
 80112e0:	03ee0000 	.word	0x03ee0000

080112e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80112e4:	b480      	push	{r7}
 80112e6:	b087      	sub	sp, #28
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	60f8      	str	r0, [r7, #12]
 80112ec:	60b9      	str	r1, [r7, #8]
 80112ee:	4613      	mov	r3, r2
 80112f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80112f2:	79fb      	ldrb	r3, [r7, #7]
 80112f4:	2b02      	cmp	r3, #2
 80112f6:	d165      	bne.n	80113c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	4a41      	ldr	r2, [pc, #260]	; (8011400 <USB_SetTurnaroundTime+0x11c>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d906      	bls.n	801130e <USB_SetTurnaroundTime+0x2a>
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	4a40      	ldr	r2, [pc, #256]	; (8011404 <USB_SetTurnaroundTime+0x120>)
 8011304:	4293      	cmp	r3, r2
 8011306:	d202      	bcs.n	801130e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011308:	230f      	movs	r3, #15
 801130a:	617b      	str	r3, [r7, #20]
 801130c:	e062      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	4a3c      	ldr	r2, [pc, #240]	; (8011404 <USB_SetTurnaroundTime+0x120>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d306      	bcc.n	8011324 <USB_SetTurnaroundTime+0x40>
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	4a3b      	ldr	r2, [pc, #236]	; (8011408 <USB_SetTurnaroundTime+0x124>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d202      	bcs.n	8011324 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801131e:	230e      	movs	r3, #14
 8011320:	617b      	str	r3, [r7, #20]
 8011322:	e057      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	4a38      	ldr	r2, [pc, #224]	; (8011408 <USB_SetTurnaroundTime+0x124>)
 8011328:	4293      	cmp	r3, r2
 801132a:	d306      	bcc.n	801133a <USB_SetTurnaroundTime+0x56>
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	4a37      	ldr	r2, [pc, #220]	; (801140c <USB_SetTurnaroundTime+0x128>)
 8011330:	4293      	cmp	r3, r2
 8011332:	d202      	bcs.n	801133a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011334:	230d      	movs	r3, #13
 8011336:	617b      	str	r3, [r7, #20]
 8011338:	e04c      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	4a33      	ldr	r2, [pc, #204]	; (801140c <USB_SetTurnaroundTime+0x128>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d306      	bcc.n	8011350 <USB_SetTurnaroundTime+0x6c>
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	4a32      	ldr	r2, [pc, #200]	; (8011410 <USB_SetTurnaroundTime+0x12c>)
 8011346:	4293      	cmp	r3, r2
 8011348:	d802      	bhi.n	8011350 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801134a:	230c      	movs	r3, #12
 801134c:	617b      	str	r3, [r7, #20]
 801134e:	e041      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	4a2f      	ldr	r2, [pc, #188]	; (8011410 <USB_SetTurnaroundTime+0x12c>)
 8011354:	4293      	cmp	r3, r2
 8011356:	d906      	bls.n	8011366 <USB_SetTurnaroundTime+0x82>
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	4a2e      	ldr	r2, [pc, #184]	; (8011414 <USB_SetTurnaroundTime+0x130>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d802      	bhi.n	8011366 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011360:	230b      	movs	r3, #11
 8011362:	617b      	str	r3, [r7, #20]
 8011364:	e036      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	4a2a      	ldr	r2, [pc, #168]	; (8011414 <USB_SetTurnaroundTime+0x130>)
 801136a:	4293      	cmp	r3, r2
 801136c:	d906      	bls.n	801137c <USB_SetTurnaroundTime+0x98>
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	4a29      	ldr	r2, [pc, #164]	; (8011418 <USB_SetTurnaroundTime+0x134>)
 8011372:	4293      	cmp	r3, r2
 8011374:	d802      	bhi.n	801137c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011376:	230a      	movs	r3, #10
 8011378:	617b      	str	r3, [r7, #20]
 801137a:	e02b      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	4a26      	ldr	r2, [pc, #152]	; (8011418 <USB_SetTurnaroundTime+0x134>)
 8011380:	4293      	cmp	r3, r2
 8011382:	d906      	bls.n	8011392 <USB_SetTurnaroundTime+0xae>
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	4a25      	ldr	r2, [pc, #148]	; (801141c <USB_SetTurnaroundTime+0x138>)
 8011388:	4293      	cmp	r3, r2
 801138a:	d202      	bcs.n	8011392 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801138c:	2309      	movs	r3, #9
 801138e:	617b      	str	r3, [r7, #20]
 8011390:	e020      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	4a21      	ldr	r2, [pc, #132]	; (801141c <USB_SetTurnaroundTime+0x138>)
 8011396:	4293      	cmp	r3, r2
 8011398:	d306      	bcc.n	80113a8 <USB_SetTurnaroundTime+0xc4>
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	4a20      	ldr	r2, [pc, #128]	; (8011420 <USB_SetTurnaroundTime+0x13c>)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d802      	bhi.n	80113a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80113a2:	2308      	movs	r3, #8
 80113a4:	617b      	str	r3, [r7, #20]
 80113a6:	e015      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	4a1d      	ldr	r2, [pc, #116]	; (8011420 <USB_SetTurnaroundTime+0x13c>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d906      	bls.n	80113be <USB_SetTurnaroundTime+0xda>
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	4a1c      	ldr	r2, [pc, #112]	; (8011424 <USB_SetTurnaroundTime+0x140>)
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d202      	bcs.n	80113be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80113b8:	2307      	movs	r3, #7
 80113ba:	617b      	str	r3, [r7, #20]
 80113bc:	e00a      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80113be:	2306      	movs	r3, #6
 80113c0:	617b      	str	r3, [r7, #20]
 80113c2:	e007      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80113c4:	79fb      	ldrb	r3, [r7, #7]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d102      	bne.n	80113d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80113ca:	2309      	movs	r3, #9
 80113cc:	617b      	str	r3, [r7, #20]
 80113ce:	e001      	b.n	80113d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80113d0:	2309      	movs	r3, #9
 80113d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	68da      	ldr	r2, [r3, #12]
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	029b      	lsls	r3, r3, #10
 80113e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80113ec:	431a      	orrs	r2, r3
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80113f2:	2300      	movs	r3, #0
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	371c      	adds	r7, #28
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr
 8011400:	00d8acbf 	.word	0x00d8acbf
 8011404:	00e4e1c0 	.word	0x00e4e1c0
 8011408:	00f42400 	.word	0x00f42400
 801140c:	01067380 	.word	0x01067380
 8011410:	011a499f 	.word	0x011a499f
 8011414:	01312cff 	.word	0x01312cff
 8011418:	014ca43f 	.word	0x014ca43f
 801141c:	016e3600 	.word	0x016e3600
 8011420:	01a6ab1f 	.word	0x01a6ab1f
 8011424:	01e84800 	.word	0x01e84800

08011428 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011428:	b480      	push	{r7}
 801142a:	b083      	sub	sp, #12
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	689b      	ldr	r3, [r3, #8]
 8011434:	f043 0201 	orr.w	r2, r3, #1
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	370c      	adds	r7, #12
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr

0801144a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801144a:	b480      	push	{r7}
 801144c:	b083      	sub	sp, #12
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	689b      	ldr	r3, [r3, #8]
 8011456:	f023 0201 	bic.w	r2, r3, #1
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801145e:	2300      	movs	r3, #0
}
 8011460:	4618      	mov	r0, r3
 8011462:	370c      	adds	r7, #12
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr

0801146c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	460b      	mov	r3, r1
 8011476:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011484:	78fb      	ldrb	r3, [r7, #3]
 8011486:	2b01      	cmp	r3, #1
 8011488:	d106      	bne.n	8011498 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	68db      	ldr	r3, [r3, #12]
 801148e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	60da      	str	r2, [r3, #12]
 8011496:	e00b      	b.n	80114b0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011498:	78fb      	ldrb	r3, [r7, #3]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d106      	bne.n	80114ac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	60da      	str	r2, [r3, #12]
 80114aa:	e001      	b.n	80114b0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80114ac:	2301      	movs	r3, #1
 80114ae:	e003      	b.n	80114b8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80114b0:	2032      	movs	r0, #50	; 0x32
 80114b2:	f7f4 f8d1 	bl	8005658 <HAL_Delay>

  return HAL_OK;
 80114b6:	2300      	movs	r3, #0
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3708      	adds	r7, #8
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}

080114c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80114c0:	b084      	sub	sp, #16
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b086      	sub	sp, #24
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
 80114ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80114ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80114d2:	2300      	movs	r3, #0
 80114d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80114da:	2300      	movs	r3, #0
 80114dc:	613b      	str	r3, [r7, #16]
 80114de:	e009      	b.n	80114f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	3340      	adds	r3, #64	; 0x40
 80114e6:	009b      	lsls	r3, r3, #2
 80114e8:	4413      	add	r3, r2
 80114ea:	2200      	movs	r2, #0
 80114ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	3301      	adds	r3, #1
 80114f2:	613b      	str	r3, [r7, #16]
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	2b0e      	cmp	r3, #14
 80114f8:	d9f2      	bls.n	80114e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80114fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d11c      	bne.n	801153a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	68fa      	ldr	r2, [r7, #12]
 801150a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801150e:	f043 0302 	orr.w	r3, r3, #2
 8011512:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011518:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	601a      	str	r2, [r3, #0]
 8011538:	e005      	b.n	8011546 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801153e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801154c:	461a      	mov	r2, r3
 801154e:	2300      	movs	r3, #0
 8011550:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011558:	4619      	mov	r1, r3
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011560:	461a      	mov	r2, r3
 8011562:	680b      	ldr	r3, [r1, #0]
 8011564:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011568:	2b01      	cmp	r3, #1
 801156a:	d10c      	bne.n	8011586 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156e:	2b00      	cmp	r3, #0
 8011570:	d104      	bne.n	801157c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011572:	2100      	movs	r1, #0
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f000 f949 	bl	801180c <USB_SetDevSpeed>
 801157a:	e008      	b.n	801158e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801157c:	2101      	movs	r1, #1
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f000 f944 	bl	801180c <USB_SetDevSpeed>
 8011584:	e003      	b.n	801158e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011586:	2103      	movs	r1, #3
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f000 f93f 	bl	801180c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801158e:	2110      	movs	r1, #16
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f000 f8f3 	bl	801177c <USB_FlushTxFifo>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d001      	beq.n	80115a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801159c:	2301      	movs	r3, #1
 801159e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f000 f911 	bl	80117c8 <USB_FlushRxFifo>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d001      	beq.n	80115b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80115ac:	2301      	movs	r3, #1
 80115ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115b6:	461a      	mov	r2, r3
 80115b8:	2300      	movs	r3, #0
 80115ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115c2:	461a      	mov	r2, r3
 80115c4:	2300      	movs	r3, #0
 80115c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115ce:	461a      	mov	r2, r3
 80115d0:	2300      	movs	r3, #0
 80115d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80115d4:	2300      	movs	r3, #0
 80115d6:	613b      	str	r3, [r7, #16]
 80115d8:	e043      	b.n	8011662 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	015a      	lsls	r2, r3, #5
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	4413      	add	r3, r2
 80115e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80115ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80115f0:	d118      	bne.n	8011624 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d10a      	bne.n	801160e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	015a      	lsls	r2, r3, #5
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	4413      	add	r3, r2
 8011600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011604:	461a      	mov	r2, r3
 8011606:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801160a:	6013      	str	r3, [r2, #0]
 801160c:	e013      	b.n	8011636 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	015a      	lsls	r2, r3, #5
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	4413      	add	r3, r2
 8011616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801161a:	461a      	mov	r2, r3
 801161c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011620:	6013      	str	r3, [r2, #0]
 8011622:	e008      	b.n	8011636 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	015a      	lsls	r2, r3, #5
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	4413      	add	r3, r2
 801162c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011630:	461a      	mov	r2, r3
 8011632:	2300      	movs	r3, #0
 8011634:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	015a      	lsls	r2, r3, #5
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	4413      	add	r3, r2
 801163e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011642:	461a      	mov	r2, r3
 8011644:	2300      	movs	r3, #0
 8011646:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	015a      	lsls	r2, r3, #5
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	4413      	add	r3, r2
 8011650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011654:	461a      	mov	r2, r3
 8011656:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801165a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	3301      	adds	r3, #1
 8011660:	613b      	str	r3, [r7, #16]
 8011662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011664:	693a      	ldr	r2, [r7, #16]
 8011666:	429a      	cmp	r2, r3
 8011668:	d3b7      	bcc.n	80115da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801166a:	2300      	movs	r3, #0
 801166c:	613b      	str	r3, [r7, #16]
 801166e:	e043      	b.n	80116f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	015a      	lsls	r2, r3, #5
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	4413      	add	r3, r2
 8011678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011686:	d118      	bne.n	80116ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d10a      	bne.n	80116a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	015a      	lsls	r2, r3, #5
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	4413      	add	r3, r2
 8011696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801169a:	461a      	mov	r2, r3
 801169c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80116a0:	6013      	str	r3, [r2, #0]
 80116a2:	e013      	b.n	80116cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	015a      	lsls	r2, r3, #5
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	4413      	add	r3, r2
 80116ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116b0:	461a      	mov	r2, r3
 80116b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80116b6:	6013      	str	r3, [r2, #0]
 80116b8:	e008      	b.n	80116cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	015a      	lsls	r2, r3, #5
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	4413      	add	r3, r2
 80116c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116c6:	461a      	mov	r2, r3
 80116c8:	2300      	movs	r3, #0
 80116ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	015a      	lsls	r2, r3, #5
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	4413      	add	r3, r2
 80116d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116d8:	461a      	mov	r2, r3
 80116da:	2300      	movs	r3, #0
 80116dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	015a      	lsls	r2, r3, #5
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	4413      	add	r3, r2
 80116e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116ea:	461a      	mov	r2, r3
 80116ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80116f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	3301      	adds	r3, #1
 80116f6:	613b      	str	r3, [r7, #16]
 80116f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fa:	693a      	ldr	r2, [r7, #16]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d3b7      	bcc.n	8011670 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011706:	691b      	ldr	r3, [r3, #16]
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801170e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011712:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011720:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011724:	2b00      	cmp	r3, #0
 8011726:	d105      	bne.n	8011734 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	699b      	ldr	r3, [r3, #24]
 801172c:	f043 0210 	orr.w	r2, r3, #16
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	699a      	ldr	r2, [r3, #24]
 8011738:	4b0e      	ldr	r3, [pc, #56]	; (8011774 <USB_DevInit+0x2b4>)
 801173a:	4313      	orrs	r3, r2
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011742:	2b00      	cmp	r3, #0
 8011744:	d005      	beq.n	8011752 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	699b      	ldr	r3, [r3, #24]
 801174a:	f043 0208 	orr.w	r2, r3, #8
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011754:	2b01      	cmp	r3, #1
 8011756:	d105      	bne.n	8011764 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	699a      	ldr	r2, [r3, #24]
 801175c:	4b06      	ldr	r3, [pc, #24]	; (8011778 <USB_DevInit+0x2b8>)
 801175e:	4313      	orrs	r3, r2
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011764:	7dfb      	ldrb	r3, [r7, #23]
}
 8011766:	4618      	mov	r0, r3
 8011768:	3718      	adds	r7, #24
 801176a:	46bd      	mov	sp, r7
 801176c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011770:	b004      	add	sp, #16
 8011772:	4770      	bx	lr
 8011774:	803c3800 	.word	0x803c3800
 8011778:	40000004 	.word	0x40000004

0801177c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801177c:	b480      	push	{r7}
 801177e:	b085      	sub	sp, #20
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011786:	2300      	movs	r3, #0
 8011788:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	019b      	lsls	r3, r3, #6
 801178e:	f043 0220 	orr.w	r2, r3, #32
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	3301      	adds	r3, #1
 801179a:	60fb      	str	r3, [r7, #12]
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	4a09      	ldr	r2, [pc, #36]	; (80117c4 <USB_FlushTxFifo+0x48>)
 80117a0:	4293      	cmp	r3, r2
 80117a2:	d901      	bls.n	80117a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80117a4:	2303      	movs	r3, #3
 80117a6:	e006      	b.n	80117b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	691b      	ldr	r3, [r3, #16]
 80117ac:	f003 0320 	and.w	r3, r3, #32
 80117b0:	2b20      	cmp	r3, #32
 80117b2:	d0f0      	beq.n	8011796 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80117b4:	2300      	movs	r3, #0
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3714      	adds	r7, #20
 80117ba:	46bd      	mov	sp, r7
 80117bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c0:	4770      	bx	lr
 80117c2:	bf00      	nop
 80117c4:	00030d40 	.word	0x00030d40

080117c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b085      	sub	sp, #20
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80117d0:	2300      	movs	r3, #0
 80117d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2210      	movs	r2, #16
 80117d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	3301      	adds	r3, #1
 80117de:	60fb      	str	r3, [r7, #12]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	4a09      	ldr	r2, [pc, #36]	; (8011808 <USB_FlushRxFifo+0x40>)
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d901      	bls.n	80117ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80117e8:	2303      	movs	r3, #3
 80117ea:	e006      	b.n	80117fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	691b      	ldr	r3, [r3, #16]
 80117f0:	f003 0310 	and.w	r3, r3, #16
 80117f4:	2b10      	cmp	r3, #16
 80117f6:	d0f0      	beq.n	80117da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80117f8:	2300      	movs	r3, #0
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3714      	adds	r7, #20
 80117fe:	46bd      	mov	sp, r7
 8011800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011804:	4770      	bx	lr
 8011806:	bf00      	nop
 8011808:	00030d40 	.word	0x00030d40

0801180c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801180c:	b480      	push	{r7}
 801180e:	b085      	sub	sp, #20
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	460b      	mov	r3, r1
 8011816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	78fb      	ldrb	r3, [r7, #3]
 8011826:	68f9      	ldr	r1, [r7, #12]
 8011828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801182c:	4313      	orrs	r3, r2
 801182e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011830:	2300      	movs	r3, #0
}
 8011832:	4618      	mov	r0, r3
 8011834:	3714      	adds	r7, #20
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr

0801183e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801183e:	b480      	push	{r7}
 8011840:	b087      	sub	sp, #28
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011850:	689b      	ldr	r3, [r3, #8]
 8011852:	f003 0306 	and.w	r3, r3, #6
 8011856:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d102      	bne.n	8011864 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801185e:	2300      	movs	r3, #0
 8011860:	75fb      	strb	r3, [r7, #23]
 8011862:	e00a      	b.n	801187a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b02      	cmp	r3, #2
 8011868:	d002      	beq.n	8011870 <USB_GetDevSpeed+0x32>
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2b06      	cmp	r3, #6
 801186e:	d102      	bne.n	8011876 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011870:	2302      	movs	r3, #2
 8011872:	75fb      	strb	r3, [r7, #23]
 8011874:	e001      	b.n	801187a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011876:	230f      	movs	r3, #15
 8011878:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801187a:	7dfb      	ldrb	r3, [r7, #23]
}
 801187c:	4618      	mov	r0, r3
 801187e:	371c      	adds	r7, #28
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr

08011888 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011888:	b480      	push	{r7}
 801188a:	b085      	sub	sp, #20
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	785b      	ldrb	r3, [r3, #1]
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d139      	bne.n	8011918 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118aa:	69da      	ldr	r2, [r3, #28]
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	f003 030f 	and.w	r3, r3, #15
 80118b4:	2101      	movs	r1, #1
 80118b6:	fa01 f303 	lsl.w	r3, r1, r3
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	68f9      	ldr	r1, [r7, #12]
 80118be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80118c2:	4313      	orrs	r3, r2
 80118c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	015a      	lsls	r2, r3, #5
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	4413      	add	r3, r2
 80118ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d153      	bne.n	8011984 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	015a      	lsls	r2, r3, #5
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	4413      	add	r3, r2
 80118e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118e8:	681a      	ldr	r2, [r3, #0]
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	689b      	ldr	r3, [r3, #8]
 80118ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	78db      	ldrb	r3, [r3, #3]
 80118f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80118f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	059b      	lsls	r3, r3, #22
 80118fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011900:	431a      	orrs	r2, r3
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	0159      	lsls	r1, r3, #5
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	440b      	add	r3, r1
 801190a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801190e:	4619      	mov	r1, r3
 8011910:	4b20      	ldr	r3, [pc, #128]	; (8011994 <USB_ActivateEndpoint+0x10c>)
 8011912:	4313      	orrs	r3, r2
 8011914:	600b      	str	r3, [r1, #0]
 8011916:	e035      	b.n	8011984 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801191e:	69da      	ldr	r2, [r3, #28]
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	f003 030f 	and.w	r3, r3, #15
 8011928:	2101      	movs	r1, #1
 801192a:	fa01 f303 	lsl.w	r3, r1, r3
 801192e:	041b      	lsls	r3, r3, #16
 8011930:	68f9      	ldr	r1, [r7, #12]
 8011932:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011936:	4313      	orrs	r3, r2
 8011938:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	015a      	lsls	r2, r3, #5
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	4413      	add	r3, r2
 8011942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801194c:	2b00      	cmp	r3, #0
 801194e:	d119      	bne.n	8011984 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	015a      	lsls	r2, r3, #5
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	4413      	add	r3, r2
 8011958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801195c:	681a      	ldr	r2, [r3, #0]
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	689b      	ldr	r3, [r3, #8]
 8011962:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	78db      	ldrb	r3, [r3, #3]
 801196a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801196c:	430b      	orrs	r3, r1
 801196e:	431a      	orrs	r2, r3
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	0159      	lsls	r1, r3, #5
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	440b      	add	r3, r1
 8011978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801197c:	4619      	mov	r1, r3
 801197e:	4b05      	ldr	r3, [pc, #20]	; (8011994 <USB_ActivateEndpoint+0x10c>)
 8011980:	4313      	orrs	r3, r2
 8011982:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011984:	2300      	movs	r3, #0
}
 8011986:	4618      	mov	r0, r3
 8011988:	3714      	adds	r7, #20
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr
 8011992:	bf00      	nop
 8011994:	10008000 	.word	0x10008000

08011998 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011998:	b480      	push	{r7}
 801199a:	b085      	sub	sp, #20
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	785b      	ldrb	r3, [r3, #1]
 80119b0:	2b01      	cmp	r3, #1
 80119b2:	d161      	bne.n	8011a78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	015a      	lsls	r2, r3, #5
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	4413      	add	r3, r2
 80119bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80119c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80119ca:	d11f      	bne.n	8011a0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	015a      	lsls	r2, r3, #5
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	4413      	add	r3, r2
 80119d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	68ba      	ldr	r2, [r7, #8]
 80119dc:	0151      	lsls	r1, r2, #5
 80119de:	68fa      	ldr	r2, [r7, #12]
 80119e0:	440a      	add	r2, r1
 80119e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80119e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80119ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	015a      	lsls	r2, r3, #5
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	4413      	add	r3, r2
 80119f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	68ba      	ldr	r2, [r7, #8]
 80119fc:	0151      	lsls	r1, r2, #5
 80119fe:	68fa      	ldr	r2, [r7, #12]
 8011a00:	440a      	add	r2, r1
 8011a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011a0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	f003 030f 	and.w	r3, r3, #15
 8011a1c:	2101      	movs	r1, #1
 8011a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8011a22:	b29b      	uxth	r3, r3
 8011a24:	43db      	mvns	r3, r3
 8011a26:	68f9      	ldr	r1, [r7, #12]
 8011a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a2c:	4013      	ands	r3, r2
 8011a2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a36:	69da      	ldr	r2, [r3, #28]
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	f003 030f 	and.w	r3, r3, #15
 8011a40:	2101      	movs	r1, #1
 8011a42:	fa01 f303 	lsl.w	r3, r1, r3
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	43db      	mvns	r3, r3
 8011a4a:	68f9      	ldr	r1, [r7, #12]
 8011a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a50:	4013      	ands	r3, r2
 8011a52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	015a      	lsls	r2, r3, #5
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	4413      	add	r3, r2
 8011a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a60:	681a      	ldr	r2, [r3, #0]
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	0159      	lsls	r1, r3, #5
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	440b      	add	r3, r1
 8011a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a6e:	4619      	mov	r1, r3
 8011a70:	4b35      	ldr	r3, [pc, #212]	; (8011b48 <USB_DeactivateEndpoint+0x1b0>)
 8011a72:	4013      	ands	r3, r2
 8011a74:	600b      	str	r3, [r1, #0]
 8011a76:	e060      	b.n	8011b3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	015a      	lsls	r2, r3, #5
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	4413      	add	r3, r2
 8011a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011a8e:	d11f      	bne.n	8011ad0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	015a      	lsls	r2, r3, #5
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	4413      	add	r3, r2
 8011a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	68ba      	ldr	r2, [r7, #8]
 8011aa0:	0151      	lsls	r1, r2, #5
 8011aa2:	68fa      	ldr	r2, [r7, #12]
 8011aa4:	440a      	add	r2, r1
 8011aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011aaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011aae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	015a      	lsls	r2, r3, #5
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	4413      	add	r3, r2
 8011ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	68ba      	ldr	r2, [r7, #8]
 8011ac0:	0151      	lsls	r1, r2, #5
 8011ac2:	68fa      	ldr	r2, [r7, #12]
 8011ac4:	440a      	add	r2, r1
 8011ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011aca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ace:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	f003 030f 	and.w	r3, r3, #15
 8011ae0:	2101      	movs	r1, #1
 8011ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8011ae6:	041b      	lsls	r3, r3, #16
 8011ae8:	43db      	mvns	r3, r3
 8011aea:	68f9      	ldr	r1, [r7, #12]
 8011aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011af0:	4013      	ands	r3, r2
 8011af2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011afa:	69da      	ldr	r2, [r3, #28]
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	f003 030f 	and.w	r3, r3, #15
 8011b04:	2101      	movs	r1, #1
 8011b06:	fa01 f303 	lsl.w	r3, r1, r3
 8011b0a:	041b      	lsls	r3, r3, #16
 8011b0c:	43db      	mvns	r3, r3
 8011b0e:	68f9      	ldr	r1, [r7, #12]
 8011b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b14:	4013      	ands	r3, r2
 8011b16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	015a      	lsls	r2, r3, #5
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	4413      	add	r3, r2
 8011b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	0159      	lsls	r1, r3, #5
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	440b      	add	r3, r1
 8011b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b32:	4619      	mov	r1, r3
 8011b34:	4b05      	ldr	r3, [pc, #20]	; (8011b4c <USB_DeactivateEndpoint+0x1b4>)
 8011b36:	4013      	ands	r3, r2
 8011b38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011b3a:	2300      	movs	r3, #0
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3714      	adds	r7, #20
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr
 8011b48:	ec337800 	.word	0xec337800
 8011b4c:	eff37800 	.word	0xeff37800

08011b50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b08a      	sub	sp, #40	; 0x28
 8011b54:	af02      	add	r7, sp, #8
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	4613      	mov	r3, r2
 8011b5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	785b      	ldrb	r3, [r3, #1]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	f040 8163 	bne.w	8011e38 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	695b      	ldr	r3, [r3, #20]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d132      	bne.n	8011be0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011b7a:	69bb      	ldr	r3, [r7, #24]
 8011b7c:	015a      	lsls	r2, r3, #5
 8011b7e:	69fb      	ldr	r3, [r7, #28]
 8011b80:	4413      	add	r3, r2
 8011b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b86:	691a      	ldr	r2, [r3, #16]
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	0159      	lsls	r1, r3, #5
 8011b8c:	69fb      	ldr	r3, [r7, #28]
 8011b8e:	440b      	add	r3, r1
 8011b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b94:	4619      	mov	r1, r3
 8011b96:	4ba5      	ldr	r3, [pc, #660]	; (8011e2c <USB_EPStartXfer+0x2dc>)
 8011b98:	4013      	ands	r3, r2
 8011b9a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011b9c:	69bb      	ldr	r3, [r7, #24]
 8011b9e:	015a      	lsls	r2, r3, #5
 8011ba0:	69fb      	ldr	r3, [r7, #28]
 8011ba2:	4413      	add	r3, r2
 8011ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ba8:	691b      	ldr	r3, [r3, #16]
 8011baa:	69ba      	ldr	r2, [r7, #24]
 8011bac:	0151      	lsls	r1, r2, #5
 8011bae:	69fa      	ldr	r2, [r7, #28]
 8011bb0:	440a      	add	r2, r1
 8011bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011bb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011bba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011bbc:	69bb      	ldr	r3, [r7, #24]
 8011bbe:	015a      	lsls	r2, r3, #5
 8011bc0:	69fb      	ldr	r3, [r7, #28]
 8011bc2:	4413      	add	r3, r2
 8011bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bc8:	691a      	ldr	r2, [r3, #16]
 8011bca:	69bb      	ldr	r3, [r7, #24]
 8011bcc:	0159      	lsls	r1, r3, #5
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	440b      	add	r3, r1
 8011bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	4b95      	ldr	r3, [pc, #596]	; (8011e30 <USB_EPStartXfer+0x2e0>)
 8011bda:	4013      	ands	r3, r2
 8011bdc:	610b      	str	r3, [r1, #16]
 8011bde:	e074      	b.n	8011cca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011be0:	69bb      	ldr	r3, [r7, #24]
 8011be2:	015a      	lsls	r2, r3, #5
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	4413      	add	r3, r2
 8011be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bec:	691a      	ldr	r2, [r3, #16]
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	0159      	lsls	r1, r3, #5
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	440b      	add	r3, r1
 8011bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	4b8c      	ldr	r3, [pc, #560]	; (8011e30 <USB_EPStartXfer+0x2e0>)
 8011bfe:	4013      	ands	r3, r2
 8011c00:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011c02:	69bb      	ldr	r3, [r7, #24]
 8011c04:	015a      	lsls	r2, r3, #5
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	4413      	add	r3, r2
 8011c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c0e:	691a      	ldr	r2, [r3, #16]
 8011c10:	69bb      	ldr	r3, [r7, #24]
 8011c12:	0159      	lsls	r1, r3, #5
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	440b      	add	r3, r1
 8011c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	4b83      	ldr	r3, [pc, #524]	; (8011e2c <USB_EPStartXfer+0x2dc>)
 8011c20:	4013      	ands	r3, r2
 8011c22:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011c24:	69bb      	ldr	r3, [r7, #24]
 8011c26:	015a      	lsls	r2, r3, #5
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	4413      	add	r3, r2
 8011c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c30:	691a      	ldr	r2, [r3, #16]
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	6959      	ldr	r1, [r3, #20]
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	689b      	ldr	r3, [r3, #8]
 8011c3a:	440b      	add	r3, r1
 8011c3c:	1e59      	subs	r1, r3, #1
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	689b      	ldr	r3, [r3, #8]
 8011c42:	fbb1 f3f3 	udiv	r3, r1, r3
 8011c46:	04d9      	lsls	r1, r3, #19
 8011c48:	4b7a      	ldr	r3, [pc, #488]	; (8011e34 <USB_EPStartXfer+0x2e4>)
 8011c4a:	400b      	ands	r3, r1
 8011c4c:	69b9      	ldr	r1, [r7, #24]
 8011c4e:	0148      	lsls	r0, r1, #5
 8011c50:	69f9      	ldr	r1, [r7, #28]
 8011c52:	4401      	add	r1, r0
 8011c54:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011c58:	4313      	orrs	r3, r2
 8011c5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011c5c:	69bb      	ldr	r3, [r7, #24]
 8011c5e:	015a      	lsls	r2, r3, #5
 8011c60:	69fb      	ldr	r3, [r7, #28]
 8011c62:	4413      	add	r3, r2
 8011c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c68:	691a      	ldr	r2, [r3, #16]
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	695b      	ldr	r3, [r3, #20]
 8011c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011c72:	69b9      	ldr	r1, [r7, #24]
 8011c74:	0148      	lsls	r0, r1, #5
 8011c76:	69f9      	ldr	r1, [r7, #28]
 8011c78:	4401      	add	r1, r0
 8011c7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	78db      	ldrb	r3, [r3, #3]
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d11f      	bne.n	8011cca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	015a      	lsls	r2, r3, #5
 8011c8e:	69fb      	ldr	r3, [r7, #28]
 8011c90:	4413      	add	r3, r2
 8011c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c96:	691b      	ldr	r3, [r3, #16]
 8011c98:	69ba      	ldr	r2, [r7, #24]
 8011c9a:	0151      	lsls	r1, r2, #5
 8011c9c:	69fa      	ldr	r2, [r7, #28]
 8011c9e:	440a      	add	r2, r1
 8011ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ca4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011ca8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011caa:	69bb      	ldr	r3, [r7, #24]
 8011cac:	015a      	lsls	r2, r3, #5
 8011cae:	69fb      	ldr	r3, [r7, #28]
 8011cb0:	4413      	add	r3, r2
 8011cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cb6:	691b      	ldr	r3, [r3, #16]
 8011cb8:	69ba      	ldr	r2, [r7, #24]
 8011cba:	0151      	lsls	r1, r2, #5
 8011cbc:	69fa      	ldr	r2, [r7, #28]
 8011cbe:	440a      	add	r2, r1
 8011cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011cc8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011cca:	79fb      	ldrb	r3, [r7, #7]
 8011ccc:	2b01      	cmp	r3, #1
 8011cce:	d14b      	bne.n	8011d68 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	691b      	ldr	r3, [r3, #16]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d009      	beq.n	8011cec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011cd8:	69bb      	ldr	r3, [r7, #24]
 8011cda:	015a      	lsls	r2, r3, #5
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	4413      	add	r3, r2
 8011ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	691b      	ldr	r3, [r3, #16]
 8011cea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	78db      	ldrb	r3, [r3, #3]
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	d128      	bne.n	8011d46 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011cf4:	69fb      	ldr	r3, [r7, #28]
 8011cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cfa:	689b      	ldr	r3, [r3, #8]
 8011cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d110      	bne.n	8011d26 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011d04:	69bb      	ldr	r3, [r7, #24]
 8011d06:	015a      	lsls	r2, r3, #5
 8011d08:	69fb      	ldr	r3, [r7, #28]
 8011d0a:	4413      	add	r3, r2
 8011d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	69ba      	ldr	r2, [r7, #24]
 8011d14:	0151      	lsls	r1, r2, #5
 8011d16:	69fa      	ldr	r2, [r7, #28]
 8011d18:	440a      	add	r2, r1
 8011d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011d22:	6013      	str	r3, [r2, #0]
 8011d24:	e00f      	b.n	8011d46 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011d26:	69bb      	ldr	r3, [r7, #24]
 8011d28:	015a      	lsls	r2, r3, #5
 8011d2a:	69fb      	ldr	r3, [r7, #28]
 8011d2c:	4413      	add	r3, r2
 8011d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	69ba      	ldr	r2, [r7, #24]
 8011d36:	0151      	lsls	r1, r2, #5
 8011d38:	69fa      	ldr	r2, [r7, #28]
 8011d3a:	440a      	add	r2, r1
 8011d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d44:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011d46:	69bb      	ldr	r3, [r7, #24]
 8011d48:	015a      	lsls	r2, r3, #5
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	69ba      	ldr	r2, [r7, #24]
 8011d56:	0151      	lsls	r1, r2, #5
 8011d58:	69fa      	ldr	r2, [r7, #28]
 8011d5a:	440a      	add	r2, r1
 8011d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011d64:	6013      	str	r3, [r2, #0]
 8011d66:	e133      	b.n	8011fd0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	015a      	lsls	r2, r3, #5
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	4413      	add	r3, r2
 8011d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	69ba      	ldr	r2, [r7, #24]
 8011d78:	0151      	lsls	r1, r2, #5
 8011d7a:	69fa      	ldr	r2, [r7, #28]
 8011d7c:	440a      	add	r2, r1
 8011d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011d86:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	78db      	ldrb	r3, [r3, #3]
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	d015      	beq.n	8011dbc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	695b      	ldr	r3, [r3, #20]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	f000 811b 	beq.w	8011fd0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	f003 030f 	and.w	r3, r3, #15
 8011daa:	2101      	movs	r1, #1
 8011dac:	fa01 f303 	lsl.w	r3, r1, r3
 8011db0:	69f9      	ldr	r1, [r7, #28]
 8011db2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011db6:	4313      	orrs	r3, r2
 8011db8:	634b      	str	r3, [r1, #52]	; 0x34
 8011dba:	e109      	b.n	8011fd0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011dbc:	69fb      	ldr	r3, [r7, #28]
 8011dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dc2:	689b      	ldr	r3, [r3, #8]
 8011dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d110      	bne.n	8011dee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011dcc:	69bb      	ldr	r3, [r7, #24]
 8011dce:	015a      	lsls	r2, r3, #5
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	4413      	add	r3, r2
 8011dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	69ba      	ldr	r2, [r7, #24]
 8011ddc:	0151      	lsls	r1, r2, #5
 8011dde:	69fa      	ldr	r2, [r7, #28]
 8011de0:	440a      	add	r2, r1
 8011de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011de6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011dea:	6013      	str	r3, [r2, #0]
 8011dec:	e00f      	b.n	8011e0e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011dee:	69bb      	ldr	r3, [r7, #24]
 8011df0:	015a      	lsls	r2, r3, #5
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	4413      	add	r3, r2
 8011df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	69ba      	ldr	r2, [r7, #24]
 8011dfe:	0151      	lsls	r1, r2, #5
 8011e00:	69fa      	ldr	r2, [r7, #28]
 8011e02:	440a      	add	r2, r1
 8011e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e0c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	68d9      	ldr	r1, [r3, #12]
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	781a      	ldrb	r2, [r3, #0]
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	695b      	ldr	r3, [r3, #20]
 8011e1a:	b298      	uxth	r0, r3
 8011e1c:	79fb      	ldrb	r3, [r7, #7]
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	4603      	mov	r3, r0
 8011e22:	68f8      	ldr	r0, [r7, #12]
 8011e24:	f000 fa38 	bl	8012298 <USB_WritePacket>
 8011e28:	e0d2      	b.n	8011fd0 <USB_EPStartXfer+0x480>
 8011e2a:	bf00      	nop
 8011e2c:	e007ffff 	.word	0xe007ffff
 8011e30:	fff80000 	.word	0xfff80000
 8011e34:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011e38:	69bb      	ldr	r3, [r7, #24]
 8011e3a:	015a      	lsls	r2, r3, #5
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	4413      	add	r3, r2
 8011e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e44:	691a      	ldr	r2, [r3, #16]
 8011e46:	69bb      	ldr	r3, [r7, #24]
 8011e48:	0159      	lsls	r1, r3, #5
 8011e4a:	69fb      	ldr	r3, [r7, #28]
 8011e4c:	440b      	add	r3, r1
 8011e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e52:	4619      	mov	r1, r3
 8011e54:	4b61      	ldr	r3, [pc, #388]	; (8011fdc <USB_EPStartXfer+0x48c>)
 8011e56:	4013      	ands	r3, r2
 8011e58:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	015a      	lsls	r2, r3, #5
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	4413      	add	r3, r2
 8011e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e66:	691a      	ldr	r2, [r3, #16]
 8011e68:	69bb      	ldr	r3, [r7, #24]
 8011e6a:	0159      	lsls	r1, r3, #5
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	440b      	add	r3, r1
 8011e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e74:	4619      	mov	r1, r3
 8011e76:	4b5a      	ldr	r3, [pc, #360]	; (8011fe0 <USB_EPStartXfer+0x490>)
 8011e78:	4013      	ands	r3, r2
 8011e7a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	695b      	ldr	r3, [r3, #20]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d123      	bne.n	8011ecc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011e84:	69bb      	ldr	r3, [r7, #24]
 8011e86:	015a      	lsls	r2, r3, #5
 8011e88:	69fb      	ldr	r3, [r7, #28]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e90:	691a      	ldr	r2, [r3, #16]
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	689b      	ldr	r3, [r3, #8]
 8011e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e9a:	69b9      	ldr	r1, [r7, #24]
 8011e9c:	0148      	lsls	r0, r1, #5
 8011e9e:	69f9      	ldr	r1, [r7, #28]
 8011ea0:	4401      	add	r1, r0
 8011ea2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011ea6:	4313      	orrs	r3, r2
 8011ea8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011eaa:	69bb      	ldr	r3, [r7, #24]
 8011eac:	015a      	lsls	r2, r3, #5
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	4413      	add	r3, r2
 8011eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eb6:	691b      	ldr	r3, [r3, #16]
 8011eb8:	69ba      	ldr	r2, [r7, #24]
 8011eba:	0151      	lsls	r1, r2, #5
 8011ebc:	69fa      	ldr	r2, [r7, #28]
 8011ebe:	440a      	add	r2, r1
 8011ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011ec8:	6113      	str	r3, [r2, #16]
 8011eca:	e033      	b.n	8011f34 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	695a      	ldr	r2, [r3, #20]
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	689b      	ldr	r3, [r3, #8]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	1e5a      	subs	r2, r3, #1
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	689b      	ldr	r3, [r3, #8]
 8011edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ee0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011ee2:	69bb      	ldr	r3, [r7, #24]
 8011ee4:	015a      	lsls	r2, r3, #5
 8011ee6:	69fb      	ldr	r3, [r7, #28]
 8011ee8:	4413      	add	r3, r2
 8011eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eee:	691a      	ldr	r2, [r3, #16]
 8011ef0:	8afb      	ldrh	r3, [r7, #22]
 8011ef2:	04d9      	lsls	r1, r3, #19
 8011ef4:	4b3b      	ldr	r3, [pc, #236]	; (8011fe4 <USB_EPStartXfer+0x494>)
 8011ef6:	400b      	ands	r3, r1
 8011ef8:	69b9      	ldr	r1, [r7, #24]
 8011efa:	0148      	lsls	r0, r1, #5
 8011efc:	69f9      	ldr	r1, [r7, #28]
 8011efe:	4401      	add	r1, r0
 8011f00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011f04:	4313      	orrs	r3, r2
 8011f06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	015a      	lsls	r2, r3, #5
 8011f0c:	69fb      	ldr	r3, [r7, #28]
 8011f0e:	4413      	add	r3, r2
 8011f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f14:	691a      	ldr	r2, [r3, #16]
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	689b      	ldr	r3, [r3, #8]
 8011f1a:	8af9      	ldrh	r1, [r7, #22]
 8011f1c:	fb01 f303 	mul.w	r3, r1, r3
 8011f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f24:	69b9      	ldr	r1, [r7, #24]
 8011f26:	0148      	lsls	r0, r1, #5
 8011f28:	69f9      	ldr	r1, [r7, #28]
 8011f2a:	4401      	add	r1, r0
 8011f2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011f30:	4313      	orrs	r3, r2
 8011f32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011f34:	79fb      	ldrb	r3, [r7, #7]
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d10d      	bne.n	8011f56 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d009      	beq.n	8011f56 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	68d9      	ldr	r1, [r3, #12]
 8011f46:	69bb      	ldr	r3, [r7, #24]
 8011f48:	015a      	lsls	r2, r3, #5
 8011f4a:	69fb      	ldr	r3, [r7, #28]
 8011f4c:	4413      	add	r3, r2
 8011f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f52:	460a      	mov	r2, r1
 8011f54:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	78db      	ldrb	r3, [r3, #3]
 8011f5a:	2b01      	cmp	r3, #1
 8011f5c:	d128      	bne.n	8011fb0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011f5e:	69fb      	ldr	r3, [r7, #28]
 8011f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f64:	689b      	ldr	r3, [r3, #8]
 8011f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d110      	bne.n	8011f90 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011f6e:	69bb      	ldr	r3, [r7, #24]
 8011f70:	015a      	lsls	r2, r3, #5
 8011f72:	69fb      	ldr	r3, [r7, #28]
 8011f74:	4413      	add	r3, r2
 8011f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	69ba      	ldr	r2, [r7, #24]
 8011f7e:	0151      	lsls	r1, r2, #5
 8011f80:	69fa      	ldr	r2, [r7, #28]
 8011f82:	440a      	add	r2, r1
 8011f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011f8c:	6013      	str	r3, [r2, #0]
 8011f8e:	e00f      	b.n	8011fb0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011f90:	69bb      	ldr	r3, [r7, #24]
 8011f92:	015a      	lsls	r2, r3, #5
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	4413      	add	r3, r2
 8011f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	69ba      	ldr	r2, [r7, #24]
 8011fa0:	0151      	lsls	r1, r2, #5
 8011fa2:	69fa      	ldr	r2, [r7, #28]
 8011fa4:	440a      	add	r2, r1
 8011fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011fae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	015a      	lsls	r2, r3, #5
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	4413      	add	r3, r2
 8011fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	69ba      	ldr	r2, [r7, #24]
 8011fc0:	0151      	lsls	r1, r2, #5
 8011fc2:	69fa      	ldr	r2, [r7, #28]
 8011fc4:	440a      	add	r2, r1
 8011fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011fce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011fd0:	2300      	movs	r3, #0
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3720      	adds	r7, #32
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	fff80000 	.word	0xfff80000
 8011fe0:	e007ffff 	.word	0xe007ffff
 8011fe4:	1ff80000 	.word	0x1ff80000

08011fe8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b087      	sub	sp, #28
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	4613      	mov	r3, r2
 8011ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	785b      	ldrb	r3, [r3, #1]
 8012004:	2b01      	cmp	r3, #1
 8012006:	f040 80cd 	bne.w	80121a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	695b      	ldr	r3, [r3, #20]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d132      	bne.n	8012078 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	015a      	lsls	r2, r3, #5
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	4413      	add	r3, r2
 801201a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801201e:	691a      	ldr	r2, [r3, #16]
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	0159      	lsls	r1, r3, #5
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	440b      	add	r3, r1
 8012028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801202c:	4619      	mov	r1, r3
 801202e:	4b98      	ldr	r3, [pc, #608]	; (8012290 <USB_EP0StartXfer+0x2a8>)
 8012030:	4013      	ands	r3, r2
 8012032:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	015a      	lsls	r2, r3, #5
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	4413      	add	r3, r2
 801203c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012040:	691b      	ldr	r3, [r3, #16]
 8012042:	693a      	ldr	r2, [r7, #16]
 8012044:	0151      	lsls	r1, r2, #5
 8012046:	697a      	ldr	r2, [r7, #20]
 8012048:	440a      	add	r2, r1
 801204a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801204e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	015a      	lsls	r2, r3, #5
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	4413      	add	r3, r2
 801205c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012060:	691a      	ldr	r2, [r3, #16]
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	0159      	lsls	r1, r3, #5
 8012066:	697b      	ldr	r3, [r7, #20]
 8012068:	440b      	add	r3, r1
 801206a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801206e:	4619      	mov	r1, r3
 8012070:	4b88      	ldr	r3, [pc, #544]	; (8012294 <USB_EP0StartXfer+0x2ac>)
 8012072:	4013      	ands	r3, r2
 8012074:	610b      	str	r3, [r1, #16]
 8012076:	e04e      	b.n	8012116 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	015a      	lsls	r2, r3, #5
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	4413      	add	r3, r2
 8012080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012084:	691a      	ldr	r2, [r3, #16]
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	0159      	lsls	r1, r3, #5
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	440b      	add	r3, r1
 801208e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012092:	4619      	mov	r1, r3
 8012094:	4b7f      	ldr	r3, [pc, #508]	; (8012294 <USB_EP0StartXfer+0x2ac>)
 8012096:	4013      	ands	r3, r2
 8012098:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	015a      	lsls	r2, r3, #5
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	4413      	add	r3, r2
 80120a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120a6:	691a      	ldr	r2, [r3, #16]
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	0159      	lsls	r1, r3, #5
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	440b      	add	r3, r1
 80120b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120b4:	4619      	mov	r1, r3
 80120b6:	4b76      	ldr	r3, [pc, #472]	; (8012290 <USB_EP0StartXfer+0x2a8>)
 80120b8:	4013      	ands	r3, r2
 80120ba:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	695a      	ldr	r2, [r3, #20]
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	689b      	ldr	r3, [r3, #8]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d903      	bls.n	80120d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	689a      	ldr	r2, [r3, #8]
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	015a      	lsls	r2, r3, #5
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	4413      	add	r3, r2
 80120d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120dc:	691b      	ldr	r3, [r3, #16]
 80120de:	693a      	ldr	r2, [r7, #16]
 80120e0:	0151      	lsls	r1, r2, #5
 80120e2:	697a      	ldr	r2, [r7, #20]
 80120e4:	440a      	add	r2, r1
 80120e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80120ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	015a      	lsls	r2, r3, #5
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	4413      	add	r3, r2
 80120f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120fc:	691a      	ldr	r2, [r3, #16]
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	695b      	ldr	r3, [r3, #20]
 8012102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012106:	6939      	ldr	r1, [r7, #16]
 8012108:	0148      	lsls	r0, r1, #5
 801210a:	6979      	ldr	r1, [r7, #20]
 801210c:	4401      	add	r1, r0
 801210e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012112:	4313      	orrs	r3, r2
 8012114:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012116:	79fb      	ldrb	r3, [r7, #7]
 8012118:	2b01      	cmp	r3, #1
 801211a:	d11e      	bne.n	801215a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	691b      	ldr	r3, [r3, #16]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d009      	beq.n	8012138 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	015a      	lsls	r2, r3, #5
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	4413      	add	r3, r2
 801212c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012130:	461a      	mov	r2, r3
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	691b      	ldr	r3, [r3, #16]
 8012136:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	015a      	lsls	r2, r3, #5
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	4413      	add	r3, r2
 8012140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	693a      	ldr	r2, [r7, #16]
 8012148:	0151      	lsls	r1, r2, #5
 801214a:	697a      	ldr	r2, [r7, #20]
 801214c:	440a      	add	r2, r1
 801214e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012152:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012156:	6013      	str	r3, [r2, #0]
 8012158:	e092      	b.n	8012280 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	015a      	lsls	r2, r3, #5
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	4413      	add	r3, r2
 8012162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	693a      	ldr	r2, [r7, #16]
 801216a:	0151      	lsls	r1, r2, #5
 801216c:	697a      	ldr	r2, [r7, #20]
 801216e:	440a      	add	r2, r1
 8012170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012174:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012178:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	695b      	ldr	r3, [r3, #20]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d07e      	beq.n	8012280 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	f003 030f 	and.w	r3, r3, #15
 8012192:	2101      	movs	r1, #1
 8012194:	fa01 f303 	lsl.w	r3, r1, r3
 8012198:	6979      	ldr	r1, [r7, #20]
 801219a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801219e:	4313      	orrs	r3, r2
 80121a0:	634b      	str	r3, [r1, #52]	; 0x34
 80121a2:	e06d      	b.n	8012280 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	015a      	lsls	r2, r3, #5
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	4413      	add	r3, r2
 80121ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121b0:	691a      	ldr	r2, [r3, #16]
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	0159      	lsls	r1, r3, #5
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	440b      	add	r3, r1
 80121ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121be:	4619      	mov	r1, r3
 80121c0:	4b34      	ldr	r3, [pc, #208]	; (8012294 <USB_EP0StartXfer+0x2ac>)
 80121c2:	4013      	ands	r3, r2
 80121c4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	015a      	lsls	r2, r3, #5
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	4413      	add	r3, r2
 80121ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121d2:	691a      	ldr	r2, [r3, #16]
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	0159      	lsls	r1, r3, #5
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	440b      	add	r3, r1
 80121dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121e0:	4619      	mov	r1, r3
 80121e2:	4b2b      	ldr	r3, [pc, #172]	; (8012290 <USB_EP0StartXfer+0x2a8>)
 80121e4:	4013      	ands	r3, r2
 80121e6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	695b      	ldr	r3, [r3, #20]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d003      	beq.n	80121f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	689a      	ldr	r2, [r3, #8]
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80121f8:	693b      	ldr	r3, [r7, #16]
 80121fa:	015a      	lsls	r2, r3, #5
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	4413      	add	r3, r2
 8012200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012204:	691b      	ldr	r3, [r3, #16]
 8012206:	693a      	ldr	r2, [r7, #16]
 8012208:	0151      	lsls	r1, r2, #5
 801220a:	697a      	ldr	r2, [r7, #20]
 801220c:	440a      	add	r2, r1
 801220e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012216:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	015a      	lsls	r2, r3, #5
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	4413      	add	r3, r2
 8012220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012224:	691a      	ldr	r2, [r3, #16]
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	689b      	ldr	r3, [r3, #8]
 801222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801222e:	6939      	ldr	r1, [r7, #16]
 8012230:	0148      	lsls	r0, r1, #5
 8012232:	6979      	ldr	r1, [r7, #20]
 8012234:	4401      	add	r1, r0
 8012236:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801223a:	4313      	orrs	r3, r2
 801223c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801223e:	79fb      	ldrb	r3, [r7, #7]
 8012240:	2b01      	cmp	r3, #1
 8012242:	d10d      	bne.n	8012260 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d009      	beq.n	8012260 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	68d9      	ldr	r1, [r3, #12]
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	015a      	lsls	r2, r3, #5
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	4413      	add	r3, r2
 8012258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801225c:	460a      	mov	r2, r1
 801225e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	015a      	lsls	r2, r3, #5
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	4413      	add	r3, r2
 8012268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	693a      	ldr	r2, [r7, #16]
 8012270:	0151      	lsls	r1, r2, #5
 8012272:	697a      	ldr	r2, [r7, #20]
 8012274:	440a      	add	r2, r1
 8012276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801227a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801227e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012280:	2300      	movs	r3, #0
}
 8012282:	4618      	mov	r0, r3
 8012284:	371c      	adds	r7, #28
 8012286:	46bd      	mov	sp, r7
 8012288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228c:	4770      	bx	lr
 801228e:	bf00      	nop
 8012290:	e007ffff 	.word	0xe007ffff
 8012294:	fff80000 	.word	0xfff80000

08012298 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012298:	b480      	push	{r7}
 801229a:	b089      	sub	sp, #36	; 0x24
 801229c:	af00      	add	r7, sp, #0
 801229e:	60f8      	str	r0, [r7, #12]
 80122a0:	60b9      	str	r1, [r7, #8]
 80122a2:	4611      	mov	r1, r2
 80122a4:	461a      	mov	r2, r3
 80122a6:	460b      	mov	r3, r1
 80122a8:	71fb      	strb	r3, [r7, #7]
 80122aa:	4613      	mov	r3, r2
 80122ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80122b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d123      	bne.n	8012306 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80122be:	88bb      	ldrh	r3, [r7, #4]
 80122c0:	3303      	adds	r3, #3
 80122c2:	089b      	lsrs	r3, r3, #2
 80122c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80122c6:	2300      	movs	r3, #0
 80122c8:	61bb      	str	r3, [r7, #24]
 80122ca:	e018      	b.n	80122fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80122cc:	79fb      	ldrb	r3, [r7, #7]
 80122ce:	031a      	lsls	r2, r3, #12
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	4413      	add	r3, r2
 80122d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122d8:	461a      	mov	r2, r3
 80122da:	69fb      	ldr	r3, [r7, #28]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	3301      	adds	r3, #1
 80122e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	3301      	adds	r3, #1
 80122ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80122ec:	69fb      	ldr	r3, [r7, #28]
 80122ee:	3301      	adds	r3, #1
 80122f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80122f2:	69fb      	ldr	r3, [r7, #28]
 80122f4:	3301      	adds	r3, #1
 80122f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80122f8:	69bb      	ldr	r3, [r7, #24]
 80122fa:	3301      	adds	r3, #1
 80122fc:	61bb      	str	r3, [r7, #24]
 80122fe:	69ba      	ldr	r2, [r7, #24]
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	429a      	cmp	r2, r3
 8012304:	d3e2      	bcc.n	80122cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012306:	2300      	movs	r3, #0
}
 8012308:	4618      	mov	r0, r3
 801230a:	3724      	adds	r7, #36	; 0x24
 801230c:	46bd      	mov	sp, r7
 801230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012312:	4770      	bx	lr

08012314 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012314:	b480      	push	{r7}
 8012316:	b08b      	sub	sp, #44	; 0x2c
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	4613      	mov	r3, r2
 8012320:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801232a:	88fb      	ldrh	r3, [r7, #6]
 801232c:	089b      	lsrs	r3, r3, #2
 801232e:	b29b      	uxth	r3, r3
 8012330:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012332:	88fb      	ldrh	r3, [r7, #6]
 8012334:	f003 0303 	and.w	r3, r3, #3
 8012338:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801233a:	2300      	movs	r3, #0
 801233c:	623b      	str	r3, [r7, #32]
 801233e:	e014      	b.n	801236a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012340:	69bb      	ldr	r3, [r7, #24]
 8012342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234a:	601a      	str	r2, [r3, #0]
    pDest++;
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	3301      	adds	r3, #1
 8012350:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012354:	3301      	adds	r3, #1
 8012356:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235a:	3301      	adds	r3, #1
 801235c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012360:	3301      	adds	r3, #1
 8012362:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012364:	6a3b      	ldr	r3, [r7, #32]
 8012366:	3301      	adds	r3, #1
 8012368:	623b      	str	r3, [r7, #32]
 801236a:	6a3a      	ldr	r2, [r7, #32]
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	429a      	cmp	r2, r3
 8012370:	d3e6      	bcc.n	8012340 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012372:	8bfb      	ldrh	r3, [r7, #30]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d01e      	beq.n	80123b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012378:	2300      	movs	r3, #0
 801237a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801237c:	69bb      	ldr	r3, [r7, #24]
 801237e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012382:	461a      	mov	r2, r3
 8012384:	f107 0310 	add.w	r3, r7, #16
 8012388:	6812      	ldr	r2, [r2, #0]
 801238a:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801238c:	693a      	ldr	r2, [r7, #16]
 801238e:	6a3b      	ldr	r3, [r7, #32]
 8012390:	b2db      	uxtb	r3, r3
 8012392:	00db      	lsls	r3, r3, #3
 8012394:	fa22 f303 	lsr.w	r3, r2, r3
 8012398:	b2da      	uxtb	r2, r3
 801239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239c:	701a      	strb	r2, [r3, #0]
      i++;
 801239e:	6a3b      	ldr	r3, [r7, #32]
 80123a0:	3301      	adds	r3, #1
 80123a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80123a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a6:	3301      	adds	r3, #1
 80123a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80123aa:	8bfb      	ldrh	r3, [r7, #30]
 80123ac:	3b01      	subs	r3, #1
 80123ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80123b0:	8bfb      	ldrh	r3, [r7, #30]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d1ea      	bne.n	801238c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80123b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	372c      	adds	r7, #44	; 0x2c
 80123bc:	46bd      	mov	sp, r7
 80123be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c2:	4770      	bx	lr

080123c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80123c4:	b480      	push	{r7}
 80123c6:	b085      	sub	sp, #20
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	785b      	ldrb	r3, [r3, #1]
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d12c      	bne.n	801243a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	015a      	lsls	r2, r3, #5
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	4413      	add	r3, r2
 80123e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	db12      	blt.n	8012418 <USB_EPSetStall+0x54>
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d00f      	beq.n	8012418 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	015a      	lsls	r2, r3, #5
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	4413      	add	r3, r2
 8012400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	68ba      	ldr	r2, [r7, #8]
 8012408:	0151      	lsls	r1, r2, #5
 801240a:	68fa      	ldr	r2, [r7, #12]
 801240c:	440a      	add	r2, r1
 801240e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012412:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012416:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	015a      	lsls	r2, r3, #5
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	4413      	add	r3, r2
 8012420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	68ba      	ldr	r2, [r7, #8]
 8012428:	0151      	lsls	r1, r2, #5
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	440a      	add	r2, r1
 801242e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012436:	6013      	str	r3, [r2, #0]
 8012438:	e02b      	b.n	8012492 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	015a      	lsls	r2, r3, #5
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	4413      	add	r3, r2
 8012442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	db12      	blt.n	8012472 <USB_EPSetStall+0xae>
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00f      	beq.n	8012472 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	015a      	lsls	r2, r3, #5
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	4413      	add	r3, r2
 801245a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	68ba      	ldr	r2, [r7, #8]
 8012462:	0151      	lsls	r1, r2, #5
 8012464:	68fa      	ldr	r2, [r7, #12]
 8012466:	440a      	add	r2, r1
 8012468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801246c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012470:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	015a      	lsls	r2, r3, #5
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	4413      	add	r3, r2
 801247a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	68ba      	ldr	r2, [r7, #8]
 8012482:	0151      	lsls	r1, r2, #5
 8012484:	68fa      	ldr	r2, [r7, #12]
 8012486:	440a      	add	r2, r1
 8012488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801248c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012490:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012492:	2300      	movs	r3, #0
}
 8012494:	4618      	mov	r0, r3
 8012496:	3714      	adds	r7, #20
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr

080124a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b085      	sub	sp, #20
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	781b      	ldrb	r3, [r3, #0]
 80124b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	785b      	ldrb	r3, [r3, #1]
 80124b8:	2b01      	cmp	r3, #1
 80124ba:	d128      	bne.n	801250e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	015a      	lsls	r2, r3, #5
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	4413      	add	r3, r2
 80124c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	0151      	lsls	r1, r2, #5
 80124ce:	68fa      	ldr	r2, [r7, #12]
 80124d0:	440a      	add	r2, r1
 80124d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80124da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	78db      	ldrb	r3, [r3, #3]
 80124e0:	2b03      	cmp	r3, #3
 80124e2:	d003      	beq.n	80124ec <USB_EPClearStall+0x4c>
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	78db      	ldrb	r3, [r3, #3]
 80124e8:	2b02      	cmp	r3, #2
 80124ea:	d138      	bne.n	801255e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	015a      	lsls	r2, r3, #5
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	4413      	add	r3, r2
 80124f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	68ba      	ldr	r2, [r7, #8]
 80124fc:	0151      	lsls	r1, r2, #5
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	440a      	add	r2, r1
 8012502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801250a:	6013      	str	r3, [r2, #0]
 801250c:	e027      	b.n	801255e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	015a      	lsls	r2, r3, #5
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	4413      	add	r3, r2
 8012516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	68ba      	ldr	r2, [r7, #8]
 801251e:	0151      	lsls	r1, r2, #5
 8012520:	68fa      	ldr	r2, [r7, #12]
 8012522:	440a      	add	r2, r1
 8012524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801252c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	78db      	ldrb	r3, [r3, #3]
 8012532:	2b03      	cmp	r3, #3
 8012534:	d003      	beq.n	801253e <USB_EPClearStall+0x9e>
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	78db      	ldrb	r3, [r3, #3]
 801253a:	2b02      	cmp	r3, #2
 801253c:	d10f      	bne.n	801255e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801253e:	68bb      	ldr	r3, [r7, #8]
 8012540:	015a      	lsls	r2, r3, #5
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	4413      	add	r3, r2
 8012546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	68ba      	ldr	r2, [r7, #8]
 801254e:	0151      	lsls	r1, r2, #5
 8012550:	68fa      	ldr	r2, [r7, #12]
 8012552:	440a      	add	r2, r1
 8012554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801255c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801255e:	2300      	movs	r3, #0
}
 8012560:	4618      	mov	r0, r3
 8012562:	3714      	adds	r7, #20
 8012564:	46bd      	mov	sp, r7
 8012566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256a:	4770      	bx	lr

0801256c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801256c:	b480      	push	{r7}
 801256e:	b085      	sub	sp, #20
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	460b      	mov	r3, r1
 8012576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	68fa      	ldr	r2, [r7, #12]
 8012586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801258a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801258e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012596:	681a      	ldr	r2, [r3, #0]
 8012598:	78fb      	ldrb	r3, [r7, #3]
 801259a:	011b      	lsls	r3, r3, #4
 801259c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80125a0:	68f9      	ldr	r1, [r7, #12]
 80125a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80125a6:	4313      	orrs	r3, r2
 80125a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80125aa:	2300      	movs	r3, #0
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3714      	adds	r7, #20
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr

080125b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80125b8:	b480      	push	{r7}
 80125ba:	b085      	sub	sp, #20
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	68fa      	ldr	r2, [r7, #12]
 80125ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80125d2:	f023 0303 	bic.w	r3, r3, #3
 80125d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	68fa      	ldr	r2, [r7, #12]
 80125e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80125e6:	f023 0302 	bic.w	r3, r3, #2
 80125ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80125ec:	2300      	movs	r3, #0
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3714      	adds	r7, #20
 80125f2:	46bd      	mov	sp, r7
 80125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f8:	4770      	bx	lr

080125fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80125fa:	b480      	push	{r7}
 80125fc:	b085      	sub	sp, #20
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	68fa      	ldr	r2, [r7, #12]
 8012610:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012614:	f023 0303 	bic.w	r3, r3, #3
 8012618:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	68fa      	ldr	r2, [r7, #12]
 8012624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012628:	f043 0302 	orr.w	r3, r3, #2
 801262c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801262e:	2300      	movs	r3, #0
}
 8012630:	4618      	mov	r0, r3
 8012632:	3714      	adds	r7, #20
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr

0801263c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801263c:	b480      	push	{r7}
 801263e:	b085      	sub	sp, #20
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	695b      	ldr	r3, [r3, #20]
 8012648:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	699b      	ldr	r3, [r3, #24]
 801264e:	68fa      	ldr	r2, [r7, #12]
 8012650:	4013      	ands	r3, r2
 8012652:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012654:	68fb      	ldr	r3, [r7, #12]
}
 8012656:	4618      	mov	r0, r3
 8012658:	3714      	adds	r7, #20
 801265a:	46bd      	mov	sp, r7
 801265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012660:	4770      	bx	lr

08012662 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012662:	b480      	push	{r7}
 8012664:	b085      	sub	sp, #20
 8012666:	af00      	add	r7, sp, #0
 8012668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012674:	699b      	ldr	r3, [r3, #24]
 8012676:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801267e:	69db      	ldr	r3, [r3, #28]
 8012680:	68ba      	ldr	r2, [r7, #8]
 8012682:	4013      	ands	r3, r2
 8012684:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	0c1b      	lsrs	r3, r3, #16
}
 801268a:	4618      	mov	r0, r3
 801268c:	3714      	adds	r7, #20
 801268e:	46bd      	mov	sp, r7
 8012690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012694:	4770      	bx	lr

08012696 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012696:	b480      	push	{r7}
 8012698:	b085      	sub	sp, #20
 801269a:	af00      	add	r7, sp, #0
 801269c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126a8:	699b      	ldr	r3, [r3, #24]
 80126aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126b2:	69db      	ldr	r3, [r3, #28]
 80126b4:	68ba      	ldr	r2, [r7, #8]
 80126b6:	4013      	ands	r3, r2
 80126b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	b29b      	uxth	r3, r3
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3714      	adds	r7, #20
 80126c2:	46bd      	mov	sp, r7
 80126c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c8:	4770      	bx	lr

080126ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80126ca:	b480      	push	{r7}
 80126cc:	b085      	sub	sp, #20
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
 80126d2:	460b      	mov	r3, r1
 80126d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80126da:	78fb      	ldrb	r3, [r7, #3]
 80126dc:	015a      	lsls	r2, r3, #5
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	4413      	add	r3, r2
 80126e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126e6:	689b      	ldr	r3, [r3, #8]
 80126e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126f0:	695b      	ldr	r3, [r3, #20]
 80126f2:	68ba      	ldr	r2, [r7, #8]
 80126f4:	4013      	ands	r3, r2
 80126f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80126f8:	68bb      	ldr	r3, [r7, #8]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3714      	adds	r7, #20
 80126fe:	46bd      	mov	sp, r7
 8012700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012704:	4770      	bx	lr

08012706 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012706:	b480      	push	{r7}
 8012708:	b087      	sub	sp, #28
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
 801270e:	460b      	mov	r3, r1
 8012710:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801271c:	691b      	ldr	r3, [r3, #16]
 801271e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012728:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801272a:	78fb      	ldrb	r3, [r7, #3]
 801272c:	f003 030f 	and.w	r3, r3, #15
 8012730:	68fa      	ldr	r2, [r7, #12]
 8012732:	fa22 f303 	lsr.w	r3, r2, r3
 8012736:	01db      	lsls	r3, r3, #7
 8012738:	b2db      	uxtb	r3, r3
 801273a:	693a      	ldr	r2, [r7, #16]
 801273c:	4313      	orrs	r3, r2
 801273e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012740:	78fb      	ldrb	r3, [r7, #3]
 8012742:	015a      	lsls	r2, r3, #5
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	4413      	add	r3, r2
 8012748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801274c:	689b      	ldr	r3, [r3, #8]
 801274e:	693a      	ldr	r2, [r7, #16]
 8012750:	4013      	ands	r3, r2
 8012752:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012754:	68bb      	ldr	r3, [r7, #8]
}
 8012756:	4618      	mov	r0, r3
 8012758:	371c      	adds	r7, #28
 801275a:	46bd      	mov	sp, r7
 801275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012760:	4770      	bx	lr

08012762 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012762:	b480      	push	{r7}
 8012764:	b083      	sub	sp, #12
 8012766:	af00      	add	r7, sp, #0
 8012768:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	695b      	ldr	r3, [r3, #20]
 801276e:	f003 0301 	and.w	r3, r3, #1
}
 8012772:	4618      	mov	r0, r3
 8012774:	370c      	adds	r7, #12
 8012776:	46bd      	mov	sp, r7
 8012778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277c:	4770      	bx	lr
	...

08012780 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012780:	b480      	push	{r7}
 8012782:	b085      	sub	sp, #20
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801279a:	4619      	mov	r1, r3
 801279c:	4b09      	ldr	r3, [pc, #36]	; (80127c4 <USB_ActivateSetup+0x44>)
 801279e:	4013      	ands	r3, r2
 80127a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127a8:	685b      	ldr	r3, [r3, #4]
 80127aa:	68fa      	ldr	r2, [r7, #12]
 80127ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80127b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80127b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80127b6:	2300      	movs	r3, #0
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3714      	adds	r7, #20
 80127bc:	46bd      	mov	sp, r7
 80127be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c2:	4770      	bx	lr
 80127c4:	fffff800 	.word	0xfffff800

080127c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80127c8:	b480      	push	{r7}
 80127ca:	b087      	sub	sp, #28
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	460b      	mov	r3, r1
 80127d2:	607a      	str	r2, [r7, #4]
 80127d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	333c      	adds	r3, #60	; 0x3c
 80127de:	3304      	adds	r3, #4
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	4a26      	ldr	r2, [pc, #152]	; (8012880 <USB_EP0_OutStart+0xb8>)
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d90a      	bls.n	8012802 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80127f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127fc:	d101      	bne.n	8012802 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80127fe:	2300      	movs	r3, #0
 8012800:	e037      	b.n	8012872 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012808:	461a      	mov	r2, r3
 801280a:	2300      	movs	r3, #0
 801280c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012814:	691b      	ldr	r3, [r3, #16]
 8012816:	697a      	ldr	r2, [r7, #20]
 8012818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801281c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012820:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012828:	691b      	ldr	r3, [r3, #16]
 801282a:	697a      	ldr	r2, [r7, #20]
 801282c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012830:	f043 0318 	orr.w	r3, r3, #24
 8012834:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801283c:	691b      	ldr	r3, [r3, #16]
 801283e:	697a      	ldr	r2, [r7, #20]
 8012840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012844:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012848:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801284a:	7afb      	ldrb	r3, [r7, #11]
 801284c:	2b01      	cmp	r3, #1
 801284e:	d10f      	bne.n	8012870 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012856:	461a      	mov	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	697a      	ldr	r2, [r7, #20]
 8012866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801286a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801286e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012870:	2300      	movs	r3, #0
}
 8012872:	4618      	mov	r0, r3
 8012874:	371c      	adds	r7, #28
 8012876:	46bd      	mov	sp, r7
 8012878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287c:	4770      	bx	lr
 801287e:	bf00      	nop
 8012880:	4f54300a 	.word	0x4f54300a

08012884 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012884:	b480      	push	{r7}
 8012886:	b085      	sub	sp, #20
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801288c:	2300      	movs	r3, #0
 801288e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	3301      	adds	r3, #1
 8012894:	60fb      	str	r3, [r7, #12]
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	4a13      	ldr	r2, [pc, #76]	; (80128e8 <USB_CoreReset+0x64>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d901      	bls.n	80128a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801289e:	2303      	movs	r3, #3
 80128a0:	e01b      	b.n	80128da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	691b      	ldr	r3, [r3, #16]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	daf2      	bge.n	8012890 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80128aa:	2300      	movs	r3, #0
 80128ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	691b      	ldr	r3, [r3, #16]
 80128b2:	f043 0201 	orr.w	r2, r3, #1
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	3301      	adds	r3, #1
 80128be:	60fb      	str	r3, [r7, #12]
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	4a09      	ldr	r2, [pc, #36]	; (80128e8 <USB_CoreReset+0x64>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d901      	bls.n	80128cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80128c8:	2303      	movs	r3, #3
 80128ca:	e006      	b.n	80128da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	691b      	ldr	r3, [r3, #16]
 80128d0:	f003 0301 	and.w	r3, r3, #1
 80128d4:	2b01      	cmp	r3, #1
 80128d6:	d0f0      	beq.n	80128ba <USB_CoreReset+0x36>

  return HAL_OK;
 80128d8:	2300      	movs	r3, #0
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3714      	adds	r7, #20
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop
 80128e8:	00030d40 	.word	0x00030d40

080128ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	460b      	mov	r3, r1
 80128f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80128f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80128fc:	f003 fcfa 	bl	80162f4 <USBD_static_malloc>
 8012900:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d105      	bne.n	8012914 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2200      	movs	r2, #0
 801290c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012910:	2302      	movs	r3, #2
 8012912:	e066      	b.n	80129e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	68fa      	ldr	r2, [r7, #12]
 8012918:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	7c1b      	ldrb	r3, [r3, #16]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d119      	bne.n	8012958 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012928:	2202      	movs	r2, #2
 801292a:	2181      	movs	r1, #129	; 0x81
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f003 fbbe 	bl	80160ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2201      	movs	r2, #1
 8012936:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012938:	f44f 7300 	mov.w	r3, #512	; 0x200
 801293c:	2202      	movs	r2, #2
 801293e:	2101      	movs	r1, #1
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f003 fbb4 	bl	80160ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2201      	movs	r2, #1
 801294a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2210      	movs	r2, #16
 8012952:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8012956:	e016      	b.n	8012986 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012958:	2340      	movs	r3, #64	; 0x40
 801295a:	2202      	movs	r2, #2
 801295c:	2181      	movs	r1, #129	; 0x81
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f003 fba5 	bl	80160ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2201      	movs	r2, #1
 8012968:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801296a:	2340      	movs	r3, #64	; 0x40
 801296c:	2202      	movs	r2, #2
 801296e:	2101      	movs	r1, #1
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f003 fb9c 	bl	80160ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	2201      	movs	r2, #1
 801297a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2210      	movs	r2, #16
 8012982:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012986:	2308      	movs	r3, #8
 8012988:	2203      	movs	r2, #3
 801298a:	2182      	movs	r1, #130	; 0x82
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f003 fb8e 	bl	80160ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2201      	movs	r2, #1
 8012996:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	2200      	movs	r2, #0
 80129a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	2200      	movs	r2, #0
 80129b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	7c1b      	ldrb	r3, [r3, #16]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d109      	bne.n	80129d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80129c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80129c6:	2101      	movs	r1, #1
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f003 fc5f 	bl	801628c <USBD_LL_PrepareReceive>
 80129ce:	e007      	b.n	80129e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80129d6:	2340      	movs	r3, #64	; 0x40
 80129d8:	2101      	movs	r1, #1
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f003 fc56 	bl	801628c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80129e0:	2300      	movs	r3, #0
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3710      	adds	r7, #16
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b082      	sub	sp, #8
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
 80129f2:	460b      	mov	r3, r1
 80129f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80129f6:	2181      	movs	r1, #129	; 0x81
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f003 fb7e 	bl	80160fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2200      	movs	r2, #0
 8012a02:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012a04:	2101      	movs	r1, #1
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f003 fb77 	bl	80160fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012a14:	2182      	movs	r1, #130	; 0x82
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f003 fb6f 	bl	80160fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2200      	movs	r2, #0
 8012a28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d00e      	beq.n	8012a54 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a46:	4618      	mov	r0, r3
 8012a48:	f003 fc62 	bl	8016310 <USBD_static_free>
    pdev->pClassData = NULL;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012a54:	2300      	movs	r3, #0
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
	...

08012a60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b086      	sub	sp, #24
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012a72:	2300      	movs	r3, #0
 8012a74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012a76:	2300      	movs	r3, #0
 8012a78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d101      	bne.n	8012a88 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8012a84:	2303      	movs	r3, #3
 8012a86:	e0af      	b.n	8012be8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d03f      	beq.n	8012b14 <USBD_CDC_Setup+0xb4>
 8012a94:	2b20      	cmp	r3, #32
 8012a96:	f040 809f 	bne.w	8012bd8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	88db      	ldrh	r3, [r3, #6]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d02e      	beq.n	8012b00 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	781b      	ldrb	r3, [r3, #0]
 8012aa6:	b25b      	sxtb	r3, r3
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	da16      	bge.n	8012ada <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ab2:	689b      	ldr	r3, [r3, #8]
 8012ab4:	683a      	ldr	r2, [r7, #0]
 8012ab6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012ab8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012aba:	683a      	ldr	r2, [r7, #0]
 8012abc:	88d2      	ldrh	r2, [r2, #6]
 8012abe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	88db      	ldrh	r3, [r3, #6]
 8012ac4:	2b07      	cmp	r3, #7
 8012ac6:	bf28      	it	cs
 8012ac8:	2307      	movcs	r3, #7
 8012aca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	89fa      	ldrh	r2, [r7, #14]
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f001 fb19 	bl	801410a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8012ad8:	e085      	b.n	8012be6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	785a      	ldrb	r2, [r3, #1]
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	88db      	ldrh	r3, [r3, #6]
 8012ae8:	b2da      	uxtb	r2, r3
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012af0:	6939      	ldr	r1, [r7, #16]
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	88db      	ldrh	r3, [r3, #6]
 8012af6:	461a      	mov	r2, r3
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f001 fb32 	bl	8014162 <USBD_CtlPrepareRx>
      break;
 8012afe:	e072      	b.n	8012be6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012b06:	689b      	ldr	r3, [r3, #8]
 8012b08:	683a      	ldr	r2, [r7, #0]
 8012b0a:	7850      	ldrb	r0, [r2, #1]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	6839      	ldr	r1, [r7, #0]
 8012b10:	4798      	blx	r3
      break;
 8012b12:	e068      	b.n	8012be6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	785b      	ldrb	r3, [r3, #1]
 8012b18:	2b0b      	cmp	r3, #11
 8012b1a:	d852      	bhi.n	8012bc2 <USBD_CDC_Setup+0x162>
 8012b1c:	a201      	add	r2, pc, #4	; (adr r2, 8012b24 <USBD_CDC_Setup+0xc4>)
 8012b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b22:	bf00      	nop
 8012b24:	08012b55 	.word	0x08012b55
 8012b28:	08012bd1 	.word	0x08012bd1
 8012b2c:	08012bc3 	.word	0x08012bc3
 8012b30:	08012bc3 	.word	0x08012bc3
 8012b34:	08012bc3 	.word	0x08012bc3
 8012b38:	08012bc3 	.word	0x08012bc3
 8012b3c:	08012bc3 	.word	0x08012bc3
 8012b40:	08012bc3 	.word	0x08012bc3
 8012b44:	08012bc3 	.word	0x08012bc3
 8012b48:	08012bc3 	.word	0x08012bc3
 8012b4c:	08012b7f 	.word	0x08012b7f
 8012b50:	08012ba9 	.word	0x08012ba9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b5a:	b2db      	uxtb	r3, r3
 8012b5c:	2b03      	cmp	r3, #3
 8012b5e:	d107      	bne.n	8012b70 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012b60:	f107 030a 	add.w	r3, r7, #10
 8012b64:	2202      	movs	r2, #2
 8012b66:	4619      	mov	r1, r3
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f001 face 	bl	801410a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012b6e:	e032      	b.n	8012bd6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012b70:	6839      	ldr	r1, [r7, #0]
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f001 fa58 	bl	8014028 <USBD_CtlError>
            ret = USBD_FAIL;
 8012b78:	2303      	movs	r3, #3
 8012b7a:	75fb      	strb	r3, [r7, #23]
          break;
 8012b7c:	e02b      	b.n	8012bd6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	2b03      	cmp	r3, #3
 8012b88:	d107      	bne.n	8012b9a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012b8a:	f107 030d 	add.w	r3, r7, #13
 8012b8e:	2201      	movs	r2, #1
 8012b90:	4619      	mov	r1, r3
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f001 fab9 	bl	801410a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012b98:	e01d      	b.n	8012bd6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012b9a:	6839      	ldr	r1, [r7, #0]
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f001 fa43 	bl	8014028 <USBD_CtlError>
            ret = USBD_FAIL;
 8012ba2:	2303      	movs	r3, #3
 8012ba4:	75fb      	strb	r3, [r7, #23]
          break;
 8012ba6:	e016      	b.n	8012bd6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bae:	b2db      	uxtb	r3, r3
 8012bb0:	2b03      	cmp	r3, #3
 8012bb2:	d00f      	beq.n	8012bd4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8012bb4:	6839      	ldr	r1, [r7, #0]
 8012bb6:	6878      	ldr	r0, [r7, #4]
 8012bb8:	f001 fa36 	bl	8014028 <USBD_CtlError>
            ret = USBD_FAIL;
 8012bbc:	2303      	movs	r3, #3
 8012bbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012bc0:	e008      	b.n	8012bd4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012bc2:	6839      	ldr	r1, [r7, #0]
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f001 fa2f 	bl	8014028 <USBD_CtlError>
          ret = USBD_FAIL;
 8012bca:	2303      	movs	r3, #3
 8012bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8012bce:	e002      	b.n	8012bd6 <USBD_CDC_Setup+0x176>
          break;
 8012bd0:	bf00      	nop
 8012bd2:	e008      	b.n	8012be6 <USBD_CDC_Setup+0x186>
          break;
 8012bd4:	bf00      	nop
      }
      break;
 8012bd6:	e006      	b.n	8012be6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8012bd8:	6839      	ldr	r1, [r7, #0]
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f001 fa24 	bl	8014028 <USBD_CtlError>
      ret = USBD_FAIL;
 8012be0:	2303      	movs	r3, #3
 8012be2:	75fb      	strb	r3, [r7, #23]
      break;
 8012be4:	bf00      	nop
  }

  return (uint8_t)ret;
 8012be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	3718      	adds	r7, #24
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}

08012bf0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b084      	sub	sp, #16
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
 8012bf8:	460b      	mov	r3, r1
 8012bfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d101      	bne.n	8012c12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012c0e:	2303      	movs	r3, #3
 8012c10:	e04f      	b.n	8012cb2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012c1a:	78fa      	ldrb	r2, [r7, #3]
 8012c1c:	6879      	ldr	r1, [r7, #4]
 8012c1e:	4613      	mov	r3, r2
 8012c20:	009b      	lsls	r3, r3, #2
 8012c22:	4413      	add	r3, r2
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	440b      	add	r3, r1
 8012c28:	3318      	adds	r3, #24
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d029      	beq.n	8012c84 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012c30:	78fa      	ldrb	r2, [r7, #3]
 8012c32:	6879      	ldr	r1, [r7, #4]
 8012c34:	4613      	mov	r3, r2
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	4413      	add	r3, r2
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	440b      	add	r3, r1
 8012c3e:	3318      	adds	r3, #24
 8012c40:	681a      	ldr	r2, [r3, #0]
 8012c42:	78f9      	ldrb	r1, [r7, #3]
 8012c44:	68f8      	ldr	r0, [r7, #12]
 8012c46:	460b      	mov	r3, r1
 8012c48:	00db      	lsls	r3, r3, #3
 8012c4a:	1a5b      	subs	r3, r3, r1
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	4403      	add	r3, r0
 8012c50:	3344      	adds	r3, #68	; 0x44
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	fbb2 f1f3 	udiv	r1, r2, r3
 8012c58:	fb03 f301 	mul.w	r3, r3, r1
 8012c5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d110      	bne.n	8012c84 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8012c62:	78fa      	ldrb	r2, [r7, #3]
 8012c64:	6879      	ldr	r1, [r7, #4]
 8012c66:	4613      	mov	r3, r2
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	4413      	add	r3, r2
 8012c6c:	009b      	lsls	r3, r3, #2
 8012c6e:	440b      	add	r3, r1
 8012c70:	3318      	adds	r3, #24
 8012c72:	2200      	movs	r2, #0
 8012c74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012c76:	78f9      	ldrb	r1, [r7, #3]
 8012c78:	2300      	movs	r3, #0
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f003 fae4 	bl	801624a <USBD_LL_Transmit>
 8012c82:	e015      	b.n	8012cb0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	2200      	movs	r2, #0
 8012c88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012c92:	691b      	ldr	r3, [r3, #16]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d00b      	beq.n	8012cb0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012c9e:	691b      	ldr	r3, [r3, #16]
 8012ca0:	68ba      	ldr	r2, [r7, #8]
 8012ca2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012ca6:	68ba      	ldr	r2, [r7, #8]
 8012ca8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8012cac:	78fa      	ldrb	r2, [r7, #3]
 8012cae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012cb0:	2300      	movs	r3, #0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3710      	adds	r7, #16
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}

08012cba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b084      	sub	sp, #16
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
 8012cc2:	460b      	mov	r3, r1
 8012cc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ccc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d101      	bne.n	8012cdc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012cd8:	2303      	movs	r3, #3
 8012cda:	e015      	b.n	8012d08 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012cdc:	78fb      	ldrb	r3, [r7, #3]
 8012cde:	4619      	mov	r1, r3
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f003 faf4 	bl	80162ce <USBD_LL_GetRxDataSize>
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	68fa      	ldr	r2, [r7, #12]
 8012cf8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012cfc:	68fa      	ldr	r2, [r7, #12]
 8012cfe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8012d02:	4611      	mov	r1, r2
 8012d04:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012d06:	2300      	movs	r3, #0
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3710      	adds	r7, #16
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b084      	sub	sp, #16
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d101      	bne.n	8012d2a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8012d26:	2303      	movs	r3, #3
 8012d28:	e01b      	b.n	8012d62 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d015      	beq.n	8012d60 <USBD_CDC_EP0_RxReady+0x50>
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012d3a:	2bff      	cmp	r3, #255	; 0xff
 8012d3c:	d010      	beq.n	8012d60 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d44:	689b      	ldr	r3, [r3, #8]
 8012d46:	68fa      	ldr	r2, [r7, #12]
 8012d48:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8012d4c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8012d4e:	68fa      	ldr	r2, [r7, #12]
 8012d50:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012d54:	b292      	uxth	r2, r2
 8012d56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	22ff      	movs	r2, #255	; 0xff
 8012d5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012d60:	2300      	movs	r3, #0
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3710      	adds	r7, #16
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
	...

08012d6c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2243      	movs	r2, #67	; 0x43
 8012d78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8012d7a:	4b03      	ldr	r3, [pc, #12]	; (8012d88 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	370c      	adds	r7, #12
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr
 8012d88:	24000170 	.word	0x24000170

08012d8c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2243      	movs	r2, #67	; 0x43
 8012d98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8012d9a:	4b03      	ldr	r3, [pc, #12]	; (8012da8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	370c      	adds	r7, #12
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr
 8012da8:	2400012c 	.word	0x2400012c

08012dac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012dac:	b480      	push	{r7}
 8012dae:	b083      	sub	sp, #12
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2243      	movs	r2, #67	; 0x43
 8012db8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8012dba:	4b03      	ldr	r3, [pc, #12]	; (8012dc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	370c      	adds	r7, #12
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc6:	4770      	bx	lr
 8012dc8:	240001b4 	.word	0x240001b4

08012dcc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	220a      	movs	r2, #10
 8012dd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012dda:	4b03      	ldr	r3, [pc, #12]	; (8012de8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	370c      	adds	r7, #12
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr
 8012de8:	240000e8 	.word	0x240000e8

08012dec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012dec:	b480      	push	{r7}
 8012dee:	b083      	sub	sp, #12
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d101      	bne.n	8012e00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012dfc:	2303      	movs	r3, #3
 8012dfe:	e004      	b.n	8012e0a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	683a      	ldr	r2, [r7, #0]
 8012e04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012e08:	2300      	movs	r3, #0
}
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	370c      	adds	r7, #12
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e14:	4770      	bx	lr

08012e16 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012e16:	b480      	push	{r7}
 8012e18:	b087      	sub	sp, #28
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	60f8      	str	r0, [r7, #12]
 8012e1e:	60b9      	str	r1, [r7, #8]
 8012e20:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e28:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d101      	bne.n	8012e34 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8012e30:	2303      	movs	r3, #3
 8012e32:	e008      	b.n	8012e46 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	68ba      	ldr	r2, [r7, #8]
 8012e38:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8012e44:	2300      	movs	r3, #0
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	371c      	adds	r7, #28
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr

08012e52 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012e52:	b480      	push	{r7}
 8012e54:	b085      	sub	sp, #20
 8012e56:	af00      	add	r7, sp, #0
 8012e58:	6078      	str	r0, [r7, #4]
 8012e5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d101      	bne.n	8012e6e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8012e6a:	2303      	movs	r3, #3
 8012e6c:	e004      	b.n	8012e78 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	683a      	ldr	r2, [r7, #0]
 8012e72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8012e76:	2300      	movs	r3, #0
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3714      	adds	r7, #20
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr

08012e84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b084      	sub	sp, #16
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e92:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8012e94:	2301      	movs	r3, #1
 8012e96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d101      	bne.n	8012ea6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012ea2:	2303      	movs	r3, #3
 8012ea4:	e01a      	b.n	8012edc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d114      	bne.n	8012eda <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012ece:	2181      	movs	r1, #129	; 0x81
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f003 f9ba 	bl	801624a <USBD_LL_Transmit>

    ret = USBD_OK;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3710      	adds	r7, #16
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}

08012ee4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ef2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d101      	bne.n	8012f02 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8012efe:	2303      	movs	r3, #3
 8012f00:	e016      	b.n	8012f30 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	7c1b      	ldrb	r3, [r3, #16]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d109      	bne.n	8012f1e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012f14:	2101      	movs	r1, #1
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f003 f9b8 	bl	801628c <USBD_LL_PrepareReceive>
 8012f1c:	e007      	b.n	8012f2e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012f24:	2340      	movs	r3, #64	; 0x40
 8012f26:	2101      	movs	r1, #1
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f003 f9af 	bl	801628c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012f2e:	2300      	movs	r3, #0
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3710      	adds	r7, #16
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b086      	sub	sp, #24
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	60f8      	str	r0, [r7, #12]
 8012f40:	60b9      	str	r1, [r7, #8]
 8012f42:	4613      	mov	r3, r2
 8012f44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d101      	bne.n	8012f50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012f4c:	2303      	movs	r3, #3
 8012f4e:	e01f      	b.n	8012f90 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	2200      	movs	r2, #0
 8012f54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2200      	movs	r2, #0
 8012f64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d003      	beq.n	8012f76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	68ba      	ldr	r2, [r7, #8]
 8012f72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2201      	movs	r2, #1
 8012f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	79fa      	ldrb	r2, [r7, #7]
 8012f82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012f84:	68f8      	ldr	r0, [r7, #12]
 8012f86:	f003 f827 	bl	8015fd8 <USBD_LL_Init>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3718      	adds	r7, #24
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}

08012f98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b084      	sub	sp, #16
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
 8012fa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d101      	bne.n	8012fb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8012fac:	2303      	movs	r3, #3
 8012fae:	e016      	b.n	8012fde <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	683a      	ldr	r2, [r7, #0]
 8012fb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d00b      	beq.n	8012fdc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fcc:	f107 020e 	add.w	r2, r7, #14
 8012fd0:	4610      	mov	r0, r2
 8012fd2:	4798      	blx	r3
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8012fdc:	2300      	movs	r3, #0
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3710      	adds	r7, #16
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}

08012fe6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012fe6:	b580      	push	{r7, lr}
 8012fe8:	b082      	sub	sp, #8
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f003 f842 	bl	8016078 <USBD_LL_Start>
 8012ff4:	4603      	mov	r3, r0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012ffe:	b480      	push	{r7}
 8013000:	b083      	sub	sp, #12
 8013002:	af00      	add	r7, sp, #0
 8013004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013006:	2300      	movs	r3, #0
}
 8013008:	4618      	mov	r0, r3
 801300a:	370c      	adds	r7, #12
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr

08013014 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b084      	sub	sp, #16
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	460b      	mov	r3, r1
 801301e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013020:	2303      	movs	r3, #3
 8013022:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801302a:	2b00      	cmp	r3, #0
 801302c:	d009      	beq.n	8013042 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	78fa      	ldrb	r2, [r7, #3]
 8013038:	4611      	mov	r1, r2
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	4798      	blx	r3
 801303e:	4603      	mov	r3, r0
 8013040:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013042:	7bfb      	ldrb	r3, [r7, #15]
}
 8013044:	4618      	mov	r0, r3
 8013046:	3710      	adds	r7, #16
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	460b      	mov	r3, r1
 8013056:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801305e:	2b00      	cmp	r3, #0
 8013060:	d007      	beq.n	8013072 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	78fa      	ldrb	r2, [r7, #3]
 801306c:	4611      	mov	r1, r2
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	4798      	blx	r3
  }

  return USBD_OK;
 8013072:	2300      	movs	r3, #0
}
 8013074:	4618      	mov	r0, r3
 8013076:	3708      	adds	r7, #8
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b084      	sub	sp, #16
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801308c:	6839      	ldr	r1, [r7, #0]
 801308e:	4618      	mov	r0, r3
 8013090:	f000 ff90 	bl	8013fb4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2201      	movs	r2, #1
 8013098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80130a2:	461a      	mov	r2, r3
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80130b0:	f003 031f 	and.w	r3, r3, #31
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	d01a      	beq.n	80130ee <USBD_LL_SetupStage+0x72>
 80130b8:	2b02      	cmp	r3, #2
 80130ba:	d822      	bhi.n	8013102 <USBD_LL_SetupStage+0x86>
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d002      	beq.n	80130c6 <USBD_LL_SetupStage+0x4a>
 80130c0:	2b01      	cmp	r3, #1
 80130c2:	d00a      	beq.n	80130da <USBD_LL_SetupStage+0x5e>
 80130c4:	e01d      	b.n	8013102 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80130cc:	4619      	mov	r1, r3
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f000 fa62 	bl	8013598 <USBD_StdDevReq>
 80130d4:	4603      	mov	r3, r0
 80130d6:	73fb      	strb	r3, [r7, #15]
      break;
 80130d8:	e020      	b.n	801311c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80130e0:	4619      	mov	r1, r3
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f000 fac6 	bl	8013674 <USBD_StdItfReq>
 80130e8:	4603      	mov	r3, r0
 80130ea:	73fb      	strb	r3, [r7, #15]
      break;
 80130ec:	e016      	b.n	801311c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80130f4:	4619      	mov	r1, r3
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f000 fb05 	bl	8013706 <USBD_StdEPReq>
 80130fc:	4603      	mov	r3, r0
 80130fe:	73fb      	strb	r3, [r7, #15]
      break;
 8013100:	e00c      	b.n	801311c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013108:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801310c:	b2db      	uxtb	r3, r3
 801310e:	4619      	mov	r1, r3
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f003 f811 	bl	8016138 <USBD_LL_StallEP>
 8013116:	4603      	mov	r3, r0
 8013118:	73fb      	strb	r3, [r7, #15]
      break;
 801311a:	bf00      	nop
  }

  return ret;
 801311c:	7bfb      	ldrb	r3, [r7, #15]
}
 801311e:	4618      	mov	r0, r3
 8013120:	3710      	adds	r7, #16
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}

08013126 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013126:	b580      	push	{r7, lr}
 8013128:	b086      	sub	sp, #24
 801312a:	af00      	add	r7, sp, #0
 801312c:	60f8      	str	r0, [r7, #12]
 801312e:	460b      	mov	r3, r1
 8013130:	607a      	str	r2, [r7, #4]
 8013132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013134:	7afb      	ldrb	r3, [r7, #11]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d138      	bne.n	80131ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013140:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013148:	2b03      	cmp	r3, #3
 801314a:	d14a      	bne.n	80131e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801314c:	693b      	ldr	r3, [r7, #16]
 801314e:	689a      	ldr	r2, [r3, #8]
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	429a      	cmp	r2, r3
 8013156:	d913      	bls.n	8013180 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	689a      	ldr	r2, [r3, #8]
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	1ad2      	subs	r2, r2, r3
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013166:	693b      	ldr	r3, [r7, #16]
 8013168:	68da      	ldr	r2, [r3, #12]
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	689b      	ldr	r3, [r3, #8]
 801316e:	4293      	cmp	r3, r2
 8013170:	bf28      	it	cs
 8013172:	4613      	movcs	r3, r2
 8013174:	461a      	mov	r2, r3
 8013176:	6879      	ldr	r1, [r7, #4]
 8013178:	68f8      	ldr	r0, [r7, #12]
 801317a:	f001 f80f 	bl	801419c <USBD_CtlContinueRx>
 801317e:	e030      	b.n	80131e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013186:	b2db      	uxtb	r3, r3
 8013188:	2b03      	cmp	r3, #3
 801318a:	d10b      	bne.n	80131a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013192:	691b      	ldr	r3, [r3, #16]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d005      	beq.n	80131a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801319e:	691b      	ldr	r3, [r3, #16]
 80131a0:	68f8      	ldr	r0, [r7, #12]
 80131a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80131a4:	68f8      	ldr	r0, [r7, #12]
 80131a6:	f001 f80a 	bl	80141be <USBD_CtlSendStatus>
 80131aa:	e01a      	b.n	80131e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80131b2:	b2db      	uxtb	r3, r3
 80131b4:	2b03      	cmp	r3, #3
 80131b6:	d114      	bne.n	80131e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131be:	699b      	ldr	r3, [r3, #24]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d00e      	beq.n	80131e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131ca:	699b      	ldr	r3, [r3, #24]
 80131cc:	7afa      	ldrb	r2, [r7, #11]
 80131ce:	4611      	mov	r1, r2
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	4798      	blx	r3
 80131d4:	4603      	mov	r3, r0
 80131d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80131d8:	7dfb      	ldrb	r3, [r7, #23]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d001      	beq.n	80131e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80131de:	7dfb      	ldrb	r3, [r7, #23]
 80131e0:	e000      	b.n	80131e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80131e2:	2300      	movs	r3, #0
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3718      	adds	r7, #24
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b086      	sub	sp, #24
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	460b      	mov	r3, r1
 80131f6:	607a      	str	r2, [r7, #4]
 80131f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80131fa:	7afb      	ldrb	r3, [r7, #11]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d16b      	bne.n	80132d8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	3314      	adds	r3, #20
 8013204:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801320c:	2b02      	cmp	r3, #2
 801320e:	d156      	bne.n	80132be <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	689a      	ldr	r2, [r3, #8]
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	68db      	ldr	r3, [r3, #12]
 8013218:	429a      	cmp	r2, r3
 801321a:	d914      	bls.n	8013246 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	689a      	ldr	r2, [r3, #8]
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	68db      	ldr	r3, [r3, #12]
 8013224:	1ad2      	subs	r2, r2, r3
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	689b      	ldr	r3, [r3, #8]
 801322e:	461a      	mov	r2, r3
 8013230:	6879      	ldr	r1, [r7, #4]
 8013232:	68f8      	ldr	r0, [r7, #12]
 8013234:	f000 ff84 	bl	8014140 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013238:	2300      	movs	r3, #0
 801323a:	2200      	movs	r2, #0
 801323c:	2100      	movs	r1, #0
 801323e:	68f8      	ldr	r0, [r7, #12]
 8013240:	f003 f824 	bl	801628c <USBD_LL_PrepareReceive>
 8013244:	e03b      	b.n	80132be <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	68da      	ldr	r2, [r3, #12]
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	689b      	ldr	r3, [r3, #8]
 801324e:	429a      	cmp	r2, r3
 8013250:	d11c      	bne.n	801328c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	685a      	ldr	r2, [r3, #4]
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801325a:	429a      	cmp	r2, r3
 801325c:	d316      	bcc.n	801328c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	685a      	ldr	r2, [r3, #4]
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013268:	429a      	cmp	r2, r3
 801326a:	d20f      	bcs.n	801328c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801326c:	2200      	movs	r2, #0
 801326e:	2100      	movs	r1, #0
 8013270:	68f8      	ldr	r0, [r7, #12]
 8013272:	f000 ff65 	bl	8014140 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2200      	movs	r2, #0
 801327a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801327e:	2300      	movs	r3, #0
 8013280:	2200      	movs	r2, #0
 8013282:	2100      	movs	r1, #0
 8013284:	68f8      	ldr	r0, [r7, #12]
 8013286:	f003 f801 	bl	801628c <USBD_LL_PrepareReceive>
 801328a:	e018      	b.n	80132be <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013292:	b2db      	uxtb	r3, r3
 8013294:	2b03      	cmp	r3, #3
 8013296:	d10b      	bne.n	80132b0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d005      	beq.n	80132b0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132aa:	68db      	ldr	r3, [r3, #12]
 80132ac:	68f8      	ldr	r0, [r7, #12]
 80132ae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80132b0:	2180      	movs	r1, #128	; 0x80
 80132b2:	68f8      	ldr	r0, [r7, #12]
 80132b4:	f002 ff40 	bl	8016138 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80132b8:	68f8      	ldr	r0, [r7, #12]
 80132ba:	f000 ff93 	bl	80141e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80132c4:	2b01      	cmp	r3, #1
 80132c6:	d122      	bne.n	801330e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f7ff fe98 	bl	8012ffe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	2200      	movs	r2, #0
 80132d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80132d6:	e01a      	b.n	801330e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132de:	b2db      	uxtb	r3, r3
 80132e0:	2b03      	cmp	r3, #3
 80132e2:	d114      	bne.n	801330e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132ea:	695b      	ldr	r3, [r3, #20]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d00e      	beq.n	801330e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132f6:	695b      	ldr	r3, [r3, #20]
 80132f8:	7afa      	ldrb	r2, [r7, #11]
 80132fa:	4611      	mov	r1, r2
 80132fc:	68f8      	ldr	r0, [r7, #12]
 80132fe:	4798      	blx	r3
 8013300:	4603      	mov	r3, r0
 8013302:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013304:	7dfb      	ldrb	r3, [r7, #23]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d001      	beq.n	801330e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801330a:	7dfb      	ldrb	r3, [r7, #23]
 801330c:	e000      	b.n	8013310 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801330e:	2300      	movs	r3, #0
}
 8013310:	4618      	mov	r0, r3
 8013312:	3718      	adds	r7, #24
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b082      	sub	sp, #8
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2201      	movs	r2, #1
 8013324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2200      	movs	r2, #0
 801332c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2200      	movs	r2, #0
 8013334:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2200      	movs	r2, #0
 801333a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013344:	2b00      	cmp	r3, #0
 8013346:	d101      	bne.n	801334c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8013348:	2303      	movs	r3, #3
 801334a:	e02f      	b.n	80133ac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013352:	2b00      	cmp	r3, #0
 8013354:	d00f      	beq.n	8013376 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801335c:	685b      	ldr	r3, [r3, #4]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d009      	beq.n	8013376 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	6852      	ldr	r2, [r2, #4]
 801336e:	b2d2      	uxtb	r2, r2
 8013370:	4611      	mov	r1, r2
 8013372:	6878      	ldr	r0, [r7, #4]
 8013374:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013376:	2340      	movs	r3, #64	; 0x40
 8013378:	2200      	movs	r2, #0
 801337a:	2100      	movs	r1, #0
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f002 fe96 	bl	80160ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2201      	movs	r2, #1
 8013386:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	2240      	movs	r2, #64	; 0x40
 801338e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013392:	2340      	movs	r3, #64	; 0x40
 8013394:	2200      	movs	r2, #0
 8013396:	2180      	movs	r1, #128	; 0x80
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f002 fe88 	bl	80160ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2201      	movs	r2, #1
 80133a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2240      	movs	r2, #64	; 0x40
 80133a8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80133aa:	2300      	movs	r3, #0
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3708      	adds	r7, #8
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80133b4:	b480      	push	{r7}
 80133b6:	b083      	sub	sp, #12
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	460b      	mov	r3, r1
 80133be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	78fa      	ldrb	r2, [r7, #3]
 80133c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80133c6:	2300      	movs	r3, #0
}
 80133c8:	4618      	mov	r0, r3
 80133ca:	370c      	adds	r7, #12
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80133e2:	b2da      	uxtb	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2204      	movs	r2, #4
 80133ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80133f2:	2300      	movs	r3, #0
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	370c      	adds	r7, #12
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801340e:	b2db      	uxtb	r3, r3
 8013410:	2b04      	cmp	r3, #4
 8013412:	d106      	bne.n	8013422 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801341a:	b2da      	uxtb	r2, r3
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013422:	2300      	movs	r3, #0
}
 8013424:	4618      	mov	r0, r3
 8013426:	370c      	adds	r7, #12
 8013428:	46bd      	mov	sp, r7
 801342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342e:	4770      	bx	lr

08013430 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801343e:	2b00      	cmp	r3, #0
 8013440:	d101      	bne.n	8013446 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8013442:	2303      	movs	r3, #3
 8013444:	e012      	b.n	801346c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801344c:	b2db      	uxtb	r3, r3
 801344e:	2b03      	cmp	r3, #3
 8013450:	d10b      	bne.n	801346a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013458:	69db      	ldr	r3, [r3, #28]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d005      	beq.n	801346a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013464:	69db      	ldr	r3, [r3, #28]
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801346a:	2300      	movs	r3, #0
}
 801346c:	4618      	mov	r0, r3
 801346e:	3708      	adds	r7, #8
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	460b      	mov	r3, r1
 801347e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013486:	2b00      	cmp	r3, #0
 8013488:	d101      	bne.n	801348e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801348a:	2303      	movs	r3, #3
 801348c:	e014      	b.n	80134b8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013494:	b2db      	uxtb	r3, r3
 8013496:	2b03      	cmp	r3, #3
 8013498:	d10d      	bne.n	80134b6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134a0:	6a1b      	ldr	r3, [r3, #32]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d007      	beq.n	80134b6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134ac:	6a1b      	ldr	r3, [r3, #32]
 80134ae:	78fa      	ldrb	r2, [r7, #3]
 80134b0:	4611      	mov	r1, r2
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80134b6:	2300      	movs	r3, #0
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3708      	adds	r7, #8
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	460b      	mov	r3, r1
 80134ca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d101      	bne.n	80134da <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80134d6:	2303      	movs	r3, #3
 80134d8:	e014      	b.n	8013504 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134e0:	b2db      	uxtb	r3, r3
 80134e2:	2b03      	cmp	r3, #3
 80134e4:	d10d      	bne.n	8013502 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d007      	beq.n	8013502 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134fa:	78fa      	ldrb	r2, [r7, #3]
 80134fc:	4611      	mov	r1, r2
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013502:	2300      	movs	r3, #0
}
 8013504:	4618      	mov	r0, r3
 8013506:	3708      	adds	r7, #8
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801350c:	b480      	push	{r7}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013514:	2300      	movs	r3, #0
}
 8013516:	4618      	mov	r0, r3
 8013518:	370c      	adds	r7, #12
 801351a:	46bd      	mov	sp, r7
 801351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013520:	4770      	bx	lr

08013522 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013522:	b580      	push	{r7, lr}
 8013524:	b082      	sub	sp, #8
 8013526:	af00      	add	r7, sp, #0
 8013528:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	2201      	movs	r2, #1
 801352e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013538:	2b00      	cmp	r3, #0
 801353a:	d009      	beq.n	8013550 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	687a      	ldr	r2, [r7, #4]
 8013546:	6852      	ldr	r2, [r2, #4]
 8013548:	b2d2      	uxtb	r2, r2
 801354a:	4611      	mov	r1, r2
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	4798      	blx	r3
  }

  return USBD_OK;
 8013550:	2300      	movs	r3, #0
}
 8013552:	4618      	mov	r0, r3
 8013554:	3708      	adds	r7, #8
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}

0801355a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801355a:	b480      	push	{r7}
 801355c:	b087      	sub	sp, #28
 801355e:	af00      	add	r7, sp, #0
 8013560:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	3301      	adds	r3, #1
 8013570:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013578:	8a3b      	ldrh	r3, [r7, #16]
 801357a:	021b      	lsls	r3, r3, #8
 801357c:	b21a      	sxth	r2, r3
 801357e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013582:	4313      	orrs	r3, r2
 8013584:	b21b      	sxth	r3, r3
 8013586:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013588:	89fb      	ldrh	r3, [r7, #14]
}
 801358a:	4618      	mov	r0, r3
 801358c:	371c      	adds	r7, #28
 801358e:	46bd      	mov	sp, r7
 8013590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013594:	4770      	bx	lr
	...

08013598 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80135a2:	2300      	movs	r3, #0
 80135a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80135ae:	2b40      	cmp	r3, #64	; 0x40
 80135b0:	d005      	beq.n	80135be <USBD_StdDevReq+0x26>
 80135b2:	2b40      	cmp	r3, #64	; 0x40
 80135b4:	d853      	bhi.n	801365e <USBD_StdDevReq+0xc6>
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d00b      	beq.n	80135d2 <USBD_StdDevReq+0x3a>
 80135ba:	2b20      	cmp	r3, #32
 80135bc:	d14f      	bne.n	801365e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135c4:	689b      	ldr	r3, [r3, #8]
 80135c6:	6839      	ldr	r1, [r7, #0]
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	4798      	blx	r3
 80135cc:	4603      	mov	r3, r0
 80135ce:	73fb      	strb	r3, [r7, #15]
      break;
 80135d0:	e04a      	b.n	8013668 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	785b      	ldrb	r3, [r3, #1]
 80135d6:	2b09      	cmp	r3, #9
 80135d8:	d83b      	bhi.n	8013652 <USBD_StdDevReq+0xba>
 80135da:	a201      	add	r2, pc, #4	; (adr r2, 80135e0 <USBD_StdDevReq+0x48>)
 80135dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e0:	08013635 	.word	0x08013635
 80135e4:	08013649 	.word	0x08013649
 80135e8:	08013653 	.word	0x08013653
 80135ec:	0801363f 	.word	0x0801363f
 80135f0:	08013653 	.word	0x08013653
 80135f4:	08013613 	.word	0x08013613
 80135f8:	08013609 	.word	0x08013609
 80135fc:	08013653 	.word	0x08013653
 8013600:	0801362b 	.word	0x0801362b
 8013604:	0801361d 	.word	0x0801361d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013608:	6839      	ldr	r1, [r7, #0]
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f000 f9de 	bl	80139cc <USBD_GetDescriptor>
          break;
 8013610:	e024      	b.n	801365c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013612:	6839      	ldr	r1, [r7, #0]
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f000 fb43 	bl	8013ca0 <USBD_SetAddress>
          break;
 801361a:	e01f      	b.n	801365c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801361c:	6839      	ldr	r1, [r7, #0]
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f000 fb82 	bl	8013d28 <USBD_SetConfig>
 8013624:	4603      	mov	r3, r0
 8013626:	73fb      	strb	r3, [r7, #15]
          break;
 8013628:	e018      	b.n	801365c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801362a:	6839      	ldr	r1, [r7, #0]
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f000 fc21 	bl	8013e74 <USBD_GetConfig>
          break;
 8013632:	e013      	b.n	801365c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013634:	6839      	ldr	r1, [r7, #0]
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f000 fc52 	bl	8013ee0 <USBD_GetStatus>
          break;
 801363c:	e00e      	b.n	801365c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801363e:	6839      	ldr	r1, [r7, #0]
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f000 fc81 	bl	8013f48 <USBD_SetFeature>
          break;
 8013646:	e009      	b.n	801365c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013648:	6839      	ldr	r1, [r7, #0]
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f000 fc90 	bl	8013f70 <USBD_ClrFeature>
          break;
 8013650:	e004      	b.n	801365c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8013652:	6839      	ldr	r1, [r7, #0]
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f000 fce7 	bl	8014028 <USBD_CtlError>
          break;
 801365a:	bf00      	nop
      }
      break;
 801365c:	e004      	b.n	8013668 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801365e:	6839      	ldr	r1, [r7, #0]
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f000 fce1 	bl	8014028 <USBD_CtlError>
      break;
 8013666:	bf00      	nop
  }

  return ret;
 8013668:	7bfb      	ldrb	r3, [r7, #15]
}
 801366a:	4618      	mov	r0, r3
 801366c:	3710      	adds	r7, #16
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop

08013674 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801367e:	2300      	movs	r3, #0
 8013680:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801368a:	2b40      	cmp	r3, #64	; 0x40
 801368c:	d005      	beq.n	801369a <USBD_StdItfReq+0x26>
 801368e:	2b40      	cmp	r3, #64	; 0x40
 8013690:	d82f      	bhi.n	80136f2 <USBD_StdItfReq+0x7e>
 8013692:	2b00      	cmp	r3, #0
 8013694:	d001      	beq.n	801369a <USBD_StdItfReq+0x26>
 8013696:	2b20      	cmp	r3, #32
 8013698:	d12b      	bne.n	80136f2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	3b01      	subs	r3, #1
 80136a4:	2b02      	cmp	r3, #2
 80136a6:	d81d      	bhi.n	80136e4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	889b      	ldrh	r3, [r3, #4]
 80136ac:	b2db      	uxtb	r3, r3
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	d813      	bhi.n	80136da <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136b8:	689b      	ldr	r3, [r3, #8]
 80136ba:	6839      	ldr	r1, [r7, #0]
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	4798      	blx	r3
 80136c0:	4603      	mov	r3, r0
 80136c2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	88db      	ldrh	r3, [r3, #6]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d110      	bne.n	80136ee <USBD_StdItfReq+0x7a>
 80136cc:	7bfb      	ldrb	r3, [r7, #15]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d10d      	bne.n	80136ee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f000 fd73 	bl	80141be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80136d8:	e009      	b.n	80136ee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80136da:	6839      	ldr	r1, [r7, #0]
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 fca3 	bl	8014028 <USBD_CtlError>
          break;
 80136e2:	e004      	b.n	80136ee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80136e4:	6839      	ldr	r1, [r7, #0]
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f000 fc9e 	bl	8014028 <USBD_CtlError>
          break;
 80136ec:	e000      	b.n	80136f0 <USBD_StdItfReq+0x7c>
          break;
 80136ee:	bf00      	nop
      }
      break;
 80136f0:	e004      	b.n	80136fc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80136f2:	6839      	ldr	r1, [r7, #0]
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f000 fc97 	bl	8014028 <USBD_CtlError>
      break;
 80136fa:	bf00      	nop
  }

  return ret;
 80136fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80136fe:	4618      	mov	r0, r3
 8013700:	3710      	adds	r7, #16
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}

08013706 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013706:	b580      	push	{r7, lr}
 8013708:	b084      	sub	sp, #16
 801370a:	af00      	add	r7, sp, #0
 801370c:	6078      	str	r0, [r7, #4]
 801370e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013710:	2300      	movs	r3, #0
 8013712:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	889b      	ldrh	r3, [r3, #4]
 8013718:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801371a:	683b      	ldr	r3, [r7, #0]
 801371c:	781b      	ldrb	r3, [r3, #0]
 801371e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013722:	2b40      	cmp	r3, #64	; 0x40
 8013724:	d007      	beq.n	8013736 <USBD_StdEPReq+0x30>
 8013726:	2b40      	cmp	r3, #64	; 0x40
 8013728:	f200 8145 	bhi.w	80139b6 <USBD_StdEPReq+0x2b0>
 801372c:	2b00      	cmp	r3, #0
 801372e:	d00c      	beq.n	801374a <USBD_StdEPReq+0x44>
 8013730:	2b20      	cmp	r3, #32
 8013732:	f040 8140 	bne.w	80139b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801373c:	689b      	ldr	r3, [r3, #8]
 801373e:	6839      	ldr	r1, [r7, #0]
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	4798      	blx	r3
 8013744:	4603      	mov	r3, r0
 8013746:	73fb      	strb	r3, [r7, #15]
      break;
 8013748:	e13a      	b.n	80139c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	785b      	ldrb	r3, [r3, #1]
 801374e:	2b03      	cmp	r3, #3
 8013750:	d007      	beq.n	8013762 <USBD_StdEPReq+0x5c>
 8013752:	2b03      	cmp	r3, #3
 8013754:	f300 8129 	bgt.w	80139aa <USBD_StdEPReq+0x2a4>
 8013758:	2b00      	cmp	r3, #0
 801375a:	d07f      	beq.n	801385c <USBD_StdEPReq+0x156>
 801375c:	2b01      	cmp	r3, #1
 801375e:	d03c      	beq.n	80137da <USBD_StdEPReq+0xd4>
 8013760:	e123      	b.n	80139aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013768:	b2db      	uxtb	r3, r3
 801376a:	2b02      	cmp	r3, #2
 801376c:	d002      	beq.n	8013774 <USBD_StdEPReq+0x6e>
 801376e:	2b03      	cmp	r3, #3
 8013770:	d016      	beq.n	80137a0 <USBD_StdEPReq+0x9a>
 8013772:	e02c      	b.n	80137ce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013774:	7bbb      	ldrb	r3, [r7, #14]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d00d      	beq.n	8013796 <USBD_StdEPReq+0x90>
 801377a:	7bbb      	ldrb	r3, [r7, #14]
 801377c:	2b80      	cmp	r3, #128	; 0x80
 801377e:	d00a      	beq.n	8013796 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013780:	7bbb      	ldrb	r3, [r7, #14]
 8013782:	4619      	mov	r1, r3
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f002 fcd7 	bl	8016138 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801378a:	2180      	movs	r1, #128	; 0x80
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f002 fcd3 	bl	8016138 <USBD_LL_StallEP>
 8013792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013794:	e020      	b.n	80137d8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8013796:	6839      	ldr	r1, [r7, #0]
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f000 fc45 	bl	8014028 <USBD_CtlError>
              break;
 801379e:	e01b      	b.n	80137d8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	885b      	ldrh	r3, [r3, #2]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d10e      	bne.n	80137c6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80137a8:	7bbb      	ldrb	r3, [r7, #14]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00b      	beq.n	80137c6 <USBD_StdEPReq+0xc0>
 80137ae:	7bbb      	ldrb	r3, [r7, #14]
 80137b0:	2b80      	cmp	r3, #128	; 0x80
 80137b2:	d008      	beq.n	80137c6 <USBD_StdEPReq+0xc0>
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	88db      	ldrh	r3, [r3, #6]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d104      	bne.n	80137c6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80137bc:	7bbb      	ldrb	r3, [r7, #14]
 80137be:	4619      	mov	r1, r3
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f002 fcb9 	bl	8016138 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f000 fcf9 	bl	80141be <USBD_CtlSendStatus>

              break;
 80137cc:	e004      	b.n	80137d8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80137ce:	6839      	ldr	r1, [r7, #0]
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f000 fc29 	bl	8014028 <USBD_CtlError>
              break;
 80137d6:	bf00      	nop
          }
          break;
 80137d8:	e0ec      	b.n	80139b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137e0:	b2db      	uxtb	r3, r3
 80137e2:	2b02      	cmp	r3, #2
 80137e4:	d002      	beq.n	80137ec <USBD_StdEPReq+0xe6>
 80137e6:	2b03      	cmp	r3, #3
 80137e8:	d016      	beq.n	8013818 <USBD_StdEPReq+0x112>
 80137ea:	e030      	b.n	801384e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80137ec:	7bbb      	ldrb	r3, [r7, #14]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d00d      	beq.n	801380e <USBD_StdEPReq+0x108>
 80137f2:	7bbb      	ldrb	r3, [r7, #14]
 80137f4:	2b80      	cmp	r3, #128	; 0x80
 80137f6:	d00a      	beq.n	801380e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80137f8:	7bbb      	ldrb	r3, [r7, #14]
 80137fa:	4619      	mov	r1, r3
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	f002 fc9b 	bl	8016138 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013802:	2180      	movs	r1, #128	; 0x80
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f002 fc97 	bl	8016138 <USBD_LL_StallEP>
 801380a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801380c:	e025      	b.n	801385a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801380e:	6839      	ldr	r1, [r7, #0]
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f000 fc09 	bl	8014028 <USBD_CtlError>
              break;
 8013816:	e020      	b.n	801385a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	885b      	ldrh	r3, [r3, #2]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d11b      	bne.n	8013858 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013820:	7bbb      	ldrb	r3, [r7, #14]
 8013822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013826:	2b00      	cmp	r3, #0
 8013828:	d004      	beq.n	8013834 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801382a:	7bbb      	ldrb	r3, [r7, #14]
 801382c:	4619      	mov	r1, r3
 801382e:	6878      	ldr	r0, [r7, #4]
 8013830:	f002 fca1 	bl	8016176 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f000 fcc2 	bl	80141be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013840:	689b      	ldr	r3, [r3, #8]
 8013842:	6839      	ldr	r1, [r7, #0]
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	4798      	blx	r3
 8013848:	4603      	mov	r3, r0
 801384a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801384c:	e004      	b.n	8013858 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801384e:	6839      	ldr	r1, [r7, #0]
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f000 fbe9 	bl	8014028 <USBD_CtlError>
              break;
 8013856:	e000      	b.n	801385a <USBD_StdEPReq+0x154>
              break;
 8013858:	bf00      	nop
          }
          break;
 801385a:	e0ab      	b.n	80139b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013862:	b2db      	uxtb	r3, r3
 8013864:	2b02      	cmp	r3, #2
 8013866:	d002      	beq.n	801386e <USBD_StdEPReq+0x168>
 8013868:	2b03      	cmp	r3, #3
 801386a:	d032      	beq.n	80138d2 <USBD_StdEPReq+0x1cc>
 801386c:	e097      	b.n	801399e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801386e:	7bbb      	ldrb	r3, [r7, #14]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d007      	beq.n	8013884 <USBD_StdEPReq+0x17e>
 8013874:	7bbb      	ldrb	r3, [r7, #14]
 8013876:	2b80      	cmp	r3, #128	; 0x80
 8013878:	d004      	beq.n	8013884 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801387a:	6839      	ldr	r1, [r7, #0]
 801387c:	6878      	ldr	r0, [r7, #4]
 801387e:	f000 fbd3 	bl	8014028 <USBD_CtlError>
                break;
 8013882:	e091      	b.n	80139a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013888:	2b00      	cmp	r3, #0
 801388a:	da0b      	bge.n	80138a4 <USBD_StdEPReq+0x19e>
 801388c:	7bbb      	ldrb	r3, [r7, #14]
 801388e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013892:	4613      	mov	r3, r2
 8013894:	009b      	lsls	r3, r3, #2
 8013896:	4413      	add	r3, r2
 8013898:	009b      	lsls	r3, r3, #2
 801389a:	3310      	adds	r3, #16
 801389c:	687a      	ldr	r2, [r7, #4]
 801389e:	4413      	add	r3, r2
 80138a0:	3304      	adds	r3, #4
 80138a2:	e00b      	b.n	80138bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80138a4:	7bbb      	ldrb	r3, [r7, #14]
 80138a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80138aa:	4613      	mov	r3, r2
 80138ac:	009b      	lsls	r3, r3, #2
 80138ae:	4413      	add	r3, r2
 80138b0:	009b      	lsls	r3, r3, #2
 80138b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	4413      	add	r3, r2
 80138ba:	3304      	adds	r3, #4
 80138bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	2200      	movs	r2, #0
 80138c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	2202      	movs	r2, #2
 80138c8:	4619      	mov	r1, r3
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f000 fc1d 	bl	801410a <USBD_CtlSendData>
              break;
 80138d0:	e06a      	b.n	80139a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80138d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	da11      	bge.n	80138fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80138da:	7bbb      	ldrb	r3, [r7, #14]
 80138dc:	f003 020f 	and.w	r2, r3, #15
 80138e0:	6879      	ldr	r1, [r7, #4]
 80138e2:	4613      	mov	r3, r2
 80138e4:	009b      	lsls	r3, r3, #2
 80138e6:	4413      	add	r3, r2
 80138e8:	009b      	lsls	r3, r3, #2
 80138ea:	440b      	add	r3, r1
 80138ec:	3324      	adds	r3, #36	; 0x24
 80138ee:	881b      	ldrh	r3, [r3, #0]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d117      	bne.n	8013924 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80138f4:	6839      	ldr	r1, [r7, #0]
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f000 fb96 	bl	8014028 <USBD_CtlError>
                  break;
 80138fc:	e054      	b.n	80139a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80138fe:	7bbb      	ldrb	r3, [r7, #14]
 8013900:	f003 020f 	and.w	r2, r3, #15
 8013904:	6879      	ldr	r1, [r7, #4]
 8013906:	4613      	mov	r3, r2
 8013908:	009b      	lsls	r3, r3, #2
 801390a:	4413      	add	r3, r2
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	440b      	add	r3, r1
 8013910:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013914:	881b      	ldrh	r3, [r3, #0]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d104      	bne.n	8013924 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801391a:	6839      	ldr	r1, [r7, #0]
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f000 fb83 	bl	8014028 <USBD_CtlError>
                  break;
 8013922:	e041      	b.n	80139a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013928:	2b00      	cmp	r3, #0
 801392a:	da0b      	bge.n	8013944 <USBD_StdEPReq+0x23e>
 801392c:	7bbb      	ldrb	r3, [r7, #14]
 801392e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013932:	4613      	mov	r3, r2
 8013934:	009b      	lsls	r3, r3, #2
 8013936:	4413      	add	r3, r2
 8013938:	009b      	lsls	r3, r3, #2
 801393a:	3310      	adds	r3, #16
 801393c:	687a      	ldr	r2, [r7, #4]
 801393e:	4413      	add	r3, r2
 8013940:	3304      	adds	r3, #4
 8013942:	e00b      	b.n	801395c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013944:	7bbb      	ldrb	r3, [r7, #14]
 8013946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801394a:	4613      	mov	r3, r2
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	4413      	add	r3, r2
 8013950:	009b      	lsls	r3, r3, #2
 8013952:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013956:	687a      	ldr	r2, [r7, #4]
 8013958:	4413      	add	r3, r2
 801395a:	3304      	adds	r3, #4
 801395c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801395e:	7bbb      	ldrb	r3, [r7, #14]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d002      	beq.n	801396a <USBD_StdEPReq+0x264>
 8013964:	7bbb      	ldrb	r3, [r7, #14]
 8013966:	2b80      	cmp	r3, #128	; 0x80
 8013968:	d103      	bne.n	8013972 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	2200      	movs	r2, #0
 801396e:	601a      	str	r2, [r3, #0]
 8013970:	e00e      	b.n	8013990 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013972:	7bbb      	ldrb	r3, [r7, #14]
 8013974:	4619      	mov	r1, r3
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f002 fc1c 	bl	80161b4 <USBD_LL_IsStallEP>
 801397c:	4603      	mov	r3, r0
 801397e:	2b00      	cmp	r3, #0
 8013980:	d003      	beq.n	801398a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	2201      	movs	r2, #1
 8013986:	601a      	str	r2, [r3, #0]
 8013988:	e002      	b.n	8013990 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	2200      	movs	r2, #0
 801398e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	2202      	movs	r2, #2
 8013994:	4619      	mov	r1, r3
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 fbb7 	bl	801410a <USBD_CtlSendData>
              break;
 801399c:	e004      	b.n	80139a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801399e:	6839      	ldr	r1, [r7, #0]
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f000 fb41 	bl	8014028 <USBD_CtlError>
              break;
 80139a6:	bf00      	nop
          }
          break;
 80139a8:	e004      	b.n	80139b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80139aa:	6839      	ldr	r1, [r7, #0]
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f000 fb3b 	bl	8014028 <USBD_CtlError>
          break;
 80139b2:	bf00      	nop
      }
      break;
 80139b4:	e004      	b.n	80139c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80139b6:	6839      	ldr	r1, [r7, #0]
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f000 fb35 	bl	8014028 <USBD_CtlError>
      break;
 80139be:	bf00      	nop
  }

  return ret;
 80139c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3710      	adds	r7, #16
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}
	...

080139cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b084      	sub	sp, #16
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80139d6:	2300      	movs	r3, #0
 80139d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80139da:	2300      	movs	r3, #0
 80139dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80139de:	2300      	movs	r3, #0
 80139e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	885b      	ldrh	r3, [r3, #2]
 80139e6:	0a1b      	lsrs	r3, r3, #8
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	3b01      	subs	r3, #1
 80139ec:	2b06      	cmp	r3, #6
 80139ee:	f200 8128 	bhi.w	8013c42 <USBD_GetDescriptor+0x276>
 80139f2:	a201      	add	r2, pc, #4	; (adr r2, 80139f8 <USBD_GetDescriptor+0x2c>)
 80139f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139f8:	08013a15 	.word	0x08013a15
 80139fc:	08013a2d 	.word	0x08013a2d
 8013a00:	08013a6d 	.word	0x08013a6d
 8013a04:	08013c43 	.word	0x08013c43
 8013a08:	08013c43 	.word	0x08013c43
 8013a0c:	08013be3 	.word	0x08013be3
 8013a10:	08013c0f 	.word	0x08013c0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	687a      	ldr	r2, [r7, #4]
 8013a1e:	7c12      	ldrb	r2, [r2, #16]
 8013a20:	f107 0108 	add.w	r1, r7, #8
 8013a24:	4610      	mov	r0, r2
 8013a26:	4798      	blx	r3
 8013a28:	60f8      	str	r0, [r7, #12]
      break;
 8013a2a:	e112      	b.n	8013c52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	7c1b      	ldrb	r3, [r3, #16]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d10d      	bne.n	8013a50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a3c:	f107 0208 	add.w	r2, r7, #8
 8013a40:	4610      	mov	r0, r2
 8013a42:	4798      	blx	r3
 8013a44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	3301      	adds	r3, #1
 8013a4a:	2202      	movs	r2, #2
 8013a4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013a4e:	e100      	b.n	8013c52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a58:	f107 0208 	add.w	r2, r7, #8
 8013a5c:	4610      	mov	r0, r2
 8013a5e:	4798      	blx	r3
 8013a60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	3301      	adds	r3, #1
 8013a66:	2202      	movs	r2, #2
 8013a68:	701a      	strb	r2, [r3, #0]
      break;
 8013a6a:	e0f2      	b.n	8013c52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	885b      	ldrh	r3, [r3, #2]
 8013a70:	b2db      	uxtb	r3, r3
 8013a72:	2b05      	cmp	r3, #5
 8013a74:	f200 80ac 	bhi.w	8013bd0 <USBD_GetDescriptor+0x204>
 8013a78:	a201      	add	r2, pc, #4	; (adr r2, 8013a80 <USBD_GetDescriptor+0xb4>)
 8013a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a7e:	bf00      	nop
 8013a80:	08013a99 	.word	0x08013a99
 8013a84:	08013acd 	.word	0x08013acd
 8013a88:	08013b01 	.word	0x08013b01
 8013a8c:	08013b35 	.word	0x08013b35
 8013a90:	08013b69 	.word	0x08013b69
 8013a94:	08013b9d 	.word	0x08013b9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d00b      	beq.n	8013abc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	7c12      	ldrb	r2, [r2, #16]
 8013ab0:	f107 0108 	add.w	r1, r7, #8
 8013ab4:	4610      	mov	r0, r2
 8013ab6:	4798      	blx	r3
 8013ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013aba:	e091      	b.n	8013be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013abc:	6839      	ldr	r1, [r7, #0]
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f000 fab2 	bl	8014028 <USBD_CtlError>
            err++;
 8013ac4:	7afb      	ldrb	r3, [r7, #11]
 8013ac6:	3301      	adds	r3, #1
 8013ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8013aca:	e089      	b.n	8013be0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ad2:	689b      	ldr	r3, [r3, #8]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d00b      	beq.n	8013af0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ade:	689b      	ldr	r3, [r3, #8]
 8013ae0:	687a      	ldr	r2, [r7, #4]
 8013ae2:	7c12      	ldrb	r2, [r2, #16]
 8013ae4:	f107 0108 	add.w	r1, r7, #8
 8013ae8:	4610      	mov	r0, r2
 8013aea:	4798      	blx	r3
 8013aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013aee:	e077      	b.n	8013be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013af0:	6839      	ldr	r1, [r7, #0]
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f000 fa98 	bl	8014028 <USBD_CtlError>
            err++;
 8013af8:	7afb      	ldrb	r3, [r7, #11]
 8013afa:	3301      	adds	r3, #1
 8013afc:	72fb      	strb	r3, [r7, #11]
          break;
 8013afe:	e06f      	b.n	8013be0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d00b      	beq.n	8013b24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b12:	68db      	ldr	r3, [r3, #12]
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	7c12      	ldrb	r2, [r2, #16]
 8013b18:	f107 0108 	add.w	r1, r7, #8
 8013b1c:	4610      	mov	r0, r2
 8013b1e:	4798      	blx	r3
 8013b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b22:	e05d      	b.n	8013be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013b24:	6839      	ldr	r1, [r7, #0]
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f000 fa7e 	bl	8014028 <USBD_CtlError>
            err++;
 8013b2c:	7afb      	ldrb	r3, [r7, #11]
 8013b2e:	3301      	adds	r3, #1
 8013b30:	72fb      	strb	r3, [r7, #11]
          break;
 8013b32:	e055      	b.n	8013be0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b3a:	691b      	ldr	r3, [r3, #16]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d00b      	beq.n	8013b58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b46:	691b      	ldr	r3, [r3, #16]
 8013b48:	687a      	ldr	r2, [r7, #4]
 8013b4a:	7c12      	ldrb	r2, [r2, #16]
 8013b4c:	f107 0108 	add.w	r1, r7, #8
 8013b50:	4610      	mov	r0, r2
 8013b52:	4798      	blx	r3
 8013b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b56:	e043      	b.n	8013be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013b58:	6839      	ldr	r1, [r7, #0]
 8013b5a:	6878      	ldr	r0, [r7, #4]
 8013b5c:	f000 fa64 	bl	8014028 <USBD_CtlError>
            err++;
 8013b60:	7afb      	ldrb	r3, [r7, #11]
 8013b62:	3301      	adds	r3, #1
 8013b64:	72fb      	strb	r3, [r7, #11]
          break;
 8013b66:	e03b      	b.n	8013be0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b6e:	695b      	ldr	r3, [r3, #20]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d00b      	beq.n	8013b8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b7a:	695b      	ldr	r3, [r3, #20]
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	7c12      	ldrb	r2, [r2, #16]
 8013b80:	f107 0108 	add.w	r1, r7, #8
 8013b84:	4610      	mov	r0, r2
 8013b86:	4798      	blx	r3
 8013b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b8a:	e029      	b.n	8013be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013b8c:	6839      	ldr	r1, [r7, #0]
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 fa4a 	bl	8014028 <USBD_CtlError>
            err++;
 8013b94:	7afb      	ldrb	r3, [r7, #11]
 8013b96:	3301      	adds	r3, #1
 8013b98:	72fb      	strb	r3, [r7, #11]
          break;
 8013b9a:	e021      	b.n	8013be0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ba2:	699b      	ldr	r3, [r3, #24]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d00b      	beq.n	8013bc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bae:	699b      	ldr	r3, [r3, #24]
 8013bb0:	687a      	ldr	r2, [r7, #4]
 8013bb2:	7c12      	ldrb	r2, [r2, #16]
 8013bb4:	f107 0108 	add.w	r1, r7, #8
 8013bb8:	4610      	mov	r0, r2
 8013bba:	4798      	blx	r3
 8013bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013bbe:	e00f      	b.n	8013be0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013bc0:	6839      	ldr	r1, [r7, #0]
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f000 fa30 	bl	8014028 <USBD_CtlError>
            err++;
 8013bc8:	7afb      	ldrb	r3, [r7, #11]
 8013bca:	3301      	adds	r3, #1
 8013bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8013bce:	e007      	b.n	8013be0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013bd0:	6839      	ldr	r1, [r7, #0]
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 fa28 	bl	8014028 <USBD_CtlError>
          err++;
 8013bd8:	7afb      	ldrb	r3, [r7, #11]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013bde:	bf00      	nop
      }
      break;
 8013be0:	e037      	b.n	8013c52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	7c1b      	ldrb	r3, [r3, #16]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d109      	bne.n	8013bfe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bf2:	f107 0208 	add.w	r2, r7, #8
 8013bf6:	4610      	mov	r0, r2
 8013bf8:	4798      	blx	r3
 8013bfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013bfc:	e029      	b.n	8013c52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013bfe:	6839      	ldr	r1, [r7, #0]
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f000 fa11 	bl	8014028 <USBD_CtlError>
        err++;
 8013c06:	7afb      	ldrb	r3, [r7, #11]
 8013c08:	3301      	adds	r3, #1
 8013c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8013c0c:	e021      	b.n	8013c52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	7c1b      	ldrb	r3, [r3, #16]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d10d      	bne.n	8013c32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c1e:	f107 0208 	add.w	r2, r7, #8
 8013c22:	4610      	mov	r0, r2
 8013c24:	4798      	blx	r3
 8013c26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	2207      	movs	r2, #7
 8013c2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013c30:	e00f      	b.n	8013c52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013c32:	6839      	ldr	r1, [r7, #0]
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f000 f9f7 	bl	8014028 <USBD_CtlError>
        err++;
 8013c3a:	7afb      	ldrb	r3, [r7, #11]
 8013c3c:	3301      	adds	r3, #1
 8013c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8013c40:	e007      	b.n	8013c52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8013c42:	6839      	ldr	r1, [r7, #0]
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f000 f9ef 	bl	8014028 <USBD_CtlError>
      err++;
 8013c4a:	7afb      	ldrb	r3, [r7, #11]
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8013c50:	bf00      	nop
  }

  if (err != 0U)
 8013c52:	7afb      	ldrb	r3, [r7, #11]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d11e      	bne.n	8013c96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	88db      	ldrh	r3, [r3, #6]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d016      	beq.n	8013c8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8013c60:	893b      	ldrh	r3, [r7, #8]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d00e      	beq.n	8013c84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	88da      	ldrh	r2, [r3, #6]
 8013c6a:	893b      	ldrh	r3, [r7, #8]
 8013c6c:	4293      	cmp	r3, r2
 8013c6e:	bf28      	it	cs
 8013c70:	4613      	movcs	r3, r2
 8013c72:	b29b      	uxth	r3, r3
 8013c74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013c76:	893b      	ldrh	r3, [r7, #8]
 8013c78:	461a      	mov	r2, r3
 8013c7a:	68f9      	ldr	r1, [r7, #12]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f000 fa44 	bl	801410a <USBD_CtlSendData>
 8013c82:	e009      	b.n	8013c98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013c84:	6839      	ldr	r1, [r7, #0]
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f000 f9ce 	bl	8014028 <USBD_CtlError>
 8013c8c:	e004      	b.n	8013c98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f000 fa95 	bl	80141be <USBD_CtlSendStatus>
 8013c94:	e000      	b.n	8013c98 <USBD_GetDescriptor+0x2cc>
    return;
 8013c96:	bf00      	nop
  }
}
 8013c98:	3710      	adds	r7, #16
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop

08013ca0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	889b      	ldrh	r3, [r3, #4]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d131      	bne.n	8013d16 <USBD_SetAddress+0x76>
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	88db      	ldrh	r3, [r3, #6]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d12d      	bne.n	8013d16 <USBD_SetAddress+0x76>
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	885b      	ldrh	r3, [r3, #2]
 8013cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8013cc0:	d829      	bhi.n	8013d16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	885b      	ldrh	r3, [r3, #2]
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ccc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cd4:	b2db      	uxtb	r3, r3
 8013cd6:	2b03      	cmp	r3, #3
 8013cd8:	d104      	bne.n	8013ce4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013cda:	6839      	ldr	r1, [r7, #0]
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f000 f9a3 	bl	8014028 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ce2:	e01d      	b.n	8013d20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	7bfa      	ldrb	r2, [r7, #15]
 8013ce8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013cec:	7bfb      	ldrb	r3, [r7, #15]
 8013cee:	4619      	mov	r1, r3
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f002 fa8b 	bl	801620c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f000 fa61 	bl	80141be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013cfc:	7bfb      	ldrb	r3, [r7, #15]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d004      	beq.n	8013d0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2202      	movs	r2, #2
 8013d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d0a:	e009      	b.n	8013d20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2201      	movs	r2, #1
 8013d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d14:	e004      	b.n	8013d20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013d16:	6839      	ldr	r1, [r7, #0]
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f000 f985 	bl	8014028 <USBD_CtlError>
  }
}
 8013d1e:	bf00      	nop
 8013d20:	bf00      	nop
 8013d22:	3710      	adds	r7, #16
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d32:	2300      	movs	r3, #0
 8013d34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	885b      	ldrh	r3, [r3, #2]
 8013d3a:	b2da      	uxtb	r2, r3
 8013d3c:	4b4c      	ldr	r3, [pc, #304]	; (8013e70 <USBD_SetConfig+0x148>)
 8013d3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013d40:	4b4b      	ldr	r3, [pc, #300]	; (8013e70 <USBD_SetConfig+0x148>)
 8013d42:	781b      	ldrb	r3, [r3, #0]
 8013d44:	2b01      	cmp	r3, #1
 8013d46:	d905      	bls.n	8013d54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013d48:	6839      	ldr	r1, [r7, #0]
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	f000 f96c 	bl	8014028 <USBD_CtlError>
    return USBD_FAIL;
 8013d50:	2303      	movs	r3, #3
 8013d52:	e088      	b.n	8013e66 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d5a:	b2db      	uxtb	r3, r3
 8013d5c:	2b02      	cmp	r3, #2
 8013d5e:	d002      	beq.n	8013d66 <USBD_SetConfig+0x3e>
 8013d60:	2b03      	cmp	r3, #3
 8013d62:	d025      	beq.n	8013db0 <USBD_SetConfig+0x88>
 8013d64:	e071      	b.n	8013e4a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013d66:	4b42      	ldr	r3, [pc, #264]	; (8013e70 <USBD_SetConfig+0x148>)
 8013d68:	781b      	ldrb	r3, [r3, #0]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d01c      	beq.n	8013da8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8013d6e:	4b40      	ldr	r3, [pc, #256]	; (8013e70 <USBD_SetConfig+0x148>)
 8013d70:	781b      	ldrb	r3, [r3, #0]
 8013d72:	461a      	mov	r2, r3
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013d78:	4b3d      	ldr	r3, [pc, #244]	; (8013e70 <USBD_SetConfig+0x148>)
 8013d7a:	781b      	ldrb	r3, [r3, #0]
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f7ff f948 	bl	8013014 <USBD_SetClassConfig>
 8013d84:	4603      	mov	r3, r0
 8013d86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013d88:	7bfb      	ldrb	r3, [r7, #15]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d004      	beq.n	8013d98 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8013d8e:	6839      	ldr	r1, [r7, #0]
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f000 f949 	bl	8014028 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013d96:	e065      	b.n	8013e64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	f000 fa10 	bl	80141be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2203      	movs	r2, #3
 8013da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013da6:	e05d      	b.n	8013e64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f000 fa08 	bl	80141be <USBD_CtlSendStatus>
      break;
 8013dae:	e059      	b.n	8013e64 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013db0:	4b2f      	ldr	r3, [pc, #188]	; (8013e70 <USBD_SetConfig+0x148>)
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d112      	bne.n	8013dde <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	2202      	movs	r2, #2
 8013dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013dc0:	4b2b      	ldr	r3, [pc, #172]	; (8013e70 <USBD_SetConfig+0x148>)
 8013dc2:	781b      	ldrb	r3, [r3, #0]
 8013dc4:	461a      	mov	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013dca:	4b29      	ldr	r3, [pc, #164]	; (8013e70 <USBD_SetConfig+0x148>)
 8013dcc:	781b      	ldrb	r3, [r3, #0]
 8013dce:	4619      	mov	r1, r3
 8013dd0:	6878      	ldr	r0, [r7, #4]
 8013dd2:	f7ff f93b 	bl	801304c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f000 f9f1 	bl	80141be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013ddc:	e042      	b.n	8013e64 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8013dde:	4b24      	ldr	r3, [pc, #144]	; (8013e70 <USBD_SetConfig+0x148>)
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	461a      	mov	r2, r3
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d02a      	beq.n	8013e42 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	685b      	ldr	r3, [r3, #4]
 8013df0:	b2db      	uxtb	r3, r3
 8013df2:	4619      	mov	r1, r3
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f7ff f929 	bl	801304c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013dfa:	4b1d      	ldr	r3, [pc, #116]	; (8013e70 <USBD_SetConfig+0x148>)
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	461a      	mov	r2, r3
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013e04:	4b1a      	ldr	r3, [pc, #104]	; (8013e70 <USBD_SetConfig+0x148>)
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	4619      	mov	r1, r3
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f7ff f902 	bl	8013014 <USBD_SetClassConfig>
 8013e10:	4603      	mov	r3, r0
 8013e12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013e14:	7bfb      	ldrb	r3, [r7, #15]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d00f      	beq.n	8013e3a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8013e1a:	6839      	ldr	r1, [r7, #0]
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f000 f903 	bl	8014028 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	b2db      	uxtb	r3, r3
 8013e28:	4619      	mov	r1, r3
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f7ff f90e 	bl	801304c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2202      	movs	r2, #2
 8013e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013e38:	e014      	b.n	8013e64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 f9bf 	bl	80141be <USBD_CtlSendStatus>
      break;
 8013e40:	e010      	b.n	8013e64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f000 f9bb 	bl	80141be <USBD_CtlSendStatus>
      break;
 8013e48:	e00c      	b.n	8013e64 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8013e4a:	6839      	ldr	r1, [r7, #0]
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f000 f8eb 	bl	8014028 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013e52:	4b07      	ldr	r3, [pc, #28]	; (8013e70 <USBD_SetConfig+0x148>)
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	4619      	mov	r1, r3
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7ff f8f7 	bl	801304c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013e5e:	2303      	movs	r3, #3
 8013e60:	73fb      	strb	r3, [r7, #15]
      break;
 8013e62:	bf00      	nop
  }

  return ret;
 8013e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	3710      	adds	r7, #16
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}
 8013e6e:	bf00      	nop
 8013e70:	24000cd8 	.word	0x24000cd8

08013e74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	88db      	ldrh	r3, [r3, #6]
 8013e82:	2b01      	cmp	r3, #1
 8013e84:	d004      	beq.n	8013e90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013e86:	6839      	ldr	r1, [r7, #0]
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f000 f8cd 	bl	8014028 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013e8e:	e023      	b.n	8013ed8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e96:	b2db      	uxtb	r3, r3
 8013e98:	2b02      	cmp	r3, #2
 8013e9a:	dc02      	bgt.n	8013ea2 <USBD_GetConfig+0x2e>
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	dc03      	bgt.n	8013ea8 <USBD_GetConfig+0x34>
 8013ea0:	e015      	b.n	8013ece <USBD_GetConfig+0x5a>
 8013ea2:	2b03      	cmp	r3, #3
 8013ea4:	d00b      	beq.n	8013ebe <USBD_GetConfig+0x4a>
 8013ea6:	e012      	b.n	8013ece <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2200      	movs	r2, #0
 8013eac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	3308      	adds	r3, #8
 8013eb2:	2201      	movs	r2, #1
 8013eb4:	4619      	mov	r1, r3
 8013eb6:	6878      	ldr	r0, [r7, #4]
 8013eb8:	f000 f927 	bl	801410a <USBD_CtlSendData>
        break;
 8013ebc:	e00c      	b.n	8013ed8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	3304      	adds	r3, #4
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f000 f91f 	bl	801410a <USBD_CtlSendData>
        break;
 8013ecc:	e004      	b.n	8013ed8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013ece:	6839      	ldr	r1, [r7, #0]
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f000 f8a9 	bl	8014028 <USBD_CtlError>
        break;
 8013ed6:	bf00      	nop
}
 8013ed8:	bf00      	nop
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ef0:	b2db      	uxtb	r3, r3
 8013ef2:	3b01      	subs	r3, #1
 8013ef4:	2b02      	cmp	r3, #2
 8013ef6:	d81e      	bhi.n	8013f36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	88db      	ldrh	r3, [r3, #6]
 8013efc:	2b02      	cmp	r3, #2
 8013efe:	d004      	beq.n	8013f0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013f00:	6839      	ldr	r1, [r7, #0]
 8013f02:	6878      	ldr	r0, [r7, #4]
 8013f04:	f000 f890 	bl	8014028 <USBD_CtlError>
        break;
 8013f08:	e01a      	b.n	8013f40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2201      	movs	r2, #1
 8013f0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d005      	beq.n	8013f26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	68db      	ldr	r3, [r3, #12]
 8013f1e:	f043 0202 	orr.w	r2, r3, #2
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	330c      	adds	r3, #12
 8013f2a:	2202      	movs	r2, #2
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f000 f8eb 	bl	801410a <USBD_CtlSendData>
      break;
 8013f34:	e004      	b.n	8013f40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013f36:	6839      	ldr	r1, [r7, #0]
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f000 f875 	bl	8014028 <USBD_CtlError>
      break;
 8013f3e:	bf00      	nop
  }
}
 8013f40:	bf00      	nop
 8013f42:	3708      	adds	r7, #8
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}

08013f48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b082      	sub	sp, #8
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	885b      	ldrh	r3, [r3, #2]
 8013f56:	2b01      	cmp	r3, #1
 8013f58:	d106      	bne.n	8013f68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2201      	movs	r2, #1
 8013f5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f000 f92b 	bl	80141be <USBD_CtlSendStatus>
  }
}
 8013f68:	bf00      	nop
 8013f6a:	3708      	adds	r7, #8
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f80:	b2db      	uxtb	r3, r3
 8013f82:	3b01      	subs	r3, #1
 8013f84:	2b02      	cmp	r3, #2
 8013f86:	d80b      	bhi.n	8013fa0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	885b      	ldrh	r3, [r3, #2]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d10c      	bne.n	8013faa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2200      	movs	r2, #0
 8013f94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f000 f910 	bl	80141be <USBD_CtlSendStatus>
      }
      break;
 8013f9e:	e004      	b.n	8013faa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013fa0:	6839      	ldr	r1, [r7, #0]
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f000 f840 	bl	8014028 <USBD_CtlError>
      break;
 8013fa8:	e000      	b.n	8013fac <USBD_ClrFeature+0x3c>
      break;
 8013faa:	bf00      	nop
  }
}
 8013fac:	bf00      	nop
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	781a      	ldrb	r2, [r3, #0]
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	3301      	adds	r3, #1
 8013fce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	781a      	ldrb	r2, [r3, #0]
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	3301      	adds	r3, #1
 8013fdc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013fde:	68f8      	ldr	r0, [r7, #12]
 8013fe0:	f7ff fabb 	bl	801355a <SWAPBYTE>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	461a      	mov	r2, r3
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	3301      	adds	r3, #1
 8013ff0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	3301      	adds	r3, #1
 8013ff6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013ff8:	68f8      	ldr	r0, [r7, #12]
 8013ffa:	f7ff faae 	bl	801355a <SWAPBYTE>
 8013ffe:	4603      	mov	r3, r0
 8014000:	461a      	mov	r2, r3
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	3301      	adds	r3, #1
 801400a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	3301      	adds	r3, #1
 8014010:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014012:	68f8      	ldr	r0, [r7, #12]
 8014014:	f7ff faa1 	bl	801355a <SWAPBYTE>
 8014018:	4603      	mov	r3, r0
 801401a:	461a      	mov	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	80da      	strh	r2, [r3, #6]
}
 8014020:	bf00      	nop
 8014022:	3710      	adds	r7, #16
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}

08014028 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b082      	sub	sp, #8
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014032:	2180      	movs	r1, #128	; 0x80
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f002 f87f 	bl	8016138 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801403a:	2100      	movs	r1, #0
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f002 f87b 	bl	8016138 <USBD_LL_StallEP>
}
 8014042:	bf00      	nop
 8014044:	3708      	adds	r7, #8
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}

0801404a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801404a:	b580      	push	{r7, lr}
 801404c:	b086      	sub	sp, #24
 801404e:	af00      	add	r7, sp, #0
 8014050:	60f8      	str	r0, [r7, #12]
 8014052:	60b9      	str	r1, [r7, #8]
 8014054:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014056:	2300      	movs	r3, #0
 8014058:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d036      	beq.n	80140ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014064:	6938      	ldr	r0, [r7, #16]
 8014066:	f000 f836 	bl	80140d6 <USBD_GetLen>
 801406a:	4603      	mov	r3, r0
 801406c:	3301      	adds	r3, #1
 801406e:	b29b      	uxth	r3, r3
 8014070:	005b      	lsls	r3, r3, #1
 8014072:	b29a      	uxth	r2, r3
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014078:	7dfb      	ldrb	r3, [r7, #23]
 801407a:	68ba      	ldr	r2, [r7, #8]
 801407c:	4413      	add	r3, r2
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	7812      	ldrb	r2, [r2, #0]
 8014082:	701a      	strb	r2, [r3, #0]
  idx++;
 8014084:	7dfb      	ldrb	r3, [r7, #23]
 8014086:	3301      	adds	r3, #1
 8014088:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801408a:	7dfb      	ldrb	r3, [r7, #23]
 801408c:	68ba      	ldr	r2, [r7, #8]
 801408e:	4413      	add	r3, r2
 8014090:	2203      	movs	r2, #3
 8014092:	701a      	strb	r2, [r3, #0]
  idx++;
 8014094:	7dfb      	ldrb	r3, [r7, #23]
 8014096:	3301      	adds	r3, #1
 8014098:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801409a:	e013      	b.n	80140c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801409c:	7dfb      	ldrb	r3, [r7, #23]
 801409e:	68ba      	ldr	r2, [r7, #8]
 80140a0:	4413      	add	r3, r2
 80140a2:	693a      	ldr	r2, [r7, #16]
 80140a4:	7812      	ldrb	r2, [r2, #0]
 80140a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	3301      	adds	r3, #1
 80140ac:	613b      	str	r3, [r7, #16]
    idx++;
 80140ae:	7dfb      	ldrb	r3, [r7, #23]
 80140b0:	3301      	adds	r3, #1
 80140b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80140b4:	7dfb      	ldrb	r3, [r7, #23]
 80140b6:	68ba      	ldr	r2, [r7, #8]
 80140b8:	4413      	add	r3, r2
 80140ba:	2200      	movs	r2, #0
 80140bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80140be:	7dfb      	ldrb	r3, [r7, #23]
 80140c0:	3301      	adds	r3, #1
 80140c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	781b      	ldrb	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d1e7      	bne.n	801409c <USBD_GetString+0x52>
 80140cc:	e000      	b.n	80140d0 <USBD_GetString+0x86>
    return;
 80140ce:	bf00      	nop
  }
}
 80140d0:	3718      	adds	r7, #24
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}

080140d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80140d6:	b480      	push	{r7}
 80140d8:	b085      	sub	sp, #20
 80140da:	af00      	add	r7, sp, #0
 80140dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80140de:	2300      	movs	r3, #0
 80140e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80140e6:	e005      	b.n	80140f4 <USBD_GetLen+0x1e>
  {
    len++;
 80140e8:	7bfb      	ldrb	r3, [r7, #15]
 80140ea:	3301      	adds	r3, #1
 80140ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	3301      	adds	r3, #1
 80140f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	781b      	ldrb	r3, [r3, #0]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d1f5      	bne.n	80140e8 <USBD_GetLen+0x12>
  }

  return len;
 80140fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3714      	adds	r7, #20
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr

0801410a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801410a:	b580      	push	{r7, lr}
 801410c:	b084      	sub	sp, #16
 801410e:	af00      	add	r7, sp, #0
 8014110:	60f8      	str	r0, [r7, #12]
 8014112:	60b9      	str	r1, [r7, #8]
 8014114:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	2202      	movs	r2, #2
 801411a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	687a      	ldr	r2, [r7, #4]
 8014122:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	687a      	ldr	r2, [r7, #4]
 8014128:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	68ba      	ldr	r2, [r7, #8]
 801412e:	2100      	movs	r1, #0
 8014130:	68f8      	ldr	r0, [r7, #12]
 8014132:	f002 f88a 	bl	801624a <USBD_LL_Transmit>

  return USBD_OK;
 8014136:	2300      	movs	r3, #0
}
 8014138:	4618      	mov	r0, r3
 801413a:	3710      	adds	r7, #16
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}

08014140 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b084      	sub	sp, #16
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	68ba      	ldr	r2, [r7, #8]
 8014150:	2100      	movs	r1, #0
 8014152:	68f8      	ldr	r0, [r7, #12]
 8014154:	f002 f879 	bl	801624a <USBD_LL_Transmit>

  return USBD_OK;
 8014158:	2300      	movs	r3, #0
}
 801415a:	4618      	mov	r0, r3
 801415c:	3710      	adds	r7, #16
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}

08014162 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014162:	b580      	push	{r7, lr}
 8014164:	b084      	sub	sp, #16
 8014166:	af00      	add	r7, sp, #0
 8014168:	60f8      	str	r0, [r7, #12]
 801416a:	60b9      	str	r1, [r7, #8]
 801416c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2203      	movs	r2, #3
 8014172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	687a      	ldr	r2, [r7, #4]
 8014182:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	68ba      	ldr	r2, [r7, #8]
 801418a:	2100      	movs	r1, #0
 801418c:	68f8      	ldr	r0, [r7, #12]
 801418e:	f002 f87d 	bl	801628c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014192:	2300      	movs	r3, #0
}
 8014194:	4618      	mov	r0, r3
 8014196:	3710      	adds	r7, #16
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}

0801419c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b084      	sub	sp, #16
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	60f8      	str	r0, [r7, #12]
 80141a4:	60b9      	str	r1, [r7, #8]
 80141a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	68ba      	ldr	r2, [r7, #8]
 80141ac:	2100      	movs	r1, #0
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f002 f86c 	bl	801628c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80141b4:	2300      	movs	r3, #0
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	3710      	adds	r7, #16
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}

080141be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80141be:	b580      	push	{r7, lr}
 80141c0:	b082      	sub	sp, #8
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	2204      	movs	r2, #4
 80141ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80141ce:	2300      	movs	r3, #0
 80141d0:	2200      	movs	r2, #0
 80141d2:	2100      	movs	r1, #0
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f002 f838 	bl	801624a <USBD_LL_Transmit>

  return USBD_OK;
 80141da:	2300      	movs	r3, #0
}
 80141dc:	4618      	mov	r0, r3
 80141de:	3708      	adds	r7, #8
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b082      	sub	sp, #8
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2205      	movs	r2, #5
 80141f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80141f4:	2300      	movs	r3, #0
 80141f6:	2200      	movs	r2, #0
 80141f8:	2100      	movs	r1, #0
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f002 f846 	bl	801628c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014200:	2300      	movs	r3, #0
}
 8014202:	4618      	mov	r0, r3
 8014204:	3708      	adds	r7, #8
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}

0801420a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801420a:	b480      	push	{r7}
 801420c:	b085      	sub	sp, #20
 801420e:	af00      	add	r7, sp, #0
 8014210:	4603      	mov	r3, r0
 8014212:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014214:	2300      	movs	r3, #0
 8014216:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801421c:	2b84      	cmp	r3, #132	; 0x84
 801421e:	d005      	beq.n	801422c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014220:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	4413      	add	r3, r2
 8014228:	3303      	adds	r3, #3
 801422a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801422c:	68fb      	ldr	r3, [r7, #12]
}
 801422e:	4618      	mov	r0, r3
 8014230:	3714      	adds	r7, #20
 8014232:	46bd      	mov	sp, r7
 8014234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014238:	4770      	bx	lr

0801423a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801423a:	b580      	push	{r7, lr}
 801423c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801423e:	f000 fc17 	bl	8014a70 <vTaskStartScheduler>
  
  return osOK;
 8014242:	2300      	movs	r3, #0
}
 8014244:	4618      	mov	r0, r3
 8014246:	bd80      	pop	{r7, pc}

08014248 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801424a:	b089      	sub	sp, #36	; 0x24
 801424c:	af04      	add	r7, sp, #16
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	695b      	ldr	r3, [r3, #20]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d020      	beq.n	801429c <osThreadCreate+0x54>
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	699b      	ldr	r3, [r3, #24]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d01c      	beq.n	801429c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	685c      	ldr	r4, [r3, #4]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681d      	ldr	r5, [r3, #0]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	691e      	ldr	r6, [r3, #16]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014274:	4618      	mov	r0, r3
 8014276:	f7ff ffc8 	bl	801420a <makeFreeRtosPriority>
 801427a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	695b      	ldr	r3, [r3, #20]
 8014280:	687a      	ldr	r2, [r7, #4]
 8014282:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014284:	9202      	str	r2, [sp, #8]
 8014286:	9301      	str	r3, [sp, #4]
 8014288:	9100      	str	r1, [sp, #0]
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	4632      	mov	r2, r6
 801428e:	4629      	mov	r1, r5
 8014290:	4620      	mov	r0, r4
 8014292:	f000 f8ed 	bl	8014470 <xTaskCreateStatic>
 8014296:	4603      	mov	r3, r0
 8014298:	60fb      	str	r3, [r7, #12]
 801429a:	e01c      	b.n	80142d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	685c      	ldr	r4, [r3, #4]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80142a8:	b29e      	uxth	r6, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7ff ffaa 	bl	801420a <makeFreeRtosPriority>
 80142b6:	4602      	mov	r2, r0
 80142b8:	f107 030c 	add.w	r3, r7, #12
 80142bc:	9301      	str	r3, [sp, #4]
 80142be:	9200      	str	r2, [sp, #0]
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	4632      	mov	r2, r6
 80142c4:	4629      	mov	r1, r5
 80142c6:	4620      	mov	r0, r4
 80142c8:	f000 f92f 	bl	801452a <xTaskCreate>
 80142cc:	4603      	mov	r3, r0
 80142ce:	2b01      	cmp	r3, #1
 80142d0:	d001      	beq.n	80142d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80142d2:	2300      	movs	r3, #0
 80142d4:	e000      	b.n	80142d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80142d6:	68fb      	ldr	r3, [r7, #12]
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3714      	adds	r7, #20
 80142dc:	46bd      	mov	sp, r7
 80142de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080142e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d001      	beq.n	80142f6 <osDelay+0x16>
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	e000      	b.n	80142f8 <osDelay+0x18>
 80142f6:	2301      	movs	r3, #1
 80142f8:	4618      	mov	r0, r3
 80142fa:	f000 fa63 	bl	80147c4 <vTaskDelay>
  
  return osOK;
 80142fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014300:	4618      	mov	r0, r3
 8014302:	3710      	adds	r7, #16
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f103 0208 	add.w	r2, r3, #8
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f04f 32ff 	mov.w	r2, #4294967295
 8014320:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f103 0208 	add.w	r2, r3, #8
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f103 0208 	add.w	r2, r3, #8
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2200      	movs	r2, #0
 801433a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801433c:	bf00      	nop
 801433e:	370c      	adds	r7, #12
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr

08014348 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2200      	movs	r2, #0
 8014354:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014356:	bf00      	nop
 8014358:	370c      	adds	r7, #12
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr

08014362 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014362:	b480      	push	{r7}
 8014364:	b085      	sub	sp, #20
 8014366:	af00      	add	r7, sp, #0
 8014368:	6078      	str	r0, [r7, #4]
 801436a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	68fa      	ldr	r2, [r7, #12]
 8014376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	689a      	ldr	r2, [r3, #8]
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	689b      	ldr	r3, [r3, #8]
 8014384:	683a      	ldr	r2, [r7, #0]
 8014386:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	683a      	ldr	r2, [r7, #0]
 801438c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	687a      	ldr	r2, [r7, #4]
 8014392:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	1c5a      	adds	r2, r3, #1
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	601a      	str	r2, [r3, #0]
}
 801439e:	bf00      	nop
 80143a0:	3714      	adds	r7, #20
 80143a2:	46bd      	mov	sp, r7
 80143a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a8:	4770      	bx	lr

080143aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80143aa:	b480      	push	{r7}
 80143ac:	b085      	sub	sp, #20
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	6078      	str	r0, [r7, #4]
 80143b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143c0:	d103      	bne.n	80143ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	691b      	ldr	r3, [r3, #16]
 80143c6:	60fb      	str	r3, [r7, #12]
 80143c8:	e00c      	b.n	80143e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	3308      	adds	r3, #8
 80143ce:	60fb      	str	r3, [r7, #12]
 80143d0:	e002      	b.n	80143d8 <vListInsert+0x2e>
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	60fb      	str	r3, [r7, #12]
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	68ba      	ldr	r2, [r7, #8]
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d2f6      	bcs.n	80143d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	685a      	ldr	r2, [r3, #4]
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	683a      	ldr	r2, [r7, #0]
 80143f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	68fa      	ldr	r2, [r7, #12]
 80143f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	683a      	ldr	r2, [r7, #0]
 80143fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	1c5a      	adds	r2, r3, #1
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	601a      	str	r2, [r3, #0]
}
 8014410:	bf00      	nop
 8014412:	3714      	adds	r7, #20
 8014414:	46bd      	mov	sp, r7
 8014416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441a:	4770      	bx	lr

0801441c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801441c:	b480      	push	{r7}
 801441e:	b085      	sub	sp, #20
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	691b      	ldr	r3, [r3, #16]
 8014428:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	687a      	ldr	r2, [r7, #4]
 8014430:	6892      	ldr	r2, [r2, #8]
 8014432:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	689b      	ldr	r3, [r3, #8]
 8014438:	687a      	ldr	r2, [r7, #4]
 801443a:	6852      	ldr	r2, [r2, #4]
 801443c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	685b      	ldr	r3, [r3, #4]
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	429a      	cmp	r2, r3
 8014446:	d103      	bne.n	8014450 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	689a      	ldr	r2, [r3, #8]
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2200      	movs	r2, #0
 8014454:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	1e5a      	subs	r2, r3, #1
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	681b      	ldr	r3, [r3, #0]
}
 8014464:	4618      	mov	r0, r3
 8014466:	3714      	adds	r7, #20
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014470:	b580      	push	{r7, lr}
 8014472:	b08e      	sub	sp, #56	; 0x38
 8014474:	af04      	add	r7, sp, #16
 8014476:	60f8      	str	r0, [r7, #12]
 8014478:	60b9      	str	r1, [r7, #8]
 801447a:	607a      	str	r2, [r7, #4]
 801447c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801447e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014480:	2b00      	cmp	r3, #0
 8014482:	d10a      	bne.n	801449a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014488:	f383 8811 	msr	BASEPRI, r3
 801448c:	f3bf 8f6f 	isb	sy
 8014490:	f3bf 8f4f 	dsb	sy
 8014494:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014496:	bf00      	nop
 8014498:	e7fe      	b.n	8014498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801449c:	2b00      	cmp	r3, #0
 801449e:	d10a      	bne.n	80144b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80144a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144a4:	f383 8811 	msr	BASEPRI, r3
 80144a8:	f3bf 8f6f 	isb	sy
 80144ac:	f3bf 8f4f 	dsb	sy
 80144b0:	61fb      	str	r3, [r7, #28]
}
 80144b2:	bf00      	nop
 80144b4:	e7fe      	b.n	80144b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80144b6:	23b4      	movs	r3, #180	; 0xb4
 80144b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	2bb4      	cmp	r3, #180	; 0xb4
 80144be:	d00a      	beq.n	80144d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80144c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c4:	f383 8811 	msr	BASEPRI, r3
 80144c8:	f3bf 8f6f 	isb	sy
 80144cc:	f3bf 8f4f 	dsb	sy
 80144d0:	61bb      	str	r3, [r7, #24]
}
 80144d2:	bf00      	nop
 80144d4:	e7fe      	b.n	80144d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80144d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80144d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d01e      	beq.n	801451c <xTaskCreateStatic+0xac>
 80144de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d01b      	beq.n	801451c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80144e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80144e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80144ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144f0:	2202      	movs	r2, #2
 80144f2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80144f6:	2300      	movs	r3, #0
 80144f8:	9303      	str	r3, [sp, #12]
 80144fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144fc:	9302      	str	r3, [sp, #8]
 80144fe:	f107 0314 	add.w	r3, r7, #20
 8014502:	9301      	str	r3, [sp, #4]
 8014504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014506:	9300      	str	r3, [sp, #0]
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	687a      	ldr	r2, [r7, #4]
 801450c:	68b9      	ldr	r1, [r7, #8]
 801450e:	68f8      	ldr	r0, [r7, #12]
 8014510:	f000 f850 	bl	80145b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014516:	f000 f8eb 	bl	80146f0 <prvAddNewTaskToReadyList>
 801451a:	e001      	b.n	8014520 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801451c:	2300      	movs	r3, #0
 801451e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014520:	697b      	ldr	r3, [r7, #20]
	}
 8014522:	4618      	mov	r0, r3
 8014524:	3728      	adds	r7, #40	; 0x28
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}

0801452a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801452a:	b580      	push	{r7, lr}
 801452c:	b08c      	sub	sp, #48	; 0x30
 801452e:	af04      	add	r7, sp, #16
 8014530:	60f8      	str	r0, [r7, #12]
 8014532:	60b9      	str	r1, [r7, #8]
 8014534:	603b      	str	r3, [r7, #0]
 8014536:	4613      	mov	r3, r2
 8014538:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801453a:	88fb      	ldrh	r3, [r7, #6]
 801453c:	009b      	lsls	r3, r3, #2
 801453e:	4618      	mov	r0, r3
 8014540:	f001 f812 	bl	8015568 <pvPortMalloc>
 8014544:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d00e      	beq.n	801456a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801454c:	20b4      	movs	r0, #180	; 0xb4
 801454e:	f001 f80b 	bl	8015568 <pvPortMalloc>
 8014552:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014554:	69fb      	ldr	r3, [r7, #28]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d003      	beq.n	8014562 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801455a:	69fb      	ldr	r3, [r7, #28]
 801455c:	697a      	ldr	r2, [r7, #20]
 801455e:	631a      	str	r2, [r3, #48]	; 0x30
 8014560:	e005      	b.n	801456e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014562:	6978      	ldr	r0, [r7, #20]
 8014564:	f001 f8cc 	bl	8015700 <vPortFree>
 8014568:	e001      	b.n	801456e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801456a:	2300      	movs	r3, #0
 801456c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801456e:	69fb      	ldr	r3, [r7, #28]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d017      	beq.n	80145a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014574:	69fb      	ldr	r3, [r7, #28]
 8014576:	2200      	movs	r2, #0
 8014578:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801457c:	88fa      	ldrh	r2, [r7, #6]
 801457e:	2300      	movs	r3, #0
 8014580:	9303      	str	r3, [sp, #12]
 8014582:	69fb      	ldr	r3, [r7, #28]
 8014584:	9302      	str	r3, [sp, #8]
 8014586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014588:	9301      	str	r3, [sp, #4]
 801458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801458c:	9300      	str	r3, [sp, #0]
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	68b9      	ldr	r1, [r7, #8]
 8014592:	68f8      	ldr	r0, [r7, #12]
 8014594:	f000 f80e 	bl	80145b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014598:	69f8      	ldr	r0, [r7, #28]
 801459a:	f000 f8a9 	bl	80146f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801459e:	2301      	movs	r3, #1
 80145a0:	61bb      	str	r3, [r7, #24]
 80145a2:	e002      	b.n	80145aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80145a4:	f04f 33ff 	mov.w	r3, #4294967295
 80145a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80145aa:	69bb      	ldr	r3, [r7, #24]
	}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3720      	adds	r7, #32
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b088      	sub	sp, #32
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	60f8      	str	r0, [r7, #12]
 80145bc:	60b9      	str	r1, [r7, #8]
 80145be:	607a      	str	r2, [r7, #4]
 80145c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80145c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80145c6:	6879      	ldr	r1, [r7, #4]
 80145c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80145cc:	440b      	add	r3, r1
 80145ce:	009b      	lsls	r3, r3, #2
 80145d0:	4413      	add	r3, r2
 80145d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80145d4:	69bb      	ldr	r3, [r7, #24]
 80145d6:	f023 0307 	bic.w	r3, r3, #7
 80145da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80145dc:	69bb      	ldr	r3, [r7, #24]
 80145de:	f003 0307 	and.w	r3, r3, #7
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d00a      	beq.n	80145fc <prvInitialiseNewTask+0x48>
	__asm volatile
 80145e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ea:	f383 8811 	msr	BASEPRI, r3
 80145ee:	f3bf 8f6f 	isb	sy
 80145f2:	f3bf 8f4f 	dsb	sy
 80145f6:	617b      	str	r3, [r7, #20]
}
 80145f8:	bf00      	nop
 80145fa:	e7fe      	b.n	80145fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d01f      	beq.n	8014642 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014602:	2300      	movs	r3, #0
 8014604:	61fb      	str	r3, [r7, #28]
 8014606:	e012      	b.n	801462e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014608:	68ba      	ldr	r2, [r7, #8]
 801460a:	69fb      	ldr	r3, [r7, #28]
 801460c:	4413      	add	r3, r2
 801460e:	7819      	ldrb	r1, [r3, #0]
 8014610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014612:	69fb      	ldr	r3, [r7, #28]
 8014614:	4413      	add	r3, r2
 8014616:	3334      	adds	r3, #52	; 0x34
 8014618:	460a      	mov	r2, r1
 801461a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801461c:	68ba      	ldr	r2, [r7, #8]
 801461e:	69fb      	ldr	r3, [r7, #28]
 8014620:	4413      	add	r3, r2
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d006      	beq.n	8014636 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014628:	69fb      	ldr	r3, [r7, #28]
 801462a:	3301      	adds	r3, #1
 801462c:	61fb      	str	r3, [r7, #28]
 801462e:	69fb      	ldr	r3, [r7, #28]
 8014630:	2b0f      	cmp	r3, #15
 8014632:	d9e9      	bls.n	8014608 <prvInitialiseNewTask+0x54>
 8014634:	e000      	b.n	8014638 <prvInitialiseNewTask+0x84>
			{
				break;
 8014636:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463a:	2200      	movs	r2, #0
 801463c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014640:	e003      	b.n	801464a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014644:	2200      	movs	r2, #0
 8014646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801464c:	2b06      	cmp	r3, #6
 801464e:	d901      	bls.n	8014654 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014650:	2306      	movs	r3, #6
 8014652:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014658:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801465e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014662:	2200      	movs	r2, #0
 8014664:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014668:	3304      	adds	r3, #4
 801466a:	4618      	mov	r0, r3
 801466c:	f7ff fe6c 	bl	8014348 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014672:	3318      	adds	r3, #24
 8014674:	4618      	mov	r0, r3
 8014676:	f7ff fe67 	bl	8014348 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801467e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014682:	f1c3 0207 	rsb	r2, r3, #7
 8014686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014688:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801468c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801468e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014692:	2200      	movs	r2, #0
 8014694:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469a:	2200      	movs	r2, #0
 801469c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80146a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a2:	334c      	adds	r3, #76	; 0x4c
 80146a4:	2260      	movs	r2, #96	; 0x60
 80146a6:	2100      	movs	r1, #0
 80146a8:	4618      	mov	r0, r3
 80146aa:	f001 ff9c 	bl	80165e6 <memset>
 80146ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b0:	4a0c      	ldr	r2, [pc, #48]	; (80146e4 <prvInitialiseNewTask+0x130>)
 80146b2:	651a      	str	r2, [r3, #80]	; 0x50
 80146b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b6:	4a0c      	ldr	r2, [pc, #48]	; (80146e8 <prvInitialiseNewTask+0x134>)
 80146b8:	655a      	str	r2, [r3, #84]	; 0x54
 80146ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146bc:	4a0b      	ldr	r2, [pc, #44]	; (80146ec <prvInitialiseNewTask+0x138>)
 80146be:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80146c0:	683a      	ldr	r2, [r7, #0]
 80146c2:	68f9      	ldr	r1, [r7, #12]
 80146c4:	69b8      	ldr	r0, [r7, #24]
 80146c6:	f000 fd41 	bl	801514c <pxPortInitialiseStack>
 80146ca:	4602      	mov	r2, r0
 80146cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80146d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d002      	beq.n	80146dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80146d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80146dc:	bf00      	nop
 80146de:	3720      	adds	r7, #32
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}
 80146e4:	080247e8 	.word	0x080247e8
 80146e8:	08024808 	.word	0x08024808
 80146ec:	080247c8 	.word	0x080247c8

080146f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80146f8:	f000 fe54 	bl	80153a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80146fc:	4b2a      	ldr	r3, [pc, #168]	; (80147a8 <prvAddNewTaskToReadyList+0xb8>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	3301      	adds	r3, #1
 8014702:	4a29      	ldr	r2, [pc, #164]	; (80147a8 <prvAddNewTaskToReadyList+0xb8>)
 8014704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014706:	4b29      	ldr	r3, [pc, #164]	; (80147ac <prvAddNewTaskToReadyList+0xbc>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d109      	bne.n	8014722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801470e:	4a27      	ldr	r2, [pc, #156]	; (80147ac <prvAddNewTaskToReadyList+0xbc>)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014714:	4b24      	ldr	r3, [pc, #144]	; (80147a8 <prvAddNewTaskToReadyList+0xb8>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2b01      	cmp	r3, #1
 801471a:	d110      	bne.n	801473e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801471c:	f000 fbee 	bl	8014efc <prvInitialiseTaskLists>
 8014720:	e00d      	b.n	801473e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014722:	4b23      	ldr	r3, [pc, #140]	; (80147b0 <prvAddNewTaskToReadyList+0xc0>)
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d109      	bne.n	801473e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801472a:	4b20      	ldr	r3, [pc, #128]	; (80147ac <prvAddNewTaskToReadyList+0xbc>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014734:	429a      	cmp	r2, r3
 8014736:	d802      	bhi.n	801473e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014738:	4a1c      	ldr	r2, [pc, #112]	; (80147ac <prvAddNewTaskToReadyList+0xbc>)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801473e:	4b1d      	ldr	r3, [pc, #116]	; (80147b4 <prvAddNewTaskToReadyList+0xc4>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	3301      	adds	r3, #1
 8014744:	4a1b      	ldr	r2, [pc, #108]	; (80147b4 <prvAddNewTaskToReadyList+0xc4>)
 8014746:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801474c:	2201      	movs	r2, #1
 801474e:	409a      	lsls	r2, r3
 8014750:	4b19      	ldr	r3, [pc, #100]	; (80147b8 <prvAddNewTaskToReadyList+0xc8>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	4313      	orrs	r3, r2
 8014756:	4a18      	ldr	r2, [pc, #96]	; (80147b8 <prvAddNewTaskToReadyList+0xc8>)
 8014758:	6013      	str	r3, [r2, #0]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801475e:	4613      	mov	r3, r2
 8014760:	009b      	lsls	r3, r3, #2
 8014762:	4413      	add	r3, r2
 8014764:	009b      	lsls	r3, r3, #2
 8014766:	4a15      	ldr	r2, [pc, #84]	; (80147bc <prvAddNewTaskToReadyList+0xcc>)
 8014768:	441a      	add	r2, r3
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	3304      	adds	r3, #4
 801476e:	4619      	mov	r1, r3
 8014770:	4610      	mov	r0, r2
 8014772:	f7ff fdf6 	bl	8014362 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014776:	f000 fe45 	bl	8015404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801477a:	4b0d      	ldr	r3, [pc, #52]	; (80147b0 <prvAddNewTaskToReadyList+0xc0>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d00e      	beq.n	80147a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014782:	4b0a      	ldr	r3, [pc, #40]	; (80147ac <prvAddNewTaskToReadyList+0xbc>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801478c:	429a      	cmp	r2, r3
 801478e:	d207      	bcs.n	80147a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014790:	4b0b      	ldr	r3, [pc, #44]	; (80147c0 <prvAddNewTaskToReadyList+0xd0>)
 8014792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014796:	601a      	str	r2, [r3, #0]
 8014798:	f3bf 8f4f 	dsb	sy
 801479c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80147a0:	bf00      	nop
 80147a2:	3708      	adds	r7, #8
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}
 80147a8:	24000ddc 	.word	0x24000ddc
 80147ac:	24000cdc 	.word	0x24000cdc
 80147b0:	24000de8 	.word	0x24000de8
 80147b4:	24000df8 	.word	0x24000df8
 80147b8:	24000de4 	.word	0x24000de4
 80147bc:	24000ce0 	.word	0x24000ce0
 80147c0:	e000ed04 	.word	0xe000ed04

080147c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b084      	sub	sp, #16
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80147cc:	2300      	movs	r3, #0
 80147ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d017      	beq.n	8014806 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80147d6:	4b13      	ldr	r3, [pc, #76]	; (8014824 <vTaskDelay+0x60>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d00a      	beq.n	80147f4 <vTaskDelay+0x30>
	__asm volatile
 80147de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e2:	f383 8811 	msr	BASEPRI, r3
 80147e6:	f3bf 8f6f 	isb	sy
 80147ea:	f3bf 8f4f 	dsb	sy
 80147ee:	60bb      	str	r3, [r7, #8]
}
 80147f0:	bf00      	nop
 80147f2:	e7fe      	b.n	80147f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80147f4:	f000 f9a6 	bl	8014b44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80147f8:	2100      	movs	r1, #0
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f000 fc40 	bl	8015080 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014800:	f000 f9ae 	bl	8014b60 <xTaskResumeAll>
 8014804:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d107      	bne.n	801481c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801480c:	4b06      	ldr	r3, [pc, #24]	; (8014828 <vTaskDelay+0x64>)
 801480e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014812:	601a      	str	r2, [r3, #0]
 8014814:	f3bf 8f4f 	dsb	sy
 8014818:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801481c:	bf00      	nop
 801481e:	3710      	adds	r7, #16
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	24000e04 	.word	0x24000e04
 8014828:	e000ed04 	.word	0xe000ed04

0801482c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014834:	f000 fdb6 	bl	80153a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d102      	bne.n	8014844 <vTaskSuspend+0x18>
 801483e:	4b3c      	ldr	r3, [pc, #240]	; (8014930 <vTaskSuspend+0x104>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	e000      	b.n	8014846 <vTaskSuspend+0x1a>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	3304      	adds	r3, #4
 801484c:	4618      	mov	r0, r3
 801484e:	f7ff fde5 	bl	801441c <uxListRemove>
 8014852:	4603      	mov	r3, r0
 8014854:	2b00      	cmp	r3, #0
 8014856:	d115      	bne.n	8014884 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801485c:	4935      	ldr	r1, [pc, #212]	; (8014934 <vTaskSuspend+0x108>)
 801485e:	4613      	mov	r3, r2
 8014860:	009b      	lsls	r3, r3, #2
 8014862:	4413      	add	r3, r2
 8014864:	009b      	lsls	r3, r3, #2
 8014866:	440b      	add	r3, r1
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d10a      	bne.n	8014884 <vTaskSuspend+0x58>
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014872:	2201      	movs	r2, #1
 8014874:	fa02 f303 	lsl.w	r3, r2, r3
 8014878:	43da      	mvns	r2, r3
 801487a:	4b2f      	ldr	r3, [pc, #188]	; (8014938 <vTaskSuspend+0x10c>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	4013      	ands	r3, r2
 8014880:	4a2d      	ldr	r2, [pc, #180]	; (8014938 <vTaskSuspend+0x10c>)
 8014882:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014888:	2b00      	cmp	r3, #0
 801488a:	d004      	beq.n	8014896 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	3318      	adds	r3, #24
 8014890:	4618      	mov	r0, r3
 8014892:	f7ff fdc3 	bl	801441c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	3304      	adds	r3, #4
 801489a:	4619      	mov	r1, r3
 801489c:	4827      	ldr	r0, [pc, #156]	; (801493c <vTaskSuspend+0x110>)
 801489e:	f7ff fd60 	bl	8014362 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80148a8:	b2db      	uxtb	r3, r3
 80148aa:	2b01      	cmp	r3, #1
 80148ac:	d103      	bne.n	80148b6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	2200      	movs	r2, #0
 80148b2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80148b6:	f000 fda5 	bl	8015404 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80148ba:	4b21      	ldr	r3, [pc, #132]	; (8014940 <vTaskSuspend+0x114>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d005      	beq.n	80148ce <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80148c2:	f000 fd6f 	bl	80153a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80148c6:	f000 fbbb 	bl	8015040 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80148ca:	f000 fd9b 	bl	8015404 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80148ce:	4b18      	ldr	r3, [pc, #96]	; (8014930 <vTaskSuspend+0x104>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	68fa      	ldr	r2, [r7, #12]
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d127      	bne.n	8014928 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80148d8:	4b19      	ldr	r3, [pc, #100]	; (8014940 <vTaskSuspend+0x114>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d017      	beq.n	8014910 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80148e0:	4b18      	ldr	r3, [pc, #96]	; (8014944 <vTaskSuspend+0x118>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d00a      	beq.n	80148fe <vTaskSuspend+0xd2>
	__asm volatile
 80148e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ec:	f383 8811 	msr	BASEPRI, r3
 80148f0:	f3bf 8f6f 	isb	sy
 80148f4:	f3bf 8f4f 	dsb	sy
 80148f8:	60bb      	str	r3, [r7, #8]
}
 80148fa:	bf00      	nop
 80148fc:	e7fe      	b.n	80148fc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80148fe:	4b12      	ldr	r3, [pc, #72]	; (8014948 <vTaskSuspend+0x11c>)
 8014900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014904:	601a      	str	r2, [r3, #0]
 8014906:	f3bf 8f4f 	dsb	sy
 801490a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801490e:	e00b      	b.n	8014928 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014910:	4b0a      	ldr	r3, [pc, #40]	; (801493c <vTaskSuspend+0x110>)
 8014912:	681a      	ldr	r2, [r3, #0]
 8014914:	4b0d      	ldr	r3, [pc, #52]	; (801494c <vTaskSuspend+0x120>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	429a      	cmp	r2, r3
 801491a:	d103      	bne.n	8014924 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 801491c:	4b04      	ldr	r3, [pc, #16]	; (8014930 <vTaskSuspend+0x104>)
 801491e:	2200      	movs	r2, #0
 8014920:	601a      	str	r2, [r3, #0]
	}
 8014922:	e001      	b.n	8014928 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8014924:	f000 fa70 	bl	8014e08 <vTaskSwitchContext>
	}
 8014928:	bf00      	nop
 801492a:	3710      	adds	r7, #16
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}
 8014930:	24000cdc 	.word	0x24000cdc
 8014934:	24000ce0 	.word	0x24000ce0
 8014938:	24000de4 	.word	0x24000de4
 801493c:	24000dc8 	.word	0x24000dc8
 8014940:	24000de8 	.word	0x24000de8
 8014944:	24000e04 	.word	0x24000e04
 8014948:	e000ed04 	.word	0xe000ed04
 801494c:	24000ddc 	.word	0x24000ddc

08014950 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014950:	b480      	push	{r7}
 8014952:	b087      	sub	sp, #28
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014958:	2300      	movs	r3, #0
 801495a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d10a      	bne.n	801497c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801496a:	f383 8811 	msr	BASEPRI, r3
 801496e:	f3bf 8f6f 	isb	sy
 8014972:	f3bf 8f4f 	dsb	sy
 8014976:	60fb      	str	r3, [r7, #12]
}
 8014978:	bf00      	nop
 801497a:	e7fe      	b.n	801497a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	695b      	ldr	r3, [r3, #20]
 8014980:	4a0a      	ldr	r2, [pc, #40]	; (80149ac <prvTaskIsTaskSuspended+0x5c>)
 8014982:	4293      	cmp	r3, r2
 8014984:	d10a      	bne.n	801499c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801498a:	4a09      	ldr	r2, [pc, #36]	; (80149b0 <prvTaskIsTaskSuspended+0x60>)
 801498c:	4293      	cmp	r3, r2
 801498e:	d005      	beq.n	801499c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014990:	693b      	ldr	r3, [r7, #16]
 8014992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014994:	2b00      	cmp	r3, #0
 8014996:	d101      	bne.n	801499c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014998:	2301      	movs	r3, #1
 801499a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801499c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801499e:	4618      	mov	r0, r3
 80149a0:	371c      	adds	r7, #28
 80149a2:	46bd      	mov	sp, r7
 80149a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a8:	4770      	bx	lr
 80149aa:	bf00      	nop
 80149ac:	24000dc8 	.word	0x24000dc8
 80149b0:	24000d9c 	.word	0x24000d9c

080149b4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b084      	sub	sp, #16
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d10a      	bne.n	80149dc <vTaskResume+0x28>
	__asm volatile
 80149c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ca:	f383 8811 	msr	BASEPRI, r3
 80149ce:	f3bf 8f6f 	isb	sy
 80149d2:	f3bf 8f4f 	dsb	sy
 80149d6:	60bb      	str	r3, [r7, #8]
}
 80149d8:	bf00      	nop
 80149da:	e7fe      	b.n	80149da <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80149dc:	4b20      	ldr	r3, [pc, #128]	; (8014a60 <vTaskResume+0xac>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	68fa      	ldr	r2, [r7, #12]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d037      	beq.n	8014a56 <vTaskResume+0xa2>
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d034      	beq.n	8014a56 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80149ec:	f000 fcda 	bl	80153a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80149f0:	68f8      	ldr	r0, [r7, #12]
 80149f2:	f7ff ffad 	bl	8014950 <prvTaskIsTaskSuspended>
 80149f6:	4603      	mov	r3, r0
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d02a      	beq.n	8014a52 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	3304      	adds	r3, #4
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7ff fd0b 	bl	801441c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a0a:	2201      	movs	r2, #1
 8014a0c:	409a      	lsls	r2, r3
 8014a0e:	4b15      	ldr	r3, [pc, #84]	; (8014a64 <vTaskResume+0xb0>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	4313      	orrs	r3, r2
 8014a14:	4a13      	ldr	r2, [pc, #76]	; (8014a64 <vTaskResume+0xb0>)
 8014a16:	6013      	str	r3, [r2, #0]
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	009b      	lsls	r3, r3, #2
 8014a20:	4413      	add	r3, r2
 8014a22:	009b      	lsls	r3, r3, #2
 8014a24:	4a10      	ldr	r2, [pc, #64]	; (8014a68 <vTaskResume+0xb4>)
 8014a26:	441a      	add	r2, r3
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	3304      	adds	r3, #4
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	4610      	mov	r0, r2
 8014a30:	f7ff fc97 	bl	8014362 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a38:	4b09      	ldr	r3, [pc, #36]	; (8014a60 <vTaskResume+0xac>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d307      	bcc.n	8014a52 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8014a42:	4b0a      	ldr	r3, [pc, #40]	; (8014a6c <vTaskResume+0xb8>)
 8014a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a48:	601a      	str	r2, [r3, #0]
 8014a4a:	f3bf 8f4f 	dsb	sy
 8014a4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8014a52:	f000 fcd7 	bl	8015404 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014a56:	bf00      	nop
 8014a58:	3710      	adds	r7, #16
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	24000cdc 	.word	0x24000cdc
 8014a64:	24000de4 	.word	0x24000de4
 8014a68:	24000ce0 	.word	0x24000ce0
 8014a6c:	e000ed04 	.word	0xe000ed04

08014a70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b08a      	sub	sp, #40	; 0x28
 8014a74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014a76:	2300      	movs	r3, #0
 8014a78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014a7e:	463a      	mov	r2, r7
 8014a80:	1d39      	adds	r1, r7, #4
 8014a82:	f107 0308 	add.w	r3, r7, #8
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7ec f952 	bl	8000d30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014a8c:	6839      	ldr	r1, [r7, #0]
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	68ba      	ldr	r2, [r7, #8]
 8014a92:	9202      	str	r2, [sp, #8]
 8014a94:	9301      	str	r3, [sp, #4]
 8014a96:	2300      	movs	r3, #0
 8014a98:	9300      	str	r3, [sp, #0]
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	460a      	mov	r2, r1
 8014a9e:	4921      	ldr	r1, [pc, #132]	; (8014b24 <vTaskStartScheduler+0xb4>)
 8014aa0:	4821      	ldr	r0, [pc, #132]	; (8014b28 <vTaskStartScheduler+0xb8>)
 8014aa2:	f7ff fce5 	bl	8014470 <xTaskCreateStatic>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	4a20      	ldr	r2, [pc, #128]	; (8014b2c <vTaskStartScheduler+0xbc>)
 8014aaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014aac:	4b1f      	ldr	r3, [pc, #124]	; (8014b2c <vTaskStartScheduler+0xbc>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d002      	beq.n	8014aba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	617b      	str	r3, [r7, #20]
 8014ab8:	e001      	b.n	8014abe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014aba:	2300      	movs	r3, #0
 8014abc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	d11b      	bne.n	8014afc <vTaskStartScheduler+0x8c>
	__asm volatile
 8014ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ac8:	f383 8811 	msr	BASEPRI, r3
 8014acc:	f3bf 8f6f 	isb	sy
 8014ad0:	f3bf 8f4f 	dsb	sy
 8014ad4:	613b      	str	r3, [r7, #16]
}
 8014ad6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014ad8:	4b15      	ldr	r3, [pc, #84]	; (8014b30 <vTaskStartScheduler+0xc0>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	334c      	adds	r3, #76	; 0x4c
 8014ade:	4a15      	ldr	r2, [pc, #84]	; (8014b34 <vTaskStartScheduler+0xc4>)
 8014ae0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014ae2:	4b15      	ldr	r3, [pc, #84]	; (8014b38 <vTaskStartScheduler+0xc8>)
 8014ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8014ae8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014aea:	4b14      	ldr	r3, [pc, #80]	; (8014b3c <vTaskStartScheduler+0xcc>)
 8014aec:	2201      	movs	r2, #1
 8014aee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014af0:	4b13      	ldr	r3, [pc, #76]	; (8014b40 <vTaskStartScheduler+0xd0>)
 8014af2:	2200      	movs	r2, #0
 8014af4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014af6:	f000 fbb3 	bl	8015260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014afa:	e00e      	b.n	8014b1a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b02:	d10a      	bne.n	8014b1a <vTaskStartScheduler+0xaa>
	__asm volatile
 8014b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b08:	f383 8811 	msr	BASEPRI, r3
 8014b0c:	f3bf 8f6f 	isb	sy
 8014b10:	f3bf 8f4f 	dsb	sy
 8014b14:	60fb      	str	r3, [r7, #12]
}
 8014b16:	bf00      	nop
 8014b18:	e7fe      	b.n	8014b18 <vTaskStartScheduler+0xa8>
}
 8014b1a:	bf00      	nop
 8014b1c:	3718      	adds	r7, #24
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	08019498 	.word	0x08019498
 8014b28:	08014ecd 	.word	0x08014ecd
 8014b2c:	24000e00 	.word	0x24000e00
 8014b30:	24000cdc 	.word	0x24000cdc
 8014b34:	24000260 	.word	0x24000260
 8014b38:	24000dfc 	.word	0x24000dfc
 8014b3c:	24000de8 	.word	0x24000de8
 8014b40:	24000de0 	.word	0x24000de0

08014b44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014b44:	b480      	push	{r7}
 8014b46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014b48:	4b04      	ldr	r3, [pc, #16]	; (8014b5c <vTaskSuspendAll+0x18>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	4a03      	ldr	r2, [pc, #12]	; (8014b5c <vTaskSuspendAll+0x18>)
 8014b50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014b52:	bf00      	nop
 8014b54:	46bd      	mov	sp, r7
 8014b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5a:	4770      	bx	lr
 8014b5c:	24000e04 	.word	0x24000e04

08014b60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b084      	sub	sp, #16
 8014b64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014b66:	2300      	movs	r3, #0
 8014b68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014b6e:	4b41      	ldr	r3, [pc, #260]	; (8014c74 <xTaskResumeAll+0x114>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d10a      	bne.n	8014b8c <xTaskResumeAll+0x2c>
	__asm volatile
 8014b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b7a:	f383 8811 	msr	BASEPRI, r3
 8014b7e:	f3bf 8f6f 	isb	sy
 8014b82:	f3bf 8f4f 	dsb	sy
 8014b86:	603b      	str	r3, [r7, #0]
}
 8014b88:	bf00      	nop
 8014b8a:	e7fe      	b.n	8014b8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014b8c:	f000 fc0a 	bl	80153a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014b90:	4b38      	ldr	r3, [pc, #224]	; (8014c74 <xTaskResumeAll+0x114>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	3b01      	subs	r3, #1
 8014b96:	4a37      	ldr	r2, [pc, #220]	; (8014c74 <xTaskResumeAll+0x114>)
 8014b98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b9a:	4b36      	ldr	r3, [pc, #216]	; (8014c74 <xTaskResumeAll+0x114>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d161      	bne.n	8014c66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014ba2:	4b35      	ldr	r3, [pc, #212]	; (8014c78 <xTaskResumeAll+0x118>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d05d      	beq.n	8014c66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014baa:	e02e      	b.n	8014c0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bac:	4b33      	ldr	r3, [pc, #204]	; (8014c7c <xTaskResumeAll+0x11c>)
 8014bae:	68db      	ldr	r3, [r3, #12]
 8014bb0:	68db      	ldr	r3, [r3, #12]
 8014bb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	3318      	adds	r3, #24
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7ff fc2f 	bl	801441c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	3304      	adds	r3, #4
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7ff fc2a 	bl	801441c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bcc:	2201      	movs	r2, #1
 8014bce:	409a      	lsls	r2, r3
 8014bd0:	4b2b      	ldr	r3, [pc, #172]	; (8014c80 <xTaskResumeAll+0x120>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	4313      	orrs	r3, r2
 8014bd6:	4a2a      	ldr	r2, [pc, #168]	; (8014c80 <xTaskResumeAll+0x120>)
 8014bd8:	6013      	str	r3, [r2, #0]
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bde:	4613      	mov	r3, r2
 8014be0:	009b      	lsls	r3, r3, #2
 8014be2:	4413      	add	r3, r2
 8014be4:	009b      	lsls	r3, r3, #2
 8014be6:	4a27      	ldr	r2, [pc, #156]	; (8014c84 <xTaskResumeAll+0x124>)
 8014be8:	441a      	add	r2, r3
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	3304      	adds	r3, #4
 8014bee:	4619      	mov	r1, r3
 8014bf0:	4610      	mov	r0, r2
 8014bf2:	f7ff fbb6 	bl	8014362 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bfa:	4b23      	ldr	r3, [pc, #140]	; (8014c88 <xTaskResumeAll+0x128>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c00:	429a      	cmp	r2, r3
 8014c02:	d302      	bcc.n	8014c0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8014c04:	4b21      	ldr	r3, [pc, #132]	; (8014c8c <xTaskResumeAll+0x12c>)
 8014c06:	2201      	movs	r2, #1
 8014c08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c0a:	4b1c      	ldr	r3, [pc, #112]	; (8014c7c <xTaskResumeAll+0x11c>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d1cc      	bne.n	8014bac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d001      	beq.n	8014c1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014c18:	f000 fa12 	bl	8015040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014c1c:	4b1c      	ldr	r3, [pc, #112]	; (8014c90 <xTaskResumeAll+0x130>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d010      	beq.n	8014c4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014c28:	f000 f836 	bl	8014c98 <xTaskIncrementTick>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d002      	beq.n	8014c38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8014c32:	4b16      	ldr	r3, [pc, #88]	; (8014c8c <xTaskResumeAll+0x12c>)
 8014c34:	2201      	movs	r2, #1
 8014c36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	3b01      	subs	r3, #1
 8014c3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d1f1      	bne.n	8014c28 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8014c44:	4b12      	ldr	r3, [pc, #72]	; (8014c90 <xTaskResumeAll+0x130>)
 8014c46:	2200      	movs	r2, #0
 8014c48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014c4a:	4b10      	ldr	r3, [pc, #64]	; (8014c8c <xTaskResumeAll+0x12c>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d009      	beq.n	8014c66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014c52:	2301      	movs	r3, #1
 8014c54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014c56:	4b0f      	ldr	r3, [pc, #60]	; (8014c94 <xTaskResumeAll+0x134>)
 8014c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c5c:	601a      	str	r2, [r3, #0]
 8014c5e:	f3bf 8f4f 	dsb	sy
 8014c62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014c66:	f000 fbcd 	bl	8015404 <vPortExitCritical>

	return xAlreadyYielded;
 8014c6a:	68bb      	ldr	r3, [r7, #8]
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3710      	adds	r7, #16
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	24000e04 	.word	0x24000e04
 8014c78:	24000ddc 	.word	0x24000ddc
 8014c7c:	24000d9c 	.word	0x24000d9c
 8014c80:	24000de4 	.word	0x24000de4
 8014c84:	24000ce0 	.word	0x24000ce0
 8014c88:	24000cdc 	.word	0x24000cdc
 8014c8c:	24000df0 	.word	0x24000df0
 8014c90:	24000dec 	.word	0x24000dec
 8014c94:	e000ed04 	.word	0xe000ed04

08014c98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b086      	sub	sp, #24
 8014c9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ca2:	4b4e      	ldr	r3, [pc, #312]	; (8014ddc <xTaskIncrementTick+0x144>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	f040 808e 	bne.w	8014dc8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014cac:	4b4c      	ldr	r3, [pc, #304]	; (8014de0 <xTaskIncrementTick+0x148>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014cb4:	4a4a      	ldr	r2, [pc, #296]	; (8014de0 <xTaskIncrementTick+0x148>)
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d120      	bne.n	8014d02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014cc0:	4b48      	ldr	r3, [pc, #288]	; (8014de4 <xTaskIncrementTick+0x14c>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d00a      	beq.n	8014ce0 <xTaskIncrementTick+0x48>
	__asm volatile
 8014cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cce:	f383 8811 	msr	BASEPRI, r3
 8014cd2:	f3bf 8f6f 	isb	sy
 8014cd6:	f3bf 8f4f 	dsb	sy
 8014cda:	603b      	str	r3, [r7, #0]
}
 8014cdc:	bf00      	nop
 8014cde:	e7fe      	b.n	8014cde <xTaskIncrementTick+0x46>
 8014ce0:	4b40      	ldr	r3, [pc, #256]	; (8014de4 <xTaskIncrementTick+0x14c>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	60fb      	str	r3, [r7, #12]
 8014ce6:	4b40      	ldr	r3, [pc, #256]	; (8014de8 <xTaskIncrementTick+0x150>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	4a3e      	ldr	r2, [pc, #248]	; (8014de4 <xTaskIncrementTick+0x14c>)
 8014cec:	6013      	str	r3, [r2, #0]
 8014cee:	4a3e      	ldr	r2, [pc, #248]	; (8014de8 <xTaskIncrementTick+0x150>)
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	6013      	str	r3, [r2, #0]
 8014cf4:	4b3d      	ldr	r3, [pc, #244]	; (8014dec <xTaskIncrementTick+0x154>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	4a3c      	ldr	r2, [pc, #240]	; (8014dec <xTaskIncrementTick+0x154>)
 8014cfc:	6013      	str	r3, [r2, #0]
 8014cfe:	f000 f99f 	bl	8015040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014d02:	4b3b      	ldr	r3, [pc, #236]	; (8014df0 <xTaskIncrementTick+0x158>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	693a      	ldr	r2, [r7, #16]
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d348      	bcc.n	8014d9e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014d0c:	4b35      	ldr	r3, [pc, #212]	; (8014de4 <xTaskIncrementTick+0x14c>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d104      	bne.n	8014d20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d16:	4b36      	ldr	r3, [pc, #216]	; (8014df0 <xTaskIncrementTick+0x158>)
 8014d18:	f04f 32ff 	mov.w	r2, #4294967295
 8014d1c:	601a      	str	r2, [r3, #0]
					break;
 8014d1e:	e03e      	b.n	8014d9e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d20:	4b30      	ldr	r3, [pc, #192]	; (8014de4 <xTaskIncrementTick+0x14c>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	68db      	ldr	r3, [r3, #12]
 8014d26:	68db      	ldr	r3, [r3, #12]
 8014d28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	685b      	ldr	r3, [r3, #4]
 8014d2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014d30:	693a      	ldr	r2, [r7, #16]
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d203      	bcs.n	8014d40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014d38:	4a2d      	ldr	r2, [pc, #180]	; (8014df0 <xTaskIncrementTick+0x158>)
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014d3e:	e02e      	b.n	8014d9e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	3304      	adds	r3, #4
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7ff fb69 	bl	801441c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d004      	beq.n	8014d5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	3318      	adds	r3, #24
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7ff fb60 	bl	801441c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d60:	2201      	movs	r2, #1
 8014d62:	409a      	lsls	r2, r3
 8014d64:	4b23      	ldr	r3, [pc, #140]	; (8014df4 <xTaskIncrementTick+0x15c>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	4313      	orrs	r3, r2
 8014d6a:	4a22      	ldr	r2, [pc, #136]	; (8014df4 <xTaskIncrementTick+0x15c>)
 8014d6c:	6013      	str	r3, [r2, #0]
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d72:	4613      	mov	r3, r2
 8014d74:	009b      	lsls	r3, r3, #2
 8014d76:	4413      	add	r3, r2
 8014d78:	009b      	lsls	r3, r3, #2
 8014d7a:	4a1f      	ldr	r2, [pc, #124]	; (8014df8 <xTaskIncrementTick+0x160>)
 8014d7c:	441a      	add	r2, r3
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	3304      	adds	r3, #4
 8014d82:	4619      	mov	r1, r3
 8014d84:	4610      	mov	r0, r2
 8014d86:	f7ff faec 	bl	8014362 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d8e:	4b1b      	ldr	r3, [pc, #108]	; (8014dfc <xTaskIncrementTick+0x164>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d3b9      	bcc.n	8014d0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014d98:	2301      	movs	r3, #1
 8014d9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014d9c:	e7b6      	b.n	8014d0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014d9e:	4b17      	ldr	r3, [pc, #92]	; (8014dfc <xTaskIncrementTick+0x164>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014da4:	4914      	ldr	r1, [pc, #80]	; (8014df8 <xTaskIncrementTick+0x160>)
 8014da6:	4613      	mov	r3, r2
 8014da8:	009b      	lsls	r3, r3, #2
 8014daa:	4413      	add	r3, r2
 8014dac:	009b      	lsls	r3, r3, #2
 8014dae:	440b      	add	r3, r1
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	2b01      	cmp	r3, #1
 8014db4:	d901      	bls.n	8014dba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8014db6:	2301      	movs	r3, #1
 8014db8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014dba:	4b11      	ldr	r3, [pc, #68]	; (8014e00 <xTaskIncrementTick+0x168>)
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d007      	beq.n	8014dd2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	617b      	str	r3, [r7, #20]
 8014dc6:	e004      	b.n	8014dd2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014dc8:	4b0e      	ldr	r3, [pc, #56]	; (8014e04 <xTaskIncrementTick+0x16c>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	3301      	adds	r3, #1
 8014dce:	4a0d      	ldr	r2, [pc, #52]	; (8014e04 <xTaskIncrementTick+0x16c>)
 8014dd0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014dd2:	697b      	ldr	r3, [r7, #20]
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3718      	adds	r7, #24
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}
 8014ddc:	24000e04 	.word	0x24000e04
 8014de0:	24000de0 	.word	0x24000de0
 8014de4:	24000d94 	.word	0x24000d94
 8014de8:	24000d98 	.word	0x24000d98
 8014dec:	24000df4 	.word	0x24000df4
 8014df0:	24000dfc 	.word	0x24000dfc
 8014df4:	24000de4 	.word	0x24000de4
 8014df8:	24000ce0 	.word	0x24000ce0
 8014dfc:	24000cdc 	.word	0x24000cdc
 8014e00:	24000df0 	.word	0x24000df0
 8014e04:	24000dec 	.word	0x24000dec

08014e08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b087      	sub	sp, #28
 8014e0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014e0e:	4b29      	ldr	r3, [pc, #164]	; (8014eb4 <vTaskSwitchContext+0xac>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d003      	beq.n	8014e1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014e16:	4b28      	ldr	r3, [pc, #160]	; (8014eb8 <vTaskSwitchContext+0xb0>)
 8014e18:	2201      	movs	r2, #1
 8014e1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014e1c:	e044      	b.n	8014ea8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8014e1e:	4b26      	ldr	r3, [pc, #152]	; (8014eb8 <vTaskSwitchContext+0xb0>)
 8014e20:	2200      	movs	r2, #0
 8014e22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e24:	4b25      	ldr	r3, [pc, #148]	; (8014ebc <vTaskSwitchContext+0xb4>)
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	fab3 f383 	clz	r3, r3
 8014e30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014e32:	7afb      	ldrb	r3, [r7, #11]
 8014e34:	f1c3 031f 	rsb	r3, r3, #31
 8014e38:	617b      	str	r3, [r7, #20]
 8014e3a:	4921      	ldr	r1, [pc, #132]	; (8014ec0 <vTaskSwitchContext+0xb8>)
 8014e3c:	697a      	ldr	r2, [r7, #20]
 8014e3e:	4613      	mov	r3, r2
 8014e40:	009b      	lsls	r3, r3, #2
 8014e42:	4413      	add	r3, r2
 8014e44:	009b      	lsls	r3, r3, #2
 8014e46:	440b      	add	r3, r1
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d10a      	bne.n	8014e64 <vTaskSwitchContext+0x5c>
	__asm volatile
 8014e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e52:	f383 8811 	msr	BASEPRI, r3
 8014e56:	f3bf 8f6f 	isb	sy
 8014e5a:	f3bf 8f4f 	dsb	sy
 8014e5e:	607b      	str	r3, [r7, #4]
}
 8014e60:	bf00      	nop
 8014e62:	e7fe      	b.n	8014e62 <vTaskSwitchContext+0x5a>
 8014e64:	697a      	ldr	r2, [r7, #20]
 8014e66:	4613      	mov	r3, r2
 8014e68:	009b      	lsls	r3, r3, #2
 8014e6a:	4413      	add	r3, r2
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	4a14      	ldr	r2, [pc, #80]	; (8014ec0 <vTaskSwitchContext+0xb8>)
 8014e70:	4413      	add	r3, r2
 8014e72:	613b      	str	r3, [r7, #16]
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	685b      	ldr	r3, [r3, #4]
 8014e78:	685a      	ldr	r2, [r3, #4]
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	605a      	str	r2, [r3, #4]
 8014e7e:	693b      	ldr	r3, [r7, #16]
 8014e80:	685a      	ldr	r2, [r3, #4]
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	3308      	adds	r3, #8
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d104      	bne.n	8014e94 <vTaskSwitchContext+0x8c>
 8014e8a:	693b      	ldr	r3, [r7, #16]
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	685a      	ldr	r2, [r3, #4]
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	605a      	str	r2, [r3, #4]
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	68db      	ldr	r3, [r3, #12]
 8014e9a:	4a0a      	ldr	r2, [pc, #40]	; (8014ec4 <vTaskSwitchContext+0xbc>)
 8014e9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014e9e:	4b09      	ldr	r3, [pc, #36]	; (8014ec4 <vTaskSwitchContext+0xbc>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	334c      	adds	r3, #76	; 0x4c
 8014ea4:	4a08      	ldr	r2, [pc, #32]	; (8014ec8 <vTaskSwitchContext+0xc0>)
 8014ea6:	6013      	str	r3, [r2, #0]
}
 8014ea8:	bf00      	nop
 8014eaa:	371c      	adds	r7, #28
 8014eac:	46bd      	mov	sp, r7
 8014eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb2:	4770      	bx	lr
 8014eb4:	24000e04 	.word	0x24000e04
 8014eb8:	24000df0 	.word	0x24000df0
 8014ebc:	24000de4 	.word	0x24000de4
 8014ec0:	24000ce0 	.word	0x24000ce0
 8014ec4:	24000cdc 	.word	0x24000cdc
 8014ec8:	24000260 	.word	0x24000260

08014ecc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b082      	sub	sp, #8
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ed4:	f000 f852 	bl	8014f7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014ed8:	4b06      	ldr	r3, [pc, #24]	; (8014ef4 <prvIdleTask+0x28>)
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	2b01      	cmp	r3, #1
 8014ede:	d9f9      	bls.n	8014ed4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014ee0:	4b05      	ldr	r3, [pc, #20]	; (8014ef8 <prvIdleTask+0x2c>)
 8014ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ee6:	601a      	str	r2, [r3, #0]
 8014ee8:	f3bf 8f4f 	dsb	sy
 8014eec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014ef0:	e7f0      	b.n	8014ed4 <prvIdleTask+0x8>
 8014ef2:	bf00      	nop
 8014ef4:	24000ce0 	.word	0x24000ce0
 8014ef8:	e000ed04 	.word	0xe000ed04

08014efc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b082      	sub	sp, #8
 8014f00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f02:	2300      	movs	r3, #0
 8014f04:	607b      	str	r3, [r7, #4]
 8014f06:	e00c      	b.n	8014f22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014f08:	687a      	ldr	r2, [r7, #4]
 8014f0a:	4613      	mov	r3, r2
 8014f0c:	009b      	lsls	r3, r3, #2
 8014f0e:	4413      	add	r3, r2
 8014f10:	009b      	lsls	r3, r3, #2
 8014f12:	4a12      	ldr	r2, [pc, #72]	; (8014f5c <prvInitialiseTaskLists+0x60>)
 8014f14:	4413      	add	r3, r2
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7ff f9f6 	bl	8014308 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	607b      	str	r3, [r7, #4]
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	2b06      	cmp	r3, #6
 8014f26:	d9ef      	bls.n	8014f08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014f28:	480d      	ldr	r0, [pc, #52]	; (8014f60 <prvInitialiseTaskLists+0x64>)
 8014f2a:	f7ff f9ed 	bl	8014308 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014f2e:	480d      	ldr	r0, [pc, #52]	; (8014f64 <prvInitialiseTaskLists+0x68>)
 8014f30:	f7ff f9ea 	bl	8014308 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014f34:	480c      	ldr	r0, [pc, #48]	; (8014f68 <prvInitialiseTaskLists+0x6c>)
 8014f36:	f7ff f9e7 	bl	8014308 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014f3a:	480c      	ldr	r0, [pc, #48]	; (8014f6c <prvInitialiseTaskLists+0x70>)
 8014f3c:	f7ff f9e4 	bl	8014308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014f40:	480b      	ldr	r0, [pc, #44]	; (8014f70 <prvInitialiseTaskLists+0x74>)
 8014f42:	f7ff f9e1 	bl	8014308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014f46:	4b0b      	ldr	r3, [pc, #44]	; (8014f74 <prvInitialiseTaskLists+0x78>)
 8014f48:	4a05      	ldr	r2, [pc, #20]	; (8014f60 <prvInitialiseTaskLists+0x64>)
 8014f4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014f4c:	4b0a      	ldr	r3, [pc, #40]	; (8014f78 <prvInitialiseTaskLists+0x7c>)
 8014f4e:	4a05      	ldr	r2, [pc, #20]	; (8014f64 <prvInitialiseTaskLists+0x68>)
 8014f50:	601a      	str	r2, [r3, #0]
}
 8014f52:	bf00      	nop
 8014f54:	3708      	adds	r7, #8
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	24000ce0 	.word	0x24000ce0
 8014f60:	24000d6c 	.word	0x24000d6c
 8014f64:	24000d80 	.word	0x24000d80
 8014f68:	24000d9c 	.word	0x24000d9c
 8014f6c:	24000db0 	.word	0x24000db0
 8014f70:	24000dc8 	.word	0x24000dc8
 8014f74:	24000d94 	.word	0x24000d94
 8014f78:	24000d98 	.word	0x24000d98

08014f7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f82:	e019      	b.n	8014fb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014f84:	f000 fa0e 	bl	80153a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f88:	4b10      	ldr	r3, [pc, #64]	; (8014fcc <prvCheckTasksWaitingTermination+0x50>)
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	3304      	adds	r3, #4
 8014f94:	4618      	mov	r0, r3
 8014f96:	f7ff fa41 	bl	801441c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014f9a:	4b0d      	ldr	r3, [pc, #52]	; (8014fd0 <prvCheckTasksWaitingTermination+0x54>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	3b01      	subs	r3, #1
 8014fa0:	4a0b      	ldr	r2, [pc, #44]	; (8014fd0 <prvCheckTasksWaitingTermination+0x54>)
 8014fa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014fa4:	4b0b      	ldr	r3, [pc, #44]	; (8014fd4 <prvCheckTasksWaitingTermination+0x58>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	3b01      	subs	r3, #1
 8014faa:	4a0a      	ldr	r2, [pc, #40]	; (8014fd4 <prvCheckTasksWaitingTermination+0x58>)
 8014fac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014fae:	f000 fa29 	bl	8015404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f000 f810 	bl	8014fd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014fb8:	4b06      	ldr	r3, [pc, #24]	; (8014fd4 <prvCheckTasksWaitingTermination+0x58>)
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d1e1      	bne.n	8014f84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014fc0:	bf00      	nop
 8014fc2:	bf00      	nop
 8014fc4:	3708      	adds	r7, #8
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	24000db0 	.word	0x24000db0
 8014fd0:	24000ddc 	.word	0x24000ddc
 8014fd4:	24000dc4 	.word	0x24000dc4

08014fd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b084      	sub	sp, #16
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	334c      	adds	r3, #76	; 0x4c
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f001 ffcb 	bl	8016f80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d108      	bne.n	8015006 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f000 fb81 	bl	8015700 <vPortFree>
				vPortFree( pxTCB );
 8014ffe:	6878      	ldr	r0, [r7, #4]
 8015000:	f000 fb7e 	bl	8015700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015004:	e018      	b.n	8015038 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801500c:	2b01      	cmp	r3, #1
 801500e:	d103      	bne.n	8015018 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f000 fb75 	bl	8015700 <vPortFree>
	}
 8015016:	e00f      	b.n	8015038 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801501e:	2b02      	cmp	r3, #2
 8015020:	d00a      	beq.n	8015038 <prvDeleteTCB+0x60>
	__asm volatile
 8015022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015026:	f383 8811 	msr	BASEPRI, r3
 801502a:	f3bf 8f6f 	isb	sy
 801502e:	f3bf 8f4f 	dsb	sy
 8015032:	60fb      	str	r3, [r7, #12]
}
 8015034:	bf00      	nop
 8015036:	e7fe      	b.n	8015036 <prvDeleteTCB+0x5e>
	}
 8015038:	bf00      	nop
 801503a:	3710      	adds	r7, #16
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}

08015040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015040:	b480      	push	{r7}
 8015042:	b083      	sub	sp, #12
 8015044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015046:	4b0c      	ldr	r3, [pc, #48]	; (8015078 <prvResetNextTaskUnblockTime+0x38>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d104      	bne.n	801505a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015050:	4b0a      	ldr	r3, [pc, #40]	; (801507c <prvResetNextTaskUnblockTime+0x3c>)
 8015052:	f04f 32ff 	mov.w	r2, #4294967295
 8015056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015058:	e008      	b.n	801506c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801505a:	4b07      	ldr	r3, [pc, #28]	; (8015078 <prvResetNextTaskUnblockTime+0x38>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	68db      	ldr	r3, [r3, #12]
 8015060:	68db      	ldr	r3, [r3, #12]
 8015062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	4a04      	ldr	r2, [pc, #16]	; (801507c <prvResetNextTaskUnblockTime+0x3c>)
 801506a:	6013      	str	r3, [r2, #0]
}
 801506c:	bf00      	nop
 801506e:	370c      	adds	r7, #12
 8015070:	46bd      	mov	sp, r7
 8015072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015076:	4770      	bx	lr
 8015078:	24000d94 	.word	0x24000d94
 801507c:	24000dfc 	.word	0x24000dfc

08015080 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b084      	sub	sp, #16
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
 8015088:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801508a:	4b29      	ldr	r3, [pc, #164]	; (8015130 <prvAddCurrentTaskToDelayedList+0xb0>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015090:	4b28      	ldr	r3, [pc, #160]	; (8015134 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	3304      	adds	r3, #4
 8015096:	4618      	mov	r0, r3
 8015098:	f7ff f9c0 	bl	801441c <uxListRemove>
 801509c:	4603      	mov	r3, r0
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d10b      	bne.n	80150ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80150a2:	4b24      	ldr	r3, [pc, #144]	; (8015134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150a8:	2201      	movs	r2, #1
 80150aa:	fa02 f303 	lsl.w	r3, r2, r3
 80150ae:	43da      	mvns	r2, r3
 80150b0:	4b21      	ldr	r3, [pc, #132]	; (8015138 <prvAddCurrentTaskToDelayedList+0xb8>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	4013      	ands	r3, r2
 80150b6:	4a20      	ldr	r2, [pc, #128]	; (8015138 <prvAddCurrentTaskToDelayedList+0xb8>)
 80150b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150c0:	d10a      	bne.n	80150d8 <prvAddCurrentTaskToDelayedList+0x58>
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d007      	beq.n	80150d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150c8:	4b1a      	ldr	r3, [pc, #104]	; (8015134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	3304      	adds	r3, #4
 80150ce:	4619      	mov	r1, r3
 80150d0:	481a      	ldr	r0, [pc, #104]	; (801513c <prvAddCurrentTaskToDelayedList+0xbc>)
 80150d2:	f7ff f946 	bl	8014362 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80150d6:	e026      	b.n	8015126 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80150d8:	68fa      	ldr	r2, [r7, #12]
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	4413      	add	r3, r2
 80150de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80150e0:	4b14      	ldr	r3, [pc, #80]	; (8015134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	68ba      	ldr	r2, [r7, #8]
 80150e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80150e8:	68ba      	ldr	r2, [r7, #8]
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d209      	bcs.n	8015104 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150f0:	4b13      	ldr	r3, [pc, #76]	; (8015140 <prvAddCurrentTaskToDelayedList+0xc0>)
 80150f2:	681a      	ldr	r2, [r3, #0]
 80150f4:	4b0f      	ldr	r3, [pc, #60]	; (8015134 <prvAddCurrentTaskToDelayedList+0xb4>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	3304      	adds	r3, #4
 80150fa:	4619      	mov	r1, r3
 80150fc:	4610      	mov	r0, r2
 80150fe:	f7ff f954 	bl	80143aa <vListInsert>
}
 8015102:	e010      	b.n	8015126 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015104:	4b0f      	ldr	r3, [pc, #60]	; (8015144 <prvAddCurrentTaskToDelayedList+0xc4>)
 8015106:	681a      	ldr	r2, [r3, #0]
 8015108:	4b0a      	ldr	r3, [pc, #40]	; (8015134 <prvAddCurrentTaskToDelayedList+0xb4>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	3304      	adds	r3, #4
 801510e:	4619      	mov	r1, r3
 8015110:	4610      	mov	r0, r2
 8015112:	f7ff f94a 	bl	80143aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015116:	4b0c      	ldr	r3, [pc, #48]	; (8015148 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	68ba      	ldr	r2, [r7, #8]
 801511c:	429a      	cmp	r2, r3
 801511e:	d202      	bcs.n	8015126 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015120:	4a09      	ldr	r2, [pc, #36]	; (8015148 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	6013      	str	r3, [r2, #0]
}
 8015126:	bf00      	nop
 8015128:	3710      	adds	r7, #16
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}
 801512e:	bf00      	nop
 8015130:	24000de0 	.word	0x24000de0
 8015134:	24000cdc 	.word	0x24000cdc
 8015138:	24000de4 	.word	0x24000de4
 801513c:	24000dc8 	.word	0x24000dc8
 8015140:	24000d98 	.word	0x24000d98
 8015144:	24000d94 	.word	0x24000d94
 8015148:	24000dfc 	.word	0x24000dfc

0801514c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801514c:	b480      	push	{r7}
 801514e:	b085      	sub	sp, #20
 8015150:	af00      	add	r7, sp, #0
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	3b04      	subs	r3, #4
 801515c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	3b04      	subs	r3, #4
 801516a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	f023 0201 	bic.w	r2, r3, #1
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	3b04      	subs	r3, #4
 801517a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801517c:	4a0c      	ldr	r2, [pc, #48]	; (80151b0 <pxPortInitialiseStack+0x64>)
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	3b14      	subs	r3, #20
 8015186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015188:	687a      	ldr	r2, [r7, #4]
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	3b04      	subs	r3, #4
 8015192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	f06f 0202 	mvn.w	r2, #2
 801519a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	3b20      	subs	r3, #32
 80151a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80151a2:	68fb      	ldr	r3, [r7, #12]
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3714      	adds	r7, #20
 80151a8:	46bd      	mov	sp, r7
 80151aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ae:	4770      	bx	lr
 80151b0:	080151b5 	.word	0x080151b5

080151b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80151b4:	b480      	push	{r7}
 80151b6:	b085      	sub	sp, #20
 80151b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80151ba:	2300      	movs	r3, #0
 80151bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80151be:	4b12      	ldr	r3, [pc, #72]	; (8015208 <prvTaskExitError+0x54>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151c6:	d00a      	beq.n	80151de <prvTaskExitError+0x2a>
	__asm volatile
 80151c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151cc:	f383 8811 	msr	BASEPRI, r3
 80151d0:	f3bf 8f6f 	isb	sy
 80151d4:	f3bf 8f4f 	dsb	sy
 80151d8:	60fb      	str	r3, [r7, #12]
}
 80151da:	bf00      	nop
 80151dc:	e7fe      	b.n	80151dc <prvTaskExitError+0x28>
	__asm volatile
 80151de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e2:	f383 8811 	msr	BASEPRI, r3
 80151e6:	f3bf 8f6f 	isb	sy
 80151ea:	f3bf 8f4f 	dsb	sy
 80151ee:	60bb      	str	r3, [r7, #8]
}
 80151f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80151f2:	bf00      	nop
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d0fc      	beq.n	80151f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80151fa:	bf00      	nop
 80151fc:	bf00      	nop
 80151fe:	3714      	adds	r7, #20
 8015200:	46bd      	mov	sp, r7
 8015202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015206:	4770      	bx	lr
 8015208:	240001f8 	.word	0x240001f8
 801520c:	00000000 	.word	0x00000000

08015210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015210:	4b07      	ldr	r3, [pc, #28]	; (8015230 <pxCurrentTCBConst2>)
 8015212:	6819      	ldr	r1, [r3, #0]
 8015214:	6808      	ldr	r0, [r1, #0]
 8015216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521a:	f380 8809 	msr	PSP, r0
 801521e:	f3bf 8f6f 	isb	sy
 8015222:	f04f 0000 	mov.w	r0, #0
 8015226:	f380 8811 	msr	BASEPRI, r0
 801522a:	4770      	bx	lr
 801522c:	f3af 8000 	nop.w

08015230 <pxCurrentTCBConst2>:
 8015230:	24000cdc 	.word	0x24000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015234:	bf00      	nop
 8015236:	bf00      	nop

08015238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015238:	4808      	ldr	r0, [pc, #32]	; (801525c <prvPortStartFirstTask+0x24>)
 801523a:	6800      	ldr	r0, [r0, #0]
 801523c:	6800      	ldr	r0, [r0, #0]
 801523e:	f380 8808 	msr	MSP, r0
 8015242:	f04f 0000 	mov.w	r0, #0
 8015246:	f380 8814 	msr	CONTROL, r0
 801524a:	b662      	cpsie	i
 801524c:	b661      	cpsie	f
 801524e:	f3bf 8f4f 	dsb	sy
 8015252:	f3bf 8f6f 	isb	sy
 8015256:	df00      	svc	0
 8015258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801525a:	bf00      	nop
 801525c:	e000ed08 	.word	0xe000ed08

08015260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b086      	sub	sp, #24
 8015264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015266:	4b46      	ldr	r3, [pc, #280]	; (8015380 <xPortStartScheduler+0x120>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	4a46      	ldr	r2, [pc, #280]	; (8015384 <xPortStartScheduler+0x124>)
 801526c:	4293      	cmp	r3, r2
 801526e:	d10a      	bne.n	8015286 <xPortStartScheduler+0x26>
	__asm volatile
 8015270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015274:	f383 8811 	msr	BASEPRI, r3
 8015278:	f3bf 8f6f 	isb	sy
 801527c:	f3bf 8f4f 	dsb	sy
 8015280:	613b      	str	r3, [r7, #16]
}
 8015282:	bf00      	nop
 8015284:	e7fe      	b.n	8015284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015286:	4b3e      	ldr	r3, [pc, #248]	; (8015380 <xPortStartScheduler+0x120>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	4a3f      	ldr	r2, [pc, #252]	; (8015388 <xPortStartScheduler+0x128>)
 801528c:	4293      	cmp	r3, r2
 801528e:	d10a      	bne.n	80152a6 <xPortStartScheduler+0x46>
	__asm volatile
 8015290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015294:	f383 8811 	msr	BASEPRI, r3
 8015298:	f3bf 8f6f 	isb	sy
 801529c:	f3bf 8f4f 	dsb	sy
 80152a0:	60fb      	str	r3, [r7, #12]
}
 80152a2:	bf00      	nop
 80152a4:	e7fe      	b.n	80152a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80152a6:	4b39      	ldr	r3, [pc, #228]	; (801538c <xPortStartScheduler+0x12c>)
 80152a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	781b      	ldrb	r3, [r3, #0]
 80152ae:	b2db      	uxtb	r3, r3
 80152b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	22ff      	movs	r2, #255	; 0xff
 80152b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	b2db      	uxtb	r3, r3
 80152be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80152c0:	78fb      	ldrb	r3, [r7, #3]
 80152c2:	b2db      	uxtb	r3, r3
 80152c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80152c8:	b2da      	uxtb	r2, r3
 80152ca:	4b31      	ldr	r3, [pc, #196]	; (8015390 <xPortStartScheduler+0x130>)
 80152cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80152ce:	4b31      	ldr	r3, [pc, #196]	; (8015394 <xPortStartScheduler+0x134>)
 80152d0:	2207      	movs	r2, #7
 80152d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152d4:	e009      	b.n	80152ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80152d6:	4b2f      	ldr	r3, [pc, #188]	; (8015394 <xPortStartScheduler+0x134>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	3b01      	subs	r3, #1
 80152dc:	4a2d      	ldr	r2, [pc, #180]	; (8015394 <xPortStartScheduler+0x134>)
 80152de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80152e0:	78fb      	ldrb	r3, [r7, #3]
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	005b      	lsls	r3, r3, #1
 80152e6:	b2db      	uxtb	r3, r3
 80152e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152ea:	78fb      	ldrb	r3, [r7, #3]
 80152ec:	b2db      	uxtb	r3, r3
 80152ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80152f2:	2b80      	cmp	r3, #128	; 0x80
 80152f4:	d0ef      	beq.n	80152d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80152f6:	4b27      	ldr	r3, [pc, #156]	; (8015394 <xPortStartScheduler+0x134>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	f1c3 0307 	rsb	r3, r3, #7
 80152fe:	2b04      	cmp	r3, #4
 8015300:	d00a      	beq.n	8015318 <xPortStartScheduler+0xb8>
	__asm volatile
 8015302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015306:	f383 8811 	msr	BASEPRI, r3
 801530a:	f3bf 8f6f 	isb	sy
 801530e:	f3bf 8f4f 	dsb	sy
 8015312:	60bb      	str	r3, [r7, #8]
}
 8015314:	bf00      	nop
 8015316:	e7fe      	b.n	8015316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015318:	4b1e      	ldr	r3, [pc, #120]	; (8015394 <xPortStartScheduler+0x134>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	021b      	lsls	r3, r3, #8
 801531e:	4a1d      	ldr	r2, [pc, #116]	; (8015394 <xPortStartScheduler+0x134>)
 8015320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015322:	4b1c      	ldr	r3, [pc, #112]	; (8015394 <xPortStartScheduler+0x134>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801532a:	4a1a      	ldr	r2, [pc, #104]	; (8015394 <xPortStartScheduler+0x134>)
 801532c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	b2da      	uxtb	r2, r3
 8015332:	697b      	ldr	r3, [r7, #20]
 8015334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015336:	4b18      	ldr	r3, [pc, #96]	; (8015398 <xPortStartScheduler+0x138>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	4a17      	ldr	r2, [pc, #92]	; (8015398 <xPortStartScheduler+0x138>)
 801533c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015342:	4b15      	ldr	r3, [pc, #84]	; (8015398 <xPortStartScheduler+0x138>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	4a14      	ldr	r2, [pc, #80]	; (8015398 <xPortStartScheduler+0x138>)
 8015348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801534c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801534e:	f000 f8dd 	bl	801550c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015352:	4b12      	ldr	r3, [pc, #72]	; (801539c <xPortStartScheduler+0x13c>)
 8015354:	2200      	movs	r2, #0
 8015356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015358:	f000 f8fc 	bl	8015554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801535c:	4b10      	ldr	r3, [pc, #64]	; (80153a0 <xPortStartScheduler+0x140>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	4a0f      	ldr	r2, [pc, #60]	; (80153a0 <xPortStartScheduler+0x140>)
 8015362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015368:	f7ff ff66 	bl	8015238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801536c:	f7ff fd4c 	bl	8014e08 <vTaskSwitchContext>
	prvTaskExitError();
 8015370:	f7ff ff20 	bl	80151b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015374:	2300      	movs	r3, #0
}
 8015376:	4618      	mov	r0, r3
 8015378:	3718      	adds	r7, #24
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}
 801537e:	bf00      	nop
 8015380:	e000ed00 	.word	0xe000ed00
 8015384:	410fc271 	.word	0x410fc271
 8015388:	410fc270 	.word	0x410fc270
 801538c:	e000e400 	.word	0xe000e400
 8015390:	24000e08 	.word	0x24000e08
 8015394:	24000e0c 	.word	0x24000e0c
 8015398:	e000ed20 	.word	0xe000ed20
 801539c:	240001f8 	.word	0x240001f8
 80153a0:	e000ef34 	.word	0xe000ef34

080153a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80153a4:	b480      	push	{r7}
 80153a6:	b083      	sub	sp, #12
 80153a8:	af00      	add	r7, sp, #0
	__asm volatile
 80153aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ae:	f383 8811 	msr	BASEPRI, r3
 80153b2:	f3bf 8f6f 	isb	sy
 80153b6:	f3bf 8f4f 	dsb	sy
 80153ba:	607b      	str	r3, [r7, #4]
}
 80153bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80153be:	4b0f      	ldr	r3, [pc, #60]	; (80153fc <vPortEnterCritical+0x58>)
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	3301      	adds	r3, #1
 80153c4:	4a0d      	ldr	r2, [pc, #52]	; (80153fc <vPortEnterCritical+0x58>)
 80153c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80153c8:	4b0c      	ldr	r3, [pc, #48]	; (80153fc <vPortEnterCritical+0x58>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	2b01      	cmp	r3, #1
 80153ce:	d10f      	bne.n	80153f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80153d0:	4b0b      	ldr	r3, [pc, #44]	; (8015400 <vPortEnterCritical+0x5c>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	b2db      	uxtb	r3, r3
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d00a      	beq.n	80153f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80153da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153de:	f383 8811 	msr	BASEPRI, r3
 80153e2:	f3bf 8f6f 	isb	sy
 80153e6:	f3bf 8f4f 	dsb	sy
 80153ea:	603b      	str	r3, [r7, #0]
}
 80153ec:	bf00      	nop
 80153ee:	e7fe      	b.n	80153ee <vPortEnterCritical+0x4a>
	}
}
 80153f0:	bf00      	nop
 80153f2:	370c      	adds	r7, #12
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr
 80153fc:	240001f8 	.word	0x240001f8
 8015400:	e000ed04 	.word	0xe000ed04

08015404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015404:	b480      	push	{r7}
 8015406:	b083      	sub	sp, #12
 8015408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801540a:	4b12      	ldr	r3, [pc, #72]	; (8015454 <vPortExitCritical+0x50>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d10a      	bne.n	8015428 <vPortExitCritical+0x24>
	__asm volatile
 8015412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015416:	f383 8811 	msr	BASEPRI, r3
 801541a:	f3bf 8f6f 	isb	sy
 801541e:	f3bf 8f4f 	dsb	sy
 8015422:	607b      	str	r3, [r7, #4]
}
 8015424:	bf00      	nop
 8015426:	e7fe      	b.n	8015426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015428:	4b0a      	ldr	r3, [pc, #40]	; (8015454 <vPortExitCritical+0x50>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	3b01      	subs	r3, #1
 801542e:	4a09      	ldr	r2, [pc, #36]	; (8015454 <vPortExitCritical+0x50>)
 8015430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015432:	4b08      	ldr	r3, [pc, #32]	; (8015454 <vPortExitCritical+0x50>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d105      	bne.n	8015446 <vPortExitCritical+0x42>
 801543a:	2300      	movs	r3, #0
 801543c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801543e:	683b      	ldr	r3, [r7, #0]
 8015440:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015446:	bf00      	nop
 8015448:	370c      	adds	r7, #12
 801544a:	46bd      	mov	sp, r7
 801544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015450:	4770      	bx	lr
 8015452:	bf00      	nop
 8015454:	240001f8 	.word	0x240001f8
	...

08015460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015460:	f3ef 8009 	mrs	r0, PSP
 8015464:	f3bf 8f6f 	isb	sy
 8015468:	4b15      	ldr	r3, [pc, #84]	; (80154c0 <pxCurrentTCBConst>)
 801546a:	681a      	ldr	r2, [r3, #0]
 801546c:	f01e 0f10 	tst.w	lr, #16
 8015470:	bf08      	it	eq
 8015472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801547a:	6010      	str	r0, [r2, #0]
 801547c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015484:	f380 8811 	msr	BASEPRI, r0
 8015488:	f3bf 8f4f 	dsb	sy
 801548c:	f3bf 8f6f 	isb	sy
 8015490:	f7ff fcba 	bl	8014e08 <vTaskSwitchContext>
 8015494:	f04f 0000 	mov.w	r0, #0
 8015498:	f380 8811 	msr	BASEPRI, r0
 801549c:	bc09      	pop	{r0, r3}
 801549e:	6819      	ldr	r1, [r3, #0]
 80154a0:	6808      	ldr	r0, [r1, #0]
 80154a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154a6:	f01e 0f10 	tst.w	lr, #16
 80154aa:	bf08      	it	eq
 80154ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80154b0:	f380 8809 	msr	PSP, r0
 80154b4:	f3bf 8f6f 	isb	sy
 80154b8:	4770      	bx	lr
 80154ba:	bf00      	nop
 80154bc:	f3af 8000 	nop.w

080154c0 <pxCurrentTCBConst>:
 80154c0:	24000cdc 	.word	0x24000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80154c4:	bf00      	nop
 80154c6:	bf00      	nop

080154c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b082      	sub	sp, #8
 80154cc:	af00      	add	r7, sp, #0
	__asm volatile
 80154ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154d2:	f383 8811 	msr	BASEPRI, r3
 80154d6:	f3bf 8f6f 	isb	sy
 80154da:	f3bf 8f4f 	dsb	sy
 80154de:	607b      	str	r3, [r7, #4]
}
 80154e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80154e2:	f7ff fbd9 	bl	8014c98 <xTaskIncrementTick>
 80154e6:	4603      	mov	r3, r0
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d003      	beq.n	80154f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80154ec:	4b06      	ldr	r3, [pc, #24]	; (8015508 <SysTick_Handler+0x40>)
 80154ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154f2:	601a      	str	r2, [r3, #0]
 80154f4:	2300      	movs	r3, #0
 80154f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	f383 8811 	msr	BASEPRI, r3
}
 80154fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015500:	bf00      	nop
 8015502:	3708      	adds	r7, #8
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	e000ed04 	.word	0xe000ed04

0801550c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801550c:	b480      	push	{r7}
 801550e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015510:	4b0b      	ldr	r3, [pc, #44]	; (8015540 <vPortSetupTimerInterrupt+0x34>)
 8015512:	2200      	movs	r2, #0
 8015514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015516:	4b0b      	ldr	r3, [pc, #44]	; (8015544 <vPortSetupTimerInterrupt+0x38>)
 8015518:	2200      	movs	r2, #0
 801551a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801551c:	4b0a      	ldr	r3, [pc, #40]	; (8015548 <vPortSetupTimerInterrupt+0x3c>)
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	4a0a      	ldr	r2, [pc, #40]	; (801554c <vPortSetupTimerInterrupt+0x40>)
 8015522:	fba2 2303 	umull	r2, r3, r2, r3
 8015526:	099b      	lsrs	r3, r3, #6
 8015528:	4a09      	ldr	r2, [pc, #36]	; (8015550 <vPortSetupTimerInterrupt+0x44>)
 801552a:	3b01      	subs	r3, #1
 801552c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801552e:	4b04      	ldr	r3, [pc, #16]	; (8015540 <vPortSetupTimerInterrupt+0x34>)
 8015530:	2207      	movs	r2, #7
 8015532:	601a      	str	r2, [r3, #0]
}
 8015534:	bf00      	nop
 8015536:	46bd      	mov	sp, r7
 8015538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553c:	4770      	bx	lr
 801553e:	bf00      	nop
 8015540:	e000e010 	.word	0xe000e010
 8015544:	e000e018 	.word	0xe000e018
 8015548:	24000044 	.word	0x24000044
 801554c:	10624dd3 	.word	0x10624dd3
 8015550:	e000e014 	.word	0xe000e014

08015554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015564 <vPortEnableVFP+0x10>
 8015558:	6801      	ldr	r1, [r0, #0]
 801555a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801555e:	6001      	str	r1, [r0, #0]
 8015560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015562:	bf00      	nop
 8015564:	e000ed88 	.word	0xe000ed88

08015568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b08a      	sub	sp, #40	; 0x28
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015570:	2300      	movs	r3, #0
 8015572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015574:	f7ff fae6 	bl	8014b44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015578:	4b5b      	ldr	r3, [pc, #364]	; (80156e8 <pvPortMalloc+0x180>)
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d101      	bne.n	8015584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015580:	f000 f920 	bl	80157c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015584:	4b59      	ldr	r3, [pc, #356]	; (80156ec <pvPortMalloc+0x184>)
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	4013      	ands	r3, r2
 801558c:	2b00      	cmp	r3, #0
 801558e:	f040 8093 	bne.w	80156b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d01d      	beq.n	80155d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015598:	2208      	movs	r2, #8
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	4413      	add	r3, r2
 801559e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f003 0307 	and.w	r3, r3, #7
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d014      	beq.n	80155d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	f023 0307 	bic.w	r3, r3, #7
 80155b0:	3308      	adds	r3, #8
 80155b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f003 0307 	and.w	r3, r3, #7
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d00a      	beq.n	80155d4 <pvPortMalloc+0x6c>
	__asm volatile
 80155be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155c2:	f383 8811 	msr	BASEPRI, r3
 80155c6:	f3bf 8f6f 	isb	sy
 80155ca:	f3bf 8f4f 	dsb	sy
 80155ce:	617b      	str	r3, [r7, #20]
}
 80155d0:	bf00      	nop
 80155d2:	e7fe      	b.n	80155d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d06e      	beq.n	80156b8 <pvPortMalloc+0x150>
 80155da:	4b45      	ldr	r3, [pc, #276]	; (80156f0 <pvPortMalloc+0x188>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d869      	bhi.n	80156b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80155e4:	4b43      	ldr	r3, [pc, #268]	; (80156f4 <pvPortMalloc+0x18c>)
 80155e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80155e8:	4b42      	ldr	r3, [pc, #264]	; (80156f4 <pvPortMalloc+0x18c>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80155ee:	e004      	b.n	80155fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80155f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80155f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80155fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fc:	685b      	ldr	r3, [r3, #4]
 80155fe:	687a      	ldr	r2, [r7, #4]
 8015600:	429a      	cmp	r2, r3
 8015602:	d903      	bls.n	801560c <pvPortMalloc+0xa4>
 8015604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d1f1      	bne.n	80155f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801560c:	4b36      	ldr	r3, [pc, #216]	; (80156e8 <pvPortMalloc+0x180>)
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015612:	429a      	cmp	r2, r3
 8015614:	d050      	beq.n	80156b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015616:	6a3b      	ldr	r3, [r7, #32]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	2208      	movs	r2, #8
 801561c:	4413      	add	r3, r2
 801561e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015622:	681a      	ldr	r2, [r3, #0]
 8015624:	6a3b      	ldr	r3, [r7, #32]
 8015626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801562a:	685a      	ldr	r2, [r3, #4]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	1ad2      	subs	r2, r2, r3
 8015630:	2308      	movs	r3, #8
 8015632:	005b      	lsls	r3, r3, #1
 8015634:	429a      	cmp	r2, r3
 8015636:	d91f      	bls.n	8015678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	4413      	add	r3, r2
 801563e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015640:	69bb      	ldr	r3, [r7, #24]
 8015642:	f003 0307 	and.w	r3, r3, #7
 8015646:	2b00      	cmp	r3, #0
 8015648:	d00a      	beq.n	8015660 <pvPortMalloc+0xf8>
	__asm volatile
 801564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801564e:	f383 8811 	msr	BASEPRI, r3
 8015652:	f3bf 8f6f 	isb	sy
 8015656:	f3bf 8f4f 	dsb	sy
 801565a:	613b      	str	r3, [r7, #16]
}
 801565c:	bf00      	nop
 801565e:	e7fe      	b.n	801565e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015662:	685a      	ldr	r2, [r3, #4]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	1ad2      	subs	r2, r2, r3
 8015668:	69bb      	ldr	r3, [r7, #24]
 801566a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015672:	69b8      	ldr	r0, [r7, #24]
 8015674:	f000 f908 	bl	8015888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015678:	4b1d      	ldr	r3, [pc, #116]	; (80156f0 <pvPortMalloc+0x188>)
 801567a:	681a      	ldr	r2, [r3, #0]
 801567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567e:	685b      	ldr	r3, [r3, #4]
 8015680:	1ad3      	subs	r3, r2, r3
 8015682:	4a1b      	ldr	r2, [pc, #108]	; (80156f0 <pvPortMalloc+0x188>)
 8015684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015686:	4b1a      	ldr	r3, [pc, #104]	; (80156f0 <pvPortMalloc+0x188>)
 8015688:	681a      	ldr	r2, [r3, #0]
 801568a:	4b1b      	ldr	r3, [pc, #108]	; (80156f8 <pvPortMalloc+0x190>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	429a      	cmp	r2, r3
 8015690:	d203      	bcs.n	801569a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015692:	4b17      	ldr	r3, [pc, #92]	; (80156f0 <pvPortMalloc+0x188>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	4a18      	ldr	r2, [pc, #96]	; (80156f8 <pvPortMalloc+0x190>)
 8015698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801569c:	685a      	ldr	r2, [r3, #4]
 801569e:	4b13      	ldr	r3, [pc, #76]	; (80156ec <pvPortMalloc+0x184>)
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	431a      	orrs	r2, r3
 80156a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80156a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156aa:	2200      	movs	r2, #0
 80156ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80156ae:	4b13      	ldr	r3, [pc, #76]	; (80156fc <pvPortMalloc+0x194>)
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	3301      	adds	r3, #1
 80156b4:	4a11      	ldr	r2, [pc, #68]	; (80156fc <pvPortMalloc+0x194>)
 80156b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80156b8:	f7ff fa52 	bl	8014b60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80156bc:	69fb      	ldr	r3, [r7, #28]
 80156be:	f003 0307 	and.w	r3, r3, #7
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d00a      	beq.n	80156dc <pvPortMalloc+0x174>
	__asm volatile
 80156c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ca:	f383 8811 	msr	BASEPRI, r3
 80156ce:	f3bf 8f6f 	isb	sy
 80156d2:	f3bf 8f4f 	dsb	sy
 80156d6:	60fb      	str	r3, [r7, #12]
}
 80156d8:	bf00      	nop
 80156da:	e7fe      	b.n	80156da <pvPortMalloc+0x172>
	return pvReturn;
 80156dc:	69fb      	ldr	r3, [r7, #28]
}
 80156de:	4618      	mov	r0, r3
 80156e0:	3728      	adds	r7, #40	; 0x28
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}
 80156e6:	bf00      	nop
 80156e8:	24004a18 	.word	0x24004a18
 80156ec:	24004a2c 	.word	0x24004a2c
 80156f0:	24004a1c 	.word	0x24004a1c
 80156f4:	24004a10 	.word	0x24004a10
 80156f8:	24004a20 	.word	0x24004a20
 80156fc:	24004a24 	.word	0x24004a24

08015700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b086      	sub	sp, #24
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d04d      	beq.n	80157ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015712:	2308      	movs	r3, #8
 8015714:	425b      	negs	r3, r3
 8015716:	697a      	ldr	r2, [r7, #20]
 8015718:	4413      	add	r3, r2
 801571a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801571c:	697b      	ldr	r3, [r7, #20]
 801571e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015720:	693b      	ldr	r3, [r7, #16]
 8015722:	685a      	ldr	r2, [r3, #4]
 8015724:	4b24      	ldr	r3, [pc, #144]	; (80157b8 <vPortFree+0xb8>)
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	4013      	ands	r3, r2
 801572a:	2b00      	cmp	r3, #0
 801572c:	d10a      	bne.n	8015744 <vPortFree+0x44>
	__asm volatile
 801572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015732:	f383 8811 	msr	BASEPRI, r3
 8015736:	f3bf 8f6f 	isb	sy
 801573a:	f3bf 8f4f 	dsb	sy
 801573e:	60fb      	str	r3, [r7, #12]
}
 8015740:	bf00      	nop
 8015742:	e7fe      	b.n	8015742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015744:	693b      	ldr	r3, [r7, #16]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d00a      	beq.n	8015762 <vPortFree+0x62>
	__asm volatile
 801574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015750:	f383 8811 	msr	BASEPRI, r3
 8015754:	f3bf 8f6f 	isb	sy
 8015758:	f3bf 8f4f 	dsb	sy
 801575c:	60bb      	str	r3, [r7, #8]
}
 801575e:	bf00      	nop
 8015760:	e7fe      	b.n	8015760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	685a      	ldr	r2, [r3, #4]
 8015766:	4b14      	ldr	r3, [pc, #80]	; (80157b8 <vPortFree+0xb8>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	4013      	ands	r3, r2
 801576c:	2b00      	cmp	r3, #0
 801576e:	d01e      	beq.n	80157ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015770:	693b      	ldr	r3, [r7, #16]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d11a      	bne.n	80157ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	685a      	ldr	r2, [r3, #4]
 801577c:	4b0e      	ldr	r3, [pc, #56]	; (80157b8 <vPortFree+0xb8>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	43db      	mvns	r3, r3
 8015782:	401a      	ands	r2, r3
 8015784:	693b      	ldr	r3, [r7, #16]
 8015786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015788:	f7ff f9dc 	bl	8014b44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	685a      	ldr	r2, [r3, #4]
 8015790:	4b0a      	ldr	r3, [pc, #40]	; (80157bc <vPortFree+0xbc>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	4413      	add	r3, r2
 8015796:	4a09      	ldr	r2, [pc, #36]	; (80157bc <vPortFree+0xbc>)
 8015798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801579a:	6938      	ldr	r0, [r7, #16]
 801579c:	f000 f874 	bl	8015888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80157a0:	4b07      	ldr	r3, [pc, #28]	; (80157c0 <vPortFree+0xc0>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	3301      	adds	r3, #1
 80157a6:	4a06      	ldr	r2, [pc, #24]	; (80157c0 <vPortFree+0xc0>)
 80157a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80157aa:	f7ff f9d9 	bl	8014b60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80157ae:	bf00      	nop
 80157b0:	3718      	adds	r7, #24
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}
 80157b6:	bf00      	nop
 80157b8:	24004a2c 	.word	0x24004a2c
 80157bc:	24004a1c 	.word	0x24004a1c
 80157c0:	24004a28 	.word	0x24004a28

080157c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80157c4:	b480      	push	{r7}
 80157c6:	b085      	sub	sp, #20
 80157c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80157ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80157ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80157d0:	4b27      	ldr	r3, [pc, #156]	; (8015870 <prvHeapInit+0xac>)
 80157d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	f003 0307 	and.w	r3, r3, #7
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d00c      	beq.n	80157f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	3307      	adds	r3, #7
 80157e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	f023 0307 	bic.w	r3, r3, #7
 80157ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80157ec:	68ba      	ldr	r2, [r7, #8]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	1ad3      	subs	r3, r2, r3
 80157f2:	4a1f      	ldr	r2, [pc, #124]	; (8015870 <prvHeapInit+0xac>)
 80157f4:	4413      	add	r3, r2
 80157f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80157fc:	4a1d      	ldr	r2, [pc, #116]	; (8015874 <prvHeapInit+0xb0>)
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015802:	4b1c      	ldr	r3, [pc, #112]	; (8015874 <prvHeapInit+0xb0>)
 8015804:	2200      	movs	r2, #0
 8015806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	68ba      	ldr	r2, [r7, #8]
 801580c:	4413      	add	r3, r2
 801580e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015810:	2208      	movs	r2, #8
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	1a9b      	subs	r3, r3, r2
 8015816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	f023 0307 	bic.w	r3, r3, #7
 801581e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	4a15      	ldr	r2, [pc, #84]	; (8015878 <prvHeapInit+0xb4>)
 8015824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015826:	4b14      	ldr	r3, [pc, #80]	; (8015878 <prvHeapInit+0xb4>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	2200      	movs	r2, #0
 801582c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801582e:	4b12      	ldr	r3, [pc, #72]	; (8015878 <prvHeapInit+0xb4>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	2200      	movs	r2, #0
 8015834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	68fa      	ldr	r2, [r7, #12]
 801583e:	1ad2      	subs	r2, r2, r3
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015844:	4b0c      	ldr	r3, [pc, #48]	; (8015878 <prvHeapInit+0xb4>)
 8015846:	681a      	ldr	r2, [r3, #0]
 8015848:	683b      	ldr	r3, [r7, #0]
 801584a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	685b      	ldr	r3, [r3, #4]
 8015850:	4a0a      	ldr	r2, [pc, #40]	; (801587c <prvHeapInit+0xb8>)
 8015852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	685b      	ldr	r3, [r3, #4]
 8015858:	4a09      	ldr	r2, [pc, #36]	; (8015880 <prvHeapInit+0xbc>)
 801585a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801585c:	4b09      	ldr	r3, [pc, #36]	; (8015884 <prvHeapInit+0xc0>)
 801585e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015862:	601a      	str	r2, [r3, #0]
}
 8015864:	bf00      	nop
 8015866:	3714      	adds	r7, #20
 8015868:	46bd      	mov	sp, r7
 801586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586e:	4770      	bx	lr
 8015870:	24000e10 	.word	0x24000e10
 8015874:	24004a10 	.word	0x24004a10
 8015878:	24004a18 	.word	0x24004a18
 801587c:	24004a20 	.word	0x24004a20
 8015880:	24004a1c 	.word	0x24004a1c
 8015884:	24004a2c 	.word	0x24004a2c

08015888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015888:	b480      	push	{r7}
 801588a:	b085      	sub	sp, #20
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015890:	4b28      	ldr	r3, [pc, #160]	; (8015934 <prvInsertBlockIntoFreeList+0xac>)
 8015892:	60fb      	str	r3, [r7, #12]
 8015894:	e002      	b.n	801589c <prvInsertBlockIntoFreeList+0x14>
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	60fb      	str	r3, [r7, #12]
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d8f7      	bhi.n	8015896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	68ba      	ldr	r2, [r7, #8]
 80158b0:	4413      	add	r3, r2
 80158b2:	687a      	ldr	r2, [r7, #4]
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d108      	bne.n	80158ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	685a      	ldr	r2, [r3, #4]
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	441a      	add	r2, r3
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	685b      	ldr	r3, [r3, #4]
 80158d2:	68ba      	ldr	r2, [r7, #8]
 80158d4:	441a      	add	r2, r3
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	429a      	cmp	r2, r3
 80158dc:	d118      	bne.n	8015910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	681a      	ldr	r2, [r3, #0]
 80158e2:	4b15      	ldr	r3, [pc, #84]	; (8015938 <prvInsertBlockIntoFreeList+0xb0>)
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	429a      	cmp	r2, r3
 80158e8:	d00d      	beq.n	8015906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	685a      	ldr	r2, [r3, #4]
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	685b      	ldr	r3, [r3, #4]
 80158f4:	441a      	add	r2, r3
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	681a      	ldr	r2, [r3, #0]
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	601a      	str	r2, [r3, #0]
 8015904:	e008      	b.n	8015918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015906:	4b0c      	ldr	r3, [pc, #48]	; (8015938 <prvInsertBlockIntoFreeList+0xb0>)
 8015908:	681a      	ldr	r2, [r3, #0]
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	601a      	str	r2, [r3, #0]
 801590e:	e003      	b.n	8015918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	681a      	ldr	r2, [r3, #0]
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015918:	68fa      	ldr	r2, [r7, #12]
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	429a      	cmp	r2, r3
 801591e:	d002      	beq.n	8015926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	687a      	ldr	r2, [r7, #4]
 8015924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015926:	bf00      	nop
 8015928:	3714      	adds	r7, #20
 801592a:	46bd      	mov	sp, r7
 801592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015930:	4770      	bx	lr
 8015932:	bf00      	nop
 8015934:	24004a10 	.word	0x24004a10
 8015938:	24004a18 	.word	0x24004a18

0801593c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015940:	2200      	movs	r2, #0
 8015942:	4913      	ldr	r1, [pc, #76]	; (8015990 <MX_USB_DEVICE_Init+0x54>)
 8015944:	4813      	ldr	r0, [pc, #76]	; (8015994 <MX_USB_DEVICE_Init+0x58>)
 8015946:	f7fd faf7 	bl	8012f38 <USBD_Init>
 801594a:	4603      	mov	r3, r0
 801594c:	2b00      	cmp	r3, #0
 801594e:	d001      	beq.n	8015954 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015950:	f7ec fb80 	bl	8002054 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015954:	4910      	ldr	r1, [pc, #64]	; (8015998 <MX_USB_DEVICE_Init+0x5c>)
 8015956:	480f      	ldr	r0, [pc, #60]	; (8015994 <MX_USB_DEVICE_Init+0x58>)
 8015958:	f7fd fb1e 	bl	8012f98 <USBD_RegisterClass>
 801595c:	4603      	mov	r3, r0
 801595e:	2b00      	cmp	r3, #0
 8015960:	d001      	beq.n	8015966 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015962:	f7ec fb77 	bl	8002054 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015966:	490d      	ldr	r1, [pc, #52]	; (801599c <MX_USB_DEVICE_Init+0x60>)
 8015968:	480a      	ldr	r0, [pc, #40]	; (8015994 <MX_USB_DEVICE_Init+0x58>)
 801596a:	f7fd fa3f 	bl	8012dec <USBD_CDC_RegisterInterface>
 801596e:	4603      	mov	r3, r0
 8015970:	2b00      	cmp	r3, #0
 8015972:	d001      	beq.n	8015978 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015974:	f7ec fb6e 	bl	8002054 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015978:	4806      	ldr	r0, [pc, #24]	; (8015994 <MX_USB_DEVICE_Init+0x58>)
 801597a:	f7fd fb34 	bl	8012fe6 <USBD_Start>
 801597e:	4603      	mov	r3, r0
 8015980:	2b00      	cmp	r3, #0
 8015982:	d001      	beq.n	8015988 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015984:	f7ec fb66 	bl	8002054 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015988:	f7f3 fb1e 	bl	8008fc8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801598c:	bf00      	nop
 801598e:	bd80      	pop	{r7, pc}
 8015990:	24000210 	.word	0x24000210
 8015994:	24005308 	.word	0x24005308
 8015998:	240000f4 	.word	0x240000f4
 801599c:	240001fc 	.word	0x240001fc

080159a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80159a4:	2200      	movs	r2, #0
 80159a6:	4905      	ldr	r1, [pc, #20]	; (80159bc <CDC_Init_FS+0x1c>)
 80159a8:	4805      	ldr	r0, [pc, #20]	; (80159c0 <CDC_Init_FS+0x20>)
 80159aa:	f7fd fa34 	bl	8012e16 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80159ae:	4905      	ldr	r1, [pc, #20]	; (80159c4 <CDC_Init_FS+0x24>)
 80159b0:	4803      	ldr	r0, [pc, #12]	; (80159c0 <CDC_Init_FS+0x20>)
 80159b2:	f7fd fa4e 	bl	8012e52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80159b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	bd80      	pop	{r7, pc}
 80159bc:	24005dd8 	.word	0x24005dd8
 80159c0:	24005308 	.word	0x24005308
 80159c4:	240055d8 	.word	0x240055d8

080159c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80159c8:	b480      	push	{r7}
 80159ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80159cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80159ce:	4618      	mov	r0, r3
 80159d0:	46bd      	mov	sp, r7
 80159d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d6:	4770      	bx	lr

080159d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80159d8:	b480      	push	{r7}
 80159da:	b083      	sub	sp, #12
 80159dc:	af00      	add	r7, sp, #0
 80159de:	4603      	mov	r3, r0
 80159e0:	6039      	str	r1, [r7, #0]
 80159e2:	71fb      	strb	r3, [r7, #7]
 80159e4:	4613      	mov	r3, r2
 80159e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80159e8:	79fb      	ldrb	r3, [r7, #7]
 80159ea:	2b23      	cmp	r3, #35	; 0x23
 80159ec:	d84a      	bhi.n	8015a84 <CDC_Control_FS+0xac>
 80159ee:	a201      	add	r2, pc, #4	; (adr r2, 80159f4 <CDC_Control_FS+0x1c>)
 80159f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159f4:	08015a85 	.word	0x08015a85
 80159f8:	08015a85 	.word	0x08015a85
 80159fc:	08015a85 	.word	0x08015a85
 8015a00:	08015a85 	.word	0x08015a85
 8015a04:	08015a85 	.word	0x08015a85
 8015a08:	08015a85 	.word	0x08015a85
 8015a0c:	08015a85 	.word	0x08015a85
 8015a10:	08015a85 	.word	0x08015a85
 8015a14:	08015a85 	.word	0x08015a85
 8015a18:	08015a85 	.word	0x08015a85
 8015a1c:	08015a85 	.word	0x08015a85
 8015a20:	08015a85 	.word	0x08015a85
 8015a24:	08015a85 	.word	0x08015a85
 8015a28:	08015a85 	.word	0x08015a85
 8015a2c:	08015a85 	.word	0x08015a85
 8015a30:	08015a85 	.word	0x08015a85
 8015a34:	08015a85 	.word	0x08015a85
 8015a38:	08015a85 	.word	0x08015a85
 8015a3c:	08015a85 	.word	0x08015a85
 8015a40:	08015a85 	.word	0x08015a85
 8015a44:	08015a85 	.word	0x08015a85
 8015a48:	08015a85 	.word	0x08015a85
 8015a4c:	08015a85 	.word	0x08015a85
 8015a50:	08015a85 	.word	0x08015a85
 8015a54:	08015a85 	.word	0x08015a85
 8015a58:	08015a85 	.word	0x08015a85
 8015a5c:	08015a85 	.word	0x08015a85
 8015a60:	08015a85 	.word	0x08015a85
 8015a64:	08015a85 	.word	0x08015a85
 8015a68:	08015a85 	.word	0x08015a85
 8015a6c:	08015a85 	.word	0x08015a85
 8015a70:	08015a85 	.word	0x08015a85
 8015a74:	08015a85 	.word	0x08015a85
 8015a78:	08015a85 	.word	0x08015a85
 8015a7c:	08015a85 	.word	0x08015a85
 8015a80:	08015a85 	.word	0x08015a85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015a84:	bf00      	nop
  }

  return (USBD_OK);
 8015a86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015a88:	4618      	mov	r0, r3
 8015a8a:	370c      	adds	r7, #12
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a92:	4770      	bx	lr

08015a94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b082      	sub	sp, #8
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
 8015a9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015a9e:	6879      	ldr	r1, [r7, #4]
 8015aa0:	4805      	ldr	r0, [pc, #20]	; (8015ab8 <CDC_Receive_FS+0x24>)
 8015aa2:	f7fd f9d6 	bl	8012e52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015aa6:	4804      	ldr	r0, [pc, #16]	; (8015ab8 <CDC_Receive_FS+0x24>)
 8015aa8:	f7fd fa1c 	bl	8012ee4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015aac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3708      	adds	r7, #8
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	bf00      	nop
 8015ab8:	24005308 	.word	0x24005308

08015abc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b084      	sub	sp, #16
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
 8015ac4:	460b      	mov	r3, r1
 8015ac6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015acc:	4b0d      	ldr	r3, [pc, #52]	; (8015b04 <CDC_Transmit_FS+0x48>)
 8015ace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015ad2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015ad4:	68bb      	ldr	r3, [r7, #8]
 8015ad6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d001      	beq.n	8015ae2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015ade:	2301      	movs	r3, #1
 8015ae0:	e00b      	b.n	8015afa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015ae2:	887b      	ldrh	r3, [r7, #2]
 8015ae4:	461a      	mov	r2, r3
 8015ae6:	6879      	ldr	r1, [r7, #4]
 8015ae8:	4806      	ldr	r0, [pc, #24]	; (8015b04 <CDC_Transmit_FS+0x48>)
 8015aea:	f7fd f994 	bl	8012e16 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015aee:	4805      	ldr	r0, [pc, #20]	; (8015b04 <CDC_Transmit_FS+0x48>)
 8015af0:	f7fd f9c8 	bl	8012e84 <USBD_CDC_TransmitPacket>
 8015af4:	4603      	mov	r3, r0
 8015af6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015afa:	4618      	mov	r0, r3
 8015afc:	3710      	adds	r7, #16
 8015afe:	46bd      	mov	sp, r7
 8015b00:	bd80      	pop	{r7, pc}
 8015b02:	bf00      	nop
 8015b04:	24005308 	.word	0x24005308

08015b08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015b08:	b480      	push	{r7}
 8015b0a:	b087      	sub	sp, #28
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	60f8      	str	r0, [r7, #12]
 8015b10:	60b9      	str	r1, [r7, #8]
 8015b12:	4613      	mov	r3, r2
 8015b14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015b16:	2300      	movs	r3, #0
 8015b18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	371c      	adds	r7, #28
 8015b22:	46bd      	mov	sp, r7
 8015b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b28:	4770      	bx	lr
	...

08015b2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b2c:	b480      	push	{r7}
 8015b2e:	b083      	sub	sp, #12
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	4603      	mov	r3, r0
 8015b34:	6039      	str	r1, [r7, #0]
 8015b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	2212      	movs	r2, #18
 8015b3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015b3e:	4b03      	ldr	r3, [pc, #12]	; (8015b4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	370c      	adds	r7, #12
 8015b44:	46bd      	mov	sp, r7
 8015b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4a:	4770      	bx	lr
 8015b4c:	2400022c 	.word	0x2400022c

08015b50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b50:	b480      	push	{r7}
 8015b52:	b083      	sub	sp, #12
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	4603      	mov	r3, r0
 8015b58:	6039      	str	r1, [r7, #0]
 8015b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	2204      	movs	r2, #4
 8015b60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015b62:	4b03      	ldr	r3, [pc, #12]	; (8015b70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	370c      	adds	r7, #12
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6e:	4770      	bx	lr
 8015b70:	24000240 	.word	0x24000240

08015b74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	6039      	str	r1, [r7, #0]
 8015b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015b80:	79fb      	ldrb	r3, [r7, #7]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d105      	bne.n	8015b92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015b86:	683a      	ldr	r2, [r7, #0]
 8015b88:	4907      	ldr	r1, [pc, #28]	; (8015ba8 <USBD_FS_ProductStrDescriptor+0x34>)
 8015b8a:	4808      	ldr	r0, [pc, #32]	; (8015bac <USBD_FS_ProductStrDescriptor+0x38>)
 8015b8c:	f7fe fa5d 	bl	801404a <USBD_GetString>
 8015b90:	e004      	b.n	8015b9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015b92:	683a      	ldr	r2, [r7, #0]
 8015b94:	4904      	ldr	r1, [pc, #16]	; (8015ba8 <USBD_FS_ProductStrDescriptor+0x34>)
 8015b96:	4805      	ldr	r0, [pc, #20]	; (8015bac <USBD_FS_ProductStrDescriptor+0x38>)
 8015b98:	f7fe fa57 	bl	801404a <USBD_GetString>
  }
  return USBD_StrDesc;
 8015b9c:	4b02      	ldr	r3, [pc, #8]	; (8015ba8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3708      	adds	r7, #8
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	240065d8 	.word	0x240065d8
 8015bac:	080194a0 	.word	0x080194a0

08015bb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	6039      	str	r1, [r7, #0]
 8015bba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015bbc:	683a      	ldr	r2, [r7, #0]
 8015bbe:	4904      	ldr	r1, [pc, #16]	; (8015bd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015bc0:	4804      	ldr	r0, [pc, #16]	; (8015bd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015bc2:	f7fe fa42 	bl	801404a <USBD_GetString>
  return USBD_StrDesc;
 8015bc6:	4b02      	ldr	r3, [pc, #8]	; (8015bd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3708      	adds	r7, #8
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}
 8015bd0:	240065d8 	.word	0x240065d8
 8015bd4:	080194b8 	.word	0x080194b8

08015bd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b082      	sub	sp, #8
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	4603      	mov	r3, r0
 8015be0:	6039      	str	r1, [r7, #0]
 8015be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	221a      	movs	r2, #26
 8015be8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015bea:	f000 f843 	bl	8015c74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015bee:	4b02      	ldr	r3, [pc, #8]	; (8015bf8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	3708      	adds	r7, #8
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}
 8015bf8:	24000244 	.word	0x24000244

08015bfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b082      	sub	sp, #8
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	4603      	mov	r3, r0
 8015c04:	6039      	str	r1, [r7, #0]
 8015c06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015c08:	79fb      	ldrb	r3, [r7, #7]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d105      	bne.n	8015c1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015c0e:	683a      	ldr	r2, [r7, #0]
 8015c10:	4907      	ldr	r1, [pc, #28]	; (8015c30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015c12:	4808      	ldr	r0, [pc, #32]	; (8015c34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015c14:	f7fe fa19 	bl	801404a <USBD_GetString>
 8015c18:	e004      	b.n	8015c24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015c1a:	683a      	ldr	r2, [r7, #0]
 8015c1c:	4904      	ldr	r1, [pc, #16]	; (8015c30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015c1e:	4805      	ldr	r0, [pc, #20]	; (8015c34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015c20:	f7fe fa13 	bl	801404a <USBD_GetString>
  }
  return USBD_StrDesc;
 8015c24:	4b02      	ldr	r3, [pc, #8]	; (8015c30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3708      	adds	r7, #8
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}
 8015c2e:	bf00      	nop
 8015c30:	240065d8 	.word	0x240065d8
 8015c34:	080194cc 	.word	0x080194cc

08015c38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	4603      	mov	r3, r0
 8015c40:	6039      	str	r1, [r7, #0]
 8015c42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015c44:	79fb      	ldrb	r3, [r7, #7]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d105      	bne.n	8015c56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015c4a:	683a      	ldr	r2, [r7, #0]
 8015c4c:	4907      	ldr	r1, [pc, #28]	; (8015c6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015c4e:	4808      	ldr	r0, [pc, #32]	; (8015c70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015c50:	f7fe f9fb 	bl	801404a <USBD_GetString>
 8015c54:	e004      	b.n	8015c60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015c56:	683a      	ldr	r2, [r7, #0]
 8015c58:	4904      	ldr	r1, [pc, #16]	; (8015c6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015c5a:	4805      	ldr	r0, [pc, #20]	; (8015c70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015c5c:	f7fe f9f5 	bl	801404a <USBD_GetString>
  }
  return USBD_StrDesc;
 8015c60:	4b02      	ldr	r3, [pc, #8]	; (8015c6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3708      	adds	r7, #8
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}
 8015c6a:	bf00      	nop
 8015c6c:	240065d8 	.word	0x240065d8
 8015c70:	080194d8 	.word	0x080194d8

08015c74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b084      	sub	sp, #16
 8015c78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015c7a:	4b0f      	ldr	r3, [pc, #60]	; (8015cb8 <Get_SerialNum+0x44>)
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015c80:	4b0e      	ldr	r3, [pc, #56]	; (8015cbc <Get_SerialNum+0x48>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015c86:	4b0e      	ldr	r3, [pc, #56]	; (8015cc0 <Get_SerialNum+0x4c>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015c8c:	68fa      	ldr	r2, [r7, #12]
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	4413      	add	r3, r2
 8015c92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d009      	beq.n	8015cae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015c9a:	2208      	movs	r2, #8
 8015c9c:	4909      	ldr	r1, [pc, #36]	; (8015cc4 <Get_SerialNum+0x50>)
 8015c9e:	68f8      	ldr	r0, [r7, #12]
 8015ca0:	f000 f814 	bl	8015ccc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015ca4:	2204      	movs	r2, #4
 8015ca6:	4908      	ldr	r1, [pc, #32]	; (8015cc8 <Get_SerialNum+0x54>)
 8015ca8:	68b8      	ldr	r0, [r7, #8]
 8015caa:	f000 f80f 	bl	8015ccc <IntToUnicode>
  }
}
 8015cae:	bf00      	nop
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	1ff1e800 	.word	0x1ff1e800
 8015cbc:	1ff1e804 	.word	0x1ff1e804
 8015cc0:	1ff1e808 	.word	0x1ff1e808
 8015cc4:	24000246 	.word	0x24000246
 8015cc8:	24000256 	.word	0x24000256

08015ccc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b087      	sub	sp, #28
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	60f8      	str	r0, [r7, #12]
 8015cd4:	60b9      	str	r1, [r7, #8]
 8015cd6:	4613      	mov	r3, r2
 8015cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015cde:	2300      	movs	r3, #0
 8015ce0:	75fb      	strb	r3, [r7, #23]
 8015ce2:	e027      	b.n	8015d34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	0f1b      	lsrs	r3, r3, #28
 8015ce8:	2b09      	cmp	r3, #9
 8015cea:	d80b      	bhi.n	8015d04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	0f1b      	lsrs	r3, r3, #28
 8015cf0:	b2da      	uxtb	r2, r3
 8015cf2:	7dfb      	ldrb	r3, [r7, #23]
 8015cf4:	005b      	lsls	r3, r3, #1
 8015cf6:	4619      	mov	r1, r3
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	440b      	add	r3, r1
 8015cfc:	3230      	adds	r2, #48	; 0x30
 8015cfe:	b2d2      	uxtb	r2, r2
 8015d00:	701a      	strb	r2, [r3, #0]
 8015d02:	e00a      	b.n	8015d1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	0f1b      	lsrs	r3, r3, #28
 8015d08:	b2da      	uxtb	r2, r3
 8015d0a:	7dfb      	ldrb	r3, [r7, #23]
 8015d0c:	005b      	lsls	r3, r3, #1
 8015d0e:	4619      	mov	r1, r3
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	440b      	add	r3, r1
 8015d14:	3237      	adds	r2, #55	; 0x37
 8015d16:	b2d2      	uxtb	r2, r2
 8015d18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	011b      	lsls	r3, r3, #4
 8015d1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015d20:	7dfb      	ldrb	r3, [r7, #23]
 8015d22:	005b      	lsls	r3, r3, #1
 8015d24:	3301      	adds	r3, #1
 8015d26:	68ba      	ldr	r2, [r7, #8]
 8015d28:	4413      	add	r3, r2
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015d2e:	7dfb      	ldrb	r3, [r7, #23]
 8015d30:	3301      	adds	r3, #1
 8015d32:	75fb      	strb	r3, [r7, #23]
 8015d34:	7dfa      	ldrb	r2, [r7, #23]
 8015d36:	79fb      	ldrb	r3, [r7, #7]
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	d3d3      	bcc.n	8015ce4 <IntToUnicode+0x18>
  }
}
 8015d3c:	bf00      	nop
 8015d3e:	bf00      	nop
 8015d40:	371c      	adds	r7, #28
 8015d42:	46bd      	mov	sp, r7
 8015d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d48:	4770      	bx	lr
	...

08015d4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b08a      	sub	sp, #40	; 0x28
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015d54:	f107 0314 	add.w	r3, r7, #20
 8015d58:	2200      	movs	r2, #0
 8015d5a:	601a      	str	r2, [r3, #0]
 8015d5c:	605a      	str	r2, [r3, #4]
 8015d5e:	609a      	str	r2, [r3, #8]
 8015d60:	60da      	str	r2, [r3, #12]
 8015d62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	4a1f      	ldr	r2, [pc, #124]	; (8015de8 <HAL_PCD_MspInit+0x9c>)
 8015d6a:	4293      	cmp	r3, r2
 8015d6c:	d138      	bne.n	8015de0 <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015d6e:	f7f3 f92b 	bl	8008fc8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015d72:	4b1e      	ldr	r3, [pc, #120]	; (8015dec <HAL_PCD_MspInit+0xa0>)
 8015d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015d78:	4a1c      	ldr	r2, [pc, #112]	; (8015dec <HAL_PCD_MspInit+0xa0>)
 8015d7a:	f043 0301 	orr.w	r3, r3, #1
 8015d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015d82:	4b1a      	ldr	r3, [pc, #104]	; (8015dec <HAL_PCD_MspInit+0xa0>)
 8015d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015d88:	f003 0301 	and.w	r3, r3, #1
 8015d8c:	613b      	str	r3, [r7, #16]
 8015d8e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015d90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d96:	2302      	movs	r3, #2
 8015d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8015da2:	230a      	movs	r3, #10
 8015da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015da6:	f107 0314 	add.w	r3, r7, #20
 8015daa:	4619      	mov	r1, r3
 8015dac:	4810      	ldr	r0, [pc, #64]	; (8015df0 <HAL_PCD_MspInit+0xa4>)
 8015dae:	f7f1 fcc5 	bl	800773c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015db2:	4b0e      	ldr	r3, [pc, #56]	; (8015dec <HAL_PCD_MspInit+0xa0>)
 8015db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015db8:	4a0c      	ldr	r2, [pc, #48]	; (8015dec <HAL_PCD_MspInit+0xa0>)
 8015dba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8015dc2:	4b0a      	ldr	r3, [pc, #40]	; (8015dec <HAL_PCD_MspInit+0xa0>)
 8015dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015dcc:	60fb      	str	r3, [r7, #12]
 8015dce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	2105      	movs	r1, #5
 8015dd4:	2065      	movs	r0, #101	; 0x65
 8015dd6:	f7f0 fdd5 	bl	8006984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015dda:	2065      	movs	r0, #101	; 0x65
 8015ddc:	f7f0 fdec 	bl	80069b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015de0:	bf00      	nop
 8015de2:	3728      	adds	r7, #40	; 0x28
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}
 8015de8:	40080000 	.word	0x40080000
 8015dec:	58024400 	.word	0x58024400
 8015df0:	58020000 	.word	0x58020000

08015df4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015e08:	4619      	mov	r1, r3
 8015e0a:	4610      	mov	r0, r2
 8015e0c:	f7fd f936 	bl	801307c <USBD_LL_SetupStage>
}
 8015e10:	bf00      	nop
 8015e12:	3708      	adds	r7, #8
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}

08015e18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b082      	sub	sp, #8
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
 8015e20:	460b      	mov	r3, r1
 8015e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015e2a:	78fa      	ldrb	r2, [r7, #3]
 8015e2c:	6879      	ldr	r1, [r7, #4]
 8015e2e:	4613      	mov	r3, r2
 8015e30:	00db      	lsls	r3, r3, #3
 8015e32:	1a9b      	subs	r3, r3, r2
 8015e34:	009b      	lsls	r3, r3, #2
 8015e36:	440b      	add	r3, r1
 8015e38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015e3c:	681a      	ldr	r2, [r3, #0]
 8015e3e:	78fb      	ldrb	r3, [r7, #3]
 8015e40:	4619      	mov	r1, r3
 8015e42:	f7fd f970 	bl	8013126 <USBD_LL_DataOutStage>
}
 8015e46:	bf00      	nop
 8015e48:	3708      	adds	r7, #8
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}

08015e4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e4e:	b580      	push	{r7, lr}
 8015e50:	b082      	sub	sp, #8
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	6078      	str	r0, [r7, #4]
 8015e56:	460b      	mov	r3, r1
 8015e58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015e60:	78fa      	ldrb	r2, [r7, #3]
 8015e62:	6879      	ldr	r1, [r7, #4]
 8015e64:	4613      	mov	r3, r2
 8015e66:	00db      	lsls	r3, r3, #3
 8015e68:	1a9b      	subs	r3, r3, r2
 8015e6a:	009b      	lsls	r3, r3, #2
 8015e6c:	440b      	add	r3, r1
 8015e6e:	3348      	adds	r3, #72	; 0x48
 8015e70:	681a      	ldr	r2, [r3, #0]
 8015e72:	78fb      	ldrb	r3, [r7, #3]
 8015e74:	4619      	mov	r1, r3
 8015e76:	f7fd f9b9 	bl	80131ec <USBD_LL_DataInStage>
}
 8015e7a:	bf00      	nop
 8015e7c:	3708      	adds	r7, #8
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}

08015e82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e82:	b580      	push	{r7, lr}
 8015e84:	b082      	sub	sp, #8
 8015e86:	af00      	add	r7, sp, #0
 8015e88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7fd facd 	bl	8013430 <USBD_LL_SOF>
}
 8015e96:	bf00      	nop
 8015e98:	3708      	adds	r7, #8
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}

08015e9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e9e:	b580      	push	{r7, lr}
 8015ea0:	b084      	sub	sp, #16
 8015ea2:	af00      	add	r7, sp, #0
 8015ea4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	68db      	ldr	r3, [r3, #12]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d102      	bne.n	8015eb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	73fb      	strb	r3, [r7, #15]
 8015eb6:	e008      	b.n	8015eca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	68db      	ldr	r3, [r3, #12]
 8015ebc:	2b02      	cmp	r3, #2
 8015ebe:	d102      	bne.n	8015ec6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015ec0:	2301      	movs	r3, #1
 8015ec2:	73fb      	strb	r3, [r7, #15]
 8015ec4:	e001      	b.n	8015eca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015ec6:	f7ec f8c5 	bl	8002054 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ed0:	7bfa      	ldrb	r2, [r7, #15]
 8015ed2:	4611      	mov	r1, r2
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7fd fa6d 	bl	80133b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7fd fa19 	bl	8013318 <USBD_LL_Reset>
}
 8015ee6:	bf00      	nop
 8015ee8:	3710      	adds	r7, #16
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
	...

08015ef0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b082      	sub	sp, #8
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015efe:	4618      	mov	r0, r3
 8015f00:	f7fd fa68 	bl	80133d4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	687a      	ldr	r2, [r7, #4]
 8015f10:	6812      	ldr	r2, [r2, #0]
 8015f12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015f16:	f043 0301 	orr.w	r3, r3, #1
 8015f1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6a1b      	ldr	r3, [r3, #32]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d005      	beq.n	8015f30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015f24:	4b04      	ldr	r3, [pc, #16]	; (8015f38 <HAL_PCD_SuspendCallback+0x48>)
 8015f26:	691b      	ldr	r3, [r3, #16]
 8015f28:	4a03      	ldr	r2, [pc, #12]	; (8015f38 <HAL_PCD_SuspendCallback+0x48>)
 8015f2a:	f043 0306 	orr.w	r3, r3, #6
 8015f2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015f30:	bf00      	nop
 8015f32:	3708      	adds	r7, #8
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	e000ed00 	.word	0xe000ed00

08015f3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b082      	sub	sp, #8
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	f7fd fa58 	bl	8013400 <USBD_LL_Resume>
}
 8015f50:	bf00      	nop
 8015f52:	3708      	adds	r7, #8
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}

08015f58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	460b      	mov	r3, r1
 8015f62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f6a:	78fa      	ldrb	r2, [r7, #3]
 8015f6c:	4611      	mov	r1, r2
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f7fd faa6 	bl	80134c0 <USBD_LL_IsoOUTIncomplete>
}
 8015f74:	bf00      	nop
 8015f76:	3708      	adds	r7, #8
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}

08015f7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b082      	sub	sp, #8
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
 8015f84:	460b      	mov	r3, r1
 8015f86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f8e:	78fa      	ldrb	r2, [r7, #3]
 8015f90:	4611      	mov	r1, r2
 8015f92:	4618      	mov	r0, r3
 8015f94:	f7fd fa6e 	bl	8013474 <USBD_LL_IsoINIncomplete>
}
 8015f98:	bf00      	nop
 8015f9a:	3708      	adds	r7, #8
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}

08015fa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b082      	sub	sp, #8
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f7fd faac 	bl	801350c <USBD_LL_DevConnected>
}
 8015fb4:	bf00      	nop
 8015fb6:	3708      	adds	r7, #8
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}

08015fbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7fd faa9 	bl	8013522 <USBD_LL_DevDisconnected>
}
 8015fd0:	bf00      	nop
 8015fd2:	3708      	adds	r7, #8
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}

08015fd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b082      	sub	sp, #8
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d13e      	bne.n	8016066 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015fe8:	4a21      	ldr	r2, [pc, #132]	; (8016070 <USBD_LL_Init+0x98>)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	4a1f      	ldr	r2, [pc, #124]	; (8016070 <USBD_LL_Init+0x98>)
 8015ff4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015ff8:	4b1d      	ldr	r3, [pc, #116]	; (8016070 <USBD_LL_Init+0x98>)
 8015ffa:	4a1e      	ldr	r2, [pc, #120]	; (8016074 <USBD_LL_Init+0x9c>)
 8015ffc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015ffe:	4b1c      	ldr	r3, [pc, #112]	; (8016070 <USBD_LL_Init+0x98>)
 8016000:	2209      	movs	r2, #9
 8016002:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016004:	4b1a      	ldr	r3, [pc, #104]	; (8016070 <USBD_LL_Init+0x98>)
 8016006:	2202      	movs	r2, #2
 8016008:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 801600a:	4b19      	ldr	r3, [pc, #100]	; (8016070 <USBD_LL_Init+0x98>)
 801600c:	2201      	movs	r2, #1
 801600e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016010:	4b17      	ldr	r3, [pc, #92]	; (8016070 <USBD_LL_Init+0x98>)
 8016012:	2202      	movs	r2, #2
 8016014:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016016:	4b16      	ldr	r3, [pc, #88]	; (8016070 <USBD_LL_Init+0x98>)
 8016018:	2200      	movs	r2, #0
 801601a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801601c:	4b14      	ldr	r3, [pc, #80]	; (8016070 <USBD_LL_Init+0x98>)
 801601e:	2200      	movs	r2, #0
 8016020:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016022:	4b13      	ldr	r3, [pc, #76]	; (8016070 <USBD_LL_Init+0x98>)
 8016024:	2200      	movs	r2, #0
 8016026:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016028:	4b11      	ldr	r3, [pc, #68]	; (8016070 <USBD_LL_Init+0x98>)
 801602a:	2200      	movs	r2, #0
 801602c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801602e:	4b10      	ldr	r3, [pc, #64]	; (8016070 <USBD_LL_Init+0x98>)
 8016030:	2200      	movs	r2, #0
 8016032:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016034:	4b0e      	ldr	r3, [pc, #56]	; (8016070 <USBD_LL_Init+0x98>)
 8016036:	2200      	movs	r2, #0
 8016038:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801603a:	480d      	ldr	r0, [pc, #52]	; (8016070 <USBD_LL_Init+0x98>)
 801603c:	f7f1 fd9e 	bl	8007b7c <HAL_PCD_Init>
 8016040:	4603      	mov	r3, r0
 8016042:	2b00      	cmp	r3, #0
 8016044:	d001      	beq.n	801604a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016046:	f7ec f805 	bl	8002054 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801604a:	2180      	movs	r1, #128	; 0x80
 801604c:	4808      	ldr	r0, [pc, #32]	; (8016070 <USBD_LL_Init+0x98>)
 801604e:	f7f2 ff30 	bl	8008eb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016052:	2240      	movs	r2, #64	; 0x40
 8016054:	2100      	movs	r1, #0
 8016056:	4806      	ldr	r0, [pc, #24]	; (8016070 <USBD_LL_Init+0x98>)
 8016058:	f7f2 fee4 	bl	8008e24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801605c:	2280      	movs	r2, #128	; 0x80
 801605e:	2101      	movs	r1, #1
 8016060:	4803      	ldr	r0, [pc, #12]	; (8016070 <USBD_LL_Init+0x98>)
 8016062:	f7f2 fedf 	bl	8008e24 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8016066:	2300      	movs	r3, #0
}
 8016068:	4618      	mov	r0, r3
 801606a:	3708      	adds	r7, #8
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}
 8016070:	240067d8 	.word	0x240067d8
 8016074:	40080000 	.word	0x40080000

08016078 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016080:	2300      	movs	r3, #0
 8016082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016084:	2300      	movs	r3, #0
 8016086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801608e:	4618      	mov	r0, r3
 8016090:	f7f1 fe98 	bl	8007dc4 <HAL_PCD_Start>
 8016094:	4603      	mov	r3, r0
 8016096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016098:	7bfb      	ldrb	r3, [r7, #15]
 801609a:	4618      	mov	r0, r3
 801609c:	f000 f942 	bl	8016324 <USBD_Get_USB_Status>
 80160a0:	4603      	mov	r3, r0
 80160a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80160a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3710      	adds	r7, #16
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}

080160ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80160ae:	b580      	push	{r7, lr}
 80160b0:	b084      	sub	sp, #16
 80160b2:	af00      	add	r7, sp, #0
 80160b4:	6078      	str	r0, [r7, #4]
 80160b6:	4608      	mov	r0, r1
 80160b8:	4611      	mov	r1, r2
 80160ba:	461a      	mov	r2, r3
 80160bc:	4603      	mov	r3, r0
 80160be:	70fb      	strb	r3, [r7, #3]
 80160c0:	460b      	mov	r3, r1
 80160c2:	70bb      	strb	r3, [r7, #2]
 80160c4:	4613      	mov	r3, r2
 80160c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160c8:	2300      	movs	r3, #0
 80160ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160cc:	2300      	movs	r3, #0
 80160ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80160d6:	78bb      	ldrb	r3, [r7, #2]
 80160d8:	883a      	ldrh	r2, [r7, #0]
 80160da:	78f9      	ldrb	r1, [r7, #3]
 80160dc:	f7f2 faa9 	bl	8008632 <HAL_PCD_EP_Open>
 80160e0:	4603      	mov	r3, r0
 80160e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160e4:	7bfb      	ldrb	r3, [r7, #15]
 80160e6:	4618      	mov	r0, r3
 80160e8:	f000 f91c 	bl	8016324 <USBD_Get_USB_Status>
 80160ec:	4603      	mov	r3, r0
 80160ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80160f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80160f2:	4618      	mov	r0, r3
 80160f4:	3710      	adds	r7, #16
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}

080160fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80160fa:	b580      	push	{r7, lr}
 80160fc:	b084      	sub	sp, #16
 80160fe:	af00      	add	r7, sp, #0
 8016100:	6078      	str	r0, [r7, #4]
 8016102:	460b      	mov	r3, r1
 8016104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016106:	2300      	movs	r3, #0
 8016108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801610a:	2300      	movs	r3, #0
 801610c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016114:	78fa      	ldrb	r2, [r7, #3]
 8016116:	4611      	mov	r1, r2
 8016118:	4618      	mov	r0, r3
 801611a:	f7f2 faf2 	bl	8008702 <HAL_PCD_EP_Close>
 801611e:	4603      	mov	r3, r0
 8016120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016122:	7bfb      	ldrb	r3, [r7, #15]
 8016124:	4618      	mov	r0, r3
 8016126:	f000 f8fd 	bl	8016324 <USBD_Get_USB_Status>
 801612a:	4603      	mov	r3, r0
 801612c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801612e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016130:	4618      	mov	r0, r3
 8016132:	3710      	adds	r7, #16
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}

08016138 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b084      	sub	sp, #16
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
 8016140:	460b      	mov	r3, r1
 8016142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016144:	2300      	movs	r3, #0
 8016146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016148:	2300      	movs	r3, #0
 801614a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016152:	78fa      	ldrb	r2, [r7, #3]
 8016154:	4611      	mov	r1, r2
 8016156:	4618      	mov	r0, r3
 8016158:	f7f2 fbca 	bl	80088f0 <HAL_PCD_EP_SetStall>
 801615c:	4603      	mov	r3, r0
 801615e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016160:	7bfb      	ldrb	r3, [r7, #15]
 8016162:	4618      	mov	r0, r3
 8016164:	f000 f8de 	bl	8016324 <USBD_Get_USB_Status>
 8016168:	4603      	mov	r3, r0
 801616a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801616c:	7bbb      	ldrb	r3, [r7, #14]
}
 801616e:	4618      	mov	r0, r3
 8016170:	3710      	adds	r7, #16
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}

08016176 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016176:	b580      	push	{r7, lr}
 8016178:	b084      	sub	sp, #16
 801617a:	af00      	add	r7, sp, #0
 801617c:	6078      	str	r0, [r7, #4]
 801617e:	460b      	mov	r3, r1
 8016180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016182:	2300      	movs	r3, #0
 8016184:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016186:	2300      	movs	r3, #0
 8016188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016190:	78fa      	ldrb	r2, [r7, #3]
 8016192:	4611      	mov	r1, r2
 8016194:	4618      	mov	r0, r3
 8016196:	f7f2 fc0f 	bl	80089b8 <HAL_PCD_EP_ClrStall>
 801619a:	4603      	mov	r3, r0
 801619c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801619e:	7bfb      	ldrb	r3, [r7, #15]
 80161a0:	4618      	mov	r0, r3
 80161a2:	f000 f8bf 	bl	8016324 <USBD_Get_USB_Status>
 80161a6:	4603      	mov	r3, r0
 80161a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3710      	adds	r7, #16
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd80      	pop	{r7, pc}

080161b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80161b4:	b480      	push	{r7}
 80161b6:	b085      	sub	sp, #20
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	460b      	mov	r3, r1
 80161be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80161c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80161c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	da0b      	bge.n	80161e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80161d0:	78fb      	ldrb	r3, [r7, #3]
 80161d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80161d6:	68f9      	ldr	r1, [r7, #12]
 80161d8:	4613      	mov	r3, r2
 80161da:	00db      	lsls	r3, r3, #3
 80161dc:	1a9b      	subs	r3, r3, r2
 80161de:	009b      	lsls	r3, r3, #2
 80161e0:	440b      	add	r3, r1
 80161e2:	333e      	adds	r3, #62	; 0x3e
 80161e4:	781b      	ldrb	r3, [r3, #0]
 80161e6:	e00b      	b.n	8016200 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80161e8:	78fb      	ldrb	r3, [r7, #3]
 80161ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80161ee:	68f9      	ldr	r1, [r7, #12]
 80161f0:	4613      	mov	r3, r2
 80161f2:	00db      	lsls	r3, r3, #3
 80161f4:	1a9b      	subs	r3, r3, r2
 80161f6:	009b      	lsls	r3, r3, #2
 80161f8:	440b      	add	r3, r1
 80161fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80161fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016200:	4618      	mov	r0, r3
 8016202:	3714      	adds	r7, #20
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr

0801620c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b084      	sub	sp, #16
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	460b      	mov	r3, r1
 8016216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016218:	2300      	movs	r3, #0
 801621a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801621c:	2300      	movs	r3, #0
 801621e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016226:	78fa      	ldrb	r2, [r7, #3]
 8016228:	4611      	mov	r1, r2
 801622a:	4618      	mov	r0, r3
 801622c:	f7f2 f9dc 	bl	80085e8 <HAL_PCD_SetAddress>
 8016230:	4603      	mov	r3, r0
 8016232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016234:	7bfb      	ldrb	r3, [r7, #15]
 8016236:	4618      	mov	r0, r3
 8016238:	f000 f874 	bl	8016324 <USBD_Get_USB_Status>
 801623c:	4603      	mov	r3, r0
 801623e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016240:	7bbb      	ldrb	r3, [r7, #14]
}
 8016242:	4618      	mov	r0, r3
 8016244:	3710      	adds	r7, #16
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}

0801624a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801624a:	b580      	push	{r7, lr}
 801624c:	b086      	sub	sp, #24
 801624e:	af00      	add	r7, sp, #0
 8016250:	60f8      	str	r0, [r7, #12]
 8016252:	607a      	str	r2, [r7, #4]
 8016254:	603b      	str	r3, [r7, #0]
 8016256:	460b      	mov	r3, r1
 8016258:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801625a:	2300      	movs	r3, #0
 801625c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801625e:	2300      	movs	r3, #0
 8016260:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016268:	7af9      	ldrb	r1, [r7, #11]
 801626a:	683b      	ldr	r3, [r7, #0]
 801626c:	687a      	ldr	r2, [r7, #4]
 801626e:	f7f2 faf5 	bl	800885c <HAL_PCD_EP_Transmit>
 8016272:	4603      	mov	r3, r0
 8016274:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016276:	7dfb      	ldrb	r3, [r7, #23]
 8016278:	4618      	mov	r0, r3
 801627a:	f000 f853 	bl	8016324 <USBD_Get_USB_Status>
 801627e:	4603      	mov	r3, r0
 8016280:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016282:	7dbb      	ldrb	r3, [r7, #22]
}
 8016284:	4618      	mov	r0, r3
 8016286:	3718      	adds	r7, #24
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}

0801628c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b086      	sub	sp, #24
 8016290:	af00      	add	r7, sp, #0
 8016292:	60f8      	str	r0, [r7, #12]
 8016294:	607a      	str	r2, [r7, #4]
 8016296:	603b      	str	r3, [r7, #0]
 8016298:	460b      	mov	r3, r1
 801629a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801629c:	2300      	movs	r3, #0
 801629e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162a0:	2300      	movs	r3, #0
 80162a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80162aa:	7af9      	ldrb	r1, [r7, #11]
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	687a      	ldr	r2, [r7, #4]
 80162b0:	f7f2 fa71 	bl	8008796 <HAL_PCD_EP_Receive>
 80162b4:	4603      	mov	r3, r0
 80162b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80162b8:	7dfb      	ldrb	r3, [r7, #23]
 80162ba:	4618      	mov	r0, r3
 80162bc:	f000 f832 	bl	8016324 <USBD_Get_USB_Status>
 80162c0:	4603      	mov	r3, r0
 80162c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80162c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80162c6:	4618      	mov	r0, r3
 80162c8:	3718      	adds	r7, #24
 80162ca:	46bd      	mov	sp, r7
 80162cc:	bd80      	pop	{r7, pc}

080162ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80162ce:	b580      	push	{r7, lr}
 80162d0:	b082      	sub	sp, #8
 80162d2:	af00      	add	r7, sp, #0
 80162d4:	6078      	str	r0, [r7, #4]
 80162d6:	460b      	mov	r3, r1
 80162d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80162e0:	78fa      	ldrb	r2, [r7, #3]
 80162e2:	4611      	mov	r1, r2
 80162e4:	4618      	mov	r0, r3
 80162e6:	f7f2 faa1 	bl	800882c <HAL_PCD_EP_GetRxCount>
 80162ea:	4603      	mov	r3, r0
}
 80162ec:	4618      	mov	r0, r3
 80162ee:	3708      	adds	r7, #8
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}

080162f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80162f4:	b480      	push	{r7}
 80162f6:	b083      	sub	sp, #12
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80162fc:	4b03      	ldr	r3, [pc, #12]	; (801630c <USBD_static_malloc+0x18>)
}
 80162fe:	4618      	mov	r0, r3
 8016300:	370c      	adds	r7, #12
 8016302:	46bd      	mov	sp, r7
 8016304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016308:	4770      	bx	lr
 801630a:	bf00      	nop
 801630c:	24004a30 	.word	0x24004a30

08016310 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016310:	b480      	push	{r7}
 8016312:	b083      	sub	sp, #12
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]

}
 8016318:	bf00      	nop
 801631a:	370c      	adds	r7, #12
 801631c:	46bd      	mov	sp, r7
 801631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016322:	4770      	bx	lr

08016324 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016324:	b480      	push	{r7}
 8016326:	b085      	sub	sp, #20
 8016328:	af00      	add	r7, sp, #0
 801632a:	4603      	mov	r3, r0
 801632c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801632e:	2300      	movs	r3, #0
 8016330:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016332:	79fb      	ldrb	r3, [r7, #7]
 8016334:	2b03      	cmp	r3, #3
 8016336:	d817      	bhi.n	8016368 <USBD_Get_USB_Status+0x44>
 8016338:	a201      	add	r2, pc, #4	; (adr r2, 8016340 <USBD_Get_USB_Status+0x1c>)
 801633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801633e:	bf00      	nop
 8016340:	08016351 	.word	0x08016351
 8016344:	08016357 	.word	0x08016357
 8016348:	0801635d 	.word	0x0801635d
 801634c:	08016363 	.word	0x08016363
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016350:	2300      	movs	r3, #0
 8016352:	73fb      	strb	r3, [r7, #15]
    break;
 8016354:	e00b      	b.n	801636e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016356:	2303      	movs	r3, #3
 8016358:	73fb      	strb	r3, [r7, #15]
    break;
 801635a:	e008      	b.n	801636e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801635c:	2301      	movs	r3, #1
 801635e:	73fb      	strb	r3, [r7, #15]
    break;
 8016360:	e005      	b.n	801636e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016362:	2303      	movs	r3, #3
 8016364:	73fb      	strb	r3, [r7, #15]
    break;
 8016366:	e002      	b.n	801636e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016368:	2303      	movs	r3, #3
 801636a:	73fb      	strb	r3, [r7, #15]
    break;
 801636c:	bf00      	nop
  }
  return usb_status;
 801636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016370:	4618      	mov	r0, r3
 8016372:	3714      	adds	r7, #20
 8016374:	46bd      	mov	sp, r7
 8016376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637a:	4770      	bx	lr

0801637c <atoi>:
 801637c:	220a      	movs	r2, #10
 801637e:	2100      	movs	r1, #0
 8016380:	f000 bfae 	b.w	80172e0 <strtol>

08016384 <__errno>:
 8016384:	4b01      	ldr	r3, [pc, #4]	; (801638c <__errno+0x8>)
 8016386:	6818      	ldr	r0, [r3, #0]
 8016388:	4770      	bx	lr
 801638a:	bf00      	nop
 801638c:	24000260 	.word	0x24000260

08016390 <std>:
 8016390:	2300      	movs	r3, #0
 8016392:	b510      	push	{r4, lr}
 8016394:	4604      	mov	r4, r0
 8016396:	e9c0 3300 	strd	r3, r3, [r0]
 801639a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801639e:	6083      	str	r3, [r0, #8]
 80163a0:	8181      	strh	r1, [r0, #12]
 80163a2:	6643      	str	r3, [r0, #100]	; 0x64
 80163a4:	81c2      	strh	r2, [r0, #14]
 80163a6:	6183      	str	r3, [r0, #24]
 80163a8:	4619      	mov	r1, r3
 80163aa:	2208      	movs	r2, #8
 80163ac:	305c      	adds	r0, #92	; 0x5c
 80163ae:	f000 f91a 	bl	80165e6 <memset>
 80163b2:	4b05      	ldr	r3, [pc, #20]	; (80163c8 <std+0x38>)
 80163b4:	6263      	str	r3, [r4, #36]	; 0x24
 80163b6:	4b05      	ldr	r3, [pc, #20]	; (80163cc <std+0x3c>)
 80163b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80163ba:	4b05      	ldr	r3, [pc, #20]	; (80163d0 <std+0x40>)
 80163bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80163be:	4b05      	ldr	r3, [pc, #20]	; (80163d4 <std+0x44>)
 80163c0:	6224      	str	r4, [r4, #32]
 80163c2:	6323      	str	r3, [r4, #48]	; 0x30
 80163c4:	bd10      	pop	{r4, pc}
 80163c6:	bf00      	nop
 80163c8:	08017099 	.word	0x08017099
 80163cc:	080170bb 	.word	0x080170bb
 80163d0:	080170f3 	.word	0x080170f3
 80163d4:	08017117 	.word	0x08017117

080163d8 <_cleanup_r>:
 80163d8:	4901      	ldr	r1, [pc, #4]	; (80163e0 <_cleanup_r+0x8>)
 80163da:	f000 b8af 	b.w	801653c <_fwalk_reent>
 80163de:	bf00      	nop
 80163e0:	080180a1 	.word	0x080180a1

080163e4 <__sfmoreglue>:
 80163e4:	b570      	push	{r4, r5, r6, lr}
 80163e6:	1e4a      	subs	r2, r1, #1
 80163e8:	2568      	movs	r5, #104	; 0x68
 80163ea:	4355      	muls	r5, r2
 80163ec:	460e      	mov	r6, r1
 80163ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80163f2:	f000 f901 	bl	80165f8 <_malloc_r>
 80163f6:	4604      	mov	r4, r0
 80163f8:	b140      	cbz	r0, 801640c <__sfmoreglue+0x28>
 80163fa:	2100      	movs	r1, #0
 80163fc:	e9c0 1600 	strd	r1, r6, [r0]
 8016400:	300c      	adds	r0, #12
 8016402:	60a0      	str	r0, [r4, #8]
 8016404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016408:	f000 f8ed 	bl	80165e6 <memset>
 801640c:	4620      	mov	r0, r4
 801640e:	bd70      	pop	{r4, r5, r6, pc}

08016410 <__sfp_lock_acquire>:
 8016410:	4801      	ldr	r0, [pc, #4]	; (8016418 <__sfp_lock_acquire+0x8>)
 8016412:	f000 b8d8 	b.w	80165c6 <__retarget_lock_acquire_recursive>
 8016416:	bf00      	nop
 8016418:	24006be8 	.word	0x24006be8

0801641c <__sfp_lock_release>:
 801641c:	4801      	ldr	r0, [pc, #4]	; (8016424 <__sfp_lock_release+0x8>)
 801641e:	f000 b8d3 	b.w	80165c8 <__retarget_lock_release_recursive>
 8016422:	bf00      	nop
 8016424:	24006be8 	.word	0x24006be8

08016428 <__sinit_lock_acquire>:
 8016428:	4801      	ldr	r0, [pc, #4]	; (8016430 <__sinit_lock_acquire+0x8>)
 801642a:	f000 b8cc 	b.w	80165c6 <__retarget_lock_acquire_recursive>
 801642e:	bf00      	nop
 8016430:	24006be3 	.word	0x24006be3

08016434 <__sinit_lock_release>:
 8016434:	4801      	ldr	r0, [pc, #4]	; (801643c <__sinit_lock_release+0x8>)
 8016436:	f000 b8c7 	b.w	80165c8 <__retarget_lock_release_recursive>
 801643a:	bf00      	nop
 801643c:	24006be3 	.word	0x24006be3

08016440 <__sinit>:
 8016440:	b510      	push	{r4, lr}
 8016442:	4604      	mov	r4, r0
 8016444:	f7ff fff0 	bl	8016428 <__sinit_lock_acquire>
 8016448:	69a3      	ldr	r3, [r4, #24]
 801644a:	b11b      	cbz	r3, 8016454 <__sinit+0x14>
 801644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016450:	f7ff bff0 	b.w	8016434 <__sinit_lock_release>
 8016454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016458:	6523      	str	r3, [r4, #80]	; 0x50
 801645a:	4b13      	ldr	r3, [pc, #76]	; (80164a8 <__sinit+0x68>)
 801645c:	4a13      	ldr	r2, [pc, #76]	; (80164ac <__sinit+0x6c>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	62a2      	str	r2, [r4, #40]	; 0x28
 8016462:	42a3      	cmp	r3, r4
 8016464:	bf04      	itt	eq
 8016466:	2301      	moveq	r3, #1
 8016468:	61a3      	streq	r3, [r4, #24]
 801646a:	4620      	mov	r0, r4
 801646c:	f000 f820 	bl	80164b0 <__sfp>
 8016470:	6060      	str	r0, [r4, #4]
 8016472:	4620      	mov	r0, r4
 8016474:	f000 f81c 	bl	80164b0 <__sfp>
 8016478:	60a0      	str	r0, [r4, #8]
 801647a:	4620      	mov	r0, r4
 801647c:	f000 f818 	bl	80164b0 <__sfp>
 8016480:	2200      	movs	r2, #0
 8016482:	60e0      	str	r0, [r4, #12]
 8016484:	2104      	movs	r1, #4
 8016486:	6860      	ldr	r0, [r4, #4]
 8016488:	f7ff ff82 	bl	8016390 <std>
 801648c:	68a0      	ldr	r0, [r4, #8]
 801648e:	2201      	movs	r2, #1
 8016490:	2109      	movs	r1, #9
 8016492:	f7ff ff7d 	bl	8016390 <std>
 8016496:	68e0      	ldr	r0, [r4, #12]
 8016498:	2202      	movs	r2, #2
 801649a:	2112      	movs	r1, #18
 801649c:	f7ff ff78 	bl	8016390 <std>
 80164a0:	2301      	movs	r3, #1
 80164a2:	61a3      	str	r3, [r4, #24]
 80164a4:	e7d2      	b.n	801644c <__sinit+0xc>
 80164a6:	bf00      	nop
 80164a8:	08024828 	.word	0x08024828
 80164ac:	080163d9 	.word	0x080163d9

080164b0 <__sfp>:
 80164b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164b2:	4607      	mov	r7, r0
 80164b4:	f7ff ffac 	bl	8016410 <__sfp_lock_acquire>
 80164b8:	4b1e      	ldr	r3, [pc, #120]	; (8016534 <__sfp+0x84>)
 80164ba:	681e      	ldr	r6, [r3, #0]
 80164bc:	69b3      	ldr	r3, [r6, #24]
 80164be:	b913      	cbnz	r3, 80164c6 <__sfp+0x16>
 80164c0:	4630      	mov	r0, r6
 80164c2:	f7ff ffbd 	bl	8016440 <__sinit>
 80164c6:	3648      	adds	r6, #72	; 0x48
 80164c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80164cc:	3b01      	subs	r3, #1
 80164ce:	d503      	bpl.n	80164d8 <__sfp+0x28>
 80164d0:	6833      	ldr	r3, [r6, #0]
 80164d2:	b30b      	cbz	r3, 8016518 <__sfp+0x68>
 80164d4:	6836      	ldr	r6, [r6, #0]
 80164d6:	e7f7      	b.n	80164c8 <__sfp+0x18>
 80164d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80164dc:	b9d5      	cbnz	r5, 8016514 <__sfp+0x64>
 80164de:	4b16      	ldr	r3, [pc, #88]	; (8016538 <__sfp+0x88>)
 80164e0:	60e3      	str	r3, [r4, #12]
 80164e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80164e6:	6665      	str	r5, [r4, #100]	; 0x64
 80164e8:	f000 f86c 	bl	80165c4 <__retarget_lock_init_recursive>
 80164ec:	f7ff ff96 	bl	801641c <__sfp_lock_release>
 80164f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80164f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80164f8:	6025      	str	r5, [r4, #0]
 80164fa:	61a5      	str	r5, [r4, #24]
 80164fc:	2208      	movs	r2, #8
 80164fe:	4629      	mov	r1, r5
 8016500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016504:	f000 f86f 	bl	80165e6 <memset>
 8016508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801650c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016510:	4620      	mov	r0, r4
 8016512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016514:	3468      	adds	r4, #104	; 0x68
 8016516:	e7d9      	b.n	80164cc <__sfp+0x1c>
 8016518:	2104      	movs	r1, #4
 801651a:	4638      	mov	r0, r7
 801651c:	f7ff ff62 	bl	80163e4 <__sfmoreglue>
 8016520:	4604      	mov	r4, r0
 8016522:	6030      	str	r0, [r6, #0]
 8016524:	2800      	cmp	r0, #0
 8016526:	d1d5      	bne.n	80164d4 <__sfp+0x24>
 8016528:	f7ff ff78 	bl	801641c <__sfp_lock_release>
 801652c:	230c      	movs	r3, #12
 801652e:	603b      	str	r3, [r7, #0]
 8016530:	e7ee      	b.n	8016510 <__sfp+0x60>
 8016532:	bf00      	nop
 8016534:	08024828 	.word	0x08024828
 8016538:	ffff0001 	.word	0xffff0001

0801653c <_fwalk_reent>:
 801653c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016540:	4606      	mov	r6, r0
 8016542:	4688      	mov	r8, r1
 8016544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016548:	2700      	movs	r7, #0
 801654a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801654e:	f1b9 0901 	subs.w	r9, r9, #1
 8016552:	d505      	bpl.n	8016560 <_fwalk_reent+0x24>
 8016554:	6824      	ldr	r4, [r4, #0]
 8016556:	2c00      	cmp	r4, #0
 8016558:	d1f7      	bne.n	801654a <_fwalk_reent+0xe>
 801655a:	4638      	mov	r0, r7
 801655c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016560:	89ab      	ldrh	r3, [r5, #12]
 8016562:	2b01      	cmp	r3, #1
 8016564:	d907      	bls.n	8016576 <_fwalk_reent+0x3a>
 8016566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801656a:	3301      	adds	r3, #1
 801656c:	d003      	beq.n	8016576 <_fwalk_reent+0x3a>
 801656e:	4629      	mov	r1, r5
 8016570:	4630      	mov	r0, r6
 8016572:	47c0      	blx	r8
 8016574:	4307      	orrs	r7, r0
 8016576:	3568      	adds	r5, #104	; 0x68
 8016578:	e7e9      	b.n	801654e <_fwalk_reent+0x12>
	...

0801657c <__libc_init_array>:
 801657c:	b570      	push	{r4, r5, r6, lr}
 801657e:	4d0d      	ldr	r5, [pc, #52]	; (80165b4 <__libc_init_array+0x38>)
 8016580:	4c0d      	ldr	r4, [pc, #52]	; (80165b8 <__libc_init_array+0x3c>)
 8016582:	1b64      	subs	r4, r4, r5
 8016584:	10a4      	asrs	r4, r4, #2
 8016586:	2600      	movs	r6, #0
 8016588:	42a6      	cmp	r6, r4
 801658a:	d109      	bne.n	80165a0 <__libc_init_array+0x24>
 801658c:	4d0b      	ldr	r5, [pc, #44]	; (80165bc <__libc_init_array+0x40>)
 801658e:	4c0c      	ldr	r4, [pc, #48]	; (80165c0 <__libc_init_array+0x44>)
 8016590:	f002 fe9e 	bl	80192d0 <_init>
 8016594:	1b64      	subs	r4, r4, r5
 8016596:	10a4      	asrs	r4, r4, #2
 8016598:	2600      	movs	r6, #0
 801659a:	42a6      	cmp	r6, r4
 801659c:	d105      	bne.n	80165aa <__libc_init_array+0x2e>
 801659e:	bd70      	pop	{r4, r5, r6, pc}
 80165a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80165a4:	4798      	blx	r3
 80165a6:	3601      	adds	r6, #1
 80165a8:	e7ee      	b.n	8016588 <__libc_init_array+0xc>
 80165aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80165ae:	4798      	blx	r3
 80165b0:	3601      	adds	r6, #1
 80165b2:	e7f2      	b.n	801659a <__libc_init_array+0x1e>
 80165b4:	08024c18 	.word	0x08024c18
 80165b8:	08024c18 	.word	0x08024c18
 80165bc:	08024c18 	.word	0x08024c18
 80165c0:	08024c1c 	.word	0x08024c1c

080165c4 <__retarget_lock_init_recursive>:
 80165c4:	4770      	bx	lr

080165c6 <__retarget_lock_acquire_recursive>:
 80165c6:	4770      	bx	lr

080165c8 <__retarget_lock_release_recursive>:
 80165c8:	4770      	bx	lr

080165ca <memcpy>:
 80165ca:	440a      	add	r2, r1
 80165cc:	4291      	cmp	r1, r2
 80165ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80165d2:	d100      	bne.n	80165d6 <memcpy+0xc>
 80165d4:	4770      	bx	lr
 80165d6:	b510      	push	{r4, lr}
 80165d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80165e0:	4291      	cmp	r1, r2
 80165e2:	d1f9      	bne.n	80165d8 <memcpy+0xe>
 80165e4:	bd10      	pop	{r4, pc}

080165e6 <memset>:
 80165e6:	4402      	add	r2, r0
 80165e8:	4603      	mov	r3, r0
 80165ea:	4293      	cmp	r3, r2
 80165ec:	d100      	bne.n	80165f0 <memset+0xa>
 80165ee:	4770      	bx	lr
 80165f0:	f803 1b01 	strb.w	r1, [r3], #1
 80165f4:	e7f9      	b.n	80165ea <memset+0x4>
	...

080165f8 <_malloc_r>:
 80165f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165fa:	1ccd      	adds	r5, r1, #3
 80165fc:	f025 0503 	bic.w	r5, r5, #3
 8016600:	3508      	adds	r5, #8
 8016602:	2d0c      	cmp	r5, #12
 8016604:	bf38      	it	cc
 8016606:	250c      	movcc	r5, #12
 8016608:	2d00      	cmp	r5, #0
 801660a:	4606      	mov	r6, r0
 801660c:	db01      	blt.n	8016612 <_malloc_r+0x1a>
 801660e:	42a9      	cmp	r1, r5
 8016610:	d903      	bls.n	801661a <_malloc_r+0x22>
 8016612:	230c      	movs	r3, #12
 8016614:	6033      	str	r3, [r6, #0]
 8016616:	2000      	movs	r0, #0
 8016618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801661a:	f001 fdad 	bl	8018178 <__malloc_lock>
 801661e:	4921      	ldr	r1, [pc, #132]	; (80166a4 <_malloc_r+0xac>)
 8016620:	680a      	ldr	r2, [r1, #0]
 8016622:	4614      	mov	r4, r2
 8016624:	b99c      	cbnz	r4, 801664e <_malloc_r+0x56>
 8016626:	4f20      	ldr	r7, [pc, #128]	; (80166a8 <_malloc_r+0xb0>)
 8016628:	683b      	ldr	r3, [r7, #0]
 801662a:	b923      	cbnz	r3, 8016636 <_malloc_r+0x3e>
 801662c:	4621      	mov	r1, r4
 801662e:	4630      	mov	r0, r6
 8016630:	f000 fd02 	bl	8017038 <_sbrk_r>
 8016634:	6038      	str	r0, [r7, #0]
 8016636:	4629      	mov	r1, r5
 8016638:	4630      	mov	r0, r6
 801663a:	f000 fcfd 	bl	8017038 <_sbrk_r>
 801663e:	1c43      	adds	r3, r0, #1
 8016640:	d123      	bne.n	801668a <_malloc_r+0x92>
 8016642:	230c      	movs	r3, #12
 8016644:	6033      	str	r3, [r6, #0]
 8016646:	4630      	mov	r0, r6
 8016648:	f001 fd9c 	bl	8018184 <__malloc_unlock>
 801664c:	e7e3      	b.n	8016616 <_malloc_r+0x1e>
 801664e:	6823      	ldr	r3, [r4, #0]
 8016650:	1b5b      	subs	r3, r3, r5
 8016652:	d417      	bmi.n	8016684 <_malloc_r+0x8c>
 8016654:	2b0b      	cmp	r3, #11
 8016656:	d903      	bls.n	8016660 <_malloc_r+0x68>
 8016658:	6023      	str	r3, [r4, #0]
 801665a:	441c      	add	r4, r3
 801665c:	6025      	str	r5, [r4, #0]
 801665e:	e004      	b.n	801666a <_malloc_r+0x72>
 8016660:	6863      	ldr	r3, [r4, #4]
 8016662:	42a2      	cmp	r2, r4
 8016664:	bf0c      	ite	eq
 8016666:	600b      	streq	r3, [r1, #0]
 8016668:	6053      	strne	r3, [r2, #4]
 801666a:	4630      	mov	r0, r6
 801666c:	f001 fd8a 	bl	8018184 <__malloc_unlock>
 8016670:	f104 000b 	add.w	r0, r4, #11
 8016674:	1d23      	adds	r3, r4, #4
 8016676:	f020 0007 	bic.w	r0, r0, #7
 801667a:	1ac2      	subs	r2, r0, r3
 801667c:	d0cc      	beq.n	8016618 <_malloc_r+0x20>
 801667e:	1a1b      	subs	r3, r3, r0
 8016680:	50a3      	str	r3, [r4, r2]
 8016682:	e7c9      	b.n	8016618 <_malloc_r+0x20>
 8016684:	4622      	mov	r2, r4
 8016686:	6864      	ldr	r4, [r4, #4]
 8016688:	e7cc      	b.n	8016624 <_malloc_r+0x2c>
 801668a:	1cc4      	adds	r4, r0, #3
 801668c:	f024 0403 	bic.w	r4, r4, #3
 8016690:	42a0      	cmp	r0, r4
 8016692:	d0e3      	beq.n	801665c <_malloc_r+0x64>
 8016694:	1a21      	subs	r1, r4, r0
 8016696:	4630      	mov	r0, r6
 8016698:	f000 fcce 	bl	8017038 <_sbrk_r>
 801669c:	3001      	adds	r0, #1
 801669e:	d1dd      	bne.n	801665c <_malloc_r+0x64>
 80166a0:	e7cf      	b.n	8016642 <_malloc_r+0x4a>
 80166a2:	bf00      	nop
 80166a4:	24004c50 	.word	0x24004c50
 80166a8:	24004c54 	.word	0x24004c54

080166ac <__cvt>:
 80166ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166ae:	ed2d 8b02 	vpush	{d8}
 80166b2:	eeb0 8b40 	vmov.f64	d8, d0
 80166b6:	b085      	sub	sp, #20
 80166b8:	4617      	mov	r7, r2
 80166ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80166bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80166be:	ee18 2a90 	vmov	r2, s17
 80166c2:	f025 0520 	bic.w	r5, r5, #32
 80166c6:	2a00      	cmp	r2, #0
 80166c8:	bfb6      	itet	lt
 80166ca:	222d      	movlt	r2, #45	; 0x2d
 80166cc:	2200      	movge	r2, #0
 80166ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80166d2:	2d46      	cmp	r5, #70	; 0x46
 80166d4:	460c      	mov	r4, r1
 80166d6:	701a      	strb	r2, [r3, #0]
 80166d8:	d004      	beq.n	80166e4 <__cvt+0x38>
 80166da:	2d45      	cmp	r5, #69	; 0x45
 80166dc:	d100      	bne.n	80166e0 <__cvt+0x34>
 80166de:	3401      	adds	r4, #1
 80166e0:	2102      	movs	r1, #2
 80166e2:	e000      	b.n	80166e6 <__cvt+0x3a>
 80166e4:	2103      	movs	r1, #3
 80166e6:	ab03      	add	r3, sp, #12
 80166e8:	9301      	str	r3, [sp, #4]
 80166ea:	ab02      	add	r3, sp, #8
 80166ec:	9300      	str	r3, [sp, #0]
 80166ee:	4622      	mov	r2, r4
 80166f0:	4633      	mov	r3, r6
 80166f2:	eeb0 0b48 	vmov.f64	d0, d8
 80166f6:	f000 fecb 	bl	8017490 <_dtoa_r>
 80166fa:	2d47      	cmp	r5, #71	; 0x47
 80166fc:	d109      	bne.n	8016712 <__cvt+0x66>
 80166fe:	07fb      	lsls	r3, r7, #31
 8016700:	d407      	bmi.n	8016712 <__cvt+0x66>
 8016702:	9b03      	ldr	r3, [sp, #12]
 8016704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016706:	1a1b      	subs	r3, r3, r0
 8016708:	6013      	str	r3, [r2, #0]
 801670a:	b005      	add	sp, #20
 801670c:	ecbd 8b02 	vpop	{d8}
 8016710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016712:	2d46      	cmp	r5, #70	; 0x46
 8016714:	eb00 0204 	add.w	r2, r0, r4
 8016718:	d10c      	bne.n	8016734 <__cvt+0x88>
 801671a:	7803      	ldrb	r3, [r0, #0]
 801671c:	2b30      	cmp	r3, #48	; 0x30
 801671e:	d107      	bne.n	8016730 <__cvt+0x84>
 8016720:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016728:	bf1c      	itt	ne
 801672a:	f1c4 0401 	rsbne	r4, r4, #1
 801672e:	6034      	strne	r4, [r6, #0]
 8016730:	6833      	ldr	r3, [r6, #0]
 8016732:	441a      	add	r2, r3
 8016734:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801673c:	bf08      	it	eq
 801673e:	9203      	streq	r2, [sp, #12]
 8016740:	2130      	movs	r1, #48	; 0x30
 8016742:	9b03      	ldr	r3, [sp, #12]
 8016744:	4293      	cmp	r3, r2
 8016746:	d2dc      	bcs.n	8016702 <__cvt+0x56>
 8016748:	1c5c      	adds	r4, r3, #1
 801674a:	9403      	str	r4, [sp, #12]
 801674c:	7019      	strb	r1, [r3, #0]
 801674e:	e7f8      	b.n	8016742 <__cvt+0x96>

08016750 <__exponent>:
 8016750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016752:	4603      	mov	r3, r0
 8016754:	2900      	cmp	r1, #0
 8016756:	bfb8      	it	lt
 8016758:	4249      	neglt	r1, r1
 801675a:	f803 2b02 	strb.w	r2, [r3], #2
 801675e:	bfb4      	ite	lt
 8016760:	222d      	movlt	r2, #45	; 0x2d
 8016762:	222b      	movge	r2, #43	; 0x2b
 8016764:	2909      	cmp	r1, #9
 8016766:	7042      	strb	r2, [r0, #1]
 8016768:	dd2a      	ble.n	80167c0 <__exponent+0x70>
 801676a:	f10d 0407 	add.w	r4, sp, #7
 801676e:	46a4      	mov	ip, r4
 8016770:	270a      	movs	r7, #10
 8016772:	46a6      	mov	lr, r4
 8016774:	460a      	mov	r2, r1
 8016776:	fb91 f6f7 	sdiv	r6, r1, r7
 801677a:	fb07 1516 	mls	r5, r7, r6, r1
 801677e:	3530      	adds	r5, #48	; 0x30
 8016780:	2a63      	cmp	r2, #99	; 0x63
 8016782:	f104 34ff 	add.w	r4, r4, #4294967295
 8016786:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801678a:	4631      	mov	r1, r6
 801678c:	dcf1      	bgt.n	8016772 <__exponent+0x22>
 801678e:	3130      	adds	r1, #48	; 0x30
 8016790:	f1ae 0502 	sub.w	r5, lr, #2
 8016794:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016798:	1c44      	adds	r4, r0, #1
 801679a:	4629      	mov	r1, r5
 801679c:	4561      	cmp	r1, ip
 801679e:	d30a      	bcc.n	80167b6 <__exponent+0x66>
 80167a0:	f10d 0209 	add.w	r2, sp, #9
 80167a4:	eba2 020e 	sub.w	r2, r2, lr
 80167a8:	4565      	cmp	r5, ip
 80167aa:	bf88      	it	hi
 80167ac:	2200      	movhi	r2, #0
 80167ae:	4413      	add	r3, r2
 80167b0:	1a18      	subs	r0, r3, r0
 80167b2:	b003      	add	sp, #12
 80167b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80167ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80167be:	e7ed      	b.n	801679c <__exponent+0x4c>
 80167c0:	2330      	movs	r3, #48	; 0x30
 80167c2:	3130      	adds	r1, #48	; 0x30
 80167c4:	7083      	strb	r3, [r0, #2]
 80167c6:	70c1      	strb	r1, [r0, #3]
 80167c8:	1d03      	adds	r3, r0, #4
 80167ca:	e7f1      	b.n	80167b0 <__exponent+0x60>
 80167cc:	0000      	movs	r0, r0
	...

080167d0 <_printf_float>:
 80167d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167d4:	b08b      	sub	sp, #44	; 0x2c
 80167d6:	460c      	mov	r4, r1
 80167d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80167dc:	4616      	mov	r6, r2
 80167de:	461f      	mov	r7, r3
 80167e0:	4605      	mov	r5, r0
 80167e2:	f001 fcab 	bl	801813c <_localeconv_r>
 80167e6:	f8d0 b000 	ldr.w	fp, [r0]
 80167ea:	4658      	mov	r0, fp
 80167ec:	f7e9 fd78 	bl	80002e0 <strlen>
 80167f0:	2300      	movs	r3, #0
 80167f2:	9308      	str	r3, [sp, #32]
 80167f4:	f8d8 3000 	ldr.w	r3, [r8]
 80167f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80167fc:	6822      	ldr	r2, [r4, #0]
 80167fe:	3307      	adds	r3, #7
 8016800:	f023 0307 	bic.w	r3, r3, #7
 8016804:	f103 0108 	add.w	r1, r3, #8
 8016808:	f8c8 1000 	str.w	r1, [r8]
 801680c:	4682      	mov	sl, r0
 801680e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016812:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8016816:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8016a78 <_printf_float+0x2a8>
 801681a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801681e:	eeb0 6bc0 	vabs.f64	d6, d0
 8016822:	eeb4 6b47 	vcmp.f64	d6, d7
 8016826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801682a:	dd24      	ble.n	8016876 <_printf_float+0xa6>
 801682c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016834:	d502      	bpl.n	801683c <_printf_float+0x6c>
 8016836:	232d      	movs	r3, #45	; 0x2d
 8016838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801683c:	4b90      	ldr	r3, [pc, #576]	; (8016a80 <_printf_float+0x2b0>)
 801683e:	4891      	ldr	r0, [pc, #580]	; (8016a84 <_printf_float+0x2b4>)
 8016840:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8016844:	bf94      	ite	ls
 8016846:	4698      	movls	r8, r3
 8016848:	4680      	movhi	r8, r0
 801684a:	2303      	movs	r3, #3
 801684c:	6123      	str	r3, [r4, #16]
 801684e:	f022 0204 	bic.w	r2, r2, #4
 8016852:	2300      	movs	r3, #0
 8016854:	6022      	str	r2, [r4, #0]
 8016856:	9304      	str	r3, [sp, #16]
 8016858:	9700      	str	r7, [sp, #0]
 801685a:	4633      	mov	r3, r6
 801685c:	aa09      	add	r2, sp, #36	; 0x24
 801685e:	4621      	mov	r1, r4
 8016860:	4628      	mov	r0, r5
 8016862:	f000 f9d3 	bl	8016c0c <_printf_common>
 8016866:	3001      	adds	r0, #1
 8016868:	f040 808a 	bne.w	8016980 <_printf_float+0x1b0>
 801686c:	f04f 30ff 	mov.w	r0, #4294967295
 8016870:	b00b      	add	sp, #44	; 0x2c
 8016872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016876:	eeb4 0b40 	vcmp.f64	d0, d0
 801687a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801687e:	d709      	bvc.n	8016894 <_printf_float+0xc4>
 8016880:	ee10 3a90 	vmov	r3, s1
 8016884:	2b00      	cmp	r3, #0
 8016886:	bfbc      	itt	lt
 8016888:	232d      	movlt	r3, #45	; 0x2d
 801688a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801688e:	487e      	ldr	r0, [pc, #504]	; (8016a88 <_printf_float+0x2b8>)
 8016890:	4b7e      	ldr	r3, [pc, #504]	; (8016a8c <_printf_float+0x2bc>)
 8016892:	e7d5      	b.n	8016840 <_printf_float+0x70>
 8016894:	6863      	ldr	r3, [r4, #4]
 8016896:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801689a:	9104      	str	r1, [sp, #16]
 801689c:	1c59      	adds	r1, r3, #1
 801689e:	d13c      	bne.n	801691a <_printf_float+0x14a>
 80168a0:	2306      	movs	r3, #6
 80168a2:	6063      	str	r3, [r4, #4]
 80168a4:	2300      	movs	r3, #0
 80168a6:	9303      	str	r3, [sp, #12]
 80168a8:	ab08      	add	r3, sp, #32
 80168aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80168ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80168b2:	ab07      	add	r3, sp, #28
 80168b4:	6861      	ldr	r1, [r4, #4]
 80168b6:	9300      	str	r3, [sp, #0]
 80168b8:	6022      	str	r2, [r4, #0]
 80168ba:	f10d 031b 	add.w	r3, sp, #27
 80168be:	4628      	mov	r0, r5
 80168c0:	f7ff fef4 	bl	80166ac <__cvt>
 80168c4:	9b04      	ldr	r3, [sp, #16]
 80168c6:	9907      	ldr	r1, [sp, #28]
 80168c8:	2b47      	cmp	r3, #71	; 0x47
 80168ca:	4680      	mov	r8, r0
 80168cc:	d108      	bne.n	80168e0 <_printf_float+0x110>
 80168ce:	1cc8      	adds	r0, r1, #3
 80168d0:	db02      	blt.n	80168d8 <_printf_float+0x108>
 80168d2:	6863      	ldr	r3, [r4, #4]
 80168d4:	4299      	cmp	r1, r3
 80168d6:	dd41      	ble.n	801695c <_printf_float+0x18c>
 80168d8:	f1a9 0902 	sub.w	r9, r9, #2
 80168dc:	fa5f f989 	uxtb.w	r9, r9
 80168e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80168e4:	d820      	bhi.n	8016928 <_printf_float+0x158>
 80168e6:	3901      	subs	r1, #1
 80168e8:	464a      	mov	r2, r9
 80168ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80168ee:	9107      	str	r1, [sp, #28]
 80168f0:	f7ff ff2e 	bl	8016750 <__exponent>
 80168f4:	9a08      	ldr	r2, [sp, #32]
 80168f6:	9004      	str	r0, [sp, #16]
 80168f8:	1813      	adds	r3, r2, r0
 80168fa:	2a01      	cmp	r2, #1
 80168fc:	6123      	str	r3, [r4, #16]
 80168fe:	dc02      	bgt.n	8016906 <_printf_float+0x136>
 8016900:	6822      	ldr	r2, [r4, #0]
 8016902:	07d2      	lsls	r2, r2, #31
 8016904:	d501      	bpl.n	801690a <_printf_float+0x13a>
 8016906:	3301      	adds	r3, #1
 8016908:	6123      	str	r3, [r4, #16]
 801690a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d0a2      	beq.n	8016858 <_printf_float+0x88>
 8016912:	232d      	movs	r3, #45	; 0x2d
 8016914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016918:	e79e      	b.n	8016858 <_printf_float+0x88>
 801691a:	9904      	ldr	r1, [sp, #16]
 801691c:	2947      	cmp	r1, #71	; 0x47
 801691e:	d1c1      	bne.n	80168a4 <_printf_float+0xd4>
 8016920:	2b00      	cmp	r3, #0
 8016922:	d1bf      	bne.n	80168a4 <_printf_float+0xd4>
 8016924:	2301      	movs	r3, #1
 8016926:	e7bc      	b.n	80168a2 <_printf_float+0xd2>
 8016928:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801692c:	d118      	bne.n	8016960 <_printf_float+0x190>
 801692e:	2900      	cmp	r1, #0
 8016930:	6863      	ldr	r3, [r4, #4]
 8016932:	dd0b      	ble.n	801694c <_printf_float+0x17c>
 8016934:	6121      	str	r1, [r4, #16]
 8016936:	b913      	cbnz	r3, 801693e <_printf_float+0x16e>
 8016938:	6822      	ldr	r2, [r4, #0]
 801693a:	07d0      	lsls	r0, r2, #31
 801693c:	d502      	bpl.n	8016944 <_printf_float+0x174>
 801693e:	3301      	adds	r3, #1
 8016940:	440b      	add	r3, r1
 8016942:	6123      	str	r3, [r4, #16]
 8016944:	2300      	movs	r3, #0
 8016946:	65a1      	str	r1, [r4, #88]	; 0x58
 8016948:	9304      	str	r3, [sp, #16]
 801694a:	e7de      	b.n	801690a <_printf_float+0x13a>
 801694c:	b913      	cbnz	r3, 8016954 <_printf_float+0x184>
 801694e:	6822      	ldr	r2, [r4, #0]
 8016950:	07d2      	lsls	r2, r2, #31
 8016952:	d501      	bpl.n	8016958 <_printf_float+0x188>
 8016954:	3302      	adds	r3, #2
 8016956:	e7f4      	b.n	8016942 <_printf_float+0x172>
 8016958:	2301      	movs	r3, #1
 801695a:	e7f2      	b.n	8016942 <_printf_float+0x172>
 801695c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016960:	9b08      	ldr	r3, [sp, #32]
 8016962:	4299      	cmp	r1, r3
 8016964:	db05      	blt.n	8016972 <_printf_float+0x1a2>
 8016966:	6823      	ldr	r3, [r4, #0]
 8016968:	6121      	str	r1, [r4, #16]
 801696a:	07d8      	lsls	r0, r3, #31
 801696c:	d5ea      	bpl.n	8016944 <_printf_float+0x174>
 801696e:	1c4b      	adds	r3, r1, #1
 8016970:	e7e7      	b.n	8016942 <_printf_float+0x172>
 8016972:	2900      	cmp	r1, #0
 8016974:	bfd4      	ite	le
 8016976:	f1c1 0202 	rsble	r2, r1, #2
 801697a:	2201      	movgt	r2, #1
 801697c:	4413      	add	r3, r2
 801697e:	e7e0      	b.n	8016942 <_printf_float+0x172>
 8016980:	6823      	ldr	r3, [r4, #0]
 8016982:	055a      	lsls	r2, r3, #21
 8016984:	d407      	bmi.n	8016996 <_printf_float+0x1c6>
 8016986:	6923      	ldr	r3, [r4, #16]
 8016988:	4642      	mov	r2, r8
 801698a:	4631      	mov	r1, r6
 801698c:	4628      	mov	r0, r5
 801698e:	47b8      	blx	r7
 8016990:	3001      	adds	r0, #1
 8016992:	d12a      	bne.n	80169ea <_printf_float+0x21a>
 8016994:	e76a      	b.n	801686c <_printf_float+0x9c>
 8016996:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801699a:	f240 80e2 	bls.w	8016b62 <_printf_float+0x392>
 801699e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80169a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80169a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169aa:	d133      	bne.n	8016a14 <_printf_float+0x244>
 80169ac:	4a38      	ldr	r2, [pc, #224]	; (8016a90 <_printf_float+0x2c0>)
 80169ae:	2301      	movs	r3, #1
 80169b0:	4631      	mov	r1, r6
 80169b2:	4628      	mov	r0, r5
 80169b4:	47b8      	blx	r7
 80169b6:	3001      	adds	r0, #1
 80169b8:	f43f af58 	beq.w	801686c <_printf_float+0x9c>
 80169bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80169c0:	429a      	cmp	r2, r3
 80169c2:	db02      	blt.n	80169ca <_printf_float+0x1fa>
 80169c4:	6823      	ldr	r3, [r4, #0]
 80169c6:	07d8      	lsls	r0, r3, #31
 80169c8:	d50f      	bpl.n	80169ea <_printf_float+0x21a>
 80169ca:	4653      	mov	r3, sl
 80169cc:	465a      	mov	r2, fp
 80169ce:	4631      	mov	r1, r6
 80169d0:	4628      	mov	r0, r5
 80169d2:	47b8      	blx	r7
 80169d4:	3001      	adds	r0, #1
 80169d6:	f43f af49 	beq.w	801686c <_printf_float+0x9c>
 80169da:	f04f 0800 	mov.w	r8, #0
 80169de:	f104 091a 	add.w	r9, r4, #26
 80169e2:	9b08      	ldr	r3, [sp, #32]
 80169e4:	3b01      	subs	r3, #1
 80169e6:	4543      	cmp	r3, r8
 80169e8:	dc09      	bgt.n	80169fe <_printf_float+0x22e>
 80169ea:	6823      	ldr	r3, [r4, #0]
 80169ec:	079b      	lsls	r3, r3, #30
 80169ee:	f100 8108 	bmi.w	8016c02 <_printf_float+0x432>
 80169f2:	68e0      	ldr	r0, [r4, #12]
 80169f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169f6:	4298      	cmp	r0, r3
 80169f8:	bfb8      	it	lt
 80169fa:	4618      	movlt	r0, r3
 80169fc:	e738      	b.n	8016870 <_printf_float+0xa0>
 80169fe:	2301      	movs	r3, #1
 8016a00:	464a      	mov	r2, r9
 8016a02:	4631      	mov	r1, r6
 8016a04:	4628      	mov	r0, r5
 8016a06:	47b8      	blx	r7
 8016a08:	3001      	adds	r0, #1
 8016a0a:	f43f af2f 	beq.w	801686c <_printf_float+0x9c>
 8016a0e:	f108 0801 	add.w	r8, r8, #1
 8016a12:	e7e6      	b.n	80169e2 <_printf_float+0x212>
 8016a14:	9b07      	ldr	r3, [sp, #28]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	dc3c      	bgt.n	8016a94 <_printf_float+0x2c4>
 8016a1a:	4a1d      	ldr	r2, [pc, #116]	; (8016a90 <_printf_float+0x2c0>)
 8016a1c:	2301      	movs	r3, #1
 8016a1e:	4631      	mov	r1, r6
 8016a20:	4628      	mov	r0, r5
 8016a22:	47b8      	blx	r7
 8016a24:	3001      	adds	r0, #1
 8016a26:	f43f af21 	beq.w	801686c <_printf_float+0x9c>
 8016a2a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016a2e:	4313      	orrs	r3, r2
 8016a30:	d102      	bne.n	8016a38 <_printf_float+0x268>
 8016a32:	6823      	ldr	r3, [r4, #0]
 8016a34:	07d9      	lsls	r1, r3, #31
 8016a36:	d5d8      	bpl.n	80169ea <_printf_float+0x21a>
 8016a38:	4653      	mov	r3, sl
 8016a3a:	465a      	mov	r2, fp
 8016a3c:	4631      	mov	r1, r6
 8016a3e:	4628      	mov	r0, r5
 8016a40:	47b8      	blx	r7
 8016a42:	3001      	adds	r0, #1
 8016a44:	f43f af12 	beq.w	801686c <_printf_float+0x9c>
 8016a48:	f04f 0900 	mov.w	r9, #0
 8016a4c:	f104 0a1a 	add.w	sl, r4, #26
 8016a50:	9b07      	ldr	r3, [sp, #28]
 8016a52:	425b      	negs	r3, r3
 8016a54:	454b      	cmp	r3, r9
 8016a56:	dc01      	bgt.n	8016a5c <_printf_float+0x28c>
 8016a58:	9b08      	ldr	r3, [sp, #32]
 8016a5a:	e795      	b.n	8016988 <_printf_float+0x1b8>
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	4652      	mov	r2, sl
 8016a60:	4631      	mov	r1, r6
 8016a62:	4628      	mov	r0, r5
 8016a64:	47b8      	blx	r7
 8016a66:	3001      	adds	r0, #1
 8016a68:	f43f af00 	beq.w	801686c <_printf_float+0x9c>
 8016a6c:	f109 0901 	add.w	r9, r9, #1
 8016a70:	e7ee      	b.n	8016a50 <_printf_float+0x280>
 8016a72:	bf00      	nop
 8016a74:	f3af 8000 	nop.w
 8016a78:	ffffffff 	.word	0xffffffff
 8016a7c:	7fefffff 	.word	0x7fefffff
 8016a80:	0802482c 	.word	0x0802482c
 8016a84:	08024830 	.word	0x08024830
 8016a88:	08024838 	.word	0x08024838
 8016a8c:	08024834 	.word	0x08024834
 8016a90:	0802483c 	.word	0x0802483c
 8016a94:	9a08      	ldr	r2, [sp, #32]
 8016a96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	bfa8      	it	ge
 8016a9c:	461a      	movge	r2, r3
 8016a9e:	2a00      	cmp	r2, #0
 8016aa0:	4691      	mov	r9, r2
 8016aa2:	dc38      	bgt.n	8016b16 <_printf_float+0x346>
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	9305      	str	r3, [sp, #20]
 8016aa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016aac:	f104 021a 	add.w	r2, r4, #26
 8016ab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016ab2:	9905      	ldr	r1, [sp, #20]
 8016ab4:	9304      	str	r3, [sp, #16]
 8016ab6:	eba3 0309 	sub.w	r3, r3, r9
 8016aba:	428b      	cmp	r3, r1
 8016abc:	dc33      	bgt.n	8016b26 <_printf_float+0x356>
 8016abe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	db3c      	blt.n	8016b40 <_printf_float+0x370>
 8016ac6:	6823      	ldr	r3, [r4, #0]
 8016ac8:	07da      	lsls	r2, r3, #31
 8016aca:	d439      	bmi.n	8016b40 <_printf_float+0x370>
 8016acc:	9a08      	ldr	r2, [sp, #32]
 8016ace:	9b04      	ldr	r3, [sp, #16]
 8016ad0:	9907      	ldr	r1, [sp, #28]
 8016ad2:	1ad3      	subs	r3, r2, r3
 8016ad4:	eba2 0901 	sub.w	r9, r2, r1
 8016ad8:	4599      	cmp	r9, r3
 8016ada:	bfa8      	it	ge
 8016adc:	4699      	movge	r9, r3
 8016ade:	f1b9 0f00 	cmp.w	r9, #0
 8016ae2:	dc35      	bgt.n	8016b50 <_printf_float+0x380>
 8016ae4:	f04f 0800 	mov.w	r8, #0
 8016ae8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016aec:	f104 0a1a 	add.w	sl, r4, #26
 8016af0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016af4:	1a9b      	subs	r3, r3, r2
 8016af6:	eba3 0309 	sub.w	r3, r3, r9
 8016afa:	4543      	cmp	r3, r8
 8016afc:	f77f af75 	ble.w	80169ea <_printf_float+0x21a>
 8016b00:	2301      	movs	r3, #1
 8016b02:	4652      	mov	r2, sl
 8016b04:	4631      	mov	r1, r6
 8016b06:	4628      	mov	r0, r5
 8016b08:	47b8      	blx	r7
 8016b0a:	3001      	adds	r0, #1
 8016b0c:	f43f aeae 	beq.w	801686c <_printf_float+0x9c>
 8016b10:	f108 0801 	add.w	r8, r8, #1
 8016b14:	e7ec      	b.n	8016af0 <_printf_float+0x320>
 8016b16:	4613      	mov	r3, r2
 8016b18:	4631      	mov	r1, r6
 8016b1a:	4642      	mov	r2, r8
 8016b1c:	4628      	mov	r0, r5
 8016b1e:	47b8      	blx	r7
 8016b20:	3001      	adds	r0, #1
 8016b22:	d1bf      	bne.n	8016aa4 <_printf_float+0x2d4>
 8016b24:	e6a2      	b.n	801686c <_printf_float+0x9c>
 8016b26:	2301      	movs	r3, #1
 8016b28:	4631      	mov	r1, r6
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	9204      	str	r2, [sp, #16]
 8016b2e:	47b8      	blx	r7
 8016b30:	3001      	adds	r0, #1
 8016b32:	f43f ae9b 	beq.w	801686c <_printf_float+0x9c>
 8016b36:	9b05      	ldr	r3, [sp, #20]
 8016b38:	9a04      	ldr	r2, [sp, #16]
 8016b3a:	3301      	adds	r3, #1
 8016b3c:	9305      	str	r3, [sp, #20]
 8016b3e:	e7b7      	b.n	8016ab0 <_printf_float+0x2e0>
 8016b40:	4653      	mov	r3, sl
 8016b42:	465a      	mov	r2, fp
 8016b44:	4631      	mov	r1, r6
 8016b46:	4628      	mov	r0, r5
 8016b48:	47b8      	blx	r7
 8016b4a:	3001      	adds	r0, #1
 8016b4c:	d1be      	bne.n	8016acc <_printf_float+0x2fc>
 8016b4e:	e68d      	b.n	801686c <_printf_float+0x9c>
 8016b50:	9a04      	ldr	r2, [sp, #16]
 8016b52:	464b      	mov	r3, r9
 8016b54:	4442      	add	r2, r8
 8016b56:	4631      	mov	r1, r6
 8016b58:	4628      	mov	r0, r5
 8016b5a:	47b8      	blx	r7
 8016b5c:	3001      	adds	r0, #1
 8016b5e:	d1c1      	bne.n	8016ae4 <_printf_float+0x314>
 8016b60:	e684      	b.n	801686c <_printf_float+0x9c>
 8016b62:	9a08      	ldr	r2, [sp, #32]
 8016b64:	2a01      	cmp	r2, #1
 8016b66:	dc01      	bgt.n	8016b6c <_printf_float+0x39c>
 8016b68:	07db      	lsls	r3, r3, #31
 8016b6a:	d537      	bpl.n	8016bdc <_printf_float+0x40c>
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	4642      	mov	r2, r8
 8016b70:	4631      	mov	r1, r6
 8016b72:	4628      	mov	r0, r5
 8016b74:	47b8      	blx	r7
 8016b76:	3001      	adds	r0, #1
 8016b78:	f43f ae78 	beq.w	801686c <_printf_float+0x9c>
 8016b7c:	4653      	mov	r3, sl
 8016b7e:	465a      	mov	r2, fp
 8016b80:	4631      	mov	r1, r6
 8016b82:	4628      	mov	r0, r5
 8016b84:	47b8      	blx	r7
 8016b86:	3001      	adds	r0, #1
 8016b88:	f43f ae70 	beq.w	801686c <_printf_float+0x9c>
 8016b8c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016b90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b98:	d01b      	beq.n	8016bd2 <_printf_float+0x402>
 8016b9a:	9b08      	ldr	r3, [sp, #32]
 8016b9c:	f108 0201 	add.w	r2, r8, #1
 8016ba0:	3b01      	subs	r3, #1
 8016ba2:	4631      	mov	r1, r6
 8016ba4:	4628      	mov	r0, r5
 8016ba6:	47b8      	blx	r7
 8016ba8:	3001      	adds	r0, #1
 8016baa:	d10e      	bne.n	8016bca <_printf_float+0x3fa>
 8016bac:	e65e      	b.n	801686c <_printf_float+0x9c>
 8016bae:	2301      	movs	r3, #1
 8016bb0:	464a      	mov	r2, r9
 8016bb2:	4631      	mov	r1, r6
 8016bb4:	4628      	mov	r0, r5
 8016bb6:	47b8      	blx	r7
 8016bb8:	3001      	adds	r0, #1
 8016bba:	f43f ae57 	beq.w	801686c <_printf_float+0x9c>
 8016bbe:	f108 0801 	add.w	r8, r8, #1
 8016bc2:	9b08      	ldr	r3, [sp, #32]
 8016bc4:	3b01      	subs	r3, #1
 8016bc6:	4543      	cmp	r3, r8
 8016bc8:	dcf1      	bgt.n	8016bae <_printf_float+0x3de>
 8016bca:	9b04      	ldr	r3, [sp, #16]
 8016bcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016bd0:	e6db      	b.n	801698a <_printf_float+0x1ba>
 8016bd2:	f04f 0800 	mov.w	r8, #0
 8016bd6:	f104 091a 	add.w	r9, r4, #26
 8016bda:	e7f2      	b.n	8016bc2 <_printf_float+0x3f2>
 8016bdc:	2301      	movs	r3, #1
 8016bde:	4642      	mov	r2, r8
 8016be0:	e7df      	b.n	8016ba2 <_printf_float+0x3d2>
 8016be2:	2301      	movs	r3, #1
 8016be4:	464a      	mov	r2, r9
 8016be6:	4631      	mov	r1, r6
 8016be8:	4628      	mov	r0, r5
 8016bea:	47b8      	blx	r7
 8016bec:	3001      	adds	r0, #1
 8016bee:	f43f ae3d 	beq.w	801686c <_printf_float+0x9c>
 8016bf2:	f108 0801 	add.w	r8, r8, #1
 8016bf6:	68e3      	ldr	r3, [r4, #12]
 8016bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016bfa:	1a5b      	subs	r3, r3, r1
 8016bfc:	4543      	cmp	r3, r8
 8016bfe:	dcf0      	bgt.n	8016be2 <_printf_float+0x412>
 8016c00:	e6f7      	b.n	80169f2 <_printf_float+0x222>
 8016c02:	f04f 0800 	mov.w	r8, #0
 8016c06:	f104 0919 	add.w	r9, r4, #25
 8016c0a:	e7f4      	b.n	8016bf6 <_printf_float+0x426>

08016c0c <_printf_common>:
 8016c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c10:	4616      	mov	r6, r2
 8016c12:	4699      	mov	r9, r3
 8016c14:	688a      	ldr	r2, [r1, #8]
 8016c16:	690b      	ldr	r3, [r1, #16]
 8016c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016c1c:	4293      	cmp	r3, r2
 8016c1e:	bfb8      	it	lt
 8016c20:	4613      	movlt	r3, r2
 8016c22:	6033      	str	r3, [r6, #0]
 8016c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016c28:	4607      	mov	r7, r0
 8016c2a:	460c      	mov	r4, r1
 8016c2c:	b10a      	cbz	r2, 8016c32 <_printf_common+0x26>
 8016c2e:	3301      	adds	r3, #1
 8016c30:	6033      	str	r3, [r6, #0]
 8016c32:	6823      	ldr	r3, [r4, #0]
 8016c34:	0699      	lsls	r1, r3, #26
 8016c36:	bf42      	ittt	mi
 8016c38:	6833      	ldrmi	r3, [r6, #0]
 8016c3a:	3302      	addmi	r3, #2
 8016c3c:	6033      	strmi	r3, [r6, #0]
 8016c3e:	6825      	ldr	r5, [r4, #0]
 8016c40:	f015 0506 	ands.w	r5, r5, #6
 8016c44:	d106      	bne.n	8016c54 <_printf_common+0x48>
 8016c46:	f104 0a19 	add.w	sl, r4, #25
 8016c4a:	68e3      	ldr	r3, [r4, #12]
 8016c4c:	6832      	ldr	r2, [r6, #0]
 8016c4e:	1a9b      	subs	r3, r3, r2
 8016c50:	42ab      	cmp	r3, r5
 8016c52:	dc26      	bgt.n	8016ca2 <_printf_common+0x96>
 8016c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016c58:	1e13      	subs	r3, r2, #0
 8016c5a:	6822      	ldr	r2, [r4, #0]
 8016c5c:	bf18      	it	ne
 8016c5e:	2301      	movne	r3, #1
 8016c60:	0692      	lsls	r2, r2, #26
 8016c62:	d42b      	bmi.n	8016cbc <_printf_common+0xb0>
 8016c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c68:	4649      	mov	r1, r9
 8016c6a:	4638      	mov	r0, r7
 8016c6c:	47c0      	blx	r8
 8016c6e:	3001      	adds	r0, #1
 8016c70:	d01e      	beq.n	8016cb0 <_printf_common+0xa4>
 8016c72:	6823      	ldr	r3, [r4, #0]
 8016c74:	68e5      	ldr	r5, [r4, #12]
 8016c76:	6832      	ldr	r2, [r6, #0]
 8016c78:	f003 0306 	and.w	r3, r3, #6
 8016c7c:	2b04      	cmp	r3, #4
 8016c7e:	bf08      	it	eq
 8016c80:	1aad      	subeq	r5, r5, r2
 8016c82:	68a3      	ldr	r3, [r4, #8]
 8016c84:	6922      	ldr	r2, [r4, #16]
 8016c86:	bf0c      	ite	eq
 8016c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c8c:	2500      	movne	r5, #0
 8016c8e:	4293      	cmp	r3, r2
 8016c90:	bfc4      	itt	gt
 8016c92:	1a9b      	subgt	r3, r3, r2
 8016c94:	18ed      	addgt	r5, r5, r3
 8016c96:	2600      	movs	r6, #0
 8016c98:	341a      	adds	r4, #26
 8016c9a:	42b5      	cmp	r5, r6
 8016c9c:	d11a      	bne.n	8016cd4 <_printf_common+0xc8>
 8016c9e:	2000      	movs	r0, #0
 8016ca0:	e008      	b.n	8016cb4 <_printf_common+0xa8>
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	4652      	mov	r2, sl
 8016ca6:	4649      	mov	r1, r9
 8016ca8:	4638      	mov	r0, r7
 8016caa:	47c0      	blx	r8
 8016cac:	3001      	adds	r0, #1
 8016cae:	d103      	bne.n	8016cb8 <_printf_common+0xac>
 8016cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8016cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cb8:	3501      	adds	r5, #1
 8016cba:	e7c6      	b.n	8016c4a <_printf_common+0x3e>
 8016cbc:	18e1      	adds	r1, r4, r3
 8016cbe:	1c5a      	adds	r2, r3, #1
 8016cc0:	2030      	movs	r0, #48	; 0x30
 8016cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016cc6:	4422      	add	r2, r4
 8016cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016cd0:	3302      	adds	r3, #2
 8016cd2:	e7c7      	b.n	8016c64 <_printf_common+0x58>
 8016cd4:	2301      	movs	r3, #1
 8016cd6:	4622      	mov	r2, r4
 8016cd8:	4649      	mov	r1, r9
 8016cda:	4638      	mov	r0, r7
 8016cdc:	47c0      	blx	r8
 8016cde:	3001      	adds	r0, #1
 8016ce0:	d0e6      	beq.n	8016cb0 <_printf_common+0xa4>
 8016ce2:	3601      	adds	r6, #1
 8016ce4:	e7d9      	b.n	8016c9a <_printf_common+0x8e>
	...

08016ce8 <_printf_i>:
 8016ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016cec:	460c      	mov	r4, r1
 8016cee:	4691      	mov	r9, r2
 8016cf0:	7e27      	ldrb	r7, [r4, #24]
 8016cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016cf4:	2f78      	cmp	r7, #120	; 0x78
 8016cf6:	4680      	mov	r8, r0
 8016cf8:	469a      	mov	sl, r3
 8016cfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016cfe:	d807      	bhi.n	8016d10 <_printf_i+0x28>
 8016d00:	2f62      	cmp	r7, #98	; 0x62
 8016d02:	d80a      	bhi.n	8016d1a <_printf_i+0x32>
 8016d04:	2f00      	cmp	r7, #0
 8016d06:	f000 80d8 	beq.w	8016eba <_printf_i+0x1d2>
 8016d0a:	2f58      	cmp	r7, #88	; 0x58
 8016d0c:	f000 80a3 	beq.w	8016e56 <_printf_i+0x16e>
 8016d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016d18:	e03a      	b.n	8016d90 <_printf_i+0xa8>
 8016d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016d1e:	2b15      	cmp	r3, #21
 8016d20:	d8f6      	bhi.n	8016d10 <_printf_i+0x28>
 8016d22:	a001      	add	r0, pc, #4	; (adr r0, 8016d28 <_printf_i+0x40>)
 8016d24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016d28:	08016d81 	.word	0x08016d81
 8016d2c:	08016d95 	.word	0x08016d95
 8016d30:	08016d11 	.word	0x08016d11
 8016d34:	08016d11 	.word	0x08016d11
 8016d38:	08016d11 	.word	0x08016d11
 8016d3c:	08016d11 	.word	0x08016d11
 8016d40:	08016d95 	.word	0x08016d95
 8016d44:	08016d11 	.word	0x08016d11
 8016d48:	08016d11 	.word	0x08016d11
 8016d4c:	08016d11 	.word	0x08016d11
 8016d50:	08016d11 	.word	0x08016d11
 8016d54:	08016ea1 	.word	0x08016ea1
 8016d58:	08016dc5 	.word	0x08016dc5
 8016d5c:	08016e83 	.word	0x08016e83
 8016d60:	08016d11 	.word	0x08016d11
 8016d64:	08016d11 	.word	0x08016d11
 8016d68:	08016ec3 	.word	0x08016ec3
 8016d6c:	08016d11 	.word	0x08016d11
 8016d70:	08016dc5 	.word	0x08016dc5
 8016d74:	08016d11 	.word	0x08016d11
 8016d78:	08016d11 	.word	0x08016d11
 8016d7c:	08016e8b 	.word	0x08016e8b
 8016d80:	680b      	ldr	r3, [r1, #0]
 8016d82:	1d1a      	adds	r2, r3, #4
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	600a      	str	r2, [r1, #0]
 8016d88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d90:	2301      	movs	r3, #1
 8016d92:	e0a3      	b.n	8016edc <_printf_i+0x1f4>
 8016d94:	6825      	ldr	r5, [r4, #0]
 8016d96:	6808      	ldr	r0, [r1, #0]
 8016d98:	062e      	lsls	r6, r5, #24
 8016d9a:	f100 0304 	add.w	r3, r0, #4
 8016d9e:	d50a      	bpl.n	8016db6 <_printf_i+0xce>
 8016da0:	6805      	ldr	r5, [r0, #0]
 8016da2:	600b      	str	r3, [r1, #0]
 8016da4:	2d00      	cmp	r5, #0
 8016da6:	da03      	bge.n	8016db0 <_printf_i+0xc8>
 8016da8:	232d      	movs	r3, #45	; 0x2d
 8016daa:	426d      	negs	r5, r5
 8016dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016db0:	485e      	ldr	r0, [pc, #376]	; (8016f2c <_printf_i+0x244>)
 8016db2:	230a      	movs	r3, #10
 8016db4:	e019      	b.n	8016dea <_printf_i+0x102>
 8016db6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016dba:	6805      	ldr	r5, [r0, #0]
 8016dbc:	600b      	str	r3, [r1, #0]
 8016dbe:	bf18      	it	ne
 8016dc0:	b22d      	sxthne	r5, r5
 8016dc2:	e7ef      	b.n	8016da4 <_printf_i+0xbc>
 8016dc4:	680b      	ldr	r3, [r1, #0]
 8016dc6:	6825      	ldr	r5, [r4, #0]
 8016dc8:	1d18      	adds	r0, r3, #4
 8016dca:	6008      	str	r0, [r1, #0]
 8016dcc:	0628      	lsls	r0, r5, #24
 8016dce:	d501      	bpl.n	8016dd4 <_printf_i+0xec>
 8016dd0:	681d      	ldr	r5, [r3, #0]
 8016dd2:	e002      	b.n	8016dda <_printf_i+0xf2>
 8016dd4:	0669      	lsls	r1, r5, #25
 8016dd6:	d5fb      	bpl.n	8016dd0 <_printf_i+0xe8>
 8016dd8:	881d      	ldrh	r5, [r3, #0]
 8016dda:	4854      	ldr	r0, [pc, #336]	; (8016f2c <_printf_i+0x244>)
 8016ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8016dde:	bf0c      	ite	eq
 8016de0:	2308      	moveq	r3, #8
 8016de2:	230a      	movne	r3, #10
 8016de4:	2100      	movs	r1, #0
 8016de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016dea:	6866      	ldr	r6, [r4, #4]
 8016dec:	60a6      	str	r6, [r4, #8]
 8016dee:	2e00      	cmp	r6, #0
 8016df0:	bfa2      	ittt	ge
 8016df2:	6821      	ldrge	r1, [r4, #0]
 8016df4:	f021 0104 	bicge.w	r1, r1, #4
 8016df8:	6021      	strge	r1, [r4, #0]
 8016dfa:	b90d      	cbnz	r5, 8016e00 <_printf_i+0x118>
 8016dfc:	2e00      	cmp	r6, #0
 8016dfe:	d04d      	beq.n	8016e9c <_printf_i+0x1b4>
 8016e00:	4616      	mov	r6, r2
 8016e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8016e06:	fb03 5711 	mls	r7, r3, r1, r5
 8016e0a:	5dc7      	ldrb	r7, [r0, r7]
 8016e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016e10:	462f      	mov	r7, r5
 8016e12:	42bb      	cmp	r3, r7
 8016e14:	460d      	mov	r5, r1
 8016e16:	d9f4      	bls.n	8016e02 <_printf_i+0x11a>
 8016e18:	2b08      	cmp	r3, #8
 8016e1a:	d10b      	bne.n	8016e34 <_printf_i+0x14c>
 8016e1c:	6823      	ldr	r3, [r4, #0]
 8016e1e:	07df      	lsls	r7, r3, #31
 8016e20:	d508      	bpl.n	8016e34 <_printf_i+0x14c>
 8016e22:	6923      	ldr	r3, [r4, #16]
 8016e24:	6861      	ldr	r1, [r4, #4]
 8016e26:	4299      	cmp	r1, r3
 8016e28:	bfde      	ittt	le
 8016e2a:	2330      	movle	r3, #48	; 0x30
 8016e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016e30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016e34:	1b92      	subs	r2, r2, r6
 8016e36:	6122      	str	r2, [r4, #16]
 8016e38:	f8cd a000 	str.w	sl, [sp]
 8016e3c:	464b      	mov	r3, r9
 8016e3e:	aa03      	add	r2, sp, #12
 8016e40:	4621      	mov	r1, r4
 8016e42:	4640      	mov	r0, r8
 8016e44:	f7ff fee2 	bl	8016c0c <_printf_common>
 8016e48:	3001      	adds	r0, #1
 8016e4a:	d14c      	bne.n	8016ee6 <_printf_i+0x1fe>
 8016e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e50:	b004      	add	sp, #16
 8016e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e56:	4835      	ldr	r0, [pc, #212]	; (8016f2c <_printf_i+0x244>)
 8016e58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016e5c:	6823      	ldr	r3, [r4, #0]
 8016e5e:	680e      	ldr	r6, [r1, #0]
 8016e60:	061f      	lsls	r7, r3, #24
 8016e62:	f856 5b04 	ldr.w	r5, [r6], #4
 8016e66:	600e      	str	r6, [r1, #0]
 8016e68:	d514      	bpl.n	8016e94 <_printf_i+0x1ac>
 8016e6a:	07d9      	lsls	r1, r3, #31
 8016e6c:	bf44      	itt	mi
 8016e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8016e72:	6023      	strmi	r3, [r4, #0]
 8016e74:	b91d      	cbnz	r5, 8016e7e <_printf_i+0x196>
 8016e76:	6823      	ldr	r3, [r4, #0]
 8016e78:	f023 0320 	bic.w	r3, r3, #32
 8016e7c:	6023      	str	r3, [r4, #0]
 8016e7e:	2310      	movs	r3, #16
 8016e80:	e7b0      	b.n	8016de4 <_printf_i+0xfc>
 8016e82:	6823      	ldr	r3, [r4, #0]
 8016e84:	f043 0320 	orr.w	r3, r3, #32
 8016e88:	6023      	str	r3, [r4, #0]
 8016e8a:	2378      	movs	r3, #120	; 0x78
 8016e8c:	4828      	ldr	r0, [pc, #160]	; (8016f30 <_printf_i+0x248>)
 8016e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016e92:	e7e3      	b.n	8016e5c <_printf_i+0x174>
 8016e94:	065e      	lsls	r6, r3, #25
 8016e96:	bf48      	it	mi
 8016e98:	b2ad      	uxthmi	r5, r5
 8016e9a:	e7e6      	b.n	8016e6a <_printf_i+0x182>
 8016e9c:	4616      	mov	r6, r2
 8016e9e:	e7bb      	b.n	8016e18 <_printf_i+0x130>
 8016ea0:	680b      	ldr	r3, [r1, #0]
 8016ea2:	6826      	ldr	r6, [r4, #0]
 8016ea4:	6960      	ldr	r0, [r4, #20]
 8016ea6:	1d1d      	adds	r5, r3, #4
 8016ea8:	600d      	str	r5, [r1, #0]
 8016eaa:	0635      	lsls	r5, r6, #24
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	d501      	bpl.n	8016eb4 <_printf_i+0x1cc>
 8016eb0:	6018      	str	r0, [r3, #0]
 8016eb2:	e002      	b.n	8016eba <_printf_i+0x1d2>
 8016eb4:	0671      	lsls	r1, r6, #25
 8016eb6:	d5fb      	bpl.n	8016eb0 <_printf_i+0x1c8>
 8016eb8:	8018      	strh	r0, [r3, #0]
 8016eba:	2300      	movs	r3, #0
 8016ebc:	6123      	str	r3, [r4, #16]
 8016ebe:	4616      	mov	r6, r2
 8016ec0:	e7ba      	b.n	8016e38 <_printf_i+0x150>
 8016ec2:	680b      	ldr	r3, [r1, #0]
 8016ec4:	1d1a      	adds	r2, r3, #4
 8016ec6:	600a      	str	r2, [r1, #0]
 8016ec8:	681e      	ldr	r6, [r3, #0]
 8016eca:	6862      	ldr	r2, [r4, #4]
 8016ecc:	2100      	movs	r1, #0
 8016ece:	4630      	mov	r0, r6
 8016ed0:	f7e9 fa0e 	bl	80002f0 <memchr>
 8016ed4:	b108      	cbz	r0, 8016eda <_printf_i+0x1f2>
 8016ed6:	1b80      	subs	r0, r0, r6
 8016ed8:	6060      	str	r0, [r4, #4]
 8016eda:	6863      	ldr	r3, [r4, #4]
 8016edc:	6123      	str	r3, [r4, #16]
 8016ede:	2300      	movs	r3, #0
 8016ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ee4:	e7a8      	b.n	8016e38 <_printf_i+0x150>
 8016ee6:	6923      	ldr	r3, [r4, #16]
 8016ee8:	4632      	mov	r2, r6
 8016eea:	4649      	mov	r1, r9
 8016eec:	4640      	mov	r0, r8
 8016eee:	47d0      	blx	sl
 8016ef0:	3001      	adds	r0, #1
 8016ef2:	d0ab      	beq.n	8016e4c <_printf_i+0x164>
 8016ef4:	6823      	ldr	r3, [r4, #0]
 8016ef6:	079b      	lsls	r3, r3, #30
 8016ef8:	d413      	bmi.n	8016f22 <_printf_i+0x23a>
 8016efa:	68e0      	ldr	r0, [r4, #12]
 8016efc:	9b03      	ldr	r3, [sp, #12]
 8016efe:	4298      	cmp	r0, r3
 8016f00:	bfb8      	it	lt
 8016f02:	4618      	movlt	r0, r3
 8016f04:	e7a4      	b.n	8016e50 <_printf_i+0x168>
 8016f06:	2301      	movs	r3, #1
 8016f08:	4632      	mov	r2, r6
 8016f0a:	4649      	mov	r1, r9
 8016f0c:	4640      	mov	r0, r8
 8016f0e:	47d0      	blx	sl
 8016f10:	3001      	adds	r0, #1
 8016f12:	d09b      	beq.n	8016e4c <_printf_i+0x164>
 8016f14:	3501      	adds	r5, #1
 8016f16:	68e3      	ldr	r3, [r4, #12]
 8016f18:	9903      	ldr	r1, [sp, #12]
 8016f1a:	1a5b      	subs	r3, r3, r1
 8016f1c:	42ab      	cmp	r3, r5
 8016f1e:	dcf2      	bgt.n	8016f06 <_printf_i+0x21e>
 8016f20:	e7eb      	b.n	8016efa <_printf_i+0x212>
 8016f22:	2500      	movs	r5, #0
 8016f24:	f104 0619 	add.w	r6, r4, #25
 8016f28:	e7f5      	b.n	8016f16 <_printf_i+0x22e>
 8016f2a:	bf00      	nop
 8016f2c:	0802483e 	.word	0x0802483e
 8016f30:	0802484f 	.word	0x0802484f

08016f34 <iprintf>:
 8016f34:	b40f      	push	{r0, r1, r2, r3}
 8016f36:	4b0a      	ldr	r3, [pc, #40]	; (8016f60 <iprintf+0x2c>)
 8016f38:	b513      	push	{r0, r1, r4, lr}
 8016f3a:	681c      	ldr	r4, [r3, #0]
 8016f3c:	b124      	cbz	r4, 8016f48 <iprintf+0x14>
 8016f3e:	69a3      	ldr	r3, [r4, #24]
 8016f40:	b913      	cbnz	r3, 8016f48 <iprintf+0x14>
 8016f42:	4620      	mov	r0, r4
 8016f44:	f7ff fa7c 	bl	8016440 <__sinit>
 8016f48:	ab05      	add	r3, sp, #20
 8016f4a:	9a04      	ldr	r2, [sp, #16]
 8016f4c:	68a1      	ldr	r1, [r4, #8]
 8016f4e:	9301      	str	r3, [sp, #4]
 8016f50:	4620      	mov	r0, r4
 8016f52:	f001 fe81 	bl	8018c58 <_vfiprintf_r>
 8016f56:	b002      	add	sp, #8
 8016f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f5c:	b004      	add	sp, #16
 8016f5e:	4770      	bx	lr
 8016f60:	24000260 	.word	0x24000260

08016f64 <cleanup_glue>:
 8016f64:	b538      	push	{r3, r4, r5, lr}
 8016f66:	460c      	mov	r4, r1
 8016f68:	6809      	ldr	r1, [r1, #0]
 8016f6a:	4605      	mov	r5, r0
 8016f6c:	b109      	cbz	r1, 8016f72 <cleanup_glue+0xe>
 8016f6e:	f7ff fff9 	bl	8016f64 <cleanup_glue>
 8016f72:	4621      	mov	r1, r4
 8016f74:	4628      	mov	r0, r5
 8016f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f7a:	f001 bc97 	b.w	80188ac <_free_r>
	...

08016f80 <_reclaim_reent>:
 8016f80:	4b2c      	ldr	r3, [pc, #176]	; (8017034 <_reclaim_reent+0xb4>)
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	4283      	cmp	r3, r0
 8016f86:	b570      	push	{r4, r5, r6, lr}
 8016f88:	4604      	mov	r4, r0
 8016f8a:	d051      	beq.n	8017030 <_reclaim_reent+0xb0>
 8016f8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016f8e:	b143      	cbz	r3, 8016fa2 <_reclaim_reent+0x22>
 8016f90:	68db      	ldr	r3, [r3, #12]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d14a      	bne.n	801702c <_reclaim_reent+0xac>
 8016f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f98:	6819      	ldr	r1, [r3, #0]
 8016f9a:	b111      	cbz	r1, 8016fa2 <_reclaim_reent+0x22>
 8016f9c:	4620      	mov	r0, r4
 8016f9e:	f001 fc85 	bl	80188ac <_free_r>
 8016fa2:	6961      	ldr	r1, [r4, #20]
 8016fa4:	b111      	cbz	r1, 8016fac <_reclaim_reent+0x2c>
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	f001 fc80 	bl	80188ac <_free_r>
 8016fac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016fae:	b111      	cbz	r1, 8016fb6 <_reclaim_reent+0x36>
 8016fb0:	4620      	mov	r0, r4
 8016fb2:	f001 fc7b 	bl	80188ac <_free_r>
 8016fb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016fb8:	b111      	cbz	r1, 8016fc0 <_reclaim_reent+0x40>
 8016fba:	4620      	mov	r0, r4
 8016fbc:	f001 fc76 	bl	80188ac <_free_r>
 8016fc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016fc2:	b111      	cbz	r1, 8016fca <_reclaim_reent+0x4a>
 8016fc4:	4620      	mov	r0, r4
 8016fc6:	f001 fc71 	bl	80188ac <_free_r>
 8016fca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016fcc:	b111      	cbz	r1, 8016fd4 <_reclaim_reent+0x54>
 8016fce:	4620      	mov	r0, r4
 8016fd0:	f001 fc6c 	bl	80188ac <_free_r>
 8016fd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016fd6:	b111      	cbz	r1, 8016fde <_reclaim_reent+0x5e>
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f001 fc67 	bl	80188ac <_free_r>
 8016fde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016fe0:	b111      	cbz	r1, 8016fe8 <_reclaim_reent+0x68>
 8016fe2:	4620      	mov	r0, r4
 8016fe4:	f001 fc62 	bl	80188ac <_free_r>
 8016fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fea:	b111      	cbz	r1, 8016ff2 <_reclaim_reent+0x72>
 8016fec:	4620      	mov	r0, r4
 8016fee:	f001 fc5d 	bl	80188ac <_free_r>
 8016ff2:	69a3      	ldr	r3, [r4, #24]
 8016ff4:	b1e3      	cbz	r3, 8017030 <_reclaim_reent+0xb0>
 8016ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	4798      	blx	r3
 8016ffc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016ffe:	b1b9      	cbz	r1, 8017030 <_reclaim_reent+0xb0>
 8017000:	4620      	mov	r0, r4
 8017002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017006:	f7ff bfad 	b.w	8016f64 <cleanup_glue>
 801700a:	5949      	ldr	r1, [r1, r5]
 801700c:	b941      	cbnz	r1, 8017020 <_reclaim_reent+0xa0>
 801700e:	3504      	adds	r5, #4
 8017010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017012:	2d80      	cmp	r5, #128	; 0x80
 8017014:	68d9      	ldr	r1, [r3, #12]
 8017016:	d1f8      	bne.n	801700a <_reclaim_reent+0x8a>
 8017018:	4620      	mov	r0, r4
 801701a:	f001 fc47 	bl	80188ac <_free_r>
 801701e:	e7ba      	b.n	8016f96 <_reclaim_reent+0x16>
 8017020:	680e      	ldr	r6, [r1, #0]
 8017022:	4620      	mov	r0, r4
 8017024:	f001 fc42 	bl	80188ac <_free_r>
 8017028:	4631      	mov	r1, r6
 801702a:	e7ef      	b.n	801700c <_reclaim_reent+0x8c>
 801702c:	2500      	movs	r5, #0
 801702e:	e7ef      	b.n	8017010 <_reclaim_reent+0x90>
 8017030:	bd70      	pop	{r4, r5, r6, pc}
 8017032:	bf00      	nop
 8017034:	24000260 	.word	0x24000260

08017038 <_sbrk_r>:
 8017038:	b538      	push	{r3, r4, r5, lr}
 801703a:	4d06      	ldr	r5, [pc, #24]	; (8017054 <_sbrk_r+0x1c>)
 801703c:	2300      	movs	r3, #0
 801703e:	4604      	mov	r4, r0
 8017040:	4608      	mov	r0, r1
 8017042:	602b      	str	r3, [r5, #0]
 8017044:	f7eb fc3e 	bl	80028c4 <_sbrk>
 8017048:	1c43      	adds	r3, r0, #1
 801704a:	d102      	bne.n	8017052 <_sbrk_r+0x1a>
 801704c:	682b      	ldr	r3, [r5, #0]
 801704e:	b103      	cbz	r3, 8017052 <_sbrk_r+0x1a>
 8017050:	6023      	str	r3, [r4, #0]
 8017052:	bd38      	pop	{r3, r4, r5, pc}
 8017054:	24006bec 	.word	0x24006bec

08017058 <siprintf>:
 8017058:	b40e      	push	{r1, r2, r3}
 801705a:	b500      	push	{lr}
 801705c:	b09c      	sub	sp, #112	; 0x70
 801705e:	ab1d      	add	r3, sp, #116	; 0x74
 8017060:	9002      	str	r0, [sp, #8]
 8017062:	9006      	str	r0, [sp, #24]
 8017064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017068:	4809      	ldr	r0, [pc, #36]	; (8017090 <siprintf+0x38>)
 801706a:	9107      	str	r1, [sp, #28]
 801706c:	9104      	str	r1, [sp, #16]
 801706e:	4909      	ldr	r1, [pc, #36]	; (8017094 <siprintf+0x3c>)
 8017070:	f853 2b04 	ldr.w	r2, [r3], #4
 8017074:	9105      	str	r1, [sp, #20]
 8017076:	6800      	ldr	r0, [r0, #0]
 8017078:	9301      	str	r3, [sp, #4]
 801707a:	a902      	add	r1, sp, #8
 801707c:	f001 fcc2 	bl	8018a04 <_svfiprintf_r>
 8017080:	9b02      	ldr	r3, [sp, #8]
 8017082:	2200      	movs	r2, #0
 8017084:	701a      	strb	r2, [r3, #0]
 8017086:	b01c      	add	sp, #112	; 0x70
 8017088:	f85d eb04 	ldr.w	lr, [sp], #4
 801708c:	b003      	add	sp, #12
 801708e:	4770      	bx	lr
 8017090:	24000260 	.word	0x24000260
 8017094:	ffff0208 	.word	0xffff0208

08017098 <__sread>:
 8017098:	b510      	push	{r4, lr}
 801709a:	460c      	mov	r4, r1
 801709c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170a0:	f001 ff0a 	bl	8018eb8 <_read_r>
 80170a4:	2800      	cmp	r0, #0
 80170a6:	bfab      	itete	ge
 80170a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80170aa:	89a3      	ldrhlt	r3, [r4, #12]
 80170ac:	181b      	addge	r3, r3, r0
 80170ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80170b2:	bfac      	ite	ge
 80170b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80170b6:	81a3      	strhlt	r3, [r4, #12]
 80170b8:	bd10      	pop	{r4, pc}

080170ba <__swrite>:
 80170ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170be:	461f      	mov	r7, r3
 80170c0:	898b      	ldrh	r3, [r1, #12]
 80170c2:	05db      	lsls	r3, r3, #23
 80170c4:	4605      	mov	r5, r0
 80170c6:	460c      	mov	r4, r1
 80170c8:	4616      	mov	r6, r2
 80170ca:	d505      	bpl.n	80170d8 <__swrite+0x1e>
 80170cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170d0:	2302      	movs	r3, #2
 80170d2:	2200      	movs	r2, #0
 80170d4:	f001 f836 	bl	8018144 <_lseek_r>
 80170d8:	89a3      	ldrh	r3, [r4, #12]
 80170da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80170e2:	81a3      	strh	r3, [r4, #12]
 80170e4:	4632      	mov	r2, r6
 80170e6:	463b      	mov	r3, r7
 80170e8:	4628      	mov	r0, r5
 80170ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170ee:	f000 b901 	b.w	80172f4 <_write_r>

080170f2 <__sseek>:
 80170f2:	b510      	push	{r4, lr}
 80170f4:	460c      	mov	r4, r1
 80170f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170fa:	f001 f823 	bl	8018144 <_lseek_r>
 80170fe:	1c43      	adds	r3, r0, #1
 8017100:	89a3      	ldrh	r3, [r4, #12]
 8017102:	bf15      	itete	ne
 8017104:	6560      	strne	r0, [r4, #84]	; 0x54
 8017106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801710a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801710e:	81a3      	strheq	r3, [r4, #12]
 8017110:	bf18      	it	ne
 8017112:	81a3      	strhne	r3, [r4, #12]
 8017114:	bd10      	pop	{r4, pc}

08017116 <__sclose>:
 8017116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801711a:	f000 b91b 	b.w	8017354 <_close_r>
	...

08017120 <strtok>:
 8017120:	4b16      	ldr	r3, [pc, #88]	; (801717c <strtok+0x5c>)
 8017122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017124:	681e      	ldr	r6, [r3, #0]
 8017126:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8017128:	4605      	mov	r5, r0
 801712a:	b9fc      	cbnz	r4, 801716c <strtok+0x4c>
 801712c:	2050      	movs	r0, #80	; 0x50
 801712e:	9101      	str	r1, [sp, #4]
 8017130:	f001 f81a 	bl	8018168 <malloc>
 8017134:	9901      	ldr	r1, [sp, #4]
 8017136:	65b0      	str	r0, [r6, #88]	; 0x58
 8017138:	4602      	mov	r2, r0
 801713a:	b920      	cbnz	r0, 8017146 <strtok+0x26>
 801713c:	4b10      	ldr	r3, [pc, #64]	; (8017180 <strtok+0x60>)
 801713e:	4811      	ldr	r0, [pc, #68]	; (8017184 <strtok+0x64>)
 8017140:	2157      	movs	r1, #87	; 0x57
 8017142:	f000 f8e9 	bl	8017318 <__assert_func>
 8017146:	e9c0 4400 	strd	r4, r4, [r0]
 801714a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801714e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8017152:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8017156:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801715a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801715e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8017162:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8017166:	6184      	str	r4, [r0, #24]
 8017168:	7704      	strb	r4, [r0, #28]
 801716a:	6244      	str	r4, [r0, #36]	; 0x24
 801716c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801716e:	2301      	movs	r3, #1
 8017170:	4628      	mov	r0, r5
 8017172:	b002      	add	sp, #8
 8017174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017178:	f000 b806 	b.w	8017188 <__strtok_r>
 801717c:	24000260 	.word	0x24000260
 8017180:	08024860 	.word	0x08024860
 8017184:	08024877 	.word	0x08024877

08017188 <__strtok_r>:
 8017188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801718a:	b908      	cbnz	r0, 8017190 <__strtok_r+0x8>
 801718c:	6810      	ldr	r0, [r2, #0]
 801718e:	b188      	cbz	r0, 80171b4 <__strtok_r+0x2c>
 8017190:	4604      	mov	r4, r0
 8017192:	4620      	mov	r0, r4
 8017194:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017198:	460f      	mov	r7, r1
 801719a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801719e:	b91e      	cbnz	r6, 80171a8 <__strtok_r+0x20>
 80171a0:	b965      	cbnz	r5, 80171bc <__strtok_r+0x34>
 80171a2:	6015      	str	r5, [r2, #0]
 80171a4:	4628      	mov	r0, r5
 80171a6:	e005      	b.n	80171b4 <__strtok_r+0x2c>
 80171a8:	42b5      	cmp	r5, r6
 80171aa:	d1f6      	bne.n	801719a <__strtok_r+0x12>
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d1f0      	bne.n	8017192 <__strtok_r+0xa>
 80171b0:	6014      	str	r4, [r2, #0]
 80171b2:	7003      	strb	r3, [r0, #0]
 80171b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171b6:	461c      	mov	r4, r3
 80171b8:	e00c      	b.n	80171d4 <__strtok_r+0x4c>
 80171ba:	b915      	cbnz	r5, 80171c2 <__strtok_r+0x3a>
 80171bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80171c0:	460e      	mov	r6, r1
 80171c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80171c6:	42ab      	cmp	r3, r5
 80171c8:	d1f7      	bne.n	80171ba <__strtok_r+0x32>
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d0f3      	beq.n	80171b6 <__strtok_r+0x2e>
 80171ce:	2300      	movs	r3, #0
 80171d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80171d4:	6014      	str	r4, [r2, #0]
 80171d6:	e7ed      	b.n	80171b4 <__strtok_r+0x2c>

080171d8 <_strtol_l.isra.0>:
 80171d8:	2b01      	cmp	r3, #1
 80171da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171de:	d001      	beq.n	80171e4 <_strtol_l.isra.0+0xc>
 80171e0:	2b24      	cmp	r3, #36	; 0x24
 80171e2:	d906      	bls.n	80171f2 <_strtol_l.isra.0+0x1a>
 80171e4:	f7ff f8ce 	bl	8016384 <__errno>
 80171e8:	2316      	movs	r3, #22
 80171ea:	6003      	str	r3, [r0, #0]
 80171ec:	2000      	movs	r0, #0
 80171ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171f2:	4f3a      	ldr	r7, [pc, #232]	; (80172dc <_strtol_l.isra.0+0x104>)
 80171f4:	468e      	mov	lr, r1
 80171f6:	4676      	mov	r6, lr
 80171f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80171fc:	5de5      	ldrb	r5, [r4, r7]
 80171fe:	f015 0508 	ands.w	r5, r5, #8
 8017202:	d1f8      	bne.n	80171f6 <_strtol_l.isra.0+0x1e>
 8017204:	2c2d      	cmp	r4, #45	; 0x2d
 8017206:	d134      	bne.n	8017272 <_strtol_l.isra.0+0x9a>
 8017208:	f89e 4000 	ldrb.w	r4, [lr]
 801720c:	f04f 0801 	mov.w	r8, #1
 8017210:	f106 0e02 	add.w	lr, r6, #2
 8017214:	2b00      	cmp	r3, #0
 8017216:	d05c      	beq.n	80172d2 <_strtol_l.isra.0+0xfa>
 8017218:	2b10      	cmp	r3, #16
 801721a:	d10c      	bne.n	8017236 <_strtol_l.isra.0+0x5e>
 801721c:	2c30      	cmp	r4, #48	; 0x30
 801721e:	d10a      	bne.n	8017236 <_strtol_l.isra.0+0x5e>
 8017220:	f89e 4000 	ldrb.w	r4, [lr]
 8017224:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017228:	2c58      	cmp	r4, #88	; 0x58
 801722a:	d14d      	bne.n	80172c8 <_strtol_l.isra.0+0xf0>
 801722c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017230:	2310      	movs	r3, #16
 8017232:	f10e 0e02 	add.w	lr, lr, #2
 8017236:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801723a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801723e:	2600      	movs	r6, #0
 8017240:	fbbc f9f3 	udiv	r9, ip, r3
 8017244:	4635      	mov	r5, r6
 8017246:	fb03 ca19 	mls	sl, r3, r9, ip
 801724a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801724e:	2f09      	cmp	r7, #9
 8017250:	d818      	bhi.n	8017284 <_strtol_l.isra.0+0xac>
 8017252:	463c      	mov	r4, r7
 8017254:	42a3      	cmp	r3, r4
 8017256:	dd24      	ble.n	80172a2 <_strtol_l.isra.0+0xca>
 8017258:	2e00      	cmp	r6, #0
 801725a:	db1f      	blt.n	801729c <_strtol_l.isra.0+0xc4>
 801725c:	45a9      	cmp	r9, r5
 801725e:	d31d      	bcc.n	801729c <_strtol_l.isra.0+0xc4>
 8017260:	d101      	bne.n	8017266 <_strtol_l.isra.0+0x8e>
 8017262:	45a2      	cmp	sl, r4
 8017264:	db1a      	blt.n	801729c <_strtol_l.isra.0+0xc4>
 8017266:	fb05 4503 	mla	r5, r5, r3, r4
 801726a:	2601      	movs	r6, #1
 801726c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017270:	e7eb      	b.n	801724a <_strtol_l.isra.0+0x72>
 8017272:	2c2b      	cmp	r4, #43	; 0x2b
 8017274:	bf08      	it	eq
 8017276:	f89e 4000 	ldrbeq.w	r4, [lr]
 801727a:	46a8      	mov	r8, r5
 801727c:	bf08      	it	eq
 801727e:	f106 0e02 	addeq.w	lr, r6, #2
 8017282:	e7c7      	b.n	8017214 <_strtol_l.isra.0+0x3c>
 8017284:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017288:	2f19      	cmp	r7, #25
 801728a:	d801      	bhi.n	8017290 <_strtol_l.isra.0+0xb8>
 801728c:	3c37      	subs	r4, #55	; 0x37
 801728e:	e7e1      	b.n	8017254 <_strtol_l.isra.0+0x7c>
 8017290:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017294:	2f19      	cmp	r7, #25
 8017296:	d804      	bhi.n	80172a2 <_strtol_l.isra.0+0xca>
 8017298:	3c57      	subs	r4, #87	; 0x57
 801729a:	e7db      	b.n	8017254 <_strtol_l.isra.0+0x7c>
 801729c:	f04f 36ff 	mov.w	r6, #4294967295
 80172a0:	e7e4      	b.n	801726c <_strtol_l.isra.0+0x94>
 80172a2:	2e00      	cmp	r6, #0
 80172a4:	da05      	bge.n	80172b2 <_strtol_l.isra.0+0xda>
 80172a6:	2322      	movs	r3, #34	; 0x22
 80172a8:	6003      	str	r3, [r0, #0]
 80172aa:	4665      	mov	r5, ip
 80172ac:	b942      	cbnz	r2, 80172c0 <_strtol_l.isra.0+0xe8>
 80172ae:	4628      	mov	r0, r5
 80172b0:	e79d      	b.n	80171ee <_strtol_l.isra.0+0x16>
 80172b2:	f1b8 0f00 	cmp.w	r8, #0
 80172b6:	d000      	beq.n	80172ba <_strtol_l.isra.0+0xe2>
 80172b8:	426d      	negs	r5, r5
 80172ba:	2a00      	cmp	r2, #0
 80172bc:	d0f7      	beq.n	80172ae <_strtol_l.isra.0+0xd6>
 80172be:	b10e      	cbz	r6, 80172c4 <_strtol_l.isra.0+0xec>
 80172c0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80172c4:	6011      	str	r1, [r2, #0]
 80172c6:	e7f2      	b.n	80172ae <_strtol_l.isra.0+0xd6>
 80172c8:	2430      	movs	r4, #48	; 0x30
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d1b3      	bne.n	8017236 <_strtol_l.isra.0+0x5e>
 80172ce:	2308      	movs	r3, #8
 80172d0:	e7b1      	b.n	8017236 <_strtol_l.isra.0+0x5e>
 80172d2:	2c30      	cmp	r4, #48	; 0x30
 80172d4:	d0a4      	beq.n	8017220 <_strtol_l.isra.0+0x48>
 80172d6:	230a      	movs	r3, #10
 80172d8:	e7ad      	b.n	8017236 <_strtol_l.isra.0+0x5e>
 80172da:	bf00      	nop
 80172dc:	08024915 	.word	0x08024915

080172e0 <strtol>:
 80172e0:	4613      	mov	r3, r2
 80172e2:	460a      	mov	r2, r1
 80172e4:	4601      	mov	r1, r0
 80172e6:	4802      	ldr	r0, [pc, #8]	; (80172f0 <strtol+0x10>)
 80172e8:	6800      	ldr	r0, [r0, #0]
 80172ea:	f7ff bf75 	b.w	80171d8 <_strtol_l.isra.0>
 80172ee:	bf00      	nop
 80172f0:	24000260 	.word	0x24000260

080172f4 <_write_r>:
 80172f4:	b538      	push	{r3, r4, r5, lr}
 80172f6:	4d07      	ldr	r5, [pc, #28]	; (8017314 <_write_r+0x20>)
 80172f8:	4604      	mov	r4, r0
 80172fa:	4608      	mov	r0, r1
 80172fc:	4611      	mov	r1, r2
 80172fe:	2200      	movs	r2, #0
 8017300:	602a      	str	r2, [r5, #0]
 8017302:	461a      	mov	r2, r3
 8017304:	f7ea fd02 	bl	8001d0c <_write>
 8017308:	1c43      	adds	r3, r0, #1
 801730a:	d102      	bne.n	8017312 <_write_r+0x1e>
 801730c:	682b      	ldr	r3, [r5, #0]
 801730e:	b103      	cbz	r3, 8017312 <_write_r+0x1e>
 8017310:	6023      	str	r3, [r4, #0]
 8017312:	bd38      	pop	{r3, r4, r5, pc}
 8017314:	24006bec 	.word	0x24006bec

08017318 <__assert_func>:
 8017318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801731a:	4614      	mov	r4, r2
 801731c:	461a      	mov	r2, r3
 801731e:	4b09      	ldr	r3, [pc, #36]	; (8017344 <__assert_func+0x2c>)
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	4605      	mov	r5, r0
 8017324:	68d8      	ldr	r0, [r3, #12]
 8017326:	b14c      	cbz	r4, 801733c <__assert_func+0x24>
 8017328:	4b07      	ldr	r3, [pc, #28]	; (8017348 <__assert_func+0x30>)
 801732a:	9100      	str	r1, [sp, #0]
 801732c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017330:	4906      	ldr	r1, [pc, #24]	; (801734c <__assert_func+0x34>)
 8017332:	462b      	mov	r3, r5
 8017334:	f000 fef0 	bl	8018118 <fiprintf>
 8017338:	f001 fe90 	bl	801905c <abort>
 801733c:	4b04      	ldr	r3, [pc, #16]	; (8017350 <__assert_func+0x38>)
 801733e:	461c      	mov	r4, r3
 8017340:	e7f3      	b.n	801732a <__assert_func+0x12>
 8017342:	bf00      	nop
 8017344:	24000260 	.word	0x24000260
 8017348:	080248d8 	.word	0x080248d8
 801734c:	080248e5 	.word	0x080248e5
 8017350:	08024913 	.word	0x08024913

08017354 <_close_r>:
 8017354:	b538      	push	{r3, r4, r5, lr}
 8017356:	4d06      	ldr	r5, [pc, #24]	; (8017370 <_close_r+0x1c>)
 8017358:	2300      	movs	r3, #0
 801735a:	4604      	mov	r4, r0
 801735c:	4608      	mov	r0, r1
 801735e:	602b      	str	r3, [r5, #0]
 8017360:	f7eb fa7b 	bl	800285a <_close>
 8017364:	1c43      	adds	r3, r0, #1
 8017366:	d102      	bne.n	801736e <_close_r+0x1a>
 8017368:	682b      	ldr	r3, [r5, #0]
 801736a:	b103      	cbz	r3, 801736e <_close_r+0x1a>
 801736c:	6023      	str	r3, [r4, #0]
 801736e:	bd38      	pop	{r3, r4, r5, pc}
 8017370:	24006bec 	.word	0x24006bec

08017374 <quorem>:
 8017374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017378:	6903      	ldr	r3, [r0, #16]
 801737a:	690c      	ldr	r4, [r1, #16]
 801737c:	42a3      	cmp	r3, r4
 801737e:	4607      	mov	r7, r0
 8017380:	f2c0 8081 	blt.w	8017486 <quorem+0x112>
 8017384:	3c01      	subs	r4, #1
 8017386:	f101 0814 	add.w	r8, r1, #20
 801738a:	f100 0514 	add.w	r5, r0, #20
 801738e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017392:	9301      	str	r3, [sp, #4]
 8017394:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801739c:	3301      	adds	r3, #1
 801739e:	429a      	cmp	r2, r3
 80173a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80173a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80173a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80173ac:	d331      	bcc.n	8017412 <quorem+0x9e>
 80173ae:	f04f 0e00 	mov.w	lr, #0
 80173b2:	4640      	mov	r0, r8
 80173b4:	46ac      	mov	ip, r5
 80173b6:	46f2      	mov	sl, lr
 80173b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80173bc:	b293      	uxth	r3, r2
 80173be:	fb06 e303 	mla	r3, r6, r3, lr
 80173c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80173c6:	b29b      	uxth	r3, r3
 80173c8:	ebaa 0303 	sub.w	r3, sl, r3
 80173cc:	0c12      	lsrs	r2, r2, #16
 80173ce:	f8dc a000 	ldr.w	sl, [ip]
 80173d2:	fb06 e202 	mla	r2, r6, r2, lr
 80173d6:	fa13 f38a 	uxtah	r3, r3, sl
 80173da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80173de:	fa1f fa82 	uxth.w	sl, r2
 80173e2:	f8dc 2000 	ldr.w	r2, [ip]
 80173e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80173ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80173f4:	4581      	cmp	r9, r0
 80173f6:	f84c 3b04 	str.w	r3, [ip], #4
 80173fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80173fe:	d2db      	bcs.n	80173b8 <quorem+0x44>
 8017400:	f855 300b 	ldr.w	r3, [r5, fp]
 8017404:	b92b      	cbnz	r3, 8017412 <quorem+0x9e>
 8017406:	9b01      	ldr	r3, [sp, #4]
 8017408:	3b04      	subs	r3, #4
 801740a:	429d      	cmp	r5, r3
 801740c:	461a      	mov	r2, r3
 801740e:	d32e      	bcc.n	801746e <quorem+0xfa>
 8017410:	613c      	str	r4, [r7, #16]
 8017412:	4638      	mov	r0, r7
 8017414:	f001 f93a 	bl	801868c <__mcmp>
 8017418:	2800      	cmp	r0, #0
 801741a:	db24      	blt.n	8017466 <quorem+0xf2>
 801741c:	3601      	adds	r6, #1
 801741e:	4628      	mov	r0, r5
 8017420:	f04f 0c00 	mov.w	ip, #0
 8017424:	f858 2b04 	ldr.w	r2, [r8], #4
 8017428:	f8d0 e000 	ldr.w	lr, [r0]
 801742c:	b293      	uxth	r3, r2
 801742e:	ebac 0303 	sub.w	r3, ip, r3
 8017432:	0c12      	lsrs	r2, r2, #16
 8017434:	fa13 f38e 	uxtah	r3, r3, lr
 8017438:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801743c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017440:	b29b      	uxth	r3, r3
 8017442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017446:	45c1      	cmp	r9, r8
 8017448:	f840 3b04 	str.w	r3, [r0], #4
 801744c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017450:	d2e8      	bcs.n	8017424 <quorem+0xb0>
 8017452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801745a:	b922      	cbnz	r2, 8017466 <quorem+0xf2>
 801745c:	3b04      	subs	r3, #4
 801745e:	429d      	cmp	r5, r3
 8017460:	461a      	mov	r2, r3
 8017462:	d30a      	bcc.n	801747a <quorem+0x106>
 8017464:	613c      	str	r4, [r7, #16]
 8017466:	4630      	mov	r0, r6
 8017468:	b003      	add	sp, #12
 801746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801746e:	6812      	ldr	r2, [r2, #0]
 8017470:	3b04      	subs	r3, #4
 8017472:	2a00      	cmp	r2, #0
 8017474:	d1cc      	bne.n	8017410 <quorem+0x9c>
 8017476:	3c01      	subs	r4, #1
 8017478:	e7c7      	b.n	801740a <quorem+0x96>
 801747a:	6812      	ldr	r2, [r2, #0]
 801747c:	3b04      	subs	r3, #4
 801747e:	2a00      	cmp	r2, #0
 8017480:	d1f0      	bne.n	8017464 <quorem+0xf0>
 8017482:	3c01      	subs	r4, #1
 8017484:	e7eb      	b.n	801745e <quorem+0xea>
 8017486:	2000      	movs	r0, #0
 8017488:	e7ee      	b.n	8017468 <quorem+0xf4>
 801748a:	0000      	movs	r0, r0
 801748c:	0000      	movs	r0, r0
	...

08017490 <_dtoa_r>:
 8017490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017494:	ec59 8b10 	vmov	r8, r9, d0
 8017498:	b095      	sub	sp, #84	; 0x54
 801749a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801749c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801749e:	9107      	str	r1, [sp, #28]
 80174a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80174a4:	4606      	mov	r6, r0
 80174a6:	9209      	str	r2, [sp, #36]	; 0x24
 80174a8:	9310      	str	r3, [sp, #64]	; 0x40
 80174aa:	b975      	cbnz	r5, 80174ca <_dtoa_r+0x3a>
 80174ac:	2010      	movs	r0, #16
 80174ae:	f000 fe5b 	bl	8018168 <malloc>
 80174b2:	4602      	mov	r2, r0
 80174b4:	6270      	str	r0, [r6, #36]	; 0x24
 80174b6:	b920      	cbnz	r0, 80174c2 <_dtoa_r+0x32>
 80174b8:	4bab      	ldr	r3, [pc, #684]	; (8017768 <_dtoa_r+0x2d8>)
 80174ba:	21ea      	movs	r1, #234	; 0xea
 80174bc:	48ab      	ldr	r0, [pc, #684]	; (801776c <_dtoa_r+0x2dc>)
 80174be:	f7ff ff2b 	bl	8017318 <__assert_func>
 80174c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80174c6:	6005      	str	r5, [r0, #0]
 80174c8:	60c5      	str	r5, [r0, #12]
 80174ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80174cc:	6819      	ldr	r1, [r3, #0]
 80174ce:	b151      	cbz	r1, 80174e6 <_dtoa_r+0x56>
 80174d0:	685a      	ldr	r2, [r3, #4]
 80174d2:	604a      	str	r2, [r1, #4]
 80174d4:	2301      	movs	r3, #1
 80174d6:	4093      	lsls	r3, r2
 80174d8:	608b      	str	r3, [r1, #8]
 80174da:	4630      	mov	r0, r6
 80174dc:	f000 fe98 	bl	8018210 <_Bfree>
 80174e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80174e2:	2200      	movs	r2, #0
 80174e4:	601a      	str	r2, [r3, #0]
 80174e6:	f1b9 0300 	subs.w	r3, r9, #0
 80174ea:	bfbb      	ittet	lt
 80174ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80174f0:	9303      	strlt	r3, [sp, #12]
 80174f2:	2300      	movge	r3, #0
 80174f4:	2201      	movlt	r2, #1
 80174f6:	bfac      	ite	ge
 80174f8:	6023      	strge	r3, [r4, #0]
 80174fa:	6022      	strlt	r2, [r4, #0]
 80174fc:	4b9c      	ldr	r3, [pc, #624]	; (8017770 <_dtoa_r+0x2e0>)
 80174fe:	9c03      	ldr	r4, [sp, #12]
 8017500:	43a3      	bics	r3, r4
 8017502:	d11a      	bne.n	801753a <_dtoa_r+0xaa>
 8017504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017506:	f242 730f 	movw	r3, #9999	; 0x270f
 801750a:	6013      	str	r3, [r2, #0]
 801750c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8017510:	ea53 0308 	orrs.w	r3, r3, r8
 8017514:	f000 8512 	beq.w	8017f3c <_dtoa_r+0xaac>
 8017518:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801751a:	b953      	cbnz	r3, 8017532 <_dtoa_r+0xa2>
 801751c:	4b95      	ldr	r3, [pc, #596]	; (8017774 <_dtoa_r+0x2e4>)
 801751e:	e01f      	b.n	8017560 <_dtoa_r+0xd0>
 8017520:	4b95      	ldr	r3, [pc, #596]	; (8017778 <_dtoa_r+0x2e8>)
 8017522:	9300      	str	r3, [sp, #0]
 8017524:	3308      	adds	r3, #8
 8017526:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017528:	6013      	str	r3, [r2, #0]
 801752a:	9800      	ldr	r0, [sp, #0]
 801752c:	b015      	add	sp, #84	; 0x54
 801752e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017532:	4b90      	ldr	r3, [pc, #576]	; (8017774 <_dtoa_r+0x2e4>)
 8017534:	9300      	str	r3, [sp, #0]
 8017536:	3303      	adds	r3, #3
 8017538:	e7f5      	b.n	8017526 <_dtoa_r+0x96>
 801753a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801753e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017546:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801754a:	d10b      	bne.n	8017564 <_dtoa_r+0xd4>
 801754c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801754e:	2301      	movs	r3, #1
 8017550:	6013      	str	r3, [r2, #0]
 8017552:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017554:	2b00      	cmp	r3, #0
 8017556:	f000 84ee 	beq.w	8017f36 <_dtoa_r+0xaa6>
 801755a:	4888      	ldr	r0, [pc, #544]	; (801777c <_dtoa_r+0x2ec>)
 801755c:	6018      	str	r0, [r3, #0]
 801755e:	1e43      	subs	r3, r0, #1
 8017560:	9300      	str	r3, [sp, #0]
 8017562:	e7e2      	b.n	801752a <_dtoa_r+0x9a>
 8017564:	a913      	add	r1, sp, #76	; 0x4c
 8017566:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801756a:	aa12      	add	r2, sp, #72	; 0x48
 801756c:	4630      	mov	r0, r6
 801756e:	f001 f931 	bl	80187d4 <__d2b>
 8017572:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8017576:	4605      	mov	r5, r0
 8017578:	9812      	ldr	r0, [sp, #72]	; 0x48
 801757a:	2900      	cmp	r1, #0
 801757c:	d047      	beq.n	801760e <_dtoa_r+0x17e>
 801757e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017580:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017584:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017588:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801758c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017590:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017594:	2400      	movs	r4, #0
 8017596:	ec43 2b16 	vmov	d6, r2, r3
 801759a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801759e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8017750 <_dtoa_r+0x2c0>
 80175a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80175a6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8017758 <_dtoa_r+0x2c8>
 80175aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80175ae:	eeb0 7b46 	vmov.f64	d7, d6
 80175b2:	ee06 1a90 	vmov	s13, r1
 80175b6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80175ba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017760 <_dtoa_r+0x2d0>
 80175be:	eea5 7b06 	vfma.f64	d7, d5, d6
 80175c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80175c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80175ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ce:	ee16 ba90 	vmov	fp, s13
 80175d2:	9411      	str	r4, [sp, #68]	; 0x44
 80175d4:	d508      	bpl.n	80175e8 <_dtoa_r+0x158>
 80175d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80175da:	eeb4 6b47 	vcmp.f64	d6, d7
 80175de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175e2:	bf18      	it	ne
 80175e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80175e8:	f1bb 0f16 	cmp.w	fp, #22
 80175ec:	d832      	bhi.n	8017654 <_dtoa_r+0x1c4>
 80175ee:	4b64      	ldr	r3, [pc, #400]	; (8017780 <_dtoa_r+0x2f0>)
 80175f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80175f4:	ed93 7b00 	vldr	d7, [r3]
 80175f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80175fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017604:	d501      	bpl.n	801760a <_dtoa_r+0x17a>
 8017606:	f10b 3bff 	add.w	fp, fp, #4294967295
 801760a:	2300      	movs	r3, #0
 801760c:	e023      	b.n	8017656 <_dtoa_r+0x1c6>
 801760e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017610:	4401      	add	r1, r0
 8017612:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8017616:	2b20      	cmp	r3, #32
 8017618:	bfc3      	ittte	gt
 801761a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801761e:	fa04 f303 	lslgt.w	r3, r4, r3
 8017622:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8017626:	f1c3 0320 	rsble	r3, r3, #32
 801762a:	bfc6      	itte	gt
 801762c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8017630:	ea43 0308 	orrgt.w	r3, r3, r8
 8017634:	fa08 f303 	lslle.w	r3, r8, r3
 8017638:	ee07 3a90 	vmov	s15, r3
 801763c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017640:	3901      	subs	r1, #1
 8017642:	ed8d 7b00 	vstr	d7, [sp]
 8017646:	9c01      	ldr	r4, [sp, #4]
 8017648:	e9dd 2300 	ldrd	r2, r3, [sp]
 801764c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8017650:	2401      	movs	r4, #1
 8017652:	e7a0      	b.n	8017596 <_dtoa_r+0x106>
 8017654:	2301      	movs	r3, #1
 8017656:	930f      	str	r3, [sp, #60]	; 0x3c
 8017658:	1a43      	subs	r3, r0, r1
 801765a:	1e5a      	subs	r2, r3, #1
 801765c:	bf45      	ittet	mi
 801765e:	f1c3 0301 	rsbmi	r3, r3, #1
 8017662:	9305      	strmi	r3, [sp, #20]
 8017664:	2300      	movpl	r3, #0
 8017666:	2300      	movmi	r3, #0
 8017668:	9206      	str	r2, [sp, #24]
 801766a:	bf54      	ite	pl
 801766c:	9305      	strpl	r3, [sp, #20]
 801766e:	9306      	strmi	r3, [sp, #24]
 8017670:	f1bb 0f00 	cmp.w	fp, #0
 8017674:	db18      	blt.n	80176a8 <_dtoa_r+0x218>
 8017676:	9b06      	ldr	r3, [sp, #24]
 8017678:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801767c:	445b      	add	r3, fp
 801767e:	9306      	str	r3, [sp, #24]
 8017680:	2300      	movs	r3, #0
 8017682:	9a07      	ldr	r2, [sp, #28]
 8017684:	2a09      	cmp	r2, #9
 8017686:	d849      	bhi.n	801771c <_dtoa_r+0x28c>
 8017688:	2a05      	cmp	r2, #5
 801768a:	bfc4      	itt	gt
 801768c:	3a04      	subgt	r2, #4
 801768e:	9207      	strgt	r2, [sp, #28]
 8017690:	9a07      	ldr	r2, [sp, #28]
 8017692:	f1a2 0202 	sub.w	r2, r2, #2
 8017696:	bfcc      	ite	gt
 8017698:	2400      	movgt	r4, #0
 801769a:	2401      	movle	r4, #1
 801769c:	2a03      	cmp	r2, #3
 801769e:	d848      	bhi.n	8017732 <_dtoa_r+0x2a2>
 80176a0:	e8df f002 	tbb	[pc, r2]
 80176a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80176a8:	9b05      	ldr	r3, [sp, #20]
 80176aa:	2200      	movs	r2, #0
 80176ac:	eba3 030b 	sub.w	r3, r3, fp
 80176b0:	9305      	str	r3, [sp, #20]
 80176b2:	920e      	str	r2, [sp, #56]	; 0x38
 80176b4:	f1cb 0300 	rsb	r3, fp, #0
 80176b8:	e7e3      	b.n	8017682 <_dtoa_r+0x1f2>
 80176ba:	2200      	movs	r2, #0
 80176bc:	9208      	str	r2, [sp, #32]
 80176be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176c0:	2a00      	cmp	r2, #0
 80176c2:	dc39      	bgt.n	8017738 <_dtoa_r+0x2a8>
 80176c4:	f04f 0a01 	mov.w	sl, #1
 80176c8:	46d1      	mov	r9, sl
 80176ca:	4652      	mov	r2, sl
 80176cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80176d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80176d2:	2100      	movs	r1, #0
 80176d4:	6079      	str	r1, [r7, #4]
 80176d6:	2004      	movs	r0, #4
 80176d8:	f100 0c14 	add.w	ip, r0, #20
 80176dc:	4594      	cmp	ip, r2
 80176de:	6879      	ldr	r1, [r7, #4]
 80176e0:	d92f      	bls.n	8017742 <_dtoa_r+0x2b2>
 80176e2:	4630      	mov	r0, r6
 80176e4:	930c      	str	r3, [sp, #48]	; 0x30
 80176e6:	f000 fd53 	bl	8018190 <_Balloc>
 80176ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176ec:	9000      	str	r0, [sp, #0]
 80176ee:	4602      	mov	r2, r0
 80176f0:	2800      	cmp	r0, #0
 80176f2:	d149      	bne.n	8017788 <_dtoa_r+0x2f8>
 80176f4:	4b23      	ldr	r3, [pc, #140]	; (8017784 <_dtoa_r+0x2f4>)
 80176f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80176fa:	e6df      	b.n	80174bc <_dtoa_r+0x2c>
 80176fc:	2201      	movs	r2, #1
 80176fe:	e7dd      	b.n	80176bc <_dtoa_r+0x22c>
 8017700:	2200      	movs	r2, #0
 8017702:	9208      	str	r2, [sp, #32]
 8017704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017706:	eb0b 0a02 	add.w	sl, fp, r2
 801770a:	f10a 0901 	add.w	r9, sl, #1
 801770e:	464a      	mov	r2, r9
 8017710:	2a01      	cmp	r2, #1
 8017712:	bfb8      	it	lt
 8017714:	2201      	movlt	r2, #1
 8017716:	e7db      	b.n	80176d0 <_dtoa_r+0x240>
 8017718:	2201      	movs	r2, #1
 801771a:	e7f2      	b.n	8017702 <_dtoa_r+0x272>
 801771c:	2401      	movs	r4, #1
 801771e:	2200      	movs	r2, #0
 8017720:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8017724:	f04f 3aff 	mov.w	sl, #4294967295
 8017728:	2100      	movs	r1, #0
 801772a:	46d1      	mov	r9, sl
 801772c:	2212      	movs	r2, #18
 801772e:	9109      	str	r1, [sp, #36]	; 0x24
 8017730:	e7ce      	b.n	80176d0 <_dtoa_r+0x240>
 8017732:	2201      	movs	r2, #1
 8017734:	9208      	str	r2, [sp, #32]
 8017736:	e7f5      	b.n	8017724 <_dtoa_r+0x294>
 8017738:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801773c:	46d1      	mov	r9, sl
 801773e:	4652      	mov	r2, sl
 8017740:	e7c6      	b.n	80176d0 <_dtoa_r+0x240>
 8017742:	3101      	adds	r1, #1
 8017744:	6079      	str	r1, [r7, #4]
 8017746:	0040      	lsls	r0, r0, #1
 8017748:	e7c6      	b.n	80176d8 <_dtoa_r+0x248>
 801774a:	bf00      	nop
 801774c:	f3af 8000 	nop.w
 8017750:	636f4361 	.word	0x636f4361
 8017754:	3fd287a7 	.word	0x3fd287a7
 8017758:	8b60c8b3 	.word	0x8b60c8b3
 801775c:	3fc68a28 	.word	0x3fc68a28
 8017760:	509f79fb 	.word	0x509f79fb
 8017764:	3fd34413 	.word	0x3fd34413
 8017768:	08024860 	.word	0x08024860
 801776c:	08024a22 	.word	0x08024a22
 8017770:	7ff00000 	.word	0x7ff00000
 8017774:	08024a1e 	.word	0x08024a1e
 8017778:	08024a15 	.word	0x08024a15
 801777c:	0802483d 	.word	0x0802483d
 8017780:	08024b20 	.word	0x08024b20
 8017784:	08024a81 	.word	0x08024a81
 8017788:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801778a:	9900      	ldr	r1, [sp, #0]
 801778c:	6011      	str	r1, [r2, #0]
 801778e:	f1b9 0f0e 	cmp.w	r9, #14
 8017792:	d872      	bhi.n	801787a <_dtoa_r+0x3ea>
 8017794:	2c00      	cmp	r4, #0
 8017796:	d070      	beq.n	801787a <_dtoa_r+0x3ea>
 8017798:	f1bb 0f00 	cmp.w	fp, #0
 801779c:	f340 80a6 	ble.w	80178ec <_dtoa_r+0x45c>
 80177a0:	49ca      	ldr	r1, [pc, #808]	; (8017acc <_dtoa_r+0x63c>)
 80177a2:	f00b 020f 	and.w	r2, fp, #15
 80177a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80177aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80177ae:	ed92 7b00 	vldr	d7, [r2]
 80177b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80177b6:	f000 808d 	beq.w	80178d4 <_dtoa_r+0x444>
 80177ba:	4ac5      	ldr	r2, [pc, #788]	; (8017ad0 <_dtoa_r+0x640>)
 80177bc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80177c0:	ed92 6b08 	vldr	d6, [r2, #32]
 80177c4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80177c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80177cc:	f001 010f 	and.w	r1, r1, #15
 80177d0:	2203      	movs	r2, #3
 80177d2:	48bf      	ldr	r0, [pc, #764]	; (8017ad0 <_dtoa_r+0x640>)
 80177d4:	2900      	cmp	r1, #0
 80177d6:	d17f      	bne.n	80178d8 <_dtoa_r+0x448>
 80177d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80177dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80177e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80177e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80177e6:	2900      	cmp	r1, #0
 80177e8:	f000 80b2 	beq.w	8017950 <_dtoa_r+0x4c0>
 80177ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80177f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80177f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80177f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fc:	f140 80a8 	bpl.w	8017950 <_dtoa_r+0x4c0>
 8017800:	f1b9 0f00 	cmp.w	r9, #0
 8017804:	f000 80a4 	beq.w	8017950 <_dtoa_r+0x4c0>
 8017808:	f1ba 0f00 	cmp.w	sl, #0
 801780c:	dd31      	ble.n	8017872 <_dtoa_r+0x3e2>
 801780e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8017812:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017816:	ed8d 7b02 	vstr	d7, [sp, #8]
 801781a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801781e:	3201      	adds	r2, #1
 8017820:	4650      	mov	r0, sl
 8017822:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017826:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801782a:	ee07 2a90 	vmov	s15, r2
 801782e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017832:	eea7 5b06 	vfma.f64	d5, d7, d6
 8017836:	ed8d 5b02 	vstr	d5, [sp, #8]
 801783a:	9c03      	ldr	r4, [sp, #12]
 801783c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017840:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8017844:	2800      	cmp	r0, #0
 8017846:	f040 8086 	bne.w	8017956 <_dtoa_r+0x4c6>
 801784a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801784e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017852:	ec42 1b17 	vmov	d7, r1, r2
 8017856:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801785a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801785e:	f300 8272 	bgt.w	8017d46 <_dtoa_r+0x8b6>
 8017862:	eeb1 7b47 	vneg.f64	d7, d7
 8017866:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801786a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801786e:	f100 8267 	bmi.w	8017d40 <_dtoa_r+0x8b0>
 8017872:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8017876:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801787a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801787c:	2a00      	cmp	r2, #0
 801787e:	f2c0 8129 	blt.w	8017ad4 <_dtoa_r+0x644>
 8017882:	f1bb 0f0e 	cmp.w	fp, #14
 8017886:	f300 8125 	bgt.w	8017ad4 <_dtoa_r+0x644>
 801788a:	4b90      	ldr	r3, [pc, #576]	; (8017acc <_dtoa_r+0x63c>)
 801788c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017890:	ed93 6b00 	vldr	d6, [r3]
 8017894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017896:	2b00      	cmp	r3, #0
 8017898:	f280 80c3 	bge.w	8017a22 <_dtoa_r+0x592>
 801789c:	f1b9 0f00 	cmp.w	r9, #0
 80178a0:	f300 80bf 	bgt.w	8017a22 <_dtoa_r+0x592>
 80178a4:	f040 824c 	bne.w	8017d40 <_dtoa_r+0x8b0>
 80178a8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80178ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 80178b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80178b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80178b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178bc:	464c      	mov	r4, r9
 80178be:	464f      	mov	r7, r9
 80178c0:	f280 8222 	bge.w	8017d08 <_dtoa_r+0x878>
 80178c4:	f8dd 8000 	ldr.w	r8, [sp]
 80178c8:	2331      	movs	r3, #49	; 0x31
 80178ca:	f808 3b01 	strb.w	r3, [r8], #1
 80178ce:	f10b 0b01 	add.w	fp, fp, #1
 80178d2:	e21e      	b.n	8017d12 <_dtoa_r+0x882>
 80178d4:	2202      	movs	r2, #2
 80178d6:	e77c      	b.n	80177d2 <_dtoa_r+0x342>
 80178d8:	07cc      	lsls	r4, r1, #31
 80178da:	d504      	bpl.n	80178e6 <_dtoa_r+0x456>
 80178dc:	ed90 6b00 	vldr	d6, [r0]
 80178e0:	3201      	adds	r2, #1
 80178e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80178e6:	1049      	asrs	r1, r1, #1
 80178e8:	3008      	adds	r0, #8
 80178ea:	e773      	b.n	80177d4 <_dtoa_r+0x344>
 80178ec:	d02e      	beq.n	801794c <_dtoa_r+0x4bc>
 80178ee:	f1cb 0100 	rsb	r1, fp, #0
 80178f2:	4a76      	ldr	r2, [pc, #472]	; (8017acc <_dtoa_r+0x63c>)
 80178f4:	f001 000f 	and.w	r0, r1, #15
 80178f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80178fc:	ed92 7b00 	vldr	d7, [r2]
 8017900:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8017904:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017908:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801790c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8017910:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017914:	486e      	ldr	r0, [pc, #440]	; (8017ad0 <_dtoa_r+0x640>)
 8017916:	1109      	asrs	r1, r1, #4
 8017918:	2400      	movs	r4, #0
 801791a:	2202      	movs	r2, #2
 801791c:	b939      	cbnz	r1, 801792e <_dtoa_r+0x49e>
 801791e:	2c00      	cmp	r4, #0
 8017920:	f43f af60 	beq.w	80177e4 <_dtoa_r+0x354>
 8017924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801792c:	e75a      	b.n	80177e4 <_dtoa_r+0x354>
 801792e:	07cf      	lsls	r7, r1, #31
 8017930:	d509      	bpl.n	8017946 <_dtoa_r+0x4b6>
 8017932:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8017936:	ed90 7b00 	vldr	d7, [r0]
 801793a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801793e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017942:	3201      	adds	r2, #1
 8017944:	2401      	movs	r4, #1
 8017946:	1049      	asrs	r1, r1, #1
 8017948:	3008      	adds	r0, #8
 801794a:	e7e7      	b.n	801791c <_dtoa_r+0x48c>
 801794c:	2202      	movs	r2, #2
 801794e:	e749      	b.n	80177e4 <_dtoa_r+0x354>
 8017950:	465f      	mov	r7, fp
 8017952:	4648      	mov	r0, r9
 8017954:	e765      	b.n	8017822 <_dtoa_r+0x392>
 8017956:	ec42 1b17 	vmov	d7, r1, r2
 801795a:	4a5c      	ldr	r2, [pc, #368]	; (8017acc <_dtoa_r+0x63c>)
 801795c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017960:	ed12 4b02 	vldr	d4, [r2, #-8]
 8017964:	9a00      	ldr	r2, [sp, #0]
 8017966:	1814      	adds	r4, r2, r0
 8017968:	9a08      	ldr	r2, [sp, #32]
 801796a:	b352      	cbz	r2, 80179c2 <_dtoa_r+0x532>
 801796c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8017970:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8017974:	f8dd 8000 	ldr.w	r8, [sp]
 8017978:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801797c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017980:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017984:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017988:	ee14 2a90 	vmov	r2, s9
 801798c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017990:	3230      	adds	r2, #48	; 0x30
 8017992:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017996:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801799a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801799e:	f808 2b01 	strb.w	r2, [r8], #1
 80179a2:	d439      	bmi.n	8017a18 <_dtoa_r+0x588>
 80179a4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80179a8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80179ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179b0:	d472      	bmi.n	8017a98 <_dtoa_r+0x608>
 80179b2:	45a0      	cmp	r8, r4
 80179b4:	f43f af5d 	beq.w	8017872 <_dtoa_r+0x3e2>
 80179b8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80179bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80179c0:	e7e0      	b.n	8017984 <_dtoa_r+0x4f4>
 80179c2:	f8dd 8000 	ldr.w	r8, [sp]
 80179c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80179ca:	4621      	mov	r1, r4
 80179cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80179d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80179d4:	ee14 2a90 	vmov	r2, s9
 80179d8:	3230      	adds	r2, #48	; 0x30
 80179da:	f808 2b01 	strb.w	r2, [r8], #1
 80179de:	45a0      	cmp	r8, r4
 80179e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80179e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80179e8:	d118      	bne.n	8017a1c <_dtoa_r+0x58c>
 80179ea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80179ee:	ee37 4b05 	vadd.f64	d4, d7, d5
 80179f2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80179f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179fa:	dc4d      	bgt.n	8017a98 <_dtoa_r+0x608>
 80179fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017a00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a08:	f57f af33 	bpl.w	8017872 <_dtoa_r+0x3e2>
 8017a0c:	4688      	mov	r8, r1
 8017a0e:	3901      	subs	r1, #1
 8017a10:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8017a14:	2b30      	cmp	r3, #48	; 0x30
 8017a16:	d0f9      	beq.n	8017a0c <_dtoa_r+0x57c>
 8017a18:	46bb      	mov	fp, r7
 8017a1a:	e02a      	b.n	8017a72 <_dtoa_r+0x5e2>
 8017a1c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017a20:	e7d6      	b.n	80179d0 <_dtoa_r+0x540>
 8017a22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017a26:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8017a2a:	f8dd 8000 	ldr.w	r8, [sp]
 8017a2e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8017a32:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8017a36:	ee15 3a10 	vmov	r3, s10
 8017a3a:	3330      	adds	r3, #48	; 0x30
 8017a3c:	f808 3b01 	strb.w	r3, [r8], #1
 8017a40:	9b00      	ldr	r3, [sp, #0]
 8017a42:	eba8 0303 	sub.w	r3, r8, r3
 8017a46:	4599      	cmp	r9, r3
 8017a48:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8017a4c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8017a50:	d133      	bne.n	8017aba <_dtoa_r+0x62a>
 8017a52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017a56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a5e:	dc1a      	bgt.n	8017a96 <_dtoa_r+0x606>
 8017a60:	eeb4 7b46 	vcmp.f64	d7, d6
 8017a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a68:	d103      	bne.n	8017a72 <_dtoa_r+0x5e2>
 8017a6a:	ee15 3a10 	vmov	r3, s10
 8017a6e:	07d9      	lsls	r1, r3, #31
 8017a70:	d411      	bmi.n	8017a96 <_dtoa_r+0x606>
 8017a72:	4629      	mov	r1, r5
 8017a74:	4630      	mov	r0, r6
 8017a76:	f000 fbcb 	bl	8018210 <_Bfree>
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017a7e:	f888 3000 	strb.w	r3, [r8]
 8017a82:	f10b 0301 	add.w	r3, fp, #1
 8017a86:	6013      	str	r3, [r2, #0]
 8017a88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	f43f ad4d 	beq.w	801752a <_dtoa_r+0x9a>
 8017a90:	f8c3 8000 	str.w	r8, [r3]
 8017a94:	e549      	b.n	801752a <_dtoa_r+0x9a>
 8017a96:	465f      	mov	r7, fp
 8017a98:	4643      	mov	r3, r8
 8017a9a:	4698      	mov	r8, r3
 8017a9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017aa0:	2a39      	cmp	r2, #57	; 0x39
 8017aa2:	d106      	bne.n	8017ab2 <_dtoa_r+0x622>
 8017aa4:	9a00      	ldr	r2, [sp, #0]
 8017aa6:	429a      	cmp	r2, r3
 8017aa8:	d1f7      	bne.n	8017a9a <_dtoa_r+0x60a>
 8017aaa:	9900      	ldr	r1, [sp, #0]
 8017aac:	2230      	movs	r2, #48	; 0x30
 8017aae:	3701      	adds	r7, #1
 8017ab0:	700a      	strb	r2, [r1, #0]
 8017ab2:	781a      	ldrb	r2, [r3, #0]
 8017ab4:	3201      	adds	r2, #1
 8017ab6:	701a      	strb	r2, [r3, #0]
 8017ab8:	e7ae      	b.n	8017a18 <_dtoa_r+0x588>
 8017aba:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017abe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ac6:	d1b2      	bne.n	8017a2e <_dtoa_r+0x59e>
 8017ac8:	e7d3      	b.n	8017a72 <_dtoa_r+0x5e2>
 8017aca:	bf00      	nop
 8017acc:	08024b20 	.word	0x08024b20
 8017ad0:	08024af8 	.word	0x08024af8
 8017ad4:	9908      	ldr	r1, [sp, #32]
 8017ad6:	2900      	cmp	r1, #0
 8017ad8:	f000 80d1 	beq.w	8017c7e <_dtoa_r+0x7ee>
 8017adc:	9907      	ldr	r1, [sp, #28]
 8017ade:	2901      	cmp	r1, #1
 8017ae0:	f300 80b4 	bgt.w	8017c4c <_dtoa_r+0x7bc>
 8017ae4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017ae6:	2900      	cmp	r1, #0
 8017ae8:	f000 80ac 	beq.w	8017c44 <_dtoa_r+0x7b4>
 8017aec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017af0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017af4:	461c      	mov	r4, r3
 8017af6:	930a      	str	r3, [sp, #40]	; 0x28
 8017af8:	9b05      	ldr	r3, [sp, #20]
 8017afa:	4413      	add	r3, r2
 8017afc:	9305      	str	r3, [sp, #20]
 8017afe:	9b06      	ldr	r3, [sp, #24]
 8017b00:	2101      	movs	r1, #1
 8017b02:	4413      	add	r3, r2
 8017b04:	4630      	mov	r0, r6
 8017b06:	9306      	str	r3, [sp, #24]
 8017b08:	f000 fc3e 	bl	8018388 <__i2b>
 8017b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b0e:	4607      	mov	r7, r0
 8017b10:	f1b8 0f00 	cmp.w	r8, #0
 8017b14:	dd0d      	ble.n	8017b32 <_dtoa_r+0x6a2>
 8017b16:	9a06      	ldr	r2, [sp, #24]
 8017b18:	2a00      	cmp	r2, #0
 8017b1a:	dd0a      	ble.n	8017b32 <_dtoa_r+0x6a2>
 8017b1c:	4542      	cmp	r2, r8
 8017b1e:	9905      	ldr	r1, [sp, #20]
 8017b20:	bfa8      	it	ge
 8017b22:	4642      	movge	r2, r8
 8017b24:	1a89      	subs	r1, r1, r2
 8017b26:	9105      	str	r1, [sp, #20]
 8017b28:	9906      	ldr	r1, [sp, #24]
 8017b2a:	eba8 0802 	sub.w	r8, r8, r2
 8017b2e:	1a8a      	subs	r2, r1, r2
 8017b30:	9206      	str	r2, [sp, #24]
 8017b32:	b303      	cbz	r3, 8017b76 <_dtoa_r+0x6e6>
 8017b34:	9a08      	ldr	r2, [sp, #32]
 8017b36:	2a00      	cmp	r2, #0
 8017b38:	f000 80a6 	beq.w	8017c88 <_dtoa_r+0x7f8>
 8017b3c:	2c00      	cmp	r4, #0
 8017b3e:	dd13      	ble.n	8017b68 <_dtoa_r+0x6d8>
 8017b40:	4639      	mov	r1, r7
 8017b42:	4622      	mov	r2, r4
 8017b44:	4630      	mov	r0, r6
 8017b46:	930c      	str	r3, [sp, #48]	; 0x30
 8017b48:	f000 fcda 	bl	8018500 <__pow5mult>
 8017b4c:	462a      	mov	r2, r5
 8017b4e:	4601      	mov	r1, r0
 8017b50:	4607      	mov	r7, r0
 8017b52:	4630      	mov	r0, r6
 8017b54:	f000 fc2e 	bl	80183b4 <__multiply>
 8017b58:	4629      	mov	r1, r5
 8017b5a:	900a      	str	r0, [sp, #40]	; 0x28
 8017b5c:	4630      	mov	r0, r6
 8017b5e:	f000 fb57 	bl	8018210 <_Bfree>
 8017b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b66:	4615      	mov	r5, r2
 8017b68:	1b1a      	subs	r2, r3, r4
 8017b6a:	d004      	beq.n	8017b76 <_dtoa_r+0x6e6>
 8017b6c:	4629      	mov	r1, r5
 8017b6e:	4630      	mov	r0, r6
 8017b70:	f000 fcc6 	bl	8018500 <__pow5mult>
 8017b74:	4605      	mov	r5, r0
 8017b76:	2101      	movs	r1, #1
 8017b78:	4630      	mov	r0, r6
 8017b7a:	f000 fc05 	bl	8018388 <__i2b>
 8017b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	4604      	mov	r4, r0
 8017b84:	f340 8082 	ble.w	8017c8c <_dtoa_r+0x7fc>
 8017b88:	461a      	mov	r2, r3
 8017b8a:	4601      	mov	r1, r0
 8017b8c:	4630      	mov	r0, r6
 8017b8e:	f000 fcb7 	bl	8018500 <__pow5mult>
 8017b92:	9b07      	ldr	r3, [sp, #28]
 8017b94:	2b01      	cmp	r3, #1
 8017b96:	4604      	mov	r4, r0
 8017b98:	dd7b      	ble.n	8017c92 <_dtoa_r+0x802>
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8017b9e:	6922      	ldr	r2, [r4, #16]
 8017ba0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017ba4:	6910      	ldr	r0, [r2, #16]
 8017ba6:	f000 fb9f 	bl	80182e8 <__hi0bits>
 8017baa:	f1c0 0020 	rsb	r0, r0, #32
 8017bae:	9b06      	ldr	r3, [sp, #24]
 8017bb0:	4418      	add	r0, r3
 8017bb2:	f010 001f 	ands.w	r0, r0, #31
 8017bb6:	f000 808d 	beq.w	8017cd4 <_dtoa_r+0x844>
 8017bba:	f1c0 0220 	rsb	r2, r0, #32
 8017bbe:	2a04      	cmp	r2, #4
 8017bc0:	f340 8086 	ble.w	8017cd0 <_dtoa_r+0x840>
 8017bc4:	f1c0 001c 	rsb	r0, r0, #28
 8017bc8:	9b05      	ldr	r3, [sp, #20]
 8017bca:	4403      	add	r3, r0
 8017bcc:	9305      	str	r3, [sp, #20]
 8017bce:	9b06      	ldr	r3, [sp, #24]
 8017bd0:	4403      	add	r3, r0
 8017bd2:	4480      	add	r8, r0
 8017bd4:	9306      	str	r3, [sp, #24]
 8017bd6:	9b05      	ldr	r3, [sp, #20]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	dd05      	ble.n	8017be8 <_dtoa_r+0x758>
 8017bdc:	4629      	mov	r1, r5
 8017bde:	461a      	mov	r2, r3
 8017be0:	4630      	mov	r0, r6
 8017be2:	f000 fce7 	bl	80185b4 <__lshift>
 8017be6:	4605      	mov	r5, r0
 8017be8:	9b06      	ldr	r3, [sp, #24]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	dd05      	ble.n	8017bfa <_dtoa_r+0x76a>
 8017bee:	4621      	mov	r1, r4
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	4630      	mov	r0, r6
 8017bf4:	f000 fcde 	bl	80185b4 <__lshift>
 8017bf8:	4604      	mov	r4, r0
 8017bfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d06b      	beq.n	8017cd8 <_dtoa_r+0x848>
 8017c00:	4621      	mov	r1, r4
 8017c02:	4628      	mov	r0, r5
 8017c04:	f000 fd42 	bl	801868c <__mcmp>
 8017c08:	2800      	cmp	r0, #0
 8017c0a:	da65      	bge.n	8017cd8 <_dtoa_r+0x848>
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	4629      	mov	r1, r5
 8017c10:	220a      	movs	r2, #10
 8017c12:	4630      	mov	r0, r6
 8017c14:	f000 fb1e 	bl	8018254 <__multadd>
 8017c18:	9b08      	ldr	r3, [sp, #32]
 8017c1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017c1e:	4605      	mov	r5, r0
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	f000 8192 	beq.w	8017f4a <_dtoa_r+0xaba>
 8017c26:	4639      	mov	r1, r7
 8017c28:	2300      	movs	r3, #0
 8017c2a:	220a      	movs	r2, #10
 8017c2c:	4630      	mov	r0, r6
 8017c2e:	f000 fb11 	bl	8018254 <__multadd>
 8017c32:	f1ba 0f00 	cmp.w	sl, #0
 8017c36:	4607      	mov	r7, r0
 8017c38:	f300 808e 	bgt.w	8017d58 <_dtoa_r+0x8c8>
 8017c3c:	9b07      	ldr	r3, [sp, #28]
 8017c3e:	2b02      	cmp	r3, #2
 8017c40:	dc51      	bgt.n	8017ce6 <_dtoa_r+0x856>
 8017c42:	e089      	b.n	8017d58 <_dtoa_r+0x8c8>
 8017c44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017c4a:	e751      	b.n	8017af0 <_dtoa_r+0x660>
 8017c4c:	f109 34ff 	add.w	r4, r9, #4294967295
 8017c50:	42a3      	cmp	r3, r4
 8017c52:	bfbf      	itttt	lt
 8017c54:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8017c56:	1ae3      	sublt	r3, r4, r3
 8017c58:	18d2      	addlt	r2, r2, r3
 8017c5a:	4613      	movlt	r3, r2
 8017c5c:	bfb7      	itett	lt
 8017c5e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017c60:	1b1c      	subge	r4, r3, r4
 8017c62:	4623      	movlt	r3, r4
 8017c64:	2400      	movlt	r4, #0
 8017c66:	f1b9 0f00 	cmp.w	r9, #0
 8017c6a:	bfb5      	itete	lt
 8017c6c:	9a05      	ldrlt	r2, [sp, #20]
 8017c6e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8017c72:	eba2 0809 	sublt.w	r8, r2, r9
 8017c76:	464a      	movge	r2, r9
 8017c78:	bfb8      	it	lt
 8017c7a:	2200      	movlt	r2, #0
 8017c7c:	e73b      	b.n	8017af6 <_dtoa_r+0x666>
 8017c7e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017c82:	9f08      	ldr	r7, [sp, #32]
 8017c84:	461c      	mov	r4, r3
 8017c86:	e743      	b.n	8017b10 <_dtoa_r+0x680>
 8017c88:	461a      	mov	r2, r3
 8017c8a:	e76f      	b.n	8017b6c <_dtoa_r+0x6dc>
 8017c8c:	9b07      	ldr	r3, [sp, #28]
 8017c8e:	2b01      	cmp	r3, #1
 8017c90:	dc18      	bgt.n	8017cc4 <_dtoa_r+0x834>
 8017c92:	9b02      	ldr	r3, [sp, #8]
 8017c94:	b9b3      	cbnz	r3, 8017cc4 <_dtoa_r+0x834>
 8017c96:	9b03      	ldr	r3, [sp, #12]
 8017c98:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8017c9c:	b9a2      	cbnz	r2, 8017cc8 <_dtoa_r+0x838>
 8017c9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017ca2:	0d12      	lsrs	r2, r2, #20
 8017ca4:	0512      	lsls	r2, r2, #20
 8017ca6:	b18a      	cbz	r2, 8017ccc <_dtoa_r+0x83c>
 8017ca8:	9b05      	ldr	r3, [sp, #20]
 8017caa:	3301      	adds	r3, #1
 8017cac:	9305      	str	r3, [sp, #20]
 8017cae:	9b06      	ldr	r3, [sp, #24]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	9306      	str	r3, [sp, #24]
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8017cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	f47f af6f 	bne.w	8017b9e <_dtoa_r+0x70e>
 8017cc0:	2001      	movs	r0, #1
 8017cc2:	e774      	b.n	8017bae <_dtoa_r+0x71e>
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	e7f6      	b.n	8017cb6 <_dtoa_r+0x826>
 8017cc8:	9b02      	ldr	r3, [sp, #8]
 8017cca:	e7f4      	b.n	8017cb6 <_dtoa_r+0x826>
 8017ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8017cce:	e7f3      	b.n	8017cb8 <_dtoa_r+0x828>
 8017cd0:	d081      	beq.n	8017bd6 <_dtoa_r+0x746>
 8017cd2:	4610      	mov	r0, r2
 8017cd4:	301c      	adds	r0, #28
 8017cd6:	e777      	b.n	8017bc8 <_dtoa_r+0x738>
 8017cd8:	f1b9 0f00 	cmp.w	r9, #0
 8017cdc:	dc37      	bgt.n	8017d4e <_dtoa_r+0x8be>
 8017cde:	9b07      	ldr	r3, [sp, #28]
 8017ce0:	2b02      	cmp	r3, #2
 8017ce2:	dd34      	ble.n	8017d4e <_dtoa_r+0x8be>
 8017ce4:	46ca      	mov	sl, r9
 8017ce6:	f1ba 0f00 	cmp.w	sl, #0
 8017cea:	d10d      	bne.n	8017d08 <_dtoa_r+0x878>
 8017cec:	4621      	mov	r1, r4
 8017cee:	4653      	mov	r3, sl
 8017cf0:	2205      	movs	r2, #5
 8017cf2:	4630      	mov	r0, r6
 8017cf4:	f000 faae 	bl	8018254 <__multadd>
 8017cf8:	4601      	mov	r1, r0
 8017cfa:	4604      	mov	r4, r0
 8017cfc:	4628      	mov	r0, r5
 8017cfe:	f000 fcc5 	bl	801868c <__mcmp>
 8017d02:	2800      	cmp	r0, #0
 8017d04:	f73f adde 	bgt.w	80178c4 <_dtoa_r+0x434>
 8017d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d0a:	f8dd 8000 	ldr.w	r8, [sp]
 8017d0e:	ea6f 0b03 	mvn.w	fp, r3
 8017d12:	f04f 0900 	mov.w	r9, #0
 8017d16:	4621      	mov	r1, r4
 8017d18:	4630      	mov	r0, r6
 8017d1a:	f000 fa79 	bl	8018210 <_Bfree>
 8017d1e:	2f00      	cmp	r7, #0
 8017d20:	f43f aea7 	beq.w	8017a72 <_dtoa_r+0x5e2>
 8017d24:	f1b9 0f00 	cmp.w	r9, #0
 8017d28:	d005      	beq.n	8017d36 <_dtoa_r+0x8a6>
 8017d2a:	45b9      	cmp	r9, r7
 8017d2c:	d003      	beq.n	8017d36 <_dtoa_r+0x8a6>
 8017d2e:	4649      	mov	r1, r9
 8017d30:	4630      	mov	r0, r6
 8017d32:	f000 fa6d 	bl	8018210 <_Bfree>
 8017d36:	4639      	mov	r1, r7
 8017d38:	4630      	mov	r0, r6
 8017d3a:	f000 fa69 	bl	8018210 <_Bfree>
 8017d3e:	e698      	b.n	8017a72 <_dtoa_r+0x5e2>
 8017d40:	2400      	movs	r4, #0
 8017d42:	4627      	mov	r7, r4
 8017d44:	e7e0      	b.n	8017d08 <_dtoa_r+0x878>
 8017d46:	46bb      	mov	fp, r7
 8017d48:	4604      	mov	r4, r0
 8017d4a:	4607      	mov	r7, r0
 8017d4c:	e5ba      	b.n	80178c4 <_dtoa_r+0x434>
 8017d4e:	9b08      	ldr	r3, [sp, #32]
 8017d50:	46ca      	mov	sl, r9
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	f000 8100 	beq.w	8017f58 <_dtoa_r+0xac8>
 8017d58:	f1b8 0f00 	cmp.w	r8, #0
 8017d5c:	dd05      	ble.n	8017d6a <_dtoa_r+0x8da>
 8017d5e:	4639      	mov	r1, r7
 8017d60:	4642      	mov	r2, r8
 8017d62:	4630      	mov	r0, r6
 8017d64:	f000 fc26 	bl	80185b4 <__lshift>
 8017d68:	4607      	mov	r7, r0
 8017d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d05d      	beq.n	8017e2c <_dtoa_r+0x99c>
 8017d70:	6879      	ldr	r1, [r7, #4]
 8017d72:	4630      	mov	r0, r6
 8017d74:	f000 fa0c 	bl	8018190 <_Balloc>
 8017d78:	4680      	mov	r8, r0
 8017d7a:	b928      	cbnz	r0, 8017d88 <_dtoa_r+0x8f8>
 8017d7c:	4b82      	ldr	r3, [pc, #520]	; (8017f88 <_dtoa_r+0xaf8>)
 8017d7e:	4602      	mov	r2, r0
 8017d80:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017d84:	f7ff bb9a 	b.w	80174bc <_dtoa_r+0x2c>
 8017d88:	693a      	ldr	r2, [r7, #16]
 8017d8a:	3202      	adds	r2, #2
 8017d8c:	0092      	lsls	r2, r2, #2
 8017d8e:	f107 010c 	add.w	r1, r7, #12
 8017d92:	300c      	adds	r0, #12
 8017d94:	f7fe fc19 	bl	80165ca <memcpy>
 8017d98:	2201      	movs	r2, #1
 8017d9a:	4641      	mov	r1, r8
 8017d9c:	4630      	mov	r0, r6
 8017d9e:	f000 fc09 	bl	80185b4 <__lshift>
 8017da2:	9b00      	ldr	r3, [sp, #0]
 8017da4:	3301      	adds	r3, #1
 8017da6:	9305      	str	r3, [sp, #20]
 8017da8:	9b00      	ldr	r3, [sp, #0]
 8017daa:	4453      	add	r3, sl
 8017dac:	9309      	str	r3, [sp, #36]	; 0x24
 8017dae:	9b02      	ldr	r3, [sp, #8]
 8017db0:	f003 0301 	and.w	r3, r3, #1
 8017db4:	46b9      	mov	r9, r7
 8017db6:	9308      	str	r3, [sp, #32]
 8017db8:	4607      	mov	r7, r0
 8017dba:	9b05      	ldr	r3, [sp, #20]
 8017dbc:	4621      	mov	r1, r4
 8017dbe:	3b01      	subs	r3, #1
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	9302      	str	r3, [sp, #8]
 8017dc4:	f7ff fad6 	bl	8017374 <quorem>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	3330      	adds	r3, #48	; 0x30
 8017dcc:	9006      	str	r0, [sp, #24]
 8017dce:	4649      	mov	r1, r9
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8017dd4:	f000 fc5a 	bl	801868c <__mcmp>
 8017dd8:	463a      	mov	r2, r7
 8017dda:	4682      	mov	sl, r0
 8017ddc:	4621      	mov	r1, r4
 8017dde:	4630      	mov	r0, r6
 8017de0:	f000 fc70 	bl	80186c4 <__mdiff>
 8017de4:	68c2      	ldr	r2, [r0, #12]
 8017de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017de8:	4680      	mov	r8, r0
 8017dea:	bb0a      	cbnz	r2, 8017e30 <_dtoa_r+0x9a0>
 8017dec:	4601      	mov	r1, r0
 8017dee:	4628      	mov	r0, r5
 8017df0:	f000 fc4c 	bl	801868c <__mcmp>
 8017df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017df6:	4602      	mov	r2, r0
 8017df8:	4641      	mov	r1, r8
 8017dfa:	4630      	mov	r0, r6
 8017dfc:	920e      	str	r2, [sp, #56]	; 0x38
 8017dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8017e00:	f000 fa06 	bl	8018210 <_Bfree>
 8017e04:	9b07      	ldr	r3, [sp, #28]
 8017e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017e08:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017e0c:	ea43 0102 	orr.w	r1, r3, r2
 8017e10:	9b08      	ldr	r3, [sp, #32]
 8017e12:	430b      	orrs	r3, r1
 8017e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e16:	d10d      	bne.n	8017e34 <_dtoa_r+0x9a4>
 8017e18:	2b39      	cmp	r3, #57	; 0x39
 8017e1a:	d029      	beq.n	8017e70 <_dtoa_r+0x9e0>
 8017e1c:	f1ba 0f00 	cmp.w	sl, #0
 8017e20:	dd01      	ble.n	8017e26 <_dtoa_r+0x996>
 8017e22:	9b06      	ldr	r3, [sp, #24]
 8017e24:	3331      	adds	r3, #49	; 0x31
 8017e26:	9a02      	ldr	r2, [sp, #8]
 8017e28:	7013      	strb	r3, [r2, #0]
 8017e2a:	e774      	b.n	8017d16 <_dtoa_r+0x886>
 8017e2c:	4638      	mov	r0, r7
 8017e2e:	e7b8      	b.n	8017da2 <_dtoa_r+0x912>
 8017e30:	2201      	movs	r2, #1
 8017e32:	e7e1      	b.n	8017df8 <_dtoa_r+0x968>
 8017e34:	f1ba 0f00 	cmp.w	sl, #0
 8017e38:	db06      	blt.n	8017e48 <_dtoa_r+0x9b8>
 8017e3a:	9907      	ldr	r1, [sp, #28]
 8017e3c:	ea41 0a0a 	orr.w	sl, r1, sl
 8017e40:	9908      	ldr	r1, [sp, #32]
 8017e42:	ea5a 0101 	orrs.w	r1, sl, r1
 8017e46:	d120      	bne.n	8017e8a <_dtoa_r+0x9fa>
 8017e48:	2a00      	cmp	r2, #0
 8017e4a:	ddec      	ble.n	8017e26 <_dtoa_r+0x996>
 8017e4c:	4629      	mov	r1, r5
 8017e4e:	2201      	movs	r2, #1
 8017e50:	4630      	mov	r0, r6
 8017e52:	9305      	str	r3, [sp, #20]
 8017e54:	f000 fbae 	bl	80185b4 <__lshift>
 8017e58:	4621      	mov	r1, r4
 8017e5a:	4605      	mov	r5, r0
 8017e5c:	f000 fc16 	bl	801868c <__mcmp>
 8017e60:	2800      	cmp	r0, #0
 8017e62:	9b05      	ldr	r3, [sp, #20]
 8017e64:	dc02      	bgt.n	8017e6c <_dtoa_r+0x9dc>
 8017e66:	d1de      	bne.n	8017e26 <_dtoa_r+0x996>
 8017e68:	07da      	lsls	r2, r3, #31
 8017e6a:	d5dc      	bpl.n	8017e26 <_dtoa_r+0x996>
 8017e6c:	2b39      	cmp	r3, #57	; 0x39
 8017e6e:	d1d8      	bne.n	8017e22 <_dtoa_r+0x992>
 8017e70:	9a02      	ldr	r2, [sp, #8]
 8017e72:	2339      	movs	r3, #57	; 0x39
 8017e74:	7013      	strb	r3, [r2, #0]
 8017e76:	4643      	mov	r3, r8
 8017e78:	4698      	mov	r8, r3
 8017e7a:	3b01      	subs	r3, #1
 8017e7c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8017e80:	2a39      	cmp	r2, #57	; 0x39
 8017e82:	d051      	beq.n	8017f28 <_dtoa_r+0xa98>
 8017e84:	3201      	adds	r2, #1
 8017e86:	701a      	strb	r2, [r3, #0]
 8017e88:	e745      	b.n	8017d16 <_dtoa_r+0x886>
 8017e8a:	2a00      	cmp	r2, #0
 8017e8c:	dd03      	ble.n	8017e96 <_dtoa_r+0xa06>
 8017e8e:	2b39      	cmp	r3, #57	; 0x39
 8017e90:	d0ee      	beq.n	8017e70 <_dtoa_r+0x9e0>
 8017e92:	3301      	adds	r3, #1
 8017e94:	e7c7      	b.n	8017e26 <_dtoa_r+0x996>
 8017e96:	9a05      	ldr	r2, [sp, #20]
 8017e98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e9a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017e9e:	428a      	cmp	r2, r1
 8017ea0:	d02b      	beq.n	8017efa <_dtoa_r+0xa6a>
 8017ea2:	4629      	mov	r1, r5
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	220a      	movs	r2, #10
 8017ea8:	4630      	mov	r0, r6
 8017eaa:	f000 f9d3 	bl	8018254 <__multadd>
 8017eae:	45b9      	cmp	r9, r7
 8017eb0:	4605      	mov	r5, r0
 8017eb2:	f04f 0300 	mov.w	r3, #0
 8017eb6:	f04f 020a 	mov.w	r2, #10
 8017eba:	4649      	mov	r1, r9
 8017ebc:	4630      	mov	r0, r6
 8017ebe:	d107      	bne.n	8017ed0 <_dtoa_r+0xa40>
 8017ec0:	f000 f9c8 	bl	8018254 <__multadd>
 8017ec4:	4681      	mov	r9, r0
 8017ec6:	4607      	mov	r7, r0
 8017ec8:	9b05      	ldr	r3, [sp, #20]
 8017eca:	3301      	adds	r3, #1
 8017ecc:	9305      	str	r3, [sp, #20]
 8017ece:	e774      	b.n	8017dba <_dtoa_r+0x92a>
 8017ed0:	f000 f9c0 	bl	8018254 <__multadd>
 8017ed4:	4639      	mov	r1, r7
 8017ed6:	4681      	mov	r9, r0
 8017ed8:	2300      	movs	r3, #0
 8017eda:	220a      	movs	r2, #10
 8017edc:	4630      	mov	r0, r6
 8017ede:	f000 f9b9 	bl	8018254 <__multadd>
 8017ee2:	4607      	mov	r7, r0
 8017ee4:	e7f0      	b.n	8017ec8 <_dtoa_r+0xa38>
 8017ee6:	f1ba 0f00 	cmp.w	sl, #0
 8017eea:	9a00      	ldr	r2, [sp, #0]
 8017eec:	bfcc      	ite	gt
 8017eee:	46d0      	movgt	r8, sl
 8017ef0:	f04f 0801 	movle.w	r8, #1
 8017ef4:	4490      	add	r8, r2
 8017ef6:	f04f 0900 	mov.w	r9, #0
 8017efa:	4629      	mov	r1, r5
 8017efc:	2201      	movs	r2, #1
 8017efe:	4630      	mov	r0, r6
 8017f00:	9302      	str	r3, [sp, #8]
 8017f02:	f000 fb57 	bl	80185b4 <__lshift>
 8017f06:	4621      	mov	r1, r4
 8017f08:	4605      	mov	r5, r0
 8017f0a:	f000 fbbf 	bl	801868c <__mcmp>
 8017f0e:	2800      	cmp	r0, #0
 8017f10:	dcb1      	bgt.n	8017e76 <_dtoa_r+0x9e6>
 8017f12:	d102      	bne.n	8017f1a <_dtoa_r+0xa8a>
 8017f14:	9b02      	ldr	r3, [sp, #8]
 8017f16:	07db      	lsls	r3, r3, #31
 8017f18:	d4ad      	bmi.n	8017e76 <_dtoa_r+0x9e6>
 8017f1a:	4643      	mov	r3, r8
 8017f1c:	4698      	mov	r8, r3
 8017f1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017f22:	2a30      	cmp	r2, #48	; 0x30
 8017f24:	d0fa      	beq.n	8017f1c <_dtoa_r+0xa8c>
 8017f26:	e6f6      	b.n	8017d16 <_dtoa_r+0x886>
 8017f28:	9a00      	ldr	r2, [sp, #0]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d1a4      	bne.n	8017e78 <_dtoa_r+0x9e8>
 8017f2e:	f10b 0b01 	add.w	fp, fp, #1
 8017f32:	2331      	movs	r3, #49	; 0x31
 8017f34:	e778      	b.n	8017e28 <_dtoa_r+0x998>
 8017f36:	4b15      	ldr	r3, [pc, #84]	; (8017f8c <_dtoa_r+0xafc>)
 8017f38:	f7ff bb12 	b.w	8017560 <_dtoa_r+0xd0>
 8017f3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	f47f aaee 	bne.w	8017520 <_dtoa_r+0x90>
 8017f44:	4b12      	ldr	r3, [pc, #72]	; (8017f90 <_dtoa_r+0xb00>)
 8017f46:	f7ff bb0b 	b.w	8017560 <_dtoa_r+0xd0>
 8017f4a:	f1ba 0f00 	cmp.w	sl, #0
 8017f4e:	dc03      	bgt.n	8017f58 <_dtoa_r+0xac8>
 8017f50:	9b07      	ldr	r3, [sp, #28]
 8017f52:	2b02      	cmp	r3, #2
 8017f54:	f73f aec7 	bgt.w	8017ce6 <_dtoa_r+0x856>
 8017f58:	f8dd 8000 	ldr.w	r8, [sp]
 8017f5c:	4621      	mov	r1, r4
 8017f5e:	4628      	mov	r0, r5
 8017f60:	f7ff fa08 	bl	8017374 <quorem>
 8017f64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017f68:	f808 3b01 	strb.w	r3, [r8], #1
 8017f6c:	9a00      	ldr	r2, [sp, #0]
 8017f6e:	eba8 0202 	sub.w	r2, r8, r2
 8017f72:	4592      	cmp	sl, r2
 8017f74:	ddb7      	ble.n	8017ee6 <_dtoa_r+0xa56>
 8017f76:	4629      	mov	r1, r5
 8017f78:	2300      	movs	r3, #0
 8017f7a:	220a      	movs	r2, #10
 8017f7c:	4630      	mov	r0, r6
 8017f7e:	f000 f969 	bl	8018254 <__multadd>
 8017f82:	4605      	mov	r5, r0
 8017f84:	e7ea      	b.n	8017f5c <_dtoa_r+0xacc>
 8017f86:	bf00      	nop
 8017f88:	08024a81 	.word	0x08024a81
 8017f8c:	0802483c 	.word	0x0802483c
 8017f90:	08024a15 	.word	0x08024a15

08017f94 <__sflush_r>:
 8017f94:	898a      	ldrh	r2, [r1, #12]
 8017f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f9a:	4605      	mov	r5, r0
 8017f9c:	0710      	lsls	r0, r2, #28
 8017f9e:	460c      	mov	r4, r1
 8017fa0:	d458      	bmi.n	8018054 <__sflush_r+0xc0>
 8017fa2:	684b      	ldr	r3, [r1, #4]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	dc05      	bgt.n	8017fb4 <__sflush_r+0x20>
 8017fa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	dc02      	bgt.n	8017fb4 <__sflush_r+0x20>
 8017fae:	2000      	movs	r0, #0
 8017fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017fb6:	2e00      	cmp	r6, #0
 8017fb8:	d0f9      	beq.n	8017fae <__sflush_r+0x1a>
 8017fba:	2300      	movs	r3, #0
 8017fbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017fc0:	682f      	ldr	r7, [r5, #0]
 8017fc2:	602b      	str	r3, [r5, #0]
 8017fc4:	d032      	beq.n	801802c <__sflush_r+0x98>
 8017fc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017fc8:	89a3      	ldrh	r3, [r4, #12]
 8017fca:	075a      	lsls	r2, r3, #29
 8017fcc:	d505      	bpl.n	8017fda <__sflush_r+0x46>
 8017fce:	6863      	ldr	r3, [r4, #4]
 8017fd0:	1ac0      	subs	r0, r0, r3
 8017fd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017fd4:	b10b      	cbz	r3, 8017fda <__sflush_r+0x46>
 8017fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017fd8:	1ac0      	subs	r0, r0, r3
 8017fda:	2300      	movs	r3, #0
 8017fdc:	4602      	mov	r2, r0
 8017fde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017fe0:	6a21      	ldr	r1, [r4, #32]
 8017fe2:	4628      	mov	r0, r5
 8017fe4:	47b0      	blx	r6
 8017fe6:	1c43      	adds	r3, r0, #1
 8017fe8:	89a3      	ldrh	r3, [r4, #12]
 8017fea:	d106      	bne.n	8017ffa <__sflush_r+0x66>
 8017fec:	6829      	ldr	r1, [r5, #0]
 8017fee:	291d      	cmp	r1, #29
 8017ff0:	d82c      	bhi.n	801804c <__sflush_r+0xb8>
 8017ff2:	4a2a      	ldr	r2, [pc, #168]	; (801809c <__sflush_r+0x108>)
 8017ff4:	40ca      	lsrs	r2, r1
 8017ff6:	07d6      	lsls	r6, r2, #31
 8017ff8:	d528      	bpl.n	801804c <__sflush_r+0xb8>
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	6062      	str	r2, [r4, #4]
 8017ffe:	04d9      	lsls	r1, r3, #19
 8018000:	6922      	ldr	r2, [r4, #16]
 8018002:	6022      	str	r2, [r4, #0]
 8018004:	d504      	bpl.n	8018010 <__sflush_r+0x7c>
 8018006:	1c42      	adds	r2, r0, #1
 8018008:	d101      	bne.n	801800e <__sflush_r+0x7a>
 801800a:	682b      	ldr	r3, [r5, #0]
 801800c:	b903      	cbnz	r3, 8018010 <__sflush_r+0x7c>
 801800e:	6560      	str	r0, [r4, #84]	; 0x54
 8018010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018012:	602f      	str	r7, [r5, #0]
 8018014:	2900      	cmp	r1, #0
 8018016:	d0ca      	beq.n	8017fae <__sflush_r+0x1a>
 8018018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801801c:	4299      	cmp	r1, r3
 801801e:	d002      	beq.n	8018026 <__sflush_r+0x92>
 8018020:	4628      	mov	r0, r5
 8018022:	f000 fc43 	bl	80188ac <_free_r>
 8018026:	2000      	movs	r0, #0
 8018028:	6360      	str	r0, [r4, #52]	; 0x34
 801802a:	e7c1      	b.n	8017fb0 <__sflush_r+0x1c>
 801802c:	6a21      	ldr	r1, [r4, #32]
 801802e:	2301      	movs	r3, #1
 8018030:	4628      	mov	r0, r5
 8018032:	47b0      	blx	r6
 8018034:	1c41      	adds	r1, r0, #1
 8018036:	d1c7      	bne.n	8017fc8 <__sflush_r+0x34>
 8018038:	682b      	ldr	r3, [r5, #0]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d0c4      	beq.n	8017fc8 <__sflush_r+0x34>
 801803e:	2b1d      	cmp	r3, #29
 8018040:	d001      	beq.n	8018046 <__sflush_r+0xb2>
 8018042:	2b16      	cmp	r3, #22
 8018044:	d101      	bne.n	801804a <__sflush_r+0xb6>
 8018046:	602f      	str	r7, [r5, #0]
 8018048:	e7b1      	b.n	8017fae <__sflush_r+0x1a>
 801804a:	89a3      	ldrh	r3, [r4, #12]
 801804c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018050:	81a3      	strh	r3, [r4, #12]
 8018052:	e7ad      	b.n	8017fb0 <__sflush_r+0x1c>
 8018054:	690f      	ldr	r7, [r1, #16]
 8018056:	2f00      	cmp	r7, #0
 8018058:	d0a9      	beq.n	8017fae <__sflush_r+0x1a>
 801805a:	0793      	lsls	r3, r2, #30
 801805c:	680e      	ldr	r6, [r1, #0]
 801805e:	bf08      	it	eq
 8018060:	694b      	ldreq	r3, [r1, #20]
 8018062:	600f      	str	r7, [r1, #0]
 8018064:	bf18      	it	ne
 8018066:	2300      	movne	r3, #0
 8018068:	eba6 0807 	sub.w	r8, r6, r7
 801806c:	608b      	str	r3, [r1, #8]
 801806e:	f1b8 0f00 	cmp.w	r8, #0
 8018072:	dd9c      	ble.n	8017fae <__sflush_r+0x1a>
 8018074:	6a21      	ldr	r1, [r4, #32]
 8018076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018078:	4643      	mov	r3, r8
 801807a:	463a      	mov	r2, r7
 801807c:	4628      	mov	r0, r5
 801807e:	47b0      	blx	r6
 8018080:	2800      	cmp	r0, #0
 8018082:	dc06      	bgt.n	8018092 <__sflush_r+0xfe>
 8018084:	89a3      	ldrh	r3, [r4, #12]
 8018086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801808a:	81a3      	strh	r3, [r4, #12]
 801808c:	f04f 30ff 	mov.w	r0, #4294967295
 8018090:	e78e      	b.n	8017fb0 <__sflush_r+0x1c>
 8018092:	4407      	add	r7, r0
 8018094:	eba8 0800 	sub.w	r8, r8, r0
 8018098:	e7e9      	b.n	801806e <__sflush_r+0xda>
 801809a:	bf00      	nop
 801809c:	20400001 	.word	0x20400001

080180a0 <_fflush_r>:
 80180a0:	b538      	push	{r3, r4, r5, lr}
 80180a2:	690b      	ldr	r3, [r1, #16]
 80180a4:	4605      	mov	r5, r0
 80180a6:	460c      	mov	r4, r1
 80180a8:	b913      	cbnz	r3, 80180b0 <_fflush_r+0x10>
 80180aa:	2500      	movs	r5, #0
 80180ac:	4628      	mov	r0, r5
 80180ae:	bd38      	pop	{r3, r4, r5, pc}
 80180b0:	b118      	cbz	r0, 80180ba <_fflush_r+0x1a>
 80180b2:	6983      	ldr	r3, [r0, #24]
 80180b4:	b90b      	cbnz	r3, 80180ba <_fflush_r+0x1a>
 80180b6:	f7fe f9c3 	bl	8016440 <__sinit>
 80180ba:	4b14      	ldr	r3, [pc, #80]	; (801810c <_fflush_r+0x6c>)
 80180bc:	429c      	cmp	r4, r3
 80180be:	d11b      	bne.n	80180f8 <_fflush_r+0x58>
 80180c0:	686c      	ldr	r4, [r5, #4]
 80180c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d0ef      	beq.n	80180aa <_fflush_r+0xa>
 80180ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80180cc:	07d0      	lsls	r0, r2, #31
 80180ce:	d404      	bmi.n	80180da <_fflush_r+0x3a>
 80180d0:	0599      	lsls	r1, r3, #22
 80180d2:	d402      	bmi.n	80180da <_fflush_r+0x3a>
 80180d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180d6:	f7fe fa76 	bl	80165c6 <__retarget_lock_acquire_recursive>
 80180da:	4628      	mov	r0, r5
 80180dc:	4621      	mov	r1, r4
 80180de:	f7ff ff59 	bl	8017f94 <__sflush_r>
 80180e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80180e4:	07da      	lsls	r2, r3, #31
 80180e6:	4605      	mov	r5, r0
 80180e8:	d4e0      	bmi.n	80180ac <_fflush_r+0xc>
 80180ea:	89a3      	ldrh	r3, [r4, #12]
 80180ec:	059b      	lsls	r3, r3, #22
 80180ee:	d4dd      	bmi.n	80180ac <_fflush_r+0xc>
 80180f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180f2:	f7fe fa69 	bl	80165c8 <__retarget_lock_release_recursive>
 80180f6:	e7d9      	b.n	80180ac <_fflush_r+0xc>
 80180f8:	4b05      	ldr	r3, [pc, #20]	; (8018110 <_fflush_r+0x70>)
 80180fa:	429c      	cmp	r4, r3
 80180fc:	d101      	bne.n	8018102 <_fflush_r+0x62>
 80180fe:	68ac      	ldr	r4, [r5, #8]
 8018100:	e7df      	b.n	80180c2 <_fflush_r+0x22>
 8018102:	4b04      	ldr	r3, [pc, #16]	; (8018114 <_fflush_r+0x74>)
 8018104:	429c      	cmp	r4, r3
 8018106:	bf08      	it	eq
 8018108:	68ec      	ldreq	r4, [r5, #12]
 801810a:	e7da      	b.n	80180c2 <_fflush_r+0x22>
 801810c:	080247e8 	.word	0x080247e8
 8018110:	08024808 	.word	0x08024808
 8018114:	080247c8 	.word	0x080247c8

08018118 <fiprintf>:
 8018118:	b40e      	push	{r1, r2, r3}
 801811a:	b503      	push	{r0, r1, lr}
 801811c:	4601      	mov	r1, r0
 801811e:	ab03      	add	r3, sp, #12
 8018120:	4805      	ldr	r0, [pc, #20]	; (8018138 <fiprintf+0x20>)
 8018122:	f853 2b04 	ldr.w	r2, [r3], #4
 8018126:	6800      	ldr	r0, [r0, #0]
 8018128:	9301      	str	r3, [sp, #4]
 801812a:	f000 fd95 	bl	8018c58 <_vfiprintf_r>
 801812e:	b002      	add	sp, #8
 8018130:	f85d eb04 	ldr.w	lr, [sp], #4
 8018134:	b003      	add	sp, #12
 8018136:	4770      	bx	lr
 8018138:	24000260 	.word	0x24000260

0801813c <_localeconv_r>:
 801813c:	4800      	ldr	r0, [pc, #0]	; (8018140 <_localeconv_r+0x4>)
 801813e:	4770      	bx	lr
 8018140:	240003b4 	.word	0x240003b4

08018144 <_lseek_r>:
 8018144:	b538      	push	{r3, r4, r5, lr}
 8018146:	4d07      	ldr	r5, [pc, #28]	; (8018164 <_lseek_r+0x20>)
 8018148:	4604      	mov	r4, r0
 801814a:	4608      	mov	r0, r1
 801814c:	4611      	mov	r1, r2
 801814e:	2200      	movs	r2, #0
 8018150:	602a      	str	r2, [r5, #0]
 8018152:	461a      	mov	r2, r3
 8018154:	f7ea fba8 	bl	80028a8 <_lseek>
 8018158:	1c43      	adds	r3, r0, #1
 801815a:	d102      	bne.n	8018162 <_lseek_r+0x1e>
 801815c:	682b      	ldr	r3, [r5, #0]
 801815e:	b103      	cbz	r3, 8018162 <_lseek_r+0x1e>
 8018160:	6023      	str	r3, [r4, #0]
 8018162:	bd38      	pop	{r3, r4, r5, pc}
 8018164:	24006bec 	.word	0x24006bec

08018168 <malloc>:
 8018168:	4b02      	ldr	r3, [pc, #8]	; (8018174 <malloc+0xc>)
 801816a:	4601      	mov	r1, r0
 801816c:	6818      	ldr	r0, [r3, #0]
 801816e:	f7fe ba43 	b.w	80165f8 <_malloc_r>
 8018172:	bf00      	nop
 8018174:	24000260 	.word	0x24000260

08018178 <__malloc_lock>:
 8018178:	4801      	ldr	r0, [pc, #4]	; (8018180 <__malloc_lock+0x8>)
 801817a:	f7fe ba24 	b.w	80165c6 <__retarget_lock_acquire_recursive>
 801817e:	bf00      	nop
 8018180:	24006be4 	.word	0x24006be4

08018184 <__malloc_unlock>:
 8018184:	4801      	ldr	r0, [pc, #4]	; (801818c <__malloc_unlock+0x8>)
 8018186:	f7fe ba1f 	b.w	80165c8 <__retarget_lock_release_recursive>
 801818a:	bf00      	nop
 801818c:	24006be4 	.word	0x24006be4

08018190 <_Balloc>:
 8018190:	b570      	push	{r4, r5, r6, lr}
 8018192:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018194:	4604      	mov	r4, r0
 8018196:	460d      	mov	r5, r1
 8018198:	b976      	cbnz	r6, 80181b8 <_Balloc+0x28>
 801819a:	2010      	movs	r0, #16
 801819c:	f7ff ffe4 	bl	8018168 <malloc>
 80181a0:	4602      	mov	r2, r0
 80181a2:	6260      	str	r0, [r4, #36]	; 0x24
 80181a4:	b920      	cbnz	r0, 80181b0 <_Balloc+0x20>
 80181a6:	4b18      	ldr	r3, [pc, #96]	; (8018208 <_Balloc+0x78>)
 80181a8:	4818      	ldr	r0, [pc, #96]	; (801820c <_Balloc+0x7c>)
 80181aa:	2166      	movs	r1, #102	; 0x66
 80181ac:	f7ff f8b4 	bl	8017318 <__assert_func>
 80181b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80181b4:	6006      	str	r6, [r0, #0]
 80181b6:	60c6      	str	r6, [r0, #12]
 80181b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80181ba:	68f3      	ldr	r3, [r6, #12]
 80181bc:	b183      	cbz	r3, 80181e0 <_Balloc+0x50>
 80181be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181c0:	68db      	ldr	r3, [r3, #12]
 80181c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80181c6:	b9b8      	cbnz	r0, 80181f8 <_Balloc+0x68>
 80181c8:	2101      	movs	r1, #1
 80181ca:	fa01 f605 	lsl.w	r6, r1, r5
 80181ce:	1d72      	adds	r2, r6, #5
 80181d0:	0092      	lsls	r2, r2, #2
 80181d2:	4620      	mov	r0, r4
 80181d4:	f000 fb5a 	bl	801888c <_calloc_r>
 80181d8:	b160      	cbz	r0, 80181f4 <_Balloc+0x64>
 80181da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80181de:	e00e      	b.n	80181fe <_Balloc+0x6e>
 80181e0:	2221      	movs	r2, #33	; 0x21
 80181e2:	2104      	movs	r1, #4
 80181e4:	4620      	mov	r0, r4
 80181e6:	f000 fb51 	bl	801888c <_calloc_r>
 80181ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181ec:	60f0      	str	r0, [r6, #12]
 80181ee:	68db      	ldr	r3, [r3, #12]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d1e4      	bne.n	80181be <_Balloc+0x2e>
 80181f4:	2000      	movs	r0, #0
 80181f6:	bd70      	pop	{r4, r5, r6, pc}
 80181f8:	6802      	ldr	r2, [r0, #0]
 80181fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80181fe:	2300      	movs	r3, #0
 8018200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018204:	e7f7      	b.n	80181f6 <_Balloc+0x66>
 8018206:	bf00      	nop
 8018208:	08024860 	.word	0x08024860
 801820c:	08024a92 	.word	0x08024a92

08018210 <_Bfree>:
 8018210:	b570      	push	{r4, r5, r6, lr}
 8018212:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018214:	4605      	mov	r5, r0
 8018216:	460c      	mov	r4, r1
 8018218:	b976      	cbnz	r6, 8018238 <_Bfree+0x28>
 801821a:	2010      	movs	r0, #16
 801821c:	f7ff ffa4 	bl	8018168 <malloc>
 8018220:	4602      	mov	r2, r0
 8018222:	6268      	str	r0, [r5, #36]	; 0x24
 8018224:	b920      	cbnz	r0, 8018230 <_Bfree+0x20>
 8018226:	4b09      	ldr	r3, [pc, #36]	; (801824c <_Bfree+0x3c>)
 8018228:	4809      	ldr	r0, [pc, #36]	; (8018250 <_Bfree+0x40>)
 801822a:	218a      	movs	r1, #138	; 0x8a
 801822c:	f7ff f874 	bl	8017318 <__assert_func>
 8018230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018234:	6006      	str	r6, [r0, #0]
 8018236:	60c6      	str	r6, [r0, #12]
 8018238:	b13c      	cbz	r4, 801824a <_Bfree+0x3a>
 801823a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801823c:	6862      	ldr	r2, [r4, #4]
 801823e:	68db      	ldr	r3, [r3, #12]
 8018240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018244:	6021      	str	r1, [r4, #0]
 8018246:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801824a:	bd70      	pop	{r4, r5, r6, pc}
 801824c:	08024860 	.word	0x08024860
 8018250:	08024a92 	.word	0x08024a92

08018254 <__multadd>:
 8018254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018258:	690e      	ldr	r6, [r1, #16]
 801825a:	4607      	mov	r7, r0
 801825c:	4698      	mov	r8, r3
 801825e:	460c      	mov	r4, r1
 8018260:	f101 0014 	add.w	r0, r1, #20
 8018264:	2300      	movs	r3, #0
 8018266:	6805      	ldr	r5, [r0, #0]
 8018268:	b2a9      	uxth	r1, r5
 801826a:	fb02 8101 	mla	r1, r2, r1, r8
 801826e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018272:	0c2d      	lsrs	r5, r5, #16
 8018274:	fb02 c505 	mla	r5, r2, r5, ip
 8018278:	b289      	uxth	r1, r1
 801827a:	3301      	adds	r3, #1
 801827c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018280:	429e      	cmp	r6, r3
 8018282:	f840 1b04 	str.w	r1, [r0], #4
 8018286:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801828a:	dcec      	bgt.n	8018266 <__multadd+0x12>
 801828c:	f1b8 0f00 	cmp.w	r8, #0
 8018290:	d022      	beq.n	80182d8 <__multadd+0x84>
 8018292:	68a3      	ldr	r3, [r4, #8]
 8018294:	42b3      	cmp	r3, r6
 8018296:	dc19      	bgt.n	80182cc <__multadd+0x78>
 8018298:	6861      	ldr	r1, [r4, #4]
 801829a:	4638      	mov	r0, r7
 801829c:	3101      	adds	r1, #1
 801829e:	f7ff ff77 	bl	8018190 <_Balloc>
 80182a2:	4605      	mov	r5, r0
 80182a4:	b928      	cbnz	r0, 80182b2 <__multadd+0x5e>
 80182a6:	4602      	mov	r2, r0
 80182a8:	4b0d      	ldr	r3, [pc, #52]	; (80182e0 <__multadd+0x8c>)
 80182aa:	480e      	ldr	r0, [pc, #56]	; (80182e4 <__multadd+0x90>)
 80182ac:	21b5      	movs	r1, #181	; 0xb5
 80182ae:	f7ff f833 	bl	8017318 <__assert_func>
 80182b2:	6922      	ldr	r2, [r4, #16]
 80182b4:	3202      	adds	r2, #2
 80182b6:	f104 010c 	add.w	r1, r4, #12
 80182ba:	0092      	lsls	r2, r2, #2
 80182bc:	300c      	adds	r0, #12
 80182be:	f7fe f984 	bl	80165ca <memcpy>
 80182c2:	4621      	mov	r1, r4
 80182c4:	4638      	mov	r0, r7
 80182c6:	f7ff ffa3 	bl	8018210 <_Bfree>
 80182ca:	462c      	mov	r4, r5
 80182cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80182d0:	3601      	adds	r6, #1
 80182d2:	f8c3 8014 	str.w	r8, [r3, #20]
 80182d6:	6126      	str	r6, [r4, #16]
 80182d8:	4620      	mov	r0, r4
 80182da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182de:	bf00      	nop
 80182e0:	08024a81 	.word	0x08024a81
 80182e4:	08024a92 	.word	0x08024a92

080182e8 <__hi0bits>:
 80182e8:	0c03      	lsrs	r3, r0, #16
 80182ea:	041b      	lsls	r3, r3, #16
 80182ec:	b9d3      	cbnz	r3, 8018324 <__hi0bits+0x3c>
 80182ee:	0400      	lsls	r0, r0, #16
 80182f0:	2310      	movs	r3, #16
 80182f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80182f6:	bf04      	itt	eq
 80182f8:	0200      	lsleq	r0, r0, #8
 80182fa:	3308      	addeq	r3, #8
 80182fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018300:	bf04      	itt	eq
 8018302:	0100      	lsleq	r0, r0, #4
 8018304:	3304      	addeq	r3, #4
 8018306:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801830a:	bf04      	itt	eq
 801830c:	0080      	lsleq	r0, r0, #2
 801830e:	3302      	addeq	r3, #2
 8018310:	2800      	cmp	r0, #0
 8018312:	db05      	blt.n	8018320 <__hi0bits+0x38>
 8018314:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018318:	f103 0301 	add.w	r3, r3, #1
 801831c:	bf08      	it	eq
 801831e:	2320      	moveq	r3, #32
 8018320:	4618      	mov	r0, r3
 8018322:	4770      	bx	lr
 8018324:	2300      	movs	r3, #0
 8018326:	e7e4      	b.n	80182f2 <__hi0bits+0xa>

08018328 <__lo0bits>:
 8018328:	6803      	ldr	r3, [r0, #0]
 801832a:	f013 0207 	ands.w	r2, r3, #7
 801832e:	4601      	mov	r1, r0
 8018330:	d00b      	beq.n	801834a <__lo0bits+0x22>
 8018332:	07da      	lsls	r2, r3, #31
 8018334:	d424      	bmi.n	8018380 <__lo0bits+0x58>
 8018336:	0798      	lsls	r0, r3, #30
 8018338:	bf49      	itett	mi
 801833a:	085b      	lsrmi	r3, r3, #1
 801833c:	089b      	lsrpl	r3, r3, #2
 801833e:	2001      	movmi	r0, #1
 8018340:	600b      	strmi	r3, [r1, #0]
 8018342:	bf5c      	itt	pl
 8018344:	600b      	strpl	r3, [r1, #0]
 8018346:	2002      	movpl	r0, #2
 8018348:	4770      	bx	lr
 801834a:	b298      	uxth	r0, r3
 801834c:	b9b0      	cbnz	r0, 801837c <__lo0bits+0x54>
 801834e:	0c1b      	lsrs	r3, r3, #16
 8018350:	2010      	movs	r0, #16
 8018352:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018356:	bf04      	itt	eq
 8018358:	0a1b      	lsreq	r3, r3, #8
 801835a:	3008      	addeq	r0, #8
 801835c:	071a      	lsls	r2, r3, #28
 801835e:	bf04      	itt	eq
 8018360:	091b      	lsreq	r3, r3, #4
 8018362:	3004      	addeq	r0, #4
 8018364:	079a      	lsls	r2, r3, #30
 8018366:	bf04      	itt	eq
 8018368:	089b      	lsreq	r3, r3, #2
 801836a:	3002      	addeq	r0, #2
 801836c:	07da      	lsls	r2, r3, #31
 801836e:	d403      	bmi.n	8018378 <__lo0bits+0x50>
 8018370:	085b      	lsrs	r3, r3, #1
 8018372:	f100 0001 	add.w	r0, r0, #1
 8018376:	d005      	beq.n	8018384 <__lo0bits+0x5c>
 8018378:	600b      	str	r3, [r1, #0]
 801837a:	4770      	bx	lr
 801837c:	4610      	mov	r0, r2
 801837e:	e7e8      	b.n	8018352 <__lo0bits+0x2a>
 8018380:	2000      	movs	r0, #0
 8018382:	4770      	bx	lr
 8018384:	2020      	movs	r0, #32
 8018386:	4770      	bx	lr

08018388 <__i2b>:
 8018388:	b510      	push	{r4, lr}
 801838a:	460c      	mov	r4, r1
 801838c:	2101      	movs	r1, #1
 801838e:	f7ff feff 	bl	8018190 <_Balloc>
 8018392:	4602      	mov	r2, r0
 8018394:	b928      	cbnz	r0, 80183a2 <__i2b+0x1a>
 8018396:	4b05      	ldr	r3, [pc, #20]	; (80183ac <__i2b+0x24>)
 8018398:	4805      	ldr	r0, [pc, #20]	; (80183b0 <__i2b+0x28>)
 801839a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801839e:	f7fe ffbb 	bl	8017318 <__assert_func>
 80183a2:	2301      	movs	r3, #1
 80183a4:	6144      	str	r4, [r0, #20]
 80183a6:	6103      	str	r3, [r0, #16]
 80183a8:	bd10      	pop	{r4, pc}
 80183aa:	bf00      	nop
 80183ac:	08024a81 	.word	0x08024a81
 80183b0:	08024a92 	.word	0x08024a92

080183b4 <__multiply>:
 80183b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183b8:	4614      	mov	r4, r2
 80183ba:	690a      	ldr	r2, [r1, #16]
 80183bc:	6923      	ldr	r3, [r4, #16]
 80183be:	429a      	cmp	r2, r3
 80183c0:	bfb8      	it	lt
 80183c2:	460b      	movlt	r3, r1
 80183c4:	460d      	mov	r5, r1
 80183c6:	bfbc      	itt	lt
 80183c8:	4625      	movlt	r5, r4
 80183ca:	461c      	movlt	r4, r3
 80183cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80183d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80183d4:	68ab      	ldr	r3, [r5, #8]
 80183d6:	6869      	ldr	r1, [r5, #4]
 80183d8:	eb0a 0709 	add.w	r7, sl, r9
 80183dc:	42bb      	cmp	r3, r7
 80183de:	b085      	sub	sp, #20
 80183e0:	bfb8      	it	lt
 80183e2:	3101      	addlt	r1, #1
 80183e4:	f7ff fed4 	bl	8018190 <_Balloc>
 80183e8:	b930      	cbnz	r0, 80183f8 <__multiply+0x44>
 80183ea:	4602      	mov	r2, r0
 80183ec:	4b42      	ldr	r3, [pc, #264]	; (80184f8 <__multiply+0x144>)
 80183ee:	4843      	ldr	r0, [pc, #268]	; (80184fc <__multiply+0x148>)
 80183f0:	f240 115d 	movw	r1, #349	; 0x15d
 80183f4:	f7fe ff90 	bl	8017318 <__assert_func>
 80183f8:	f100 0614 	add.w	r6, r0, #20
 80183fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018400:	4633      	mov	r3, r6
 8018402:	2200      	movs	r2, #0
 8018404:	4543      	cmp	r3, r8
 8018406:	d31e      	bcc.n	8018446 <__multiply+0x92>
 8018408:	f105 0c14 	add.w	ip, r5, #20
 801840c:	f104 0314 	add.w	r3, r4, #20
 8018410:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018414:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018418:	9202      	str	r2, [sp, #8]
 801841a:	ebac 0205 	sub.w	r2, ip, r5
 801841e:	3a15      	subs	r2, #21
 8018420:	f022 0203 	bic.w	r2, r2, #3
 8018424:	3204      	adds	r2, #4
 8018426:	f105 0115 	add.w	r1, r5, #21
 801842a:	458c      	cmp	ip, r1
 801842c:	bf38      	it	cc
 801842e:	2204      	movcc	r2, #4
 8018430:	9201      	str	r2, [sp, #4]
 8018432:	9a02      	ldr	r2, [sp, #8]
 8018434:	9303      	str	r3, [sp, #12]
 8018436:	429a      	cmp	r2, r3
 8018438:	d808      	bhi.n	801844c <__multiply+0x98>
 801843a:	2f00      	cmp	r7, #0
 801843c:	dc55      	bgt.n	80184ea <__multiply+0x136>
 801843e:	6107      	str	r7, [r0, #16]
 8018440:	b005      	add	sp, #20
 8018442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018446:	f843 2b04 	str.w	r2, [r3], #4
 801844a:	e7db      	b.n	8018404 <__multiply+0x50>
 801844c:	f8b3 a000 	ldrh.w	sl, [r3]
 8018450:	f1ba 0f00 	cmp.w	sl, #0
 8018454:	d020      	beq.n	8018498 <__multiply+0xe4>
 8018456:	f105 0e14 	add.w	lr, r5, #20
 801845a:	46b1      	mov	r9, r6
 801845c:	2200      	movs	r2, #0
 801845e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018462:	f8d9 b000 	ldr.w	fp, [r9]
 8018466:	b2a1      	uxth	r1, r4
 8018468:	fa1f fb8b 	uxth.w	fp, fp
 801846c:	fb0a b101 	mla	r1, sl, r1, fp
 8018470:	4411      	add	r1, r2
 8018472:	f8d9 2000 	ldr.w	r2, [r9]
 8018476:	0c24      	lsrs	r4, r4, #16
 8018478:	0c12      	lsrs	r2, r2, #16
 801847a:	fb0a 2404 	mla	r4, sl, r4, r2
 801847e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018482:	b289      	uxth	r1, r1
 8018484:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018488:	45f4      	cmp	ip, lr
 801848a:	f849 1b04 	str.w	r1, [r9], #4
 801848e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018492:	d8e4      	bhi.n	801845e <__multiply+0xaa>
 8018494:	9901      	ldr	r1, [sp, #4]
 8018496:	5072      	str	r2, [r6, r1]
 8018498:	9a03      	ldr	r2, [sp, #12]
 801849a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801849e:	3304      	adds	r3, #4
 80184a0:	f1b9 0f00 	cmp.w	r9, #0
 80184a4:	d01f      	beq.n	80184e6 <__multiply+0x132>
 80184a6:	6834      	ldr	r4, [r6, #0]
 80184a8:	f105 0114 	add.w	r1, r5, #20
 80184ac:	46b6      	mov	lr, r6
 80184ae:	f04f 0a00 	mov.w	sl, #0
 80184b2:	880a      	ldrh	r2, [r1, #0]
 80184b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80184b8:	fb09 b202 	mla	r2, r9, r2, fp
 80184bc:	4492      	add	sl, r2
 80184be:	b2a4      	uxth	r4, r4
 80184c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80184c4:	f84e 4b04 	str.w	r4, [lr], #4
 80184c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80184cc:	f8be 2000 	ldrh.w	r2, [lr]
 80184d0:	0c24      	lsrs	r4, r4, #16
 80184d2:	fb09 2404 	mla	r4, r9, r4, r2
 80184d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80184da:	458c      	cmp	ip, r1
 80184dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80184e0:	d8e7      	bhi.n	80184b2 <__multiply+0xfe>
 80184e2:	9a01      	ldr	r2, [sp, #4]
 80184e4:	50b4      	str	r4, [r6, r2]
 80184e6:	3604      	adds	r6, #4
 80184e8:	e7a3      	b.n	8018432 <__multiply+0x7e>
 80184ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d1a5      	bne.n	801843e <__multiply+0x8a>
 80184f2:	3f01      	subs	r7, #1
 80184f4:	e7a1      	b.n	801843a <__multiply+0x86>
 80184f6:	bf00      	nop
 80184f8:	08024a81 	.word	0x08024a81
 80184fc:	08024a92 	.word	0x08024a92

08018500 <__pow5mult>:
 8018500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018504:	4615      	mov	r5, r2
 8018506:	f012 0203 	ands.w	r2, r2, #3
 801850a:	4606      	mov	r6, r0
 801850c:	460f      	mov	r7, r1
 801850e:	d007      	beq.n	8018520 <__pow5mult+0x20>
 8018510:	4c25      	ldr	r4, [pc, #148]	; (80185a8 <__pow5mult+0xa8>)
 8018512:	3a01      	subs	r2, #1
 8018514:	2300      	movs	r3, #0
 8018516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801851a:	f7ff fe9b 	bl	8018254 <__multadd>
 801851e:	4607      	mov	r7, r0
 8018520:	10ad      	asrs	r5, r5, #2
 8018522:	d03d      	beq.n	80185a0 <__pow5mult+0xa0>
 8018524:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018526:	b97c      	cbnz	r4, 8018548 <__pow5mult+0x48>
 8018528:	2010      	movs	r0, #16
 801852a:	f7ff fe1d 	bl	8018168 <malloc>
 801852e:	4602      	mov	r2, r0
 8018530:	6270      	str	r0, [r6, #36]	; 0x24
 8018532:	b928      	cbnz	r0, 8018540 <__pow5mult+0x40>
 8018534:	4b1d      	ldr	r3, [pc, #116]	; (80185ac <__pow5mult+0xac>)
 8018536:	481e      	ldr	r0, [pc, #120]	; (80185b0 <__pow5mult+0xb0>)
 8018538:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801853c:	f7fe feec 	bl	8017318 <__assert_func>
 8018540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018544:	6004      	str	r4, [r0, #0]
 8018546:	60c4      	str	r4, [r0, #12]
 8018548:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801854c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018550:	b94c      	cbnz	r4, 8018566 <__pow5mult+0x66>
 8018552:	f240 2171 	movw	r1, #625	; 0x271
 8018556:	4630      	mov	r0, r6
 8018558:	f7ff ff16 	bl	8018388 <__i2b>
 801855c:	2300      	movs	r3, #0
 801855e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018562:	4604      	mov	r4, r0
 8018564:	6003      	str	r3, [r0, #0]
 8018566:	f04f 0900 	mov.w	r9, #0
 801856a:	07eb      	lsls	r3, r5, #31
 801856c:	d50a      	bpl.n	8018584 <__pow5mult+0x84>
 801856e:	4639      	mov	r1, r7
 8018570:	4622      	mov	r2, r4
 8018572:	4630      	mov	r0, r6
 8018574:	f7ff ff1e 	bl	80183b4 <__multiply>
 8018578:	4639      	mov	r1, r7
 801857a:	4680      	mov	r8, r0
 801857c:	4630      	mov	r0, r6
 801857e:	f7ff fe47 	bl	8018210 <_Bfree>
 8018582:	4647      	mov	r7, r8
 8018584:	106d      	asrs	r5, r5, #1
 8018586:	d00b      	beq.n	80185a0 <__pow5mult+0xa0>
 8018588:	6820      	ldr	r0, [r4, #0]
 801858a:	b938      	cbnz	r0, 801859c <__pow5mult+0x9c>
 801858c:	4622      	mov	r2, r4
 801858e:	4621      	mov	r1, r4
 8018590:	4630      	mov	r0, r6
 8018592:	f7ff ff0f 	bl	80183b4 <__multiply>
 8018596:	6020      	str	r0, [r4, #0]
 8018598:	f8c0 9000 	str.w	r9, [r0]
 801859c:	4604      	mov	r4, r0
 801859e:	e7e4      	b.n	801856a <__pow5mult+0x6a>
 80185a0:	4638      	mov	r0, r7
 80185a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185a6:	bf00      	nop
 80185a8:	08024be8 	.word	0x08024be8
 80185ac:	08024860 	.word	0x08024860
 80185b0:	08024a92 	.word	0x08024a92

080185b4 <__lshift>:
 80185b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185b8:	460c      	mov	r4, r1
 80185ba:	6849      	ldr	r1, [r1, #4]
 80185bc:	6923      	ldr	r3, [r4, #16]
 80185be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80185c2:	68a3      	ldr	r3, [r4, #8]
 80185c4:	4607      	mov	r7, r0
 80185c6:	4691      	mov	r9, r2
 80185c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80185cc:	f108 0601 	add.w	r6, r8, #1
 80185d0:	42b3      	cmp	r3, r6
 80185d2:	db0b      	blt.n	80185ec <__lshift+0x38>
 80185d4:	4638      	mov	r0, r7
 80185d6:	f7ff fddb 	bl	8018190 <_Balloc>
 80185da:	4605      	mov	r5, r0
 80185dc:	b948      	cbnz	r0, 80185f2 <__lshift+0x3e>
 80185de:	4602      	mov	r2, r0
 80185e0:	4b28      	ldr	r3, [pc, #160]	; (8018684 <__lshift+0xd0>)
 80185e2:	4829      	ldr	r0, [pc, #164]	; (8018688 <__lshift+0xd4>)
 80185e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80185e8:	f7fe fe96 	bl	8017318 <__assert_func>
 80185ec:	3101      	adds	r1, #1
 80185ee:	005b      	lsls	r3, r3, #1
 80185f0:	e7ee      	b.n	80185d0 <__lshift+0x1c>
 80185f2:	2300      	movs	r3, #0
 80185f4:	f100 0114 	add.w	r1, r0, #20
 80185f8:	f100 0210 	add.w	r2, r0, #16
 80185fc:	4618      	mov	r0, r3
 80185fe:	4553      	cmp	r3, sl
 8018600:	db33      	blt.n	801866a <__lshift+0xb6>
 8018602:	6920      	ldr	r0, [r4, #16]
 8018604:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018608:	f104 0314 	add.w	r3, r4, #20
 801860c:	f019 091f 	ands.w	r9, r9, #31
 8018610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018614:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018618:	d02b      	beq.n	8018672 <__lshift+0xbe>
 801861a:	f1c9 0e20 	rsb	lr, r9, #32
 801861e:	468a      	mov	sl, r1
 8018620:	2200      	movs	r2, #0
 8018622:	6818      	ldr	r0, [r3, #0]
 8018624:	fa00 f009 	lsl.w	r0, r0, r9
 8018628:	4302      	orrs	r2, r0
 801862a:	f84a 2b04 	str.w	r2, [sl], #4
 801862e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018632:	459c      	cmp	ip, r3
 8018634:	fa22 f20e 	lsr.w	r2, r2, lr
 8018638:	d8f3      	bhi.n	8018622 <__lshift+0x6e>
 801863a:	ebac 0304 	sub.w	r3, ip, r4
 801863e:	3b15      	subs	r3, #21
 8018640:	f023 0303 	bic.w	r3, r3, #3
 8018644:	3304      	adds	r3, #4
 8018646:	f104 0015 	add.w	r0, r4, #21
 801864a:	4584      	cmp	ip, r0
 801864c:	bf38      	it	cc
 801864e:	2304      	movcc	r3, #4
 8018650:	50ca      	str	r2, [r1, r3]
 8018652:	b10a      	cbz	r2, 8018658 <__lshift+0xa4>
 8018654:	f108 0602 	add.w	r6, r8, #2
 8018658:	3e01      	subs	r6, #1
 801865a:	4638      	mov	r0, r7
 801865c:	612e      	str	r6, [r5, #16]
 801865e:	4621      	mov	r1, r4
 8018660:	f7ff fdd6 	bl	8018210 <_Bfree>
 8018664:	4628      	mov	r0, r5
 8018666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801866a:	f842 0f04 	str.w	r0, [r2, #4]!
 801866e:	3301      	adds	r3, #1
 8018670:	e7c5      	b.n	80185fe <__lshift+0x4a>
 8018672:	3904      	subs	r1, #4
 8018674:	f853 2b04 	ldr.w	r2, [r3], #4
 8018678:	f841 2f04 	str.w	r2, [r1, #4]!
 801867c:	459c      	cmp	ip, r3
 801867e:	d8f9      	bhi.n	8018674 <__lshift+0xc0>
 8018680:	e7ea      	b.n	8018658 <__lshift+0xa4>
 8018682:	bf00      	nop
 8018684:	08024a81 	.word	0x08024a81
 8018688:	08024a92 	.word	0x08024a92

0801868c <__mcmp>:
 801868c:	b530      	push	{r4, r5, lr}
 801868e:	6902      	ldr	r2, [r0, #16]
 8018690:	690c      	ldr	r4, [r1, #16]
 8018692:	1b12      	subs	r2, r2, r4
 8018694:	d10e      	bne.n	80186b4 <__mcmp+0x28>
 8018696:	f100 0314 	add.w	r3, r0, #20
 801869a:	3114      	adds	r1, #20
 801869c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80186a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80186a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80186a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80186ac:	42a5      	cmp	r5, r4
 80186ae:	d003      	beq.n	80186b8 <__mcmp+0x2c>
 80186b0:	d305      	bcc.n	80186be <__mcmp+0x32>
 80186b2:	2201      	movs	r2, #1
 80186b4:	4610      	mov	r0, r2
 80186b6:	bd30      	pop	{r4, r5, pc}
 80186b8:	4283      	cmp	r3, r0
 80186ba:	d3f3      	bcc.n	80186a4 <__mcmp+0x18>
 80186bc:	e7fa      	b.n	80186b4 <__mcmp+0x28>
 80186be:	f04f 32ff 	mov.w	r2, #4294967295
 80186c2:	e7f7      	b.n	80186b4 <__mcmp+0x28>

080186c4 <__mdiff>:
 80186c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186c8:	460c      	mov	r4, r1
 80186ca:	4606      	mov	r6, r0
 80186cc:	4611      	mov	r1, r2
 80186ce:	4620      	mov	r0, r4
 80186d0:	4617      	mov	r7, r2
 80186d2:	f7ff ffdb 	bl	801868c <__mcmp>
 80186d6:	1e05      	subs	r5, r0, #0
 80186d8:	d110      	bne.n	80186fc <__mdiff+0x38>
 80186da:	4629      	mov	r1, r5
 80186dc:	4630      	mov	r0, r6
 80186de:	f7ff fd57 	bl	8018190 <_Balloc>
 80186e2:	b930      	cbnz	r0, 80186f2 <__mdiff+0x2e>
 80186e4:	4b39      	ldr	r3, [pc, #228]	; (80187cc <__mdiff+0x108>)
 80186e6:	4602      	mov	r2, r0
 80186e8:	f240 2132 	movw	r1, #562	; 0x232
 80186ec:	4838      	ldr	r0, [pc, #224]	; (80187d0 <__mdiff+0x10c>)
 80186ee:	f7fe fe13 	bl	8017318 <__assert_func>
 80186f2:	2301      	movs	r3, #1
 80186f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80186f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186fc:	bfa4      	itt	ge
 80186fe:	463b      	movge	r3, r7
 8018700:	4627      	movge	r7, r4
 8018702:	4630      	mov	r0, r6
 8018704:	6879      	ldr	r1, [r7, #4]
 8018706:	bfa6      	itte	ge
 8018708:	461c      	movge	r4, r3
 801870a:	2500      	movge	r5, #0
 801870c:	2501      	movlt	r5, #1
 801870e:	f7ff fd3f 	bl	8018190 <_Balloc>
 8018712:	b920      	cbnz	r0, 801871e <__mdiff+0x5a>
 8018714:	4b2d      	ldr	r3, [pc, #180]	; (80187cc <__mdiff+0x108>)
 8018716:	4602      	mov	r2, r0
 8018718:	f44f 7110 	mov.w	r1, #576	; 0x240
 801871c:	e7e6      	b.n	80186ec <__mdiff+0x28>
 801871e:	693e      	ldr	r6, [r7, #16]
 8018720:	60c5      	str	r5, [r0, #12]
 8018722:	6925      	ldr	r5, [r4, #16]
 8018724:	f107 0114 	add.w	r1, r7, #20
 8018728:	f104 0914 	add.w	r9, r4, #20
 801872c:	f100 0e14 	add.w	lr, r0, #20
 8018730:	f107 0210 	add.w	r2, r7, #16
 8018734:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018738:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801873c:	46f2      	mov	sl, lr
 801873e:	2700      	movs	r7, #0
 8018740:	f859 3b04 	ldr.w	r3, [r9], #4
 8018744:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018748:	fa1f f883 	uxth.w	r8, r3
 801874c:	fa17 f78b 	uxtah	r7, r7, fp
 8018750:	0c1b      	lsrs	r3, r3, #16
 8018752:	eba7 0808 	sub.w	r8, r7, r8
 8018756:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801875a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801875e:	fa1f f888 	uxth.w	r8, r8
 8018762:	141f      	asrs	r7, r3, #16
 8018764:	454d      	cmp	r5, r9
 8018766:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801876a:	f84a 3b04 	str.w	r3, [sl], #4
 801876e:	d8e7      	bhi.n	8018740 <__mdiff+0x7c>
 8018770:	1b2b      	subs	r3, r5, r4
 8018772:	3b15      	subs	r3, #21
 8018774:	f023 0303 	bic.w	r3, r3, #3
 8018778:	3304      	adds	r3, #4
 801877a:	3415      	adds	r4, #21
 801877c:	42a5      	cmp	r5, r4
 801877e:	bf38      	it	cc
 8018780:	2304      	movcc	r3, #4
 8018782:	4419      	add	r1, r3
 8018784:	4473      	add	r3, lr
 8018786:	469e      	mov	lr, r3
 8018788:	460d      	mov	r5, r1
 801878a:	4565      	cmp	r5, ip
 801878c:	d30e      	bcc.n	80187ac <__mdiff+0xe8>
 801878e:	f10c 0203 	add.w	r2, ip, #3
 8018792:	1a52      	subs	r2, r2, r1
 8018794:	f022 0203 	bic.w	r2, r2, #3
 8018798:	3903      	subs	r1, #3
 801879a:	458c      	cmp	ip, r1
 801879c:	bf38      	it	cc
 801879e:	2200      	movcc	r2, #0
 80187a0:	441a      	add	r2, r3
 80187a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80187a6:	b17b      	cbz	r3, 80187c8 <__mdiff+0x104>
 80187a8:	6106      	str	r6, [r0, #16]
 80187aa:	e7a5      	b.n	80186f8 <__mdiff+0x34>
 80187ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80187b0:	fa17 f488 	uxtah	r4, r7, r8
 80187b4:	1422      	asrs	r2, r4, #16
 80187b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80187ba:	b2a4      	uxth	r4, r4
 80187bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80187c0:	f84e 4b04 	str.w	r4, [lr], #4
 80187c4:	1417      	asrs	r7, r2, #16
 80187c6:	e7e0      	b.n	801878a <__mdiff+0xc6>
 80187c8:	3e01      	subs	r6, #1
 80187ca:	e7ea      	b.n	80187a2 <__mdiff+0xde>
 80187cc:	08024a81 	.word	0x08024a81
 80187d0:	08024a92 	.word	0x08024a92

080187d4 <__d2b>:
 80187d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80187d8:	4689      	mov	r9, r1
 80187da:	2101      	movs	r1, #1
 80187dc:	ec57 6b10 	vmov	r6, r7, d0
 80187e0:	4690      	mov	r8, r2
 80187e2:	f7ff fcd5 	bl	8018190 <_Balloc>
 80187e6:	4604      	mov	r4, r0
 80187e8:	b930      	cbnz	r0, 80187f8 <__d2b+0x24>
 80187ea:	4602      	mov	r2, r0
 80187ec:	4b25      	ldr	r3, [pc, #148]	; (8018884 <__d2b+0xb0>)
 80187ee:	4826      	ldr	r0, [pc, #152]	; (8018888 <__d2b+0xb4>)
 80187f0:	f240 310a 	movw	r1, #778	; 0x30a
 80187f4:	f7fe fd90 	bl	8017318 <__assert_func>
 80187f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80187fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018800:	bb35      	cbnz	r5, 8018850 <__d2b+0x7c>
 8018802:	2e00      	cmp	r6, #0
 8018804:	9301      	str	r3, [sp, #4]
 8018806:	d028      	beq.n	801885a <__d2b+0x86>
 8018808:	4668      	mov	r0, sp
 801880a:	9600      	str	r6, [sp, #0]
 801880c:	f7ff fd8c 	bl	8018328 <__lo0bits>
 8018810:	9900      	ldr	r1, [sp, #0]
 8018812:	b300      	cbz	r0, 8018856 <__d2b+0x82>
 8018814:	9a01      	ldr	r2, [sp, #4]
 8018816:	f1c0 0320 	rsb	r3, r0, #32
 801881a:	fa02 f303 	lsl.w	r3, r2, r3
 801881e:	430b      	orrs	r3, r1
 8018820:	40c2      	lsrs	r2, r0
 8018822:	6163      	str	r3, [r4, #20]
 8018824:	9201      	str	r2, [sp, #4]
 8018826:	9b01      	ldr	r3, [sp, #4]
 8018828:	61a3      	str	r3, [r4, #24]
 801882a:	2b00      	cmp	r3, #0
 801882c:	bf14      	ite	ne
 801882e:	2202      	movne	r2, #2
 8018830:	2201      	moveq	r2, #1
 8018832:	6122      	str	r2, [r4, #16]
 8018834:	b1d5      	cbz	r5, 801886c <__d2b+0x98>
 8018836:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801883a:	4405      	add	r5, r0
 801883c:	f8c9 5000 	str.w	r5, [r9]
 8018840:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018844:	f8c8 0000 	str.w	r0, [r8]
 8018848:	4620      	mov	r0, r4
 801884a:	b003      	add	sp, #12
 801884c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018854:	e7d5      	b.n	8018802 <__d2b+0x2e>
 8018856:	6161      	str	r1, [r4, #20]
 8018858:	e7e5      	b.n	8018826 <__d2b+0x52>
 801885a:	a801      	add	r0, sp, #4
 801885c:	f7ff fd64 	bl	8018328 <__lo0bits>
 8018860:	9b01      	ldr	r3, [sp, #4]
 8018862:	6163      	str	r3, [r4, #20]
 8018864:	2201      	movs	r2, #1
 8018866:	6122      	str	r2, [r4, #16]
 8018868:	3020      	adds	r0, #32
 801886a:	e7e3      	b.n	8018834 <__d2b+0x60>
 801886c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018870:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018874:	f8c9 0000 	str.w	r0, [r9]
 8018878:	6918      	ldr	r0, [r3, #16]
 801887a:	f7ff fd35 	bl	80182e8 <__hi0bits>
 801887e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018882:	e7df      	b.n	8018844 <__d2b+0x70>
 8018884:	08024a81 	.word	0x08024a81
 8018888:	08024a92 	.word	0x08024a92

0801888c <_calloc_r>:
 801888c:	b513      	push	{r0, r1, r4, lr}
 801888e:	434a      	muls	r2, r1
 8018890:	4611      	mov	r1, r2
 8018892:	9201      	str	r2, [sp, #4]
 8018894:	f7fd feb0 	bl	80165f8 <_malloc_r>
 8018898:	4604      	mov	r4, r0
 801889a:	b118      	cbz	r0, 80188a4 <_calloc_r+0x18>
 801889c:	9a01      	ldr	r2, [sp, #4]
 801889e:	2100      	movs	r1, #0
 80188a0:	f7fd fea1 	bl	80165e6 <memset>
 80188a4:	4620      	mov	r0, r4
 80188a6:	b002      	add	sp, #8
 80188a8:	bd10      	pop	{r4, pc}
	...

080188ac <_free_r>:
 80188ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188ae:	2900      	cmp	r1, #0
 80188b0:	d048      	beq.n	8018944 <_free_r+0x98>
 80188b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188b6:	9001      	str	r0, [sp, #4]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	f1a1 0404 	sub.w	r4, r1, #4
 80188be:	bfb8      	it	lt
 80188c0:	18e4      	addlt	r4, r4, r3
 80188c2:	f7ff fc59 	bl	8018178 <__malloc_lock>
 80188c6:	4a20      	ldr	r2, [pc, #128]	; (8018948 <_free_r+0x9c>)
 80188c8:	9801      	ldr	r0, [sp, #4]
 80188ca:	6813      	ldr	r3, [r2, #0]
 80188cc:	4615      	mov	r5, r2
 80188ce:	b933      	cbnz	r3, 80188de <_free_r+0x32>
 80188d0:	6063      	str	r3, [r4, #4]
 80188d2:	6014      	str	r4, [r2, #0]
 80188d4:	b003      	add	sp, #12
 80188d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80188da:	f7ff bc53 	b.w	8018184 <__malloc_unlock>
 80188de:	42a3      	cmp	r3, r4
 80188e0:	d90b      	bls.n	80188fa <_free_r+0x4e>
 80188e2:	6821      	ldr	r1, [r4, #0]
 80188e4:	1862      	adds	r2, r4, r1
 80188e6:	4293      	cmp	r3, r2
 80188e8:	bf04      	itt	eq
 80188ea:	681a      	ldreq	r2, [r3, #0]
 80188ec:	685b      	ldreq	r3, [r3, #4]
 80188ee:	6063      	str	r3, [r4, #4]
 80188f0:	bf04      	itt	eq
 80188f2:	1852      	addeq	r2, r2, r1
 80188f4:	6022      	streq	r2, [r4, #0]
 80188f6:	602c      	str	r4, [r5, #0]
 80188f8:	e7ec      	b.n	80188d4 <_free_r+0x28>
 80188fa:	461a      	mov	r2, r3
 80188fc:	685b      	ldr	r3, [r3, #4]
 80188fe:	b10b      	cbz	r3, 8018904 <_free_r+0x58>
 8018900:	42a3      	cmp	r3, r4
 8018902:	d9fa      	bls.n	80188fa <_free_r+0x4e>
 8018904:	6811      	ldr	r1, [r2, #0]
 8018906:	1855      	adds	r5, r2, r1
 8018908:	42a5      	cmp	r5, r4
 801890a:	d10b      	bne.n	8018924 <_free_r+0x78>
 801890c:	6824      	ldr	r4, [r4, #0]
 801890e:	4421      	add	r1, r4
 8018910:	1854      	adds	r4, r2, r1
 8018912:	42a3      	cmp	r3, r4
 8018914:	6011      	str	r1, [r2, #0]
 8018916:	d1dd      	bne.n	80188d4 <_free_r+0x28>
 8018918:	681c      	ldr	r4, [r3, #0]
 801891a:	685b      	ldr	r3, [r3, #4]
 801891c:	6053      	str	r3, [r2, #4]
 801891e:	4421      	add	r1, r4
 8018920:	6011      	str	r1, [r2, #0]
 8018922:	e7d7      	b.n	80188d4 <_free_r+0x28>
 8018924:	d902      	bls.n	801892c <_free_r+0x80>
 8018926:	230c      	movs	r3, #12
 8018928:	6003      	str	r3, [r0, #0]
 801892a:	e7d3      	b.n	80188d4 <_free_r+0x28>
 801892c:	6825      	ldr	r5, [r4, #0]
 801892e:	1961      	adds	r1, r4, r5
 8018930:	428b      	cmp	r3, r1
 8018932:	bf04      	itt	eq
 8018934:	6819      	ldreq	r1, [r3, #0]
 8018936:	685b      	ldreq	r3, [r3, #4]
 8018938:	6063      	str	r3, [r4, #4]
 801893a:	bf04      	itt	eq
 801893c:	1949      	addeq	r1, r1, r5
 801893e:	6021      	streq	r1, [r4, #0]
 8018940:	6054      	str	r4, [r2, #4]
 8018942:	e7c7      	b.n	80188d4 <_free_r+0x28>
 8018944:	b003      	add	sp, #12
 8018946:	bd30      	pop	{r4, r5, pc}
 8018948:	24004c50 	.word	0x24004c50

0801894c <__ssputs_r>:
 801894c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018950:	688e      	ldr	r6, [r1, #8]
 8018952:	429e      	cmp	r6, r3
 8018954:	4682      	mov	sl, r0
 8018956:	460c      	mov	r4, r1
 8018958:	4690      	mov	r8, r2
 801895a:	461f      	mov	r7, r3
 801895c:	d838      	bhi.n	80189d0 <__ssputs_r+0x84>
 801895e:	898a      	ldrh	r2, [r1, #12]
 8018960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018964:	d032      	beq.n	80189cc <__ssputs_r+0x80>
 8018966:	6825      	ldr	r5, [r4, #0]
 8018968:	6909      	ldr	r1, [r1, #16]
 801896a:	eba5 0901 	sub.w	r9, r5, r1
 801896e:	6965      	ldr	r5, [r4, #20]
 8018970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018978:	3301      	adds	r3, #1
 801897a:	444b      	add	r3, r9
 801897c:	106d      	asrs	r5, r5, #1
 801897e:	429d      	cmp	r5, r3
 8018980:	bf38      	it	cc
 8018982:	461d      	movcc	r5, r3
 8018984:	0553      	lsls	r3, r2, #21
 8018986:	d531      	bpl.n	80189ec <__ssputs_r+0xa0>
 8018988:	4629      	mov	r1, r5
 801898a:	f7fd fe35 	bl	80165f8 <_malloc_r>
 801898e:	4606      	mov	r6, r0
 8018990:	b950      	cbnz	r0, 80189a8 <__ssputs_r+0x5c>
 8018992:	230c      	movs	r3, #12
 8018994:	f8ca 3000 	str.w	r3, [sl]
 8018998:	89a3      	ldrh	r3, [r4, #12]
 801899a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801899e:	81a3      	strh	r3, [r4, #12]
 80189a0:	f04f 30ff 	mov.w	r0, #4294967295
 80189a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189a8:	6921      	ldr	r1, [r4, #16]
 80189aa:	464a      	mov	r2, r9
 80189ac:	f7fd fe0d 	bl	80165ca <memcpy>
 80189b0:	89a3      	ldrh	r3, [r4, #12]
 80189b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80189b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189ba:	81a3      	strh	r3, [r4, #12]
 80189bc:	6126      	str	r6, [r4, #16]
 80189be:	6165      	str	r5, [r4, #20]
 80189c0:	444e      	add	r6, r9
 80189c2:	eba5 0509 	sub.w	r5, r5, r9
 80189c6:	6026      	str	r6, [r4, #0]
 80189c8:	60a5      	str	r5, [r4, #8]
 80189ca:	463e      	mov	r6, r7
 80189cc:	42be      	cmp	r6, r7
 80189ce:	d900      	bls.n	80189d2 <__ssputs_r+0x86>
 80189d0:	463e      	mov	r6, r7
 80189d2:	4632      	mov	r2, r6
 80189d4:	6820      	ldr	r0, [r4, #0]
 80189d6:	4641      	mov	r1, r8
 80189d8:	f000 fbbe 	bl	8019158 <memmove>
 80189dc:	68a3      	ldr	r3, [r4, #8]
 80189de:	6822      	ldr	r2, [r4, #0]
 80189e0:	1b9b      	subs	r3, r3, r6
 80189e2:	4432      	add	r2, r6
 80189e4:	60a3      	str	r3, [r4, #8]
 80189e6:	6022      	str	r2, [r4, #0]
 80189e8:	2000      	movs	r0, #0
 80189ea:	e7db      	b.n	80189a4 <__ssputs_r+0x58>
 80189ec:	462a      	mov	r2, r5
 80189ee:	f000 fbcd 	bl	801918c <_realloc_r>
 80189f2:	4606      	mov	r6, r0
 80189f4:	2800      	cmp	r0, #0
 80189f6:	d1e1      	bne.n	80189bc <__ssputs_r+0x70>
 80189f8:	6921      	ldr	r1, [r4, #16]
 80189fa:	4650      	mov	r0, sl
 80189fc:	f7ff ff56 	bl	80188ac <_free_r>
 8018a00:	e7c7      	b.n	8018992 <__ssputs_r+0x46>
	...

08018a04 <_svfiprintf_r>:
 8018a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a08:	4698      	mov	r8, r3
 8018a0a:	898b      	ldrh	r3, [r1, #12]
 8018a0c:	061b      	lsls	r3, r3, #24
 8018a0e:	b09d      	sub	sp, #116	; 0x74
 8018a10:	4607      	mov	r7, r0
 8018a12:	460d      	mov	r5, r1
 8018a14:	4614      	mov	r4, r2
 8018a16:	d50e      	bpl.n	8018a36 <_svfiprintf_r+0x32>
 8018a18:	690b      	ldr	r3, [r1, #16]
 8018a1a:	b963      	cbnz	r3, 8018a36 <_svfiprintf_r+0x32>
 8018a1c:	2140      	movs	r1, #64	; 0x40
 8018a1e:	f7fd fdeb 	bl	80165f8 <_malloc_r>
 8018a22:	6028      	str	r0, [r5, #0]
 8018a24:	6128      	str	r0, [r5, #16]
 8018a26:	b920      	cbnz	r0, 8018a32 <_svfiprintf_r+0x2e>
 8018a28:	230c      	movs	r3, #12
 8018a2a:	603b      	str	r3, [r7, #0]
 8018a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8018a30:	e0d1      	b.n	8018bd6 <_svfiprintf_r+0x1d2>
 8018a32:	2340      	movs	r3, #64	; 0x40
 8018a34:	616b      	str	r3, [r5, #20]
 8018a36:	2300      	movs	r3, #0
 8018a38:	9309      	str	r3, [sp, #36]	; 0x24
 8018a3a:	2320      	movs	r3, #32
 8018a3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a44:	2330      	movs	r3, #48	; 0x30
 8018a46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018bf0 <_svfiprintf_r+0x1ec>
 8018a4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a4e:	f04f 0901 	mov.w	r9, #1
 8018a52:	4623      	mov	r3, r4
 8018a54:	469a      	mov	sl, r3
 8018a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a5a:	b10a      	cbz	r2, 8018a60 <_svfiprintf_r+0x5c>
 8018a5c:	2a25      	cmp	r2, #37	; 0x25
 8018a5e:	d1f9      	bne.n	8018a54 <_svfiprintf_r+0x50>
 8018a60:	ebba 0b04 	subs.w	fp, sl, r4
 8018a64:	d00b      	beq.n	8018a7e <_svfiprintf_r+0x7a>
 8018a66:	465b      	mov	r3, fp
 8018a68:	4622      	mov	r2, r4
 8018a6a:	4629      	mov	r1, r5
 8018a6c:	4638      	mov	r0, r7
 8018a6e:	f7ff ff6d 	bl	801894c <__ssputs_r>
 8018a72:	3001      	adds	r0, #1
 8018a74:	f000 80aa 	beq.w	8018bcc <_svfiprintf_r+0x1c8>
 8018a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a7a:	445a      	add	r2, fp
 8018a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8018a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	f000 80a2 	beq.w	8018bcc <_svfiprintf_r+0x1c8>
 8018a88:	2300      	movs	r3, #0
 8018a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8018a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a92:	f10a 0a01 	add.w	sl, sl, #1
 8018a96:	9304      	str	r3, [sp, #16]
 8018a98:	9307      	str	r3, [sp, #28]
 8018a9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018a9e:	931a      	str	r3, [sp, #104]	; 0x68
 8018aa0:	4654      	mov	r4, sl
 8018aa2:	2205      	movs	r2, #5
 8018aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018aa8:	4851      	ldr	r0, [pc, #324]	; (8018bf0 <_svfiprintf_r+0x1ec>)
 8018aaa:	f7e7 fc21 	bl	80002f0 <memchr>
 8018aae:	9a04      	ldr	r2, [sp, #16]
 8018ab0:	b9d8      	cbnz	r0, 8018aea <_svfiprintf_r+0xe6>
 8018ab2:	06d0      	lsls	r0, r2, #27
 8018ab4:	bf44      	itt	mi
 8018ab6:	2320      	movmi	r3, #32
 8018ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018abc:	0711      	lsls	r1, r2, #28
 8018abe:	bf44      	itt	mi
 8018ac0:	232b      	movmi	r3, #43	; 0x2b
 8018ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8018aca:	2b2a      	cmp	r3, #42	; 0x2a
 8018acc:	d015      	beq.n	8018afa <_svfiprintf_r+0xf6>
 8018ace:	9a07      	ldr	r2, [sp, #28]
 8018ad0:	4654      	mov	r4, sl
 8018ad2:	2000      	movs	r0, #0
 8018ad4:	f04f 0c0a 	mov.w	ip, #10
 8018ad8:	4621      	mov	r1, r4
 8018ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ade:	3b30      	subs	r3, #48	; 0x30
 8018ae0:	2b09      	cmp	r3, #9
 8018ae2:	d94e      	bls.n	8018b82 <_svfiprintf_r+0x17e>
 8018ae4:	b1b0      	cbz	r0, 8018b14 <_svfiprintf_r+0x110>
 8018ae6:	9207      	str	r2, [sp, #28]
 8018ae8:	e014      	b.n	8018b14 <_svfiprintf_r+0x110>
 8018aea:	eba0 0308 	sub.w	r3, r0, r8
 8018aee:	fa09 f303 	lsl.w	r3, r9, r3
 8018af2:	4313      	orrs	r3, r2
 8018af4:	9304      	str	r3, [sp, #16]
 8018af6:	46a2      	mov	sl, r4
 8018af8:	e7d2      	b.n	8018aa0 <_svfiprintf_r+0x9c>
 8018afa:	9b03      	ldr	r3, [sp, #12]
 8018afc:	1d19      	adds	r1, r3, #4
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	9103      	str	r1, [sp, #12]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	bfbb      	ittet	lt
 8018b06:	425b      	neglt	r3, r3
 8018b08:	f042 0202 	orrlt.w	r2, r2, #2
 8018b0c:	9307      	strge	r3, [sp, #28]
 8018b0e:	9307      	strlt	r3, [sp, #28]
 8018b10:	bfb8      	it	lt
 8018b12:	9204      	strlt	r2, [sp, #16]
 8018b14:	7823      	ldrb	r3, [r4, #0]
 8018b16:	2b2e      	cmp	r3, #46	; 0x2e
 8018b18:	d10c      	bne.n	8018b34 <_svfiprintf_r+0x130>
 8018b1a:	7863      	ldrb	r3, [r4, #1]
 8018b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8018b1e:	d135      	bne.n	8018b8c <_svfiprintf_r+0x188>
 8018b20:	9b03      	ldr	r3, [sp, #12]
 8018b22:	1d1a      	adds	r2, r3, #4
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	9203      	str	r2, [sp, #12]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	bfb8      	it	lt
 8018b2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018b30:	3402      	adds	r4, #2
 8018b32:	9305      	str	r3, [sp, #20]
 8018b34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018c00 <_svfiprintf_r+0x1fc>
 8018b38:	7821      	ldrb	r1, [r4, #0]
 8018b3a:	2203      	movs	r2, #3
 8018b3c:	4650      	mov	r0, sl
 8018b3e:	f7e7 fbd7 	bl	80002f0 <memchr>
 8018b42:	b140      	cbz	r0, 8018b56 <_svfiprintf_r+0x152>
 8018b44:	2340      	movs	r3, #64	; 0x40
 8018b46:	eba0 000a 	sub.w	r0, r0, sl
 8018b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8018b4e:	9b04      	ldr	r3, [sp, #16]
 8018b50:	4303      	orrs	r3, r0
 8018b52:	3401      	adds	r4, #1
 8018b54:	9304      	str	r3, [sp, #16]
 8018b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b5a:	4826      	ldr	r0, [pc, #152]	; (8018bf4 <_svfiprintf_r+0x1f0>)
 8018b5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018b60:	2206      	movs	r2, #6
 8018b62:	f7e7 fbc5 	bl	80002f0 <memchr>
 8018b66:	2800      	cmp	r0, #0
 8018b68:	d038      	beq.n	8018bdc <_svfiprintf_r+0x1d8>
 8018b6a:	4b23      	ldr	r3, [pc, #140]	; (8018bf8 <_svfiprintf_r+0x1f4>)
 8018b6c:	bb1b      	cbnz	r3, 8018bb6 <_svfiprintf_r+0x1b2>
 8018b6e:	9b03      	ldr	r3, [sp, #12]
 8018b70:	3307      	adds	r3, #7
 8018b72:	f023 0307 	bic.w	r3, r3, #7
 8018b76:	3308      	adds	r3, #8
 8018b78:	9303      	str	r3, [sp, #12]
 8018b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b7c:	4433      	add	r3, r6
 8018b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8018b80:	e767      	b.n	8018a52 <_svfiprintf_r+0x4e>
 8018b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b86:	460c      	mov	r4, r1
 8018b88:	2001      	movs	r0, #1
 8018b8a:	e7a5      	b.n	8018ad8 <_svfiprintf_r+0xd4>
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	3401      	adds	r4, #1
 8018b90:	9305      	str	r3, [sp, #20]
 8018b92:	4619      	mov	r1, r3
 8018b94:	f04f 0c0a 	mov.w	ip, #10
 8018b98:	4620      	mov	r0, r4
 8018b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018b9e:	3a30      	subs	r2, #48	; 0x30
 8018ba0:	2a09      	cmp	r2, #9
 8018ba2:	d903      	bls.n	8018bac <_svfiprintf_r+0x1a8>
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d0c5      	beq.n	8018b34 <_svfiprintf_r+0x130>
 8018ba8:	9105      	str	r1, [sp, #20]
 8018baa:	e7c3      	b.n	8018b34 <_svfiprintf_r+0x130>
 8018bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8018bb0:	4604      	mov	r4, r0
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	e7f0      	b.n	8018b98 <_svfiprintf_r+0x194>
 8018bb6:	ab03      	add	r3, sp, #12
 8018bb8:	9300      	str	r3, [sp, #0]
 8018bba:	462a      	mov	r2, r5
 8018bbc:	4b0f      	ldr	r3, [pc, #60]	; (8018bfc <_svfiprintf_r+0x1f8>)
 8018bbe:	a904      	add	r1, sp, #16
 8018bc0:	4638      	mov	r0, r7
 8018bc2:	f7fd fe05 	bl	80167d0 <_printf_float>
 8018bc6:	1c42      	adds	r2, r0, #1
 8018bc8:	4606      	mov	r6, r0
 8018bca:	d1d6      	bne.n	8018b7a <_svfiprintf_r+0x176>
 8018bcc:	89ab      	ldrh	r3, [r5, #12]
 8018bce:	065b      	lsls	r3, r3, #25
 8018bd0:	f53f af2c 	bmi.w	8018a2c <_svfiprintf_r+0x28>
 8018bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018bd6:	b01d      	add	sp, #116	; 0x74
 8018bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bdc:	ab03      	add	r3, sp, #12
 8018bde:	9300      	str	r3, [sp, #0]
 8018be0:	462a      	mov	r2, r5
 8018be2:	4b06      	ldr	r3, [pc, #24]	; (8018bfc <_svfiprintf_r+0x1f8>)
 8018be4:	a904      	add	r1, sp, #16
 8018be6:	4638      	mov	r0, r7
 8018be8:	f7fe f87e 	bl	8016ce8 <_printf_i>
 8018bec:	e7eb      	b.n	8018bc6 <_svfiprintf_r+0x1c2>
 8018bee:	bf00      	nop
 8018bf0:	08024bf4 	.word	0x08024bf4
 8018bf4:	08024bfe 	.word	0x08024bfe
 8018bf8:	080167d1 	.word	0x080167d1
 8018bfc:	0801894d 	.word	0x0801894d
 8018c00:	08024bfa 	.word	0x08024bfa

08018c04 <__sfputc_r>:
 8018c04:	6893      	ldr	r3, [r2, #8]
 8018c06:	3b01      	subs	r3, #1
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	b410      	push	{r4}
 8018c0c:	6093      	str	r3, [r2, #8]
 8018c0e:	da08      	bge.n	8018c22 <__sfputc_r+0x1e>
 8018c10:	6994      	ldr	r4, [r2, #24]
 8018c12:	42a3      	cmp	r3, r4
 8018c14:	db01      	blt.n	8018c1a <__sfputc_r+0x16>
 8018c16:	290a      	cmp	r1, #10
 8018c18:	d103      	bne.n	8018c22 <__sfputc_r+0x1e>
 8018c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c1e:	f000 b95d 	b.w	8018edc <__swbuf_r>
 8018c22:	6813      	ldr	r3, [r2, #0]
 8018c24:	1c58      	adds	r0, r3, #1
 8018c26:	6010      	str	r0, [r2, #0]
 8018c28:	7019      	strb	r1, [r3, #0]
 8018c2a:	4608      	mov	r0, r1
 8018c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c30:	4770      	bx	lr

08018c32 <__sfputs_r>:
 8018c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c34:	4606      	mov	r6, r0
 8018c36:	460f      	mov	r7, r1
 8018c38:	4614      	mov	r4, r2
 8018c3a:	18d5      	adds	r5, r2, r3
 8018c3c:	42ac      	cmp	r4, r5
 8018c3e:	d101      	bne.n	8018c44 <__sfputs_r+0x12>
 8018c40:	2000      	movs	r0, #0
 8018c42:	e007      	b.n	8018c54 <__sfputs_r+0x22>
 8018c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c48:	463a      	mov	r2, r7
 8018c4a:	4630      	mov	r0, r6
 8018c4c:	f7ff ffda 	bl	8018c04 <__sfputc_r>
 8018c50:	1c43      	adds	r3, r0, #1
 8018c52:	d1f3      	bne.n	8018c3c <__sfputs_r+0xa>
 8018c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018c58 <_vfiprintf_r>:
 8018c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c5c:	460d      	mov	r5, r1
 8018c5e:	b09d      	sub	sp, #116	; 0x74
 8018c60:	4614      	mov	r4, r2
 8018c62:	4698      	mov	r8, r3
 8018c64:	4606      	mov	r6, r0
 8018c66:	b118      	cbz	r0, 8018c70 <_vfiprintf_r+0x18>
 8018c68:	6983      	ldr	r3, [r0, #24]
 8018c6a:	b90b      	cbnz	r3, 8018c70 <_vfiprintf_r+0x18>
 8018c6c:	f7fd fbe8 	bl	8016440 <__sinit>
 8018c70:	4b89      	ldr	r3, [pc, #548]	; (8018e98 <_vfiprintf_r+0x240>)
 8018c72:	429d      	cmp	r5, r3
 8018c74:	d11b      	bne.n	8018cae <_vfiprintf_r+0x56>
 8018c76:	6875      	ldr	r5, [r6, #4]
 8018c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c7a:	07d9      	lsls	r1, r3, #31
 8018c7c:	d405      	bmi.n	8018c8a <_vfiprintf_r+0x32>
 8018c7e:	89ab      	ldrh	r3, [r5, #12]
 8018c80:	059a      	lsls	r2, r3, #22
 8018c82:	d402      	bmi.n	8018c8a <_vfiprintf_r+0x32>
 8018c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c86:	f7fd fc9e 	bl	80165c6 <__retarget_lock_acquire_recursive>
 8018c8a:	89ab      	ldrh	r3, [r5, #12]
 8018c8c:	071b      	lsls	r3, r3, #28
 8018c8e:	d501      	bpl.n	8018c94 <_vfiprintf_r+0x3c>
 8018c90:	692b      	ldr	r3, [r5, #16]
 8018c92:	b9eb      	cbnz	r3, 8018cd0 <_vfiprintf_r+0x78>
 8018c94:	4629      	mov	r1, r5
 8018c96:	4630      	mov	r0, r6
 8018c98:	f000 f972 	bl	8018f80 <__swsetup_r>
 8018c9c:	b1c0      	cbz	r0, 8018cd0 <_vfiprintf_r+0x78>
 8018c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ca0:	07dc      	lsls	r4, r3, #31
 8018ca2:	d50e      	bpl.n	8018cc2 <_vfiprintf_r+0x6a>
 8018ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8018ca8:	b01d      	add	sp, #116	; 0x74
 8018caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cae:	4b7b      	ldr	r3, [pc, #492]	; (8018e9c <_vfiprintf_r+0x244>)
 8018cb0:	429d      	cmp	r5, r3
 8018cb2:	d101      	bne.n	8018cb8 <_vfiprintf_r+0x60>
 8018cb4:	68b5      	ldr	r5, [r6, #8]
 8018cb6:	e7df      	b.n	8018c78 <_vfiprintf_r+0x20>
 8018cb8:	4b79      	ldr	r3, [pc, #484]	; (8018ea0 <_vfiprintf_r+0x248>)
 8018cba:	429d      	cmp	r5, r3
 8018cbc:	bf08      	it	eq
 8018cbe:	68f5      	ldreq	r5, [r6, #12]
 8018cc0:	e7da      	b.n	8018c78 <_vfiprintf_r+0x20>
 8018cc2:	89ab      	ldrh	r3, [r5, #12]
 8018cc4:	0598      	lsls	r0, r3, #22
 8018cc6:	d4ed      	bmi.n	8018ca4 <_vfiprintf_r+0x4c>
 8018cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018cca:	f7fd fc7d 	bl	80165c8 <__retarget_lock_release_recursive>
 8018cce:	e7e9      	b.n	8018ca4 <_vfiprintf_r+0x4c>
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8018cd4:	2320      	movs	r3, #32
 8018cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8018cde:	2330      	movs	r3, #48	; 0x30
 8018ce0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018ea4 <_vfiprintf_r+0x24c>
 8018ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ce8:	f04f 0901 	mov.w	r9, #1
 8018cec:	4623      	mov	r3, r4
 8018cee:	469a      	mov	sl, r3
 8018cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018cf4:	b10a      	cbz	r2, 8018cfa <_vfiprintf_r+0xa2>
 8018cf6:	2a25      	cmp	r2, #37	; 0x25
 8018cf8:	d1f9      	bne.n	8018cee <_vfiprintf_r+0x96>
 8018cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8018cfe:	d00b      	beq.n	8018d18 <_vfiprintf_r+0xc0>
 8018d00:	465b      	mov	r3, fp
 8018d02:	4622      	mov	r2, r4
 8018d04:	4629      	mov	r1, r5
 8018d06:	4630      	mov	r0, r6
 8018d08:	f7ff ff93 	bl	8018c32 <__sfputs_r>
 8018d0c:	3001      	adds	r0, #1
 8018d0e:	f000 80aa 	beq.w	8018e66 <_vfiprintf_r+0x20e>
 8018d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d14:	445a      	add	r2, fp
 8018d16:	9209      	str	r2, [sp, #36]	; 0x24
 8018d18:	f89a 3000 	ldrb.w	r3, [sl]
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	f000 80a2 	beq.w	8018e66 <_vfiprintf_r+0x20e>
 8018d22:	2300      	movs	r3, #0
 8018d24:	f04f 32ff 	mov.w	r2, #4294967295
 8018d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d2c:	f10a 0a01 	add.w	sl, sl, #1
 8018d30:	9304      	str	r3, [sp, #16]
 8018d32:	9307      	str	r3, [sp, #28]
 8018d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d38:	931a      	str	r3, [sp, #104]	; 0x68
 8018d3a:	4654      	mov	r4, sl
 8018d3c:	2205      	movs	r2, #5
 8018d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d42:	4858      	ldr	r0, [pc, #352]	; (8018ea4 <_vfiprintf_r+0x24c>)
 8018d44:	f7e7 fad4 	bl	80002f0 <memchr>
 8018d48:	9a04      	ldr	r2, [sp, #16]
 8018d4a:	b9d8      	cbnz	r0, 8018d84 <_vfiprintf_r+0x12c>
 8018d4c:	06d1      	lsls	r1, r2, #27
 8018d4e:	bf44      	itt	mi
 8018d50:	2320      	movmi	r3, #32
 8018d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d56:	0713      	lsls	r3, r2, #28
 8018d58:	bf44      	itt	mi
 8018d5a:	232b      	movmi	r3, #43	; 0x2b
 8018d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d60:	f89a 3000 	ldrb.w	r3, [sl]
 8018d64:	2b2a      	cmp	r3, #42	; 0x2a
 8018d66:	d015      	beq.n	8018d94 <_vfiprintf_r+0x13c>
 8018d68:	9a07      	ldr	r2, [sp, #28]
 8018d6a:	4654      	mov	r4, sl
 8018d6c:	2000      	movs	r0, #0
 8018d6e:	f04f 0c0a 	mov.w	ip, #10
 8018d72:	4621      	mov	r1, r4
 8018d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d78:	3b30      	subs	r3, #48	; 0x30
 8018d7a:	2b09      	cmp	r3, #9
 8018d7c:	d94e      	bls.n	8018e1c <_vfiprintf_r+0x1c4>
 8018d7e:	b1b0      	cbz	r0, 8018dae <_vfiprintf_r+0x156>
 8018d80:	9207      	str	r2, [sp, #28]
 8018d82:	e014      	b.n	8018dae <_vfiprintf_r+0x156>
 8018d84:	eba0 0308 	sub.w	r3, r0, r8
 8018d88:	fa09 f303 	lsl.w	r3, r9, r3
 8018d8c:	4313      	orrs	r3, r2
 8018d8e:	9304      	str	r3, [sp, #16]
 8018d90:	46a2      	mov	sl, r4
 8018d92:	e7d2      	b.n	8018d3a <_vfiprintf_r+0xe2>
 8018d94:	9b03      	ldr	r3, [sp, #12]
 8018d96:	1d19      	adds	r1, r3, #4
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	9103      	str	r1, [sp, #12]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	bfbb      	ittet	lt
 8018da0:	425b      	neglt	r3, r3
 8018da2:	f042 0202 	orrlt.w	r2, r2, #2
 8018da6:	9307      	strge	r3, [sp, #28]
 8018da8:	9307      	strlt	r3, [sp, #28]
 8018daa:	bfb8      	it	lt
 8018dac:	9204      	strlt	r2, [sp, #16]
 8018dae:	7823      	ldrb	r3, [r4, #0]
 8018db0:	2b2e      	cmp	r3, #46	; 0x2e
 8018db2:	d10c      	bne.n	8018dce <_vfiprintf_r+0x176>
 8018db4:	7863      	ldrb	r3, [r4, #1]
 8018db6:	2b2a      	cmp	r3, #42	; 0x2a
 8018db8:	d135      	bne.n	8018e26 <_vfiprintf_r+0x1ce>
 8018dba:	9b03      	ldr	r3, [sp, #12]
 8018dbc:	1d1a      	adds	r2, r3, #4
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	9203      	str	r2, [sp, #12]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	bfb8      	it	lt
 8018dc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8018dca:	3402      	adds	r4, #2
 8018dcc:	9305      	str	r3, [sp, #20]
 8018dce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018eb4 <_vfiprintf_r+0x25c>
 8018dd2:	7821      	ldrb	r1, [r4, #0]
 8018dd4:	2203      	movs	r2, #3
 8018dd6:	4650      	mov	r0, sl
 8018dd8:	f7e7 fa8a 	bl	80002f0 <memchr>
 8018ddc:	b140      	cbz	r0, 8018df0 <_vfiprintf_r+0x198>
 8018dde:	2340      	movs	r3, #64	; 0x40
 8018de0:	eba0 000a 	sub.w	r0, r0, sl
 8018de4:	fa03 f000 	lsl.w	r0, r3, r0
 8018de8:	9b04      	ldr	r3, [sp, #16]
 8018dea:	4303      	orrs	r3, r0
 8018dec:	3401      	adds	r4, #1
 8018dee:	9304      	str	r3, [sp, #16]
 8018df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018df4:	482c      	ldr	r0, [pc, #176]	; (8018ea8 <_vfiprintf_r+0x250>)
 8018df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018dfa:	2206      	movs	r2, #6
 8018dfc:	f7e7 fa78 	bl	80002f0 <memchr>
 8018e00:	2800      	cmp	r0, #0
 8018e02:	d03f      	beq.n	8018e84 <_vfiprintf_r+0x22c>
 8018e04:	4b29      	ldr	r3, [pc, #164]	; (8018eac <_vfiprintf_r+0x254>)
 8018e06:	bb1b      	cbnz	r3, 8018e50 <_vfiprintf_r+0x1f8>
 8018e08:	9b03      	ldr	r3, [sp, #12]
 8018e0a:	3307      	adds	r3, #7
 8018e0c:	f023 0307 	bic.w	r3, r3, #7
 8018e10:	3308      	adds	r3, #8
 8018e12:	9303      	str	r3, [sp, #12]
 8018e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e16:	443b      	add	r3, r7
 8018e18:	9309      	str	r3, [sp, #36]	; 0x24
 8018e1a:	e767      	b.n	8018cec <_vfiprintf_r+0x94>
 8018e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e20:	460c      	mov	r4, r1
 8018e22:	2001      	movs	r0, #1
 8018e24:	e7a5      	b.n	8018d72 <_vfiprintf_r+0x11a>
 8018e26:	2300      	movs	r3, #0
 8018e28:	3401      	adds	r4, #1
 8018e2a:	9305      	str	r3, [sp, #20]
 8018e2c:	4619      	mov	r1, r3
 8018e2e:	f04f 0c0a 	mov.w	ip, #10
 8018e32:	4620      	mov	r0, r4
 8018e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e38:	3a30      	subs	r2, #48	; 0x30
 8018e3a:	2a09      	cmp	r2, #9
 8018e3c:	d903      	bls.n	8018e46 <_vfiprintf_r+0x1ee>
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d0c5      	beq.n	8018dce <_vfiprintf_r+0x176>
 8018e42:	9105      	str	r1, [sp, #20]
 8018e44:	e7c3      	b.n	8018dce <_vfiprintf_r+0x176>
 8018e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e4a:	4604      	mov	r4, r0
 8018e4c:	2301      	movs	r3, #1
 8018e4e:	e7f0      	b.n	8018e32 <_vfiprintf_r+0x1da>
 8018e50:	ab03      	add	r3, sp, #12
 8018e52:	9300      	str	r3, [sp, #0]
 8018e54:	462a      	mov	r2, r5
 8018e56:	4b16      	ldr	r3, [pc, #88]	; (8018eb0 <_vfiprintf_r+0x258>)
 8018e58:	a904      	add	r1, sp, #16
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	f7fd fcb8 	bl	80167d0 <_printf_float>
 8018e60:	4607      	mov	r7, r0
 8018e62:	1c78      	adds	r0, r7, #1
 8018e64:	d1d6      	bne.n	8018e14 <_vfiprintf_r+0x1bc>
 8018e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e68:	07d9      	lsls	r1, r3, #31
 8018e6a:	d405      	bmi.n	8018e78 <_vfiprintf_r+0x220>
 8018e6c:	89ab      	ldrh	r3, [r5, #12]
 8018e6e:	059a      	lsls	r2, r3, #22
 8018e70:	d402      	bmi.n	8018e78 <_vfiprintf_r+0x220>
 8018e72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e74:	f7fd fba8 	bl	80165c8 <__retarget_lock_release_recursive>
 8018e78:	89ab      	ldrh	r3, [r5, #12]
 8018e7a:	065b      	lsls	r3, r3, #25
 8018e7c:	f53f af12 	bmi.w	8018ca4 <_vfiprintf_r+0x4c>
 8018e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e82:	e711      	b.n	8018ca8 <_vfiprintf_r+0x50>
 8018e84:	ab03      	add	r3, sp, #12
 8018e86:	9300      	str	r3, [sp, #0]
 8018e88:	462a      	mov	r2, r5
 8018e8a:	4b09      	ldr	r3, [pc, #36]	; (8018eb0 <_vfiprintf_r+0x258>)
 8018e8c:	a904      	add	r1, sp, #16
 8018e8e:	4630      	mov	r0, r6
 8018e90:	f7fd ff2a 	bl	8016ce8 <_printf_i>
 8018e94:	e7e4      	b.n	8018e60 <_vfiprintf_r+0x208>
 8018e96:	bf00      	nop
 8018e98:	080247e8 	.word	0x080247e8
 8018e9c:	08024808 	.word	0x08024808
 8018ea0:	080247c8 	.word	0x080247c8
 8018ea4:	08024bf4 	.word	0x08024bf4
 8018ea8:	08024bfe 	.word	0x08024bfe
 8018eac:	080167d1 	.word	0x080167d1
 8018eb0:	08018c33 	.word	0x08018c33
 8018eb4:	08024bfa 	.word	0x08024bfa

08018eb8 <_read_r>:
 8018eb8:	b538      	push	{r3, r4, r5, lr}
 8018eba:	4d07      	ldr	r5, [pc, #28]	; (8018ed8 <_read_r+0x20>)
 8018ebc:	4604      	mov	r4, r0
 8018ebe:	4608      	mov	r0, r1
 8018ec0:	4611      	mov	r1, r2
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	602a      	str	r2, [r5, #0]
 8018ec6:	461a      	mov	r2, r3
 8018ec8:	f7e9 fcaa 	bl	8002820 <_read>
 8018ecc:	1c43      	adds	r3, r0, #1
 8018ece:	d102      	bne.n	8018ed6 <_read_r+0x1e>
 8018ed0:	682b      	ldr	r3, [r5, #0]
 8018ed2:	b103      	cbz	r3, 8018ed6 <_read_r+0x1e>
 8018ed4:	6023      	str	r3, [r4, #0]
 8018ed6:	bd38      	pop	{r3, r4, r5, pc}
 8018ed8:	24006bec 	.word	0x24006bec

08018edc <__swbuf_r>:
 8018edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ede:	460e      	mov	r6, r1
 8018ee0:	4614      	mov	r4, r2
 8018ee2:	4605      	mov	r5, r0
 8018ee4:	b118      	cbz	r0, 8018eee <__swbuf_r+0x12>
 8018ee6:	6983      	ldr	r3, [r0, #24]
 8018ee8:	b90b      	cbnz	r3, 8018eee <__swbuf_r+0x12>
 8018eea:	f7fd faa9 	bl	8016440 <__sinit>
 8018eee:	4b21      	ldr	r3, [pc, #132]	; (8018f74 <__swbuf_r+0x98>)
 8018ef0:	429c      	cmp	r4, r3
 8018ef2:	d12b      	bne.n	8018f4c <__swbuf_r+0x70>
 8018ef4:	686c      	ldr	r4, [r5, #4]
 8018ef6:	69a3      	ldr	r3, [r4, #24]
 8018ef8:	60a3      	str	r3, [r4, #8]
 8018efa:	89a3      	ldrh	r3, [r4, #12]
 8018efc:	071a      	lsls	r2, r3, #28
 8018efe:	d52f      	bpl.n	8018f60 <__swbuf_r+0x84>
 8018f00:	6923      	ldr	r3, [r4, #16]
 8018f02:	b36b      	cbz	r3, 8018f60 <__swbuf_r+0x84>
 8018f04:	6923      	ldr	r3, [r4, #16]
 8018f06:	6820      	ldr	r0, [r4, #0]
 8018f08:	1ac0      	subs	r0, r0, r3
 8018f0a:	6963      	ldr	r3, [r4, #20]
 8018f0c:	b2f6      	uxtb	r6, r6
 8018f0e:	4283      	cmp	r3, r0
 8018f10:	4637      	mov	r7, r6
 8018f12:	dc04      	bgt.n	8018f1e <__swbuf_r+0x42>
 8018f14:	4621      	mov	r1, r4
 8018f16:	4628      	mov	r0, r5
 8018f18:	f7ff f8c2 	bl	80180a0 <_fflush_r>
 8018f1c:	bb30      	cbnz	r0, 8018f6c <__swbuf_r+0x90>
 8018f1e:	68a3      	ldr	r3, [r4, #8]
 8018f20:	3b01      	subs	r3, #1
 8018f22:	60a3      	str	r3, [r4, #8]
 8018f24:	6823      	ldr	r3, [r4, #0]
 8018f26:	1c5a      	adds	r2, r3, #1
 8018f28:	6022      	str	r2, [r4, #0]
 8018f2a:	701e      	strb	r6, [r3, #0]
 8018f2c:	6963      	ldr	r3, [r4, #20]
 8018f2e:	3001      	adds	r0, #1
 8018f30:	4283      	cmp	r3, r0
 8018f32:	d004      	beq.n	8018f3e <__swbuf_r+0x62>
 8018f34:	89a3      	ldrh	r3, [r4, #12]
 8018f36:	07db      	lsls	r3, r3, #31
 8018f38:	d506      	bpl.n	8018f48 <__swbuf_r+0x6c>
 8018f3a:	2e0a      	cmp	r6, #10
 8018f3c:	d104      	bne.n	8018f48 <__swbuf_r+0x6c>
 8018f3e:	4621      	mov	r1, r4
 8018f40:	4628      	mov	r0, r5
 8018f42:	f7ff f8ad 	bl	80180a0 <_fflush_r>
 8018f46:	b988      	cbnz	r0, 8018f6c <__swbuf_r+0x90>
 8018f48:	4638      	mov	r0, r7
 8018f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f4c:	4b0a      	ldr	r3, [pc, #40]	; (8018f78 <__swbuf_r+0x9c>)
 8018f4e:	429c      	cmp	r4, r3
 8018f50:	d101      	bne.n	8018f56 <__swbuf_r+0x7a>
 8018f52:	68ac      	ldr	r4, [r5, #8]
 8018f54:	e7cf      	b.n	8018ef6 <__swbuf_r+0x1a>
 8018f56:	4b09      	ldr	r3, [pc, #36]	; (8018f7c <__swbuf_r+0xa0>)
 8018f58:	429c      	cmp	r4, r3
 8018f5a:	bf08      	it	eq
 8018f5c:	68ec      	ldreq	r4, [r5, #12]
 8018f5e:	e7ca      	b.n	8018ef6 <__swbuf_r+0x1a>
 8018f60:	4621      	mov	r1, r4
 8018f62:	4628      	mov	r0, r5
 8018f64:	f000 f80c 	bl	8018f80 <__swsetup_r>
 8018f68:	2800      	cmp	r0, #0
 8018f6a:	d0cb      	beq.n	8018f04 <__swbuf_r+0x28>
 8018f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8018f70:	e7ea      	b.n	8018f48 <__swbuf_r+0x6c>
 8018f72:	bf00      	nop
 8018f74:	080247e8 	.word	0x080247e8
 8018f78:	08024808 	.word	0x08024808
 8018f7c:	080247c8 	.word	0x080247c8

08018f80 <__swsetup_r>:
 8018f80:	4b32      	ldr	r3, [pc, #200]	; (801904c <__swsetup_r+0xcc>)
 8018f82:	b570      	push	{r4, r5, r6, lr}
 8018f84:	681d      	ldr	r5, [r3, #0]
 8018f86:	4606      	mov	r6, r0
 8018f88:	460c      	mov	r4, r1
 8018f8a:	b125      	cbz	r5, 8018f96 <__swsetup_r+0x16>
 8018f8c:	69ab      	ldr	r3, [r5, #24]
 8018f8e:	b913      	cbnz	r3, 8018f96 <__swsetup_r+0x16>
 8018f90:	4628      	mov	r0, r5
 8018f92:	f7fd fa55 	bl	8016440 <__sinit>
 8018f96:	4b2e      	ldr	r3, [pc, #184]	; (8019050 <__swsetup_r+0xd0>)
 8018f98:	429c      	cmp	r4, r3
 8018f9a:	d10f      	bne.n	8018fbc <__swsetup_r+0x3c>
 8018f9c:	686c      	ldr	r4, [r5, #4]
 8018f9e:	89a3      	ldrh	r3, [r4, #12]
 8018fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018fa4:	0719      	lsls	r1, r3, #28
 8018fa6:	d42c      	bmi.n	8019002 <__swsetup_r+0x82>
 8018fa8:	06dd      	lsls	r5, r3, #27
 8018faa:	d411      	bmi.n	8018fd0 <__swsetup_r+0x50>
 8018fac:	2309      	movs	r3, #9
 8018fae:	6033      	str	r3, [r6, #0]
 8018fb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018fb4:	81a3      	strh	r3, [r4, #12]
 8018fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8018fba:	e03e      	b.n	801903a <__swsetup_r+0xba>
 8018fbc:	4b25      	ldr	r3, [pc, #148]	; (8019054 <__swsetup_r+0xd4>)
 8018fbe:	429c      	cmp	r4, r3
 8018fc0:	d101      	bne.n	8018fc6 <__swsetup_r+0x46>
 8018fc2:	68ac      	ldr	r4, [r5, #8]
 8018fc4:	e7eb      	b.n	8018f9e <__swsetup_r+0x1e>
 8018fc6:	4b24      	ldr	r3, [pc, #144]	; (8019058 <__swsetup_r+0xd8>)
 8018fc8:	429c      	cmp	r4, r3
 8018fca:	bf08      	it	eq
 8018fcc:	68ec      	ldreq	r4, [r5, #12]
 8018fce:	e7e6      	b.n	8018f9e <__swsetup_r+0x1e>
 8018fd0:	0758      	lsls	r0, r3, #29
 8018fd2:	d512      	bpl.n	8018ffa <__swsetup_r+0x7a>
 8018fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018fd6:	b141      	cbz	r1, 8018fea <__swsetup_r+0x6a>
 8018fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018fdc:	4299      	cmp	r1, r3
 8018fde:	d002      	beq.n	8018fe6 <__swsetup_r+0x66>
 8018fe0:	4630      	mov	r0, r6
 8018fe2:	f7ff fc63 	bl	80188ac <_free_r>
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	6363      	str	r3, [r4, #52]	; 0x34
 8018fea:	89a3      	ldrh	r3, [r4, #12]
 8018fec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018ff0:	81a3      	strh	r3, [r4, #12]
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	6063      	str	r3, [r4, #4]
 8018ff6:	6923      	ldr	r3, [r4, #16]
 8018ff8:	6023      	str	r3, [r4, #0]
 8018ffa:	89a3      	ldrh	r3, [r4, #12]
 8018ffc:	f043 0308 	orr.w	r3, r3, #8
 8019000:	81a3      	strh	r3, [r4, #12]
 8019002:	6923      	ldr	r3, [r4, #16]
 8019004:	b94b      	cbnz	r3, 801901a <__swsetup_r+0x9a>
 8019006:	89a3      	ldrh	r3, [r4, #12]
 8019008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801900c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019010:	d003      	beq.n	801901a <__swsetup_r+0x9a>
 8019012:	4621      	mov	r1, r4
 8019014:	4630      	mov	r0, r6
 8019016:	f000 f84d 	bl	80190b4 <__smakebuf_r>
 801901a:	89a0      	ldrh	r0, [r4, #12]
 801901c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019020:	f010 0301 	ands.w	r3, r0, #1
 8019024:	d00a      	beq.n	801903c <__swsetup_r+0xbc>
 8019026:	2300      	movs	r3, #0
 8019028:	60a3      	str	r3, [r4, #8]
 801902a:	6963      	ldr	r3, [r4, #20]
 801902c:	425b      	negs	r3, r3
 801902e:	61a3      	str	r3, [r4, #24]
 8019030:	6923      	ldr	r3, [r4, #16]
 8019032:	b943      	cbnz	r3, 8019046 <__swsetup_r+0xc6>
 8019034:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019038:	d1ba      	bne.n	8018fb0 <__swsetup_r+0x30>
 801903a:	bd70      	pop	{r4, r5, r6, pc}
 801903c:	0781      	lsls	r1, r0, #30
 801903e:	bf58      	it	pl
 8019040:	6963      	ldrpl	r3, [r4, #20]
 8019042:	60a3      	str	r3, [r4, #8]
 8019044:	e7f4      	b.n	8019030 <__swsetup_r+0xb0>
 8019046:	2000      	movs	r0, #0
 8019048:	e7f7      	b.n	801903a <__swsetup_r+0xba>
 801904a:	bf00      	nop
 801904c:	24000260 	.word	0x24000260
 8019050:	080247e8 	.word	0x080247e8
 8019054:	08024808 	.word	0x08024808
 8019058:	080247c8 	.word	0x080247c8

0801905c <abort>:
 801905c:	b508      	push	{r3, lr}
 801905e:	2006      	movs	r0, #6
 8019060:	f000 f8e2 	bl	8019228 <raise>
 8019064:	2001      	movs	r0, #1
 8019066:	f7e9 fbd1 	bl	800280c <_exit>

0801906a <__swhatbuf_r>:
 801906a:	b570      	push	{r4, r5, r6, lr}
 801906c:	460e      	mov	r6, r1
 801906e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019072:	2900      	cmp	r1, #0
 8019074:	b096      	sub	sp, #88	; 0x58
 8019076:	4614      	mov	r4, r2
 8019078:	461d      	mov	r5, r3
 801907a:	da07      	bge.n	801908c <__swhatbuf_r+0x22>
 801907c:	2300      	movs	r3, #0
 801907e:	602b      	str	r3, [r5, #0]
 8019080:	89b3      	ldrh	r3, [r6, #12]
 8019082:	061a      	lsls	r2, r3, #24
 8019084:	d410      	bmi.n	80190a8 <__swhatbuf_r+0x3e>
 8019086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801908a:	e00e      	b.n	80190aa <__swhatbuf_r+0x40>
 801908c:	466a      	mov	r2, sp
 801908e:	f000 f8f5 	bl	801927c <_fstat_r>
 8019092:	2800      	cmp	r0, #0
 8019094:	dbf2      	blt.n	801907c <__swhatbuf_r+0x12>
 8019096:	9a01      	ldr	r2, [sp, #4]
 8019098:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801909c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80190a0:	425a      	negs	r2, r3
 80190a2:	415a      	adcs	r2, r3
 80190a4:	602a      	str	r2, [r5, #0]
 80190a6:	e7ee      	b.n	8019086 <__swhatbuf_r+0x1c>
 80190a8:	2340      	movs	r3, #64	; 0x40
 80190aa:	2000      	movs	r0, #0
 80190ac:	6023      	str	r3, [r4, #0]
 80190ae:	b016      	add	sp, #88	; 0x58
 80190b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080190b4 <__smakebuf_r>:
 80190b4:	898b      	ldrh	r3, [r1, #12]
 80190b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80190b8:	079d      	lsls	r5, r3, #30
 80190ba:	4606      	mov	r6, r0
 80190bc:	460c      	mov	r4, r1
 80190be:	d507      	bpl.n	80190d0 <__smakebuf_r+0x1c>
 80190c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80190c4:	6023      	str	r3, [r4, #0]
 80190c6:	6123      	str	r3, [r4, #16]
 80190c8:	2301      	movs	r3, #1
 80190ca:	6163      	str	r3, [r4, #20]
 80190cc:	b002      	add	sp, #8
 80190ce:	bd70      	pop	{r4, r5, r6, pc}
 80190d0:	ab01      	add	r3, sp, #4
 80190d2:	466a      	mov	r2, sp
 80190d4:	f7ff ffc9 	bl	801906a <__swhatbuf_r>
 80190d8:	9900      	ldr	r1, [sp, #0]
 80190da:	4605      	mov	r5, r0
 80190dc:	4630      	mov	r0, r6
 80190de:	f7fd fa8b 	bl	80165f8 <_malloc_r>
 80190e2:	b948      	cbnz	r0, 80190f8 <__smakebuf_r+0x44>
 80190e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190e8:	059a      	lsls	r2, r3, #22
 80190ea:	d4ef      	bmi.n	80190cc <__smakebuf_r+0x18>
 80190ec:	f023 0303 	bic.w	r3, r3, #3
 80190f0:	f043 0302 	orr.w	r3, r3, #2
 80190f4:	81a3      	strh	r3, [r4, #12]
 80190f6:	e7e3      	b.n	80190c0 <__smakebuf_r+0xc>
 80190f8:	4b0d      	ldr	r3, [pc, #52]	; (8019130 <__smakebuf_r+0x7c>)
 80190fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80190fc:	89a3      	ldrh	r3, [r4, #12]
 80190fe:	6020      	str	r0, [r4, #0]
 8019100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019104:	81a3      	strh	r3, [r4, #12]
 8019106:	9b00      	ldr	r3, [sp, #0]
 8019108:	6163      	str	r3, [r4, #20]
 801910a:	9b01      	ldr	r3, [sp, #4]
 801910c:	6120      	str	r0, [r4, #16]
 801910e:	b15b      	cbz	r3, 8019128 <__smakebuf_r+0x74>
 8019110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019114:	4630      	mov	r0, r6
 8019116:	f000 f8c3 	bl	80192a0 <_isatty_r>
 801911a:	b128      	cbz	r0, 8019128 <__smakebuf_r+0x74>
 801911c:	89a3      	ldrh	r3, [r4, #12]
 801911e:	f023 0303 	bic.w	r3, r3, #3
 8019122:	f043 0301 	orr.w	r3, r3, #1
 8019126:	81a3      	strh	r3, [r4, #12]
 8019128:	89a0      	ldrh	r0, [r4, #12]
 801912a:	4305      	orrs	r5, r0
 801912c:	81a5      	strh	r5, [r4, #12]
 801912e:	e7cd      	b.n	80190cc <__smakebuf_r+0x18>
 8019130:	080163d9 	.word	0x080163d9

08019134 <__ascii_mbtowc>:
 8019134:	b082      	sub	sp, #8
 8019136:	b901      	cbnz	r1, 801913a <__ascii_mbtowc+0x6>
 8019138:	a901      	add	r1, sp, #4
 801913a:	b142      	cbz	r2, 801914e <__ascii_mbtowc+0x1a>
 801913c:	b14b      	cbz	r3, 8019152 <__ascii_mbtowc+0x1e>
 801913e:	7813      	ldrb	r3, [r2, #0]
 8019140:	600b      	str	r3, [r1, #0]
 8019142:	7812      	ldrb	r2, [r2, #0]
 8019144:	1e10      	subs	r0, r2, #0
 8019146:	bf18      	it	ne
 8019148:	2001      	movne	r0, #1
 801914a:	b002      	add	sp, #8
 801914c:	4770      	bx	lr
 801914e:	4610      	mov	r0, r2
 8019150:	e7fb      	b.n	801914a <__ascii_mbtowc+0x16>
 8019152:	f06f 0001 	mvn.w	r0, #1
 8019156:	e7f8      	b.n	801914a <__ascii_mbtowc+0x16>

08019158 <memmove>:
 8019158:	4288      	cmp	r0, r1
 801915a:	b510      	push	{r4, lr}
 801915c:	eb01 0402 	add.w	r4, r1, r2
 8019160:	d902      	bls.n	8019168 <memmove+0x10>
 8019162:	4284      	cmp	r4, r0
 8019164:	4623      	mov	r3, r4
 8019166:	d807      	bhi.n	8019178 <memmove+0x20>
 8019168:	1e43      	subs	r3, r0, #1
 801916a:	42a1      	cmp	r1, r4
 801916c:	d008      	beq.n	8019180 <memmove+0x28>
 801916e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019176:	e7f8      	b.n	801916a <memmove+0x12>
 8019178:	4402      	add	r2, r0
 801917a:	4601      	mov	r1, r0
 801917c:	428a      	cmp	r2, r1
 801917e:	d100      	bne.n	8019182 <memmove+0x2a>
 8019180:	bd10      	pop	{r4, pc}
 8019182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801918a:	e7f7      	b.n	801917c <memmove+0x24>

0801918c <_realloc_r>:
 801918c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801918e:	4607      	mov	r7, r0
 8019190:	4614      	mov	r4, r2
 8019192:	460e      	mov	r6, r1
 8019194:	b921      	cbnz	r1, 80191a0 <_realloc_r+0x14>
 8019196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801919a:	4611      	mov	r1, r2
 801919c:	f7fd ba2c 	b.w	80165f8 <_malloc_r>
 80191a0:	b922      	cbnz	r2, 80191ac <_realloc_r+0x20>
 80191a2:	f7ff fb83 	bl	80188ac <_free_r>
 80191a6:	4625      	mov	r5, r4
 80191a8:	4628      	mov	r0, r5
 80191aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191ac:	f000 f888 	bl	80192c0 <_malloc_usable_size_r>
 80191b0:	42a0      	cmp	r0, r4
 80191b2:	d20f      	bcs.n	80191d4 <_realloc_r+0x48>
 80191b4:	4621      	mov	r1, r4
 80191b6:	4638      	mov	r0, r7
 80191b8:	f7fd fa1e 	bl	80165f8 <_malloc_r>
 80191bc:	4605      	mov	r5, r0
 80191be:	2800      	cmp	r0, #0
 80191c0:	d0f2      	beq.n	80191a8 <_realloc_r+0x1c>
 80191c2:	4631      	mov	r1, r6
 80191c4:	4622      	mov	r2, r4
 80191c6:	f7fd fa00 	bl	80165ca <memcpy>
 80191ca:	4631      	mov	r1, r6
 80191cc:	4638      	mov	r0, r7
 80191ce:	f7ff fb6d 	bl	80188ac <_free_r>
 80191d2:	e7e9      	b.n	80191a8 <_realloc_r+0x1c>
 80191d4:	4635      	mov	r5, r6
 80191d6:	e7e7      	b.n	80191a8 <_realloc_r+0x1c>

080191d8 <_raise_r>:
 80191d8:	291f      	cmp	r1, #31
 80191da:	b538      	push	{r3, r4, r5, lr}
 80191dc:	4604      	mov	r4, r0
 80191de:	460d      	mov	r5, r1
 80191e0:	d904      	bls.n	80191ec <_raise_r+0x14>
 80191e2:	2316      	movs	r3, #22
 80191e4:	6003      	str	r3, [r0, #0]
 80191e6:	f04f 30ff 	mov.w	r0, #4294967295
 80191ea:	bd38      	pop	{r3, r4, r5, pc}
 80191ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80191ee:	b112      	cbz	r2, 80191f6 <_raise_r+0x1e>
 80191f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80191f4:	b94b      	cbnz	r3, 801920a <_raise_r+0x32>
 80191f6:	4620      	mov	r0, r4
 80191f8:	f000 f830 	bl	801925c <_getpid_r>
 80191fc:	462a      	mov	r2, r5
 80191fe:	4601      	mov	r1, r0
 8019200:	4620      	mov	r0, r4
 8019202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019206:	f000 b817 	b.w	8019238 <_kill_r>
 801920a:	2b01      	cmp	r3, #1
 801920c:	d00a      	beq.n	8019224 <_raise_r+0x4c>
 801920e:	1c59      	adds	r1, r3, #1
 8019210:	d103      	bne.n	801921a <_raise_r+0x42>
 8019212:	2316      	movs	r3, #22
 8019214:	6003      	str	r3, [r0, #0]
 8019216:	2001      	movs	r0, #1
 8019218:	e7e7      	b.n	80191ea <_raise_r+0x12>
 801921a:	2400      	movs	r4, #0
 801921c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019220:	4628      	mov	r0, r5
 8019222:	4798      	blx	r3
 8019224:	2000      	movs	r0, #0
 8019226:	e7e0      	b.n	80191ea <_raise_r+0x12>

08019228 <raise>:
 8019228:	4b02      	ldr	r3, [pc, #8]	; (8019234 <raise+0xc>)
 801922a:	4601      	mov	r1, r0
 801922c:	6818      	ldr	r0, [r3, #0]
 801922e:	f7ff bfd3 	b.w	80191d8 <_raise_r>
 8019232:	bf00      	nop
 8019234:	24000260 	.word	0x24000260

08019238 <_kill_r>:
 8019238:	b538      	push	{r3, r4, r5, lr}
 801923a:	4d07      	ldr	r5, [pc, #28]	; (8019258 <_kill_r+0x20>)
 801923c:	2300      	movs	r3, #0
 801923e:	4604      	mov	r4, r0
 8019240:	4608      	mov	r0, r1
 8019242:	4611      	mov	r1, r2
 8019244:	602b      	str	r3, [r5, #0]
 8019246:	f7e9 fad1 	bl	80027ec <_kill>
 801924a:	1c43      	adds	r3, r0, #1
 801924c:	d102      	bne.n	8019254 <_kill_r+0x1c>
 801924e:	682b      	ldr	r3, [r5, #0]
 8019250:	b103      	cbz	r3, 8019254 <_kill_r+0x1c>
 8019252:	6023      	str	r3, [r4, #0]
 8019254:	bd38      	pop	{r3, r4, r5, pc}
 8019256:	bf00      	nop
 8019258:	24006bec 	.word	0x24006bec

0801925c <_getpid_r>:
 801925c:	f7e9 babe 	b.w	80027dc <_getpid>

08019260 <__ascii_wctomb>:
 8019260:	b149      	cbz	r1, 8019276 <__ascii_wctomb+0x16>
 8019262:	2aff      	cmp	r2, #255	; 0xff
 8019264:	bf85      	ittet	hi
 8019266:	238a      	movhi	r3, #138	; 0x8a
 8019268:	6003      	strhi	r3, [r0, #0]
 801926a:	700a      	strbls	r2, [r1, #0]
 801926c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019270:	bf98      	it	ls
 8019272:	2001      	movls	r0, #1
 8019274:	4770      	bx	lr
 8019276:	4608      	mov	r0, r1
 8019278:	4770      	bx	lr
	...

0801927c <_fstat_r>:
 801927c:	b538      	push	{r3, r4, r5, lr}
 801927e:	4d07      	ldr	r5, [pc, #28]	; (801929c <_fstat_r+0x20>)
 8019280:	2300      	movs	r3, #0
 8019282:	4604      	mov	r4, r0
 8019284:	4608      	mov	r0, r1
 8019286:	4611      	mov	r1, r2
 8019288:	602b      	str	r3, [r5, #0]
 801928a:	f7e9 faf2 	bl	8002872 <_fstat>
 801928e:	1c43      	adds	r3, r0, #1
 8019290:	d102      	bne.n	8019298 <_fstat_r+0x1c>
 8019292:	682b      	ldr	r3, [r5, #0]
 8019294:	b103      	cbz	r3, 8019298 <_fstat_r+0x1c>
 8019296:	6023      	str	r3, [r4, #0]
 8019298:	bd38      	pop	{r3, r4, r5, pc}
 801929a:	bf00      	nop
 801929c:	24006bec 	.word	0x24006bec

080192a0 <_isatty_r>:
 80192a0:	b538      	push	{r3, r4, r5, lr}
 80192a2:	4d06      	ldr	r5, [pc, #24]	; (80192bc <_isatty_r+0x1c>)
 80192a4:	2300      	movs	r3, #0
 80192a6:	4604      	mov	r4, r0
 80192a8:	4608      	mov	r0, r1
 80192aa:	602b      	str	r3, [r5, #0]
 80192ac:	f7e9 faf1 	bl	8002892 <_isatty>
 80192b0:	1c43      	adds	r3, r0, #1
 80192b2:	d102      	bne.n	80192ba <_isatty_r+0x1a>
 80192b4:	682b      	ldr	r3, [r5, #0]
 80192b6:	b103      	cbz	r3, 80192ba <_isatty_r+0x1a>
 80192b8:	6023      	str	r3, [r4, #0]
 80192ba:	bd38      	pop	{r3, r4, r5, pc}
 80192bc:	24006bec 	.word	0x24006bec

080192c0 <_malloc_usable_size_r>:
 80192c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80192c4:	1f18      	subs	r0, r3, #4
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	bfbc      	itt	lt
 80192ca:	580b      	ldrlt	r3, [r1, r0]
 80192cc:	18c0      	addlt	r0, r0, r3
 80192ce:	4770      	bx	lr

080192d0 <_init>:
 80192d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192d2:	bf00      	nop
 80192d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192d6:	bc08      	pop	{r3}
 80192d8:	469e      	mov	lr, r3
 80192da:	4770      	bx	lr

080192dc <_fini>:
 80192dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192de:	bf00      	nop
 80192e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192e2:	bc08      	pop	{r3}
 80192e4:	469e      	mov	lr, r3
 80192e6:	4770      	bx	lr
