
743-6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b910  080181f8  080181f8  000281f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023b08  08023b08  00033b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023b10  08023b10  00033b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08023b14  08023b14  00033b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000042c  24000000  08023b18  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000066a4  2400042c  08023f44  0004042c  2**2
                  ALLOC
  8 ._user_heap_stack 00004000  24006ad0  08023f44  00046ad0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004042c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00058b60  00000000  00000000  0004045a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000961a  00000000  00000000  00098fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028e8  00000000  00000000  000a25d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000025a8  00000000  00000000  000a4ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000453f4  00000000  00000000  000a7468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00038e1b  00000000  00000000  000ec85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001941bb  00000000  00000000  00125677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002b9832  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bae4  00000000  00000000  002b9888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400042c 	.word	0x2400042c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080181e0 	.word	0x080181e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000430 	.word	0x24000430
 80002dc:	080181e0 	.word	0x080181e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <Send_cmd>:
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0


void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	460b      	mov	r3, r1
 8000694:	71bb      	strb	r3, [r7, #6]
 8000696:	4613      	mov	r3, r2
 8000698:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	b29a      	uxth	r2, r3
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	4413      	add	r3, r2
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4413      	add	r3, r2
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	f203 1305 	addw	r3, r3, #261	; 0x105
 80006b2:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 80006b4:	8afb      	ldrh	r3, [r7, #22]
 80006b6:	425b      	negs	r3, r3
 80006b8:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 80006ba:	237e      	movs	r3, #126	; 0x7e
 80006bc:	733b      	strb	r3, [r7, #12]
 80006be:	23ff      	movs	r3, #255	; 0xff
 80006c0:	737b      	strb	r3, [r7, #13]
 80006c2:	2306      	movs	r3, #6
 80006c4:	73bb      	strb	r3, [r7, #14]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	2300      	movs	r3, #0
 80006cc:	743b      	strb	r3, [r7, #16]
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	747b      	strb	r3, [r7, #17]
 80006d2:	797b      	ldrb	r3, [r7, #5]
 80006d4:	74bb      	strb	r3, [r7, #18]
 80006d6:	8afb      	ldrh	r3, [r7, #22]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	74fb      	strb	r3, [r7, #19]
 80006e0:	8afb      	ldrh	r3, [r7, #22]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	753b      	strb	r3, [r7, #20]
 80006e6:	23ef      	movs	r3, #239	; 0xef
 80006e8:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart3, CmdSequence, 10, 100);
 80006ea:	f107 010c 	add.w	r1, r7, #12
 80006ee:	2364      	movs	r3, #100	; 0x64
 80006f0:	220a      	movs	r2, #10
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <Send_cmd+0x78>)
 80006f4:	f00d fd6b 	bl	800e1ce <HAL_UART_Transmit>
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	24004e40 	.word	0x24004e40

08000704 <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8000708:	2201      	movs	r2, #1
 800070a:	2100      	movs	r1, #0
 800070c:	2003      	movs	r0, #3
 800070e:	f7ff ffbb 	bl	8000688 <Send_cmd>
  HAL_Delay(200);
 8000712:	20c8      	movs	r0, #200	; 0xc8
 8000714:	f004 fb90 	bl	8004e38 <HAL_Delay>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <DF_Init>:


void DF_Init (uint8_t volume)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 8000726:	2202      	movs	r2, #2
 8000728:	2100      	movs	r1, #0
 800072a:	203f      	movs	r0, #63	; 0x3f
 800072c:	f7ff ffac 	bl	8000688 <Send_cmd>
	HAL_Delay(200);
 8000730:	20c8      	movs	r0, #200	; 0xc8
 8000732:	f004 fb81 	bl	8004e38 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	461a      	mov	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	2006      	movs	r0, #6
 800073e:	f7ff ffa3 	bl	8000688 <Send_cmd>
	HAL_Delay(500);
 8000742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000746:	f004 fb77 	bl	8004e38 <HAL_Delay>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <DF_Play>:

void DF_Play (uint16_t num)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	80fb      	strh	r3, [r7, #6]
	Send_cmd(0x03, 0x00, num);
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	2003      	movs	r0, #3
 8000766:	f7ff ff8f 	bl	8000688 <Send_cmd>
	HAL_Delay(200);
 800076a:	20c8      	movs	r0, #200	; 0xc8
 800076c:	f004 fb64 	bl	8004e38 <HAL_Delay>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800079c:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_ADC1_Init+0xe8>)
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <MX_ADC1_Init+0xec>)
 80007a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007a2:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fa:	4819      	ldr	r0, [pc, #100]	; (8000860 <MX_ADC1_Init+0xe8>)
 80007fc:	f004 fcfc 	bl	80051f8 <HAL_ADC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000806:	f001 fbc5 	bl	8001f94 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4812      	ldr	r0, [pc, #72]	; (8000860 <MX_ADC1_Init+0xe8>)
 8000816:	f005 fb0f 	bl	8005e38 <HAL_ADCEx_MultiModeConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000820:	f001 fbb8 	bl	8001f94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_ADC1_Init+0xf0>)
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000828:	2306      	movs	r3, #6
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000830:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000834:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000836:	2304      	movs	r3, #4
 8000838:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_ADC1_Init+0xe8>)
 8000848:	f004 fe76 	bl	8005538 <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000852:	f001 fb9f 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24004c78 	.word	0x24004c78
 8000864:	40022000 	.word	0x40022000
 8000868:	1d500080 	.word	0x1d500080

0800086c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000884:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_ADC2_Init+0xc0>)
 8000886:	4a2a      	ldr	r2, [pc, #168]	; (8000930 <MX_ADC2_Init+0xc4>)
 8000888:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_ADC2_Init+0xc0>)
 800088c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000890:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_ADC2_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_ADC2_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_ADC2_Init+0xc0>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC2_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_ADC2_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_ADC2_Init+0xc0>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC2_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_ADC2_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ADC2_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_ADC2_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_ADC2_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ADC2_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ADC2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <MX_ADC2_Init+0xc0>)
 80008e4:	f004 fc88 	bl	80051f8 <HAL_ADC_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80008ee:	f001 fb51 	bl	8001f94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_ADC2_Init+0xc8>)
 80008f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f6:	2306      	movs	r3, #6
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000902:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000904:	2304      	movs	r3, #4
 8000906:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_ADC2_Init+0xc0>)
 8000916:	f004 fe0f 	bl	8005538 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000920:	f001 fb38 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	24004c14 	.word	0x24004c14
 8000930:	40022100 	.word	0x40022100
 8000934:	0c900008 	.word	0x0c900008

08000938 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <MX_ADC3_Init+0xc4>)
 8000954:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000956:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000958:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800095c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800096c:	2204      	movs	r2, #4
 800096e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000972:	2200      	movs	r2, #0
 8000974:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800097e:	2201      	movs	r2, #1
 8000980:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_ADC3_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_ADC3_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009b0:	f004 fc22 	bl	80051f8 <HAL_ADC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80009ba:	f001 faeb 	bl	8001f94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_ADC3_Init+0xc8>)
 80009c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c2:	2306      	movs	r3, #6
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d0:	2304      	movs	r3, #4
 80009d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_ADC3_Init+0xc0>)
 80009e2:	f004 fda9 	bl	8005538 <HAL_ADC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80009ec:	f001 fad2 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	24004cdc 	.word	0x24004cdc
 80009fc:	58026000 	.word	0x58026000
 8000a00:	2e300800 	.word	0x2e300800

08000a04 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b090      	sub	sp, #64	; 0x40
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a6f      	ldr	r2, [pc, #444]	; (8000be0 <HAL_ADC_MspInit+0x1dc>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d133      	bne.n	8000a8e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a26:	4b6f      	ldr	r3, [pc, #444]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a6d      	ldr	r2, [pc, #436]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a30:	4b6c      	ldr	r3, [pc, #432]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d10e      	bne.n	8000a56 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a38:	4b6b      	ldr	r3, [pc, #428]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a3e:	4a6a      	ldr	r2, [pc, #424]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a40:	f043 0320 	orr.w	r3, r3, #32
 8000a44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a48:	4b67      	ldr	r3, [pc, #412]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b64      	ldr	r3, [pc, #400]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4a62      	ldr	r2, [pc, #392]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4b60      	ldr	r3, [pc, #384]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a84:	4619      	mov	r1, r3
 8000a86:	4859      	ldr	r0, [pc, #356]	; (8000bec <HAL_ADC_MspInit+0x1e8>)
 8000a88:	f006 fa48 	bl	8006f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a8c:	e0a3      	b.n	8000bd6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC2)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a57      	ldr	r2, [pc, #348]	; (8000bf0 <HAL_ADC_MspInit+0x1ec>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d169      	bne.n	8000b6c <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a98:	4b52      	ldr	r3, [pc, #328]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	4a51      	ldr	r2, [pc, #324]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000aa0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000aa2:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <HAL_ADC_MspInit+0x1e0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10e      	bne.n	8000ac8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab0:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ab2:	f043 0320 	orr.w	r3, r3, #32
 8000ab6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aba:	4b4b      	ldr	r3, [pc, #300]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000abc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac0:	f003 0320 	and.w	r3, r3, #32
 8000ac4:	623b      	str	r3, [r7, #32]
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b47      	ldr	r3, [pc, #284]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a46      	ldr	r2, [pc, #280]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	4a3e      	ldr	r2, [pc, #248]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af6:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	4a37      	ldr	r2, [pc, #220]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b22:	2340      	movs	r3, #64	; 0x40
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b32:	4619      	mov	r1, r3
 8000b34:	482d      	ldr	r0, [pc, #180]	; (8000bec <HAL_ADC_MspInit+0x1e8>)
 8000b36:	f006 f9f1 	bl	8006f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <HAL_ADC_MspInit+0x1f0>)
 8000b4e:	f006 f9e5 	bl	8006f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b62:	4619      	mov	r1, r3
 8000b64:	4824      	ldr	r0, [pc, #144]	; (8000bf8 <HAL_ADC_MspInit+0x1f4>)
 8000b66:	f006 f9d9 	bl	8006f1c <HAL_GPIO_Init>
}
 8000b6a:	e034      	b.n	8000bd6 <HAL_ADC_MspInit+0x1d2>
  else if(adcHandle->Instance==ADC3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_ADC_MspInit+0x1f8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12f      	bne.n	8000bd6 <HAL_ADC_MspInit+0x1d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_ADC_MspInit+0x1e4>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <HAL_ADC_MspInit+0x1f0>)
 8000bc6:	f006 f9a9 	bl	8006f1c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000bca:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000bce:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000bd2:	f004 f96f 	bl	8004eb4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000bd6:	bf00      	nop
 8000bd8:	3740      	adds	r7, #64	; 0x40
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40022000 	.word	0x40022000
 8000be4:	24000448 	.word	0x24000448
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	40022100 	.word	0x40022100
 8000bf4:	58020800 	.word	0x58020800
 8000bf8:	58020400 	.word	0x58020400
 8000bfc:	58026000 	.word	0x58026000

08000c00 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2224      	movs	r2, #36	; 0x24
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f014 fc72 	bl	80154f6 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MX_DAC1_Init+0x74>)
 8000c16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c18:	4815      	ldr	r0, [pc, #84]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c1a:	f005 facb 	bl	80061b4 <HAL_DAC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c24:	f001 f9b6 	bl	8001f94 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000c34:	2302      	movs	r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4619      	mov	r1, r3
 8000c42:	480b      	ldr	r0, [pc, #44]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c44:	f005 fad8 	bl	80061f8 <HAL_DAC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c4e:	f001 f9a1 	bl	8001f94 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2210      	movs	r2, #16
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_DAC1_Init+0x70>)
 8000c5a:	f005 facd 	bl	80061f8 <HAL_DAC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000c64:	f001 f996 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	24004d40 	.word	0x24004d40
 8000c74:	40007400 	.word	0x40007400

08000c78 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <HAL_DAC_MspInit+0x80>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d129      	bne.n	8000cee <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca0:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_DAC_MspInit+0x84>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cd6:	2330      	movs	r3, #48	; 0x30
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_DAC_MspInit+0x88>)
 8000cea:	f006 f917 	bl	8006f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40007400 	.word	0x40007400
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58020000 	.word	0x58020000

08000d04 <RTC_CalendarShow>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

static void RTC_CalendarShow(RTC_DateTypeDef *sdatestructureget,RTC_TimeTypeDef *stimestructureget)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
   /* Both time and date must be obtained or RTC cannot be read next time */
  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, stimestructureget, RTC_FORMAT_BIN);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <RTC_CalendarShow+0x28>)
 8000d14:	f00a ff0e 	bl	800bb34 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, sdatestructureget, RTC_FORMAT_BIN);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <RTC_CalendarShow+0x28>)
 8000d1e:	f00a ff65 	bl	800bbec <HAL_RTC_GetDate>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24004e1c 	.word	0x24004e1c

08000d30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <vApplicationGetIdleTaskMemory+0x30>)
 8000d46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2400044c 	.word	0x2400044c
 8000d60:	24000500 	.word	0x24000500

08000d64 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b0b8      	sub	sp, #224	; 0xe0
 8000d68:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ea0 <MX_FREERTOS_Init+0x13c>)
 8000d6c:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000d70:	461d      	mov	r5, r3
 8000d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f012 f9e5 	bl	8013154 <osThreadCreate>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a45      	ldr	r2, [pc, #276]	; (8000ea4 <MX_FREERTOS_Init+0x140>)
 8000d8e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 256);
 8000d90:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <MX_FREERTOS_Init+0x144>)
 8000d92:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000d96:	461d      	mov	r5, r3
 8000d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000da0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000da4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f012 f9d2 	bl	8013154 <osThreadCreate>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a3e      	ldr	r2, [pc, #248]	; (8000eac <MX_FREERTOS_Init+0x148>)
 8000db4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000db6:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <MX_FREERTOS_Init+0x14c>)
 8000db8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000dca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f012 f9bf 	bl	8013154 <osThreadCreate>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a36      	ldr	r2, [pc, #216]	; (8000eb4 <MX_FREERTOS_Init+0x150>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 8000ddc:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <MX_FREERTOS_Init+0x154>)
 8000dde:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000de2:	461d      	mov	r5, r3
 8000de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000df0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f012 f9ac 	bl	8013154 <osThreadCreate>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a2f      	ldr	r2, [pc, #188]	; (8000ebc <MX_FREERTOS_Init+0x158>)
 8000e00:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, StartTask05, osPriorityNormal, 0, 128);
 8000e02:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <MX_FREERTOS_Init+0x15c>)
 8000e04:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000e08:	461d      	mov	r5, r3
 8000e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000e16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f012 f999 	bl	8013154 <osThreadCreate>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <MX_FREERTOS_Init+0x160>)
 8000e26:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, StartTask06, osPriorityNormal, 0, 128);
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <MX_FREERTOS_Init+0x164>)
 8000e2a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e2e:	461d      	mov	r5, r3
 8000e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8000e3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f012 f986 	bl	8013154 <osThreadCreate>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <MX_FREERTOS_Init+0x168>)
 8000e4c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, StartTask07, osPriorityNormal, 0, 128);
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_FREERTOS_Init+0x16c>)
 8000e50:	f107 041c 	add.w	r4, r7, #28
 8000e54:	461d      	mov	r5, r3
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f012 f973 	bl	8013154 <osThreadCreate>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MX_FREERTOS_Init+0x170>)
 8000e72:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask08 */
  osThreadDef(myTask08, StartTask08, osPriorityNormal, 0, 128);
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_FREERTOS_Init+0x174>)
 8000e76:	463c      	mov	r4, r7
 8000e78:	461d      	mov	r5, r3
 8000e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask08Handle = osThreadCreate(osThread(myTask08), NULL);
 8000e86:	463b      	mov	r3, r7
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f012 f962 	bl	8013154 <osThreadCreate>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_FREERTOS_Init+0x178>)
 8000e94:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000e96:	bf00      	nop
 8000e98:	37e0      	adds	r7, #224	; 0xe0
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08018258 	.word	0x08018258
 8000ea4:	24004d5c 	.word	0x24004d5c
 8000ea8:	08018274 	.word	0x08018274
 8000eac:	24004dc4 	.word	0x24004dc4
 8000eb0:	08018290 	.word	0x08018290
 8000eb4:	24004de0 	.word	0x24004de0
 8000eb8:	080182ac 	.word	0x080182ac
 8000ebc:	24004d70 	.word	0x24004d70
 8000ec0:	080182c8 	.word	0x080182c8
 8000ec4:	24004d6c 	.word	0x24004d6c
 8000ec8:	080182e4 	.word	0x080182e4
 8000ecc:	24004e04 	.word	0x24004e04
 8000ed0:	08018300 	.word	0x08018300
 8000ed4:	24004de4 	.word	0x24004de4
 8000ed8:	0801831c 	.word	0x0801831c
 8000edc:	24004d74 	.word	0x24004d74

08000ee0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ee8:	f013 fcb0 	bl	801484c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
		 HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_12);
 8000eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <StartDefaultTask+0x28>)
 8000ef2:	f006 f9f4 	bl	80072de <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin( GPIOE, GPIO_PIN_3);
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <StartDefaultTask+0x2c>)
 8000efa:	f006 f9f0 	bl	80072de <HAL_GPIO_TogglePin>


	//	 HAL_UART_Transmit(&huart4, GUI_sum_mode,sizeof(GUI_sum_mode), 100);

    osDelay(50);
 8000efe:	2032      	movs	r0, #50	; 0x32
 8000f00:	f012 f974 	bl	80131ec <osDelay>
		 HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_12);
 8000f04:	e7f2      	b.n	8000eec <StartDefaultTask+0xc>
 8000f06:	bf00      	nop
 8000f08:	58020400 	.word	0x58020400
 8000f0c:	58021000 	.word	0x58021000

08000f10 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint16_t Dwin_mess;

	while (1)
	{

		if (Rx_recv)   //DWIN string is get completely
 8000f18:	4bc4      	ldr	r3, [pc, #784]	; (800122c <StartTask02+0x31c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 82b8 	beq.w	8001492 <StartTask02+0x582>
		{
			Rx_recv = 0;   //confirmed Rx_rec
 8000f22:	4bc2      	ldr	r3, [pc, #776]	; (800122c <StartTask02+0x31c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
			GUI_boot = true;
 8000f28:	4bc1      	ldr	r3, [pc, #772]	; (8001230 <StartTask02+0x320>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]

			Dwin_mess = (Rx1_Buffer[4] << 8) + Rx1_Buffer[5];
 8000f2e:	4bc1      	ldr	r3, [pc, #772]	; (8001234 <StartTask02+0x324>)
 8000f30:	791b      	ldrb	r3, [r3, #4]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4bbe      	ldr	r3, [pc, #760]	; (8001234 <StartTask02+0x324>)
 8000f3a:	795b      	ldrb	r3, [r3, #5]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	81bb      	strh	r3, [r7, #12]

			switch (Dwin_mess)
 8000f42:	89bb      	ldrh	r3, [r7, #12]
 8000f44:	f241 6215 	movw	r2, #5653	; 0x1615
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	f300 82a7 	bgt.w	800149c <StartTask02+0x58c>
 8000f4e:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8000f52:	da65      	bge.n	8001020 <StartTask02+0x110>
 8000f54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000f58:	f000 809f 	beq.w	800109a <StartTask02+0x18a>
 8000f5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000f60:	f300 829c 	bgt.w	800149c <StartTask02+0x58c>
 8000f64:	f241 3245 	movw	r2, #4933	; 0x1345
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	f000 81a4 	beq.w	80012b6 <StartTask02+0x3a6>
 8000f6e:	f241 3245 	movw	r2, #4933	; 0x1345
 8000f72:	4293      	cmp	r3, r2
 8000f74:	f300 8292 	bgt.w	800149c <StartTask02+0x58c>
 8000f78:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8000f7c:	f000 8131 	beq.w	80011e2 <StartTask02+0x2d2>
 8000f80:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8000f84:	f300 828a 	bgt.w	800149c <StartTask02+0x58c>
 8000f88:	f241 3205 	movw	r2, #4869	; 0x1305
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	f000 81b8 	beq.w	8001302 <StartTask02+0x3f2>
 8000f92:	f241 3205 	movw	r2, #4869	; 0x1305
 8000f96:	4293      	cmp	r3, r2
 8000f98:	f300 8280 	bgt.w	800149c <StartTask02+0x58c>
 8000f9c:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8000fa0:	f000 81a2 	beq.w	80012e8 <StartTask02+0x3d8>
 8000fa4:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8000fa8:	f300 8278 	bgt.w	800149c <StartTask02+0x58c>
 8000fac:	f241 2298 	movw	r2, #4760	; 0x1298
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	f000 80e5 	beq.w	8001180 <StartTask02+0x270>
 8000fb6:	f241 2298 	movw	r2, #4760	; 0x1298
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	f300 826e 	bgt.w	800149c <StartTask02+0x58c>
 8000fc0:	f241 2296 	movw	r2, #4758	; 0x1296
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	f000 80a7 	beq.w	8001118 <StartTask02+0x208>
 8000fca:	f241 2296 	movw	r2, #4758	; 0x1296
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	f300 8264 	bgt.w	800149c <StartTask02+0x58c>
 8000fd4:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000fd8:	f000 81c5 	beq.w	8001366 <StartTask02+0x456>
 8000fdc:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000fe0:	f300 825c 	bgt.w	800149c <StartTask02+0x58c>
 8000fe4:	f5b3 5f93 	cmp.w	r3, #4704	; 0x1260
 8000fe8:	f000 81b2 	beq.w	8001350 <StartTask02+0x440>
 8000fec:	f5b3 5f93 	cmp.w	r3, #4704	; 0x1260
 8000ff0:	f300 8254 	bgt.w	800149c <StartTask02+0x58c>
 8000ff4:	f241 2250 	movw	r2, #4688	; 0x1250
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	f000 8086 	beq.w	800110a <StartTask02+0x1fa>
 8000ffe:	f241 2250 	movw	r2, #4688	; 0x1250
 8001002:	4293      	cmp	r3, r2
 8001004:	f300 824a 	bgt.w	800149c <StartTask02+0x58c>
 8001008:	f5b3 5f92 	cmp.w	r3, #4672	; 0x1240
 800100c:	d076      	beq.n	80010fc <StartTask02+0x1ec>
 800100e:	f5b3 5f92 	cmp.w	r3, #4672	; 0x1240
 8001012:	f300 8243 	bgt.w	800149c <StartTask02+0x58c>
 8001016:	2b0f      	cmp	r3, #15
 8001018:	d036      	beq.n	8001088 <StartTask02+0x178>
 800101a:	2b14      	cmp	r3, #20
 800101c:	d038      	beq.n	8001090 <StartTask02+0x180>
 800101e:	e23d      	b.n	800149c <StartTask02+0x58c>
 8001020:	f5a3 53b0 	sub.w	r3, r3, #5632	; 0x1600
 8001024:	2b15      	cmp	r3, #21
 8001026:	f200 8239 	bhi.w	800149c <StartTask02+0x58c>
 800102a:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <StartTask02+0x120>)
 800102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001030:	0800149d 	.word	0x0800149d
 8001034:	0800149d 	.word	0x0800149d
 8001038:	08001371 	.word	0x08001371
 800103c:	080013c5 	.word	0x080013c5
 8001040:	0800149d 	.word	0x0800149d
 8001044:	0800135b 	.word	0x0800135b
 8001048:	0800140d 	.word	0x0800140d
 800104c:	0800149d 	.word	0x0800149d
 8001050:	08001455 	.word	0x08001455
 8001054:	0800148d 	.word	0x0800148d
 8001058:	0800149d 	.word	0x0800149d
 800105c:	0800149d 	.word	0x0800149d
 8001060:	0800149d 	.word	0x0800149d
 8001064:	0800149d 	.word	0x0800149d
 8001068:	0800149d 	.word	0x0800149d
 800106c:	0800149d 	.word	0x0800149d
 8001070:	0800149d 	.word	0x0800149d
 8001074:	0800149d 	.word	0x0800149d
 8001078:	0800149d 	.word	0x0800149d
 800107c:	0800149d 	.word	0x0800149d
 8001080:	0800131d 	.word	0x0800131d
 8001084:	08001337 	.word	0x08001337
			{
			//Take VP from receive data

			case (0x0F):     // Check LCD power on?
								GUI_boot = true;
 8001088:	4b69      	ldr	r3, [pc, #420]	; (8001230 <StartTask02+0x320>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
			break;
 800108e:	e205      	b.n	800149c <StartTask02+0x58c>

			case (0x0014): //Read no of page on work
								page = Rx1_Buffer[8];
 8001090:	4b68      	ldr	r3, [pc, #416]	; (8001234 <StartTask02+0x324>)
 8001092:	7a1a      	ldrb	r2, [r3, #8]
 8001094:	4b68      	ldr	r3, [pc, #416]	; (8001238 <StartTask02+0x328>)
 8001096:	701a      	strb	r2, [r3, #0]
			break;
 8001098:	e200      	b.n	800149c <StartTask02+0x58c>

			case (0x1400):  //STOP, READY  Variable GUI
				if (!Ready)
 800109a:	4b68      	ldr	r3, [pc, #416]	; (800123c <StartTask02+0x32c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01a      	beq.n	80010de <StartTask02+0x1ce>
				{ //STOP
					Ready = 1;
 80010a8:	4b64      	ldr	r3, [pc, #400]	; (800123c <StartTask02+0x32c>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
					DF_Play(S_ready);  //Ready
 80010ae:	2019      	movs	r0, #25
 80010b0:	f7ff fb4f 	bl	8000752 <DF_Play>
					osDelay(200);
 80010b4:	20c8      	movs	r0, #200	; 0xc8
 80010b6:	f012 f899 	bl	80131ec <osDelay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Interloc
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c0:	485f      	ldr	r0, [pc, #380]	; (8001240 <StartTask02+0x330>)
 80010c2:	f006 f8f3 	bl	80072ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // AKELA pointer
 80010c6:	2201      	movs	r2, #1
 80010c8:	2101      	movs	r1, #1
 80010ca:	485e      	ldr	r0, [pc, #376]	; (8001244 <StartTask02+0x334>)
 80010cc:	f006 f8ee 	bl	80072ac <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart1, GUI_stop, sizeof(GUI_stop), 100);
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	2208      	movs	r2, #8
 80010d4:	495c      	ldr	r1, [pc, #368]	; (8001248 <StartTask02+0x338>)
 80010d6:	485d      	ldr	r0, [pc, #372]	; (800124c <StartTask02+0x33c>)
 80010d8:	f00d f879 	bl	800e1ce <HAL_UART_Transmit>
					Ready = 0;
					DF_Play(S_stop);  //Stop
					osDelay(200);
	//				// GUI_ready2stop();
				}
			break;
 80010dc:	e1db      	b.n	8001496 <StartTask02+0x586>
				else if (Ready)
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <StartTask02+0x32c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 81d7 	beq.w	8001496 <StartTask02+0x586>
					Ready = 0;
 80010e8:	4b54      	ldr	r3, [pc, #336]	; (800123c <StartTask02+0x32c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
					DF_Play(S_stop);  //Stop
 80010ee:	2005      	movs	r0, #5
 80010f0:	f7ff fb2f 	bl	8000752 <DF_Play>
					osDelay(200);
 80010f4:	20c8      	movs	r0, #200	; 0xc8
 80010f6:	f012 f879 	bl	80131ec <osDelay>
			break;
 80010fa:	e1cc      	b.n	8001496 <StartTask02+0x586>

			case (0x1240):  //TONING Page switching
			Stamp = 0;
 80010fc:	4b54      	ldr	r3, [pc, #336]	; (8001250 <StartTask02+0x340>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
			DF_Play(S_toning); //Toning sound
 8001102:	201a      	movs	r0, #26
 8001104:	f7ff fb25 	bl	8000752 <DF_Play>
			//  EEPROM_Read(Last_mode); //save current mode
			// // show_parameter_toning();
			//  show_ST_key_value();
			// // GUI_ready2stop();
			break;
 8001108:	e1c8      	b.n	800149c <StartTask02+0x58c>

			case (0x1250):  //STAMP page switching
			Stamp = 1;
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <StartTask02+0x340>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
			DF_Play(S_stamp);  //Stamp
 8001110:	2018      	movs	r0, #24
 8001112:	f7ff fb1e 	bl	8000752 <DF_Play>
			//  EEPROM_Read(Last_mode);  //save current mode
			// show_parameter_stamp();
			//  show_ST_key_value();
			// // GUI_ready2stop();
			break;
 8001116:	e1c1      	b.n	800149c <StartTask02+0x58c>

			// ===  Jump to Stamp mode from Monitor mode
			case (0x1296):
			DF_Play(S_Beek);
 8001118:	2013      	movs	r0, #19
 800111a:	f7ff fb1a 	bl	8000752 <DF_Play>
			Monitor = 0;
 800111e:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <StartTask02+0x344>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]

			Stamp = 1;
 8001124:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <StartTask02+0x340>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
			DF_Play(S_stamp);  //Stamp
 800112a:	2018      	movs	r0, #24
 800112c:	f7ff fb11 	bl	8000752 <DF_Play>
			//  EEPROM_Read(Last_mode);  //save current mode
			// show_parameter_stamp();
			//  show_ST_key_value();
			// // GUI_ready2stop(); // clear "ready" state

			GUI_mon_Laser_ON[7] = 1; //Laser OFF
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <StartTask02+0x348>)
 8001132:	2201      	movs	r2, #1
 8001134:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8001136:	2364      	movs	r3, #100	; 0x64
 8001138:	2208      	movs	r2, #8
 800113a:	4947      	ldr	r1, [pc, #284]	; (8001258 <StartTask02+0x348>)
 800113c:	4843      	ldr	r0, [pc, #268]	; (800124c <StartTask02+0x33c>)
 800113e:	f00d f846 	bl	800e1ce <HAL_UART_Transmit>

			// Stop "Laser ON" over Monitor mode
		//	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
		//	HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Interlock stop
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001148:	483d      	ldr	r0, [pc, #244]	; (8001240 <StartTask02+0x330>)
 800114a:	f006 f8af 	bl	80072ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Enable Stop
 800114e:	2200      	movs	r2, #0
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	4842      	ldr	r0, [pc, #264]	; (800125c <StartTask02+0x34c>)
 8001154:	f006 f8aa 	bl	80072ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Fire lamp Off
 8001158:	2200      	movs	r2, #0
 800115a:	2104      	movs	r1, #4
 800115c:	4838      	ldr	r0, [pc, #224]	; (8001240 <StartTask02+0x330>)
 800115e:	f006 f8a5 	bl	80072ac <HAL_GPIO_WritePin>

			GUI_sum_mode[7] = 1;
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <StartTask02+0x350>)
 8001164:	2201      	movs	r2, #1
 8001166:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2208      	movs	r2, #8
 800116c:	493c      	ldr	r1, [pc, #240]	; (8001260 <StartTask02+0x350>)
 800116e:	4837      	ldr	r0, [pc, #220]	; (800124c <StartTask02+0x33c>)
 8001170:	f00d f82d 	bl	800e1ce <HAL_UART_Transmit>

			vTaskSuspend(myTask05Handle);	 // STOP DefaultTask
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <StartTask02+0x354>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f012 fadd 	bl	8013738 <vTaskSuspend>
			break;
 800117e:	e18d      	b.n	800149c <StartTask02+0x58c>


			// ===  Move to Monitor mode
			case (0x1298):
			DF_Play(S_Beek);
 8001180:	2013      	movs	r0, #19
 8001182:	f7ff fae6 	bl	8000752 <DF_Play>
			Monitor = true;
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <StartTask02+0x344>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
			// // GUI_ready2stop(); // clear "ready" state

			GUI_mon_Laser_ON[7] = 1;  //Laser OFF
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <StartTask02+0x348>)
 800118e:	2201      	movs	r2, #1
 8001190:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8001192:	2364      	movs	r3, #100	; 0x64
 8001194:	2208      	movs	r2, #8
 8001196:	4930      	ldr	r1, [pc, #192]	; (8001258 <StartTask02+0x348>)
 8001198:	482c      	ldr	r0, [pc, #176]	; (800124c <StartTask02+0x33c>)
 800119a:	f00d f818 	bl	800e1ce <HAL_UART_Transmit>

			GUI_mon_power[6] = 0;     //Start monitor page with Power = 0
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <StartTask02+0x358>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	719a      	strb	r2, [r3, #6]
			GUI_mon_power[7] = 0;
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <StartTask02+0x358>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	71da      	strb	r2, [r3, #7]
			HAL_UART_Transmit(&huart1, GUI_mon_power, sizeof(GUI_mon_power),100);//show power0~6
 80011aa:	2364      	movs	r3, #100	; 0x64
 80011ac:	2208      	movs	r2, #8
 80011ae:	492e      	ldr	r1, [pc, #184]	; (8001268 <StartTask02+0x358>)
 80011b0:	4826      	ldr	r0, [pc, #152]	; (800124c <StartTask02+0x33c>)
 80011b2:	f00d f80c 	bl	800e1ce <HAL_UART_Transmit>

			// Stop "Laser ON" over Monitor mode
	//		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//		HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Interlock stop
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011bc:	4820      	ldr	r0, [pc, #128]	; (8001240 <StartTask02+0x330>)
 80011be:	f006 f875 	bl	80072ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Enable Stop
 80011c2:	2200      	movs	r2, #0
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	4825      	ldr	r0, [pc, #148]	; (800125c <StartTask02+0x34c>)
 80011c8:	f006 f870 	bl	80072ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //Fire lamp Off
 80011cc:	2200      	movs	r2, #0
 80011ce:	2104      	movs	r1, #4
 80011d0:	481b      	ldr	r0, [pc, #108]	; (8001240 <StartTask02+0x330>)
 80011d2:	f006 f86b 	bl	80072ac <HAL_GPIO_WritePin>

			vTaskResume(myTask05Handle);   // Strat Monitoring Task(5)
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <StartTask02+0x354>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f012 fb70 	bl	80138c0 <vTaskResume>
			break;
 80011e0:	e15c      	b.n	800149c <StartTask02+0x58c>



			// ===  Laser ON at Monitor mode
			case (0x1340):
				if (!Laser_ON)
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <StartTask02+0x35c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f083 0301 	eor.w	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d03f      	beq.n	8001270 <StartTask02+0x360>
				{
					Laser_ON = 1;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <StartTask02+0x35c>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
					DF_Play(S_ready);  //Ready
 80011f6:	2019      	movs	r0, #25
 80011f8:	f7ff faab 	bl	8000752 <DF_Play>
					osDelay(200);
 80011fc:	20c8      	movs	r0, #200	; 0xc8
 80011fe:	f011 fff5 	bl	80131ec <osDelay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Interloc
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <StartTask02+0x330>)
 800120a:	f006 f84f 	bl	80072ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // AKELA pointer
 800120e:	2201      	movs	r2, #1
 8001210:	2101      	movs	r1, #1
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <StartTask02+0x334>)
 8001214:	f006 f84a 	bl	80072ac <HAL_GPIO_WritePin>
					GUI_mon_Laser_ON[7] = 0;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <StartTask02+0x348>)
 800121a:	2200      	movs	r2, #0
 800121c:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 800121e:	2364      	movs	r3, #100	; 0x64
 8001220:	2208      	movs	r2, #8
 8001222:	490d      	ldr	r1, [pc, #52]	; (8001258 <StartTask02+0x348>)
 8001224:	4809      	ldr	r0, [pc, #36]	; (800124c <StartTask02+0x33c>)
 8001226:	f00c ffd2 	bl	800e1ce <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
					HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Interlock on
					HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0); // Enable stop
					HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0); // AKELA pointer Off
				}
			break;
 800122a:	e137      	b.n	800149c <StartTask02+0x58c>
 800122c:	24004d66 	.word	0x24004d66
 8001230:	24004d64 	.word	0x24004d64
 8001234:	24004dec 	.word	0x24004dec
 8001238:	24004de8 	.word	0x24004de8
 800123c:	24004dfe 	.word	0x24004dfe
 8001240:	58020400 	.word	0x58020400
 8001244:	58020800 	.word	0x58020800
 8001248:	24000000 	.word	0x24000000
 800124c:	24005078 	.word	0x24005078
 8001250:	24004d6a 	.word	0x24004d6a
 8001254:	24004dc0 	.word	0x24004dc0
 8001258:	2400003c 	.word	0x2400003c
 800125c:	58020000 	.word	0x58020000
 8001260:	24000020 	.word	0x24000020
 8001264:	24004d6c 	.word	0x24004d6c
 8001268:	24000034 	.word	0x24000034
 800126c:	24004d63 	.word	0x24004d63
					Laser_ON = 0;
 8001270:	4b8c      	ldr	r3, [pc, #560]	; (80014a4 <StartTask02+0x594>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
					DF_Play(S_stop);  //Stop
 8001276:	2005      	movs	r0, #5
 8001278:	f7ff fa6b 	bl	8000752 <DF_Play>
					osDelay(200);
 800127c:	20c8      	movs	r0, #200	; 0xc8
 800127e:	f011 ffb5 	bl	80131ec <osDelay>
					GUI_mon_Laser_ON[7] = 1;
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <StartTask02+0x598>)
 8001284:	2201      	movs	r2, #1
 8001286:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_mon_Laser_ON, sizeof(GUI_mon_Laser_ON), 100);
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	2208      	movs	r2, #8
 800128c:	4986      	ldr	r1, [pc, #536]	; (80014a8 <StartTask02+0x598>)
 800128e:	4887      	ldr	r0, [pc, #540]	; (80014ac <StartTask02+0x59c>)
 8001290:	f00c ff9d 	bl	800e1ce <HAL_UART_Transmit>
					HAL_GPIO_WritePin( GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Interlock on
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800129a:	4885      	ldr	r0, [pc, #532]	; (80014b0 <StartTask02+0x5a0>)
 800129c:	f006 f806 	bl	80072ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0); // Enable stop
 80012a0:	2200      	movs	r2, #0
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	4883      	ldr	r0, [pc, #524]	; (80014b4 <StartTask02+0x5a4>)
 80012a6:	f006 f801 	bl	80072ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin( GPIOC, GPIO_PIN_0, 0); // AKELA pointer Off
 80012aa:	2200      	movs	r2, #0
 80012ac:	2101      	movs	r1, #1
 80012ae:	4882      	ldr	r0, [pc, #520]	; (80014b8 <StartTask02+0x5a8>)
 80012b0:	f005 fffc 	bl	80072ac <HAL_GPIO_WritePin>
			break;
 80012b4:	e0f2      	b.n	800149c <StartTask02+0x58c>



			// ===  Increament & decrement adjustment at Monitoring
			case (0x1345):
			DF_Play(S_Beek);
 80012b6:	2013      	movs	r0, #19
 80012b8:	f7ff fa4b 	bl	8000752 <DF_Play>
			// 5*330 = 1650:최고 DAC �??, ?��?�� HP?��?��?�� CW�?? 5 W 출력?��, 330?? Cut&Try�?? ?��?? �??
			Power_DAC = ((Rx1_Buffer[7] << 8) + Rx1_Buffer[8])*330;  //0~2100
 80012bc:	4b7f      	ldr	r3, [pc, #508]	; (80014bc <StartTask02+0x5ac>)
 80012be:	79db      	ldrb	r3, [r3, #7]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4a7e      	ldr	r2, [pc, #504]	; (80014bc <StartTask02+0x5ac>)
 80012c4:	7a12      	ldrb	r2, [r2, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b7b      	ldr	r3, [pc, #492]	; (80014c0 <StartTask02+0x5b0>)
 80012d4:	601a      	str	r2, [r3, #0]
			GUI_mon_power[6] = Rx1_Buffer[7];  //Last_mpower_high
 80012d6:	4b79      	ldr	r3, [pc, #484]	; (80014bc <StartTask02+0x5ac>)
 80012d8:	79da      	ldrb	r2, [r3, #7]
 80012da:	4b7a      	ldr	r3, [pc, #488]	; (80014c4 <StartTask02+0x5b4>)
 80012dc:	719a      	strb	r2, [r3, #6]
			GUI_mon_power[7] = Rx1_Buffer[8];  //Last_mpower_low (real)
 80012de:	4b77      	ldr	r3, [pc, #476]	; (80014bc <StartTask02+0x5ac>)
 80012e0:	7a1a      	ldrb	r2, [r3, #8]
 80012e2:	4b78      	ldr	r3, [pc, #480]	; (80014c4 <StartTask02+0x5b4>)
 80012e4:	71da      	strb	r2, [r3, #7]
		//	HAL_UART_Transmit(&huart1, GUI_mon_power, sizeof(GUI_mon_power),100);//show power0~5

			//  EEPROM_Write(Last_mon_power_high, GUI_mon_power[6]);
			//  EEPROM_Write(Last_mon_power_low, GUI_mon_power[7]);

			break;
 80012e6:	e0d9      	b.n	800149c <StartTask02+0x58c>

			///////////////////
			case (0x1300):  //  Increament & decrement adjustment at STAMP
			DF_Play(S_Beek);
 80012e8:	2013      	movs	r0, #19
 80012ea:	f7ff fa32 	bl	8000752 <DF_Play>
			//  EEPROM_Write( Last_power_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_power_low, Rx1_Buffer[8]);
			Power_DAC = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8];  ///////
 80012ee:	4b73      	ldr	r3, [pc, #460]	; (80014bc <StartTask02+0x5ac>)
 80012f0:	79db      	ldrb	r3, [r3, #7]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	4a71      	ldr	r2, [pc, #452]	; (80014bc <StartTask02+0x5ac>)
 80012f6:	7a12      	ldrb	r2, [r2, #8]
 80012f8:	4413      	add	r3, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <StartTask02+0x5b0>)
 80012fe:	601a      	str	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 8001300:	e0cc      	b.n	800149c <StartTask02+0x58c>

			case (0x1305):  // Increament & decrement adjustment at Toning
			DF_Play(S_Beek);
 8001302:	2013      	movs	r0, #19
 8001304:	f7ff fa25 	bl	8000752 <DF_Play>
			//  EEPROM_Write( Last_power_high_t, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_power_low_t, Rx1_Buffer[8]);
			Power_DAC_t = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8];  ///////
 8001308:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <StartTask02+0x5ac>)
 800130a:	79db      	ldrb	r3, [r3, #7]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4a6b      	ldr	r2, [pc, #428]	; (80014bc <StartTask02+0x5ac>)
 8001310:	7a12      	ldrb	r2, [r2, #8]
 8001312:	4413      	add	r3, r2
 8001314:	461a      	mov	r2, r3
 8001316:	4b6c      	ldr	r3, [pc, #432]	; (80014c8 <StartTask02+0x5b8>)
 8001318:	601a      	str	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 800131a:	e0bf      	b.n	800149c <StartTask02+0x58c>

			case (0x1614):  //save On_time value to eeprom
								//  EEPROM_Write( Last_on_time_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_on_time_low, Rx1_Buffer[8]);
			On_Time = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8]; ///////
 800131c:	4b67      	ldr	r3, [pc, #412]	; (80014bc <StartTask02+0x5ac>)
 800131e:	79db      	ldrb	r3, [r3, #7]
 8001320:	b29b      	uxth	r3, r3
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b29a      	uxth	r2, r3
 8001326:	4b65      	ldr	r3, [pc, #404]	; (80014bc <StartTask02+0x5ac>)
 8001328:	7a1b      	ldrb	r3, [r3, #8]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b66      	ldr	r3, [pc, #408]	; (80014cc <StartTask02+0x5bc>)
 8001332:	801a      	strh	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 8001334:	e0b2      	b.n	800149c <StartTask02+0x58c>

			case (0x1615):  //save Off_time value to eeprom
								//  EEPROM_Write( Last_off_time_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_off_time_low, Rx1_Buffer[8]);
			Off_Time = (Rx1_Buffer[7] << 8) + Rx1_Buffer[8]; ///////
 8001336:	4b61      	ldr	r3, [pc, #388]	; (80014bc <StartTask02+0x5ac>)
 8001338:	79db      	ldrb	r3, [r3, #7]
 800133a:	b29b      	uxth	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b5e      	ldr	r3, [pc, #376]	; (80014bc <StartTask02+0x5ac>)
 8001342:	7a1b      	ldrb	r3, [r3, #8]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4413      	add	r3, r2
 8001348:	b29a      	uxth	r2, r3
 800134a:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <StartTask02+0x5c0>)
 800134c:	801a      	strh	r2, [r3, #0]
			// // GUI_ready2stop();
			break;
 800134e:	e0a5      	b.n	800149c <StartTask02+0x58c>

			case (0x1260):  //Pulse value to eeprom
			//  EEPROM_Write( Last_pulse, Rx1_Buffer[8]);
			Pulse = Rx1_Buffer[8];  ///////
 8001350:	4b5a      	ldr	r3, [pc, #360]	; (80014bc <StartTask02+0x5ac>)
 8001352:	7a1a      	ldrb	r2, [r3, #8]
 8001354:	4b5f      	ldr	r3, [pc, #380]	; (80014d4 <StartTask02+0x5c4>)
 8001356:	701a      	strb	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 8001358:	e0a0      	b.n	800149c <StartTask02+0x58c>

			case (0x1605):  //Repeat value to eeprom
			//  EEPROM_Write( Last_repeat, Rx1_Buffer[8]);
			Repeat = Rx1_Buffer[8];
 800135a:	4b58      	ldr	r3, [pc, #352]	; (80014bc <StartTask02+0x5ac>)
 800135c:	7a1b      	ldrb	r3, [r3, #8]
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <StartTask02+0x5c8>)
 8001362:	801a      	strh	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 8001364:	e09a      	b.n	800149c <StartTask02+0x58c>

			case (0x1280):  //Frequency value to eeprom
			//  EEPROM_Write( Last_frequency, Rx1_Buffer[8]);
			Freq = Rx1_Buffer[8];  ///////
 8001366:	4b55      	ldr	r3, [pc, #340]	; (80014bc <StartTask02+0x5ac>)
 8001368:	7a1a      	ldrb	r2, [r3, #8]
 800136a:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <StartTask02+0x5cc>)
 800136c:	701a      	strb	r2, [r3, #0]
			// GUI_ready2stop();
			break;
 800136e:	e095      	b.n	800149c <StartTask02+0x58c>
			//  EEPROM_Write( Last_tcount_high, Rx1_Buffer[7]);
			//  EEPROM_Write( Last_tcount_low, Rx1_Buffer[8]);
			break;

			case (0x1602):  //SOUND, MUTE Variable GUI
				if (Sound)
 8001370:	4b5b      	ldr	r3, [pc, #364]	; (80014e0 <StartTask02+0x5d0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d012      	beq.n	800139e <StartTask02+0x48e>
				{
					Sound = 0;
 8001378:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <StartTask02+0x5d0>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
					DF_Play(S_sound);  //sound
 800137e:	2007      	movs	r0, #7
 8001380:	f7ff f9e7 	bl	8000752 <DF_Play>
					//  EEPROM_Write( Last_sound, Sound);
					GUI_sound[7] = 0;
 8001384:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <StartTask02+0x5d4>)
 8001386:	2200      	movs	r2, #0
 8001388:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	2208      	movs	r2, #8
 800138e:	4955      	ldr	r1, [pc, #340]	; (80014e4 <StartTask02+0x5d4>)
 8001390:	4846      	ldr	r0, [pc, #280]	; (80014ac <StartTask02+0x59c>)
 8001392:	f00c ff1c 	bl	800e1ce <HAL_UART_Transmit>
					volume(19);
 8001396:	2013      	movs	r0, #19
 8001398:	f000 fe6e 	bl	8002078 <volume>
					GUI_sound[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
					volume(0);
				}
			//  EEPROM_Write( Last_sound, Sound);  //save current mode
			break;
 800139c:	e07e      	b.n	800149c <StartTask02+0x58c>
					Sound = true;
 800139e:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <StartTask02+0x5d0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
					DF_Play(S_mute);  //mute
 80013a4:	200b      	movs	r0, #11
 80013a6:	f7ff f9d4 	bl	8000752 <DF_Play>
					GUI_sound[7] = 1;
 80013aa:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <StartTask02+0x5d4>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sound, sizeof(GUI_sound),100);
 80013b0:	2364      	movs	r3, #100	; 0x64
 80013b2:	2208      	movs	r2, #8
 80013b4:	494b      	ldr	r1, [pc, #300]	; (80014e4 <StartTask02+0x5d4>)
 80013b6:	483d      	ldr	r0, [pc, #244]	; (80014ac <StartTask02+0x59c>)
 80013b8:	f00c ff09 	bl	800e1ce <HAL_UART_Transmit>
					volume(0);
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 fe5b 	bl	8002078 <volume>
			break;
 80013c2:	e06b      	b.n	800149c <StartTask02+0x58c>


			case (0x1603):  //FOOT, HAND Variable GUI
				if (Hand_foot)
 80013c4:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <StartTask02+0x5d8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00f      	beq.n	80013ec <StartTask02+0x4dc>
				{
					Hand_foot = 0;
 80013cc:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <StartTask02+0x5d8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
					DF_Play(S_hand);  //hand
 80013d2:	2008      	movs	r0, #8
 80013d4:	f7ff f9bd 	bl	8000752 <DF_Play>
					GUI_foot[7] = 0;
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <StartTask02+0x5dc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	2208      	movs	r2, #8
 80013e2:	4942      	ldr	r1, [pc, #264]	; (80014ec <StartTask02+0x5dc>)
 80013e4:	4831      	ldr	r0, [pc, #196]	; (80014ac <StartTask02+0x59c>)
 80013e6:	f00c fef2 	bl	800e1ce <HAL_UART_Transmit>
					DF_Play(S_foot); //foot
					GUI_foot[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
					//  EEPROM_Write( Last_Hand_foot, Hand_foot);
				}
			break;
 80013ea:	e057      	b.n	800149c <StartTask02+0x58c>
					Hand_foot = true;
 80013ec:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <StartTask02+0x5d8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
					DF_Play(S_foot); //foot
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff f9ad 	bl	8000752 <DF_Play>
					GUI_foot[7] = 1;
 80013f8:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <StartTask02+0x5dc>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_foot, sizeof(GUI_foot), 100);
 80013fe:	2364      	movs	r3, #100	; 0x64
 8001400:	2208      	movs	r2, #8
 8001402:	493a      	ldr	r1, [pc, #232]	; (80014ec <StartTask02+0x5dc>)
 8001404:	4829      	ldr	r0, [pc, #164]	; (80014ac <StartTask02+0x59c>)
 8001406:	f00c fee2 	bl	800e1ce <HAL_UART_Transmit>
			break;
 800140a:	e047      	b.n	800149c <StartTask02+0x58c>

			//======  Select Total counter & energy  ============
			case (0x1606):  //Select between Toggle counts and Energy
				if (Count_energy)
 800140c:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <StartTask02+0x5e0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00f      	beq.n	8001434 <StartTask02+0x524>
				{
			    	Count_energy = 0;
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <StartTask02+0x5e0>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
					DF_Play(S_total_energy);
 800141a:	200d      	movs	r0, #13
 800141c:	f7ff f999 	bl	8000752 <DF_Play>
					GUI_sum_mode[7] = 0;
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <StartTask02+0x5e4>)
 8001422:	2200      	movs	r2, #0
 8001424:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8001426:	2364      	movs	r3, #100	; 0x64
 8001428:	2208      	movs	r2, #8
 800142a:	4932      	ldr	r1, [pc, #200]	; (80014f4 <StartTask02+0x5e4>)
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <StartTask02+0x59c>)
 800142e:	f00c fece 	bl	800e1ce <HAL_UART_Transmit>
					DF_Play(S_total_count);
					GUI_sum_mode[7] = 1;
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
					//  EEPROM_Write( Last_Count_energy, Count_energy);
				}
			break;
 8001432:	e033      	b.n	800149c <StartTask02+0x58c>
					Count_energy = 1;
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <StartTask02+0x5e0>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
					DF_Play(S_total_count);
 800143a:	200e      	movs	r0, #14
 800143c:	f7ff f989 	bl	8000752 <DF_Play>
					GUI_sum_mode[7] = 1;
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <StartTask02+0x5e4>)
 8001442:	2201      	movs	r2, #1
 8001444:	71da      	strb	r2, [r3, #7]
					HAL_UART_Transmit(&huart1, GUI_sum_mode,sizeof(GUI_sum_mode), 100);
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	2208      	movs	r2, #8
 800144a:	492a      	ldr	r1, [pc, #168]	; (80014f4 <StartTask02+0x5e4>)
 800144c:	4817      	ldr	r0, [pc, #92]	; (80014ac <StartTask02+0x59c>)
 800144e:	f00c febe 	bl	800e1ce <HAL_UART_Transmit>
			break;
 8001452:	e023      	b.n	800149c <StartTask02+0x58c>

			//======  Clear Total counter value     ============
			case (0x1608):  // Clear Total counter value
								Key_memo++;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	3301      	adds	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
			if (Key_memo == GUI_save_delay)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d11c      	bne.n	800149a <StartTask02+0x58a>
			{
				DF_Play(S_clear);   //sound 'clear'
 8001460:	2006      	movs	r0, #6
 8001462:	f7ff f976 	bl	8000752 <DF_Play>
				sum_count = 0;
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <StartTask02+0x5e8>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
				sum_count_t = 0;
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <StartTask02+0x5ec>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
				sum_energy = 0;
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <StartTask02+0x5f0>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
				sum_energy_t = 0;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <StartTask02+0x5f4>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, GUI_sum_value,sizeof(GUI_sum_value), 100);
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	220a      	movs	r2, #10
 8001482:	4921      	ldr	r1, [pc, #132]	; (8001508 <StartTask02+0x5f8>)
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <StartTask02+0x59c>)
 8001486:	f00c fea2 	bl	800e1ce <HAL_UART_Transmit>
			}
			break;
 800148a:	e006      	b.n	800149a <StartTask02+0x58a>
			case (0x1609): // save last parameter to EEPROM, show value on S2 key
				if (Key_memo >= GUI_save_delay)
						;
				else
						;
			Key_memo = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
			break;
 8001490:	e004      	b.n	800149c <StartTask02+0x58c>



			default:
 8001492:	bf00      	nop
 8001494:	e002      	b.n	800149c <StartTask02+0x58c>
			break;
 8001496:	bf00      	nop
 8001498:	e000      	b.n	800149c <StartTask02+0x58c>
			break;
 800149a:	bf00      	nop
			}  //end of switch
			//================== End of Memory process ======================

		}   //if Rx_recv is received, it will be work.

		osDelay(Delay_task02);
 800149c:	2005      	movs	r0, #5
 800149e:	f011 fea5 	bl	80131ec <osDelay>
		if (Rx_recv)   //DWIN string is get completely
 80014a2:	e539      	b.n	8000f18 <StartTask02+0x8>
 80014a4:	24004d63 	.word	0x24004d63
 80014a8:	2400003c 	.word	0x2400003c
 80014ac:	24005078 	.word	0x24005078
 80014b0:	58020400 	.word	0x58020400
 80014b4:	58020000 	.word	0x58020000
 80014b8:	58020800 	.word	0x58020800
 80014bc:	24004dec 	.word	0x24004dec
 80014c0:	24004d9c 	.word	0x24004d9c
 80014c4:	24000034 	.word	0x24000034
 80014c8:	24004e08 	.word	0x24004e08
 80014cc:	24004da0 	.word	0x24004da0
 80014d0:	24004dca 	.word	0x24004dca
 80014d4:	24004d61 	.word	0x24004d61
 80014d8:	24004d54 	.word	0x24004d54
 80014dc:	24004da8 	.word	0x24004da8
 80014e0:	24004d62 	.word	0x24004d62
 80014e4:	24000008 	.word	0x24000008
 80014e8:	24004d7c 	.word	0x24004d7c
 80014ec:	24000018 	.word	0x24000018
 80014f0:	24004d60 	.word	0x24004d60
 80014f4:	24000020 	.word	0x24000020
 80014f8:	24004dac 	.word	0x24004dac
 80014fc:	24004d58 	.word	0x24004d58
 8001500:	24004da4 	.word	0x24004da4
 8001504:	24004d98 	.word	0x24004d98
 8001508:	24000028 	.word	0x24000028

0800150c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	static uint8_t Rx_len, Rx_indx, data, Rx4_indx;

	while (1)
	{
		//============= UART-4: Hand piece ==============
		if (isEmpty(&uart_4) == 0)
 8001514:	4858      	ldr	r0, [pc, #352]	; (8001678 <StartTask03+0x16c>)
 8001516:	f000 fa32 	bl	800197e <isEmpty>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d153      	bne.n	80015c8 <StartTask03+0xbc>
		{
			data = pop(&uart_4);
 8001520:	4855      	ldr	r0, [pc, #340]	; (8001678 <StartTask03+0x16c>)
 8001522:	f000 fa0d 	bl	8001940 <pop>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <StartTask03+0x170>)
 800152c:	701a      	strb	r2, [r3, #0]

			if (data != 10)   // Line feed? new line
 800152e:	4b53      	ldr	r3, [pc, #332]	; (800167c <StartTask03+0x170>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b0a      	cmp	r3, #10
 8001534:	d00b      	beq.n	800154e <StartTask03+0x42>
			{
				Rx4_Buffer[Rx4_indx++] = data;
 8001536:	4b52      	ldr	r3, [pc, #328]	; (8001680 <StartTask03+0x174>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	b2d1      	uxtb	r1, r2
 800153e:	4a50      	ldr	r2, [pc, #320]	; (8001680 <StartTask03+0x174>)
 8001540:	7011      	strb	r1, [r2, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	4b4d      	ldr	r3, [pc, #308]	; (800167c <StartTask03+0x170>)
 8001546:	7819      	ldrb	r1, [r3, #0]
 8001548:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <StartTask03+0x178>)
 800154a:	5499      	strb	r1, [r3, r2]
 800154c:	e02d      	b.n	80015aa <StartTask03+0x9e>
			}
			else
			{
				Rx4_Buffer[0] = 0x30; // # -> 0 clear
 800154e:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <StartTask03+0x178>)
 8001550:	2230      	movs	r2, #48	; 0x30
 8001552:	701a      	strb	r2, [r3, #0]
				HP_lens = atoi(strtok(Rx4_Buffer, " ")); //Lens 1,2,3
 8001554:	494c      	ldr	r1, [pc, #304]	; (8001688 <StartTask03+0x17c>)
 8001556:	484b      	ldr	r0, [pc, #300]	; (8001684 <StartTask03+0x178>)
 8001558:	f014 fd6a 	bl	8016030 <strtok>
 800155c:	4603      	mov	r3, r0
 800155e:	4618      	mov	r0, r3
 8001560:	f013 fe94 	bl	801528c <atoi>
 8001564:	4603      	mov	r3, r0
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <StartTask03+0x180>)
 800156a:	701a      	strb	r2, [r3, #0]
				HP_Temp = atoi(strtok(NULL, " ")); //Temp. sensor data
 800156c:	4946      	ldr	r1, [pc, #280]	; (8001688 <StartTask03+0x17c>)
 800156e:	2000      	movs	r0, #0
 8001570:	f014 fd5e 	bl	8016030 <strtok>
 8001574:	4603      	mov	r3, r0
 8001576:	4618      	mov	r0, r3
 8001578:	f013 fe88 	bl	801528c <atoi>
 800157c:	4603      	mov	r3, r0
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b43      	ldr	r3, [pc, #268]	; (8001690 <StartTask03+0x184>)
 8001582:	801a      	strh	r2, [r3, #0]
				HP_Fire = atoi(strtok(NULL, " ")); //HP switch detect
 8001584:	4940      	ldr	r1, [pc, #256]	; (8001688 <StartTask03+0x17c>)
 8001586:	2000      	movs	r0, #0
 8001588:	f014 fd52 	bl	8016030 <strtok>
 800158c:	4603      	mov	r3, r0
 800158e:	4618      	mov	r0, r3
 8001590:	f013 fe7c 	bl	801528c <atoi>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf14      	ite	ne
 800159a:	2301      	movne	r3, #1
 800159c:	2300      	moveq	r3, #0
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <StartTask03+0x188>)
 80015a2:	701a      	strb	r2, [r3, #0]

				Rx4_indx = 0;   // HP data is received
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <StartTask03+0x174>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
			}   //else

			if (HP_Fire)
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <StartTask03+0x188>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <StartTask03+0xb2>
			{
				 HAL_GPIO_WritePin( GPIOC, GPIO_PIN_7,GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	4838      	ldr	r0, [pc, #224]	; (8001698 <StartTask03+0x18c>)
 80015b8:	f005 fe78 	bl	80072ac <HAL_GPIO_WritePin>
 80015bc:	e004      	b.n	80015c8 <StartTask03+0xbc>
			}
			else
				 HAL_GPIO_WritePin( GPIOC, GPIO_PIN_7,GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	4835      	ldr	r0, [pc, #212]	; (8001698 <StartTask03+0x18c>)
 80015c4:	f005 fe72 	bl	80072ac <HAL_GPIO_WritePin>

    	}  //if

		//============= UART-1: DWIN LCD ==============
		if (isEmpty(&uart_1) == 0)
 80015c8:	4834      	ldr	r0, [pc, #208]	; (800169c <StartTask03+0x190>)
 80015ca:	f000 f9d8 	bl	800197e <isEmpty>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d14d      	bne.n	8001670 <StartTask03+0x164>
		{  /////Ring buffer check and get all

			data = pop(&uart_1);
 80015d4:	4831      	ldr	r0, [pc, #196]	; (800169c <StartTask03+0x190>)
 80015d6:	f000 f9b3 	bl	8001940 <pop>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <StartTask03+0x170>)
 80015e0:	701a      	strb	r2, [r3, #0]

			if (data == 0x5A)
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <StartTask03+0x170>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b5a      	cmp	r3, #90	; 0x5a
 80015e8:	d107      	bne.n	80015fa <StartTask03+0xee>
			{			//Find head of string 0x5A/90
				Rx1_Buffer[0] = data;
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <StartTask03+0x170>)
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <StartTask03+0x194>)
 80015f0:	701a      	strb	r2, [r3, #0]
				Rx_recv = 0;
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <StartTask03+0x198>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e03a      	b.n	8001670 <StartTask03+0x164>
			}
			else if (data == 0xA5)
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <StartTask03+0x170>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2ba5      	cmp	r3, #165	; 0xa5
 8001600:	d107      	bne.n	8001612 <StartTask03+0x106>
			{	//head of string  0xA5/165
				Rx1_Buffer[1] = data;
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <StartTask03+0x170>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <StartTask03+0x194>)
 8001608:	705a      	strb	r2, [r3, #1]
				Rx_len = 1;			//Ready to get length of string
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <StartTask03+0x19c>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	e02e      	b.n	8001670 <StartTask03+0x164>
			}

			else if (Rx_len == 1)
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <StartTask03+0x19c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10a      	bne.n	8001630 <StartTask03+0x124>
			{	//Is it a length of string
				Rx1_Buffer[2] = data;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <StartTask03+0x170>)
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <StartTask03+0x194>)
 8001620:	709a      	strb	r2, [r3, #2]
				Rx_len = 0;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <StartTask03+0x19c>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
				Rx_indx = 3;
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <StartTask03+0x1a0>)
 800162a:	2203      	movs	r2, #3
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	e01f      	b.n	8001670 <StartTask03+0x164>
			}

			else
			{
				if (Rx1_Buffer[2] > Rx_indx)
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <StartTask03+0x194>)
 8001632:	789a      	ldrb	r2, [r3, #2]
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <StartTask03+0x1a0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d90b      	bls.n	8001654 <StartTask03+0x148>
					Rx1_Buffer[Rx_indx++] = data;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <StartTask03+0x1a0>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	b2d1      	uxtb	r1, r2
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <StartTask03+0x1a0>)
 8001646:	7011      	strb	r1, [r2, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <StartTask03+0x170>)
 800164c:	7819      	ldrb	r1, [r3, #0]
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <StartTask03+0x194>)
 8001650:	5499      	strb	r1, [r3, r2]
 8001652:	e00d      	b.n	8001670 <StartTask03+0x164>
				else
				{
					Rx1_Buffer[Rx_indx++] = data; //already get length of string
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <StartTask03+0x1a0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	b2d1      	uxtb	r1, r2
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <StartTask03+0x1a0>)
 800165e:	7011      	strb	r1, [r2, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <StartTask03+0x170>)
 8001664:	7819      	ldrb	r1, [r3, #0]
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <StartTask03+0x194>)
 8001668:	5499      	strb	r1, [r3, r2]
					Rx_recv = 1;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <StartTask03+0x198>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
				}

			} //else
		}
		osDelay(Delay_task03);
 8001670:	2001      	movs	r0, #1
 8001672:	f011 fdbb 	bl	80131ec <osDelay>
		if (isEmpty(&uart_4) == 0)
 8001676:	e74d      	b.n	8001514 <StartTask03+0x8>
 8001678:	24004b8c 	.word	0x24004b8c
 800167c:	24000700 	.word	0x24000700
 8001680:	24000701 	.word	0x24000701
 8001684:	24004db0 	.word	0x24004db0
 8001688:	08018338 	.word	0x08018338
 800168c:	24004e00 	.word	0x24004e00
 8001690:	24004d68 	.word	0x24004d68
 8001694:	24004d94 	.word	0x24004d94
 8001698:	58020800 	.word	0x58020800
 800169c:	24004bd0 	.word	0x24004bd0
 80016a0:	24004dec 	.word	0x24004dec
 80016a4:	24004d66 	.word	0x24004d66
 80016a8:	24000702 	.word	0x24000702
 80016ac:	24000703 	.word	0x24000703

080016b0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	    ttt = (float)HP_Temp/10;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <StartTask04+0x2c>)
 80016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <StartTask04+0x30>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
	//     HAL_UART_Transmit(&huart4,  HP_Temp ,sizeof(3), 100);
	 //   printf("Temp = %d \r\n", HP_Temp);
	    osDelay(200);
 80016d4:	20c8      	movs	r0, #200	; 0xc8
 80016d6:	f011 fd89 	bl	80131ec <osDelay>
	    ttt = (float)HP_Temp/10;
 80016da:	e7ed      	b.n	80016b8 <StartTask04+0x8>
 80016dc:	24004d68 	.word	0x24004d68
 80016e0:	24004e0c 	.word	0x24004e0c

080016e4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
		RTC_CalendarShow(&sdatestructureget, &stimestructureget);
 80016ec:	4904      	ldr	r1, [pc, #16]	; (8001700 <StartTask05+0x1c>)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <StartTask05+0x20>)
 80016f0:	f7ff fb08 	bl	8000d04 <RTC_CalendarShow>
			sprintf((char *)&text, "Date 20%02d-%02d-%02d ",sdatestructureget.Year,sdatestructureget.Month, sdatestructureget.Date);
		LCD_ShowString(4, 40, 160, 16, 16, text);

		sprintf((char *)&text,"Tick: %d ms",HAL_GetTick());
		LCD_ShowString(4, 74, 160, 16, 16,text);
*/		osDelay(1000);
 80016f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f8:	f011 fd78 	bl	80131ec <osDelay>
		RTC_CalendarShow(&sdatestructureget, &stimestructureget);
 80016fc:	e7f6      	b.n	80016ec <StartTask05+0x8>
 80016fe:	bf00      	nop
 8001700:	24004dcc 	.word	0x24004dcc
 8001704:	24004d78 	.word	0x24004d78

08001708 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
	  for(int i=1; i<30;i++)
 8001710:	2301      	movs	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e00a      	b.n	800172c <StartTask06+0x24>
	  {
		  printf("DF_Play No= %d\r\n",i);
 8001716:	68f9      	ldr	r1, [r7, #12]
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <StartTask06+0x34>)
 800171a:	f014 fb93 	bl	8015e44 <iprintf>
		  //  DF_Play(i);

		  osDelay(2000);
 800171e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001722:	f011 fd63 	bl	80131ec <osDelay>
	  for(int i=1; i<30;i++)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3301      	adds	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b1d      	cmp	r3, #29
 8001730:	ddf1      	ble.n	8001716 <StartTask06+0xe>
	  }
    osDelay(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f011 fd5a 	bl	80131ec <osDelay>
	  for(int i=1; i<30;i++)
 8001738:	e7ea      	b.n	8001710 <StartTask06+0x8>
 800173a:	bf00      	nop
 800173c:	0801833c 	.word	0x0801833c

08001740 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void const * argument)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	uint8_t first, second;

	//=============  Temperature  ===============
	for (;;)
	{   // HP temperature detection
		first = HP_Temp >> 8;
 8001748:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <StartTask07+0x184>)
 800174a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174e:	121b      	asrs	r3, r3, #8
 8001750:	b21b      	sxth	r3, r3
 8001752:	73fb      	strb	r3, [r7, #15]
		second = HP_Temp & 0x00FF;
 8001754:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <StartTask07+0x184>)
 8001756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175a:	73bb      	strb	r3, [r7, #14]
		GUI_temp[6] = first;  // Disp temperature and show it on LCD
 800175c:	4a5a      	ldr	r2, [pc, #360]	; (80018c8 <StartTask07+0x188>)
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	7193      	strb	r3, [r2, #6]
		GUI_temp[7] = second;
 8001762:	4a59      	ldr	r2, [pc, #356]	; (80018c8 <StartTask07+0x188>)
 8001764:	7bbb      	ldrb	r3, [r7, #14]
 8001766:	71d3      	strb	r3, [r2, #7]
		HAL_UART_Transmit(&huart1, GUI_temp, sizeof(GUI_temp), 100);
 8001768:	2364      	movs	r3, #100	; 0x64
 800176a:	2208      	movs	r2, #8
 800176c:	4956      	ldr	r1, [pc, #344]	; (80018c8 <StartTask07+0x188>)
 800176e:	4857      	ldr	r0, [pc, #348]	; (80018cc <StartTask07+0x18c>)
 8001770:	f00c fd2d 	bl	800e1ce <HAL_UART_Transmit>

		//=============  Total energy & count value ===============
		if (Count_energy)
 8001774:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <StartTask07+0x190>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03f      	beq.n	80017fc <StartTask07+0xbc>
		{
			if (Stamp)
 800177c:	4b55      	ldr	r3, [pc, #340]	; (80018d4 <StartTask07+0x194>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01d      	beq.n	80017c0 <StartTask07+0x80>
			{
				GUI_sum_value[6] =  (sum_count) >> 24;
 8001784:	4b54      	ldr	r3, [pc, #336]	; (80018d8 <StartTask07+0x198>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0e1b      	lsrs	r3, r3, #24
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <StartTask07+0x19c>)
 800178e:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] =  ((sum_count) >> 16) & 0xFF;
 8001790:	4b51      	ldr	r3, [pc, #324]	; (80018d8 <StartTask07+0x198>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <StartTask07+0x19c>)
 800179a:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] =  ((sum_count) >> 8) & 0xFF;
 800179c:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <StartTask07+0x198>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b4d      	ldr	r3, [pc, #308]	; (80018dc <StartTask07+0x19c>)
 80017a6:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] =  (sum_count) & 0xFF;
 80017a8:	4b4b      	ldr	r3, [pc, #300]	; (80018d8 <StartTask07+0x198>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <StartTask07+0x19c>)
 80017b0:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 80017b2:	2364      	movs	r3, #100	; 0x64
 80017b4:	220a      	movs	r2, #10
 80017b6:	4949      	ldr	r1, [pc, #292]	; (80018dc <StartTask07+0x19c>)
 80017b8:	4844      	ldr	r0, [pc, #272]	; (80018cc <StartTask07+0x18c>)
 80017ba:	f00c fd08 	bl	800e1ce <HAL_UART_Transmit>
 80017be:	e07c      	b.n	80018ba <StartTask07+0x17a>
						100);
			}
			else
			{
				GUI_sum_value[6] = (sum_count_t) >> 24;
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <StartTask07+0x1a0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0e1b      	lsrs	r3, r3, #24
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b44      	ldr	r3, [pc, #272]	; (80018dc <StartTask07+0x19c>)
 80017ca:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_count_t) >> 16) & 0xFF;
 80017cc:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <StartTask07+0x1a0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0c1b      	lsrs	r3, r3, #16
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b41      	ldr	r3, [pc, #260]	; (80018dc <StartTask07+0x19c>)
 80017d6:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_count_t) >> 8) & 0xFF;
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <StartTask07+0x1a0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <StartTask07+0x19c>)
 80017e2:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_count_t) & 0xFF;
 80017e4:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <StartTask07+0x1a0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <StartTask07+0x19c>)
 80017ec:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 80017ee:	2364      	movs	r3, #100	; 0x64
 80017f0:	220a      	movs	r2, #10
 80017f2:	493a      	ldr	r1, [pc, #232]	; (80018dc <StartTask07+0x19c>)
 80017f4:	4835      	ldr	r0, [pc, #212]	; (80018cc <StartTask07+0x18c>)
 80017f6:	f00c fcea 	bl	800e1ce <HAL_UART_Transmit>
 80017fa:	e05e      	b.n	80018ba <StartTask07+0x17a>
						100);
			}
		}
		else
		{
			if (Stamp)
 80017fc:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <StartTask07+0x194>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d02d      	beq.n	8001860 <StartTask07+0x120>
			{
				GUI_sum_value[6] = (sum_energy/10) >> 24;
 8001804:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <StartTask07+0x1a4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a37      	ldr	r2, [pc, #220]	; (80018e8 <StartTask07+0x1a8>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	08db      	lsrs	r3, r3, #3
 8001810:	0e1b      	lsrs	r3, r3, #24
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b31      	ldr	r3, [pc, #196]	; (80018dc <StartTask07+0x19c>)
 8001816:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_energy/10) >> 16) & 0xFF;
 8001818:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <StartTask07+0x1a4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <StartTask07+0x1a8>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	08db      	lsrs	r3, r3, #3
 8001824:	0c1b      	lsrs	r3, r3, #16
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <StartTask07+0x19c>)
 800182a:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_energy/10) >> 8) & 0xFF;
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <StartTask07+0x1a4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a2d      	ldr	r2, [pc, #180]	; (80018e8 <StartTask07+0x1a8>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <StartTask07+0x19c>)
 800183e:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_energy/10) & 0xFF;
 8001840:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <StartTask07+0x1a4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <StartTask07+0x1a8>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b23      	ldr	r3, [pc, #140]	; (80018dc <StartTask07+0x19c>)
 8001850:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	220a      	movs	r2, #10
 8001856:	4921      	ldr	r1, [pc, #132]	; (80018dc <StartTask07+0x19c>)
 8001858:	481c      	ldr	r0, [pc, #112]	; (80018cc <StartTask07+0x18c>)
 800185a:	f00c fcb8 	bl	800e1ce <HAL_UART_Transmit>
 800185e:	e02c      	b.n	80018ba <StartTask07+0x17a>
						100);
			}
			else
			{
				GUI_sum_value[6] = (sum_energy_t/10) >> 24;
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <StartTask07+0x1ac>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a20      	ldr	r2, [pc, #128]	; (80018e8 <StartTask07+0x1a8>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	08db      	lsrs	r3, r3, #3
 800186c:	0e1b      	lsrs	r3, r3, #24
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <StartTask07+0x19c>)
 8001872:	719a      	strb	r2, [r3, #6]
				GUI_sum_value[7] = ((sum_energy_t/10) >> 16) & 0xFF;
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <StartTask07+0x1ac>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <StartTask07+0x1a8>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <StartTask07+0x19c>)
 8001886:	71da      	strb	r2, [r3, #7]
				GUI_sum_value[8] = ((sum_energy_t/10) >> 8) & 0xFF;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <StartTask07+0x1ac>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a16      	ldr	r2, [pc, #88]	; (80018e8 <StartTask07+0x1a8>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <StartTask07+0x19c>)
 800189a:	721a      	strb	r2, [r3, #8]
				GUI_sum_value[9] = (sum_energy_t/10) & 0xFF;
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <StartTask07+0x1ac>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <StartTask07+0x1a8>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	08db      	lsrs	r3, r3, #3
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <StartTask07+0x19c>)
 80018ac:	725a      	strb	r2, [r3, #9]
				HAL_UART_Transmit(&huart1, GUI_sum_value, sizeof(GUI_sum_value),
 80018ae:	2364      	movs	r3, #100	; 0x64
 80018b0:	220a      	movs	r2, #10
 80018b2:	490a      	ldr	r1, [pc, #40]	; (80018dc <StartTask07+0x19c>)
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <StartTask07+0x18c>)
 80018b6:	f00c fc8a 	bl	800e1ce <HAL_UART_Transmit>
						100);
			}
		}

		osDelay(Delay_task07);  //500ms
 80018ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80018be:	f011 fc95 	bl	80131ec <osDelay>
		first = HP_Temp >> 8;
 80018c2:	e741      	b.n	8001748 <StartTask07+0x8>
 80018c4:	24004d68 	.word	0x24004d68
 80018c8:	24000010 	.word	0x24000010
 80018cc:	24005078 	.word	0x24005078
 80018d0:	24004d60 	.word	0x24004d60
 80018d4:	24004d6a 	.word	0x24004d6a
 80018d8:	24004dac 	.word	0x24004dac
 80018dc:	24000028 	.word	0x24000028
 80018e0:	24004d58 	.word	0x24004d58
 80018e4:	24004da4 	.word	0x24004da4
 80018e8:	cccccccd 	.word	0xcccccccd
 80018ec:	24004d98 	.word	0x24004d98

080018f0 <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void const * argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f011 fc77 	bl	80131ec <osDelay>
 80018fe:	e7fb      	b.n	80018f8 <StartTask08+0x8>

08001900 <push>:
/* USER CODE BEGIN Application */
//=============== Ring buffer =====================


void push(uart_t *u, uint8_t data)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
	u->buffer[u->head] = data;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	709a      	strb	r2, [r3, #2]
	u->head++;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	701a      	strb	r2, [r3, #0]
	if (u->head >= MAX_BUFFER_SIZE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b3f      	cmp	r3, #63	; 0x3f
 800192c:	d902      	bls.n	8001934 <push+0x34>
	{
		u->head = 0;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
	}
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <pop>:

uint8_t pop(uart_t *u)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	uint8_t data = u->buffer[u->tail];
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	785b      	ldrb	r3, [r3, #1]
 800194c:	461a      	mov	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	789b      	ldrb	r3, [r3, #2]
 8001954:	73fb      	strb	r3, [r7, #15]
	u->tail++;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	785b      	ldrb	r3, [r3, #1]
 800195a:	3301      	adds	r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	705a      	strb	r2, [r3, #1]
	if (u->tail >= MAX_BUFFER_SIZE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	2b3f      	cmp	r3, #63	; 0x3f
 8001968:	d902      	bls.n	8001970 <pop+0x30>
	{
		u->tail = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	705a      	strb	r2, [r3, #1]
	}
	return data;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <isEmpty>:

uint8_t isEmpty(uart_t *u)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return u->head == u->tail;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	781a      	ldrb	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	785b      	ldrb	r3, [r3, #1]
 800198e:	429a      	cmp	r2, r3
 8001990:	bf0c      	ite	eq
 8001992:	2301      	moveq	r3, #1
 8001994:	2300      	movne	r3, #0
 8001996:	b2db      	uxtb	r3, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_UART_RxCpltCallback+0x50>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10a      	bne.n	80019cc <HAL_UART_RxCpltCallback+0x28>
	{
		push(&uart_1, rx1_data);  //save data to Ring buffer
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_UART_RxCpltCallback+0x54>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	480f      	ldr	r0, [pc, #60]	; (80019fc <HAL_UART_RxCpltCallback+0x58>)
 80019be:	f7ff ff9f 	bl	8001900 <push>
		HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <HAL_UART_RxCpltCallback+0x54>)
 80019c6:	480e      	ldr	r0, [pc, #56]	; (8001a00 <HAL_UART_RxCpltCallback+0x5c>)
 80019c8:	f00c fc98 	bl	800e2fc <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART4)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <HAL_UART_RxCpltCallback+0x60>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10a      	bne.n	80019ec <HAL_UART_RxCpltCallback+0x48>
	{
		push(&uart_4, rx4_data);  //save data to Ring buffer
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_UART_RxCpltCallback+0x64>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	4619      	mov	r1, r3
 80019dc:	480b      	ldr	r0, [pc, #44]	; (8001a0c <HAL_UART_RxCpltCallback+0x68>)
 80019de:	f7ff ff8f 	bl	8001900 <push>
		HAL_UART_Receive_IT(&huart4, &rx4_data, 1);
 80019e2:	2201      	movs	r2, #1
 80019e4:	4908      	ldr	r1, [pc, #32]	; (8001a08 <HAL_UART_RxCpltCallback+0x64>)
 80019e6:	480a      	ldr	r0, [pc, #40]	; (8001a10 <HAL_UART_RxCpltCallback+0x6c>)
 80019e8:	f00c fc88 	bl	800e2fc <HAL_UART_Receive_IT>
	}

}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40011000 	.word	0x40011000
 80019f8:	24004bcf 	.word	0x24004bcf
 80019fc:	24004bd0 	.word	0x24004bd0
 8001a00:	24005078 	.word	0x24005078
 8001a04:	40004c00 	.word	0x40004c00
 8001a08:	24004bce 	.word	0x24004bce
 8001a0c:	24004b8c 	.word	0x24004b8c
 8001a10:	24005108 	.word	0x24005108

08001a14 <MX_GPIO_Init>:
     PC11   ------> SDMMC1_D3
     PC12   ------> SDMMC1_CK
     PD2   ------> SDMMC1_CMD
*/
void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a2a:	4b95      	ldr	r3, [pc, #596]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	4a93      	ldr	r2, [pc, #588]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a3a:	4b91      	ldr	r3, [pc, #580]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a48:	4b8d      	ldr	r3, [pc, #564]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4e:	4a8c      	ldr	r2, [pc, #560]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a58:	4b89      	ldr	r3, [pc, #548]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a66:	4b86      	ldr	r3, [pc, #536]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6c:	4a84      	ldr	r2, [pc, #528]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a76:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b7e      	ldr	r3, [pc, #504]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	4a7d      	ldr	r2, [pc, #500]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a94:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b77      	ldr	r3, [pc, #476]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	4a75      	ldr	r2, [pc, #468]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab2:	4b73      	ldr	r3, [pc, #460]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac0:	4b6f      	ldr	r3, [pc, #444]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	4a6e      	ldr	r2, [pc, #440]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad0:	4b6b      	ldr	r3, [pc, #428]	; (8001c80 <MX_GPIO_Init+0x26c>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KEY_GPIO_Port, KEY_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2108      	movs	r1, #8
 8001ae2:	4868      	ldr	r0, [pc, #416]	; (8001c84 <MX_GPIO_Init+0x270>)
 8001ae4:	f005 fbe2 	bl	80072ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8001aee:	4865      	ldr	r0, [pc, #404]	; (8001c84 <MX_GPIO_Init+0x270>)
 8001af0:	f005 fbdc 	bl	80072ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fire_lamp_GPIO_Port, Fire_lamp_Pin, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afa:	4863      	ldr	r0, [pc, #396]	; (8001c88 <MX_GPIO_Init+0x274>)
 8001afc:	f005 fbd6 	bl	80072ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 8001b06:	4861      	ldr	r0, [pc, #388]	; (8001c8c <MX_GPIO_Init+0x278>)
 8001b08:	f005 fbd0 	bl	80072ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_LED_GPIO_Port, Test_LED_Pin, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	485f      	ldr	r0, [pc, #380]	; (8001c90 <MX_GPIO_Init+0x27c>)
 8001b12:	f005 fbcb 	bl	80072ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_CS_GPIO_Port, F_CS_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2140      	movs	r1, #64	; 0x40
 8001b1a:	485c      	ldr	r0, [pc, #368]	; (8001c8c <MX_GPIO_Init+0x278>)
 8001b1c:	f005 fbc6 	bl	80072ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001b20:	2308      	movs	r3, #8
 8001b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	4619      	mov	r1, r3
 8001b36:	4853      	ldr	r0, [pc, #332]	; (8001c84 <MX_GPIO_Init+0x270>)
 8001b38:	f005 f9f0 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6;
 8001b3c:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	484f      	ldr	r0, [pc, #316]	; (8001c90 <MX_GPIO_Init+0x27c>)
 8001b52:	f005 f9e3 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8001b56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4845      	ldr	r0, [pc, #276]	; (8001c84 <MX_GPIO_Init+0x270>)
 8001b70:	f005 f9d4 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Fire_lamp_Pin;
 8001b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Fire_lamp_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	483e      	ldr	r0, [pc, #248]	; (8001c88 <MX_GPIO_Init+0x274>)
 8001b8e:	f005 f9c5 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4838      	ldr	r0, [pc, #224]	; (8001c88 <MX_GPIO_Init+0x274>)
 8001ba8:	f005 f9b8 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_15;
 8001bac:	f44f 4343 	mov.w	r3, #49920	; 0xc300
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4831      	ldr	r0, [pc, #196]	; (8001c8c <MX_GPIO_Init+0x278>)
 8001bc6:	f005 f9a9 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	482b      	ldr	r0, [pc, #172]	; (8001c8c <MX_GPIO_Init+0x278>)
 8001be0:	f005 f99c 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Test_LED_Pin;
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bec:	2302      	movs	r3, #2
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Test_LED_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4825      	ldr	r0, [pc, #148]	; (8001c90 <MX_GPIO_Init+0x27c>)
 8001bfc:	f005 f98e 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c00:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c04:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001c12:	230c      	movs	r3, #12
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	481c      	ldr	r0, [pc, #112]	; (8001c90 <MX_GPIO_Init+0x27c>)
 8001c1e:	f005 f97d 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Foot_Pin;
 8001c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Foot_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4817      	ldr	r0, [pc, #92]	; (8001c94 <MX_GPIO_Init+0x280>)
 8001c38:	f005 f970 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001c4c:	230c      	movs	r3, #12
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4619      	mov	r1, r3
 8001c56:	480d      	ldr	r0, [pc, #52]	; (8001c8c <MX_GPIO_Init+0x278>)
 8001c58:	f005 f960 	bl	8006f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_CS_Pin;
 8001c5c:	2340      	movs	r3, #64	; 0x40
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(F_CS_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4806      	ldr	r0, [pc, #24]	; (8001c8c <MX_GPIO_Init+0x278>)
 8001c74:	f005 f952 	bl	8006f1c <HAL_GPIO_Init>

}
 8001c78:	bf00      	nop
 8001c7a:	3730      	adds	r7, #48	; 0x30
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	58024400 	.word	0x58024400
 8001c84:	58021000 	.word	0x58021000
 8001c88:	58020400 	.word	0x58020400
 8001c8c:	58020c00 	.word	0x58020c00
 8001c90:	58020800 	.word	0x58020800
 8001c94:	58020000 	.word	0x58020000

08001c98 <_write>:
void PeriphCommonClock_Config(void);
void MX_FREERTOS_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *str, int len) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*)str, len);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	4619      	mov	r1, r3
 8001caa:	68b8      	ldr	r0, [r7, #8]
 8001cac:	f012 fe8e 	bl	80149cc <CDC_Transmit_FS>
	return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <init_uart>:
	HAL_GPIO_WritePin(KEY_GPIO_Port,KEY_Pin,GPIO_PIN_RESET);
	HAL_Delay(Ldelay-1);
}

void init_uart(uart_t *u)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
	u->head = 0;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
	u->tail = 0;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	705a      	strb	r2, [r3, #1]
	memset(u->buffer, 0, sizeof(u->buffer));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f013 fc0d 	bl	80154f6 <memset>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_Init();
 8001cea:	f003 f849 	bl	8004d80 <HAL_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cee:	f003 f847 	bl	8004d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf2:	f000 f849 	bl	8001d88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001cf6:	f000 f8d9 	bl	8001eac <PeriphCommonClock_Config>
	RTC_DateTypeDef sdatestructureget  ;
	RTC_TimeTypeDef stimestructureget  ;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cfa:	f7ff fe8b 	bl	8001a14 <MX_GPIO_Init>
  MX_RTC_Init();
 8001cfe:	f000 f94f 	bl	8001fa0 <MX_RTC_Init>
  MX_SPI1_Init();
 8001d02:	f000 f9d7 	bl	80020b4 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001d06:	f000 fa2b 	bl	8002160 <MX_SPI4_Init>
  MX_TIM1_Init();
 8001d0a:	f000 fd47 	bl	800279c <MX_TIM1_Init>
  MX_UART4_Init();
 8001d0e:	f000 fe31 	bl	8002974 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001d12:	f000 fe7b 	bl	8002a0c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001d16:	f000 fec5 	bl	8002aa4 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8001d1a:	f7fe fe0d 	bl	8000938 <MX_ADC3_Init>
  MX_ADC2_Init();
 8001d1e:	f7fe fda5 	bl	800086c <MX_ADC2_Init>
  MX_DAC1_Init();
 8001d22:	f7fe ff6d 	bl	8000c00 <MX_DAC1_Init>
  MX_ADC1_Init();
 8001d26:	f7fe fd27 	bl	8000778 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001d2a:	f000 f904 	bl	8001f36 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	init_uart(&uart_1);
 8001d2e:	480f      	ldr	r0, [pc, #60]	; (8001d6c <main+0x88>)
 8001d30:	f7ff ffc3 	bl	8001cba <init_uart>
	init_uart(&uart_4);
 8001d34:	480e      	ldr	r0, [pc, #56]	; (8001d70 <main+0x8c>)
 8001d36:	f7ff ffc0 	bl	8001cba <init_uart>
	HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	490d      	ldr	r1, [pc, #52]	; (8001d74 <main+0x90>)
 8001d3e:	480e      	ldr	r0, [pc, #56]	; (8001d78 <main+0x94>)
 8001d40:	f00c fadc 	bl	800e2fc <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &rx4_data, 1);
 8001d44:	2201      	movs	r2, #1
 8001d46:	490d      	ldr	r1, [pc, #52]	; (8001d7c <main+0x98>)
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <main+0x9c>)
 8001d4a:	f00c fad7 	bl	800e2fc <HAL_UART_Receive_IT>

	printf("Hello \n\r");
 8001d4e:	480d      	ldr	r0, [pc, #52]	; (8001d84 <main+0xa0>)
 8001d50:	f014 f878 	bl	8015e44 <iprintf>

	DF_Init(15);
 8001d54:	200f      	movs	r0, #15
 8001d56:	f7fe fce1 	bl	800071c <DF_Init>
	DF_PlayFromStart();
 8001d5a:	f7fe fcd3 	bl	8000704 <DF_PlayFromStart>


 	LCD_Test();
 8001d5e:	f001 f813 	bl	8002d88 <LCD_Test>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d62:	f7fe ffff 	bl	8000d64 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001d66:	f011 f9ee 	bl	8013146 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <main+0x86>
 8001d6c:	24004bd0 	.word	0x24004bd0
 8001d70:	24004b8c 	.word	0x24004b8c
 8001d74:	24004bcf 	.word	0x24004bcf
 8001d78:	24005078 	.word	0x24005078
 8001d7c:	24004bce 	.word	0x24004bce
 8001d80:	24005108 	.word	0x24005108
 8001d84:	08018350 	.word	0x08018350

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09c      	sub	sp, #112	; 0x70
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d92:	224c      	movs	r2, #76	; 0x4c
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f013 fbad 	bl	80154f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2220      	movs	r2, #32
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f013 fba7 	bl	80154f6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f006 fc9d 	bl	80086e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <SystemClock_Config+0x118>)
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	4a3a      	ldr	r2, [pc, #232]	; (8001ea0 <SystemClock_Config+0x118>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <SystemClock_Config+0x118>)
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <SystemClock_Config+0x11c>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dd0:	4a34      	ldr	r2, [pc, #208]	; (8001ea4 <SystemClock_Config+0x11c>)
 8001dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <SystemClock_Config+0x11c>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001de4:	bf00      	nop
 8001de6:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <SystemClock_Config+0x11c>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df2:	d1f8      	bne.n	8001de6 <SystemClock_Config+0x5e>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001df4:	f006 fc68 	bl	80086c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001df8:	f003 f842 	bl	8004e80 <HAL_GetREVID>
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <SystemClock_Config+0x120>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	4a29      	ldr	r2, [pc, #164]	; (8001ea8 <SystemClock_Config+0x120>)
 8001e02:	f023 0318 	bic.w	r3, r3, #24
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <SystemClock_Config+0x120>)
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	f023 0303 	bic.w	r3, r3, #3
 8001e10:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <SystemClock_Config+0x120>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001e18:	2305      	movs	r3, #5
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e22:	2301      	movs	r3, #1
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e26:	2302      	movs	r3, #2
 8001e28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001e32:	230c      	movs	r3, #12
 8001e34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e36:	2302      	movs	r3, #2
 8001e38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e42:	230c      	movs	r3, #12
 8001e44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001e46:	2302      	movs	r3, #2
 8001e48:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	4618      	mov	r0, r3
 8001e54:	f006 fc92 	bl	800877c <HAL_RCC_OscConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001e5e:	f000 f899 	bl	8001f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e62:	233f      	movs	r3, #63	; 0x3f
 8001e64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e66:	2303      	movs	r3, #3
 8001e68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e76:	2340      	movs	r3, #64	; 0x40
 8001e78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2101      	movs	r1, #1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f007 f887 	bl	8008f9c <HAL_RCC_ClockConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001e94:	f000 f87e 	bl	8001f94 <Error_Handler>
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3770      	adds	r7, #112	; 0x70
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	58000400 	.word	0x58000400
 8001ea4:	58024800 	.word	0x58024800
 8001ea8:	58024400 	.word	0x58024400

08001eac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0b0      	sub	sp, #192	; 0xc0
 8001eb0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	22bc      	movs	r2, #188	; 0xbc
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f013 fb1c 	bl	80154f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
 8001ebe:	f44f 2342 	mov.w	r3, #794624	; 0xc2000
 8001ec2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001ec8:	230c      	movs	r3, #12
 8001eca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001ed8:	23c0      	movs	r3, #192	; 0xc0
 8001eda:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001edc:	2320      	movs	r3, #32
 8001ede:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001ee8:	230c      	movs	r3, #12
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 5;
 8001eec:	2305      	movs	r3, #5
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001ef8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f02:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 8001f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0c:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001f0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f007 fc0a 	bl	8009738 <HAL_RCCEx_PeriphCLKConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <PeriphCommonClock_Config+0x82>
  {
    Error_Handler();
 8001f2a:	f000 f833 	bl	8001f94 <Error_Handler>
  }
}
 8001f2e:	bf00      	nop
 8001f30:	37c0      	adds	r7, #192	; 0xc0
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	2025      	movs	r0, #37	; 0x25
 8001f40:	f004 f910 	bl	8006164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f44:	2025      	movs	r0, #37	; 0x25
 8001f46:	f004 f927 	bl	8006198 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2105      	movs	r1, #5
 8001f4e:	2027      	movs	r0, #39	; 0x27
 8001f50:	f004 f908 	bl	8006164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f54:	2027      	movs	r0, #39	; 0x27
 8001f56:	f004 f91f 	bl	8006198 <HAL_NVIC_EnableIRQ>
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2105      	movs	r1, #5
 8001f5e:	2034      	movs	r0, #52	; 0x34
 8001f60:	f004 f900 	bl	8006164 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f64:	2034      	movs	r0, #52	; 0x34
 8001f66:	f004 f917 	bl	8006198 <HAL_NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f82:	f002 ff39 	bl	8004df8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40014800 	.word	0x40014800

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <Error_Handler+0x8>
	...

08001fa0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b090      	sub	sp, #64	; 0x40
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
		RTC_TimeTypeDef sTime = {0};
 8001fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]
		  RTC_DateTypeDef sDate = {0};
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
		  RTC_AlarmTypeDef sAlarm = {0};
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2228      	movs	r2, #40	; 0x28
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f013 fa98 	bl	80154f6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <MX_RTC_Init+0x70>)
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_RTC_Init+0x74>)
 8001fca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <MX_RTC_Init+0x70>)
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_RTC_Init+0x70>)
 8001fd4:	227f      	movs	r2, #127	; 0x7f
 8001fd6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <MX_RTC_Init+0x70>)
 8001fda:	22ff      	movs	r2, #255	; 0xff
 8001fdc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_RTC_Init+0x70>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <MX_RTC_Init+0x70>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_RTC_Init+0x70>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <MX_RTC_Init+0x70>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <MX_RTC_Init+0x70>)
 8001ff8:	f009 fd24 	bl	800ba44 <HAL_RTC_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002002:	f7ff ffc7 	bl	8001f94 <Error_Handler>
    {
      Error_Handler();
    }
  /* USER CODE END RTC_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	3740      	adds	r7, #64	; 0x40
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	24004e1c 	.word	0x24004e1c
 8002014:	58004000 	.word	0x58004000

08002018 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b0b2      	sub	sp, #200	; 0xc8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	22bc      	movs	r2, #188	; 0xbc
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f013 fa64 	bl	80154f6 <memset>
  if(rtcHandle->Instance==RTC)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a0f      	ldr	r2, [pc, #60]	; (8002070 <HAL_RTC_MspInit+0x58>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d116      	bne.n	8002066 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002038:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800203c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800203e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002042:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	4618      	mov	r0, r3
 800204c:	f007 fb74 	bl	8009738 <HAL_RCCEx_PeriphCLKConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002056:	f7ff ff9d 	bl	8001f94 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RTC_MspInit+0x5c>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <HAL_RTC_MspInit+0x5c>)
 8002060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002064:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002066:	bf00      	nop
 8002068:	37c8      	adds	r7, #200	; 0xc8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	58004000 	.word	0x58004000
 8002074:	58024400 	.word	0x58024400

08002078 <volume>:
void play(uint8_t Track) {
	uint8_t play[6] = { 0xAA, 0x07, 0x02, 0x00, Track, Track + 0xB3 };
	HAL_UART_Transmit(&huart3, play, sizeof(play), 100);
}

void volume(uint8_t vol) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
	uint8_t volume[5] = { 0xAA, 0x13, 0x01, vol, vol + 0xBE };
 8002082:	23aa      	movs	r3, #170	; 0xaa
 8002084:	723b      	strb	r3, [r7, #8]
 8002086:	2313      	movs	r3, #19
 8002088:	727b      	strb	r3, [r7, #9]
 800208a:	2301      	movs	r3, #1
 800208c:	72bb      	strb	r3, [r7, #10]
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	72fb      	strb	r3, [r7, #11]
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	3b42      	subs	r3, #66	; 0x42
 8002096:	b2db      	uxtb	r3, r3
 8002098:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, volume, sizeof(volume), 100);
 800209a:	f107 0108 	add.w	r1, r7, #8
 800209e:	2364      	movs	r3, #100	; 0x64
 80020a0:	2205      	movs	r2, #5
 80020a2:	4803      	ldr	r0, [pc, #12]	; (80020b0 <volume+0x38>)
 80020a4:	f00c f893 	bl	800e1ce <HAL_UART_Transmit>
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	24004e40 	.word	0x24004e40

080020b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020ba:	4a28      	ldr	r2, [pc, #160]	; (800215c <MX_SPI1_Init+0xa8>)
 80020bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020ce:	2207      	movs	r2, #7
 80020d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020d8:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <MX_SPI1_Init+0xa4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <MX_SPI1_Init+0xa4>)
 8002100:	2200      	movs	r2, #0
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <MX_SPI1_Init+0xa4>)
 8002106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800210a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <MX_SPI1_Init+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_SPI1_Init+0xa4>)
 8002114:	2200      	movs	r2, #0
 8002116:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <MX_SPI1_Init+0xa4>)
 800211a:	2200      	movs	r2, #0
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_SPI1_Init+0xa4>)
 8002120:	2200      	movs	r2, #0
 8002122:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_SPI1_Init+0xa4>)
 8002126:	2200      	movs	r2, #0
 8002128:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_SPI1_Init+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_SPI1_Init+0xa4>)
 8002132:	2200      	movs	r2, #0
 8002134:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_SPI1_Init+0xa4>)
 8002138:	2200      	movs	r2, #0
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_SPI1_Init+0xa4>)
 800213e:	2200      	movs	r2, #0
 8002140:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_SPI1_Init+0xa4>)
 8002144:	f009 fe4e 	bl	800bde4 <HAL_SPI_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800214e:	f7ff ff21 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	24004f58 	.word	0x24004f58
 800215c:	40013000 	.word	0x40013000

08002160 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002164:	4b28      	ldr	r3, [pc, #160]	; (8002208 <MX_SPI4_Init+0xa8>)
 8002166:	4a29      	ldr	r2, [pc, #164]	; (800220c <MX_SPI4_Init+0xac>)
 8002168:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800216a:	4b27      	ldr	r3, [pc, #156]	; (8002208 <MX_SPI4_Init+0xa8>)
 800216c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002170:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8002172:	4b25      	ldr	r3, [pc, #148]	; (8002208 <MX_SPI4_Init+0xa8>)
 8002174:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8002178:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <MX_SPI4_Init+0xa8>)
 800217c:	2207      	movs	r2, #7
 800217e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <MX_SPI4_Init+0xa8>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <MX_SPI4_Init+0xa8>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <MX_SPI4_Init+0xa8>)
 800218e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002192:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <MX_SPI4_Init+0xa8>)
 8002196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800219a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <MX_SPI4_Init+0xa8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_SPI4_Init+0xa8>)
 80021f4:	f009 fdf6 	bl	800bde4 <HAL_SPI_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 80021fe:	f7ff fec9 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	24004ed0 	.word	0x24004ed0
 800220c:	40013400 	.word	0x40013400

08002210 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0bc      	sub	sp, #240	; 0xf0
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002228:	f107 0320 	add.w	r3, r7, #32
 800222c:	22bc      	movs	r2, #188	; 0xbc
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f013 f960 	bl	80154f6 <memset>
  if(spiHandle->Instance==SPI1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a53      	ldr	r2, [pc, #332]	; (8002388 <HAL_SPI_MspInit+0x178>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d166      	bne.n	800230e <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002244:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002246:	2300      	movs	r3, #0
 8002248:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800224a:	f107 0320 	add.w	r3, r7, #32
 800224e:	4618      	mov	r0, r3
 8002250:	f007 fa72 	bl	8009738 <HAL_RCCEx_PeriphCLKConfig>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800225a:	f7ff fe9b 	bl	8001f94 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800225e:	4b4b      	ldr	r3, [pc, #300]	; (800238c <HAL_SPI_MspInit+0x17c>)
 8002260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002264:	4a49      	ldr	r2, [pc, #292]	; (800238c <HAL_SPI_MspInit+0x17c>)
 8002266:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800226a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_SPI_MspInit+0x17c>)
 8002270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227c:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_SPI_MspInit+0x17c>)
 800227e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002282:	4a42      	ldr	r2, [pc, #264]	; (800238c <HAL_SPI_MspInit+0x17c>)
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228c:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_SPI_MspInit+0x17c>)
 800228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_SPI_MspInit+0x17c>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a0:	4a3a      	ldr	r2, [pc, #232]	; (800238c <HAL_SPI_MspInit+0x17c>)
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <HAL_SPI_MspInit+0x17c>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022d0:	2305      	movs	r3, #5
 80022d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022da:	4619      	mov	r1, r3
 80022dc:	482c      	ldr	r0, [pc, #176]	; (8002390 <HAL_SPI_MspInit+0x180>)
 80022de:	f004 fe1d 	bl	8006f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80022e2:	2318      	movs	r3, #24
 80022e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022fa:	2305      	movs	r3, #5
 80022fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002304:	4619      	mov	r1, r3
 8002306:	4823      	ldr	r0, [pc, #140]	; (8002394 <HAL_SPI_MspInit+0x184>)
 8002308:	f004 fe08 	bl	8006f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800230c:	e038      	b.n	8002380 <HAL_SPI_MspInit+0x170>
  else if(spiHandle->Instance==SPI4)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a21      	ldr	r2, [pc, #132]	; (8002398 <HAL_SPI_MspInit+0x188>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d133      	bne.n	8002380 <HAL_SPI_MspInit+0x170>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_SPI_MspInit+0x17c>)
 800231a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800231e:	4a1b      	ldr	r2, [pc, #108]	; (800238c <HAL_SPI_MspInit+0x17c>)
 8002320:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002324:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_SPI_MspInit+0x17c>)
 800232a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800232e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_SPI_MspInit+0x17c>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233c:	4a13      	ldr	r2, [pc, #76]	; (800238c <HAL_SPI_MspInit+0x17c>)
 800233e:	f043 0310 	orr.w	r3, r3, #16
 8002342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_SPI_MspInit+0x17c>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002354:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002368:	2301      	movs	r3, #1
 800236a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800236e:	2305      	movs	r3, #5
 8002370:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002374:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002378:	4619      	mov	r1, r3
 800237a:	4808      	ldr	r0, [pc, #32]	; (800239c <HAL_SPI_MspInit+0x18c>)
 800237c:	f004 fdce 	bl	8006f1c <HAL_GPIO_Init>
}
 8002380:	bf00      	nop
 8002382:	37f0      	adds	r7, #240	; 0xf0
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40013000 	.word	0x40013000
 800238c:	58024400 	.word	0x58024400
 8002390:	58020c00 	.word	0x58020c00
 8002394:	58020400 	.word	0x58020400
 8002398:	40013400 	.word	0x40013400
 800239c:	58021000 	.word	0x58021000

080023a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_MspInit+0x38>)
 80023a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <HAL_MspInit+0x38>)
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_MspInit+0x38>)
 80023b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	210f      	movs	r1, #15
 80023c8:	f06f 0001 	mvn.w	r0, #1
 80023cc:	f003 feca 	bl	8006164 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	58024400 	.word	0x58024400

080023dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08e      	sub	sp, #56	; 0x38
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	d844      	bhi.n	8002474 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 80023ea:	2200      	movs	r2, #0
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	2076      	movs	r0, #118	; 0x76
 80023f0:	f003 feb8 	bl	8006164 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80023f4:	2076      	movs	r0, #118	; 0x76
 80023f6:	f003 fecf 	bl	8006198 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80023fa:	4a24      	ldr	r2, [pc, #144]	; (800248c <HAL_InitTick+0xb0>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002400:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_InitTick+0xb4>)
 8002402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002406:	4a22      	ldr	r2, [pc, #136]	; (8002490 <HAL_InitTick+0xb4>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_InitTick+0xb4>)
 8002412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800241e:	f107 020c 	add.w	r2, r7, #12
 8002422:	f107 0310 	add.w	r3, r7, #16
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f007 f943 	bl	80096b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800242e:	f007 f92b 	bl	8009688 <HAL_RCC_GetPCLK2Freq>
 8002432:	4603      	mov	r3, r0
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_InitTick+0xb8>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	0c9b      	lsrs	r3, r3, #18
 8002442:	3b01      	subs	r3, #1
 8002444:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_InitTick+0xbc>)
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <HAL_InitTick+0xc0>)
 800244a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_InitTick+0xbc>)
 800244e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002452:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002454:	4a10      	ldr	r2, [pc, #64]	; (8002498 <HAL_InitTick+0xbc>)
 8002456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002458:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <HAL_InitTick+0xbc>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_InitTick+0xbc>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8002466:	480c      	ldr	r0, [pc, #48]	; (8002498 <HAL_InitTick+0xbc>)
 8002468:	f00a fd77 	bl	800cf5a <HAL_TIM_Base_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <HAL_InitTick+0xa6>
 8002472:	e001      	b.n	8002478 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e005      	b.n	8002484 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8002478:	4807      	ldr	r0, [pc, #28]	; (8002498 <HAL_InitTick+0xbc>)
 800247a:	f00a fdcf 	bl	800d01c <HAL_TIM_Base_Start_IT>
 800247e:	4603      	mov	r3, r0
 8002480:	e000      	b.n	8002484 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	3738      	adds	r7, #56	; 0x38
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	240000dc 	.word	0x240000dc
 8002490:	58024400 	.word	0x58024400
 8002494:	431bde83 	.word	0x431bde83
 8002498:	24004fe0 	.word	0x24004fe0
 800249c:	40014800 	.word	0x40014800

080024a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <NMI_Handler+0x4>

080024a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <HardFault_Handler+0x4>

080024ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <MemManage_Handler+0x4>

080024b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <BusFault_Handler+0x4>

080024b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <UsageFault_Handler+0x4>

080024be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <USART1_IRQHandler+0x10>)
 80024d2:	f00b ff59 	bl	800e388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	24005078 	.word	0x24005078

080024e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <USART3_IRQHandler+0x10>)
 80024e6:	f00b ff4f 	bl	800e388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	24004e40 	.word	0x24004e40

080024f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <UART4_IRQHandler+0x10>)
 80024fa:	f00b ff45 	bl	800e388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	24005108 	.word	0x24005108

08002508 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <OTG_FS_IRQHandler+0x10>)
 800250e:	f005 f857 	bl	80075c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	240066b8 	.word	0x240066b8

0800251c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM17_IRQHandler+0x10>)
 8002522:	f00a fe42 	bl	800d1aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	24004fe0 	.word	0x24004fe0

08002530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	return 1;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_kill>:

int _kill(int pid, int sig)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800254a:	f012 fea3 	bl	8015294 <__errno>
 800254e:	4603      	mov	r3, r0
 8002550:	2216      	movs	r2, #22
 8002552:	601a      	str	r2, [r3, #0]
	return -1;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_exit>:

void _exit (int status)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ffe7 	bl	8002540 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002572:	e7fe      	b.n	8002572 <_exit+0x12>

08002574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	e00a      	b.n	800259c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002586:	f3af 8000 	nop.w
 800258a:	4601      	mov	r1, r0
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	60ba      	str	r2, [r7, #8]
 8002592:	b2ca      	uxtb	r2, r1
 8002594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3301      	adds	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dbf0      	blt.n	8002586 <_read+0x12>
	}

return len;
 80025a4:	687b      	ldr	r3, [r7, #4]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
	return -1;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025d6:	605a      	str	r2, [r3, #4]
	return 0;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <_isatty>:

int _isatty(int file)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
	return 1;
 80025ee:	2301      	movs	r3, #1
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
	return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <_sbrk+0x5c>)
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <_sbrk+0x60>)
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <_sbrk+0x64>)
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <_sbrk+0x68>)
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <_sbrk+0x64>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	429a      	cmp	r2, r3
 8002646:	d207      	bcs.n	8002658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002648:	f012 fe24 	bl	8015294 <__errno>
 800264c:	4603      	mov	r3, r0
 800264e:	220c      	movs	r2, #12
 8002650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	e009      	b.n	800266c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <_sbrk+0x64>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <_sbrk+0x64>)
 8002668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	24080000 	.word	0x24080000
 8002678:	00002000 	.word	0x00002000
 800267c:	24000704 	.word	0x24000704
 8002680:	24006ad0 	.word	0x24006ad0

08002684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002688:	4b39      	ldr	r3, [pc, #228]	; (8002770 <SystemInit+0xec>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	4a38      	ldr	r2, [pc, #224]	; (8002770 <SystemInit+0xec>)
 8002690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002698:	4b36      	ldr	r3, [pc, #216]	; (8002774 <SystemInit+0xf0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	2b06      	cmp	r3, #6
 80026a2:	d807      	bhi.n	80026b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <SystemInit+0xf0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 030f 	bic.w	r3, r3, #15
 80026ac:	4a31      	ldr	r2, [pc, #196]	; (8002774 <SystemInit+0xf0>)
 80026ae:	f043 0307 	orr.w	r3, r3, #7
 80026b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <SystemInit+0xf4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2f      	ldr	r2, [pc, #188]	; (8002778 <SystemInit+0xf4>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <SystemInit+0xf4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <SystemInit+0xf4>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	492b      	ldr	r1, [pc, #172]	; (8002778 <SystemInit+0xf4>)
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <SystemInit+0xf8>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <SystemInit+0xf0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026de:	4b25      	ldr	r3, [pc, #148]	; (8002774 <SystemInit+0xf0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 030f 	bic.w	r3, r3, #15
 80026e6:	4a23      	ldr	r2, [pc, #140]	; (8002774 <SystemInit+0xf0>)
 80026e8:	f043 0307 	orr.w	r3, r3, #7
 80026ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <SystemInit+0xf4>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026f4:	4b20      	ldr	r3, [pc, #128]	; (8002778 <SystemInit+0xf4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <SystemInit+0xf4>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <SystemInit+0xf4>)
 8002702:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <SystemInit+0xfc>)
 8002704:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <SystemInit+0xf4>)
 8002708:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <SystemInit+0x100>)
 800270a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <SystemInit+0xf4>)
 800270e:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <SystemInit+0x104>)
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <SystemInit+0xf4>)
 8002714:	2200      	movs	r2, #0
 8002716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <SystemInit+0xf4>)
 800271a:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <SystemInit+0x104>)
 800271c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <SystemInit+0xf4>)
 8002720:	2200      	movs	r2, #0
 8002722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <SystemInit+0xf4>)
 8002726:	4a18      	ldr	r2, [pc, #96]	; (8002788 <SystemInit+0x104>)
 8002728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <SystemInit+0xf4>)
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <SystemInit+0xf4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a10      	ldr	r2, [pc, #64]	; (8002778 <SystemInit+0xf4>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <SystemInit+0xf4>)
 800273e:	2200      	movs	r2, #0
 8002740:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <SystemInit+0x108>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <SystemInit+0x10c>)
 8002748:	4013      	ands	r3, r2
 800274a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800274e:	d202      	bcs.n	8002756 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002750:	4b10      	ldr	r3, [pc, #64]	; (8002794 <SystemInit+0x110>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <SystemInit+0x114>)
 8002758:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800275c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <SystemInit+0xec>)
 8002760:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002764:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00
 8002774:	52002000 	.word	0x52002000
 8002778:	58024400 	.word	0x58024400
 800277c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002780:	02020200 	.word	0x02020200
 8002784:	01ff0000 	.word	0x01ff0000
 8002788:	01010280 	.word	0x01010280
 800278c:	5c001000 	.word	0x5c001000
 8002790:	ffff0000 	.word	0xffff0000
 8002794:	51008108 	.word	0x51008108
 8002798:	52004000 	.word	0x52004000

0800279c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b096      	sub	sp, #88	; 0x58
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
 80027bc:	611a      	str	r2, [r3, #16]
 80027be:	615a      	str	r2, [r3, #20]
 80027c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	222c      	movs	r2, #44	; 0x2c
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f012 fe94 	bl	80154f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027ce:	4b38      	ldr	r3, [pc, #224]	; (80028b0 <MX_TIM1_Init+0x114>)
 80027d0:	4a38      	ldr	r2, [pc, #224]	; (80028b4 <MX_TIM1_Init+0x118>)
 80027d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <MX_TIM1_Init+0x114>)
 80027d6:	2277      	movs	r2, #119	; 0x77
 80027d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027da:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <MX_TIM1_Init+0x114>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80027e0:	4b33      	ldr	r3, [pc, #204]	; (80028b0 <MX_TIM1_Init+0x114>)
 80027e2:	2263      	movs	r2, #99	; 0x63
 80027e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e6:	4b32      	ldr	r3, [pc, #200]	; (80028b0 <MX_TIM1_Init+0x114>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027ec:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <MX_TIM1_Init+0x114>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f2:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <MX_TIM1_Init+0x114>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027f8:	482d      	ldr	r0, [pc, #180]	; (80028b0 <MX_TIM1_Init+0x114>)
 80027fa:	f00a fc7f 	bl	800d0fc <HAL_TIM_PWM_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002804:	f7ff fbc6 	bl	8001f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002808:	2300      	movs	r3, #0
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800280c:	2300      	movs	r3, #0
 800280e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002814:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002818:	4619      	mov	r1, r3
 800281a:	4825      	ldr	r0, [pc, #148]	; (80028b0 <MX_TIM1_Init+0x114>)
 800281c:	f00b fb3e 	bl	800de9c <HAL_TIMEx_MasterConfigSynchronization>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002826:	f7ff fbb5 	bl	8001f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800282a:	2360      	movs	r3, #96	; 0x60
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002832:	2300      	movs	r3, #0
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002836:	2308      	movs	r3, #8
 8002838:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800284a:	2204      	movs	r2, #4
 800284c:	4619      	mov	r1, r3
 800284e:	4818      	ldr	r0, [pc, #96]	; (80028b0 <MX_TIM1_Init+0x114>)
 8002850:	f00a fdca 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800285a:	f7ff fb9b 	bl	8001f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002876:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4807      	ldr	r0, [pc, #28]	; (80028b0 <MX_TIM1_Init+0x114>)
 8002894:	f00b fb8a 	bl	800dfac <HAL_TIMEx_ConfigBreakDeadTime>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800289e:	f7ff fb79 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028a2:	4803      	ldr	r0, [pc, #12]	; (80028b0 <MX_TIM1_Init+0x114>)
 80028a4:	f000 f82a 	bl	80028fc <HAL_TIM_MspPostInit>

}
 80028a8:	bf00      	nop
 80028aa:	3758      	adds	r7, #88	; 0x58
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	2400502c 	.word	0x2400502c
 80028b4:	40010000 	.word	0x40010000

080028b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10e      	bne.n	80028e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_TIM_PWM_MspInit+0x40>)
 80028cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028d0:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_TIM_PWM_MspInit+0x40>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <HAL_TIM_PWM_MspInit+0x40>)
 80028dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40010000 	.word	0x40010000
 80028f8:	58024400 	.word	0x58024400

080028fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <HAL_TIM_MspPostInit+0x6c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d11f      	bne.n	800295e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <HAL_TIM_MspPostInit+0x70>)
 8002920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002924:	4a11      	ldr	r2, [pc, #68]	; (800296c <HAL_TIM_MspPostInit+0x70>)
 8002926:	f043 0310 	orr.w	r3, r3, #16
 800292a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_TIM_MspPostInit+0x70>)
 8002930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800293c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002940:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800294e:	2301      	movs	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002952:	f107 030c 	add.w	r3, r7, #12
 8002956:	4619      	mov	r1, r3
 8002958:	4805      	ldr	r0, [pc, #20]	; (8002970 <HAL_TIM_MspPostInit+0x74>)
 800295a:	f004 fadf 	bl	8006f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800295e:	bf00      	nop
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40010000 	.word	0x40010000
 800296c:	58024400 	.word	0x58024400
 8002970:	58021000 	.word	0x58021000

08002974 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <MX_UART4_Init+0x90>)
 800297a:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <MX_UART4_Init+0x94>)
 800297c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800297e:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <MX_UART4_Init+0x90>)
 8002980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002984:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <MX_UART4_Init+0x90>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <MX_UART4_Init+0x90>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <MX_UART4_Init+0x90>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_UART4_Init+0x90>)
 800299a:	220c      	movs	r2, #12
 800299c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <MX_UART4_Init+0x90>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <MX_UART4_Init+0x90>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <MX_UART4_Init+0x90>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_UART4_Init+0x90>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029b6:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <MX_UART4_Init+0x90>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80029bc:	4811      	ldr	r0, [pc, #68]	; (8002a04 <MX_UART4_Init+0x90>)
 80029be:	f00b fbb6 	bl	800e12e <HAL_UART_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80029c8:	f7ff fae4 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029cc:	2100      	movs	r1, #0
 80029ce:	480d      	ldr	r0, [pc, #52]	; (8002a04 <MX_UART4_Init+0x90>)
 80029d0:	f00d fad5 	bl	800ff7e <HAL_UARTEx_SetTxFifoThreshold>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80029da:	f7ff fadb 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029de:	2100      	movs	r1, #0
 80029e0:	4808      	ldr	r0, [pc, #32]	; (8002a04 <MX_UART4_Init+0x90>)
 80029e2:	f00d fb0a 	bl	800fffa <HAL_UARTEx_SetRxFifoThreshold>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80029ec:	f7ff fad2 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80029f0:	4804      	ldr	r0, [pc, #16]	; (8002a04 <MX_UART4_Init+0x90>)
 80029f2:	f00d fa8b 	bl	800ff0c <HAL_UARTEx_DisableFifoMode>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80029fc:	f7ff faca 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	24005108 	.word	0x24005108
 8002a08:	40004c00 	.word	0x40004c00

08002a0c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a12:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <MX_USART1_UART_Init+0x94>)
 8002a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a16:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a32:	220c      	movs	r2, #12
 8002a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3c:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a42:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a54:	4811      	ldr	r0, [pc, #68]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a56:	f00b fb6a 	bl	800e12e <HAL_UART_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a60:	f7ff fa98 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a64:	2100      	movs	r1, #0
 8002a66:	480d      	ldr	r0, [pc, #52]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a68:	f00d fa89 	bl	800ff7e <HAL_UARTEx_SetTxFifoThreshold>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a72:	f7ff fa8f 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a76:	2100      	movs	r1, #0
 8002a78:	4808      	ldr	r0, [pc, #32]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a7a:	f00d fabe 	bl	800fffa <HAL_UARTEx_SetRxFifoThreshold>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a84:	f7ff fa86 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a88:	4804      	ldr	r0, [pc, #16]	; (8002a9c <MX_USART1_UART_Init+0x90>)
 8002a8a:	f00d fa3f 	bl	800ff0c <HAL_UARTEx_DisableFifoMode>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a94:	f7ff fa7e 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	24005078 	.word	0x24005078
 8002aa0:	40011000 	.word	0x40011000

08002aa4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002aaa:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <MX_USART3_UART_Init+0x94>)
 8002aac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002ab0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ab4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002aca:	220c      	movs	r2, #12
 8002acc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad4:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002aec:	4811      	ldr	r0, [pc, #68]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002aee:	f00b fb1e 	bl	800e12e <HAL_UART_Init>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002af8:	f7ff fa4c 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002afc:	2100      	movs	r1, #0
 8002afe:	480d      	ldr	r0, [pc, #52]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002b00:	f00d fa3d 	bl	800ff7e <HAL_UARTEx_SetTxFifoThreshold>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002b0a:	f7ff fa43 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4808      	ldr	r0, [pc, #32]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002b12:	f00d fa72 	bl	800fffa <HAL_UARTEx_SetRxFifoThreshold>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002b1c:	f7ff fa3a 	bl	8001f94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002b20:	4804      	ldr	r0, [pc, #16]	; (8002b34 <MX_USART3_UART_Init+0x90>)
 8002b22:	f00d f9f3 	bl	800ff0c <HAL_UARTEx_DisableFifoMode>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002b2c:	f7ff fa32 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	24004e40 	.word	0x24004e40
 8002b38:	40004800 	.word	0x40004800

08002b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b0bc      	sub	sp, #240	; 0xf0
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b54:	f107 0320 	add.w	r3, r7, #32
 8002b58:	22bc      	movs	r2, #188	; 0xbc
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f012 fcca 	bl	80154f6 <memset>
  if(uartHandle->Instance==UART4)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6d      	ldr	r2, [pc, #436]	; (8002d1c <HAL_UART_MspInit+0x1e0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d142      	bne.n	8002bf2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b76:	f107 0320 	add.w	r3, r7, #32
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f006 fddc 	bl	8009738 <HAL_RCCEx_PeriphCLKConfig>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b86:	f7ff fa05 	bl	8001f94 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b8a:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b90:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002b92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b9a:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba8:	4b5d      	ldr	r3, [pc, #372]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bae:	4a5c      	ldr	r2, [pc, #368]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002bde:	2308      	movs	r3, #8
 8002be0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002be8:	4619      	mov	r1, r3
 8002bea:	484e      	ldr	r0, [pc, #312]	; (8002d24 <HAL_UART_MspInit+0x1e8>)
 8002bec:	f004 f996 	bl	8006f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002bf0:	e090      	b.n	8002d14 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a4c      	ldr	r2, [pc, #304]	; (8002d28 <HAL_UART_MspInit+0x1ec>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d143      	bne.n	8002c84 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c06:	f107 0320 	add.w	r3, r7, #32
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f006 fd94 	bl	8009738 <HAL_RCCEx_PeriphCLKConfig>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8002c16:	f7ff f9bd 	bl	8001f94 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c20:	4a3f      	ldr	r2, [pc, #252]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002c22:	f043 0310 	orr.w	r3, r3, #16
 8002c26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3e:	4a38      	ldr	r2, [pc, #224]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002c70:	2304      	movs	r3, #4
 8002c72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	482b      	ldr	r0, [pc, #172]	; (8002d2c <HAL_UART_MspInit+0x1f0>)
 8002c7e:	f004 f94d 	bl	8006f1c <HAL_GPIO_Init>
}
 8002c82:	e047      	b.n	8002d14 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART3)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <HAL_UART_MspInit+0x1f4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d142      	bne.n	8002d14 <HAL_UART_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c98:	f107 0320 	add.w	r3, r7, #32
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f006 fd4b 	bl	8009738 <HAL_RCCEx_PeriphCLKConfig>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_UART_MspInit+0x170>
      Error_Handler();
 8002ca8:	f7ff f974 	bl	8001f94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002cae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cb2:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd0:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_UART_MspInit+0x1e4>)
 8002cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ce8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d02:	2307      	movs	r3, #7
 8002d04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4807      	ldr	r0, [pc, #28]	; (8002d2c <HAL_UART_MspInit+0x1f0>)
 8002d10:	f004 f904 	bl	8006f1c <HAL_GPIO_Init>
}
 8002d14:	bf00      	nop
 8002d16:	37f0      	adds	r7, #240	; 0xf0
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40004c00 	.word	0x40004c00
 8002d20:	58024400 	.word	0x58024400
 8002d24:	58020000 	.word	0x58020000
 8002d28:	40011000 	.word	0x40011000
 8002d2c:	58020400 	.word	0x58020400
 8002d30:	40004800 	.word	0x40004800

08002d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d38:	f7ff fca4 	bl	8002684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d3e:	490d      	ldr	r1, [pc, #52]	; (8002d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d40:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d44:	e002      	b.n	8002d4c <LoopCopyDataInit>

08002d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4a:	3304      	adds	r3, #4

08002d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d50:	d3f9      	bcc.n	8002d46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d54:	4c0a      	ldr	r4, [pc, #40]	; (8002d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d58:	e001      	b.n	8002d5e <LoopFillZerobss>

08002d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d5c:	3204      	adds	r2, #4

08002d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d60:	d3fb      	bcc.n	8002d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d62:	f012 fb93 	bl	801548c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d66:	f7fe ffbd 	bl	8001ce4 <main>
  bx  lr
 8002d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002d70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d74:	2400042c 	.word	0x2400042c
  ldr r2, =_sidata
 8002d78:	08023b18 	.word	0x08023b18
  ldr r2, =_sbss
 8002d7c:	2400042c 	.word	0x2400042c
  ldr r4, =_ebss
 8002d80:	24006ad0 	.word	0x24006ad0

08002d84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d84:	e7fe      	b.n	8002d84 <ADC3_IRQHandler>
	...

08002d88 <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af02      	add	r7, sp, #8
/*	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
	ST7735Ctx.Panel = HannStar_Panel;
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
	#elif TFT18
*/	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8002d8e:	4b7c      	ldr	r3, [pc, #496]	; (8002f80 <LCD_Test+0x1f8>)
 8002d90:	2203      	movs	r2, #3
 8002d92:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = BOE_Panel;
 8002d94:	4b7a      	ldr	r3, [pc, #488]	; (8002f80 <LCD_Test+0x1f8>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_1_8a_inch_screen;
 8002d9a:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <LCD_Test+0x1f8>)
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	735a      	strb	r2, [r3, #13]
//	#else
//	error "Unknown Screen"
	
//	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8002da0:	4978      	ldr	r1, [pc, #480]	; (8002f84 <LCD_Test+0x1fc>)
 8002da2:	4879      	ldr	r0, [pc, #484]	; (8002f88 <LCD_Test+0x200>)
 8002da4:	f000 fcb4 	bl	8003710 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8002da8:	4b78      	ldr	r3, [pc, #480]	; (8002f8c <LCD_Test+0x204>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a74      	ldr	r2, [pc, #464]	; (8002f80 <LCD_Test+0x1f8>)
 8002dae:	2105      	movs	r1, #5
 8002db0:	4875      	ldr	r0, [pc, #468]	; (8002f88 <LCD_Test+0x200>)
 8002db2:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8002db4:	4b75      	ldr	r3, [pc, #468]	; (8002f8c <LCD_Test+0x204>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4975      	ldr	r1, [pc, #468]	; (8002f90 <LCD_Test+0x208>)
 8002dba:	4873      	ldr	r0, [pc, #460]	; (8002f88 <LCD_Test+0x200>)
 8002dbc:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f000 f8f8 	bl	8002fb4 <LCD_SetBrightness>
/*	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
	#elif TFT18
*/	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
 8002dc4:	4b71      	ldr	r3, [pc, #452]	; (8002f8c <LCD_Test+0x204>)
 8002dc6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002dc8:	4b72      	ldr	r3, [pc, #456]	; (8002f94 <LCD_Test+0x20c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	486e      	ldr	r0, [pc, #440]	; (8002f88 <LCD_Test+0x200>)
 8002dd0:	47a0      	blx	r4
//	#endif
	
  uint32_t tick = get_tick();
 8002dd2:	f002 f825 	bl	8004e20 <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8002dd8:	e06a      	b.n	8002eb0 <LCD_Test+0x128>
	{
		delay_ms(10);
 8002dda:	200a      	movs	r0, #10
 8002ddc:	f002 f82c 	bl	8004e38 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8002de0:	f002 f81e 	bl	8004e20 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dee:	d80f      	bhi.n	8002e10 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8002df0:	f002 f816 	bl	8004e20 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2264      	movs	r2, #100	; 0x64
 8002dfc:	fb02 f303 	mul.w	r3, r2, r3
 8002e00:	4a65      	ldr	r2, [pc, #404]	; (8002f98 <LCD_Test+0x210>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f8d3 	bl	8002fb4 <LCD_SetBrightness>
 8002e0e:	e04f      	b.n	8002eb0 <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 8002e10:	f002 f806 	bl	8004e20 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d83d      	bhi.n	8002e9e <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8002e22:	f001 fffd 	bl	8004e20 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002e30:	4a5a      	ldr	r2, [pc, #360]	; (8002f9c <LCD_Test+0x214>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	463b      	mov	r3, r7
 8002e3a:	4959      	ldr	r1, [pc, #356]	; (8002fa0 <LCD_Test+0x218>)
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f013 f893 	bl	8015f68 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8002e42:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <LCD_Test+0x1f8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b1e      	subs	r3, #30
 8002e4a:	b298      	uxth	r0, r3
 8002e4c:	4b4c      	ldr	r3, [pc, #304]	; (8002f80 <LCD_Test+0x1f8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	463b      	mov	r3, r7
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2310      	movs	r3, #16
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	f000 fb09 	bl	8003474 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8002e62:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <LCD_Test+0x204>)
 8002e64:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002e66:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <LCD_Test+0x1f8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	1edd      	subs	r5, r3, #3
 8002e6c:	f001 ffd8 	bl	8004e20 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002e7a:	4a41      	ldr	r2, [pc, #260]	; (8002f80 <LCD_Test+0x1f8>)
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	4a45      	ldr	r2, [pc, #276]	; (8002f98 <LCD_Test+0x210>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	09db      	lsrs	r3, r3, #7
 8002e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e8e:	9201      	str	r2, [sp, #4]
 8002e90:	2203      	movs	r2, #3
 8002e92:	9200      	str	r2, [sp, #0]
 8002e94:	462a      	mov	r2, r5
 8002e96:	2100      	movs	r1, #0
 8002e98:	483b      	ldr	r0, [pc, #236]	; (8002f88 <LCD_Test+0x200>)
 8002e9a:	47a0      	blx	r4
 8002e9c:	e008      	b.n	8002eb0 <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 8002e9e:	f001 ffbf 	bl	8004e20 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d807      	bhi.n	8002ec0 <LCD_Test+0x138>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8002eb0:	2108      	movs	r1, #8
 8002eb2:	483c      	ldr	r0, [pc, #240]	; (8002fa4 <LCD_Test+0x21c>)
 8002eb4:	f004 f9e2 	bl	800727c <HAL_GPIO_ReadPin>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d18d      	bne.n	8002dda <LCD_Test+0x52>
 8002ebe:	e004      	b.n	8002eca <LCD_Test+0x142>
			break;
 8002ec0:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8002ec2:	e002      	b.n	8002eca <LCD_Test+0x142>
	{
		delay_ms(10);
 8002ec4:	200a      	movs	r0, #10
 8002ec6:	f001 ffb7 	bl	8004e38 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8002eca:	2108      	movs	r1, #8
 8002ecc:	4835      	ldr	r0, [pc, #212]	; (8002fa4 <LCD_Test+0x21c>)
 8002ece:	f004 f9d5 	bl	800727c <HAL_GPIO_ReadPin>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d0f5      	beq.n	8002ec4 <LCD_Test+0x13c>
	}
	LCD_Light(0, 300);
 8002ed8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002edc:	2000      	movs	r0, #0
 8002ede:	f000 f885 	bl	8002fec <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <LCD_Test+0x204>)
 8002ee4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <LCD_Test+0x1f8>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <LCD_Test+0x1f8>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2100      	movs	r1, #0
 8002ef0:	9101      	str	r1, [sp, #4]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4823      	ldr	r0, [pc, #140]	; (8002f88 <LCD_Test+0x200>)
 8002efc:	47a0      	blx	r4

	sprintf((char *)&text, "WeAct Studio");
 8002efe:	463b      	mov	r3, r7
 8002f00:	4929      	ldr	r1, [pc, #164]	; (8002fa8 <LCD_Test+0x220>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f013 f830 	bl	8015f68 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <LCD_Test+0x1f8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	463b      	mov	r3, r7
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	2310      	movs	r3, #16
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2310      	movs	r3, #16
 8002f18:	2104      	movs	r1, #4
 8002f1a:	2004      	movs	r0, #4
 8002f1c:	f000 faaa 	bl	8003474 <LCD_ShowString>
	sprintf((char *)&text, "STM32H743 %X", HAL_GetDEVID());
 8002f20:	f001 ffba 	bl	8004e98 <HAL_GetDEVID>
 8002f24:	4602      	mov	r2, r0
 8002f26:	463b      	mov	r3, r7
 8002f28:	4920      	ldr	r1, [pc, #128]	; (8002fac <LCD_Test+0x224>)
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f013 f81c 	bl	8015f68 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <LCD_Test+0x1f8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	463b      	mov	r3, r7
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2310      	movs	r3, #16
 8002f40:	2116      	movs	r1, #22
 8002f42:	2004      	movs	r0, #4
 8002f44:	f000 fa96 	bl	8003474 <LCD_ShowString>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <LCD_Test+0x208>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	4918      	ldr	r1, [pc, #96]	; (8002fb0 <LCD_Test+0x228>)
 8002f50:	4618      	mov	r0, r3
 8002f52:	f013 f809 	bl	8015f68 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <LCD_Test+0x1f8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	463b      	mov	r3, r7
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	2310      	movs	r3, #16
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2310      	movs	r3, #16
 8002f66:	2128      	movs	r1, #40	; 0x28
 8002f68:	2004      	movs	r0, #4
 8002f6a:	f000 fa83 	bl	8003474 <LCD_ShowString>

	LCD_Light(100, 200);
 8002f6e:	21c8      	movs	r1, #200	; 0xc8
 8002f70:	2064      	movs	r0, #100	; 0x64
 8002f72:	f000 f83b 	bl	8002fec <LCD_Light>
}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	240051d4 	.word	0x240051d4
 8002f84:	2400004c 	.word	0x2400004c
 8002f88:	2400519c 	.word	0x2400519c
 8002f8c:	24000070 	.word	0x24000070
 8002f90:	24005198 	.word	0x24005198
 8002f94:	08018e54 	.word	0x08018e54
 8002f98:	10624dd3 	.word	0x10624dd3
 8002f9c:	cccccccd 	.word	0xcccccccd
 8002fa0:	0801835c 	.word	0x0801835c
 8002fa4:	58021000 	.word	0x58021000
 8002fa8:	08018364 	.word	0x08018364
 8002fac:	08018374 	.word	0x08018374
 8002fb0:	08018384 	.word	0x08018384

08002fb4 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <LCD_SetBrightness+0x1c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	2400502c 	.word	0x2400502c

08002fd4 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <LCD_GetBrightness+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	2400502c 	.word	0x2400502c

08002fec <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 8002ff6:	f7ff ffed 	bl	8002fd4 <LCD_GetBrightness>
 8002ffa:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8003000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d05e      	beq.n	80030c6 <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	429a      	cmp	r2, r3
 800300e:	d05c      	beq.n	80030ca <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301a:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003028:	ed97 7a07 	vldr	s14, [r7, #28]
 800302c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003030:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303e:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003054:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 8003058:	edd7 6a07 	vldr	s13, [r7, #28]
 800305c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003064:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 8003068:	f001 feda 	bl	8004e20 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 800306e:	2001      	movs	r0, #1
 8003070:	f001 fee2 	bl	8004e38 <HAL_Delay>
		
		time_now = get_tick()-tick;
 8003074:	f001 fed4 	bl	8004e20 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308a:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 800308e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003092:	edd7 7a05 	vldr	s15, [r7, #20]
 8003096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a8:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 80030ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80030b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b4:	ee17 0a90 	vmov	r0, s15
 80030b8:	f7ff ff7c 	bl	8002fb4 <LCD_SetBrightness>
		
		if(time_now >= time) break;
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d204      	bcs.n	80030ce <LCD_Light+0xe2>
		delay_ms(1);
 80030c4:	e7d3      	b.n	800306e <LCD_Light+0x82>
		return;
 80030c6:	bf00      	nop
 80030c8:	e002      	b.n	80030d0 <LCD_Light+0xe4>
		return;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <LCD_Light+0xe4>
		if(time_now >= time) break;
 80030ce:	bf00      	nop
		
	}
}
 80030d0:	3728      	adds	r7, #40	; 0x28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 80030d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030dc:	b08c      	sub	sp, #48	; 0x30
 80030de:	af02      	add	r7, sp, #8
 80030e0:	4604      	mov	r4, r0
 80030e2:	4608      	mov	r0, r1
 80030e4:	4611      	mov	r1, r2
 80030e6:	461a      	mov	r2, r3
 80030e8:	4623      	mov	r3, r4
 80030ea:	80fb      	strh	r3, [r7, #6]
 80030ec:	4603      	mov	r3, r0
 80030ee:	80bb      	strh	r3, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	70fb      	strb	r3, [r7, #3]
 80030f4:	4613      	mov	r3, r2
 80030f6:	70bb      	strb	r3, [r7, #2]
 80030f8:	466b      	mov	r3, sp
 80030fa:	4698      	mov	r8, r3
  uint8_t temp,t1,t;
	uint16_t y0=y;
 80030fc:	88bb      	ldrh	r3, [r7, #4]
 80030fe:	843b      	strh	r3, [r7, #32]
	uint16_t x0=x;
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	83fb      	strh	r3, [r7, #30]
	uint16_t colortemp=POINT_COLOR; 
 8003104:	4bb2      	ldr	r3, [pc, #712]	; (80033d0 <LCD_ShowChar+0x2f8>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	83bb      	strh	r3, [r7, #28]
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 800310a:	78bb      	ldrb	r3, [r7, #2]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d101      	bne.n	8003114 <LCD_ShowChar+0x3c>
 8003110:	2406      	movs	r4, #6
 8003112:	e000      	b.n	8003116 <LCD_ShowChar+0x3e>
 8003114:	2408      	movs	r4, #8
 8003116:	78bd      	ldrb	r5, [r7, #2]
 8003118:	1e63      	subs	r3, r4, #1
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	4623      	mov	r3, r4
 800311e:	4618      	mov	r0, r3
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	010b      	lsls	r3, r1, #4
 800312e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8003132:	0102      	lsls	r2, r0, #4
 8003134:	4623      	mov	r3, r4
 8003136:	005e      	lsls	r6, r3, #1
 8003138:	462b      	mov	r3, r5
 800313a:	3b01      	subs	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	4623      	mov	r3, r4
 8003140:	4618      	mov	r0, r3
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	b2ea      	uxtb	r2, r5
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	fb02 fe01 	mul.w	lr, r2, r1
 8003150:	fb00 fc03 	mul.w	ip, r0, r3
 8003154:	44f4      	add	ip, lr
 8003156:	fba0 2302 	umull	r2, r3, r0, r2
 800315a:	eb0c 0103 	add.w	r1, ip, r3
 800315e:	460b      	mov	r3, r1
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	0119      	lsls	r1, r3, #4
 800316a:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800316e:	0110      	lsls	r0, r2, #4
 8003170:	4623      	mov	r3, r4
 8003172:	4618      	mov	r0, r3
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	b2ea      	uxtb	r2, r5
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	fb02 fe01 	mul.w	lr, r2, r1
 8003182:	fb00 fc03 	mul.w	ip, r0, r3
 8003186:	44f4      	add	ip, lr
 8003188:	fba0 2302 	umull	r2, r3, r0, r2
 800318c:	eb0c 0103 	add.w	r1, ip, r3
 8003190:	460b      	mov	r3, r1
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	0119      	lsls	r1, r3, #4
 800319c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80031a0:	0110      	lsls	r0, r2, #4
 80031a2:	4623      	mov	r3, r4
 80031a4:	462a      	mov	r2, r5
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	3307      	adds	r3, #7
 80031ae:	08db      	lsrs	r3, r3, #3
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	ebad 0d03 	sub.w	sp, sp, r3
 80031b6:	ab02      	add	r3, sp, #8
 80031b8:	3301      	adds	r3, #1
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	613b      	str	r3, [r7, #16]
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 80031c0:	f107 0308 	add.w	r3, r7, #8
 80031c4:	4619      	mov	r1, r3
 80031c6:	4883      	ldr	r0, [pc, #524]	; (80033d4 <LCD_ShowChar+0x2fc>)
 80031c8:	f001 fbfe 	bl	80049c8 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 80031cc:	f107 030c 	add.w	r3, r7, #12
 80031d0:	4619      	mov	r1, r3
 80031d2:	4880      	ldr	r0, [pc, #512]	; (80033d4 <LCD_ShowChar+0x2fc>)
 80031d4:	f001 fc0a 	bl	80049ec <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	3b20      	subs	r3, #32
 80031dc:	70fb      	strb	r3, [r7, #3]
	count = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	847b      	strh	r3, [r7, #34]	; 0x22
	
	if(!mode) //�ǵ��ӷ�ʽ
 80031e2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 8096 	bne.w	8003318 <LCD_ShowChar+0x240>
	{
		for(t=0;t<size;t++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80031f2:	e08a      	b.n	800330a <LCD_ShowChar+0x232>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80031f4:	78bb      	ldrb	r3, [r7, #2]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d10d      	bne.n	8003216 <LCD_ShowChar+0x13e>
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003200:	4875      	ldr	r0, [pc, #468]	; (80033d8 <LCD_ShowChar+0x300>)
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4403      	add	r3, r0
 800320c:	440b      	add	r3, r1
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003214:	e009      	b.n	800322a <LCD_ShowChar+0x152>
			else temp=asc2_1608[num][t];		 //����1608����
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800321c:	496f      	ldr	r1, [pc, #444]	; (80033dc <LCD_ShowChar+0x304>)
 800321e:	0112      	lsls	r2, r2, #4
 8003220:	440a      	add	r2, r1
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			
			for(t1=0;t1<8;t1++)
 800322a:	2300      	movs	r3, #0
 800322c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003230:	e060      	b.n	80032f4 <LCD_ShowChar+0x21c>
			{			    
				if(temp&0x80)
 8003232:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003236:	2b00      	cmp	r3, #0
 8003238:	da0c      	bge.n	8003254 <LCD_ShowChar+0x17c>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 800323a:	8bbb      	ldrh	r3, [r7, #28]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	b21a      	sxth	r2, r3
 8003240:	8bbb      	ldrh	r3, [r7, #28]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	b29b      	uxth	r3, r3
 8003246:	b21b      	sxth	r3, r3
 8003248:	4313      	orrs	r3, r2
 800324a:	b21b      	sxth	r3, r3
 800324c:	b29a      	uxth	r2, r3
 800324e:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <LCD_ShowChar+0x2f8>)
 8003250:	801a      	strh	r2, [r3, #0]
 8003252:	e00d      	b.n	8003270 <LCD_ShowChar+0x198>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8003254:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <LCD_ShowChar+0x308>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	b21a      	sxth	r2, r3
 800325c:	4b60      	ldr	r3, [pc, #384]	; (80033e0 <LCD_ShowChar+0x308>)
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	b29b      	uxth	r3, r3
 8003264:	b21b      	sxth	r3, r3
 8003266:	4313      	orrs	r3, r2
 8003268:	b21b      	sxth	r3, r3
 800326a:	b29a      	uxth	r2, r3
 800326c:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <LCD_ShowChar+0x2f8>)
 800326e:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 8003270:	0872      	lsrs	r2, r6, #1
 8003272:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003274:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461c      	mov	r4, r3
 800327e:	4b54      	ldr	r3, [pc, #336]	; (80033d0 <LCD_ShowChar+0x2f8>)
 8003280:	8818      	ldrh	r0, [r3, #0]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	fb01 f202 	mul.w	r2, r1, r2
 8003288:	4422      	add	r2, r4
 800328a:	4601      	mov	r1, r0
 800328c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8003290:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003292:	3301      	adds	r3, #1
 8003294:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 8003296:	78bb      	ldrb	r3, [r7, #2]
 8003298:	b29b      	uxth	r3, r3
 800329a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800329c:	429a      	cmp	r2, r3
 800329e:	d301      	bcc.n	80032a4 <LCD_ShowChar+0x1cc>
 80032a0:	2300      	movs	r3, #0
 80032a2:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 80032a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 80032ae:	88bb      	ldrh	r3, [r7, #4]
 80032b0:	3301      	adds	r3, #1
 80032b2:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80032b4:	88ba      	ldrh	r2, [r7, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d303      	bcc.n	80032c4 <LCD_ShowChar+0x1ec>
 80032bc:	4a44      	ldr	r2, [pc, #272]	; (80033d0 <LCD_ShowChar+0x2f8>)
 80032be:	8bbb      	ldrh	r3, [r7, #28]
 80032c0:	8013      	strh	r3, [r2, #0]
 80032c2:	e0ce      	b.n	8003462 <LCD_ShowChar+0x38a>
				if((y-y0)==size)
 80032c4:	88ba      	ldrh	r2, [r7, #4]
 80032c6:	8c3b      	ldrh	r3, [r7, #32]
 80032c8:	1ad2      	subs	r2, r2, r3
 80032ca:	78bb      	ldrb	r3, [r7, #2]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d10c      	bne.n	80032ea <LCD_ShowChar+0x212>
				{
					y=y0;
 80032d0:	8c3b      	ldrh	r3, [r7, #32]
 80032d2:	80bb      	strh	r3, [r7, #4]
					x++;
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	3301      	adds	r3, #1
 80032d8:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d30d      	bcc.n	80032fe <LCD_ShowChar+0x226>
 80032e2:	4a3b      	ldr	r2, [pc, #236]	; (80033d0 <LCD_ShowChar+0x2f8>)
 80032e4:	8bbb      	ldrh	r3, [r7, #28]
 80032e6:	8013      	strh	r3, [r2, #0]
 80032e8:	e0bb      	b.n	8003462 <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 80032ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80032ee:	3301      	adds	r3, #1
 80032f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80032f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80032f8:	2b07      	cmp	r3, #7
 80032fa:	d99a      	bls.n	8003232 <LCD_ShowChar+0x15a>
 80032fc:	e000      	b.n	8003300 <LCD_ShowChar+0x228>
					break;
 80032fe:	bf00      	nop
		for(t=0;t<size;t++)
 8003300:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003304:	3301      	adds	r3, #1
 8003306:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800330a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800330e:	78bb      	ldrb	r3, [r7, #2]
 8003310:	429a      	cmp	r2, r3
 8003312:	f4ff af6f 	bcc.w	80031f4 <LCD_ShowChar+0x11c>
 8003316:	e08e      	b.n	8003436 <LCD_ShowChar+0x35e>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 8003318:	2300      	movs	r3, #0
 800331a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800331e:	e084      	b.n	800342a <LCD_ShowChar+0x352>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8003320:	78bb      	ldrb	r3, [r7, #2]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d10d      	bne.n	8003342 <LCD_ShowChar+0x26a>
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800332c:	482a      	ldr	r0, [pc, #168]	; (80033d8 <LCD_ShowChar+0x300>)
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4403      	add	r3, r0
 8003338:	440b      	add	r3, r1
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003340:	e009      	b.n	8003356 <LCD_ShowChar+0x27e>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003348:	4924      	ldr	r1, [pc, #144]	; (80033dc <LCD_ShowChar+0x304>)
 800334a:	0112      	lsls	r2, r2, #4
 800334c:	440a      	add	r2, r1
 800334e:	4413      	add	r3, r2
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(t1=0;t1<8;t1++)
 8003356:	2300      	movs	r3, #0
 8003358:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800335c:	e05a      	b.n	8003414 <LCD_ShowChar+0x33c>
			{			    
				if(temp&0x80)
 800335e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003362:	2b00      	cmp	r3, #0
 8003364:	da19      	bge.n	800339a <LCD_ShowChar+0x2c2>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8003366:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <LCD_ShowChar+0x2f8>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	b21a      	sxth	r2, r3
 800336e:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <LCD_ShowChar+0x2f8>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	b29b      	uxth	r3, r3
 8003376:	b21b      	sxth	r3, r3
 8003378:	4313      	orrs	r3, r2
 800337a:	b218      	sxth	r0, r3
 800337c:	0872      	lsrs	r2, r6, #1
 800337e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003380:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461c      	mov	r4, r3
 800338a:	b280      	uxth	r0, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	fb01 f202 	mul.w	r2, r1, r2
 8003392:	4422      	add	r2, r4
 8003394:	4601      	mov	r1, r0
 8003396:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 800339a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800339c:	3301      	adds	r3, #1
 800339e:	847b      	strh	r3, [r7, #34]	; 0x22
				if(count >= size) count =0;
 80033a0:	78bb      	ldrb	r3, [r7, #2]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d301      	bcc.n	80033ae <LCD_ShowChar+0x2d6>
 80033aa:	2300      	movs	r3, #0
 80033ac:	847b      	strh	r3, [r7, #34]	; 0x22
				
				temp<<=1;
 80033ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				y++;
 80033b8:	88bb      	ldrh	r3, [r7, #4]
 80033ba:	3301      	adds	r3, #1
 80033bc:	80bb      	strh	r3, [r7, #4]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80033be:	88ba      	ldrh	r2, [r7, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d30e      	bcc.n	80033e4 <LCD_ShowChar+0x30c>
 80033c6:	4a02      	ldr	r2, [pc, #8]	; (80033d0 <LCD_ShowChar+0x2f8>)
 80033c8:	8bbb      	ldrh	r3, [r7, #28]
 80033ca:	8013      	strh	r3, [r2, #0]
 80033cc:	e049      	b.n	8003462 <LCD_ShowChar+0x38a>
 80033ce:	bf00      	nop
 80033d0:	2400006c 	.word	0x2400006c
 80033d4:	2400519c 	.word	0x2400519c
 80033d8:	080183f0 	.word	0x080183f0
 80033dc:	08018864 	.word	0x08018864
 80033e0:	24000708 	.word	0x24000708
				if((y-y0)==size)
 80033e4:	88ba      	ldrh	r2, [r7, #4]
 80033e6:	8c3b      	ldrh	r3, [r7, #32]
 80033e8:	1ad2      	subs	r2, r2, r3
 80033ea:	78bb      	ldrb	r3, [r7, #2]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d10c      	bne.n	800340a <LCD_ShowChar+0x332>
				{
					y=y0;
 80033f0:	8c3b      	ldrh	r3, [r7, #32]
 80033f2:	80bb      	strh	r3, [r7, #4]
					x++;
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	3301      	adds	r3, #1
 80033f8:	80fb      	strh	r3, [r7, #6]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 80033fa:	88fa      	ldrh	r2, [r7, #6]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d30d      	bcc.n	800341e <LCD_ShowChar+0x346>
 8003402:	4a1a      	ldr	r2, [pc, #104]	; (800346c <LCD_ShowChar+0x394>)
 8003404:	8bbb      	ldrh	r3, [r7, #28]
 8003406:	8013      	strh	r3, [r2, #0]
 8003408:	e02b      	b.n	8003462 <LCD_ShowChar+0x38a>
			for(t1=0;t1<8;t1++)
 800340a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800340e:	3301      	adds	r3, #1
 8003410:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003418:	2b07      	cmp	r3, #7
 800341a:	d9a0      	bls.n	800335e <LCD_ShowChar+0x286>
 800341c:	e000      	b.n	8003420 <LCD_ShowChar+0x348>
					break;
 800341e:	bf00      	nop
		for(t=0;t<size;t++)
 8003420:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003424:	3301      	adds	r3, #1
 8003426:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800342a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800342e:	78bb      	ldrb	r3, [r7, #2]
 8003430:	429a      	cmp	r2, r3
 8003432:	f4ff af75 	bcc.w	8003320 <LCD_ShowChar+0x248>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 8003436:	8bf9      	ldrh	r1, [r7, #30]
 8003438:	8c38      	ldrh	r0, [r7, #32]
 800343a:	693c      	ldr	r4, [r7, #16]
 800343c:	78bb      	ldrb	r3, [r7, #2]
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d101      	bne.n	8003446 <LCD_ShowChar+0x36e>
 8003442:	2306      	movs	r3, #6
 8003444:	e000      	b.n	8003448 <LCD_ShowChar+0x370>
 8003446:	2308      	movs	r3, #8
 8003448:	78ba      	ldrb	r2, [r7, #2]
 800344a:	9201      	str	r2, [sp, #4]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	4623      	mov	r3, r4
 8003450:	4602      	mov	r2, r0
 8003452:	4807      	ldr	r0, [pc, #28]	; (8003470 <LCD_ShowChar+0x398>)
 8003454:	f001 f90a 	bl	800466c <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <LCD_ShowChar+0x394>)
 800345a:	8bbb      	ldrh	r3, [r7, #28]
 800345c:	8013      	strh	r3, [r2, #0]
 800345e:	46c5      	mov	sp, r8
 8003460:	e000      	b.n	8003464 <LCD_ShowChar+0x38c>
 8003462:	46c5      	mov	sp, r8
}   
 8003464:	3728      	adds	r7, #40	; 0x28
 8003466:	46bd      	mov	sp, r7
 8003468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800346c:	2400006c 	.word	0x2400006c
 8003470:	2400519c 	.word	0x2400519c

08003474 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b087      	sub	sp, #28
 8003478:	af02      	add	r7, sp, #8
 800347a:	4604      	mov	r4, r0
 800347c:	4608      	mov	r0, r1
 800347e:	4611      	mov	r1, r2
 8003480:	461a      	mov	r2, r3
 8003482:	4623      	mov	r3, r4
 8003484:	80fb      	strh	r3, [r7, #6]
 8003486:	4603      	mov	r3, r0
 8003488:	80bb      	strh	r3, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	807b      	strh	r3, [r7, #2]
 800348e:	4613      	mov	r3, r2
 8003490:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	4413      	add	r3, r2
 800349c:	807b      	strh	r3, [r7, #2]
	height+=y;
 800349e:	883a      	ldrh	r2, [r7, #0]
 80034a0:	88bb      	ldrh	r3, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80034a6:	e024      	b.n	80034f2 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	887b      	ldrh	r3, [r7, #2]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d307      	bcc.n	80034c0 <LCD_ShowString+0x4c>
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	80fb      	strh	r3, [r7, #6]
 80034b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	88bb      	ldrh	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 80034c0:	88ba      	ldrh	r2, [r7, #4]
 80034c2:	883b      	ldrh	r3, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d21d      	bcs.n	8003504 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034d0:	88b9      	ldrh	r1, [r7, #4]
 80034d2:	88f8      	ldrh	r0, [r7, #6]
 80034d4:	2400      	movs	r4, #0
 80034d6:	9400      	str	r4, [sp, #0]
 80034d8:	f7ff fdfe 	bl	80030d8 <LCD_ShowChar>
        x+=size/2;
 80034dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	4413      	add	r3, r2
 80034ea:	80fb      	strh	r3, [r7, #6]
        p++;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	3301      	adds	r3, #1
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b7e      	cmp	r3, #126	; 0x7e
 80034f8:	d805      	bhi.n	8003506 <LCD_ShowString+0x92>
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b1f      	cmp	r3, #31
 8003500:	d8d2      	bhi.n	80034a8 <LCD_ShowString+0x34>
    }  
}
 8003502:	e000      	b.n	8003506 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 8003504:	bf00      	nop
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bd90      	pop	{r4, r7, pc}
	...

08003510 <lcd_init>:

static int32_t lcd_init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 800351a:	2104      	movs	r1, #4
 800351c:	4803      	ldr	r0, [pc, #12]	; (800352c <lcd_init+0x1c>)
 800351e:	f00a fc03 	bl	800dd28 <HAL_TIMEx_PWMN_Start>
	return result;
 8003522:	687b      	ldr	r3, [r7, #4]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	2400502c 	.word	0x2400502c

08003530 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8003534:	f001 fc74 	bl	8004e20 <HAL_GetTick>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 800354e:	2200      	movs	r2, #0
 8003550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003554:	481d      	ldr	r0, [pc, #116]	; (80035cc <lcd_writereg+0x8c>)
 8003556:	f003 fea9 	bl	80072ac <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800355a:	2200      	movs	r2, #0
 800355c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003560:	481a      	ldr	r0, [pc, #104]	; (80035cc <lcd_writereg+0x8c>)
 8003562:	f003 fea3 	bl	80072ac <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8003566:	f107 010f 	add.w	r1, r7, #15
 800356a:	2364      	movs	r3, #100	; 0x64
 800356c:	2201      	movs	r2, #1
 800356e:	4818      	ldr	r0, [pc, #96]	; (80035d0 <lcd_writereg+0x90>)
 8003570:	f008 fd3a 	bl	800bfe8 <HAL_SPI_Transmit>
 8003574:	4603      	mov	r3, r0
 8003576:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8003578:	2201      	movs	r2, #1
 800357a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800357e:	4813      	ldr	r0, [pc, #76]	; (80035cc <lcd_writereg+0x8c>)
 8003580:	f003 fe94 	bl	80072ac <HAL_GPIO_WritePin>
	if(length > 0)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00c      	beq.n	80035a4 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	b29a      	uxth	r2, r3
 800358e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	480e      	ldr	r0, [pc, #56]	; (80035d0 <lcd_writereg+0x90>)
 8003596:	f008 fd27 	bl	800bfe8 <HAL_SPI_Transmit>
 800359a:	4603      	mov	r3, r0
 800359c:	461a      	mov	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4413      	add	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 80035a4:	2201      	movs	r2, #1
 80035a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035aa:	4808      	ldr	r0, [pc, #32]	; (80035cc <lcd_writereg+0x8c>)
 80035ac:	f003 fe7e 	bl	80072ac <HAL_GPIO_WritePin>
	if(result>0){
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	dd03      	ble.n	80035be <lcd_writereg+0x7e>
		result = -1;}
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e001      	b.n	80035c2 <lcd_writereg+0x82>
	else{
		result = 0;}
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
	return result;
 80035c2:	697b      	ldr	r3, [r7, #20]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	58021000 	.word	0x58021000
 80035d0:	24004ed0 	.word	0x24004ed0

080035d4 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 80035e0:	2200      	movs	r2, #0
 80035e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035e6:	481b      	ldr	r0, [pc, #108]	; (8003654 <lcd_readreg+0x80>)
 80035e8:	f003 fe60 	bl	80072ac <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80035ec:	2200      	movs	r2, #0
 80035ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035f2:	4818      	ldr	r0, [pc, #96]	; (8003654 <lcd_readreg+0x80>)
 80035f4:	f003 fe5a 	bl	80072ac <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80035f8:	1df9      	adds	r1, r7, #7
 80035fa:	2364      	movs	r3, #100	; 0x64
 80035fc:	2201      	movs	r2, #1
 80035fe:	4816      	ldr	r0, [pc, #88]	; (8003658 <lcd_readreg+0x84>)
 8003600:	f008 fcf2 	bl	800bfe8 <HAL_SPI_Transmit>
 8003604:	4603      	mov	r3, r0
 8003606:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8003608:	2201      	movs	r2, #1
 800360a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800360e:	4811      	ldr	r0, [pc, #68]	; (8003654 <lcd_readreg+0x80>)
 8003610:	f003 fe4c 	bl	80072ac <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8003614:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003618:	2201      	movs	r2, #1
 800361a:	6839      	ldr	r1, [r7, #0]
 800361c:	480e      	ldr	r0, [pc, #56]	; (8003658 <lcd_readreg+0x84>)
 800361e:	f008 fed5 	bl	800c3cc <HAL_SPI_Receive>
 8003622:	4603      	mov	r3, r0
 8003624:	461a      	mov	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 800362c:	2201      	movs	r2, #1
 800362e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003632:	4808      	ldr	r0, [pc, #32]	; (8003654 <lcd_readreg+0x80>)
 8003634:	f003 fe3a 	bl	80072ac <HAL_GPIO_WritePin>
	if(result>0){
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	dd03      	ble.n	8003646 <lcd_readreg+0x72>
		result = -1;}
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e001      	b.n	800364a <lcd_readreg+0x76>
	else{
		result = 0;}
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
	return result;
 800364a:	68fb      	ldr	r3, [r7, #12]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	58021000 	.word	0x58021000
 8003658:	24004ed0 	.word	0x24004ed0

0800365c <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8003666:	2200      	movs	r2, #0
 8003668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800366c:	480f      	ldr	r0, [pc, #60]	; (80036ac <lcd_senddata+0x50>)
 800366e:	f003 fe1d 	bl	80072ac <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	b29a      	uxth	r2, r3
 8003676:	2364      	movs	r3, #100	; 0x64
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	480d      	ldr	r0, [pc, #52]	; (80036b0 <lcd_senddata+0x54>)
 800367c:	f008 fcb4 	bl	800bfe8 <HAL_SPI_Transmit>
 8003680:	4603      	mov	r3, r0
 8003682:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8003684:	2201      	movs	r2, #1
 8003686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800368a:	4808      	ldr	r0, [pc, #32]	; (80036ac <lcd_senddata+0x50>)
 800368c:	f003 fe0e 	bl	80072ac <HAL_GPIO_WritePin>
	if(result>0){
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	dd03      	ble.n	800369e <lcd_senddata+0x42>
		result = -1;}
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e001      	b.n	80036a2 <lcd_senddata+0x46>
	else{
		result = 0;}
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
	return result;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	58021000 	.word	0x58021000
 80036b0:	24004ed0 	.word	0x24004ed0

080036b4 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 80036be:	2200      	movs	r2, #0
 80036c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036c4:	4810      	ldr	r0, [pc, #64]	; (8003708 <lcd_recvdata+0x54>)
 80036c6:	f003 fdf1 	bl	80072ac <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	480d      	ldr	r0, [pc, #52]	; (800370c <lcd_recvdata+0x58>)
 80036d6:	f008 fe79 	bl	800c3cc <HAL_SPI_Receive>
 80036da:	4603      	mov	r3, r0
 80036dc:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80036de:	2201      	movs	r2, #1
 80036e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036e4:	4808      	ldr	r0, [pc, #32]	; (8003708 <lcd_recvdata+0x54>)
 80036e6:	f003 fde1 	bl	80072ac <HAL_GPIO_WritePin>
	if(result>0){
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	dd03      	ble.n	80036f8 <lcd_recvdata+0x44>
		result = -1;}
 80036f0:	f04f 33ff 	mov.w	r3, #4294967295
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e001      	b.n	80036fc <lcd_recvdata+0x48>
	else{
		result = 0;}
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
	return result;
 80036fc:	68fb      	ldr	r3, [r7, #12]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	58021000 	.word	0x58021000
 800370c:	24004ed0 	.word	0x24004ed0

08003710 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d103      	bne.n	8003728 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e03a      	b.n	800379e <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	891a      	ldrh	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <ST7735_RegisterBusIO+0x98>)
 800376c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <ST7735_RegisterBusIO+0x9c>)
 8003772:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <ST7735_RegisterBusIO+0xa0>)
 8003778:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <ST7735_RegisterBusIO+0xa4>)
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4798      	blx	r3
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	e002      	b.n	800379e <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800379e:	68fb      	ldr	r3, [r7, #12]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	08004c19 	.word	0x08004c19
 80037ac:	08004c41 	.word	0x08004c41
 80037b0:	08004c6b 	.word	0x08004c6b
 80037b4:	08004c8f 	.word	0x08004c8f

080037b8 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e3a6      	b.n	8003f20 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f103 0020 	add.w	r0, r3, #32
 80037dc:	f107 0213 	add.w	r2, r7, #19
 80037e0:	2300      	movs	r3, #0
 80037e2:	2101      	movs	r1, #1
 80037e4:	f001 fa92 	bl	8004d0c <st7735_write_reg>
 80037e8:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 80037ea:	2178      	movs	r1, #120	; 0x78
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f001 fa60 	bl	8004cb2 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f103 0020 	add.w	r0, r3, #32
 80037fc:	f107 0213 	add.w	r2, r7, #19
 8003800:	2300      	movs	r3, #0
 8003802:	2101      	movs	r1, #1
 8003804:	f001 fa82 	bl	8004d0c <st7735_write_reg>
 8003808:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 800380a:	2178      	movs	r1, #120	; 0x78
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f001 fa50 	bl	8004cb2 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f103 0020 	add.w	r0, r3, #32
 800381c:	f107 0213 	add.w	r2, r7, #19
 8003820:	2301      	movs	r3, #1
 8003822:	2111      	movs	r1, #17
 8003824:	f001 fa72 	bl	8004d0c <st7735_write_reg>
 8003828:	4602      	mov	r2, r0
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	4413      	add	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f103 0020 	add.w	r0, r3, #32
 8003836:	f107 0213 	add.w	r2, r7, #19
 800383a:	2300      	movs	r3, #0
 800383c:	21b1      	movs	r1, #177	; 0xb1
 800383e:	f001 fa65 	bl	8004d0c <st7735_write_reg>
 8003842:	4602      	mov	r2, r0
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	4413      	add	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 800384a:	2301      	movs	r3, #1
 800384c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3320      	adds	r3, #32
 8003852:	f107 0113 	add.w	r1, r7, #19
 8003856:	2201      	movs	r2, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fa6c 	bl	8004d36 <st7735_send_data>
 800385e:	4602      	mov	r2, r0
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4413      	add	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003866:	232c      	movs	r3, #44	; 0x2c
 8003868:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3320      	adds	r3, #32
 800386e:	f107 0113 	add.w	r1, r7, #19
 8003872:	2201      	movs	r2, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f001 fa5e 	bl	8004d36 <st7735_send_data>
 800387a:	4602      	mov	r2, r0
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4413      	add	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003882:	232d      	movs	r3, #45	; 0x2d
 8003884:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3320      	adds	r3, #32
 800388a:	f107 0113 	add.w	r1, r7, #19
 800388e:	2201      	movs	r2, #1
 8003890:	4618      	mov	r0, r3
 8003892:	f001 fa50 	bl	8004d36 <st7735_send_data>
 8003896:	4602      	mov	r2, r0
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	4413      	add	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 800389e:	2301      	movs	r3, #1
 80038a0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f103 0020 	add.w	r0, r3, #32
 80038a8:	f107 0213 	add.w	r2, r7, #19
 80038ac:	2301      	movs	r3, #1
 80038ae:	21b2      	movs	r1, #178	; 0xb2
 80038b0:	f001 fa2c 	bl	8004d0c <st7735_write_reg>
 80038b4:	4602      	mov	r2, r0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	4413      	add	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80038bc:	232c      	movs	r3, #44	; 0x2c
 80038be:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3320      	adds	r3, #32
 80038c4:	f107 0113 	add.w	r1, r7, #19
 80038c8:	2201      	movs	r2, #1
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fa33 	bl	8004d36 <st7735_send_data>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4413      	add	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80038d8:	232d      	movs	r3, #45	; 0x2d
 80038da:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3320      	adds	r3, #32
 80038e0:	f107 0113 	add.w	r1, r7, #19
 80038e4:	2201      	movs	r2, #1
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 fa25 	bl	8004d36 <st7735_send_data>
 80038ec:	4602      	mov	r2, r0
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	4413      	add	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 80038f4:	2301      	movs	r3, #1
 80038f6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f103 0020 	add.w	r0, r3, #32
 80038fe:	f107 0213 	add.w	r2, r7, #19
 8003902:	2301      	movs	r3, #1
 8003904:	21b3      	movs	r1, #179	; 0xb3
 8003906:	f001 fa01 	bl	8004d0c <st7735_write_reg>
 800390a:	4602      	mov	r2, r0
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4413      	add	r3, r2
 8003910:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003912:	232c      	movs	r3, #44	; 0x2c
 8003914:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3320      	adds	r3, #32
 800391a:	f107 0113 	add.w	r1, r7, #19
 800391e:	2201      	movs	r2, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f001 fa08 	bl	8004d36 <st7735_send_data>
 8003926:	4602      	mov	r2, r0
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4413      	add	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 800392e:	232d      	movs	r3, #45	; 0x2d
 8003930:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3320      	adds	r3, #32
 8003936:	f107 0113 	add.w	r1, r7, #19
 800393a:	2201      	movs	r2, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f001 f9fa 	bl	8004d36 <st7735_send_data>
 8003942:	4602      	mov	r2, r0
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	4413      	add	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 800394a:	2301      	movs	r3, #1
 800394c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3320      	adds	r3, #32
 8003952:	f107 0113 	add.w	r1, r7, #19
 8003956:	2201      	movs	r2, #1
 8003958:	4618      	mov	r0, r3
 800395a:	f001 f9ec 	bl	8004d36 <st7735_send_data>
 800395e:	4602      	mov	r2, r0
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	4413      	add	r3, r2
 8003964:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003966:	232c      	movs	r3, #44	; 0x2c
 8003968:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3320      	adds	r3, #32
 800396e:	f107 0113 	add.w	r1, r7, #19
 8003972:	2201      	movs	r2, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f001 f9de 	bl	8004d36 <st7735_send_data>
 800397a:	4602      	mov	r2, r0
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4413      	add	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003982:	232d      	movs	r3, #45	; 0x2d
 8003984:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3320      	adds	r3, #32
 800398a:	f107 0113 	add.w	r1, r7, #19
 800398e:	2201      	movs	r2, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f001 f9d0 	bl	8004d36 <st7735_send_data>
 8003996:	4602      	mov	r2, r0
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	4413      	add	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 800399e:	2307      	movs	r3, #7
 80039a0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f103 0020 	add.w	r0, r3, #32
 80039a8:	f107 0213 	add.w	r2, r7, #19
 80039ac:	2301      	movs	r3, #1
 80039ae:	21b4      	movs	r1, #180	; 0xb4
 80039b0:	f001 f9ac 	bl	8004d0c <st7735_write_reg>
 80039b4:	4602      	mov	r2, r0
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	4413      	add	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 80039bc:	23a2      	movs	r3, #162	; 0xa2
 80039be:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f103 0020 	add.w	r0, r3, #32
 80039c6:	f107 0213 	add.w	r2, r7, #19
 80039ca:	2301      	movs	r3, #1
 80039cc:	21c0      	movs	r1, #192	; 0xc0
 80039ce:	f001 f99d 	bl	8004d0c <st7735_write_reg>
 80039d2:	4602      	mov	r2, r0
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	4413      	add	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 80039da:	2302      	movs	r3, #2
 80039dc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3320      	adds	r3, #32
 80039e2:	f107 0113 	add.w	r1, r7, #19
 80039e6:	2201      	movs	r2, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 f9a4 	bl	8004d36 <st7735_send_data>
 80039ee:	4602      	mov	r2, r0
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4413      	add	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 80039f6:	2384      	movs	r3, #132	; 0x84
 80039f8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3320      	adds	r3, #32
 80039fe:	f107 0113 	add.w	r1, r7, #19
 8003a02:	2201      	movs	r2, #1
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 f996 	bl	8004d36 <st7735_send_data>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4413      	add	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8003a12:	23c5      	movs	r3, #197	; 0xc5
 8003a14:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f103 0020 	add.w	r0, r3, #32
 8003a1c:	f107 0213 	add.w	r2, r7, #19
 8003a20:	2301      	movs	r3, #1
 8003a22:	21c1      	movs	r1, #193	; 0xc1
 8003a24:	f001 f972 	bl	8004d0c <st7735_write_reg>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8003a30:	230a      	movs	r3, #10
 8003a32:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f103 0020 	add.w	r0, r3, #32
 8003a3a:	f107 0213 	add.w	r2, r7, #19
 8003a3e:	2301      	movs	r3, #1
 8003a40:	21c2      	movs	r1, #194	; 0xc2
 8003a42:	f001 f963 	bl	8004d0c <st7735_write_reg>
 8003a46:	4602      	mov	r2, r0
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3320      	adds	r3, #32
 8003a56:	f107 0113 	add.w	r1, r7, #19
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 f96a 	bl	8004d36 <st7735_send_data>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8003a6a:	238a      	movs	r3, #138	; 0x8a
 8003a6c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f103 0020 	add.w	r0, r3, #32
 8003a74:	f107 0213 	add.w	r2, r7, #19
 8003a78:	2301      	movs	r3, #1
 8003a7a:	21c3      	movs	r1, #195	; 0xc3
 8003a7c:	f001 f946 	bl	8004d0c <st7735_write_reg>
 8003a80:	4602      	mov	r2, r0
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	4413      	add	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8003a88:	232a      	movs	r3, #42	; 0x2a
 8003a8a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3320      	adds	r3, #32
 8003a90:	f107 0113 	add.w	r1, r7, #19
 8003a94:	2201      	movs	r2, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 f94d 	bl	8004d36 <st7735_send_data>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8003aa4:	238a      	movs	r3, #138	; 0x8a
 8003aa6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f103 0020 	add.w	r0, r3, #32
 8003aae:	f107 0213 	add.w	r2, r7, #19
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	21c4      	movs	r1, #196	; 0xc4
 8003ab6:	f001 f929 	bl	8004d0c <st7735_write_reg>
 8003aba:	4602      	mov	r2, r0
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	4413      	add	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8003ac2:	23ee      	movs	r3, #238	; 0xee
 8003ac4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3320      	adds	r3, #32
 8003aca:	f107 0113 	add.w	r1, r7, #19
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 f930 	bl	8004d36 <st7735_send_data>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4413      	add	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8003ade:	230e      	movs	r3, #14
 8003ae0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f103 0020 	add.w	r0, r3, #32
 8003ae8:	f107 0213 	add.w	r2, r7, #19
 8003aec:	2301      	movs	r3, #1
 8003aee:	21c5      	movs	r1, #197	; 0xc5
 8003af0:	f001 f90c 	bl	8004d0c <st7735_write_reg>
 8003af4:	4602      	mov	r2, r0
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	4413      	add	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7b1b      	ldrb	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10d      	bne.n	8003b20 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f103 0020 	add.w	r0, r3, #32
 8003b0a:	f107 0213 	add.w	r2, r7, #19
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2121      	movs	r1, #33	; 0x21
 8003b12:	f001 f8fb 	bl	8004d0c <st7735_write_reg>
 8003b16:	4602      	mov	r2, r0
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e00c      	b.n	8003b3a <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f103 0020 	add.w	r0, r3, #32
 8003b26:	f107 0213 	add.w	r2, r7, #19
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2120      	movs	r1, #32
 8003b2e:	f001 f8ed 	bl	8004d0c <st7735_write_reg>
 8003b32:	4602      	mov	r2, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4413      	add	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f103 0020 	add.w	r0, r3, #32
 8003b40:	f107 0208 	add.w	r2, r7, #8
 8003b44:	2301      	movs	r3, #1
 8003b46:	213a      	movs	r1, #58	; 0x3a
 8003b48:	f001 f8e0 	bl	8004d0c <st7735_write_reg>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4413      	add	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8003b54:	2302      	movs	r3, #2
 8003b56:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f103 0020 	add.w	r0, r3, #32
 8003b5e:	f107 0213 	add.w	r2, r7, #19
 8003b62:	2301      	movs	r3, #1
 8003b64:	21e0      	movs	r1, #224	; 0xe0
 8003b66:	f001 f8d1 	bl	8004d0c <st7735_write_reg>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	4413      	add	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8003b72:	231c      	movs	r3, #28
 8003b74:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3320      	adds	r3, #32
 8003b7a:	f107 0113 	add.w	r1, r7, #19
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 f8d8 	bl	8004d36 <st7735_send_data>
 8003b86:	4602      	mov	r2, r0
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8003b8e:	2307      	movs	r3, #7
 8003b90:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3320      	adds	r3, #32
 8003b96:	f107 0113 	add.w	r1, r7, #19
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 f8ca 	bl	8004d36 <st7735_send_data>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8003baa:	2312      	movs	r3, #18
 8003bac:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3320      	adds	r3, #32
 8003bb2:	f107 0113 	add.w	r1, r7, #19
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 f8bc 	bl	8004d36 <st7735_send_data>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8003bc6:	2337      	movs	r3, #55	; 0x37
 8003bc8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3320      	adds	r3, #32
 8003bce:	f107 0113 	add.w	r1, r7, #19
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 f8ae 	bl	8004d36 <st7735_send_data>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	4413      	add	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8003be2:	2332      	movs	r3, #50	; 0x32
 8003be4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3320      	adds	r3, #32
 8003bea:	f107 0113 	add.w	r1, r7, #19
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 f8a0 	bl	8004d36 <st7735_send_data>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003bfe:	2329      	movs	r3, #41	; 0x29
 8003c00:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3320      	adds	r3, #32
 8003c06:	f107 0113 	add.w	r1, r7, #19
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 f892 	bl	8004d36 <st7735_send_data>
 8003c12:	4602      	mov	r2, r0
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	4413      	add	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003c1a:	232d      	movs	r3, #45	; 0x2d
 8003c1c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3320      	adds	r3, #32
 8003c22:	f107 0113 	add.w	r1, r7, #19
 8003c26:	2201      	movs	r2, #1
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f001 f884 	bl	8004d36 <st7735_send_data>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	4413      	add	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003c36:	2329      	movs	r3, #41	; 0x29
 8003c38:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3320      	adds	r3, #32
 8003c3e:	f107 0113 	add.w	r1, r7, #19
 8003c42:	2201      	movs	r2, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f876 	bl	8004d36 <st7735_send_data>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	4413      	add	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8003c52:	2325      	movs	r3, #37	; 0x25
 8003c54:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3320      	adds	r3, #32
 8003c5a:	f107 0113 	add.w	r1, r7, #19
 8003c5e:	2201      	movs	r2, #1
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 f868 	bl	8004d36 <st7735_send_data>
 8003c66:	4602      	mov	r2, r0
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8003c6e:	232b      	movs	r3, #43	; 0x2b
 8003c70:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3320      	adds	r3, #32
 8003c76:	f107 0113 	add.w	r1, r7, #19
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 f85a 	bl	8004d36 <st7735_send_data>
 8003c82:	4602      	mov	r2, r0
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4413      	add	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8003c8a:	2339      	movs	r3, #57	; 0x39
 8003c8c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3320      	adds	r3, #32
 8003c92:	f107 0113 	add.w	r1, r7, #19
 8003c96:	2201      	movs	r2, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 f84c 	bl	8004d36 <st7735_send_data>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3320      	adds	r3, #32
 8003cae:	f107 0113 	add.w	r1, r7, #19
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 f83e 	bl	8004d36 <st7735_send_data>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3320      	adds	r3, #32
 8003cca:	f107 0113 	add.w	r1, r7, #19
 8003cce:	2201      	movs	r2, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 f830 	bl	8004d36 <st7735_send_data>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4413      	add	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3320      	adds	r3, #32
 8003ce6:	f107 0113 	add.w	r1, r7, #19
 8003cea:	2201      	movs	r2, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 f822 	bl	8004d36 <st7735_send_data>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3320      	adds	r3, #32
 8003d02:	f107 0113 	add.w	r1, r7, #19
 8003d06:	2201      	movs	r2, #1
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 f814 	bl	8004d36 <st7735_send_data>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4413      	add	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8003d16:	2303      	movs	r3, #3
 8003d18:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f103 0020 	add.w	r0, r3, #32
 8003d20:	f107 0213 	add.w	r2, r7, #19
 8003d24:	2301      	movs	r3, #1
 8003d26:	21e1      	movs	r1, #225	; 0xe1
 8003d28:	f000 fff0 	bl	8004d0c <st7735_write_reg>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4413      	add	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8003d34:	231d      	movs	r3, #29
 8003d36:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3320      	adds	r3, #32
 8003d3c:	f107 0113 	add.w	r1, r7, #19
 8003d40:	2201      	movs	r2, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fff7 	bl	8004d36 <st7735_send_data>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8003d50:	2307      	movs	r3, #7
 8003d52:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3320      	adds	r3, #32
 8003d58:	f107 0113 	add.w	r1, r7, #19
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 ffe9 	bl	8004d36 <st7735_send_data>
 8003d64:	4602      	mov	r2, r0
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	4413      	add	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 8003d6c:	2306      	movs	r3, #6
 8003d6e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3320      	adds	r3, #32
 8003d74:	f107 0113 	add.w	r1, r7, #19
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 ffdb 	bl	8004d36 <st7735_send_data>
 8003d80:	4602      	mov	r2, r0
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4413      	add	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8003d88:	232e      	movs	r3, #46	; 0x2e
 8003d8a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3320      	adds	r3, #32
 8003d90:	f107 0113 	add.w	r1, r7, #19
 8003d94:	2201      	movs	r2, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 ffcd 	bl	8004d36 <st7735_send_data>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	4413      	add	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8003da4:	232c      	movs	r3, #44	; 0x2c
 8003da6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3320      	adds	r3, #32
 8003dac:	f107 0113 	add.w	r1, r7, #19
 8003db0:	2201      	movs	r2, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 ffbf 	bl	8004d36 <st7735_send_data>
 8003db8:	4602      	mov	r2, r0
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8003dc0:	2329      	movs	r3, #41	; 0x29
 8003dc2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3320      	adds	r3, #32
 8003dc8:	f107 0113 	add.w	r1, r7, #19
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 ffb1 	bl	8004d36 <st7735_send_data>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	4413      	add	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8003ddc:	232d      	movs	r3, #45	; 0x2d
 8003dde:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3320      	adds	r3, #32
 8003de4:	f107 0113 	add.w	r1, r7, #19
 8003de8:	2201      	movs	r2, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 ffa3 	bl	8004d36 <st7735_send_data>
 8003df0:	4602      	mov	r2, r0
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4413      	add	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8003df8:	232e      	movs	r3, #46	; 0x2e
 8003dfa:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3320      	adds	r3, #32
 8003e00:	f107 0113 	add.w	r1, r7, #19
 8003e04:	2201      	movs	r2, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 ff95 	bl	8004d36 <st7735_send_data>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	4413      	add	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8003e14:	232e      	movs	r3, #46	; 0x2e
 8003e16:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3320      	adds	r3, #32
 8003e1c:	f107 0113 	add.w	r1, r7, #19
 8003e20:	2201      	movs	r2, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 ff87 	bl	8004d36 <st7735_send_data>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8003e30:	2337      	movs	r3, #55	; 0x37
 8003e32:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3320      	adds	r3, #32
 8003e38:	f107 0113 	add.w	r1, r7, #19
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 ff79 	bl	8004d36 <st7735_send_data>
 8003e44:	4602      	mov	r2, r0
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	4413      	add	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 8003e4c:	233f      	movs	r3, #63	; 0x3f
 8003e4e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3320      	adds	r3, #32
 8003e54:	f107 0113 	add.w	r1, r7, #19
 8003e58:	2201      	movs	r2, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 ff6b 	bl	8004d36 <st7735_send_data>
 8003e60:	4602      	mov	r2, r0
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	4413      	add	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3320      	adds	r3, #32
 8003e70:	f107 0113 	add.w	r1, r7, #19
 8003e74:	2201      	movs	r2, #1
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 ff5d 	bl	8004d36 <st7735_send_data>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	4413      	add	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3320      	adds	r3, #32
 8003e8c:	f107 0113 	add.w	r1, r7, #19
 8003e90:	2201      	movs	r2, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 ff4f 	bl	8004d36 <st7735_send_data>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3320      	adds	r3, #32
 8003ea8:	f107 0113 	add.w	r1, r7, #19
 8003eac:	2201      	movs	r2, #1
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 ff41 	bl	8004d36 <st7735_send_data>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	4413      	add	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3320      	adds	r3, #32
 8003ec4:	f107 0113 	add.w	r1, r7, #19
 8003ec8:	2201      	movs	r2, #1
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 ff33 	bl	8004d36 <st7735_send_data>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f103 0020 	add.w	r0, r3, #32
 8003ee2:	f107 0213 	add.w	r2, r7, #19
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	2113      	movs	r1, #19
 8003eea:	f000 ff0f 	bl	8004d0c <st7735_write_reg>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f103 0020 	add.w	r0, r3, #32
 8003efc:	f107 0213 	add.w	r2, r7, #19
 8003f00:	2301      	movs	r3, #1
 8003f02:	2129      	movs	r1, #41	; 0x29
 8003f04:	f000 ff02 	bl	8004d0c <st7735_write_reg>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f944 	bl	80041a0 <ST7735_SetOrientation>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003f2c:	697b      	ldr	r3, [r7, #20]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3320      	adds	r3, #32
 8003f5a:	f107 0208 	add.w	r2, r7, #8
 8003f5e:	21da      	movs	r1, #218	; 0xda
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fec0 	bl	8004ce6 <st7735_read_reg>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	e02d      	b.n	8003fd0 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f103 0020 	add.w	r0, r3, #32
 8003f7a:	f107 0308 	add.w	r3, r7, #8
 8003f7e:	3301      	adds	r3, #1
 8003f80:	461a      	mov	r2, r3
 8003f82:	21db      	movs	r1, #219	; 0xdb
 8003f84:	f000 feaf 	bl	8004ce6 <st7735_read_reg>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 8003f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	e01c      	b.n	8003fd0 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f103 0020 	add.w	r0, r3, #32
 8003f9c:	f107 0308 	add.w	r3, r7, #8
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	21dc      	movs	r1, #220	; 0xdc
 8003fa6:	f000 fe9e 	bl	8004ce6 <st7735_read_reg>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 8003fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	e00b      	b.n	8003fd0 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 8003fb8:	7abb      	ldrb	r3, [r7, #10]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	7a7b      	ldrb	r3, [r7, #9]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	7a3b      	ldrb	r3, [r7, #8]
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f103 0020 	add.w	r0, r3, #32
 8003fee:	f107 020b 	add.w	r2, r7, #11
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2113      	movs	r1, #19
 8003ff6:	f000 fe89 	bl	8004d0c <st7735_write_reg>
 8003ffa:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 8003ffc:	210a      	movs	r1, #10
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fe57 	bl	8004cb2 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f103 0020 	add.w	r0, r3, #32
 800400a:	f107 020b 	add.w	r2, r7, #11
 800400e:	2300      	movs	r3, #0
 8004010:	2129      	movs	r1, #41	; 0x29
 8004012:	f000 fe7b 	bl	8004d0c <st7735_write_reg>
 8004016:	4602      	mov	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800401e:	210a      	movs	r1, #10
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fe46 	bl	8004cb2 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f103 0020 	add.w	r0, r3, #32
 800402c:	f107 020b 	add.w	r2, r7, #11
 8004030:	2300      	movs	r3, #0
 8004032:	2136      	movs	r1, #54	; 0x36
 8004034:	f000 fe6a 	bl	8004d0c <st7735_write_reg>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <ST7735_DisplayOn+0xc0>)
 8004042:	7b1b      	ldrb	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <ST7735_DisplayOn+0xc0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <ST7735_DisplayOn+0xc4>)
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004056:	f043 0308 	orr.w	r3, r3, #8
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e006      	b.n	800406c <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <ST7735_DisplayOn+0xc0>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <ST7735_DisplayOn+0xc4>)
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800406a:	b2db      	uxtb	r3, r3
 800406c:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3320      	adds	r3, #32
 8004072:	f107 010b 	add.w	r1, r7, #11
 8004076:	2201      	movs	r2, #1
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fe5c 	bl	8004d36 <st7735_send_data>
 800407e:	4602      	mov	r2, r0
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	240051d4 	.word	0x240051d4
 80040a0:	240000bc 	.word	0x240000bc

080040a4 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f103 0020 	add.w	r0, r3, #32
 80040b6:	f107 020b 	add.w	r2, r7, #11
 80040ba:	2300      	movs	r3, #0
 80040bc:	2113      	movs	r1, #19
 80040be:	f000 fe25 	bl	8004d0c <st7735_write_reg>
 80040c2:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80040c4:	210a      	movs	r1, #10
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fdf3 	bl	8004cb2 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f103 0020 	add.w	r0, r3, #32
 80040d2:	f107 020b 	add.w	r2, r7, #11
 80040d6:	2300      	movs	r3, #0
 80040d8:	2128      	movs	r1, #40	; 0x28
 80040da:	f000 fe17 	bl	8004d0c <st7735_write_reg>
 80040de:	4602      	mov	r2, r0
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80040e6:	210a      	movs	r1, #10
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fde2 	bl	8004cb2 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f103 0020 	add.w	r0, r3, #32
 80040f4:	f107 020b 	add.w	r2, r7, #11
 80040f8:	2300      	movs	r3, #0
 80040fa:	2136      	movs	r1, #54	; 0x36
 80040fc:	f000 fe06 	bl	8004d0c <st7735_write_reg>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004108:	4b16      	ldr	r3, [pc, #88]	; (8004164 <ST7735_DisplayOff+0xc0>)
 800410a:	7b1b      	ldrb	r3, [r3, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <ST7735_DisplayOff+0xc0>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <ST7735_DisplayOff+0xc4>)
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4413      	add	r3, r2
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800411e:	f043 0308 	orr.w	r3, r3, #8
 8004122:	b2db      	uxtb	r3, r3
 8004124:	e006      	b.n	8004134 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <ST7735_DisplayOff+0xc0>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <ST7735_DisplayOff+0xc4>)
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004132:	b2db      	uxtb	r3, r3
 8004134:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3320      	adds	r3, #32
 800413a:	f107 010b 	add.w	r1, r7, #11
 800413e:	2201      	movs	r2, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fdf8 	bl	8004d36 <st7735_send_data>
 8004146:	4602      	mov	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8004154:	f04f 33ff 	mov.w	r3, #4294967295
 8004158:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	240051d4 	.word	0x240051d4
 8004168:	240000bc 	.word	0x240000bc

0800416c <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 8004190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <ST7735_SetOrientation+0x1a>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d119      	bne.n	80041ee <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	7b5b      	ldrb	r3, [r3, #13]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d106      	bne.n	80041d0 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 80041c2:	4b3c      	ldr	r3, [pc, #240]	; (80042b4 <ST7735_SetOrientation+0x114>)
 80041c4:	2250      	movs	r2, #80	; 0x50
 80041c6:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 80041c8:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <ST7735_SetOrientation+0x114>)
 80041ca:	22a0      	movs	r2, #160	; 0xa0
 80041cc:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80041ce:	e028      	b.n	8004222 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	7b5b      	ldrb	r3, [r3, #13]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <ST7735_SetOrientation+0x40>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	7b5b      	ldrb	r3, [r3, #13]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d120      	bne.n	8004222 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 80041e0:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <ST7735_SetOrientation+0x114>)
 80041e2:	2280      	movs	r2, #128	; 0x80
 80041e4:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 80041e6:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <ST7735_SetOrientation+0x114>)
 80041e8:	22a0      	movs	r2, #160	; 0xa0
 80041ea:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80041ec:	e019      	b.n	8004222 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	7b5b      	ldrb	r3, [r3, #13]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d106      	bne.n	8004204 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 80041f6:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <ST7735_SetOrientation+0x114>)
 80041f8:	22a0      	movs	r2, #160	; 0xa0
 80041fa:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 80041fc:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <ST7735_SetOrientation+0x114>)
 80041fe:	2250      	movs	r2, #80	; 0x50
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	e00f      	b.n	8004224 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	7b5b      	ldrb	r3, [r3, #13]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <ST7735_SetOrientation+0x74>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	7b5b      	ldrb	r3, [r3, #13]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d107      	bne.n	8004224 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8004214:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <ST7735_SetOrientation+0x114>)
 8004216:	22a0      	movs	r2, #160	; 0xa0
 8004218:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 800421a:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <ST7735_SetOrientation+0x114>)
 800421c:	2280      	movs	r2, #128	; 0x80
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	e000      	b.n	8004224 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8004222:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <ST7735_SetOrientation+0x114>)
 800422a:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	7b1a      	ldrb	r2, [r3, #12]
 8004230:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <ST7735_SetOrientation+0x114>)
 8004232:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	7b5a      	ldrb	r2, [r3, #13]
 8004238:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <ST7735_SetOrientation+0x114>)
 800423a:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <ST7735_SetOrientation+0x114>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <ST7735_SetOrientation+0x114>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	2200      	movs	r2, #0
 800424a:	2100      	movs	r1, #0
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fbdf 	bl	8004a10 <ST7735_SetDisplayWindow>
 8004252:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004254:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <ST7735_SetOrientation+0x114>)
 8004256:	7b1b      	ldrb	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <ST7735_SetOrientation+0x114>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <ST7735_SetOrientation+0x118>)
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4413      	add	r3, r2
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800426a:	f043 0308 	orr.w	r3, r3, #8
 800426e:	b2db      	uxtb	r3, r3
 8004270:	e006      	b.n	8004280 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <ST7735_SetOrientation+0x114>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	4a10      	ldr	r2, [pc, #64]	; (80042b8 <ST7735_SetOrientation+0x118>)
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4413      	add	r3, r2
 800427c:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800427e:	b2db      	uxtb	r3, r3
 8004280:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f103 0020 	add.w	r0, r3, #32
 8004288:	f107 020b 	add.w	r2, r7, #11
 800428c:	2301      	movs	r3, #1
 800428e:	2136      	movs	r1, #54	; 0x36
 8004290:	f000 fd3c 	bl	8004d0c <st7735_write_reg>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4413      	add	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 80042a2:	f04f 33ff 	mov.w	r3, #4294967295
 80042a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80042a8:	68fb      	ldr	r3, [r7, #12]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	240051d4 	.word	0x240051d4
 80042b8:	240000bc 	.word	0x240000bc

080042bc <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <ST7735_GetOrientation+0x20>)
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	240051d4 	.word	0x240051d4

080042e0 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <ST7735_SetCursor+0x174>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d821      	bhi.n	8004338 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 80042f4:	4b57      	ldr	r3, [pc, #348]	; (8004454 <ST7735_SetCursor+0x174>)
 80042f6:	7b5b      	ldrb	r3, [r3, #13]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d10e      	bne.n	800431a <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 80042fc:	4b55      	ldr	r3, [pc, #340]	; (8004454 <ST7735_SetCursor+0x174>)
 80042fe:	7b1b      	ldrb	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <ST7735_SetCursor+0x32>
				Xpos += 26;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	331a      	adds	r3, #26
 8004308:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3301      	adds	r3, #1
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	e033      	b.n	800437a <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3318      	adds	r3, #24
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	e02f      	b.n	800437a <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800431a:	4b4e      	ldr	r3, [pc, #312]	; (8004454 <ST7735_SetCursor+0x174>)
 800431c:	7b5b      	ldrb	r3, [r3, #13]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d12b      	bne.n	800437a <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004322:	4b4c      	ldr	r3, [pc, #304]	; (8004454 <ST7735_SetCursor+0x174>)
 8004324:	7b1b      	ldrb	r3, [r3, #12]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d127      	bne.n	800437a <ST7735_SetCursor+0x9a>
				Xpos += 2;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	3302      	adds	r3, #2
 800432e:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3301      	adds	r3, #1
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	e020      	b.n	800437a <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8004338:	4b46      	ldr	r3, [pc, #280]	; (8004454 <ST7735_SetCursor+0x174>)
 800433a:	7b5b      	ldrb	r3, [r3, #13]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10e      	bne.n	800435e <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8004340:	4b44      	ldr	r3, [pc, #272]	; (8004454 <ST7735_SetCursor+0x174>)
 8004342:	7b1b      	ldrb	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <ST7735_SetCursor+0x76>
				Xpos += 1;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	3301      	adds	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	331a      	adds	r3, #26
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	e011      	b.n	800437a <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3318      	adds	r3, #24
 800435a:	607b      	str	r3, [r7, #4]
 800435c:	e00d      	b.n	800437a <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800435e:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <ST7735_SetCursor+0x174>)
 8004360:	7b5b      	ldrb	r3, [r3, #13]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d109      	bne.n	800437a <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004366:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <ST7735_SetCursor+0x174>)
 8004368:	7b1b      	ldrb	r3, [r3, #12]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d105      	bne.n	800437a <ST7735_SetCursor+0x9a>
				Xpos += 1;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3301      	adds	r3, #1
 8004372:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3302      	adds	r3, #2
 8004378:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f103 0020 	add.w	r0, r3, #32
 8004380:	f107 0213 	add.w	r2, r7, #19
 8004384:	2300      	movs	r3, #0
 8004386:	212a      	movs	r1, #42	; 0x2a
 8004388:	f000 fcc0 	bl	8004d0c <st7735_write_reg>
 800438c:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	b2db      	uxtb	r3, r3
 8004394:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3320      	adds	r3, #32
 800439a:	f107 0113 	add.w	r1, r7, #19
 800439e:	2201      	movs	r2, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fcc8 	bl	8004d36 <st7735_send_data>
 80043a6:	4602      	mov	r2, r0
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4413      	add	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3320      	adds	r3, #32
 80043b8:	f107 0113 	add.w	r1, r7, #19
 80043bc:	2201      	movs	r2, #1
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fcb9 	bl	8004d36 <st7735_send_data>
 80043c4:	4602      	mov	r2, r0
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	4413      	add	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f103 0020 	add.w	r0, r3, #32
 80043d2:	f107 0213 	add.w	r2, r7, #19
 80043d6:	2300      	movs	r3, #0
 80043d8:	212b      	movs	r1, #43	; 0x2b
 80043da:	f000 fc97 	bl	8004d0c <st7735_write_reg>
 80043de:	4602      	mov	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	4413      	add	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3320      	adds	r3, #32
 80043f2:	f107 0113 	add.w	r1, r7, #19
 80043f6:	2201      	movs	r2, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fc9c 	bl	8004d36 <st7735_send_data>
 80043fe:	4602      	mov	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4413      	add	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3320      	adds	r3, #32
 8004410:	f107 0113 	add.w	r1, r7, #19
 8004414:	2201      	movs	r2, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fc8d 	bl	8004d36 <st7735_send_data>
 800441c:	4602      	mov	r2, r0
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	4413      	add	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f103 0020 	add.w	r0, r3, #32
 800442a:	f107 0213 	add.w	r2, r7, #19
 800442e:	2300      	movs	r3, #0
 8004430:	212c      	movs	r1, #44	; 0x2c
 8004432:	f000 fc6b 	bl	8004d0c <st7735_write_reg>
 8004436:	4602      	mov	r2, r0
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	4413      	add	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 8004444:	f04f 33ff 	mov.w	r3, #4294967295
 8004448:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800444a:	697b      	ldr	r3, [r7, #20]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	240051d4 	.word	0x240051d4

08004458 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b090      	sub	sp, #64	; 0x40
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	330a      	adds	r3, #10
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	330b      	adds	r3, #11
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	441a      	add	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	441a      	add	r2, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	330d      	adds	r3, #13
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	061b      	lsls	r3, r3, #24
 8004492:	4413      	add	r3, r2
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	3312      	adds	r3, #18
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	3313      	adds	r3, #19
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	441a      	add	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	3314      	adds	r3, #20
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	441a      	add	r2, r3
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	3315      	adds	r3, #21
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	061b      	lsls	r3, r3, #24
 80044ba:	4413      	add	r3, r2
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	3316      	adds	r3, #22
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	3317      	adds	r3, #23
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	441a      	add	r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	3318      	adds	r3, #24
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	441a      	add	r2, r3
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	3319      	adds	r3, #25
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	061b      	lsls	r3, r3, #24
 80044e2:	4413      	add	r3, r2
 80044e4:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	3302      	adds	r3, #2
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	3303      	adds	r3, #3
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	441a      	add	r2, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	3304      	adds	r3, #4
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	441a      	add	r2, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	3305      	adds	r3, #5
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	4413      	add	r3, r2
 800450c:	61fb      	str	r3, [r7, #28]
  size = size - index;
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	4413      	add	r3, r2
 800451c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 800451e:	4b51      	ldr	r3, [pc, #324]	; (8004664 <ST7735_DrawBitmap+0x20c>)
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	1ad2      	subs	r2, r2, r3
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa6a 	bl	8004a10 <ST7735_SetDisplayWindow>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 8004542:	f04f 33ff 	mov.w	r3, #4294967295
 8004546:	637b      	str	r3, [r7, #52]	; 0x34
 8004548:	e087      	b.n	800465a <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <ST7735_DrawBitmap+0x20c>)
 800454c:	7b1b      	ldrb	r3, [r3, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8004552:	4b44      	ldr	r3, [pc, #272]	; (8004664 <ST7735_DrawBitmap+0x20c>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	4a44      	ldr	r2, [pc, #272]	; (8004668 <ST7735_DrawBitmap+0x210>)
 8004558:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800455c:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800455e:	f043 0308 	orr.w	r3, r3, #8
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e005      	b.n	8004572 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 8004566:	4b3f      	ldr	r3, [pc, #252]	; (8004664 <ST7735_DrawBitmap+0x20c>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	4a3f      	ldr	r2, [pc, #252]	; (8004668 <ST7735_DrawBitmap+0x210>)
 800456c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004570:	b2db      	uxtb	r3, r3
 8004572:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f103 0020 	add.w	r0, r3, #32
 800457a:	f107 0213 	add.w	r2, r7, #19
 800457e:	2301      	movs	r3, #1
 8004580:	2136      	movs	r1, #54	; 0x36
 8004582:	f000 fbc3 	bl	8004d0c <st7735_write_reg>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 800458c:	f04f 33ff 	mov.w	r3, #4294967295
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
 8004592:	e062      	b.n	800465a <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff fea1 	bl	80042e0 <ST7735_SetCursor>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
 80045aa:	e056      	b.n	800465a <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3320      	adds	r3, #32
 80045bc:	f107 0114 	add.w	r1, r7, #20
 80045c0:	2202      	movs	r2, #2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fbb7 	bl	8004d36 <st7735_send_data>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80045d4:	e009      	b.n	80045ea <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	3302      	adds	r3, #2
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	3302      	adds	r3, #2
 80045e0:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 80045e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d3e0      	bcc.n	80045ac <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80045ea:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <ST7735_DrawBitmap+0x20c>)
 80045ec:	7b1b      	ldrb	r3, [r3, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80045f2:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <ST7735_DrawBitmap+0x20c>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <ST7735_DrawBitmap+0x210>)
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4413      	add	r3, r2
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004600:	f043 0308 	orr.w	r3, r3, #8
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e006      	b.n	8004616 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8004608:	4b16      	ldr	r3, [pc, #88]	; (8004664 <ST7735_DrawBitmap+0x20c>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a16      	ldr	r2, [pc, #88]	; (8004668 <ST7735_DrawBitmap+0x210>)
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8004614:	b2db      	uxtb	r3, r3
 8004616:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f103 0020 	add.w	r0, r3, #32
 800461e:	f107 0213 	add.w	r2, r7, #19
 8004622:	2301      	movs	r3, #1
 8004624:	2136      	movs	r1, #54	; 0x36
 8004626:	f000 fb71 	bl	8004d0c <st7735_write_reg>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
 8004636:	e010      	b.n	800465a <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <ST7735_DrawBitmap+0x20c>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <ST7735_DrawBitmap+0x20c>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	4613      	mov	r3, r2
 8004644:	2200      	movs	r2, #0
 8004646:	2100      	movs	r1, #0
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f9e1 	bl	8004a10 <ST7735_SetDisplayWindow>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8004654:	f04f 33ff 	mov.w	r3, #4294967295
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800465c:	4618      	mov	r0, r3
 800465e:	3738      	adds	r7, #56	; 0x38
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	240051d4 	.word	0x240051d4
 8004668:	240000bc 	.word	0x240000bc

0800466c <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	441a      	add	r2, r3
 8004688:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <ST7735_FillRGBRect+0xcc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d806      	bhi.n	800469e <ST7735_FillRGBRect+0x32>
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	441a      	add	r2, r3
 8004696:	4b28      	ldr	r3, [pc, #160]	; (8004738 <ST7735_FillRGBRect+0xcc>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	429a      	cmp	r2, r3
 800469c:	d903      	bls.n	80046a6 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	e042      	b.n	800472c <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 80046a6:	2300      	movs	r3, #0
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	e03b      	b.n	8004724 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4413      	add	r3, r2
 80046b2:	461a      	mov	r2, r3
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff fe12 	bl	80042e0 <ST7735_SetCursor>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	e029      	b.n	800471e <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e013      	b.n	80046f8 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	7811      	ldrb	r1, [r2, #0]
 80046d8:	4a18      	ldr	r2, [pc, #96]	; (800473c <ST7735_FillRGBRect+0xd0>)
 80046da:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	3301      	adds	r3, #1
 80046e6:	7811      	ldrb	r1, [r2, #0]
 80046e8:	4a14      	ldr	r2, [pc, #80]	; (800473c <ST7735_FillRGBRect+0xd0>)
 80046ea:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	3302      	adds	r3, #2
 80046f0:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	3301      	adds	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d3e7      	bcc.n	80046d0 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f103 0020 	add.w	r0, r3, #32
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	461a      	mov	r2, r3
 800470c:	490b      	ldr	r1, [pc, #44]	; (800473c <ST7735_FillRGBRect+0xd0>)
 800470e:	f000 fb12 	bl	8004d36 <st7735_send_data>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
 800471c:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3301      	adds	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	429a      	cmp	r2, r3
 800472a:	d3bf      	bcc.n	80046ac <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 800472c:	69fb      	ldr	r3, [r7, #28]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	240051d4 	.word	0x240051d4
 800473c:	2400070c 	.word	0x2400070c

08004740 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	441a      	add	r2, r3
 8004758:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <ST7735_DrawHLine+0x98>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d903      	bls.n	8004768 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8004760:	f04f 33ff 	mov.w	r3, #4294967295
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e032      	b.n	80047ce <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7ff fdb7 	bl	80042e0 <ST7735_SetCursor>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e026      	b.n	80047ce <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8004780:	2300      	movs	r3, #0
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	e010      	b.n	80047a8 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	0a1a      	lsrs	r2, r3, #8
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	b2d1      	uxtb	r1, r2
 8004790:	4a12      	ldr	r2, [pc, #72]	; (80047dc <ST7735_DrawHLine+0x9c>)
 8004792:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	3301      	adds	r3, #1
 800479a:	6a3a      	ldr	r2, [r7, #32]
 800479c:	b2d1      	uxtb	r1, r2
 800479e:	4a0f      	ldr	r2, [pc, #60]	; (80047dc <ST7735_DrawHLine+0x9c>)
 80047a0:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	3301      	adds	r3, #1
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3ea      	bcc.n	8004786 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f103 0020 	add.w	r0, r3, #32
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	461a      	mov	r2, r3
 80047bc:	4907      	ldr	r1, [pc, #28]	; (80047dc <ST7735_DrawHLine+0x9c>)
 80047be:	f000 faba 	bl	8004d36 <st7735_send_data>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 80047c8:	f04f 33ff 	mov.w	r3, #4294967295
 80047cc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80047ce:	697b      	ldr	r3, [r7, #20]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	240051d4 	.word	0x240051d4
 80047dc:	2400098c 	.word	0x2400098c

080047e0 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	441a      	add	r2, r3
 80047f8:	4b12      	ldr	r3, [pc, #72]	; (8004844 <ST7735_DrawVLine+0x64>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d903      	bls.n	8004808 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8004800:	f04f 33ff 	mov.w	r3, #4294967295
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e018      	b.n	800483a <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	e011      	b.n	8004832 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	441a      	add	r2, r3
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f841 	bl	80048a0 <ST7735_SetPixel>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8004824:	f04f 33ff 	mov.w	r3, #4294967295
 8004828:	617b      	str	r3, [r7, #20]
        break;
 800482a:	e006      	b.n	800483a <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3301      	adds	r3, #1
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d3e9      	bcc.n	800480e <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 800483a:	697b      	ldr	r3, [r7, #20]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	240051d4 	.word	0x240051d4

08004848 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	e014      	b.n	800488e <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8004864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff ff66 	bl	8004740 <ST7735_DrawHLine>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 800487a:	f04f 33ff 	mov.w	r3, #4294967295
 800487e:	61fb      	str	r3, [r7, #28]
      break;
 8004880:	e009      	b.n	8004896 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	3301      	adds	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	3301      	adds	r3, #1
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	429a      	cmp	r2, r3
 8004894:	d3e6      	bcc.n	8004864 <ST7735_FillRect+0x1c>
  }

  return ret;
 8004896:	69fb      	ldr	r3, [r7, #28]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	8a7b      	ldrh	r3, [r7, #18]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 80048ca:	4b16      	ldr	r3, [pc, #88]	; (8004924 <ST7735_SetPixel+0x84>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d204      	bcs.n	80048de <ST7735_SetPixel+0x3e>
 80048d4:	4b13      	ldr	r3, [pc, #76]	; (8004924 <ST7735_SetPixel+0x84>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d303      	bcc.n	80048e6 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e019      	b.n	800491a <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff fcf8 	bl	80042e0 <ST7735_SetCursor>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 80048f6:	f04f 33ff 	mov.w	r3, #4294967295
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e00d      	b.n	800491a <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3320      	adds	r3, #32
 8004902:	f107 0112 	add.w	r1, r7, #18
 8004906:	2202      	movs	r2, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fa14 	bl	8004d36 <st7735_send_data>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8004914:	f04f 33ff 	mov.w	r3, #4294967295
 8004918:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800491a:	697b      	ldr	r3, [r7, #20]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	240051d4 	.word	0x240051d4

08004928 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff fcd0 	bl	80042e0 <ST7735_SetCursor>
 8004940:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3320      	adds	r3, #32
 8004946:	f107 0211 	add.w	r2, r7, #17
 800494a:	212e      	movs	r1, #46	; 0x2e
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f9ca 	bl	8004ce6 <st7735_read_reg>
 8004952:	4602      	mov	r2, r0
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4413      	add	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3320      	adds	r3, #32
 800495e:	f107 0111 	add.w	r1, r7, #17
 8004962:	2201      	movs	r2, #1
 8004964:	4618      	mov	r0, r3
 8004966:	f000 f9f8 	bl	8004d5a <st7735_recv_data>
 800496a:	4602      	mov	r2, r0
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4413      	add	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3320      	adds	r3, #32
 8004976:	f107 0113 	add.w	r1, r7, #19
 800497a:	2201      	movs	r2, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f9ec 	bl	8004d5a <st7735_recv_data>
 8004982:	4602      	mov	r2, r0
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	4413      	add	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3320      	adds	r3, #32
 800498e:	f107 0112 	add.w	r1, r7, #18
 8004992:	2201      	movs	r2, #1
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f9e0 	bl	8004d5a <st7735_recv_data>
 800499a:	4602      	mov	r2, r0
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4413      	add	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 80049a2:	7cfb      	ldrb	r3, [r7, #19]
 80049a4:	461a      	mov	r2, r3
 80049a6:	7cbb      	ldrb	r3, [r7, #18]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	441a      	add	r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ba:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80049bc:	697b      	ldr	r3, [r7, #20]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <ST7735_GetXSize+0x20>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	240051d4 	.word	0x240051d4

080049ec <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <ST7735_GetYSize+0x20>)
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	240051d4 	.word	0x240051d4

08004a10 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8004a1e:	4b7d      	ldr	r3, [pc, #500]	; (8004c14 <ST7735_SetDisplayWindow+0x204>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d821      	bhi.n	8004a6a <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8004a26:	4b7b      	ldr	r3, [pc, #492]	; (8004c14 <ST7735_SetDisplayWindow+0x204>)
 8004a28:	7b5b      	ldrb	r3, [r3, #13]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d10e      	bne.n	8004a4c <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8004a2e:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <ST7735_SetDisplayWindow+0x204>)
 8004a30:	7b1b      	ldrb	r3, [r3, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	331a      	adds	r3, #26
 8004a3a:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	e036      	b.n	8004ab2 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	3318      	adds	r3, #24
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	e032      	b.n	8004ab2 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8004a4c:	4b71      	ldr	r3, [pc, #452]	; (8004c14 <ST7735_SetDisplayWindow+0x204>)
 8004a4e:	7b5b      	ldrb	r3, [r3, #13]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d12e      	bne.n	8004ab2 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004a54:	4b6f      	ldr	r3, [pc, #444]	; (8004c14 <ST7735_SetDisplayWindow+0x204>)
 8004a56:	7b1b      	ldrb	r3, [r3, #12]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d12a      	bne.n	8004ab2 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	3302      	adds	r3, #2
 8004a60:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3301      	adds	r3, #1
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	e023      	b.n	8004ab2 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8004a6a:	4b6a      	ldr	r3, [pc, #424]	; (8004c14 <ST7735_SetDisplayWindow+0x204>)
 8004a6c:	7b5b      	ldrb	r3, [r3, #13]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d111      	bne.n	8004a96 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8004a72:	4b68      	ldr	r3, [pc, #416]	; (8004c14 <ST7735_SetDisplayWindow+0x204>)
 8004a74:	7b1b      	ldrb	r3, [r3, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	331a      	adds	r3, #26
 8004a84:	607b      	str	r3, [r7, #4]
 8004a86:	e014      	b.n	8004ab2 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3318      	adds	r3, #24
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	e00d      	b.n	8004ab2 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8004a96:	4b5f      	ldr	r3, [pc, #380]	; (8004c14 <ST7735_SetDisplayWindow+0x204>)
 8004a98:	7b5b      	ldrb	r3, [r3, #13]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d109      	bne.n	8004ab2 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8004a9e:	4b5d      	ldr	r3, [pc, #372]	; (8004c14 <ST7735_SetDisplayWindow+0x204>)
 8004aa0:	7b1b      	ldrb	r3, [r3, #12]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d105      	bne.n	8004ab2 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3302      	adds	r3, #2
 8004ab0:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f103 0020 	add.w	r0, r3, #32
 8004ab8:	f107 0213 	add.w	r2, r7, #19
 8004abc:	2300      	movs	r3, #0
 8004abe:	212a      	movs	r1, #42	; 0x2a
 8004ac0:	f000 f924 	bl	8004d0c <st7735_write_reg>
 8004ac4:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3320      	adds	r3, #32
 8004ad2:	f107 0113 	add.w	r1, r7, #19
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 f92c 	bl	8004d36 <st7735_send_data>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3320      	adds	r3, #32
 8004af0:	f107 0113 	add.w	r1, r7, #19
 8004af4:	2201      	movs	r2, #1
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f91d 	bl	8004d36 <st7735_send_data>
 8004afc:	4602      	mov	r2, r0
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	4413      	add	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	4413      	add	r3, r2
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3320      	adds	r3, #32
 8004b16:	f107 0113 	add.w	r1, r7, #19
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 f90a 	bl	8004d36 <st7735_send_data>
 8004b22:	4602      	mov	r2, r0
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	4413      	add	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	4413      	add	r3, r2
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3320      	adds	r3, #32
 8004b40:	f107 0113 	add.w	r1, r7, #19
 8004b44:	2201      	movs	r2, #1
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f8f5 	bl	8004d36 <st7735_send_data>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	4413      	add	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f103 0020 	add.w	r0, r3, #32
 8004b5a:	f107 0213 	add.w	r2, r7, #19
 8004b5e:	2300      	movs	r3, #0
 8004b60:	212b      	movs	r1, #43	; 0x2b
 8004b62:	f000 f8d3 	bl	8004d0c <st7735_write_reg>
 8004b66:	4602      	mov	r2, r0
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0a1b      	lsrs	r3, r3, #8
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3320      	adds	r3, #32
 8004b7a:	f107 0113 	add.w	r1, r7, #19
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 f8d8 	bl	8004d36 <st7735_send_data>
 8004b86:	4602      	mov	r2, r0
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3320      	adds	r3, #32
 8004b98:	f107 0113 	add.w	r1, r7, #19
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f8c9 	bl	8004d36 <st7735_send_data>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	4413      	add	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3320      	adds	r3, #32
 8004bbe:	f107 0113 	add.w	r1, r7, #19
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f8b6 	bl	8004d36 <st7735_send_data>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	4413      	add	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3320      	adds	r3, #32
 8004be8:	f107 0113 	add.w	r1, r7, #19
 8004bec:	2201      	movs	r2, #1
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f8a1 	bl	8004d36 <st7735_send_data>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295
 8004c06:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004c08:	697b      	ldr	r3, [r7, #20]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	240051d4 	.word	0x240051d4

08004c18 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	460b      	mov	r3, r1
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	7afa      	ldrb	r2, [r7, #11]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4610      	mov	r0, r2
 8004c34:	4798      	blx	r3
 8004c36:	4603      	mov	r3, r0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	7af8      	ldrb	r0, [r7, #11]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4798      	blx	r3
 8004c60:	4603      	mov	r3, r0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	68b8      	ldr	r0, [r7, #8]
 8004c82:	4798      	blx	r3
 8004c84:	4603      	mov	r3, r0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b086      	sub	sp, #24
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	68b8      	ldr	r0, [r7, #8]
 8004ca6:	4798      	blx	r3
 8004ca8:	4603      	mov	r3, r0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	4798      	blx	r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004cc6:	bf00      	nop
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4798      	blx	r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d8f5      	bhi.n	8004cc8 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	6910      	ldr	r0, [r2, #16]
 8004cfc:	7af9      	ldrb	r1, [r7, #11]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4798      	blx	r3
 8004d02:	4603      	mov	r3, r0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681c      	ldr	r4, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6918      	ldr	r0, [r3, #16]
 8004d24:	7af9      	ldrb	r1, [r7, #11]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	47a0      	blx	r4
 8004d2c:	4603      	mov	r3, r0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd90      	pop	{r4, r7, pc}

08004d36 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	6910      	ldr	r0, [r2, #16]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4798      	blx	r3
 8004d50:	4603      	mov	r3, r0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	6910      	ldr	r0, [r2, #16]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4798      	blx	r3
 8004d74:	4603      	mov	r3, r0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d86:	2003      	movs	r0, #3
 8004d88:	f001 f9e1 	bl	800614e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d8c:	f004 fabc 	bl	8009308 <HAL_RCC_GetSysClockFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <HAL_Init+0x68>)
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	0a1b      	lsrs	r3, r3, #8
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	4913      	ldr	r1, [pc, #76]	; (8004dec <HAL_Init+0x6c>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
 8004da8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <HAL_Init+0x68>)
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	4a0e      	ldr	r2, [pc, #56]	; (8004dec <HAL_Init+0x6c>)
 8004db4:	5cd3      	ldrb	r3, [r2, r3]
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc0:	4a0b      	ldr	r2, [pc, #44]	; (8004df0 <HAL_Init+0x70>)
 8004dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dc4:	4a0b      	ldr	r2, [pc, #44]	; (8004df4 <HAL_Init+0x74>)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004dca:	200f      	movs	r0, #15
 8004dcc:	f7fd fb06 	bl	80023dc <HAL_InitTick>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e002      	b.n	8004de0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004dda:	f7fd fae1 	bl	80023a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	58024400 	.word	0x58024400
 8004dec:	080183e0 	.word	0x080183e0
 8004df0:	24000048 	.word	0x24000048
 8004df4:	24000044 	.word	0x24000044

08004df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <HAL_IncTick+0x20>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_IncTick+0x24>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4413      	add	r3, r2
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <HAL_IncTick+0x24>)
 8004e0a:	6013      	str	r3, [r2, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	240000e0 	.word	0x240000e0
 8004e1c:	240051e4 	.word	0x240051e4

08004e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return uwTick;
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <HAL_GetTick+0x14>)
 8004e26:	681b      	ldr	r3, [r3, #0]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	240051e4 	.word	0x240051e4

08004e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e40:	f7ff ffee 	bl	8004e20 <HAL_GetTick>
 8004e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d005      	beq.n	8004e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <HAL_Delay+0x44>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e5e:	bf00      	nop
 8004e60:	f7ff ffde 	bl	8004e20 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d8f7      	bhi.n	8004e60 <HAL_Delay+0x28>
  {
  }
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	240000e0 	.word	0x240000e0

08004e80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <HAL_GetREVID+0x14>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	0c1b      	lsrs	r3, r3, #16
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	5c001000 	.word	0x5c001000

08004e98 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <HAL_GetDEVID+0x18>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	5c001000 	.word	0x5c001000

08004eb4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	4904      	ldr	r1, [pc, #16]	; (8004edc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	58000400 	.word	0x58000400

08004ee0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	609a      	str	r2, [r3, #8]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3360      	adds	r3, #96	; 0x60
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	430b      	orrs	r3, r1
 8004f76:	431a      	orrs	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	611a      	str	r2, [r3, #16]
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b087      	sub	sp, #28
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3360      	adds	r3, #96	; 0x60
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	601a      	str	r2, [r3, #0]
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3330      	adds	r3, #48	; 0x30
 8005000:	461a      	mov	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	0a1b      	lsrs	r3, r3, #8
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	f003 030c 	and.w	r3, r3, #12
 800500c:	4413      	add	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	211f      	movs	r1, #31
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	401a      	ands	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	0e9b      	lsrs	r3, r3, #26
 8005028:	f003 011f 	and.w	r1, r3, #31
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	431a      	orrs	r2, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3314      	adds	r3, #20
 8005058:	461a      	mov	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	0e5b      	lsrs	r3, r3, #25
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	4413      	add	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	0d1b      	lsrs	r3, r3, #20
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	2107      	movs	r1, #7
 8005076:	fa01 f303 	lsl.w	r3, r1, r3
 800507a:	43db      	mvns	r3, r3
 800507c:	401a      	ands	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	0d1b      	lsrs	r3, r3, #20
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	431a      	orrs	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b8:	43db      	mvns	r3, r3
 80050ba:	401a      	ands	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0318 	and.w	r3, r3, #24
 80050c2:	4908      	ldr	r1, [pc, #32]	; (80050e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80050c4:	40d9      	lsrs	r1, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	400b      	ands	r3, r1
 80050ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050ce:	431a      	orrs	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	000fffff 	.word	0x000fffff

080050e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <LL_ADC_DisableDeepPowerDown+0x20>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6093      	str	r3, [r2, #8]
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	5fffffc0 	.word	0x5fffffc0

0800510c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800511c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005120:	d101      	bne.n	8005126 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <LL_ADC_EnableInternalRegulator+0x24>)
 8005142:	4013      	ands	r3, r2
 8005144:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	6fffffc0 	.word	0x6fffffc0

0800515c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005170:	d101      	bne.n	8005176 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <LL_ADC_IsEnabled+0x18>
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <LL_ADC_IsEnabled+0x1a>
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d101      	bne.n	80051c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d101      	bne.n	80051e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b089      	sub	sp, #36	; 0x24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005204:	2300      	movs	r3, #0
 8005206:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e18e      	b.n	8005530 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fb fbef 	bl	8000a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff67 	bl	800510c <LL_ADC_IsDeepPowerDownEnabled>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d004      	beq.n	800524e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff ff4d 	bl	80050e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff ff82 	bl	800515c <LL_ADC_IsInternalRegulatorEnabled>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d114      	bne.n	8005288 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff66 	bl	8005134 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005268:	4b9a      	ldr	r3, [pc, #616]	; (80054d4 <HAL_ADC_Init+0x2dc>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	099b      	lsrs	r3, r3, #6
 800526e:	4a9a      	ldr	r2, [pc, #616]	; (80054d8 <HAL_ADC_Init+0x2e0>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	099b      	lsrs	r3, r3, #6
 8005276:	3301      	adds	r3, #1
 8005278:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800527a:	e002      	b.n	8005282 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	3b01      	subs	r3, #1
 8005280:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f9      	bne.n	800527c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff ff65 	bl	800515c <LL_ADC_IsInternalRegulatorEnabled>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10d      	bne.n	80052b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529c:	f043 0210 	orr.w	r2, r3, #16
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	f043 0201 	orr.w	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff ff76 	bl	80051aa <LL_ADC_REG_IsConversionOngoing>
 80052be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f040 8128 	bne.w	800551e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f040 8124 	bne.w	800551e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80052de:	f043 0202 	orr.w	r2, r3, #2
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff ff4a 	bl	8005184 <LL_ADC_IsEnabled>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d136      	bne.n	8005364 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a78      	ldr	r2, [pc, #480]	; (80054dc <HAL_ADC_Init+0x2e4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_ADC_Init+0x112>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a76      	ldr	r2, [pc, #472]	; (80054e0 <HAL_ADC_Init+0x2e8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10e      	bne.n	8005328 <HAL_ADC_Init+0x130>
 800530a:	4874      	ldr	r0, [pc, #464]	; (80054dc <HAL_ADC_Init+0x2e4>)
 800530c:	f7ff ff3a 	bl	8005184 <LL_ADC_IsEnabled>
 8005310:	4604      	mov	r4, r0
 8005312:	4873      	ldr	r0, [pc, #460]	; (80054e0 <HAL_ADC_Init+0x2e8>)
 8005314:	f7ff ff36 	bl	8005184 <LL_ADC_IsEnabled>
 8005318:	4603      	mov	r3, r0
 800531a:	4323      	orrs	r3, r4
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e008      	b.n	800533a <HAL_ADC_Init+0x142>
 8005328:	486e      	ldr	r0, [pc, #440]	; (80054e4 <HAL_ADC_Init+0x2ec>)
 800532a:	f7ff ff2b 	bl	8005184 <LL_ADC_IsEnabled>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a66      	ldr	r2, [pc, #408]	; (80054dc <HAL_ADC_Init+0x2e4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_ADC_Init+0x15a>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a64      	ldr	r2, [pc, #400]	; (80054e0 <HAL_ADC_Init+0x2e8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d101      	bne.n	8005356 <HAL_ADC_Init+0x15e>
 8005352:	4a65      	ldr	r2, [pc, #404]	; (80054e8 <HAL_ADC_Init+0x2f0>)
 8005354:	e000      	b.n	8005358 <HAL_ADC_Init+0x160>
 8005356:	4a65      	ldr	r2, [pc, #404]	; (80054ec <HAL_ADC_Init+0x2f4>)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7ff fdbe 	bl	8004ee0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005364:	f7ff fd8c 	bl	8004e80 <HAL_GetREVID>
 8005368:	4603      	mov	r3, r0
 800536a:	f241 0203 	movw	r2, #4099	; 0x1003
 800536e:	4293      	cmp	r3, r2
 8005370:	d914      	bls.n	800539c <HAL_ADC_Init+0x1a4>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b10      	cmp	r3, #16
 8005378:	d110      	bne.n	800539c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	7d5b      	ldrb	r3, [r3, #21]
 800537e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005384:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800538a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7f1b      	ldrb	r3, [r3, #28]
 8005390:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005392:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005394:	f043 030c 	orr.w	r3, r3, #12
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	e00d      	b.n	80053b8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	7d5b      	ldrb	r3, [r3, #21]
 80053a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80053ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	7f1b      	ldrb	r3, [r3, #28]
 80053b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80053b4:	4313      	orrs	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	7f1b      	ldrb	r3, [r3, #28]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d106      	bne.n	80053ce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	045b      	lsls	r3, r3, #17
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	4b3f      	ldr	r3, [pc, #252]	; (80054f0 <HAL_ADC_Init+0x2f8>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	69b9      	ldr	r1, [r7, #24]
 80053fa:	430b      	orrs	r3, r1
 80053fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fed1 	bl	80051aa <LL_ADC_REG_IsConversionOngoing>
 8005408:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fede 	bl	80051d0 <LL_ADC_INJ_IsConversionOngoing>
 8005414:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d14a      	bne.n	80054b2 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d147      	bne.n	80054b2 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7d1b      	ldrb	r3, [r3, #20]
 8005426:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800542c:	4313      	orrs	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	4b2f      	ldr	r3, [pc, #188]	; (80054f4 <HAL_ADC_Init+0x2fc>)
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	69b9      	ldr	r1, [r7, #24]
 8005440:	430b      	orrs	r3, r1
 8005442:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800544a:	2b01      	cmp	r3, #1
 800544c:	d11b      	bne.n	8005486 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <HAL_ADC_Init+0x300>)
 800545c:	4013      	ands	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005462:	3a01      	subs	r2, #1
 8005464:	0411      	lsls	r1, r2, #16
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800546a:	4311      	orrs	r1, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005470:	4311      	orrs	r1, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005476:	430a      	orrs	r2, r1
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	611a      	str	r2, [r3, #16]
 8005484:	e007      	b.n	8005496 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0201 	bic.w	r2, r2, #1
 8005494:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb93 	bl	8005bd8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d120      	bne.n	80054fc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	f023 010f 	bic.w	r1, r3, #15
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
 80054d2:	e01b      	b.n	800550c <HAL_ADC_Init+0x314>
 80054d4:	24000044 	.word	0x24000044
 80054d8:	053e2d63 	.word	0x053e2d63
 80054dc:	40022000 	.word	0x40022000
 80054e0:	40022100 	.word	0x40022100
 80054e4:	58026000 	.word	0x58026000
 80054e8:	40022300 	.word	0x40022300
 80054ec:	58026300 	.word	0x58026300
 80054f0:	fff0c003 	.word	0xfff0c003
 80054f4:	ffffbffc 	.word	0xffffbffc
 80054f8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 020f 	bic.w	r2, r2, #15
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	f023 0303 	bic.w	r3, r3, #3
 8005514:	f043 0201 	orr.w	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	655a      	str	r2, [r3, #84]	; 0x54
 800551c:	e007      	b.n	800552e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	f043 0210 	orr.w	r2, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800552e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3724      	adds	r7, #36	; 0x24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd90      	pop	{r4, r7, pc}

08005538 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b0a1      	sub	sp, #132	; 0x84
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a9d      	ldr	r2, [pc, #628]	; (80057c8 <HAL_ADC_ConfigChannel+0x290>)
 8005552:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_ADC_ConfigChannel+0x2a>
 800555e:	2302      	movs	r3, #2
 8005560:	e321      	b.n	8005ba6 <HAL_ADC_ConfigChannel+0x66e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff fe1b 	bl	80051aa <LL_ADC_REG_IsConversionOngoing>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 8306 	bne.w	8005b88 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005584:	2b00      	cmp	r3, #0
 8005586:	d108      	bne.n	800559a <HAL_ADC_ConfigChannel+0x62>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	0e9b      	lsrs	r3, r3, #26
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	2201      	movs	r2, #1
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	e016      	b.n	80055c8 <HAL_ADC_ConfigChannel+0x90>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a2:	fa93 f3a3 	rbit	r3, r3
 80055a6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80055a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055aa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80055ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80055b2:	2320      	movs	r3, #32
 80055b4:	e003      	b.n	80055be <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80055b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055b8:	fab3 f383 	clz	r3, r3
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2201      	movs	r2, #1
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	69d1      	ldr	r1, [r2, #28]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	430b      	orrs	r3, r1
 80055d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6859      	ldr	r1, [r3, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f7ff fd04 	bl	8004ff0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fddc 	bl	80051aa <LL_ADC_REG_IsConversionOngoing>
 80055f2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff fde9 	bl	80051d0 <LL_ADC_INJ_IsConversionOngoing>
 80055fe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 80b3 	bne.w	800576e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 80af 	bne.w	800576e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	6819      	ldr	r1, [r3, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	461a      	mov	r2, r3
 800561e:	f7ff fd13 	bl	8005048 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005622:	4b6a      	ldr	r3, [pc, #424]	; (80057cc <HAL_ADC_ConfigChannel+0x294>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800562a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562e:	d10b      	bne.n	8005648 <HAL_ADC_ConfigChannel+0x110>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	089b      	lsrs	r3, r3, #2
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	e01d      	b.n	8005684 <HAL_ADC_ConfigChannel+0x14c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0310 	and.w	r3, r3, #16
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <HAL_ADC_ConfigChannel+0x136>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	089b      	lsrs	r3, r3, #2
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	e00a      	b.n	8005684 <HAL_ADC_ConfigChannel+0x14c>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695a      	ldr	r2, [r3, #20]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	089b      	lsrs	r3, r3, #2
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b04      	cmp	r3, #4
 800568c:	d027      	beq.n	80056de <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6919      	ldr	r1, [r3, #16]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800569c:	f7ff fc54 	bl	8004f48 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6919      	ldr	r1, [r3, #16]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	7e5b      	ldrb	r3, [r3, #25]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d102      	bne.n	80056b6 <HAL_ADC_ConfigChannel+0x17e>
 80056b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056b4:	e000      	b.n	80056b8 <HAL_ADC_ConfigChannel+0x180>
 80056b6:	2300      	movs	r3, #0
 80056b8:	461a      	mov	r2, r3
 80056ba:	f7ff fc7e 	bl	8004fba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6919      	ldr	r1, [r3, #16]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	7e1b      	ldrb	r3, [r3, #24]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d102      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x19c>
 80056ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056d2:	e000      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x19e>
 80056d4:	2300      	movs	r3, #0
 80056d6:	461a      	mov	r2, r3
 80056d8:	f7ff fc56 	bl	8004f88 <LL_ADC_SetDataRightShift>
 80056dc:	e047      	b.n	800576e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	069b      	lsls	r3, r3, #26
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d107      	bne.n	8005702 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005700:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005708:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	069b      	lsls	r3, r3, #26
 8005712:	429a      	cmp	r2, r3
 8005714:	d107      	bne.n	8005726 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005724:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800572c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	069b      	lsls	r3, r3, #26
 8005736:	429a      	cmp	r2, r3
 8005738:	d107      	bne.n	800574a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005748:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005750:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	069b      	lsls	r3, r3, #26
 800575a:	429a      	cmp	r2, r3
 800575c:	d107      	bne.n	800576e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800576c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fd06 	bl	8005184 <LL_ADC_IsEnabled>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 820d 	bne.w	8005b9a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	6819      	ldr	r1, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	461a      	mov	r2, r3
 800578e:	f7ff fc87 	bl	80050a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	4a0c      	ldr	r2, [pc, #48]	; (80057c8 <HAL_ADC_ConfigChannel+0x290>)
 8005798:	4293      	cmp	r3, r2
 800579a:	f040 8133 	bne.w	8005a04 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d110      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x298>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	0e9b      	lsrs	r3, r3, #26
 80057b4:	3301      	adds	r3, #1
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	2b09      	cmp	r3, #9
 80057bc:	bf94      	ite	ls
 80057be:	2301      	movls	r3, #1
 80057c0:	2300      	movhi	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	e01e      	b.n	8005804 <HAL_ADC_ConfigChannel+0x2cc>
 80057c6:	bf00      	nop
 80057c8:	47ff0000 	.word	0x47ff0000
 80057cc:	5c001000 	.word	0x5c001000
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057d8:	fa93 f3a3 	rbit	r3, r3
 80057dc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80057de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80057e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80057e8:	2320      	movs	r3, #32
 80057ea:	e003      	b.n	80057f4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80057ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ee:	fab3 f383 	clz	r3, r3
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	3301      	adds	r3, #1
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2b09      	cmp	r3, #9
 80057fc:	bf94      	ite	ls
 80057fe:	2301      	movls	r3, #1
 8005800:	2300      	movhi	r3, #0
 8005802:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005804:	2b00      	cmp	r3, #0
 8005806:	d079      	beq.n	80058fc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <HAL_ADC_ConfigChannel+0x2ec>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	0e9b      	lsrs	r3, r3, #26
 800581a:	3301      	adds	r3, #1
 800581c:	069b      	lsls	r3, r3, #26
 800581e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005822:	e015      	b.n	8005850 <HAL_ADC_ConfigChannel+0x318>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582c:	fa93 f3a3 	rbit	r3, r3
 8005830:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005834:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800583c:	2320      	movs	r3, #32
 800583e:	e003      	b.n	8005848 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005842:	fab3 f383 	clz	r3, r3
 8005846:	b2db      	uxtb	r3, r3
 8005848:	3301      	adds	r3, #1
 800584a:	069b      	lsls	r3, r3, #26
 800584c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005858:	2b00      	cmp	r3, #0
 800585a:	d109      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x338>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	0e9b      	lsrs	r3, r3, #26
 8005862:	3301      	adds	r3, #1
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	2101      	movs	r1, #1
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	e017      	b.n	80058a0 <HAL_ADC_ConfigChannel+0x368>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005878:	fa93 f3a3 	rbit	r3, r3
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800587e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005880:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005888:	2320      	movs	r3, #32
 800588a:	e003      	b.n	8005894 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800588c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588e:	fab3 f383 	clz	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	3301      	adds	r3, #1
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	2101      	movs	r1, #1
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	ea42 0103 	orr.w	r1, r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <HAL_ADC_ConfigChannel+0x38e>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	0e9b      	lsrs	r3, r3, #26
 80058b6:	3301      	adds	r3, #1
 80058b8:	f003 021f 	and.w	r2, r3, #31
 80058bc:	4613      	mov	r3, r2
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	4413      	add	r3, r2
 80058c2:	051b      	lsls	r3, r3, #20
 80058c4:	e018      	b.n	80058f8 <HAL_ADC_ConfigChannel+0x3c0>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	fa93 f3a3 	rbit	r3, r3
 80058d2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80058de:	2320      	movs	r3, #32
 80058e0:	e003      	b.n	80058ea <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	fab3 f383 	clz	r3, r3
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	3301      	adds	r3, #1
 80058ec:	f003 021f 	and.w	r2, r3, #31
 80058f0:	4613      	mov	r3, r2
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	4413      	add	r3, r2
 80058f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058f8:	430b      	orrs	r3, r1
 80058fa:	e07e      	b.n	80059fa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005904:	2b00      	cmp	r3, #0
 8005906:	d107      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x3e0>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	0e9b      	lsrs	r3, r3, #26
 800590e:	3301      	adds	r3, #1
 8005910:	069b      	lsls	r3, r3, #26
 8005912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005916:	e015      	b.n	8005944 <HAL_ADC_ConfigChannel+0x40c>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	fa93 f3a3 	rbit	r3, r3
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005930:	2320      	movs	r3, #32
 8005932:	e003      	b.n	800593c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	fab3 f383 	clz	r3, r3
 800593a:	b2db      	uxtb	r3, r3
 800593c:	3301      	adds	r3, #1
 800593e:	069b      	lsls	r3, r3, #26
 8005940:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <HAL_ADC_ConfigChannel+0x42c>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	0e9b      	lsrs	r3, r3, #26
 8005956:	3301      	adds	r3, #1
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	2101      	movs	r1, #1
 800595e:	fa01 f303 	lsl.w	r3, r1, r3
 8005962:	e017      	b.n	8005994 <HAL_ADC_ConfigChannel+0x45c>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	fa93 f3a3 	rbit	r3, r3
 8005970:	61bb      	str	r3, [r7, #24]
  return result;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800597c:	2320      	movs	r3, #32
 800597e:	e003      	b.n	8005988 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	fab3 f383 	clz	r3, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	3301      	adds	r3, #1
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2101      	movs	r1, #1
 8005990:	fa01 f303 	lsl.w	r3, r1, r3
 8005994:	ea42 0103 	orr.w	r1, r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10d      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x488>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	0e9b      	lsrs	r3, r3, #26
 80059aa:	3301      	adds	r3, #1
 80059ac:	f003 021f 	and.w	r2, r3, #31
 80059b0:	4613      	mov	r3, r2
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	4413      	add	r3, r2
 80059b6:	3b1e      	subs	r3, #30
 80059b8:	051b      	lsls	r3, r3, #20
 80059ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059be:	e01b      	b.n	80059f8 <HAL_ADC_ConfigChannel+0x4c0>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	fa93 f3a3 	rbit	r3, r3
 80059cc:	60fb      	str	r3, [r7, #12]
  return result;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80059d8:	2320      	movs	r3, #32
 80059da:	e003      	b.n	80059e4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	fab3 f383 	clz	r3, r3
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	3301      	adds	r3, #1
 80059e6:	f003 021f 	and.w	r2, r3, #31
 80059ea:	4613      	mov	r3, r2
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	4413      	add	r3, r2
 80059f0:	3b1e      	subs	r3, #30
 80059f2:	051b      	lsls	r3, r3, #20
 80059f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059f8:	430b      	orrs	r3, r1
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	6892      	ldr	r2, [r2, #8]
 80059fe:	4619      	mov	r1, r3
 8005a00:	f7ff fb22 	bl	8005048 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f280 80c6 	bge.w	8005b9a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a67      	ldr	r2, [pc, #412]	; (8005bb0 <HAL_ADC_ConfigChannel+0x678>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_ADC_ConfigChannel+0x4ea>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a65      	ldr	r2, [pc, #404]	; (8005bb4 <HAL_ADC_ConfigChannel+0x67c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d101      	bne.n	8005a26 <HAL_ADC_ConfigChannel+0x4ee>
 8005a22:	4b65      	ldr	r3, [pc, #404]	; (8005bb8 <HAL_ADC_ConfigChannel+0x680>)
 8005a24:	e000      	b.n	8005a28 <HAL_ADC_ConfigChannel+0x4f0>
 8005a26:	4b65      	ldr	r3, [pc, #404]	; (8005bbc <HAL_ADC_ConfigChannel+0x684>)
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fa7f 	bl	8004f2c <LL_ADC_GetCommonPathInternalCh>
 8005a2e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a5e      	ldr	r2, [pc, #376]	; (8005bb0 <HAL_ADC_ConfigChannel+0x678>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_ADC_ConfigChannel+0x50c>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a5d      	ldr	r2, [pc, #372]	; (8005bb4 <HAL_ADC_ConfigChannel+0x67c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d10e      	bne.n	8005a62 <HAL_ADC_ConfigChannel+0x52a>
 8005a44:	485a      	ldr	r0, [pc, #360]	; (8005bb0 <HAL_ADC_ConfigChannel+0x678>)
 8005a46:	f7ff fb9d 	bl	8005184 <LL_ADC_IsEnabled>
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4859      	ldr	r0, [pc, #356]	; (8005bb4 <HAL_ADC_ConfigChannel+0x67c>)
 8005a4e:	f7ff fb99 	bl	8005184 <LL_ADC_IsEnabled>
 8005a52:	4603      	mov	r3, r0
 8005a54:	4323      	orrs	r3, r4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bf0c      	ite	eq
 8005a5a:	2301      	moveq	r3, #1
 8005a5c:	2300      	movne	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	e008      	b.n	8005a74 <HAL_ADC_ConfigChannel+0x53c>
 8005a62:	4857      	ldr	r0, [pc, #348]	; (8005bc0 <HAL_ADC_ConfigChannel+0x688>)
 8005a64:	f7ff fb8e 	bl	8005184 <LL_ADC_IsEnabled>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bf0c      	ite	eq
 8005a6e:	2301      	moveq	r3, #1
 8005a70:	2300      	movne	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d07d      	beq.n	8005b74 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a51      	ldr	r2, [pc, #324]	; (8005bc4 <HAL_ADC_ConfigChannel+0x68c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d130      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x5ac>
 8005a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d12b      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a4b      	ldr	r2, [pc, #300]	; (8005bc0 <HAL_ADC_ConfigChannel+0x688>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	f040 8081 	bne.w	8005b9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a44      	ldr	r2, [pc, #272]	; (8005bb0 <HAL_ADC_ConfigChannel+0x678>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <HAL_ADC_ConfigChannel+0x574>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a43      	ldr	r2, [pc, #268]	; (8005bb4 <HAL_ADC_ConfigChannel+0x67c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d101      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x578>
 8005aac:	4a42      	ldr	r2, [pc, #264]	; (8005bb8 <HAL_ADC_ConfigChannel+0x680>)
 8005aae:	e000      	b.n	8005ab2 <HAL_ADC_ConfigChannel+0x57a>
 8005ab0:	4a42      	ldr	r2, [pc, #264]	; (8005bbc <HAL_ADC_ConfigChannel+0x684>)
 8005ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f7ff fa23 	bl	8004f06 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ac0:	4b41      	ldr	r3, [pc, #260]	; (8005bc8 <HAL_ADC_ConfigChannel+0x690>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	099b      	lsrs	r3, r3, #6
 8005ac6:	4a41      	ldr	r2, [pc, #260]	; (8005bcc <HAL_ADC_ConfigChannel+0x694>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	099b      	lsrs	r3, r3, #6
 8005ace:	3301      	adds	r3, #1
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005ad4:	e002      	b.n	8005adc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f9      	bne.n	8005ad6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ae2:	e05a      	b.n	8005b9a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a39      	ldr	r2, [pc, #228]	; (8005bd0 <HAL_ADC_ConfigChannel+0x698>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d11e      	bne.n	8005b2c <HAL_ADC_ConfigChannel+0x5f4>
 8005aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d119      	bne.n	8005b2c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a30      	ldr	r2, [pc, #192]	; (8005bc0 <HAL_ADC_ConfigChannel+0x688>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d14b      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2a      	ldr	r2, [pc, #168]	; (8005bb0 <HAL_ADC_ConfigChannel+0x678>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d004      	beq.n	8005b16 <HAL_ADC_ConfigChannel+0x5de>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a28      	ldr	r2, [pc, #160]	; (8005bb4 <HAL_ADC_ConfigChannel+0x67c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d101      	bne.n	8005b1a <HAL_ADC_ConfigChannel+0x5e2>
 8005b16:	4a28      	ldr	r2, [pc, #160]	; (8005bb8 <HAL_ADC_ConfigChannel+0x680>)
 8005b18:	e000      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x5e4>
 8005b1a:	4a28      	ldr	r2, [pc, #160]	; (8005bbc <HAL_ADC_ConfigChannel+0x684>)
 8005b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f7ff f9ee 	bl	8004f06 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b2a:	e036      	b.n	8005b9a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a28      	ldr	r2, [pc, #160]	; (8005bd4 <HAL_ADC_ConfigChannel+0x69c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d131      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x662>
 8005b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d12c      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <HAL_ADC_ConfigChannel+0x688>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d127      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_ADC_ConfigChannel+0x678>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <HAL_ADC_ConfigChannel+0x626>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <HAL_ADC_ConfigChannel+0x67c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x62a>
 8005b5e:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <HAL_ADC_ConfigChannel+0x680>)
 8005b60:	e000      	b.n	8005b64 <HAL_ADC_ConfigChannel+0x62c>
 8005b62:	4a16      	ldr	r2, [pc, #88]	; (8005bbc <HAL_ADC_ConfigChannel+0x684>)
 8005b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f7ff f9ca 	bl	8004f06 <LL_ADC_SetCommonPathInternalCh>
 8005b72:	e012      	b.n	8005b9a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	f043 0220 	orr.w	r2, r3, #32
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005b86:	e008      	b.n	8005b9a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005ba2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3784      	adds	r7, #132	; 0x84
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd90      	pop	{r4, r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40022000 	.word	0x40022000
 8005bb4:	40022100 	.word	0x40022100
 8005bb8:	40022300 	.word	0x40022300
 8005bbc:	58026300 	.word	0x58026300
 8005bc0:	58026000 	.word	0x58026000
 8005bc4:	cb840000 	.word	0xcb840000
 8005bc8:	24000044 	.word	0x24000044
 8005bcc:	053e2d63 	.word	0x053e2d63
 8005bd0:	c7520000 	.word	0xc7520000
 8005bd4:	cfb80000 	.word	0xcfb80000

08005bd8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a79      	ldr	r2, [pc, #484]	; (8005dcc <ADC_ConfigureBoostMode+0x1f4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d004      	beq.n	8005bf4 <ADC_ConfigureBoostMode+0x1c>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a78      	ldr	r2, [pc, #480]	; (8005dd0 <ADC_ConfigureBoostMode+0x1f8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d109      	bne.n	8005c08 <ADC_ConfigureBoostMode+0x30>
 8005bf4:	4b77      	ldr	r3, [pc, #476]	; (8005dd4 <ADC_ConfigureBoostMode+0x1fc>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf14      	ite	ne
 8005c00:	2301      	movne	r3, #1
 8005c02:	2300      	moveq	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e008      	b.n	8005c1a <ADC_ConfigureBoostMode+0x42>
 8005c08:	4b73      	ldr	r3, [pc, #460]	; (8005dd8 <ADC_ConfigureBoostMode+0x200>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	bf14      	ite	ne
 8005c14:	2301      	movne	r3, #1
 8005c16:	2300      	moveq	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01c      	beq.n	8005c58 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005c1e:	f003 fced 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 8005c22:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c2c:	d010      	beq.n	8005c50 <ADC_ConfigureBoostMode+0x78>
 8005c2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c32:	d871      	bhi.n	8005d18 <ADC_ConfigureBoostMode+0x140>
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d002      	beq.n	8005c40 <ADC_ConfigureBoostMode+0x68>
 8005c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c3e:	d16b      	bne.n	8005d18 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	0c1b      	lsrs	r3, r3, #16
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	60fb      	str	r3, [r7, #12]
        break;
 8005c4e:	e066      	b.n	8005d1e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	089b      	lsrs	r3, r3, #2
 8005c54:	60fb      	str	r3, [r7, #12]
        break;
 8005c56:	e062      	b.n	8005d1e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005c58:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c5c:	f004 fcac 	bl	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c60:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c6a:	d051      	beq.n	8005d10 <ADC_ConfigureBoostMode+0x138>
 8005c6c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c70:	d854      	bhi.n	8005d1c <ADC_ConfigureBoostMode+0x144>
 8005c72:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c76:	d047      	beq.n	8005d08 <ADC_ConfigureBoostMode+0x130>
 8005c78:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c7c:	d84e      	bhi.n	8005d1c <ADC_ConfigureBoostMode+0x144>
 8005c7e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c82:	d03d      	beq.n	8005d00 <ADC_ConfigureBoostMode+0x128>
 8005c84:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c88:	d848      	bhi.n	8005d1c <ADC_ConfigureBoostMode+0x144>
 8005c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c8e:	d033      	beq.n	8005cf8 <ADC_ConfigureBoostMode+0x120>
 8005c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c94:	d842      	bhi.n	8005d1c <ADC_ConfigureBoostMode+0x144>
 8005c96:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c9a:	d029      	beq.n	8005cf0 <ADC_ConfigureBoostMode+0x118>
 8005c9c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005ca0:	d83c      	bhi.n	8005d1c <ADC_ConfigureBoostMode+0x144>
 8005ca2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ca6:	d01a      	beq.n	8005cde <ADC_ConfigureBoostMode+0x106>
 8005ca8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005cac:	d836      	bhi.n	8005d1c <ADC_ConfigureBoostMode+0x144>
 8005cae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005cb2:	d014      	beq.n	8005cde <ADC_ConfigureBoostMode+0x106>
 8005cb4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005cb8:	d830      	bhi.n	8005d1c <ADC_ConfigureBoostMode+0x144>
 8005cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cbe:	d00e      	beq.n	8005cde <ADC_ConfigureBoostMode+0x106>
 8005cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cc4:	d82a      	bhi.n	8005d1c <ADC_ConfigureBoostMode+0x144>
 8005cc6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cca:	d008      	beq.n	8005cde <ADC_ConfigureBoostMode+0x106>
 8005ccc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cd0:	d824      	bhi.n	8005d1c <ADC_ConfigureBoostMode+0x144>
 8005cd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cd6:	d002      	beq.n	8005cde <ADC_ConfigureBoostMode+0x106>
 8005cd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cdc:	d11e      	bne.n	8005d1c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	0c9b      	lsrs	r3, r3, #18
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	60fb      	str	r3, [r7, #12]
        break;
 8005cee:	e016      	b.n	8005d1e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	091b      	lsrs	r3, r3, #4
 8005cf4:	60fb      	str	r3, [r7, #12]
        break;
 8005cf6:	e012      	b.n	8005d1e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	60fb      	str	r3, [r7, #12]
        break;
 8005cfe:	e00e      	b.n	8005d1e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	099b      	lsrs	r3, r3, #6
 8005d04:	60fb      	str	r3, [r7, #12]
        break;
 8005d06:	e00a      	b.n	8005d1e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	09db      	lsrs	r3, r3, #7
 8005d0c:	60fb      	str	r3, [r7, #12]
        break;
 8005d0e:	e006      	b.n	8005d1e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	60fb      	str	r3, [r7, #12]
        break;
 8005d16:	e002      	b.n	8005d1e <ADC_ConfigureBoostMode+0x146>
        break;
 8005d18:	bf00      	nop
 8005d1a:	e000      	b.n	8005d1e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005d1c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005d1e:	f7ff f8af 	bl	8004e80 <HAL_GetREVID>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d815      	bhi.n	8005d58 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4a2b      	ldr	r2, [pc, #172]	; (8005ddc <ADC_ConfigureBoostMode+0x204>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d908      	bls.n	8005d46 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d42:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005d44:	e03e      	b.n	8005dc4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d54:	609a      	str	r2, [r3, #8]
}
 8005d56:	e035      	b.n	8005dc4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <ADC_ConfigureBoostMode+0x208>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d808      	bhi.n	8005d78 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d74:	609a      	str	r2, [r3, #8]
}
 8005d76:	e025      	b.n	8005dc4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	; (8005de4 <ADC_ConfigureBoostMode+0x20c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d80a      	bhi.n	8005d96 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d92:	609a      	str	r2, [r3, #8]
}
 8005d94:	e016      	b.n	8005dc4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <ADC_ConfigureBoostMode+0x210>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d80a      	bhi.n	8005db4 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db0:	609a      	str	r2, [r3, #8]
}
 8005db2:	e007      	b.n	8005dc4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005dc2:	609a      	str	r2, [r3, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40022000 	.word	0x40022000
 8005dd0:	40022100 	.word	0x40022100
 8005dd4:	40022300 	.word	0x40022300
 8005dd8:	58026300 	.word	0x58026300
 8005ddc:	01312d00 	.word	0x01312d00
 8005de0:	005f5e10 	.word	0x005f5e10
 8005de4:	00bebc20 	.word	0x00bebc20
 8005de8:	017d7840 	.word	0x017d7840

08005dec <LL_ADC_IsEnabled>:
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d101      	bne.n	8005e04 <LL_ADC_IsEnabled+0x18>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e000      	b.n	8005e06 <LL_ADC_IsEnabled+0x1a>
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <LL_ADC_REG_IsConversionOngoing>:
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d101      	bne.n	8005e2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b09f      	sub	sp, #124	; 0x7c
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e0be      	b.n	8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a5c      	ldr	r2, [pc, #368]	; (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d102      	bne.n	8005e76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e70:	4b5b      	ldr	r3, [pc, #364]	; (8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005e72:	60bb      	str	r3, [r7, #8]
 8005e74:	e001      	b.n	8005e7a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e84:	f043 0220 	orr.w	r2, r3, #32
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e09d      	b.n	8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff ffb9 	bl	8005e12 <LL_ADC_REG_IsConversionOngoing>
 8005ea0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff ffb3 	bl	8005e12 <LL_ADC_REG_IsConversionOngoing>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d17f      	bne.n	8005fb2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d17c      	bne.n	8005fb2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a47      	ldr	r2, [pc, #284]	; (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a46      	ldr	r2, [pc, #280]	; (8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d101      	bne.n	8005ed0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005ecc:	4b45      	ldr	r3, [pc, #276]	; (8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ece:	e000      	b.n	8005ed2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005ed0:	4b45      	ldr	r3, [pc, #276]	; (8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ed2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d039      	beq.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a3a      	ldr	r2, [pc, #232]	; (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a38      	ldr	r2, [pc, #224]	; (8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10e      	bne.n	8005f20 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005f02:	4836      	ldr	r0, [pc, #216]	; (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005f04:	f7ff ff72 	bl	8005dec <LL_ADC_IsEnabled>
 8005f08:	4604      	mov	r4, r0
 8005f0a:	4835      	ldr	r0, [pc, #212]	; (8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005f0c:	f7ff ff6e 	bl	8005dec <LL_ADC_IsEnabled>
 8005f10:	4603      	mov	r3, r0
 8005f12:	4323      	orrs	r3, r4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e008      	b.n	8005f32 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005f20:	4832      	ldr	r0, [pc, #200]	; (8005fec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005f22:	f7ff ff63 	bl	8005dec <LL_ADC_IsEnabled>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bf0c      	ite	eq
 8005f2c:	2301      	moveq	r3, #1
 8005f2e:	2300      	movne	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d047      	beq.n	8005fc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	4b2d      	ldr	r3, [pc, #180]	; (8005ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	6811      	ldr	r1, [r2, #0]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	6892      	ldr	r2, [r2, #8]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f4e:	e03a      	b.n	8005fc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1d      	ldr	r2, [pc, #116]	; (8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10e      	bne.n	8005f8e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005f70:	481a      	ldr	r0, [pc, #104]	; (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005f72:	f7ff ff3b 	bl	8005dec <LL_ADC_IsEnabled>
 8005f76:	4604      	mov	r4, r0
 8005f78:	4819      	ldr	r0, [pc, #100]	; (8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005f7a:	f7ff ff37 	bl	8005dec <LL_ADC_IsEnabled>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4323      	orrs	r3, r4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	e008      	b.n	8005fa0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005f8e:	4817      	ldr	r0, [pc, #92]	; (8005fec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005f90:	f7ff ff2c 	bl	8005dec <LL_ADC_IsEnabled>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bf0c      	ite	eq
 8005f9a:	2301      	moveq	r3, #1
 8005f9c:	2300      	movne	r3, #0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d010      	beq.n	8005fc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fb0:	e009      	b.n	8005fc6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb6:	f043 0220 	orr.w	r2, r3, #32
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005fc4:	e000      	b.n	8005fc8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fc6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005fd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	377c      	adds	r7, #124	; 0x7c
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd90      	pop	{r4, r7, pc}
 8005fdc:	40022000 	.word	0x40022000
 8005fe0:	40022100 	.word	0x40022100
 8005fe4:	40022300 	.word	0x40022300
 8005fe8:	58026300 	.word	0x58026300
 8005fec:	58026000 	.word	0x58026000
 8005ff0:	fffff0e0 	.word	0xfffff0e0

08005ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <__NVIC_SetPriorityGrouping+0x40>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006010:	4013      	ands	r3, r2
 8006012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800601c:	4b06      	ldr	r3, [pc, #24]	; (8006038 <__NVIC_SetPriorityGrouping+0x44>)
 800601e:	4313      	orrs	r3, r2
 8006020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006022:	4a04      	ldr	r2, [pc, #16]	; (8006034 <__NVIC_SetPriorityGrouping+0x40>)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	60d3      	str	r3, [r2, #12]
}
 8006028:	bf00      	nop
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	e000ed00 	.word	0xe000ed00
 8006038:	05fa0000 	.word	0x05fa0000

0800603c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <__NVIC_GetPriorityGrouping+0x18>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	0a1b      	lsrs	r3, r3, #8
 8006046:	f003 0307 	and.w	r3, r3, #7
}
 800604a:	4618      	mov	r0, r3
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	e000ed00 	.word	0xe000ed00

08006058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006066:	2b00      	cmp	r3, #0
 8006068:	db0b      	blt.n	8006082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	f003 021f 	and.w	r2, r3, #31
 8006070:	4907      	ldr	r1, [pc, #28]	; (8006090 <__NVIC_EnableIRQ+0x38>)
 8006072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	2001      	movs	r0, #1
 800607a:	fa00 f202 	lsl.w	r2, r0, r2
 800607e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	e000e100 	.word	0xe000e100

08006094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	6039      	str	r1, [r7, #0]
 800609e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80060a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	db0a      	blt.n	80060be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	490c      	ldr	r1, [pc, #48]	; (80060e0 <__NVIC_SetPriority+0x4c>)
 80060ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060b2:	0112      	lsls	r2, r2, #4
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	440b      	add	r3, r1
 80060b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060bc:	e00a      	b.n	80060d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	4908      	ldr	r1, [pc, #32]	; (80060e4 <__NVIC_SetPriority+0x50>)
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	3b04      	subs	r3, #4
 80060cc:	0112      	lsls	r2, r2, #4
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	440b      	add	r3, r1
 80060d2:	761a      	strb	r2, [r3, #24]
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	e000e100 	.word	0xe000e100
 80060e4:	e000ed00 	.word	0xe000ed00

080060e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b089      	sub	sp, #36	; 0x24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f1c3 0307 	rsb	r3, r3, #7
 8006102:	2b04      	cmp	r3, #4
 8006104:	bf28      	it	cs
 8006106:	2304      	movcs	r3, #4
 8006108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	3304      	adds	r3, #4
 800610e:	2b06      	cmp	r3, #6
 8006110:	d902      	bls.n	8006118 <NVIC_EncodePriority+0x30>
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	3b03      	subs	r3, #3
 8006116:	e000      	b.n	800611a <NVIC_EncodePriority+0x32>
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800611c:	f04f 32ff 	mov.w	r2, #4294967295
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43da      	mvns	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	401a      	ands	r2, r3
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006130:	f04f 31ff 	mov.w	r1, #4294967295
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	fa01 f303 	lsl.w	r3, r1, r3
 800613a:	43d9      	mvns	r1, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006140:	4313      	orrs	r3, r2
         );
}
 8006142:	4618      	mov	r0, r3
 8006144:	3724      	adds	r7, #36	; 0x24
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff ff4c 	bl	8005ff4 <__NVIC_SetPriorityGrouping>
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006172:	f7ff ff63 	bl	800603c <__NVIC_GetPriorityGrouping>
 8006176:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	6978      	ldr	r0, [r7, #20]
 800617e:	f7ff ffb3 	bl	80060e8 <NVIC_EncodePriority>
 8006182:	4602      	mov	r2, r0
 8006184:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006188:	4611      	mov	r1, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff ff82 	bl	8006094 <__NVIC_SetPriority>
}
 8006190:	bf00      	nop
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff ff56 	bl	8006058 <__NVIC_EnableIRQ>
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e014      	b.n	80061f0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	791b      	ldrb	r3, [r3, #4]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fa fd4e 	bl	8000c78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	795b      	ldrb	r3, [r3, #5]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_DAC_ConfigChannel+0x18>
 800620c:	2302      	movs	r3, #2
 800620e:	e11d      	b.n	800644c <HAL_DAC_ConfigChannel+0x254>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2202      	movs	r2, #2
 800621a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b04      	cmp	r3, #4
 8006222:	d174      	bne.n	800630e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006224:	f7fe fdfc 	bl	8004e20 <HAL_GetTick>
 8006228:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d134      	bne.n	800629a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006230:	e011      	b.n	8006256 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006232:	f7fe fdf5 	bl	8004e20 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	d90a      	bls.n	8006256 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f043 0208 	orr.w	r2, r3, #8
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2203      	movs	r2, #3
 8006250:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e0fa      	b.n	800644c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625c:	4b7d      	ldr	r3, [pc, #500]	; (8006454 <HAL_DAC_ConfigChannel+0x25c>)
 800625e:	4013      	ands	r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e6      	bne.n	8006232 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8006264:	2001      	movs	r0, #1
 8006266:	f7fe fde7 	bl	8004e38 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	6992      	ldr	r2, [r2, #24]
 8006272:	641a      	str	r2, [r3, #64]	; 0x40
 8006274:	e01e      	b.n	80062b4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006276:	f7fe fdd3 	bl	8004e20 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b01      	cmp	r3, #1
 8006282:	d90a      	bls.n	800629a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f043 0208 	orr.w	r2, r3, #8
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2203      	movs	r2, #3
 8006294:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e0d8      	b.n	800644c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	dbe8      	blt.n	8006276 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80062a4:	2001      	movs	r0, #1
 80062a6:	f7fe fdc7 	bl	8004e38 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	6992      	ldr	r2, [r2, #24]
 80062b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80062c4:	fa01 f303 	lsl.w	r3, r1, r3
 80062c8:	43db      	mvns	r3, r3
 80062ca:	ea02 0103 	and.w	r1, r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	409a      	lsls	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	21ff      	movs	r1, #255	; 0xff
 80062f0:	fa01 f303 	lsl.w	r3, r1, r3
 80062f4:	43db      	mvns	r3, r3
 80062f6:	ea02 0103 	and.w	r1, r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6a1a      	ldr	r2, [r3, #32]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	409a      	lsls	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d11d      	bne.n	8006352 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	221f      	movs	r2, #31
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	43db      	mvns	r3, r3
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4013      	ands	r3, r2
 8006330:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f003 0310 	and.w	r3, r3, #16
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006358:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2207      	movs	r2, #7
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43db      	mvns	r3, r3
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4013      	ands	r3, r2
 800636c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d102      	bne.n	800637c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8006376:	2300      	movs	r3, #0
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	e00f      	b.n	800639c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d102      	bne.n	800638a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006384:	2301      	movs	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	e008      	b.n	800639c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006392:	2301      	movs	r3, #1
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	e001      	b.n	800639c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006398:	2300      	movs	r3, #0
 800639a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6819      	ldr	r1, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43da      	mvns	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	400a      	ands	r2, r1
 80063e2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	43db      	mvns	r3, r3
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4013      	ands	r3, r2
 8006400:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6819      	ldr	r1, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	22c0      	movs	r2, #192	; 0xc0
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	43da      	mvns	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	400a      	ands	r2, r1
 800643c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20008000 	.word	0x20008000

08006458 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006460:	f7fe fcde 	bl	8004e20 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e2dc      	b.n	8006a2a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d008      	beq.n	800648e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e2cd      	b.n	8006a2a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a76      	ldr	r2, [pc, #472]	; (800666c <HAL_DMA_Abort+0x214>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d04a      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a74      	ldr	r2, [pc, #464]	; (8006670 <HAL_DMA_Abort+0x218>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d045      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a73      	ldr	r2, [pc, #460]	; (8006674 <HAL_DMA_Abort+0x21c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d040      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a71      	ldr	r2, [pc, #452]	; (8006678 <HAL_DMA_Abort+0x220>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d03b      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a70      	ldr	r2, [pc, #448]	; (800667c <HAL_DMA_Abort+0x224>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d036      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a6e      	ldr	r2, [pc, #440]	; (8006680 <HAL_DMA_Abort+0x228>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d031      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a6d      	ldr	r2, [pc, #436]	; (8006684 <HAL_DMA_Abort+0x22c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d02c      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a6b      	ldr	r2, [pc, #428]	; (8006688 <HAL_DMA_Abort+0x230>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d027      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a6a      	ldr	r2, [pc, #424]	; (800668c <HAL_DMA_Abort+0x234>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d022      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a68      	ldr	r2, [pc, #416]	; (8006690 <HAL_DMA_Abort+0x238>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d01d      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a67      	ldr	r2, [pc, #412]	; (8006694 <HAL_DMA_Abort+0x23c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d018      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a65      	ldr	r2, [pc, #404]	; (8006698 <HAL_DMA_Abort+0x240>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a64      	ldr	r2, [pc, #400]	; (800669c <HAL_DMA_Abort+0x244>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00e      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a62      	ldr	r2, [pc, #392]	; (80066a0 <HAL_DMA_Abort+0x248>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d009      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a61      	ldr	r2, [pc, #388]	; (80066a4 <HAL_DMA_Abort+0x24c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <HAL_DMA_Abort+0xd6>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a5f      	ldr	r2, [pc, #380]	; (80066a8 <HAL_DMA_Abort+0x250>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d101      	bne.n	8006532 <HAL_DMA_Abort+0xda>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <HAL_DMA_Abort+0xdc>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d013      	beq.n	8006560 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 021e 	bic.w	r2, r2, #30
 8006546:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695a      	ldr	r2, [r3, #20]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006556:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	e00a      	b.n	8006576 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 020e 	bic.w	r2, r2, #14
 800656e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a3c      	ldr	r2, [pc, #240]	; (800666c <HAL_DMA_Abort+0x214>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d072      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a3a      	ldr	r2, [pc, #232]	; (8006670 <HAL_DMA_Abort+0x218>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d06d      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a39      	ldr	r2, [pc, #228]	; (8006674 <HAL_DMA_Abort+0x21c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d068      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a37      	ldr	r2, [pc, #220]	; (8006678 <HAL_DMA_Abort+0x220>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d063      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a36      	ldr	r2, [pc, #216]	; (800667c <HAL_DMA_Abort+0x224>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d05e      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a34      	ldr	r2, [pc, #208]	; (8006680 <HAL_DMA_Abort+0x228>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d059      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a33      	ldr	r2, [pc, #204]	; (8006684 <HAL_DMA_Abort+0x22c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d054      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a31      	ldr	r2, [pc, #196]	; (8006688 <HAL_DMA_Abort+0x230>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d04f      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a30      	ldr	r2, [pc, #192]	; (800668c <HAL_DMA_Abort+0x234>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d04a      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a2e      	ldr	r2, [pc, #184]	; (8006690 <HAL_DMA_Abort+0x238>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d045      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a2d      	ldr	r2, [pc, #180]	; (8006694 <HAL_DMA_Abort+0x23c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d040      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a2b      	ldr	r2, [pc, #172]	; (8006698 <HAL_DMA_Abort+0x240>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d03b      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a2a      	ldr	r2, [pc, #168]	; (800669c <HAL_DMA_Abort+0x244>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d036      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a28      	ldr	r2, [pc, #160]	; (80066a0 <HAL_DMA_Abort+0x248>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d031      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a27      	ldr	r2, [pc, #156]	; (80066a4 <HAL_DMA_Abort+0x24c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d02c      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a25      	ldr	r2, [pc, #148]	; (80066a8 <HAL_DMA_Abort+0x250>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d027      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a24      	ldr	r2, [pc, #144]	; (80066ac <HAL_DMA_Abort+0x254>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d022      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <HAL_DMA_Abort+0x258>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01d      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a21      	ldr	r2, [pc, #132]	; (80066b4 <HAL_DMA_Abort+0x25c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d018      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1f      	ldr	r2, [pc, #124]	; (80066b8 <HAL_DMA_Abort+0x260>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1e      	ldr	r2, [pc, #120]	; (80066bc <HAL_DMA_Abort+0x264>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00e      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <HAL_DMA_Abort+0x268>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d009      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <HAL_DMA_Abort+0x26c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_DMA_Abort+0x20e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a19      	ldr	r2, [pc, #100]	; (80066c8 <HAL_DMA_Abort+0x270>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d132      	bne.n	80066cc <HAL_DMA_Abort+0x274>
 8006666:	2301      	movs	r3, #1
 8006668:	e031      	b.n	80066ce <HAL_DMA_Abort+0x276>
 800666a:	bf00      	nop
 800666c:	40020010 	.word	0x40020010
 8006670:	40020028 	.word	0x40020028
 8006674:	40020040 	.word	0x40020040
 8006678:	40020058 	.word	0x40020058
 800667c:	40020070 	.word	0x40020070
 8006680:	40020088 	.word	0x40020088
 8006684:	400200a0 	.word	0x400200a0
 8006688:	400200b8 	.word	0x400200b8
 800668c:	40020410 	.word	0x40020410
 8006690:	40020428 	.word	0x40020428
 8006694:	40020440 	.word	0x40020440
 8006698:	40020458 	.word	0x40020458
 800669c:	40020470 	.word	0x40020470
 80066a0:	40020488 	.word	0x40020488
 80066a4:	400204a0 	.word	0x400204a0
 80066a8:	400204b8 	.word	0x400204b8
 80066ac:	58025408 	.word	0x58025408
 80066b0:	5802541c 	.word	0x5802541c
 80066b4:	58025430 	.word	0x58025430
 80066b8:	58025444 	.word	0x58025444
 80066bc:	58025458 	.word	0x58025458
 80066c0:	5802546c 	.word	0x5802546c
 80066c4:	58025480 	.word	0x58025480
 80066c8:	58025494 	.word	0x58025494
 80066cc:	2300      	movs	r3, #0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d007      	beq.n	80066e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6d      	ldr	r2, [pc, #436]	; (800689c <HAL_DMA_Abort+0x444>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d04a      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a6b      	ldr	r2, [pc, #428]	; (80068a0 <HAL_DMA_Abort+0x448>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d045      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a6a      	ldr	r2, [pc, #424]	; (80068a4 <HAL_DMA_Abort+0x44c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d040      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a68      	ldr	r2, [pc, #416]	; (80068a8 <HAL_DMA_Abort+0x450>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d03b      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a67      	ldr	r2, [pc, #412]	; (80068ac <HAL_DMA_Abort+0x454>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d036      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a65      	ldr	r2, [pc, #404]	; (80068b0 <HAL_DMA_Abort+0x458>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d031      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a64      	ldr	r2, [pc, #400]	; (80068b4 <HAL_DMA_Abort+0x45c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d02c      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a62      	ldr	r2, [pc, #392]	; (80068b8 <HAL_DMA_Abort+0x460>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d027      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a61      	ldr	r2, [pc, #388]	; (80068bc <HAL_DMA_Abort+0x464>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d022      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a5f      	ldr	r2, [pc, #380]	; (80068c0 <HAL_DMA_Abort+0x468>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d01d      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a5e      	ldr	r2, [pc, #376]	; (80068c4 <HAL_DMA_Abort+0x46c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d018      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5c      	ldr	r2, [pc, #368]	; (80068c8 <HAL_DMA_Abort+0x470>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a5b      	ldr	r2, [pc, #364]	; (80068cc <HAL_DMA_Abort+0x474>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00e      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a59      	ldr	r2, [pc, #356]	; (80068d0 <HAL_DMA_Abort+0x478>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d009      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a58      	ldr	r2, [pc, #352]	; (80068d4 <HAL_DMA_Abort+0x47c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d004      	beq.n	8006782 <HAL_DMA_Abort+0x32a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a56      	ldr	r2, [pc, #344]	; (80068d8 <HAL_DMA_Abort+0x480>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d108      	bne.n	8006794 <HAL_DMA_Abort+0x33c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e007      	b.n	80067a4 <HAL_DMA_Abort+0x34c>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0201 	bic.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80067a4:	e013      	b.n	80067ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067a6:	f7fe fb3b 	bl	8004e20 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b05      	cmp	r3, #5
 80067b2:	d90c      	bls.n	80067ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2203      	movs	r2, #3
 80067c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e12d      	b.n	8006a2a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e5      	bne.n	80067a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2f      	ldr	r2, [pc, #188]	; (800689c <HAL_DMA_Abort+0x444>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d04a      	beq.n	800687a <HAL_DMA_Abort+0x422>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a2d      	ldr	r2, [pc, #180]	; (80068a0 <HAL_DMA_Abort+0x448>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d045      	beq.n	800687a <HAL_DMA_Abort+0x422>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a2c      	ldr	r2, [pc, #176]	; (80068a4 <HAL_DMA_Abort+0x44c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d040      	beq.n	800687a <HAL_DMA_Abort+0x422>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2a      	ldr	r2, [pc, #168]	; (80068a8 <HAL_DMA_Abort+0x450>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d03b      	beq.n	800687a <HAL_DMA_Abort+0x422>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a29      	ldr	r2, [pc, #164]	; (80068ac <HAL_DMA_Abort+0x454>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d036      	beq.n	800687a <HAL_DMA_Abort+0x422>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a27      	ldr	r2, [pc, #156]	; (80068b0 <HAL_DMA_Abort+0x458>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d031      	beq.n	800687a <HAL_DMA_Abort+0x422>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a26      	ldr	r2, [pc, #152]	; (80068b4 <HAL_DMA_Abort+0x45c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d02c      	beq.n	800687a <HAL_DMA_Abort+0x422>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a24      	ldr	r2, [pc, #144]	; (80068b8 <HAL_DMA_Abort+0x460>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d027      	beq.n	800687a <HAL_DMA_Abort+0x422>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a23      	ldr	r2, [pc, #140]	; (80068bc <HAL_DMA_Abort+0x464>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <HAL_DMA_Abort+0x422>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a21      	ldr	r2, [pc, #132]	; (80068c0 <HAL_DMA_Abort+0x468>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01d      	beq.n	800687a <HAL_DMA_Abort+0x422>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a20      	ldr	r2, [pc, #128]	; (80068c4 <HAL_DMA_Abort+0x46c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_DMA_Abort+0x422>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1e      	ldr	r2, [pc, #120]	; (80068c8 <HAL_DMA_Abort+0x470>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_DMA_Abort+0x422>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1d      	ldr	r2, [pc, #116]	; (80068cc <HAL_DMA_Abort+0x474>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_DMA_Abort+0x422>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1b      	ldr	r2, [pc, #108]	; (80068d0 <HAL_DMA_Abort+0x478>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_DMA_Abort+0x422>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1a      	ldr	r2, [pc, #104]	; (80068d4 <HAL_DMA_Abort+0x47c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_DMA_Abort+0x422>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <HAL_DMA_Abort+0x480>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d101      	bne.n	800687e <HAL_DMA_Abort+0x426>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <HAL_DMA_Abort+0x428>
 800687e:	2300      	movs	r3, #0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d02b      	beq.n	80068dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006888:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688e:	f003 031f 	and.w	r3, r3, #31
 8006892:	223f      	movs	r2, #63	; 0x3f
 8006894:	409a      	lsls	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	609a      	str	r2, [r3, #8]
 800689a:	e02a      	b.n	80068f2 <HAL_DMA_Abort+0x49a>
 800689c:	40020010 	.word	0x40020010
 80068a0:	40020028 	.word	0x40020028
 80068a4:	40020040 	.word	0x40020040
 80068a8:	40020058 	.word	0x40020058
 80068ac:	40020070 	.word	0x40020070
 80068b0:	40020088 	.word	0x40020088
 80068b4:	400200a0 	.word	0x400200a0
 80068b8:	400200b8 	.word	0x400200b8
 80068bc:	40020410 	.word	0x40020410
 80068c0:	40020428 	.word	0x40020428
 80068c4:	40020440 	.word	0x40020440
 80068c8:	40020458 	.word	0x40020458
 80068cc:	40020470 	.word	0x40020470
 80068d0:	40020488 	.word	0x40020488
 80068d4:	400204a0 	.word	0x400204a0
 80068d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	2201      	movs	r2, #1
 80068ec:	409a      	lsls	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a4f      	ldr	r2, [pc, #316]	; (8006a34 <HAL_DMA_Abort+0x5dc>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d072      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a4d      	ldr	r2, [pc, #308]	; (8006a38 <HAL_DMA_Abort+0x5e0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d06d      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a4c      	ldr	r2, [pc, #304]	; (8006a3c <HAL_DMA_Abort+0x5e4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d068      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a4a      	ldr	r2, [pc, #296]	; (8006a40 <HAL_DMA_Abort+0x5e8>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d063      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a49      	ldr	r2, [pc, #292]	; (8006a44 <HAL_DMA_Abort+0x5ec>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d05e      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a47      	ldr	r2, [pc, #284]	; (8006a48 <HAL_DMA_Abort+0x5f0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d059      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a46      	ldr	r2, [pc, #280]	; (8006a4c <HAL_DMA_Abort+0x5f4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d054      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a44      	ldr	r2, [pc, #272]	; (8006a50 <HAL_DMA_Abort+0x5f8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d04f      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a43      	ldr	r2, [pc, #268]	; (8006a54 <HAL_DMA_Abort+0x5fc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d04a      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a41      	ldr	r2, [pc, #260]	; (8006a58 <HAL_DMA_Abort+0x600>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d045      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a40      	ldr	r2, [pc, #256]	; (8006a5c <HAL_DMA_Abort+0x604>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d040      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a3e      	ldr	r2, [pc, #248]	; (8006a60 <HAL_DMA_Abort+0x608>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d03b      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a3d      	ldr	r2, [pc, #244]	; (8006a64 <HAL_DMA_Abort+0x60c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d036      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a3b      	ldr	r2, [pc, #236]	; (8006a68 <HAL_DMA_Abort+0x610>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d031      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a3a      	ldr	r2, [pc, #232]	; (8006a6c <HAL_DMA_Abort+0x614>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d02c      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a38      	ldr	r2, [pc, #224]	; (8006a70 <HAL_DMA_Abort+0x618>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d027      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a37      	ldr	r2, [pc, #220]	; (8006a74 <HAL_DMA_Abort+0x61c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d022      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a35      	ldr	r2, [pc, #212]	; (8006a78 <HAL_DMA_Abort+0x620>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01d      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a34      	ldr	r2, [pc, #208]	; (8006a7c <HAL_DMA_Abort+0x624>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d018      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a32      	ldr	r2, [pc, #200]	; (8006a80 <HAL_DMA_Abort+0x628>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a31      	ldr	r2, [pc, #196]	; (8006a84 <HAL_DMA_Abort+0x62c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00e      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a2f      	ldr	r2, [pc, #188]	; (8006a88 <HAL_DMA_Abort+0x630>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a2e      	ldr	r2, [pc, #184]	; (8006a8c <HAL_DMA_Abort+0x634>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_DMA_Abort+0x58a>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a2c      	ldr	r2, [pc, #176]	; (8006a90 <HAL_DMA_Abort+0x638>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d101      	bne.n	80069e6 <HAL_DMA_Abort+0x58e>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <HAL_DMA_Abort+0x590>
 80069e6:	2300      	movs	r3, #0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80069f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00c      	beq.n	8006a18 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a0c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a16:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	40020010 	.word	0x40020010
 8006a38:	40020028 	.word	0x40020028
 8006a3c:	40020040 	.word	0x40020040
 8006a40:	40020058 	.word	0x40020058
 8006a44:	40020070 	.word	0x40020070
 8006a48:	40020088 	.word	0x40020088
 8006a4c:	400200a0 	.word	0x400200a0
 8006a50:	400200b8 	.word	0x400200b8
 8006a54:	40020410 	.word	0x40020410
 8006a58:	40020428 	.word	0x40020428
 8006a5c:	40020440 	.word	0x40020440
 8006a60:	40020458 	.word	0x40020458
 8006a64:	40020470 	.word	0x40020470
 8006a68:	40020488 	.word	0x40020488
 8006a6c:	400204a0 	.word	0x400204a0
 8006a70:	400204b8 	.word	0x400204b8
 8006a74:	58025408 	.word	0x58025408
 8006a78:	5802541c 	.word	0x5802541c
 8006a7c:	58025430 	.word	0x58025430
 8006a80:	58025444 	.word	0x58025444
 8006a84:	58025458 	.word	0x58025458
 8006a88:	5802546c 	.word	0x5802546c
 8006a8c:	58025480 	.word	0x58025480
 8006a90:	58025494 	.word	0x58025494

08006a94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e205      	b.n	8006eb2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d004      	beq.n	8006abc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2280      	movs	r2, #128	; 0x80
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e1fa      	b.n	8006eb2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a8c      	ldr	r2, [pc, #560]	; (8006cf4 <HAL_DMA_Abort_IT+0x260>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d04a      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a8b      	ldr	r2, [pc, #556]	; (8006cf8 <HAL_DMA_Abort_IT+0x264>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d045      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a89      	ldr	r2, [pc, #548]	; (8006cfc <HAL_DMA_Abort_IT+0x268>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d040      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a88      	ldr	r2, [pc, #544]	; (8006d00 <HAL_DMA_Abort_IT+0x26c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d03b      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a86      	ldr	r2, [pc, #536]	; (8006d04 <HAL_DMA_Abort_IT+0x270>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d036      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a85      	ldr	r2, [pc, #532]	; (8006d08 <HAL_DMA_Abort_IT+0x274>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d031      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a83      	ldr	r2, [pc, #524]	; (8006d0c <HAL_DMA_Abort_IT+0x278>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d02c      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a82      	ldr	r2, [pc, #520]	; (8006d10 <HAL_DMA_Abort_IT+0x27c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d027      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a80      	ldr	r2, [pc, #512]	; (8006d14 <HAL_DMA_Abort_IT+0x280>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d022      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a7f      	ldr	r2, [pc, #508]	; (8006d18 <HAL_DMA_Abort_IT+0x284>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d01d      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a7d      	ldr	r2, [pc, #500]	; (8006d1c <HAL_DMA_Abort_IT+0x288>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d018      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a7c      	ldr	r2, [pc, #496]	; (8006d20 <HAL_DMA_Abort_IT+0x28c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d013      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a7a      	ldr	r2, [pc, #488]	; (8006d24 <HAL_DMA_Abort_IT+0x290>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00e      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a79      	ldr	r2, [pc, #484]	; (8006d28 <HAL_DMA_Abort_IT+0x294>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d009      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a77      	ldr	r2, [pc, #476]	; (8006d2c <HAL_DMA_Abort_IT+0x298>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d004      	beq.n	8006b5c <HAL_DMA_Abort_IT+0xc8>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a76      	ldr	r2, [pc, #472]	; (8006d30 <HAL_DMA_Abort_IT+0x29c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d101      	bne.n	8006b60 <HAL_DMA_Abort_IT+0xcc>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <HAL_DMA_Abort_IT+0xce>
 8006b60:	2300      	movs	r3, #0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d065      	beq.n	8006c32 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a60      	ldr	r2, [pc, #384]	; (8006cf4 <HAL_DMA_Abort_IT+0x260>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d04a      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a5e      	ldr	r2, [pc, #376]	; (8006cf8 <HAL_DMA_Abort_IT+0x264>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d045      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a5d      	ldr	r2, [pc, #372]	; (8006cfc <HAL_DMA_Abort_IT+0x268>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d040      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a5b      	ldr	r2, [pc, #364]	; (8006d00 <HAL_DMA_Abort_IT+0x26c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d03b      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a5a      	ldr	r2, [pc, #360]	; (8006d04 <HAL_DMA_Abort_IT+0x270>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d036      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a58      	ldr	r2, [pc, #352]	; (8006d08 <HAL_DMA_Abort_IT+0x274>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d031      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a57      	ldr	r2, [pc, #348]	; (8006d0c <HAL_DMA_Abort_IT+0x278>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d02c      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a55      	ldr	r2, [pc, #340]	; (8006d10 <HAL_DMA_Abort_IT+0x27c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d027      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a54      	ldr	r2, [pc, #336]	; (8006d14 <HAL_DMA_Abort_IT+0x280>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d022      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a52      	ldr	r2, [pc, #328]	; (8006d18 <HAL_DMA_Abort_IT+0x284>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01d      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a51      	ldr	r2, [pc, #324]	; (8006d1c <HAL_DMA_Abort_IT+0x288>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d018      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a4f      	ldr	r2, [pc, #316]	; (8006d20 <HAL_DMA_Abort_IT+0x28c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a4e      	ldr	r2, [pc, #312]	; (8006d24 <HAL_DMA_Abort_IT+0x290>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00e      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a4c      	ldr	r2, [pc, #304]	; (8006d28 <HAL_DMA_Abort_IT+0x294>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d009      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a4b      	ldr	r2, [pc, #300]	; (8006d2c <HAL_DMA_Abort_IT+0x298>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d004      	beq.n	8006c0e <HAL_DMA_Abort_IT+0x17a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a49      	ldr	r2, [pc, #292]	; (8006d30 <HAL_DMA_Abort_IT+0x29c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d108      	bne.n	8006c20 <HAL_DMA_Abort_IT+0x18c>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e147      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x41c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	e13e      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 020e 	bic.w	r2, r2, #14
 8006c40:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a2b      	ldr	r2, [pc, #172]	; (8006cf4 <HAL_DMA_Abort_IT+0x260>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d04a      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a29      	ldr	r2, [pc, #164]	; (8006cf8 <HAL_DMA_Abort_IT+0x264>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d045      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a28      	ldr	r2, [pc, #160]	; (8006cfc <HAL_DMA_Abort_IT+0x268>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d040      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a26      	ldr	r2, [pc, #152]	; (8006d00 <HAL_DMA_Abort_IT+0x26c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d03b      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a25      	ldr	r2, [pc, #148]	; (8006d04 <HAL_DMA_Abort_IT+0x270>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d036      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a23      	ldr	r2, [pc, #140]	; (8006d08 <HAL_DMA_Abort_IT+0x274>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d031      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a22      	ldr	r2, [pc, #136]	; (8006d0c <HAL_DMA_Abort_IT+0x278>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d02c      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a20      	ldr	r2, [pc, #128]	; (8006d10 <HAL_DMA_Abort_IT+0x27c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d027      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1f      	ldr	r2, [pc, #124]	; (8006d14 <HAL_DMA_Abort_IT+0x280>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d022      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1d      	ldr	r2, [pc, #116]	; (8006d18 <HAL_DMA_Abort_IT+0x284>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d01d      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1c      	ldr	r2, [pc, #112]	; (8006d1c <HAL_DMA_Abort_IT+0x288>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d018      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1a      	ldr	r2, [pc, #104]	; (8006d20 <HAL_DMA_Abort_IT+0x28c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d013      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <HAL_DMA_Abort_IT+0x290>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d00e      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <HAL_DMA_Abort_IT+0x294>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d009      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a16      	ldr	r2, [pc, #88]	; (8006d2c <HAL_DMA_Abort_IT+0x298>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d004      	beq.n	8006ce2 <HAL_DMA_Abort_IT+0x24e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a14      	ldr	r2, [pc, #80]	; (8006d30 <HAL_DMA_Abort_IT+0x29c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d128      	bne.n	8006d34 <HAL_DMA_Abort_IT+0x2a0>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0201 	bic.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	e027      	b.n	8006d44 <HAL_DMA_Abort_IT+0x2b0>
 8006cf4:	40020010 	.word	0x40020010
 8006cf8:	40020028 	.word	0x40020028
 8006cfc:	40020040 	.word	0x40020040
 8006d00:	40020058 	.word	0x40020058
 8006d04:	40020070 	.word	0x40020070
 8006d08:	40020088 	.word	0x40020088
 8006d0c:	400200a0 	.word	0x400200a0
 8006d10:	400200b8 	.word	0x400200b8
 8006d14:	40020410 	.word	0x40020410
 8006d18:	40020428 	.word	0x40020428
 8006d1c:	40020440 	.word	0x40020440
 8006d20:	40020458 	.word	0x40020458
 8006d24:	40020470 	.word	0x40020470
 8006d28:	40020488 	.word	0x40020488
 8006d2c:	400204a0 	.word	0x400204a0
 8006d30:	400204b8 	.word	0x400204b8
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0201 	bic.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a5c      	ldr	r2, [pc, #368]	; (8006ebc <HAL_DMA_Abort_IT+0x428>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d072      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a5b      	ldr	r2, [pc, #364]	; (8006ec0 <HAL_DMA_Abort_IT+0x42c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d06d      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a59      	ldr	r2, [pc, #356]	; (8006ec4 <HAL_DMA_Abort_IT+0x430>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d068      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a58      	ldr	r2, [pc, #352]	; (8006ec8 <HAL_DMA_Abort_IT+0x434>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d063      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a56      	ldr	r2, [pc, #344]	; (8006ecc <HAL_DMA_Abort_IT+0x438>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d05e      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a55      	ldr	r2, [pc, #340]	; (8006ed0 <HAL_DMA_Abort_IT+0x43c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d059      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a53      	ldr	r2, [pc, #332]	; (8006ed4 <HAL_DMA_Abort_IT+0x440>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d054      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a52      	ldr	r2, [pc, #328]	; (8006ed8 <HAL_DMA_Abort_IT+0x444>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d04f      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a50      	ldr	r2, [pc, #320]	; (8006edc <HAL_DMA_Abort_IT+0x448>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d04a      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a4f      	ldr	r2, [pc, #316]	; (8006ee0 <HAL_DMA_Abort_IT+0x44c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d045      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a4d      	ldr	r2, [pc, #308]	; (8006ee4 <HAL_DMA_Abort_IT+0x450>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d040      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a4c      	ldr	r2, [pc, #304]	; (8006ee8 <HAL_DMA_Abort_IT+0x454>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d03b      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a4a      	ldr	r2, [pc, #296]	; (8006eec <HAL_DMA_Abort_IT+0x458>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d036      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a49      	ldr	r2, [pc, #292]	; (8006ef0 <HAL_DMA_Abort_IT+0x45c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d031      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a47      	ldr	r2, [pc, #284]	; (8006ef4 <HAL_DMA_Abort_IT+0x460>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d02c      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a46      	ldr	r2, [pc, #280]	; (8006ef8 <HAL_DMA_Abort_IT+0x464>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d027      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a44      	ldr	r2, [pc, #272]	; (8006efc <HAL_DMA_Abort_IT+0x468>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d022      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a43      	ldr	r2, [pc, #268]	; (8006f00 <HAL_DMA_Abort_IT+0x46c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d01d      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a41      	ldr	r2, [pc, #260]	; (8006f04 <HAL_DMA_Abort_IT+0x470>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d018      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a40      	ldr	r2, [pc, #256]	; (8006f08 <HAL_DMA_Abort_IT+0x474>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d013      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a3e      	ldr	r2, [pc, #248]	; (8006f0c <HAL_DMA_Abort_IT+0x478>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00e      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a3d      	ldr	r2, [pc, #244]	; (8006f10 <HAL_DMA_Abort_IT+0x47c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d009      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a3b      	ldr	r2, [pc, #236]	; (8006f14 <HAL_DMA_Abort_IT+0x480>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d004      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x3a0>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a3a      	ldr	r2, [pc, #232]	; (8006f18 <HAL_DMA_Abort_IT+0x484>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d101      	bne.n	8006e38 <HAL_DMA_Abort_IT+0x3a4>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <HAL_DMA_Abort_IT+0x3a6>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d028      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e58:	f003 031f 	and.w	r3, r3, #31
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	409a      	lsls	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00c      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40020010 	.word	0x40020010
 8006ec0:	40020028 	.word	0x40020028
 8006ec4:	40020040 	.word	0x40020040
 8006ec8:	40020058 	.word	0x40020058
 8006ecc:	40020070 	.word	0x40020070
 8006ed0:	40020088 	.word	0x40020088
 8006ed4:	400200a0 	.word	0x400200a0
 8006ed8:	400200b8 	.word	0x400200b8
 8006edc:	40020410 	.word	0x40020410
 8006ee0:	40020428 	.word	0x40020428
 8006ee4:	40020440 	.word	0x40020440
 8006ee8:	40020458 	.word	0x40020458
 8006eec:	40020470 	.word	0x40020470
 8006ef0:	40020488 	.word	0x40020488
 8006ef4:	400204a0 	.word	0x400204a0
 8006ef8:	400204b8 	.word	0x400204b8
 8006efc:	58025408 	.word	0x58025408
 8006f00:	5802541c 	.word	0x5802541c
 8006f04:	58025430 	.word	0x58025430
 8006f08:	58025444 	.word	0x58025444
 8006f0c:	58025458 	.word	0x58025458
 8006f10:	5802546c 	.word	0x5802546c
 8006f14:	58025480 	.word	0x58025480
 8006f18:	58025494 	.word	0x58025494

08006f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b089      	sub	sp, #36	; 0x24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006f2a:	4b89      	ldr	r3, [pc, #548]	; (8007150 <HAL_GPIO_Init+0x234>)
 8006f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f2e:	e194      	b.n	800725a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	2101      	movs	r1, #1
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 8186 	beq.w	8007254 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d00b      	beq.n	8006f68 <HAL_GPIO_Init+0x4c>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d007      	beq.n	8006f68 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f5c:	2b11      	cmp	r3, #17
 8006f5e:	d003      	beq.n	8006f68 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2b12      	cmp	r3, #18
 8006f66:	d130      	bne.n	8006fca <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	2203      	movs	r2, #3
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	43db      	mvns	r3, r3
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	4013      	ands	r3, r2
 8006fac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	091b      	lsrs	r3, r3, #4
 8006fb4:	f003 0201 	and.w	r2, r3, #1
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	2203      	movs	r2, #3
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	fa02 f303 	lsl.w	r3, r2, r3
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d003      	beq.n	800700a <HAL_GPIO_Init+0xee>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b12      	cmp	r3, #18
 8007008:	d123      	bne.n	8007052 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	08da      	lsrs	r2, r3, #3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3208      	adds	r2, #8
 8007012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	220f      	movs	r2, #15
 8007022:	fa02 f303 	lsl.w	r3, r2, r3
 8007026:	43db      	mvns	r3, r3
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	4013      	ands	r3, r2
 800702c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	691a      	ldr	r2, [r3, #16]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	4313      	orrs	r3, r2
 8007042:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	08da      	lsrs	r2, r3, #3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3208      	adds	r2, #8
 800704c:	69b9      	ldr	r1, [r7, #24]
 800704e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	2203      	movs	r2, #3
 800705e:	fa02 f303 	lsl.w	r3, r2, r3
 8007062:	43db      	mvns	r3, r3
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	4013      	ands	r3, r2
 8007068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f003 0203 	and.w	r2, r3, #3
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	fa02 f303 	lsl.w	r3, r2, r3
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	4313      	orrs	r3, r2
 800707e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80e0 	beq.w	8007254 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007094:	4b2f      	ldr	r3, [pc, #188]	; (8007154 <HAL_GPIO_Init+0x238>)
 8007096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800709a:	4a2e      	ldr	r2, [pc, #184]	; (8007154 <HAL_GPIO_Init+0x238>)
 800709c:	f043 0302 	orr.w	r3, r3, #2
 80070a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80070a4:	4b2b      	ldr	r3, [pc, #172]	; (8007154 <HAL_GPIO_Init+0x238>)
 80070a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070b2:	4a29      	ldr	r2, [pc, #164]	; (8007158 <HAL_GPIO_Init+0x23c>)
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	089b      	lsrs	r3, r3, #2
 80070b8:	3302      	adds	r3, #2
 80070ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	220f      	movs	r2, #15
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	43db      	mvns	r3, r3
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	4013      	ands	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a20      	ldr	r2, [pc, #128]	; (800715c <HAL_GPIO_Init+0x240>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d052      	beq.n	8007184 <HAL_GPIO_Init+0x268>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a1f      	ldr	r2, [pc, #124]	; (8007160 <HAL_GPIO_Init+0x244>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d031      	beq.n	800714a <HAL_GPIO_Init+0x22e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a1e      	ldr	r2, [pc, #120]	; (8007164 <HAL_GPIO_Init+0x248>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d02b      	beq.n	8007146 <HAL_GPIO_Init+0x22a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a1d      	ldr	r2, [pc, #116]	; (8007168 <HAL_GPIO_Init+0x24c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d025      	beq.n	8007142 <HAL_GPIO_Init+0x226>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a1c      	ldr	r2, [pc, #112]	; (800716c <HAL_GPIO_Init+0x250>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01f      	beq.n	800713e <HAL_GPIO_Init+0x222>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a1b      	ldr	r2, [pc, #108]	; (8007170 <HAL_GPIO_Init+0x254>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d019      	beq.n	800713a <HAL_GPIO_Init+0x21e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a1a      	ldr	r2, [pc, #104]	; (8007174 <HAL_GPIO_Init+0x258>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <HAL_GPIO_Init+0x21a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a19      	ldr	r2, [pc, #100]	; (8007178 <HAL_GPIO_Init+0x25c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00d      	beq.n	8007132 <HAL_GPIO_Init+0x216>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a18      	ldr	r2, [pc, #96]	; (800717c <HAL_GPIO_Init+0x260>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d007      	beq.n	800712e <HAL_GPIO_Init+0x212>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a17      	ldr	r2, [pc, #92]	; (8007180 <HAL_GPIO_Init+0x264>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d101      	bne.n	800712a <HAL_GPIO_Init+0x20e>
 8007126:	2309      	movs	r3, #9
 8007128:	e02d      	b.n	8007186 <HAL_GPIO_Init+0x26a>
 800712a:	230a      	movs	r3, #10
 800712c:	e02b      	b.n	8007186 <HAL_GPIO_Init+0x26a>
 800712e:	2308      	movs	r3, #8
 8007130:	e029      	b.n	8007186 <HAL_GPIO_Init+0x26a>
 8007132:	2307      	movs	r3, #7
 8007134:	e027      	b.n	8007186 <HAL_GPIO_Init+0x26a>
 8007136:	2306      	movs	r3, #6
 8007138:	e025      	b.n	8007186 <HAL_GPIO_Init+0x26a>
 800713a:	2305      	movs	r3, #5
 800713c:	e023      	b.n	8007186 <HAL_GPIO_Init+0x26a>
 800713e:	2304      	movs	r3, #4
 8007140:	e021      	b.n	8007186 <HAL_GPIO_Init+0x26a>
 8007142:	2303      	movs	r3, #3
 8007144:	e01f      	b.n	8007186 <HAL_GPIO_Init+0x26a>
 8007146:	2302      	movs	r3, #2
 8007148:	e01d      	b.n	8007186 <HAL_GPIO_Init+0x26a>
 800714a:	2301      	movs	r3, #1
 800714c:	e01b      	b.n	8007186 <HAL_GPIO_Init+0x26a>
 800714e:	bf00      	nop
 8007150:	58000080 	.word	0x58000080
 8007154:	58024400 	.word	0x58024400
 8007158:	58000400 	.word	0x58000400
 800715c:	58020000 	.word	0x58020000
 8007160:	58020400 	.word	0x58020400
 8007164:	58020800 	.word	0x58020800
 8007168:	58020c00 	.word	0x58020c00
 800716c:	58021000 	.word	0x58021000
 8007170:	58021400 	.word	0x58021400
 8007174:	58021800 	.word	0x58021800
 8007178:	58021c00 	.word	0x58021c00
 800717c:	58022000 	.word	0x58022000
 8007180:	58022400 	.word	0x58022400
 8007184:	2300      	movs	r3, #0
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	f002 0203 	and.w	r2, r2, #3
 800718c:	0092      	lsls	r2, r2, #2
 800718e:	4093      	lsls	r3, r2
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	4313      	orrs	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007196:	4938      	ldr	r1, [pc, #224]	; (8007278 <HAL_GPIO_Init+0x35c>)
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	089b      	lsrs	r3, r3, #2
 800719c:	3302      	adds	r3, #2
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	43db      	mvns	r3, r3
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	4013      	ands	r3, r2
 80071b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	43db      	mvns	r3, r3
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	4013      	ands	r3, r2
 80071dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80071f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	43db      	mvns	r3, r3
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	4013      	ands	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800721e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	43db      	mvns	r3, r3
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	4013      	ands	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800724c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	3301      	adds	r3, #1
 8007258:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	fa22 f303 	lsr.w	r3, r2, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	f47f ae63 	bne.w	8006f30 <HAL_GPIO_Init+0x14>
  }
}
 800726a:	bf00      	nop
 800726c:	bf00      	nop
 800726e:	3724      	adds	r7, #36	; 0x24
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	58000400 	.word	0x58000400

0800727c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691a      	ldr	r2, [r3, #16]
 800728c:	887b      	ldrh	r3, [r7, #2]
 800728e:	4013      	ands	r3, r2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
 8007298:	e001      	b.n	800729e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	807b      	strh	r3, [r7, #2]
 80072b8:	4613      	mov	r3, r2
 80072ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072bc:	787b      	ldrb	r3, [r7, #1]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072c2:	887a      	ldrh	r2, [r7, #2]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80072c8:	e003      	b.n	80072d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80072ca:	887b      	ldrh	r3, [r7, #2]
 80072cc:	041a      	lsls	r2, r3, #16
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	619a      	str	r2, [r3, #24]
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80072de:	b480      	push	{r7}
 80072e0:	b085      	sub	sp, #20
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80072f0:	887a      	ldrh	r2, [r7, #2]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4013      	ands	r3, r2
 80072f6:	041a      	lsls	r2, r3, #16
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	43d9      	mvns	r1, r3
 80072fc:	887b      	ldrh	r3, [r7, #2]
 80072fe:	400b      	ands	r3, r1
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	619a      	str	r2, [r3, #24]
}
 8007306:	bf00      	nop
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007314:	b08f      	sub	sp, #60	; 0x3c
 8007316:	af0a      	add	r7, sp, #40	; 0x28
 8007318:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e116      	b.n	8007552 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f00d fc8c 	bl	8014c5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2203      	movs	r2, #3
 8007348:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f008 fff7 	bl	8010356 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	603b      	str	r3, [r7, #0]
 800736e:	687e      	ldr	r6, [r7, #4]
 8007370:	466d      	mov	r5, sp
 8007372:	f106 0410 	add.w	r4, r6, #16
 8007376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800737a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800737c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800737e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007382:	e885 0003 	stmia.w	r5, {r0, r1}
 8007386:	1d33      	adds	r3, r6, #4
 8007388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800738a:	6838      	ldr	r0, [r7, #0]
 800738c:	f008 fec2 	bl	8010114 <USB_CoreInit>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2202      	movs	r2, #2
 800739a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e0d7      	b.n	8007552 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2100      	movs	r1, #0
 80073a8:	4618      	mov	r0, r3
 80073aa:	f008 ffe5 	bl	8010378 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
 80073b2:	e04a      	b.n	800744a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80073b4:	7bfa      	ldrb	r2, [r7, #15]
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	4613      	mov	r3, r2
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	1a9b      	subs	r3, r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	333d      	adds	r3, #61	; 0x3d
 80073c4:	2201      	movs	r2, #1
 80073c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80073c8:	7bfa      	ldrb	r2, [r7, #15]
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	1a9b      	subs	r3, r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	333c      	adds	r3, #60	; 0x3c
 80073d8:	7bfa      	ldrb	r2, [r7, #15]
 80073da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80073dc:	7bfa      	ldrb	r2, [r7, #15]
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	b298      	uxth	r0, r3
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	1a9b      	subs	r3, r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	3342      	adds	r3, #66	; 0x42
 80073f0:	4602      	mov	r2, r0
 80073f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80073f4:	7bfa      	ldrb	r2, [r7, #15]
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	1a9b      	subs	r3, r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	440b      	add	r3, r1
 8007402:	333f      	adds	r3, #63	; 0x3f
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007408:	7bfa      	ldrb	r2, [r7, #15]
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	4613      	mov	r3, r2
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	1a9b      	subs	r3, r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	440b      	add	r3, r1
 8007416:	3344      	adds	r3, #68	; 0x44
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800741c:	7bfa      	ldrb	r2, [r7, #15]
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	3348      	adds	r3, #72	; 0x48
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007430:	7bfa      	ldrb	r2, [r7, #15]
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	4613      	mov	r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	1a9b      	subs	r3, r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	3350      	adds	r3, #80	; 0x50
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	3301      	adds	r3, #1
 8007448:	73fb      	strb	r3, [r7, #15]
 800744a:	7bfa      	ldrb	r2, [r7, #15]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	429a      	cmp	r2, r3
 8007452:	d3af      	bcc.n	80073b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
 8007458:	e044      	b.n	80074e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800745a:	7bfa      	ldrb	r2, [r7, #15]
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	4613      	mov	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	440b      	add	r3, r1
 8007468:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007470:	7bfa      	ldrb	r2, [r7, #15]
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007482:	7bfa      	ldrb	r2, [r7, #15]
 8007484:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007486:	7bfa      	ldrb	r2, [r7, #15]
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	1a9b      	subs	r3, r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	440b      	add	r3, r1
 8007494:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800749c:	7bfa      	ldrb	r2, [r7, #15]
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	4613      	mov	r3, r2
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074b2:	7bfa      	ldrb	r2, [r7, #15]
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	4613      	mov	r3, r2
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	440b      	add	r3, r1
 80074c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80074c8:	7bfa      	ldrb	r2, [r7, #15]
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	3301      	adds	r3, #1
 80074e2:	73fb      	strb	r3, [r7, #15]
 80074e4:	7bfa      	ldrb	r2, [r7, #15]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d3b5      	bcc.n	800745a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	687e      	ldr	r6, [r7, #4]
 80074f6:	466d      	mov	r5, sp
 80074f8:	f106 0410 	add.w	r4, r6, #16
 80074fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007508:	e885 0003 	stmia.w	r5, {r0, r1}
 800750c:	1d33      	adds	r3, r6, #4
 800750e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007510:	6838      	ldr	r0, [r7, #0]
 8007512:	f008 ff5b 	bl	80103cc <USB_DevInit>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e014      	b.n	8007552 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	2b01      	cmp	r3, #1
 800753e:	d102      	bne.n	8007546 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 f891 	bl	8008668 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4618      	mov	r0, r3
 800754c:	f009 ffdb 	bl	8011506 <USB_DevDisconnect>

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800755a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_PCD_Start+0x1c>
 8007572:	2302      	movs	r3, #2
 8007574:	e020      	b.n	80075b8 <HAL_PCD_Start+0x5e>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007582:	2b01      	cmp	r3, #1
 8007584:	d109      	bne.n	800759a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800758a:	2b01      	cmp	r3, #1
 800758c:	d005      	beq.n	800759a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f008 fec8 	bl	8010334 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f009 ff8b 	bl	80114c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80075c0:	b590      	push	{r4, r7, lr}
 80075c2:	b08d      	sub	sp, #52	; 0x34
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f00a f849 	bl	801166e <USB_GetMode>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 83ca 	bne.w	8007d78 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f009 ffad 	bl	8011548 <USB_ReadInterrupts>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 83c0 	beq.w	8007d76 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f009 ffa4 	bl	8011548 <USB_ReadInterrupts>
 8007600:	4603      	mov	r3, r0
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b02      	cmp	r3, #2
 8007608:	d107      	bne.n	800761a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695a      	ldr	r2, [r3, #20]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f002 0202 	and.w	r2, r2, #2
 8007618:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f009 ff92 	bl	8011548 <USB_ReadInterrupts>
 8007624:	4603      	mov	r3, r0
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b10      	cmp	r3, #16
 800762c:	d161      	bne.n	80076f2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0210 	bic.w	r2, r2, #16
 800763c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	f003 020f 	and.w	r2, r3, #15
 800764a:	4613      	mov	r3, r2
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	1a9b      	subs	r3, r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4413      	add	r3, r2
 800765a:	3304      	adds	r3, #4
 800765c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	0c5b      	lsrs	r3, r3, #17
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	2b02      	cmp	r3, #2
 8007668:	d124      	bne.n	80076b4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007670:	4013      	ands	r3, r2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d035      	beq.n	80076e2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	091b      	lsrs	r3, r3, #4
 800767e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007684:	b29b      	uxth	r3, r3
 8007686:	461a      	mov	r2, r3
 8007688:	6a38      	ldr	r0, [r7, #32]
 800768a:	f009 fdc9 	bl	8011220 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	091b      	lsrs	r3, r3, #4
 8007696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800769a:	441a      	add	r2, r3
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	699a      	ldr	r2, [r3, #24]
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	091b      	lsrs	r3, r3, #4
 80076a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076ac:	441a      	add	r2, r3
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	619a      	str	r2, [r3, #24]
 80076b2:	e016      	b.n	80076e2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	0c5b      	lsrs	r3, r3, #17
 80076b8:	f003 030f 	and.w	r3, r3, #15
 80076bc:	2b06      	cmp	r3, #6
 80076be:	d110      	bne.n	80076e2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076c6:	2208      	movs	r2, #8
 80076c8:	4619      	mov	r1, r3
 80076ca:	6a38      	ldr	r0, [r7, #32]
 80076cc:	f009 fda8 	bl	8011220 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	699a      	ldr	r2, [r3, #24]
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	091b      	lsrs	r3, r3, #4
 80076d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076dc:	441a      	add	r2, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f042 0210 	orr.w	r2, r2, #16
 80076f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f009 ff26 	bl	8011548 <USB_ReadInterrupts>
 80076fc:	4603      	mov	r3, r0
 80076fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007702:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007706:	d16e      	bne.n	80077e6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	f009 ff2c 	bl	801156e <USB_ReadDevAllOutEpInterrupt>
 8007716:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007718:	e062      	b.n	80077e0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d057      	beq.n	80077d4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	4611      	mov	r1, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f009 ff51 	bl	80115d6 <USB_ReadDevOutEPInterrupt>
 8007734:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00c      	beq.n	800775a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774c:	461a      	mov	r2, r3
 800774e:	2301      	movs	r3, #1
 8007750:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fddd 	bl	8008314 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00c      	beq.n	800777e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	461a      	mov	r2, r3
 8007772:	2308      	movs	r3, #8
 8007774:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fed7 	bl	800852c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f003 0310 	and.w	r3, r3, #16
 8007784:	2b00      	cmp	r3, #0
 8007786:	d008      	beq.n	800779a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007794:	461a      	mov	r2, r3
 8007796:	2310      	movs	r3, #16
 8007798:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d008      	beq.n	80077b6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b0:	461a      	mov	r2, r3
 80077b2:	2320      	movs	r3, #32
 80077b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d009      	beq.n	80077d4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077cc:	461a      	mov	r2, r3
 80077ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	3301      	adds	r3, #1
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	085b      	lsrs	r3, r3, #1
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d199      	bne.n	800771a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f009 feac 	bl	8011548 <USB_ReadInterrupts>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077fa:	f040 80c0 	bne.w	800797e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f009 fecd 	bl	80115a2 <USB_ReadDevAllInEpInterrupt>
 8007808:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800780e:	e0b2      	b.n	8007976 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 80a7 	beq.w	800796a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007822:	b2d2      	uxtb	r2, r2
 8007824:	4611      	mov	r1, r2
 8007826:	4618      	mov	r0, r3
 8007828:	f009 fef3 	bl	8011612 <USB_ReadDevInEPInterrupt>
 800782c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d057      	beq.n	80078e8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	2201      	movs	r2, #1
 8007840:	fa02 f303 	lsl.w	r3, r2, r3
 8007844:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	43db      	mvns	r3, r3
 8007852:	69f9      	ldr	r1, [r7, #28]
 8007854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007858:	4013      	ands	r3, r2
 800785a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007868:	461a      	mov	r2, r3
 800786a:	2301      	movs	r3, #1
 800786c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d132      	bne.n	80078dc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787a:	4613      	mov	r3, r2
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	3348      	adds	r3, #72	; 0x48
 8007886:	6819      	ldr	r1, [r3, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788c:	4613      	mov	r3, r2
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4403      	add	r3, r0
 8007896:	3344      	adds	r3, #68	; 0x44
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4419      	add	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a0:	4613      	mov	r3, r2
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4403      	add	r3, r0
 80078aa:	3348      	adds	r3, #72	; 0x48
 80078ac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d113      	bne.n	80078dc <HAL_PCD_IRQHandler+0x31c>
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b8:	4613      	mov	r3, r2
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	440b      	add	r3, r1
 80078c2:	3350      	adds	r3, #80	; 0x50
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d108      	bne.n	80078dc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078d4:	461a      	mov	r2, r3
 80078d6:	2101      	movs	r1, #1
 80078d8:	f009 fefc 	bl	80116d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f00d fa3b 	bl	8014d5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fe:	461a      	mov	r2, r3
 8007900:	2308      	movs	r3, #8
 8007902:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f003 0310 	and.w	r3, r3, #16
 800790a:	2b00      	cmp	r3, #0
 800790c:	d008      	beq.n	8007920 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791a:	461a      	mov	r2, r3
 800791c:	2310      	movs	r3, #16
 800791e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d008      	beq.n	800793c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007936:	461a      	mov	r2, r3
 8007938:	2340      	movs	r3, #64	; 0x40
 800793a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d008      	beq.n	8007958 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007952:	461a      	mov	r2, r3
 8007954:	2302      	movs	r3, #2
 8007956:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fc48 	bl	80081fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	3301      	adds	r3, #1
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	2b00      	cmp	r3, #0
 800797a:	f47f af49 	bne.w	8007810 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f009 fde0 	bl	8011548 <USB_ReadInterrupts>
 8007988:	4603      	mov	r3, r0
 800798a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800798e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007992:	d122      	bne.n	80079da <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d108      	bne.n	80079c4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80079ba:	2100      	movs	r1, #0
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fe77 	bl	80086b0 <HAL_PCDEx_LPM_Callback>
 80079c2:	e002      	b.n	80079ca <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f00d fa41 	bl	8014e4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	695a      	ldr	r2, [r3, #20]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80079d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	f009 fdb2 	bl	8011548 <USB_ReadInterrupts>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ee:	d112      	bne.n	8007a16 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d102      	bne.n	8007a06 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f00d f9fd 	bl	8014e00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f009 fd94 	bl	8011548 <USB_ReadInterrupts>
 8007a20:	4603      	mov	r3, r0
 8007a22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a2a:	d121      	bne.n	8007a70 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695a      	ldr	r2, [r3, #20]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007a3a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d111      	bne.n	8007a6a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a54:	089b      	lsrs	r3, r3, #2
 8007a56:	f003 020f 	and.w	r2, r3, #15
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007a60:	2101      	movs	r1, #1
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fe24 	bl	80086b0 <HAL_PCDEx_LPM_Callback>
 8007a68:	e002      	b.n	8007a70 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f00d f9c8 	bl	8014e00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f009 fd67 	bl	8011548 <USB_ReadInterrupts>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a84:	f040 80c7 	bne.w	8007c16 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	69fa      	ldr	r2, [r7, #28]
 8007a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a96:	f023 0301 	bic.w	r3, r3, #1
 8007a9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2110      	movs	r1, #16
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f008 fdf0 	bl	8010688 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aac:	e056      	b.n	8007b5c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aba:	461a      	mov	r2, r3
 8007abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ac0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad2:	0151      	lsls	r1, r2, #5
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	440a      	add	r2, r1
 8007ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007adc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ae0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af2:	0151      	lsls	r1, r2, #5
 8007af4:	69fa      	ldr	r2, [r7, #28]
 8007af6:	440a      	add	r2, r1
 8007af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	69fa      	ldr	r2, [r7, #28]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	69fa      	ldr	r2, [r7, #28]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	3301      	adds	r3, #1
 8007b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d3a3      	bcc.n	8007aae <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007b78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d016      	beq.n	8007bb0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b92:	f043 030b 	orr.w	r3, r3, #11
 8007b96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ba8:	f043 030b 	orr.w	r3, r3, #11
 8007bac:	6453      	str	r3, [r2, #68]	; 0x44
 8007bae:	e015      	b.n	8007bdc <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb6:	695a      	ldr	r2, [r3, #20]
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	f242 032b 	movw	r3, #8235	; 0x202b
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bd6:	f043 030b 	orr.w	r3, r3, #11
 8007bda:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007c00:	461a      	mov	r2, r3
 8007c02:	f009 fd67 	bl	80116d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695a      	ldr	r2, [r3, #20]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f009 fc94 	bl	8011548 <USB_ReadInterrupts>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c2a:	d124      	bne.n	8007c76 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f009 fd2b 	bl	801168c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f008 fd85 	bl	801074a <USB_GetDevSpeed>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681c      	ldr	r4, [r3, #0]
 8007c4c:	f001 fcd6 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 8007c50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	461a      	mov	r2, r3
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f008 fac8 	bl	80101f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f00d f8a4 	bl	8014dae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	695a      	ldr	r2, [r3, #20]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f009 fc64 	bl	8011548 <USB_ReadInterrupts>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d10a      	bne.n	8007ca0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f00d f881 	bl	8014d92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	695a      	ldr	r2, [r3, #20]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f002 0208 	and.w	r2, r2, #8
 8007c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f009 fc4f 	bl	8011548 <USB_ReadInterrupts>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb4:	d10f      	bne.n	8007cd6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f00d f8e3 	bl	8014e8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	695a      	ldr	r2, [r3, #20]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f009 fc34 	bl	8011548 <USB_ReadInterrupts>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cea:	d10f      	bne.n	8007d0c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f00d f8b6 	bl	8014e68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695a      	ldr	r2, [r3, #20]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f009 fc19 	bl	8011548 <USB_ReadInterrupts>
 8007d16:	4603      	mov	r3, r0
 8007d18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d20:	d10a      	bne.n	8007d38 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f00d f8c4 	bl	8014eb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695a      	ldr	r2, [r3, #20]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f009 fc03 	bl	8011548 <USB_ReadInterrupts>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d115      	bne.n	8007d78 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	f003 0304 	and.w	r3, r3, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f00d f8b4 	bl	8014ecc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6859      	ldr	r1, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	605a      	str	r2, [r3, #4]
 8007d74:	e000      	b.n	8007d78 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007d76:	bf00      	nop
    }
  }
}
 8007d78:	3734      	adds	r7, #52	; 0x34
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd90      	pop	{r4, r7, pc}

08007d7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_PCD_SetAddress+0x1a>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e013      	b.n	8007dc0 <HAL_PCD_SetAddress+0x42>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	78fa      	ldrb	r2, [r7, #3]
 8007da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	4611      	mov	r1, r2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f009 fb61 	bl	8011478 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	70fb      	strb	r3, [r7, #3]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	803b      	strh	r3, [r7, #0]
 8007dde:	4613      	mov	r3, r2
 8007de0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da0f      	bge.n	8007e0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	f003 020f 	and.w	r2, r3, #15
 8007df4:	4613      	mov	r3, r2
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	1a9b      	subs	r3, r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	3338      	adds	r3, #56	; 0x38
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	4413      	add	r3, r2
 8007e02:	3304      	adds	r3, #4
 8007e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	705a      	strb	r2, [r3, #1]
 8007e0c:	e00f      	b.n	8007e2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	f003 020f 	and.w	r2, r3, #15
 8007e14:	4613      	mov	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	1a9b      	subs	r3, r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	4413      	add	r3, r2
 8007e24:	3304      	adds	r3, #4
 8007e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007e3a:	883a      	ldrh	r2, [r7, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	78ba      	ldrb	r2, [r7, #2]
 8007e44:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	785b      	ldrb	r3, [r3, #1]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007e58:	78bb      	ldrb	r3, [r7, #2]
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d102      	bne.n	8007e64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_PCD_EP_Open+0xaa>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e00e      	b.n	8007e90 <HAL_PCD_EP_Open+0xc8>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68f9      	ldr	r1, [r7, #12]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f008 fc87 	bl	8010794 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007e8e:	7afb      	ldrb	r3, [r7, #11]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da0f      	bge.n	8007ecc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	f003 020f 	and.w	r2, r3, #15
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	1a9b      	subs	r3, r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	3338      	adds	r3, #56	; 0x38
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	705a      	strb	r2, [r3, #1]
 8007eca:	e00f      	b.n	8007eec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	f003 020f 	and.w	r2, r3, #15
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	1a9b      	subs	r3, r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	f003 030f 	and.w	r3, r3, #15
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <HAL_PCD_EP_Close+0x6e>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e00e      	b.n	8007f24 <HAL_PCD_EP_Close+0x8c>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f008 fcc5 	bl	80108a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	607a      	str	r2, [r7, #4]
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f3c:	7afb      	ldrb	r3, [r7, #11]
 8007f3e:	f003 020f 	and.w	r2, r3, #15
 8007f42:	4613      	mov	r3, r2
 8007f44:	00db      	lsls	r3, r3, #3
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	3304      	adds	r3, #4
 8007f54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2200      	movs	r2, #0
 8007f66:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d102      	bne.n	8007f88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d109      	bne.n	8007fa6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	6979      	ldr	r1, [r7, #20]
 8007fa0:	f008 ffa8 	bl	8010ef4 <USB_EP0StartXfer>
 8007fa4:	e008      	b.n	8007fb8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6979      	ldr	r1, [r7, #20]
 8007fb4:	f008 fd52 	bl	8010a5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	f003 020f 	and.w	r2, r3, #15
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	1a9b      	subs	r3, r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007fe4:	681b      	ldr	r3, [r3, #0]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b086      	sub	sp, #24
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
 8007ffe:	460b      	mov	r3, r1
 8008000:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	f003 020f 	and.w	r2, r3, #15
 8008008:	4613      	mov	r3, r2
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	1a9b      	subs	r3, r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	3338      	adds	r3, #56	; 0x38
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	4413      	add	r3, r2
 8008016:	3304      	adds	r3, #4
 8008018:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2200      	movs	r2, #0
 800802a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2201      	movs	r2, #1
 8008030:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008032:	7afb      	ldrb	r3, [r7, #11]
 8008034:	f003 030f 	and.w	r3, r3, #15
 8008038:	b2da      	uxtb	r2, r3
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d102      	bne.n	800804c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800804c:	7afb      	ldrb	r3, [r7, #11]
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	2b00      	cmp	r3, #0
 8008054:	d109      	bne.n	800806a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	461a      	mov	r2, r3
 8008062:	6979      	ldr	r1, [r7, #20]
 8008064:	f008 ff46 	bl	8010ef4 <USB_EP0StartXfer>
 8008068:	e008      	b.n	800807c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	461a      	mov	r2, r3
 8008076:	6979      	ldr	r1, [r7, #20]
 8008078:	f008 fcf0 	bl	8010a5c <USB_EPStartXfer>
  }

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	460b      	mov	r3, r1
 8008090:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008092:	78fb      	ldrb	r3, [r7, #3]
 8008094:	f003 020f 	and.w	r2, r3, #15
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	429a      	cmp	r2, r3
 800809e:	d901      	bls.n	80080a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e050      	b.n	8008146 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80080a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	da0f      	bge.n	80080cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080ac:	78fb      	ldrb	r3, [r7, #3]
 80080ae:	f003 020f 	and.w	r2, r3, #15
 80080b2:	4613      	mov	r3, r2
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	1a9b      	subs	r3, r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	3338      	adds	r3, #56	; 0x38
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	3304      	adds	r3, #4
 80080c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	705a      	strb	r2, [r3, #1]
 80080ca:	e00d      	b.n	80080e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80080cc:	78fa      	ldrb	r2, [r7, #3]
 80080ce:	4613      	mov	r3, r2
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	1a9b      	subs	r3, r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	4413      	add	r3, r2
 80080de:	3304      	adds	r3, #4
 80080e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2201      	movs	r2, #1
 80080ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008100:	2b01      	cmp	r3, #1
 8008102:	d101      	bne.n	8008108 <HAL_PCD_EP_SetStall+0x82>
 8008104:	2302      	movs	r3, #2
 8008106:	e01e      	b.n	8008146 <HAL_PCD_EP_SetStall+0xc0>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68f9      	ldr	r1, [r7, #12]
 8008116:	4618      	mov	r0, r3
 8008118:	f009 f8da 	bl	80112d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	f003 030f 	and.w	r3, r3, #15
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	b2d9      	uxtb	r1, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008136:	461a      	mov	r2, r3
 8008138:	f009 facc 	bl	80116d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	f003 020f 	and.w	r2, r3, #15
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d901      	bls.n	800816c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e042      	b.n	80081f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800816c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008170:	2b00      	cmp	r3, #0
 8008172:	da0f      	bge.n	8008194 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	f003 020f 	and.w	r2, r3, #15
 800817a:	4613      	mov	r3, r2
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	1a9b      	subs	r3, r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	3338      	adds	r3, #56	; 0x38
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	4413      	add	r3, r2
 8008188:	3304      	adds	r3, #4
 800818a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	705a      	strb	r2, [r3, #1]
 8008192:	e00f      	b.n	80081b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	f003 020f 	and.w	r2, r3, #15
 800819a:	4613      	mov	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	1a9b      	subs	r3, r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4413      	add	r3, r2
 80081aa:	3304      	adds	r3, #4
 80081ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_PCD_EP_ClrStall+0x86>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e00e      	b.n	80081f2 <HAL_PCD_EP_ClrStall+0xa4>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68f9      	ldr	r1, [r7, #12]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f009 f8e2 	bl	80113ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b08a      	sub	sp, #40	; 0x28
 80081fe:	af02      	add	r7, sp, #8
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	4613      	mov	r3, r2
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	1a9b      	subs	r3, r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	3338      	adds	r3, #56	; 0x38
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	4413      	add	r3, r2
 800821e:	3304      	adds	r3, #4
 8008220:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	429a      	cmp	r2, r3
 800822c:	d901      	bls.n	8008232 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e06c      	b.n	800830c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	695a      	ldr	r2, [r3, #20]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	429a      	cmp	r2, r3
 8008246:	d902      	bls.n	800824e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	3303      	adds	r3, #3
 8008252:	089b      	lsrs	r3, r3, #2
 8008254:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008256:	e02b      	b.n	80082b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	695a      	ldr	r2, [r3, #20]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	69fa      	ldr	r2, [r7, #28]
 800826a:	429a      	cmp	r2, r3
 800826c:	d902      	bls.n	8008274 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	3303      	adds	r3, #3
 8008278:	089b      	lsrs	r3, r3, #2
 800827a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68d9      	ldr	r1, [r3, #12]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	b2da      	uxtb	r2, r3
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800828c:	b2db      	uxtb	r3, r3
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	4603      	mov	r3, r0
 8008292:	6978      	ldr	r0, [r7, #20]
 8008294:	f008 ff86 	bl	80111a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	441a      	add	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	441a      	add	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d809      	bhi.n	80082da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d203      	bcs.n	80082da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1be      	bne.n	8008258 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	695a      	ldr	r2, [r3, #20]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d811      	bhi.n	800830a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	2201      	movs	r2, #1
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	43db      	mvns	r3, r3
 8008300:	6939      	ldr	r1, [r7, #16]
 8008302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008306:	4013      	ands	r3, r2
 8008308:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	333c      	adds	r3, #60	; 0x3c
 800832c:	3304      	adds	r3, #4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	2b01      	cmp	r3, #1
 8008348:	f040 80a0 	bne.w	800848c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f003 0308 	and.w	r3, r3, #8
 8008352:	2b00      	cmp	r3, #0
 8008354:	d015      	beq.n	8008382 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4a72      	ldr	r2, [pc, #456]	; (8008524 <PCD_EP_OutXfrComplete_int+0x210>)
 800835a:	4293      	cmp	r3, r2
 800835c:	f240 80dd 	bls.w	800851a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 80d7 	beq.w	800851a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008378:	461a      	mov	r2, r3
 800837a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837e:	6093      	str	r3, [r2, #8]
 8008380:	e0cb      	b.n	800851a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f003 0320 	and.w	r3, r3, #32
 8008388:	2b00      	cmp	r3, #0
 800838a:	d009      	beq.n	80083a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008398:	461a      	mov	r2, r3
 800839a:	2320      	movs	r3, #32
 800839c:	6093      	str	r3, [r2, #8]
 800839e:	e0bc      	b.n	800851a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 80b7 	bne.w	800851a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4a5d      	ldr	r2, [pc, #372]	; (8008524 <PCD_EP_OutXfrComplete_int+0x210>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d90f      	bls.n	80083d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ca:	461a      	mov	r2, r3
 80083cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083d0:	6093      	str	r3, [r2, #8]
 80083d2:	e0a2      	b.n	800851a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	4613      	mov	r3, r2
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	1a9b      	subs	r3, r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	440b      	add	r3, r1
 80083e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80083e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	0159      	lsls	r1, r3, #5
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	440b      	add	r3, r1
 80083f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80083fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4403      	add	r3, r0
 800840a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800840e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4613      	mov	r3, r2
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	1a9b      	subs	r3, r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	440b      	add	r3, r1
 800841e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	4613      	mov	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	1a9b      	subs	r3, r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4403      	add	r3, r0
 8008432:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4419      	add	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	4613      	mov	r3, r2
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	1a9b      	subs	r3, r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4403      	add	r3, r0
 8008448:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800844c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d114      	bne.n	800847e <PCD_EP_OutXfrComplete_int+0x16a>
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4613      	mov	r3, r2
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	1a9b      	subs	r3, r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	440b      	add	r3, r1
 8008462:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d108      	bne.n	800847e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008476:	461a      	mov	r2, r3
 8008478:	2101      	movs	r1, #1
 800847a:	f009 f92b 	bl	80116d4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f00c fc4f 	bl	8014d28 <HAL_PCD_DataOutStageCallback>
 800848a:	e046      	b.n	800851a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4a26      	ldr	r2, [pc, #152]	; (8008528 <PCD_EP_OutXfrComplete_int+0x214>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d124      	bne.n	80084de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084aa:	461a      	mov	r2, r3
 80084ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084b0:	6093      	str	r3, [r2, #8]
 80084b2:	e032      	b.n	800851a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d008      	beq.n	80084d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ca:	461a      	mov	r2, r3
 80084cc:	2320      	movs	r3, #32
 80084ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f00c fc26 	bl	8014d28 <HAL_PCD_DataOutStageCallback>
 80084dc:	e01d      	b.n	800851a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d114      	bne.n	800850e <PCD_EP_OutXfrComplete_int+0x1fa>
 80084e4:	6879      	ldr	r1, [r7, #4]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	4613      	mov	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	1a9b      	subs	r3, r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d108      	bne.n	800850e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6818      	ldr	r0, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008506:	461a      	mov	r2, r3
 8008508:	2100      	movs	r1, #0
 800850a:	f009 f8e3 	bl	80116d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f00c fc07 	bl	8014d28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	4f54300a 	.word	0x4f54300a
 8008528:	4f54310a 	.word	0x4f54310a

0800852c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	333c      	adds	r3, #60	; 0x3c
 8008544:	3304      	adds	r3, #4
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4a15      	ldr	r2, [pc, #84]	; (80085b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d90e      	bls.n	8008580 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008578:	461a      	mov	r2, r3
 800857a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800857e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f00c fbbf 	bl	8014d04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4a0a      	ldr	r2, [pc, #40]	; (80085b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d90c      	bls.n	80085a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d108      	bne.n	80085a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80085a0:	461a      	mov	r2, r3
 80085a2:	2101      	movs	r1, #1
 80085a4:	f009 f896 	bl	80116d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	4f54300a 	.word	0x4f54300a

080085b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
 80085c4:	4613      	mov	r3, r2
 80085c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d107      	bne.n	80085e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80085d6:	883b      	ldrh	r3, [r7, #0]
 80085d8:	0419      	lsls	r1, r3, #16
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	629a      	str	r2, [r3, #40]	; 0x28
 80085e4:	e028      	b.n	8008638 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	0c1b      	lsrs	r3, r3, #16
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
 80085f8:	e00d      	b.n	8008616 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	3340      	adds	r3, #64	; 0x40
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	0c1b      	lsrs	r3, r3, #16
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	4413      	add	r3, r2
 800860e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	3301      	adds	r3, #1
 8008614:	73fb      	strb	r3, [r7, #15]
 8008616:	7bfa      	ldrb	r2, [r7, #15]
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	3b01      	subs	r3, #1
 800861c:	429a      	cmp	r2, r3
 800861e:	d3ec      	bcc.n	80085fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008620:	883b      	ldrh	r3, [r7, #0]
 8008622:	0418      	lsls	r0, r3, #16
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6819      	ldr	r1, [r3, #0]
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	3b01      	subs	r3, #1
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	4302      	orrs	r2, r0
 8008630:	3340      	adds	r3, #64	; 0x40
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	440b      	add	r3, r1
 8008636:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	460b      	mov	r3, r1
 8008650:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	887a      	ldrh	r2, [r7, #2]
 8008658:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008696:	4b05      	ldr	r3, [pc, #20]	; (80086ac <HAL_PCDEx_ActivateLPM+0x44>)
 8008698:	4313      	orrs	r3, r2
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	10000003 	.word	0x10000003

080086b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80086cc:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a04      	ldr	r2, [pc, #16]	; (80086e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80086d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d6:	6013      	str	r3, [r2, #0]
}
 80086d8:	bf00      	nop
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	58024800 	.word	0x58024800

080086e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80086f0:	4b19      	ldr	r3, [pc, #100]	; (8008758 <HAL_PWREx_ConfigSupply+0x70>)
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d00a      	beq.n	8008712 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80086fc:	4b16      	ldr	r3, [pc, #88]	; (8008758 <HAL_PWREx_ConfigSupply+0x70>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0307 	and.w	r3, r3, #7
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	429a      	cmp	r2, r3
 8008708:	d001      	beq.n	800870e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e01f      	b.n	800874e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	e01d      	b.n	800874e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008712:	4b11      	ldr	r3, [pc, #68]	; (8008758 <HAL_PWREx_ConfigSupply+0x70>)
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f023 0207 	bic.w	r2, r3, #7
 800871a:	490f      	ldr	r1, [pc, #60]	; (8008758 <HAL_PWREx_ConfigSupply+0x70>)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4313      	orrs	r3, r2
 8008720:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008722:	f7fc fb7d 	bl	8004e20 <HAL_GetTick>
 8008726:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008728:	e009      	b.n	800873e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800872a:	f7fc fb79 	bl	8004e20 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008738:	d901      	bls.n	800873e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e007      	b.n	800874e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800873e:	4b06      	ldr	r3, [pc, #24]	; (8008758 <HAL_PWREx_ConfigSupply+0x70>)
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800874a:	d1ee      	bne.n	800872a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	58024800 	.word	0x58024800

0800875c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	4a04      	ldr	r2, [pc, #16]	; (8008778 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800876a:	60d3      	str	r3, [r2, #12]
}
 800876c:	bf00      	nop
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	58024800 	.word	0x58024800

0800877c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08c      	sub	sp, #48	; 0x30
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e3ff      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 8087 	beq.w	80088aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800879c:	4b99      	ldr	r3, [pc, #612]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087a6:	4b97      	ldr	r3, [pc, #604]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80087ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ae:	2b10      	cmp	r3, #16
 80087b0:	d007      	beq.n	80087c2 <HAL_RCC_OscConfig+0x46>
 80087b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b4:	2b18      	cmp	r3, #24
 80087b6:	d110      	bne.n	80087da <HAL_RCC_OscConfig+0x5e>
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d10b      	bne.n	80087da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087c2:	4b90      	ldr	r3, [pc, #576]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d06c      	beq.n	80088a8 <HAL_RCC_OscConfig+0x12c>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d168      	bne.n	80088a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e3d9      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e2:	d106      	bne.n	80087f2 <HAL_RCC_OscConfig+0x76>
 80087e4:	4b87      	ldr	r3, [pc, #540]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a86      	ldr	r2, [pc, #536]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	e02e      	b.n	8008850 <HAL_RCC_OscConfig+0xd4>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10c      	bne.n	8008814 <HAL_RCC_OscConfig+0x98>
 80087fa:	4b82      	ldr	r3, [pc, #520]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a81      	ldr	r2, [pc, #516]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	4b7f      	ldr	r3, [pc, #508]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a7e      	ldr	r2, [pc, #504]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800880c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	e01d      	b.n	8008850 <HAL_RCC_OscConfig+0xd4>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800881c:	d10c      	bne.n	8008838 <HAL_RCC_OscConfig+0xbc>
 800881e:	4b79      	ldr	r3, [pc, #484]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a78      	ldr	r2, [pc, #480]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	4b76      	ldr	r3, [pc, #472]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a75      	ldr	r2, [pc, #468]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	e00b      	b.n	8008850 <HAL_RCC_OscConfig+0xd4>
 8008838:	4b72      	ldr	r3, [pc, #456]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a71      	ldr	r2, [pc, #452]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800883e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	4b6f      	ldr	r3, [pc, #444]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a6e      	ldr	r2, [pc, #440]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800884a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800884e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d013      	beq.n	8008880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008858:	f7fc fae2 	bl	8004e20 <HAL_GetTick>
 800885c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800885e:	e008      	b.n	8008872 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008860:	f7fc fade 	bl	8004e20 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	2b64      	cmp	r3, #100	; 0x64
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e38d      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008872:	4b64      	ldr	r3, [pc, #400]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0f0      	beq.n	8008860 <HAL_RCC_OscConfig+0xe4>
 800887e:	e014      	b.n	80088aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008880:	f7fc face 	bl	8004e20 <HAL_GetTick>
 8008884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008888:	f7fc faca 	bl	8004e20 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b64      	cmp	r3, #100	; 0x64
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e379      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800889a:	4b5a      	ldr	r3, [pc, #360]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f0      	bne.n	8008888 <HAL_RCC_OscConfig+0x10c>
 80088a6:	e000      	b.n	80088aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 80ae 	beq.w	8008a14 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088b8:	4b52      	ldr	r3, [pc, #328]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088c2:	4b50      	ldr	r3, [pc, #320]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <HAL_RCC_OscConfig+0x162>
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	2b18      	cmp	r3, #24
 80088d2:	d13a      	bne.n	800894a <HAL_RCC_OscConfig+0x1ce>
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d135      	bne.n	800894a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088de:	4b49      	ldr	r3, [pc, #292]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0304 	and.w	r3, r3, #4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <HAL_RCC_OscConfig+0x17a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e34b      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f6:	f7fc fac3 	bl	8004e80 <HAL_GetREVID>
 80088fa:	4603      	mov	r3, r0
 80088fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8008900:	4293      	cmp	r3, r2
 8008902:	d817      	bhi.n	8008934 <HAL_RCC_OscConfig+0x1b8>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	2b40      	cmp	r3, #64	; 0x40
 800890a:	d108      	bne.n	800891e <HAL_RCC_OscConfig+0x1a2>
 800890c:	4b3d      	ldr	r3, [pc, #244]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008914:	4a3b      	ldr	r2, [pc, #236]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800891a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800891c:	e07a      	b.n	8008a14 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800891e:	4b39      	ldr	r3, [pc, #228]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	031b      	lsls	r3, r3, #12
 800892c:	4935      	ldr	r1, [pc, #212]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 800892e:	4313      	orrs	r3, r2
 8008930:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008932:	e06f      	b.n	8008a14 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008934:	4b33      	ldr	r3, [pc, #204]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	061b      	lsls	r3, r3, #24
 8008942:	4930      	ldr	r1, [pc, #192]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008944:	4313      	orrs	r3, r2
 8008946:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008948:	e064      	b.n	8008a14 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d045      	beq.n	80089de <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008952:	4b2c      	ldr	r3, [pc, #176]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f023 0219 	bic.w	r2, r3, #25
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	4929      	ldr	r1, [pc, #164]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008960:	4313      	orrs	r3, r2
 8008962:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008964:	f7fc fa5c 	bl	8004e20 <HAL_GetTick>
 8008968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800896a:	e008      	b.n	800897e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800896c:	f7fc fa58 	bl	8004e20 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b02      	cmp	r3, #2
 8008978:	d901      	bls.n	800897e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e307      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800897e:	4b21      	ldr	r3, [pc, #132]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0304 	and.w	r3, r3, #4
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0f0      	beq.n	800896c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800898a:	f7fc fa79 	bl	8004e80 <HAL_GetREVID>
 800898e:	4603      	mov	r3, r0
 8008990:	f241 0203 	movw	r2, #4099	; 0x1003
 8008994:	4293      	cmp	r3, r2
 8008996:	d817      	bhi.n	80089c8 <HAL_RCC_OscConfig+0x24c>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d108      	bne.n	80089b2 <HAL_RCC_OscConfig+0x236>
 80089a0:	4b18      	ldr	r3, [pc, #96]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80089a8:	4a16      	ldr	r2, [pc, #88]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ae:	6053      	str	r3, [r2, #4]
 80089b0:	e030      	b.n	8008a14 <HAL_RCC_OscConfig+0x298>
 80089b2:	4b14      	ldr	r3, [pc, #80]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	031b      	lsls	r3, r3, #12
 80089c0:	4910      	ldr	r1, [pc, #64]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	604b      	str	r3, [r1, #4]
 80089c6:	e025      	b.n	8008a14 <HAL_RCC_OscConfig+0x298>
 80089c8:	4b0e      	ldr	r3, [pc, #56]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	061b      	lsls	r3, r3, #24
 80089d6:	490b      	ldr	r1, [pc, #44]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	604b      	str	r3, [r1, #4]
 80089dc:	e01a      	b.n	8008a14 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089de:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <HAL_RCC_OscConfig+0x288>)
 80089e4:	f023 0301 	bic.w	r3, r3, #1
 80089e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ea:	f7fc fa19 	bl	8004e20 <HAL_GetTick>
 80089ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089f0:	e00a      	b.n	8008a08 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089f2:	f7fc fa15 	bl	8004e20 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d903      	bls.n	8008a08 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e2c4      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
 8008a04:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a08:	4ba4      	ldr	r3, [pc, #656]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1ee      	bne.n	80089f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0310 	and.w	r3, r3, #16
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80a9 	beq.w	8008b74 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a22:	4b9e      	ldr	r3, [pc, #632]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a2c:	4b9b      	ldr	r3, [pc, #620]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a30:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b08      	cmp	r3, #8
 8008a36:	d007      	beq.n	8008a48 <HAL_RCC_OscConfig+0x2cc>
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2b18      	cmp	r3, #24
 8008a3c:	d13a      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x338>
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f003 0303 	and.w	r3, r3, #3
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d135      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a48:	4b94      	ldr	r3, [pc, #592]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <HAL_RCC_OscConfig+0x2e4>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	2b80      	cmp	r3, #128	; 0x80
 8008a5a:	d001      	beq.n	8008a60 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e296      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a60:	f7fc fa0e 	bl	8004e80 <HAL_GetREVID>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d817      	bhi.n	8008a9e <HAL_RCC_OscConfig+0x322>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	d108      	bne.n	8008a88 <HAL_RCC_OscConfig+0x30c>
 8008a76:	4b89      	ldr	r3, [pc, #548]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a7e:	4a87      	ldr	r2, [pc, #540]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008a80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a84:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a86:	e075      	b.n	8008b74 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a88:	4b84      	ldr	r3, [pc, #528]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	069b      	lsls	r3, r3, #26
 8008a96:	4981      	ldr	r1, [pc, #516]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a9c:	e06a      	b.n	8008b74 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a9e:	4b7f      	ldr	r3, [pc, #508]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	061b      	lsls	r3, r3, #24
 8008aac:	497b      	ldr	r1, [pc, #492]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ab2:	e05f      	b.n	8008b74 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d042      	beq.n	8008b42 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008abc:	4b77      	ldr	r3, [pc, #476]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a76      	ldr	r2, [pc, #472]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac8:	f7fc f9aa 	bl	8004e20 <HAL_GetTick>
 8008acc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ace:	e008      	b.n	8008ae2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008ad0:	f7fc f9a6 	bl	8004e20 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e255      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ae2:	4b6e      	ldr	r3, [pc, #440]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0f0      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008aee:	f7fc f9c7 	bl	8004e80 <HAL_GetREVID>
 8008af2:	4603      	mov	r3, r0
 8008af4:	f241 0203 	movw	r2, #4099	; 0x1003
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d817      	bhi.n	8008b2c <HAL_RCC_OscConfig+0x3b0>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d108      	bne.n	8008b16 <HAL_RCC_OscConfig+0x39a>
 8008b04:	4b65      	ldr	r3, [pc, #404]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b0c:	4a63      	ldr	r2, [pc, #396]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b12:	6053      	str	r3, [r2, #4]
 8008b14:	e02e      	b.n	8008b74 <HAL_RCC_OscConfig+0x3f8>
 8008b16:	4b61      	ldr	r3, [pc, #388]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	069b      	lsls	r3, r3, #26
 8008b24:	495d      	ldr	r1, [pc, #372]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	604b      	str	r3, [r1, #4]
 8008b2a:	e023      	b.n	8008b74 <HAL_RCC_OscConfig+0x3f8>
 8008b2c:	4b5b      	ldr	r3, [pc, #364]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	061b      	lsls	r3, r3, #24
 8008b3a:	4958      	ldr	r1, [pc, #352]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	60cb      	str	r3, [r1, #12]
 8008b40:	e018      	b.n	8008b74 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b42:	4b56      	ldr	r3, [pc, #344]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a55      	ldr	r2, [pc, #340]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b4e:	f7fc f967 	bl	8004e20 <HAL_GetTick>
 8008b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b54:	e008      	b.n	8008b68 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b56:	f7fc f963 	bl	8004e20 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d901      	bls.n	8008b68 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e212      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b68:	4b4c      	ldr	r3, [pc, #304]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1f0      	bne.n	8008b56 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0308 	and.w	r3, r3, #8
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d036      	beq.n	8008bee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d019      	beq.n	8008bbc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b88:	4b44      	ldr	r3, [pc, #272]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b8c:	4a43      	ldr	r2, [pc, #268]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008b8e:	f043 0301 	orr.w	r3, r3, #1
 8008b92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b94:	f7fc f944 	bl	8004e20 <HAL_GetTick>
 8008b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b9a:	e008      	b.n	8008bae <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b9c:	f7fc f940 	bl	8004e20 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e1ef      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008bae:	4b3b      	ldr	r3, [pc, #236]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0f0      	beq.n	8008b9c <HAL_RCC_OscConfig+0x420>
 8008bba:	e018      	b.n	8008bee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bbc:	4b37      	ldr	r3, [pc, #220]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc0:	4a36      	ldr	r2, [pc, #216]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008bc2:	f023 0301 	bic.w	r3, r3, #1
 8008bc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bc8:	f7fc f92a 	bl	8004e20 <HAL_GetTick>
 8008bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bce:	e008      	b.n	8008be2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bd0:	f7fc f926 	bl	8004e20 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d901      	bls.n	8008be2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e1d5      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008be2:	4b2e      	ldr	r3, [pc, #184]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1f0      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d036      	beq.n	8008c68 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d019      	beq.n	8008c36 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c02:	4b26      	ldr	r3, [pc, #152]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a25      	ldr	r2, [pc, #148]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c0e:	f7fc f907 	bl	8004e20 <HAL_GetTick>
 8008c12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c14:	e008      	b.n	8008c28 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c16:	f7fc f903 	bl	8004e20 <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d901      	bls.n	8008c28 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e1b2      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c28:	4b1c      	ldr	r3, [pc, #112]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0f0      	beq.n	8008c16 <HAL_RCC_OscConfig+0x49a>
 8008c34:	e018      	b.n	8008c68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c36:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a18      	ldr	r2, [pc, #96]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c42:	f7fc f8ed 	bl	8004e20 <HAL_GetTick>
 8008c46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c48:	e008      	b.n	8008c5c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c4a:	f7fc f8e9 	bl	8004e20 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d901      	bls.n	8008c5c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e198      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <HAL_RCC_OscConfig+0x520>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f0      	bne.n	8008c4a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 8085 	beq.w	8008d80 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c76:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <HAL_RCC_OscConfig+0x524>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a09      	ldr	r2, [pc, #36]	; (8008ca0 <HAL_RCC_OscConfig+0x524>)
 8008c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c82:	f7fc f8cd 	bl	8004e20 <HAL_GetTick>
 8008c86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c88:	e00c      	b.n	8008ca4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008c8a:	f7fc f8c9 	bl	8004e20 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b64      	cmp	r3, #100	; 0x64
 8008c96:	d905      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e178      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
 8008c9c:	58024400 	.word	0x58024400
 8008ca0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ca4:	4b96      	ldr	r3, [pc, #600]	; (8008f00 <HAL_RCC_OscConfig+0x784>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0ec      	beq.n	8008c8a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d106      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x54a>
 8008cb8:	4b92      	ldr	r3, [pc, #584]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbc:	4a91      	ldr	r2, [pc, #580]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008cbe:	f043 0301 	orr.w	r3, r3, #1
 8008cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8008cc4:	e02d      	b.n	8008d22 <HAL_RCC_OscConfig+0x5a6>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10c      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x56c>
 8008cce:	4b8d      	ldr	r3, [pc, #564]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd2:	4a8c      	ldr	r2, [pc, #560]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008cd4:	f023 0301 	bic.w	r3, r3, #1
 8008cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8008cda:	4b8a      	ldr	r3, [pc, #552]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cde:	4a89      	ldr	r2, [pc, #548]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008ce0:	f023 0304 	bic.w	r3, r3, #4
 8008ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ce6:	e01c      	b.n	8008d22 <HAL_RCC_OscConfig+0x5a6>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	2b05      	cmp	r3, #5
 8008cee:	d10c      	bne.n	8008d0a <HAL_RCC_OscConfig+0x58e>
 8008cf0:	4b84      	ldr	r3, [pc, #528]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf4:	4a83      	ldr	r2, [pc, #524]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008cf6:	f043 0304 	orr.w	r3, r3, #4
 8008cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8008cfc:	4b81      	ldr	r3, [pc, #516]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d00:	4a80      	ldr	r2, [pc, #512]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008d02:	f043 0301 	orr.w	r3, r3, #1
 8008d06:	6713      	str	r3, [r2, #112]	; 0x70
 8008d08:	e00b      	b.n	8008d22 <HAL_RCC_OscConfig+0x5a6>
 8008d0a:	4b7e      	ldr	r3, [pc, #504]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	4a7d      	ldr	r2, [pc, #500]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008d10:	f023 0301 	bic.w	r3, r3, #1
 8008d14:	6713      	str	r3, [r2, #112]	; 0x70
 8008d16:	4b7b      	ldr	r3, [pc, #492]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1a:	4a7a      	ldr	r2, [pc, #488]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008d1c:	f023 0304 	bic.w	r3, r3, #4
 8008d20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d015      	beq.n	8008d56 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d2a:	f7fc f879 	bl	8004e20 <HAL_GetTick>
 8008d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d30:	e00a      	b.n	8008d48 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d32:	f7fc f875 	bl	8004e20 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d901      	bls.n	8008d48 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e122      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d48:	4b6e      	ldr	r3, [pc, #440]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0ee      	beq.n	8008d32 <HAL_RCC_OscConfig+0x5b6>
 8008d54:	e014      	b.n	8008d80 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d56:	f7fc f863 	bl	8004e20 <HAL_GetTick>
 8008d5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d5c:	e00a      	b.n	8008d74 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d5e:	f7fc f85f 	bl	8004e20 <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d901      	bls.n	8008d74 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e10c      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d74:	4b63      	ldr	r3, [pc, #396]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1ee      	bne.n	8008d5e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8101 	beq.w	8008f8c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d8a:	4b5e      	ldr	r3, [pc, #376]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d92:	2b18      	cmp	r3, #24
 8008d94:	f000 80bc 	beq.w	8008f10 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	f040 8095 	bne.w	8008ecc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008da2:	4b58      	ldr	r3, [pc, #352]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a57      	ldr	r2, [pc, #348]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dae:	f7fc f837 	bl	8004e20 <HAL_GetTick>
 8008db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008db4:	e008      	b.n	8008dc8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008db6:	f7fc f833 	bl	8004e20 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d901      	bls.n	8008dc8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e0e2      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008dc8:	4b4e      	ldr	r3, [pc, #312]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1f0      	bne.n	8008db6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dd4:	4b4b      	ldr	r3, [pc, #300]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dd8:	4b4b      	ldr	r3, [pc, #300]	; (8008f08 <HAL_RCC_OscConfig+0x78c>)
 8008dda:	4013      	ands	r3, r2
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008de4:	0112      	lsls	r2, r2, #4
 8008de6:	430a      	orrs	r2, r1
 8008de8:	4946      	ldr	r1, [pc, #280]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	628b      	str	r3, [r1, #40]	; 0x28
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	3b01      	subs	r3, #1
 8008df4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	025b      	lsls	r3, r3, #9
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	041b      	lsls	r3, r3, #16
 8008e0c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e10:	431a      	orrs	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e16:	3b01      	subs	r3, #1
 8008e18:	061b      	lsls	r3, r3, #24
 8008e1a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e1e:	4939      	ldr	r1, [pc, #228]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008e24:	4b37      	ldr	r3, [pc, #220]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	4a36      	ldr	r2, [pc, #216]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e2a:	f023 0301 	bic.w	r3, r3, #1
 8008e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e30:	4b34      	ldr	r3, [pc, #208]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e34:	4b35      	ldr	r3, [pc, #212]	; (8008f0c <HAL_RCC_OscConfig+0x790>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e3c:	00d2      	lsls	r2, r2, #3
 8008e3e:	4931      	ldr	r1, [pc, #196]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e40:	4313      	orrs	r3, r2
 8008e42:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e44:	4b2f      	ldr	r3, [pc, #188]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	f023 020c 	bic.w	r2, r3, #12
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e50:	492c      	ldr	r1, [pc, #176]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e56:	4b2b      	ldr	r3, [pc, #172]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	f023 0202 	bic.w	r2, r3, #2
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e62:	4928      	ldr	r1, [pc, #160]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e68:	4b26      	ldr	r3, [pc, #152]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6c:	4a25      	ldr	r2, [pc, #148]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e74:	4b23      	ldr	r3, [pc, #140]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	4a22      	ldr	r2, [pc, #136]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e80:	4b20      	ldr	r3, [pc, #128]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4a1f      	ldr	r2, [pc, #124]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e8c:	4b1d      	ldr	r3, [pc, #116]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	4a1c      	ldr	r2, [pc, #112]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e92:	f043 0301 	orr.w	r3, r3, #1
 8008e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e98:	4b1a      	ldr	r3, [pc, #104]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a19      	ldr	r2, [pc, #100]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea4:	f7fb ffbc 	bl	8004e20 <HAL_GetTick>
 8008ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eac:	f7fb ffb8 	bl	8004e20 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e067      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ebe:	4b11      	ldr	r3, [pc, #68]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f0      	beq.n	8008eac <HAL_RCC_OscConfig+0x730>
 8008eca:	e05f      	b.n	8008f8c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ecc:	4b0d      	ldr	r3, [pc, #52]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a0c      	ldr	r2, [pc, #48]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed8:	f7fb ffa2 	bl	8004e20 <HAL_GetTick>
 8008edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ee0:	f7fb ff9e 	bl	8004e20 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e04d      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ef2:	4b04      	ldr	r3, [pc, #16]	; (8008f04 <HAL_RCC_OscConfig+0x788>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1f0      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x764>
 8008efe:	e045      	b.n	8008f8c <HAL_RCC_OscConfig+0x810>
 8008f00:	58024800 	.word	0x58024800
 8008f04:	58024400 	.word	0x58024400
 8008f08:	fffffc0c 	.word	0xfffffc0c
 8008f0c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008f10:	4b21      	ldr	r3, [pc, #132]	; (8008f98 <HAL_RCC_OscConfig+0x81c>)
 8008f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f16:	4b20      	ldr	r3, [pc, #128]	; (8008f98 <HAL_RCC_OscConfig+0x81c>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d031      	beq.n	8008f88 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f003 0203 	and.w	r2, r3, #3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d12a      	bne.n	8008f88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	091b      	lsrs	r3, r3, #4
 8008f36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d122      	bne.n	8008f88 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d11a      	bne.n	8008f88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	0a5b      	lsrs	r3, r3, #9
 8008f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d111      	bne.n	8008f88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	0c1b      	lsrs	r3, r3, #16
 8008f68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d108      	bne.n	8008f88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	0e1b      	lsrs	r3, r3, #24
 8008f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f82:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d001      	beq.n	8008f8c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e000      	b.n	8008f8e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3730      	adds	r7, #48	; 0x30
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	58024400 	.word	0x58024400

08008f9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e19c      	b.n	80092ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fb0:	4b8a      	ldr	r3, [pc, #552]	; (80091dc <HAL_RCC_ClockConfig+0x240>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 030f 	and.w	r3, r3, #15
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d910      	bls.n	8008fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fbe:	4b87      	ldr	r3, [pc, #540]	; (80091dc <HAL_RCC_ClockConfig+0x240>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f023 020f 	bic.w	r2, r3, #15
 8008fc6:	4985      	ldr	r1, [pc, #532]	; (80091dc <HAL_RCC_ClockConfig+0x240>)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fce:	4b83      	ldr	r3, [pc, #524]	; (80091dc <HAL_RCC_ClockConfig+0x240>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 030f 	and.w	r3, r3, #15
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d001      	beq.n	8008fe0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e184      	b.n	80092ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d010      	beq.n	800900e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	4b7b      	ldr	r3, [pc, #492]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d908      	bls.n	800900e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ffc:	4b78      	ldr	r3, [pc, #480]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	4975      	ldr	r1, [pc, #468]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800900a:	4313      	orrs	r3, r2
 800900c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0308 	and.w	r3, r3, #8
 8009016:	2b00      	cmp	r3, #0
 8009018:	d010      	beq.n	800903c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	695a      	ldr	r2, [r3, #20]
 800901e:	4b70      	ldr	r3, [pc, #448]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009026:	429a      	cmp	r2, r3
 8009028:	d908      	bls.n	800903c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800902a:	4b6d      	ldr	r3, [pc, #436]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	496a      	ldr	r1, [pc, #424]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 8009038:	4313      	orrs	r3, r2
 800903a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b00      	cmp	r3, #0
 8009046:	d010      	beq.n	800906a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699a      	ldr	r2, [r3, #24]
 800904c:	4b64      	ldr	r3, [pc, #400]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009054:	429a      	cmp	r2, r3
 8009056:	d908      	bls.n	800906a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009058:	4b61      	ldr	r3, [pc, #388]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	495e      	ldr	r1, [pc, #376]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 8009066:	4313      	orrs	r3, r2
 8009068:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0320 	and.w	r3, r3, #32
 8009072:	2b00      	cmp	r3, #0
 8009074:	d010      	beq.n	8009098 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	69da      	ldr	r2, [r3, #28]
 800907a:	4b59      	ldr	r3, [pc, #356]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009082:	429a      	cmp	r2, r3
 8009084:	d908      	bls.n	8009098 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009086:	4b56      	ldr	r3, [pc, #344]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	4953      	ldr	r1, [pc, #332]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 8009094:	4313      	orrs	r3, r2
 8009096:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d010      	beq.n	80090c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68da      	ldr	r2, [r3, #12]
 80090a8:	4b4d      	ldr	r3, [pc, #308]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d908      	bls.n	80090c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090b4:	4b4a      	ldr	r3, [pc, #296]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	f023 020f 	bic.w	r2, r3, #15
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	4947      	ldr	r1, [pc, #284]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d055      	beq.n	800917e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090d2:	4b43      	ldr	r3, [pc, #268]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	4940      	ldr	r1, [pc, #256]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d107      	bne.n	80090fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090ec:	4b3c      	ldr	r3, [pc, #240]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d121      	bne.n	800913c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e0f6      	b.n	80092ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	2b03      	cmp	r3, #3
 8009102:	d107      	bne.n	8009114 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009104:	4b36      	ldr	r3, [pc, #216]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d115      	bne.n	800913c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e0ea      	b.n	80092ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d107      	bne.n	800912c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800911c:	4b30      	ldr	r3, [pc, #192]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e0de      	b.n	80092ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800912c:	4b2c      	ldr	r3, [pc, #176]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0304 	and.w	r3, r3, #4
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0d6      	b.n	80092ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800913c:	4b28      	ldr	r3, [pc, #160]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	f023 0207 	bic.w	r2, r3, #7
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	4925      	ldr	r1, [pc, #148]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800914a:	4313      	orrs	r3, r2
 800914c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800914e:	f7fb fe67 	bl	8004e20 <HAL_GetTick>
 8009152:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009154:	e00a      	b.n	800916c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009156:	f7fb fe63 	bl	8004e20 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	f241 3288 	movw	r2, #5000	; 0x1388
 8009164:	4293      	cmp	r3, r2
 8009166:	d901      	bls.n	800916c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e0be      	b.n	80092ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800916c:	4b1c      	ldr	r3, [pc, #112]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	00db      	lsls	r3, r3, #3
 800917a:	429a      	cmp	r2, r3
 800917c:	d1eb      	bne.n	8009156 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d010      	beq.n	80091ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	4b14      	ldr	r3, [pc, #80]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	429a      	cmp	r2, r3
 8009198:	d208      	bcs.n	80091ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800919a:	4b11      	ldr	r3, [pc, #68]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	f023 020f 	bic.w	r2, r3, #15
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	490e      	ldr	r1, [pc, #56]	; (80091e0 <HAL_RCC_ClockConfig+0x244>)
 80091a8:	4313      	orrs	r3, r2
 80091aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091ac:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <HAL_RCC_ClockConfig+0x240>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 030f 	and.w	r3, r3, #15
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d214      	bcs.n	80091e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ba:	4b08      	ldr	r3, [pc, #32]	; (80091dc <HAL_RCC_ClockConfig+0x240>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f023 020f 	bic.w	r2, r3, #15
 80091c2:	4906      	ldr	r1, [pc, #24]	; (80091dc <HAL_RCC_ClockConfig+0x240>)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ca:	4b04      	ldr	r3, [pc, #16]	; (80091dc <HAL_RCC_ClockConfig+0x240>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 030f 	and.w	r3, r3, #15
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d005      	beq.n	80091e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e086      	b.n	80092ea <HAL_RCC_ClockConfig+0x34e>
 80091dc:	52002000 	.word	0x52002000
 80091e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d010      	beq.n	8009212 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691a      	ldr	r2, [r3, #16]
 80091f4:	4b3f      	ldr	r3, [pc, #252]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d208      	bcs.n	8009212 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009200:	4b3c      	ldr	r3, [pc, #240]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	4939      	ldr	r1, [pc, #228]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 800920e:	4313      	orrs	r3, r2
 8009210:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0308 	and.w	r3, r3, #8
 800921a:	2b00      	cmp	r3, #0
 800921c:	d010      	beq.n	8009240 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	695a      	ldr	r2, [r3, #20]
 8009222:	4b34      	ldr	r3, [pc, #208]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800922a:	429a      	cmp	r2, r3
 800922c:	d208      	bcs.n	8009240 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800922e:	4b31      	ldr	r3, [pc, #196]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	492e      	ldr	r1, [pc, #184]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 800923c:	4313      	orrs	r3, r2
 800923e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0310 	and.w	r3, r3, #16
 8009248:	2b00      	cmp	r3, #0
 800924a:	d010      	beq.n	800926e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	699a      	ldr	r2, [r3, #24]
 8009250:	4b28      	ldr	r3, [pc, #160]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009258:	429a      	cmp	r2, r3
 800925a:	d208      	bcs.n	800926e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800925c:	4b25      	ldr	r3, [pc, #148]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 800925e:	69db      	ldr	r3, [r3, #28]
 8009260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	4922      	ldr	r1, [pc, #136]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 800926a:	4313      	orrs	r3, r2
 800926c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0320 	and.w	r3, r3, #32
 8009276:	2b00      	cmp	r3, #0
 8009278:	d010      	beq.n	800929c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	69da      	ldr	r2, [r3, #28]
 800927e:	4b1d      	ldr	r3, [pc, #116]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009286:	429a      	cmp	r2, r3
 8009288:	d208      	bcs.n	800929c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800928a:	4b1a      	ldr	r3, [pc, #104]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	4917      	ldr	r1, [pc, #92]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 8009298:	4313      	orrs	r3, r2
 800929a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800929c:	f000 f834 	bl	8009308 <HAL_RCC_GetSysClockFreq>
 80092a0:	4602      	mov	r2, r0
 80092a2:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	4912      	ldr	r1, [pc, #72]	; (80092f8 <HAL_RCC_ClockConfig+0x35c>)
 80092ae:	5ccb      	ldrb	r3, [r1, r3]
 80092b0:	f003 031f 	and.w	r3, r3, #31
 80092b4:	fa22 f303 	lsr.w	r3, r2, r3
 80092b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092ba:	4b0e      	ldr	r3, [pc, #56]	; (80092f4 <HAL_RCC_ClockConfig+0x358>)
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	f003 030f 	and.w	r3, r3, #15
 80092c2:	4a0d      	ldr	r2, [pc, #52]	; (80092f8 <HAL_RCC_ClockConfig+0x35c>)
 80092c4:	5cd3      	ldrb	r3, [r2, r3]
 80092c6:	f003 031f 	and.w	r3, r3, #31
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	fa22 f303 	lsr.w	r3, r2, r3
 80092d0:	4a0a      	ldr	r2, [pc, #40]	; (80092fc <HAL_RCC_ClockConfig+0x360>)
 80092d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092d4:	4a0a      	ldr	r2, [pc, #40]	; (8009300 <HAL_RCC_ClockConfig+0x364>)
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80092da:	4b0a      	ldr	r3, [pc, #40]	; (8009304 <HAL_RCC_ClockConfig+0x368>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4618      	mov	r0, r3
 80092e0:	f7f9 f87c 	bl	80023dc <HAL_InitTick>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3718      	adds	r7, #24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	58024400 	.word	0x58024400
 80092f8:	080183e0 	.word	0x080183e0
 80092fc:	24000048 	.word	0x24000048
 8009300:	24000044 	.word	0x24000044
 8009304:	240000dc 	.word	0x240000dc

08009308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009308:	b480      	push	{r7}
 800930a:	b089      	sub	sp, #36	; 0x24
 800930c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800930e:	4bb3      	ldr	r3, [pc, #716]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009316:	2b18      	cmp	r3, #24
 8009318:	f200 8155 	bhi.w	80095c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800931c:	a201      	add	r2, pc, #4	; (adr r2, 8009324 <HAL_RCC_GetSysClockFreq+0x1c>)
 800931e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009322:	bf00      	nop
 8009324:	08009389 	.word	0x08009389
 8009328:	080095c7 	.word	0x080095c7
 800932c:	080095c7 	.word	0x080095c7
 8009330:	080095c7 	.word	0x080095c7
 8009334:	080095c7 	.word	0x080095c7
 8009338:	080095c7 	.word	0x080095c7
 800933c:	080095c7 	.word	0x080095c7
 8009340:	080095c7 	.word	0x080095c7
 8009344:	080093af 	.word	0x080093af
 8009348:	080095c7 	.word	0x080095c7
 800934c:	080095c7 	.word	0x080095c7
 8009350:	080095c7 	.word	0x080095c7
 8009354:	080095c7 	.word	0x080095c7
 8009358:	080095c7 	.word	0x080095c7
 800935c:	080095c7 	.word	0x080095c7
 8009360:	080095c7 	.word	0x080095c7
 8009364:	080093b5 	.word	0x080093b5
 8009368:	080095c7 	.word	0x080095c7
 800936c:	080095c7 	.word	0x080095c7
 8009370:	080095c7 	.word	0x080095c7
 8009374:	080095c7 	.word	0x080095c7
 8009378:	080095c7 	.word	0x080095c7
 800937c:	080095c7 	.word	0x080095c7
 8009380:	080095c7 	.word	0x080095c7
 8009384:	080093bb 	.word	0x080093bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009388:	4b94      	ldr	r3, [pc, #592]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0320 	and.w	r3, r3, #32
 8009390:	2b00      	cmp	r3, #0
 8009392:	d009      	beq.n	80093a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009394:	4b91      	ldr	r3, [pc, #580]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	08db      	lsrs	r3, r3, #3
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	4a90      	ldr	r2, [pc, #576]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093a0:	fa22 f303 	lsr.w	r3, r2, r3
 80093a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80093a6:	e111      	b.n	80095cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80093a8:	4b8d      	ldr	r3, [pc, #564]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093aa:	61bb      	str	r3, [r7, #24]
    break;
 80093ac:	e10e      	b.n	80095cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80093ae:	4b8d      	ldr	r3, [pc, #564]	; (80095e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093b0:	61bb      	str	r3, [r7, #24]
    break;
 80093b2:	e10b      	b.n	80095cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80093b4:	4b8c      	ldr	r3, [pc, #560]	; (80095e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093b6:	61bb      	str	r3, [r7, #24]
    break;
 80093b8:	e108      	b.n	80095cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093ba:	4b88      	ldr	r3, [pc, #544]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80093c4:	4b85      	ldr	r3, [pc, #532]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c8:	091b      	lsrs	r3, r3, #4
 80093ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093d0:	4b82      	ldr	r3, [pc, #520]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80093da:	4b80      	ldr	r3, [pc, #512]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093de:	08db      	lsrs	r3, r3, #3
 80093e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	fb02 f303 	mul.w	r3, r2, r3
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 80e1 	beq.w	80095c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b02      	cmp	r3, #2
 8009402:	f000 8083 	beq.w	800950c <HAL_RCC_GetSysClockFreq+0x204>
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b02      	cmp	r3, #2
 800940a:	f200 80a1 	bhi.w	8009550 <HAL_RCC_GetSysClockFreq+0x248>
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <HAL_RCC_GetSysClockFreq+0x114>
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d056      	beq.n	80094c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800941a:	e099      	b.n	8009550 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800941c:	4b6f      	ldr	r3, [pc, #444]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0320 	and.w	r3, r3, #32
 8009424:	2b00      	cmp	r3, #0
 8009426:	d02d      	beq.n	8009484 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009428:	4b6c      	ldr	r3, [pc, #432]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	08db      	lsrs	r3, r3, #3
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	4a6b      	ldr	r2, [pc, #428]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009434:	fa22 f303 	lsr.w	r3, r2, r3
 8009438:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	ee07 3a90 	vmov	s15, r3
 8009440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009452:	4b62      	ldr	r3, [pc, #392]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009462:	ed97 6a02 	vldr	s12, [r7, #8]
 8009466:	eddf 5a61 	vldr	s11, [pc, #388]	; 80095ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800946a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009482:	e087      	b.n	8009594 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80095f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009496:	4b51      	ldr	r3, [pc, #324]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80094aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80095ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80094ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094c6:	e065      	b.n	8009594 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80095f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094da:	4b40      	ldr	r3, [pc, #256]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80094ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80095ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80094f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800950a:	e043      	b.n	8009594 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009516:	eddf 6a38 	vldr	s13, [pc, #224]	; 80095f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800951a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800951e:	4b2f      	ldr	r3, [pc, #188]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009532:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80095ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8009536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800953a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800953e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800954a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800954e:	e021      	b.n	8009594 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80095f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800955e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009562:	4b1e      	ldr	r3, [pc, #120]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009572:	ed97 6a02 	vldr	s12, [r7, #8]
 8009576:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80095ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800957a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800957e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800958a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800958e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009592:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009594:	4b11      	ldr	r3, [pc, #68]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009598:	0a5b      	lsrs	r3, r3, #9
 800959a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800959e:	3301      	adds	r3, #1
 80095a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	ee07 3a90 	vmov	s15, r3
 80095a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80095b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b8:	ee17 3a90 	vmov	r3, s15
 80095bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80095be:	e005      	b.n	80095cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	61bb      	str	r3, [r7, #24]
    break;
 80095c4:	e002      	b.n	80095cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80095c6:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095c8:	61bb      	str	r3, [r7, #24]
    break;
 80095ca:	bf00      	nop
  }

  return sysclockfreq;
 80095cc:	69bb      	ldr	r3, [r7, #24]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3724      	adds	r7, #36	; 0x24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	58024400 	.word	0x58024400
 80095e0:	03d09000 	.word	0x03d09000
 80095e4:	003d0900 	.word	0x003d0900
 80095e8:	017d7840 	.word	0x017d7840
 80095ec:	46000000 	.word	0x46000000
 80095f0:	4c742400 	.word	0x4c742400
 80095f4:	4a742400 	.word	0x4a742400
 80095f8:	4bbebc20 	.word	0x4bbebc20

080095fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009602:	f7ff fe81 	bl	8009308 <HAL_RCC_GetSysClockFreq>
 8009606:	4602      	mov	r2, r0
 8009608:	4b10      	ldr	r3, [pc, #64]	; (800964c <HAL_RCC_GetHCLKFreq+0x50>)
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	0a1b      	lsrs	r3, r3, #8
 800960e:	f003 030f 	and.w	r3, r3, #15
 8009612:	490f      	ldr	r1, [pc, #60]	; (8009650 <HAL_RCC_GetHCLKFreq+0x54>)
 8009614:	5ccb      	ldrb	r3, [r1, r3]
 8009616:	f003 031f 	and.w	r3, r3, #31
 800961a:	fa22 f303 	lsr.w	r3, r2, r3
 800961e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009620:	4b0a      	ldr	r3, [pc, #40]	; (800964c <HAL_RCC_GetHCLKFreq+0x50>)
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	4a09      	ldr	r2, [pc, #36]	; (8009650 <HAL_RCC_GetHCLKFreq+0x54>)
 800962a:	5cd3      	ldrb	r3, [r2, r3]
 800962c:	f003 031f 	and.w	r3, r3, #31
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	fa22 f303 	lsr.w	r3, r2, r3
 8009636:	4a07      	ldr	r2, [pc, #28]	; (8009654 <HAL_RCC_GetHCLKFreq+0x58>)
 8009638:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800963a:	4a07      	ldr	r2, [pc, #28]	; (8009658 <HAL_RCC_GetHCLKFreq+0x5c>)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009640:	4b04      	ldr	r3, [pc, #16]	; (8009654 <HAL_RCC_GetHCLKFreq+0x58>)
 8009642:	681b      	ldr	r3, [r3, #0]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	58024400 	.word	0x58024400
 8009650:	080183e0 	.word	0x080183e0
 8009654:	24000048 	.word	0x24000048
 8009658:	24000044 	.word	0x24000044

0800965c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009660:	f7ff ffcc 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 8009664:	4602      	mov	r2, r0
 8009666:	4b06      	ldr	r3, [pc, #24]	; (8009680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	091b      	lsrs	r3, r3, #4
 800966c:	f003 0307 	and.w	r3, r3, #7
 8009670:	4904      	ldr	r1, [pc, #16]	; (8009684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009672:	5ccb      	ldrb	r3, [r1, r3]
 8009674:	f003 031f 	and.w	r3, r3, #31
 8009678:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800967c:	4618      	mov	r0, r3
 800967e:	bd80      	pop	{r7, pc}
 8009680:	58024400 	.word	0x58024400
 8009684:	080183e0 	.word	0x080183e0

08009688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800968c:	f7ff ffb6 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 8009690:	4602      	mov	r2, r0
 8009692:	4b06      	ldr	r3, [pc, #24]	; (80096ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	0a1b      	lsrs	r3, r3, #8
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	4904      	ldr	r1, [pc, #16]	; (80096b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800969e:	5ccb      	ldrb	r3, [r1, r3]
 80096a0:	f003 031f 	and.w	r3, r3, #31
 80096a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	58024400 	.word	0x58024400
 80096b0:	080183e0 	.word	0x080183e0

080096b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	223f      	movs	r2, #63	; 0x3f
 80096c2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80096c4:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <HAL_RCC_GetClockConfig+0x7c>)
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	f003 0207 	and.w	r2, r3, #7
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80096d0:	4b17      	ldr	r3, [pc, #92]	; (8009730 <HAL_RCC_GetClockConfig+0x7c>)
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80096dc:	4b14      	ldr	r3, [pc, #80]	; (8009730 <HAL_RCC_GetClockConfig+0x7c>)
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	f003 020f 	and.w	r2, r3, #15
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80096e8:	4b11      	ldr	r3, [pc, #68]	; (8009730 <HAL_RCC_GetClockConfig+0x7c>)
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80096f4:	4b0e      	ldr	r3, [pc, #56]	; (8009730 <HAL_RCC_GetClockConfig+0x7c>)
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009700:	4b0b      	ldr	r3, [pc, #44]	; (8009730 <HAL_RCC_GetClockConfig+0x7c>)
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800970c:	4b08      	ldr	r3, [pc, #32]	; (8009730 <HAL_RCC_GetClockConfig+0x7c>)
 800970e:	6a1b      	ldr	r3, [r3, #32]
 8009710:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009718:	4b06      	ldr	r3, [pc, #24]	; (8009734 <HAL_RCC_GetClockConfig+0x80>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 020f 	and.w	r2, r3, #15
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	601a      	str	r2, [r3, #0]
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	58024400 	.word	0x58024400
 8009734:	52002000 	.word	0x52002000

08009738 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009740:	2300      	movs	r3, #0
 8009742:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009744:	2300      	movs	r3, #0
 8009746:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d03f      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800975c:	d02a      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800975e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009762:	d824      	bhi.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009768:	d018      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800976a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800976e:	d81e      	bhi.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009778:	d007      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800977a:	e018      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800977c:	4bab      	ldr	r3, [pc, #684]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800977e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009780:	4aaa      	ldr	r2, [pc, #680]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009788:	e015      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3304      	adds	r3, #4
 800978e:	2102      	movs	r1, #2
 8009790:	4618      	mov	r0, r3
 8009792:	f001 fff3 	bl	800b77c <RCCEx_PLL2_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800979a:	e00c      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3324      	adds	r3, #36	; 0x24
 80097a0:	2102      	movs	r1, #2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f002 f89c 	bl	800b8e0 <RCCEx_PLL3_Config>
 80097a8:	4603      	mov	r3, r0
 80097aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80097ac:	e003      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	75fb      	strb	r3, [r7, #23]
      break;
 80097b2:	e000      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80097b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d109      	bne.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80097bc:	4b9b      	ldr	r3, [pc, #620]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097c8:	4998      	ldr	r1, [pc, #608]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	650b      	str	r3, [r1, #80]	; 0x50
 80097ce:	e001      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d03d      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	d826      	bhi.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80097e8:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80097ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ee:	bf00      	nop
 80097f0:	08009805 	.word	0x08009805
 80097f4:	08009813 	.word	0x08009813
 80097f8:	08009825 	.word	0x08009825
 80097fc:	0800983d 	.word	0x0800983d
 8009800:	0800983d 	.word	0x0800983d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009804:	4b89      	ldr	r3, [pc, #548]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	4a88      	ldr	r2, [pc, #544]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800980a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800980e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009810:	e015      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3304      	adds	r3, #4
 8009816:	2100      	movs	r1, #0
 8009818:	4618      	mov	r0, r3
 800981a:	f001 ffaf 	bl	800b77c <RCCEx_PLL2_Config>
 800981e:	4603      	mov	r3, r0
 8009820:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009822:	e00c      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	2100      	movs	r1, #0
 800982a:	4618      	mov	r0, r3
 800982c:	f002 f858 	bl	800b8e0 <RCCEx_PLL3_Config>
 8009830:	4603      	mov	r3, r0
 8009832:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009834:	e003      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	75fb      	strb	r3, [r7, #23]
      break;
 800983a:	e000      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800983c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d109      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009844:	4b79      	ldr	r3, [pc, #484]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009848:	f023 0207 	bic.w	r2, r3, #7
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009850:	4976      	ldr	r1, [pc, #472]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009852:	4313      	orrs	r3, r2
 8009854:	650b      	str	r3, [r1, #80]	; 0x50
 8009856:	e001      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009864:	2b00      	cmp	r3, #0
 8009866:	d042      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800986c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009870:	d02b      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009876:	d825      	bhi.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009878:	2bc0      	cmp	r3, #192	; 0xc0
 800987a:	d028      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800987c:	2bc0      	cmp	r3, #192	; 0xc0
 800987e:	d821      	bhi.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009880:	2b80      	cmp	r3, #128	; 0x80
 8009882:	d016      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009884:	2b80      	cmp	r3, #128	; 0x80
 8009886:	d81d      	bhi.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800988c:	2b40      	cmp	r3, #64	; 0x40
 800988e:	d007      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009890:	e018      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009892:	4b66      	ldr	r3, [pc, #408]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009896:	4a65      	ldr	r2, [pc, #404]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800989c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800989e:	e017      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3304      	adds	r3, #4
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 ff68 	bl	800b77c <RCCEx_PLL2_Config>
 80098ac:	4603      	mov	r3, r0
 80098ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80098b0:	e00e      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	3324      	adds	r3, #36	; 0x24
 80098b6:	2100      	movs	r1, #0
 80098b8:	4618      	mov	r0, r3
 80098ba:	f002 f811 	bl	800b8e0 <RCCEx_PLL3_Config>
 80098be:	4603      	mov	r3, r0
 80098c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80098c2:	e005      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	75fb      	strb	r3, [r7, #23]
      break;
 80098c8:	e002      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80098ca:	bf00      	nop
 80098cc:	e000      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80098ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d109      	bne.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80098d6:	4b55      	ldr	r3, [pc, #340]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e2:	4952      	ldr	r1, [pc, #328]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	650b      	str	r3, [r1, #80]	; 0x50
 80098e8:	e001      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d049      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009904:	d030      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009906:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800990a:	d82a      	bhi.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800990c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009910:	d02c      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009912:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009916:	d824      	bhi.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800991c:	d018      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800991e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009922:	d81e      	bhi.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800992c:	d007      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800992e:	e018      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009930:	4b3e      	ldr	r3, [pc, #248]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	4a3d      	ldr	r2, [pc, #244]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800993a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800993c:	e017      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3304      	adds	r3, #4
 8009942:	2100      	movs	r1, #0
 8009944:	4618      	mov	r0, r3
 8009946:	f001 ff19 	bl	800b77c <RCCEx_PLL2_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800994e:	e00e      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3324      	adds	r3, #36	; 0x24
 8009954:	2100      	movs	r1, #0
 8009956:	4618      	mov	r0, r3
 8009958:	f001 ffc2 	bl	800b8e0 <RCCEx_PLL3_Config>
 800995c:	4603      	mov	r3, r0
 800995e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009960:	e005      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	75fb      	strb	r3, [r7, #23]
      break;
 8009966:	e002      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009968:	bf00      	nop
 800996a:	e000      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800996c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10a      	bne.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009974:	4b2d      	ldr	r3, [pc, #180]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009978:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009982:	492a      	ldr	r1, [pc, #168]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009984:	4313      	orrs	r3, r2
 8009986:	658b      	str	r3, [r1, #88]	; 0x58
 8009988:	e001      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009996:	2b00      	cmp	r3, #0
 8009998:	d04c      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80099a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099a4:	d030      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80099a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099aa:	d82a      	bhi.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80099ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099b0:	d02c      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80099b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099b6:	d824      	bhi.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80099b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099bc:	d018      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80099be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099c2:	d81e      	bhi.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d003      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80099c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099cc:	d007      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80099ce:	e018      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d0:	4b16      	ldr	r3, [pc, #88]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	4a15      	ldr	r2, [pc, #84]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099dc:	e017      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	3304      	adds	r3, #4
 80099e2:	2100      	movs	r1, #0
 80099e4:	4618      	mov	r0, r3
 80099e6:	f001 fec9 	bl	800b77c <RCCEx_PLL2_Config>
 80099ea:	4603      	mov	r3, r0
 80099ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80099ee:	e00e      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3324      	adds	r3, #36	; 0x24
 80099f4:	2100      	movs	r1, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f001 ff72 	bl	800b8e0 <RCCEx_PLL3_Config>
 80099fc:	4603      	mov	r3, r0
 80099fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a00:	e005      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	75fb      	strb	r3, [r7, #23]
      break;
 8009a06:	e002      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009a08:	bf00      	nop
 8009a0a:	e000      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a0e:	7dfb      	ldrb	r3, [r7, #23]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10d      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009a14:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a18:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a22:	4902      	ldr	r1, [pc, #8]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	658b      	str	r3, [r1, #88]	; 0x58
 8009a28:	e004      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009a2a:	bf00      	nop
 8009a2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
 8009a32:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d032      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a44:	2b30      	cmp	r3, #48	; 0x30
 8009a46:	d01c      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009a48:	2b30      	cmp	r3, #48	; 0x30
 8009a4a:	d817      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009a4c:	2b20      	cmp	r3, #32
 8009a4e:	d00c      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009a50:	2b20      	cmp	r3, #32
 8009a52:	d813      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d016      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009a58:	2b10      	cmp	r3, #16
 8009a5a:	d10f      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a5c:	4baf      	ldr	r3, [pc, #700]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	4aae      	ldr	r2, [pc, #696]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009a68:	e00e      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	2102      	movs	r1, #2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f001 fe83 	bl	800b77c <RCCEx_PLL2_Config>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009a7a:	e005      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a80:	e002      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009a82:	bf00      	nop
 8009a84:	e000      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a88:	7dfb      	ldrb	r3, [r7, #23]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a8e:	4ba3      	ldr	r3, [pc, #652]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a9a:	49a0      	ldr	r1, [pc, #640]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009aa0:	e001      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d047      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009aba:	d030      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ac0:	d82a      	bhi.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009ac2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ac6:	d02c      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009ac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009acc:	d824      	bhi.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad2:	d018      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad8:	d81e      	bhi.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae2:	d007      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009ae4:	e018      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ae6:	4b8d      	ldr	r3, [pc, #564]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aea:	4a8c      	ldr	r2, [pc, #560]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009af0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009af2:	e017      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3304      	adds	r3, #4
 8009af8:	2100      	movs	r1, #0
 8009afa:	4618      	mov	r0, r3
 8009afc:	f001 fe3e 	bl	800b77c <RCCEx_PLL2_Config>
 8009b00:	4603      	mov	r3, r0
 8009b02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009b04:	e00e      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3324      	adds	r3, #36	; 0x24
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f001 fee7 	bl	800b8e0 <RCCEx_PLL3_Config>
 8009b12:	4603      	mov	r3, r0
 8009b14:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009b16:	e005      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b1c:	e002      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009b1e:	bf00      	nop
 8009b20:	e000      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b2a:	4b7c      	ldr	r3, [pc, #496]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b36:	4979      	ldr	r1, [pc, #484]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	650b      	str	r3, [r1, #80]	; 0x50
 8009b3c:	e001      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d049      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b56:	d02e      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b5c:	d828      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009b5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b62:	d02a      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009b64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b68:	d822      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009b6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b6e:	d026      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009b70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b74:	d81c      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b7a:	d010      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b80:	d816      	bhi.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01d      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b8a:	d111      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	2101      	movs	r1, #1
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 fdf2 	bl	800b77c <RCCEx_PLL2_Config>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009b9c:	e012      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3324      	adds	r3, #36	; 0x24
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f001 fe9b 	bl	800b8e0 <RCCEx_PLL3_Config>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009bae:	e009      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb4:	e006      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009bb6:	bf00      	nop
 8009bb8:	e004      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009bba:	bf00      	nop
 8009bbc:	e002      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009bbe:	bf00      	nop
 8009bc0:	e000      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d109      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009bca:	4b54      	ldr	r3, [pc, #336]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bd6:	4951      	ldr	r1, [pc, #324]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	650b      	str	r3, [r1, #80]	; 0x50
 8009bdc:	e001      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
 8009be0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d04b      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bf8:	d02e      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bfe:	d828      	bhi.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c04:	d02a      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c0a:	d822      	bhi.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009c0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c10:	d026      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009c12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c16:	d81c      	bhi.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c1c:	d010      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8009c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c22:	d816      	bhi.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d01d      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c2c:	d111      	bne.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	3304      	adds	r3, #4
 8009c32:	2101      	movs	r1, #1
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 fda1 	bl	800b77c <RCCEx_PLL2_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009c3e:	e012      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	3324      	adds	r3, #36	; 0x24
 8009c44:	2101      	movs	r1, #1
 8009c46:	4618      	mov	r0, r3
 8009c48:	f001 fe4a 	bl	800b8e0 <RCCEx_PLL3_Config>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009c50:	e009      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	75fb      	strb	r3, [r7, #23]
      break;
 8009c56:	e006      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009c58:	bf00      	nop
 8009c5a:	e004      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009c5c:	bf00      	nop
 8009c5e:	e002      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009c60:	bf00      	nop
 8009c62:	e000      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c66:	7dfb      	ldrb	r3, [r7, #23]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009c6c:	4b2b      	ldr	r3, [pc, #172]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c70:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c7a:	4928      	ldr	r1, [pc, #160]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	658b      	str	r3, [r1, #88]	; 0x58
 8009c80:	e001      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d02f      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c9a:	d00e      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ca0:	d814      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d015      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009caa:	d10f      	bne.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cac:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	4a1a      	ldr	r2, [pc, #104]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009cb8:	e00c      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	2101      	movs	r1, #1
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f001 fd5b 	bl	800b77c <RCCEx_PLL2_Config>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009cca:	e003      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd0:	e000      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d109      	bne.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009cda:	4b10      	ldr	r3, [pc, #64]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce6:	490d      	ldr	r1, [pc, #52]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	650b      	str	r3, [r1, #80]	; 0x50
 8009cec:	e001      	b.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
 8009cf0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d033      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d81c      	bhi.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d47 	.word	0x08009d47
 8009d10:	08009d21 	.word	0x08009d21
 8009d14:	08009d2f 	.word	0x08009d2f
 8009d18:	08009d47 	.word	0x08009d47
 8009d1c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d20:	4bb8      	ldr	r3, [pc, #736]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d24:	4ab7      	ldr	r2, [pc, #732]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009d2c:	e00c      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3304      	adds	r3, #4
 8009d32:	2102      	movs	r1, #2
 8009d34:	4618      	mov	r0, r3
 8009d36:	f001 fd21 	bl	800b77c <RCCEx_PLL2_Config>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009d3e:	e003      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	75fb      	strb	r3, [r7, #23]
      break;
 8009d44:	e000      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d109      	bne.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009d4e:	4bad      	ldr	r3, [pc, #692]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d52:	f023 0203 	bic.w	r2, r3, #3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d5a:	49aa      	ldr	r1, [pc, #680]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d60:	e001      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 8086 	beq.w	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d74:	4ba4      	ldr	r3, [pc, #656]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4aa3      	ldr	r2, [pc, #652]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d80:	f7fb f84e 	bl	8004e20 <HAL_GetTick>
 8009d84:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d86:	e009      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d88:	f7fb f84a 	bl	8004e20 <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	2b64      	cmp	r3, #100	; 0x64
 8009d94:	d902      	bls.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	75fb      	strb	r3, [r7, #23]
        break;
 8009d9a:	e005      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d9c:	4b9a      	ldr	r3, [pc, #616]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0ef      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d166      	bne.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009dae:	4b95      	ldr	r3, [pc, #596]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009db8:	4053      	eors	r3, r2
 8009dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d013      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009dc2:	4b90      	ldr	r3, [pc, #576]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dcc:	4b8d      	ldr	r3, [pc, #564]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd0:	4a8c      	ldr	r2, [pc, #560]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dd6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009dd8:	4b8a      	ldr	r3, [pc, #552]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ddc:	4a89      	ldr	r2, [pc, #548]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009de2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009de4:	4a87      	ldr	r2, [pc, #540]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df4:	d115      	bne.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df6:	f7fb f813 	bl	8004e20 <HAL_GetTick>
 8009dfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dfc:	e00b      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dfe:	f7fb f80f 	bl	8004e20 <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d902      	bls.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	75fb      	strb	r3, [r7, #23]
            break;
 8009e14:	e005      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e16:	4b7b      	ldr	r3, [pc, #492]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1a:	f003 0302 	and.w	r3, r3, #2
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0ed      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d126      	bne.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e36:	d10d      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009e38:	4b72      	ldr	r3, [pc, #456]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e46:	0919      	lsrs	r1, r3, #4
 8009e48:	4b70      	ldr	r3, [pc, #448]	; (800a00c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8009e4a:	400b      	ands	r3, r1
 8009e4c:	496d      	ldr	r1, [pc, #436]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	610b      	str	r3, [r1, #16]
 8009e52:	e005      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009e54:	4b6b      	ldr	r3, [pc, #428]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	4a6a      	ldr	r2, [pc, #424]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009e5e:	6113      	str	r3, [r2, #16]
 8009e60:	4b68      	ldr	r3, [pc, #416]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e6e:	4965      	ldr	r1, [pc, #404]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e70:	4313      	orrs	r3, r2
 8009e72:	670b      	str	r3, [r1, #112]	; 0x70
 8009e74:	e004      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	75bb      	strb	r3, [r7, #22]
 8009e7a:	e001      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
 8009e7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d07e      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e90:	2b28      	cmp	r3, #40	; 0x28
 8009e92:	d867      	bhi.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009e94:	a201      	add	r2, pc, #4	; (adr r2, 8009e9c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9a:	bf00      	nop
 8009e9c:	08009f6b 	.word	0x08009f6b
 8009ea0:	08009f65 	.word	0x08009f65
 8009ea4:	08009f65 	.word	0x08009f65
 8009ea8:	08009f65 	.word	0x08009f65
 8009eac:	08009f65 	.word	0x08009f65
 8009eb0:	08009f65 	.word	0x08009f65
 8009eb4:	08009f65 	.word	0x08009f65
 8009eb8:	08009f65 	.word	0x08009f65
 8009ebc:	08009f41 	.word	0x08009f41
 8009ec0:	08009f65 	.word	0x08009f65
 8009ec4:	08009f65 	.word	0x08009f65
 8009ec8:	08009f65 	.word	0x08009f65
 8009ecc:	08009f65 	.word	0x08009f65
 8009ed0:	08009f65 	.word	0x08009f65
 8009ed4:	08009f65 	.word	0x08009f65
 8009ed8:	08009f65 	.word	0x08009f65
 8009edc:	08009f53 	.word	0x08009f53
 8009ee0:	08009f65 	.word	0x08009f65
 8009ee4:	08009f65 	.word	0x08009f65
 8009ee8:	08009f65 	.word	0x08009f65
 8009eec:	08009f65 	.word	0x08009f65
 8009ef0:	08009f65 	.word	0x08009f65
 8009ef4:	08009f65 	.word	0x08009f65
 8009ef8:	08009f65 	.word	0x08009f65
 8009efc:	08009f6b 	.word	0x08009f6b
 8009f00:	08009f65 	.word	0x08009f65
 8009f04:	08009f65 	.word	0x08009f65
 8009f08:	08009f65 	.word	0x08009f65
 8009f0c:	08009f65 	.word	0x08009f65
 8009f10:	08009f65 	.word	0x08009f65
 8009f14:	08009f65 	.word	0x08009f65
 8009f18:	08009f65 	.word	0x08009f65
 8009f1c:	08009f6b 	.word	0x08009f6b
 8009f20:	08009f65 	.word	0x08009f65
 8009f24:	08009f65 	.word	0x08009f65
 8009f28:	08009f65 	.word	0x08009f65
 8009f2c:	08009f65 	.word	0x08009f65
 8009f30:	08009f65 	.word	0x08009f65
 8009f34:	08009f65 	.word	0x08009f65
 8009f38:	08009f65 	.word	0x08009f65
 8009f3c:	08009f6b 	.word	0x08009f6b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	3304      	adds	r3, #4
 8009f44:	2101      	movs	r1, #1
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 fc18 	bl	800b77c <RCCEx_PLL2_Config>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009f50:	e00c      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	3324      	adds	r3, #36	; 0x24
 8009f56:	2101      	movs	r1, #1
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 fcc1 	bl	800b8e0 <RCCEx_PLL3_Config>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009f62:	e003      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	75fb      	strb	r3, [r7, #23]
      break;
 8009f68:	e000      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d109      	bne.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f72:	4b24      	ldr	r3, [pc, #144]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f76:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f7e:	4921      	ldr	r1, [pc, #132]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f80:	4313      	orrs	r3, r2
 8009f82:	654b      	str	r3, [r1, #84]	; 0x54
 8009f84:	e001      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0302 	and.w	r3, r3, #2
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d03e      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f9a:	2b05      	cmp	r3, #5
 8009f9c:	d820      	bhi.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009f9e:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa4:	08009fe7 	.word	0x08009fe7
 8009fa8:	08009fbd 	.word	0x08009fbd
 8009fac:	08009fcf 	.word	0x08009fcf
 8009fb0:	08009fe7 	.word	0x08009fe7
 8009fb4:	08009fe7 	.word	0x08009fe7
 8009fb8:	08009fe7 	.word	0x08009fe7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 fbda 	bl	800b77c <RCCEx_PLL2_Config>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009fcc:	e00c      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3324      	adds	r3, #36	; 0x24
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f001 fc83 	bl	800b8e0 <RCCEx_PLL3_Config>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009fde:	e003      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe4:	e000      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d110      	bne.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff2:	f023 0207 	bic.w	r2, r3, #7
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ffa:	4902      	ldr	r1, [pc, #8]	; (800a004 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	654b      	str	r3, [r1, #84]	; 0x54
 800a000:	e008      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a002:	bf00      	nop
 800a004:	58024400 	.word	0x58024400
 800a008:	58024800 	.word	0x58024800
 800a00c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a010:	7dfb      	ldrb	r3, [r7, #23]
 800a012:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 0304 	and.w	r3, r3, #4
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d039      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a026:	2b05      	cmp	r3, #5
 800a028:	d820      	bhi.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a02a:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a073 	.word	0x0800a073
 800a034:	0800a049 	.word	0x0800a049
 800a038:	0800a05b 	.word	0x0800a05b
 800a03c:	0800a073 	.word	0x0800a073
 800a040:	0800a073 	.word	0x0800a073
 800a044:	0800a073 	.word	0x0800a073
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	3304      	adds	r3, #4
 800a04c:	2101      	movs	r1, #1
 800a04e:	4618      	mov	r0, r3
 800a050:	f001 fb94 	bl	800b77c <RCCEx_PLL2_Config>
 800a054:	4603      	mov	r3, r0
 800a056:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a058:	e00c      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	3324      	adds	r3, #36	; 0x24
 800a05e:	2101      	movs	r1, #1
 800a060:	4618      	mov	r0, r3
 800a062:	f001 fc3d 	bl	800b8e0 <RCCEx_PLL3_Config>
 800a066:	4603      	mov	r3, r0
 800a068:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a06a:	e003      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	75fb      	strb	r3, [r7, #23]
      break;
 800a070:	e000      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a072:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a074:	7dfb      	ldrb	r3, [r7, #23]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10a      	bne.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a07a:	4bb7      	ldr	r3, [pc, #732]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a07c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a07e:	f023 0207 	bic.w	r2, r3, #7
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a088:	49b3      	ldr	r1, [pc, #716]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	658b      	str	r3, [r1, #88]	; 0x58
 800a08e:	e001      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a090:	7dfb      	ldrb	r3, [r7, #23]
 800a092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0320 	and.w	r3, r3, #32
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d04b      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0aa:	d02e      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a0ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0b0:	d828      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b6:	d02a      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0bc:	d822      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a0be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0c2:	d026      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a0c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0c8:	d81c      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a0ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ce:	d010      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a0d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0d4:	d816      	bhi.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d01d      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a0da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0de:	d111      	bne.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 fb48 	bl	800b77c <RCCEx_PLL2_Config>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a0f0:	e012      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3324      	adds	r3, #36	; 0x24
 800a0f6:	2102      	movs	r1, #2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 fbf1 	bl	800b8e0 <RCCEx_PLL3_Config>
 800a0fe:	4603      	mov	r3, r0
 800a100:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a102:	e009      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	75fb      	strb	r3, [r7, #23]
      break;
 800a108:	e006      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a10a:	bf00      	nop
 800a10c:	e004      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a10e:	bf00      	nop
 800a110:	e002      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a112:	bf00      	nop
 800a114:	e000      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a116:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a118:	7dfb      	ldrb	r3, [r7, #23]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10a      	bne.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a11e:	4b8e      	ldr	r3, [pc, #568]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a122:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a12c:	498a      	ldr	r1, [pc, #552]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	654b      	str	r3, [r1, #84]	; 0x54
 800a132:	e001      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a140:	2b00      	cmp	r3, #0
 800a142:	d04b      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a14a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a14e:	d02e      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a150:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a154:	d828      	bhi.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a15a:	d02a      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a15c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a160:	d822      	bhi.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a162:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a166:	d026      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a168:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a16c:	d81c      	bhi.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a16e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a172:	d010      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a178:	d816      	bhi.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d01d      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a17e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a182:	d111      	bne.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3304      	adds	r3, #4
 800a188:	2100      	movs	r1, #0
 800a18a:	4618      	mov	r0, r3
 800a18c:	f001 faf6 	bl	800b77c <RCCEx_PLL2_Config>
 800a190:	4603      	mov	r3, r0
 800a192:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a194:	e012      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	3324      	adds	r3, #36	; 0x24
 800a19a:	2102      	movs	r1, #2
 800a19c:	4618      	mov	r0, r3
 800a19e:	f001 fb9f 	bl	800b8e0 <RCCEx_PLL3_Config>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a1a6:	e009      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ac:	e006      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a1ae:	bf00      	nop
 800a1b0:	e004      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a1b2:	bf00      	nop
 800a1b4:	e002      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a1b6:	bf00      	nop
 800a1b8:	e000      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a1ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1bc:	7dfb      	ldrb	r3, [r7, #23]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a1c2:	4b65      	ldr	r3, [pc, #404]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a1c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1d0:	4961      	ldr	r1, [pc, #388]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	658b      	str	r3, [r1, #88]	; 0x58
 800a1d6:	e001      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
 800a1da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d04b      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a1f2:	d02e      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a1f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a1f8:	d828      	bhi.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a1fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1fe:	d02a      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a204:	d822      	bhi.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a206:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a20a:	d026      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a20c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a210:	d81c      	bhi.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a216:	d010      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a21c:	d816      	bhi.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d01d      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a226:	d111      	bne.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3304      	adds	r3, #4
 800a22c:	2100      	movs	r1, #0
 800a22e:	4618      	mov	r0, r3
 800a230:	f001 faa4 	bl	800b77c <RCCEx_PLL2_Config>
 800a234:	4603      	mov	r3, r0
 800a236:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a238:	e012      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3324      	adds	r3, #36	; 0x24
 800a23e:	2102      	movs	r1, #2
 800a240:	4618      	mov	r0, r3
 800a242:	f001 fb4d 	bl	800b8e0 <RCCEx_PLL3_Config>
 800a246:	4603      	mov	r3, r0
 800a248:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a24a:	e009      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	75fb      	strb	r3, [r7, #23]
      break;
 800a250:	e006      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a252:	bf00      	nop
 800a254:	e004      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a256:	bf00      	nop
 800a258:	e002      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a25a:	bf00      	nop
 800a25c:	e000      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a25e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10a      	bne.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a266:	4b3c      	ldr	r3, [pc, #240]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a26a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a274:	4938      	ldr	r1, [pc, #224]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a276:	4313      	orrs	r3, r2
 800a278:	658b      	str	r3, [r1, #88]	; 0x58
 800a27a:	e001      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a27c:	7dfb      	ldrb	r3, [r7, #23]
 800a27e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0308 	and.w	r3, r3, #8
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01a      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a296:	d10a      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3324      	adds	r3, #36	; 0x24
 800a29c:	2102      	movs	r1, #2
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f001 fb1e 	bl	800b8e0 <RCCEx_PLL3_Config>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a2ae:	4b2a      	ldr	r3, [pc, #168]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2bc:	4926      	ldr	r1, [pc, #152]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 0310 	and.w	r3, r3, #16
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d01a      	beq.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d8:	d10a      	bne.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	3324      	adds	r3, #36	; 0x24
 800a2de:	2102      	movs	r1, #2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f001 fafd 	bl	800b8e0 <RCCEx_PLL3_Config>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a2f0:	4b19      	ldr	r3, [pc, #100]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a2f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2fe:	4916      	ldr	r1, [pc, #88]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a300:	4313      	orrs	r3, r2
 800a302:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d036      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a31a:	d01f      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a31c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a320:	d817      	bhi.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d003      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a32a:	d009      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a32c:	e011      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3304      	adds	r3, #4
 800a332:	2100      	movs	r1, #0
 800a334:	4618      	mov	r0, r3
 800a336:	f001 fa21 	bl	800b77c <RCCEx_PLL2_Config>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a33e:	e00e      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3324      	adds	r3, #36	; 0x24
 800a344:	2102      	movs	r1, #2
 800a346:	4618      	mov	r0, r3
 800a348:	f001 faca 	bl	800b8e0 <RCCEx_PLL3_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a350:	e005      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	75fb      	strb	r3, [r7, #23]
      break;
 800a356:	e002      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a358:	58024400 	.word	0x58024400
      break;
 800a35c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a35e:	7dfb      	ldrb	r3, [r7, #23]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10a      	bne.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a364:	4b93      	ldr	r3, [pc, #588]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a372:	4990      	ldr	r1, [pc, #576]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a374:	4313      	orrs	r3, r2
 800a376:	658b      	str	r3, [r1, #88]	; 0x58
 800a378:	e001      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37a:	7dfb      	ldrb	r3, [r7, #23]
 800a37c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d033      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a390:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a394:	d01c      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a396:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a39a:	d816      	bhi.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a39c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3a0:	d003      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a3a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3a6:	d007      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a3a8:	e00f      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3aa:	4b82      	ldr	r3, [pc, #520]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ae:	4a81      	ldr	r2, [pc, #516]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a3b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a3b6:	e00c      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	3324      	adds	r3, #36	; 0x24
 800a3bc:	2101      	movs	r1, #1
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 fa8e 	bl	800b8e0 <RCCEx_PLL3_Config>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a3c8:	e003      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ce:	e000      	b.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a3d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10a      	bne.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a3d8:	4b76      	ldr	r3, [pc, #472]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a3da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3e6:	4973      	ldr	r1, [pc, #460]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	654b      	str	r3, [r1, #84]	; 0x54
 800a3ec:	e001      	b.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d029      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800a406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a40a:	d007      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800a40c:	e00f      	b.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a40e:	4b69      	ldr	r3, [pc, #420]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	4a68      	ldr	r2, [pc, #416]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a41a:	e00b      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3304      	adds	r3, #4
 800a420:	2102      	movs	r1, #2
 800a422:	4618      	mov	r0, r3
 800a424:	f001 f9aa 	bl	800b77c <RCCEx_PLL2_Config>
 800a428:	4603      	mov	r3, r0
 800a42a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a42c:	e002      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	75fb      	strb	r3, [r7, #23]
      break;
 800a432:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a434:	7dfb      	ldrb	r3, [r7, #23]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d109      	bne.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a43a:	4b5e      	ldr	r3, [pc, #376]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a43e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a446:	495b      	ldr	r1, [pc, #364]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a44c:	e001      	b.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3324      	adds	r3, #36	; 0x24
 800a462:	2102      	movs	r1, #2
 800a464:	4618      	mov	r0, r3
 800a466:	f001 fa3b 	bl	800b8e0 <RCCEx_PLL3_Config>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d030      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a488:	d017      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800a48a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a48e:	d811      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a494:	d013      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a49a:	d80b      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d010      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a4a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4a4:	d106      	bne.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4a6:	4b43      	ldr	r3, [pc, #268]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4aa:	4a42      	ldr	r2, [pc, #264]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a4b2:	e007      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4b8:	e004      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a4ba:	bf00      	nop
 800a4bc:	e002      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a4be:	bf00      	nop
 800a4c0:	e000      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a4c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d109      	bne.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a4ca:	4b3a      	ldr	r3, [pc, #232]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d6:	4937      	ldr	r1, [pc, #220]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	654b      	str	r3, [r1, #84]	; 0x54
 800a4dc:	e001      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d008      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a4ee:	4b31      	ldr	r3, [pc, #196]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fa:	492e      	ldr	r1, [pc, #184]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d009      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a50c:	4b29      	ldr	r3, [pc, #164]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a51a:	4926      	ldr	r1, [pc, #152]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d008      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a52c:	4b21      	ldr	r3, [pc, #132]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a530:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a538:	491e      	ldr	r1, [pc, #120]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a53a:	4313      	orrs	r3, r2
 800a53c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00d      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a54a:	4b1a      	ldr	r3, [pc, #104]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	4a19      	ldr	r2, [pc, #100]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a550:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a554:	6113      	str	r3, [r2, #16]
 800a556:	4b17      	ldr	r3, [pc, #92]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a558:	691a      	ldr	r2, [r3, #16]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a560:	4914      	ldr	r1, [pc, #80]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a562:	4313      	orrs	r3, r2
 800a564:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	da08      	bge.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a56e:	4b11      	ldr	r3, [pc, #68]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a572:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a57a:	490e      	ldr	r1, [pc, #56]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a57c:	4313      	orrs	r3, r2
 800a57e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d009      	beq.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a58c:	4b09      	ldr	r3, [pc, #36]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a590:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a59a:	4906      	ldr	r1, [pc, #24]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a5a0:	7dbb      	ldrb	r3, [r7, #22]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e000      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3718      	adds	r7, #24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	58024400 	.word	0x58024400

0800a5b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b090      	sub	sp, #64	; 0x40
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5c6:	f040 8095 	bne.w	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a5ca:	4bae      	ldr	r3, [pc, #696]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a5cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ce:	f003 0307 	and.w	r3, r3, #7
 800a5d2:	633b      	str	r3, [r7, #48]	; 0x30
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	f200 8088 	bhi.w	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a5dc:	a201      	add	r2, pc, #4	; (adr r2, 800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e2:	bf00      	nop
 800a5e4:	0800a5f9 	.word	0x0800a5f9
 800a5e8:	0800a621 	.word	0x0800a621
 800a5ec:	0800a649 	.word	0x0800a649
 800a5f0:	0800a6e5 	.word	0x0800a6e5
 800a5f4:	0800a671 	.word	0x0800a671

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5f8:	4ba2      	ldr	r3, [pc, #648]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a604:	d108      	bne.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 ff64 	bl	800b4d8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a612:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a614:	f000 bc95 	b.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a61c:	f000 bc91 	b.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a620:	4b98      	ldr	r3, [pc, #608]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a62c:	d108      	bne.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a62e:	f107 0318 	add.w	r3, r7, #24
 800a632:	4618      	mov	r0, r3
 800a634:	f000 fca8 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a63c:	f000 bc81 	b.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a644:	f000 bc7d 	b.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a648:	4b8e      	ldr	r3, [pc, #568]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a654:	d108      	bne.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a656:	f107 030c 	add.w	r3, r7, #12
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 fde8 	bl	800b230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a664:	f000 bc6d 	b.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a66c:	f000 bc69 	b.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a670:	4b84      	ldr	r3, [pc, #528]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a678:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a67a:	4b82      	ldr	r3, [pc, #520]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0304 	and.w	r3, r3, #4
 800a682:	2b04      	cmp	r3, #4
 800a684:	d10c      	bne.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d109      	bne.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a68c:	4b7d      	ldr	r3, [pc, #500]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	08db      	lsrs	r3, r3, #3
 800a692:	f003 0303 	and.w	r3, r3, #3
 800a696:	4a7c      	ldr	r2, [pc, #496]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a698:	fa22 f303 	lsr.w	r3, r2, r3
 800a69c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a69e:	e01f      	b.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6a0:	4b78      	ldr	r3, [pc, #480]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ac:	d106      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6b4:	d102      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a6b6:	4b75      	ldr	r3, [pc, #468]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6ba:	e011      	b.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6bc:	4b71      	ldr	r3, [pc, #452]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6c8:	d106      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6d0:	d102      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a6d2:	4b6f      	ldr	r3, [pc, #444]	; (800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6d6:	e003      	b.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a6dc:	f000 bc31 	b.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a6e0:	f000 bc2f 	b.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a6e4:	4b6b      	ldr	r3, [pc, #428]	; (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6e8:	f000 bc2b 	b.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f0:	f000 bc27 	b.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6fa:	f040 8095 	bne.w	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a6fe:	4b61      	ldr	r3, [pc, #388]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a702:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a706:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a70e:	d04d      	beq.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a716:	f200 8084 	bhi.w	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71c:	2bc0      	cmp	r3, #192	; 0xc0
 800a71e:	d07d      	beq.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	2bc0      	cmp	r3, #192	; 0xc0
 800a724:	d87d      	bhi.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	2b80      	cmp	r3, #128	; 0x80
 800a72a:	d02d      	beq.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72e:	2b80      	cmp	r3, #128	; 0x80
 800a730:	d877      	bhi.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73a:	2b40      	cmp	r3, #64	; 0x40
 800a73c:	d012      	beq.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a73e:	e070      	b.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a740:	4b50      	ldr	r3, [pc, #320]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a74c:	d107      	bne.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a74e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fec0 	bl	800b4d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a75c:	e3f1      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a75e:	2300      	movs	r3, #0
 800a760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a762:	e3ee      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a764:	4b47      	ldr	r3, [pc, #284]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a76c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a770:	d107      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a772:	f107 0318 	add.w	r3, r7, #24
 800a776:	4618      	mov	r0, r3
 800a778:	f000 fc06 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a780:	e3df      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a786:	e3dc      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a788:	4b3e      	ldr	r3, [pc, #248]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a794:	d107      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a796:	f107 030c 	add.w	r3, r7, #12
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fd48 	bl	800b230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7a4:	e3cd      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7aa:	e3ca      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7ac:	4b35      	ldr	r3, [pc, #212]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a7ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7b4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7b6:	4b33      	ldr	r3, [pc, #204]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0304 	and.w	r3, r3, #4
 800a7be:	2b04      	cmp	r3, #4
 800a7c0:	d10c      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d109      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7c8:	4b2e      	ldr	r3, [pc, #184]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	08db      	lsrs	r3, r3, #3
 800a7ce:	f003 0303 	and.w	r3, r3, #3
 800a7d2:	4a2d      	ldr	r2, [pc, #180]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a7d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7da:	e01e      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7dc:	4b29      	ldr	r3, [pc, #164]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7e8:	d106      	bne.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7f0:	d102      	bne.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a7f2:	4b26      	ldr	r3, [pc, #152]	; (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7f6:	e010      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7f8:	4b22      	ldr	r3, [pc, #136]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a804:	d106      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a80c:	d102      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a80e:	4b20      	ldr	r3, [pc, #128]	; (800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a810:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a812:	e002      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a818:	e393      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a81a:	e392      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a81c:	4b1d      	ldr	r3, [pc, #116]	; (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a81e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a820:	e38f      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a826:	e38c      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a82e:	f040 80a7 	bne.w	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a832:	4b14      	ldr	r3, [pc, #80]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a836:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a83a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a842:	d05f      	beq.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a846:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a84a:	f200 8096 	bhi.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a854:	f000 808e 	beq.w	800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a85e:	f200 808c 	bhi.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a868:	d03a      	beq.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a870:	f200 8083 	bhi.w	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00e      	beq.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800a87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a880:	d01c      	beq.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a882:	e07a      	b.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a884:	58024400 	.word	0x58024400
 800a888:	03d09000 	.word	0x03d09000
 800a88c:	003d0900 	.word	0x003d0900
 800a890:	017d7840 	.word	0x017d7840
 800a894:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a898:	4baa      	ldr	r3, [pc, #680]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8a4:	d107      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fe14 	bl	800b4d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8b4:	e345      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8ba:	e342      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8bc:	4ba1      	ldr	r3, [pc, #644]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8c8:	d107      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ca:	f107 0318 	add.w	r3, r7, #24
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fb5a 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8d8:	e333      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8de:	e330      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8e0:	4b98      	ldr	r3, [pc, #608]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8ec:	d107      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ee:	f107 030c 	add.w	r3, r7, #12
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fc9c 	bl	800b230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8fc:	e321      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a902:	e31e      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a904:	4b8f      	ldr	r3, [pc, #572]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a90c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a90e:	4b8d      	ldr	r3, [pc, #564]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b04      	cmp	r3, #4
 800a918:	d10c      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800a91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d109      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a920:	4b88      	ldr	r3, [pc, #544]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	08db      	lsrs	r3, r3, #3
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	4a87      	ldr	r2, [pc, #540]	; (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a92c:	fa22 f303 	lsr.w	r3, r2, r3
 800a930:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a932:	e01e      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a934:	4b83      	ldr	r3, [pc, #524]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a940:	d106      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800a942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a948:	d102      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a94a:	4b80      	ldr	r3, [pc, #512]	; (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a94c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a94e:	e010      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a950:	4b7c      	ldr	r3, [pc, #496]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a95c:	d106      	bne.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800a95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a964:	d102      	bne.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a966:	4b7a      	ldr	r3, [pc, #488]	; (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a96a:	e002      	b.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a970:	e2e7      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a972:	e2e6      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a974:	4b77      	ldr	r3, [pc, #476]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a978:	e2e3      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a97e:	e2e0      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a986:	f040 809c 	bne.w	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a98a:	4b6e      	ldr	r3, [pc, #440]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a98e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a992:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a99a:	d054      	beq.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9a2:	f200 808b 	bhi.w	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9ac:	f000 8083 	beq.w	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9b6:	f200 8081 	bhi.w	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9c0:	d02f      	beq.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9c8:	d878      	bhi.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d004      	beq.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9d6:	d012      	beq.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a9d8:	e070      	b.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9da:	4b5a      	ldr	r3, [pc, #360]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9e6:	d107      	bne.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 fd73 	bl	800b4d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9f6:	e2a4      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9fc:	e2a1      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9fe:	4b51      	ldr	r3, [pc, #324]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa0a:	d107      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa0c:	f107 0318 	add.w	r3, r7, #24
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fab9 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800aa1a:	e292      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa20:	e28f      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa22:	4b48      	ldr	r3, [pc, #288]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa2e:	d107      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa30:	f107 030c 	add.w	r3, r7, #12
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 fbfb 	bl	800b230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa3e:	e280      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa44:	e27d      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa46:	4b3f      	ldr	r3, [pc, #252]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa4e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa50:	4b3c      	ldr	r3, [pc, #240]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0304 	and.w	r3, r3, #4
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d10c      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800aa5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d109      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa62:	4b38      	ldr	r3, [pc, #224]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	08db      	lsrs	r3, r3, #3
 800aa68:	f003 0303 	and.w	r3, r3, #3
 800aa6c:	4a36      	ldr	r2, [pc, #216]	; (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aa6e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa74:	e01e      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa76:	4b33      	ldr	r3, [pc, #204]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa82:	d106      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800aa84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa8a:	d102      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa8c:	4b2f      	ldr	r3, [pc, #188]	; (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800aa8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa90:	e010      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa92:	4b2c      	ldr	r3, [pc, #176]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa9e:	d106      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaa6:	d102      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aaa8:	4b29      	ldr	r3, [pc, #164]	; (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaac:	e002      	b.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aab2:	e246      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aab4:	e245      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aab6:	4b27      	ldr	r3, [pc, #156]	; (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800aab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaba:	e242      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aac0:	e23f      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aac8:	f040 80a8 	bne.w	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800aacc:	4b1d      	ldr	r3, [pc, #116]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aad4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aadc:	d060      	beq.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800aade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aae4:	f200 8097 	bhi.w	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800aae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aaee:	f000 808f 	beq.w	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aaf8:	f200 808d 	bhi.w	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800aafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab02:	d03b      	beq.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800ab04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab0a:	f200 8084 	bhi.w	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800ab0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d004      	beq.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800ab14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab1a:	d01d      	beq.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800ab1c:	e07b      	b.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab1e:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab2a:	d107      	bne.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 fcd1 	bl	800b4d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab3a:	e202      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab40:	e1ff      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab42:	bf00      	nop
 800ab44:	58024400 	.word	0x58024400
 800ab48:	03d09000 	.word	0x03d09000
 800ab4c:	003d0900 	.word	0x003d0900
 800ab50:	017d7840 	.word	0x017d7840
 800ab54:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab58:	4ba3      	ldr	r3, [pc, #652]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab64:	d107      	bne.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab66:	f107 0318 	add.w	r3, r7, #24
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 fa0c 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab74:	e1e5      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab7a:	e1e2      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab7c:	4b9a      	ldr	r3, [pc, #616]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab88:	d107      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab8a:	f107 030c 	add.w	r3, r7, #12
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 fb4e 	bl	800b230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab98:	e1d3      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab9e:	e1d0      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aba0:	4b91      	ldr	r3, [pc, #580]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aba8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abaa:	4b8f      	ldr	r3, [pc, #572]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 0304 	and.w	r3, r3, #4
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	d10c      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800abb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d109      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abbc:	4b8a      	ldr	r3, [pc, #552]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	08db      	lsrs	r3, r3, #3
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	4a89      	ldr	r2, [pc, #548]	; (800adec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800abc8:	fa22 f303 	lsr.w	r3, r2, r3
 800abcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abce:	e01e      	b.n	800ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abd0:	4b85      	ldr	r3, [pc, #532]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abdc:	d106      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800abde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abe4:	d102      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800abe6:	4b82      	ldr	r3, [pc, #520]	; (800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800abe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abea:	e010      	b.n	800ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abec:	4b7e      	ldr	r3, [pc, #504]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abf8:	d106      	bne.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800abfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac00:	d102      	bne.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ac02:	4b7c      	ldr	r3, [pc, #496]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ac04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac06:	e002      	b.n	800ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ac0c:	e199      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac0e:	e198      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ac10:	4b79      	ldr	r3, [pc, #484]	; (800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac14:	e195      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac1a:	e192      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ac22:	d173      	bne.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ac24:	4b70      	ldr	r3, [pc, #448]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ac26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac2c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac34:	d02f      	beq.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac3c:	d863      	bhi.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d004      	beq.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800ac44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac4a:	d012      	beq.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800ac4c:	e05b      	b.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac4e:	4b66      	ldr	r3, [pc, #408]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac5a:	d107      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac5c:	f107 0318 	add.w	r3, r7, #24
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 f991 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac6a:	e16a      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac70:	e167      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac72:	4b5d      	ldr	r3, [pc, #372]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac7e:	d107      	bne.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac80:	f107 030c 	add.w	r3, r7, #12
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fad3 	bl	800b230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac8e:	e158      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac94:	e155      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac96:	4b54      	ldr	r3, [pc, #336]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ac98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac9e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aca0:	4b51      	ldr	r3, [pc, #324]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0304 	and.w	r3, r3, #4
 800aca8:	2b04      	cmp	r3, #4
 800acaa:	d10c      	bne.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800acac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d109      	bne.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acb2:	4b4d      	ldr	r3, [pc, #308]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	08db      	lsrs	r3, r3, #3
 800acb8:	f003 0303 	and.w	r3, r3, #3
 800acbc:	4a4b      	ldr	r2, [pc, #300]	; (800adec <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800acbe:	fa22 f303 	lsr.w	r3, r2, r3
 800acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc4:	e01e      	b.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acc6:	4b48      	ldr	r3, [pc, #288]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acd2:	d106      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800acd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acda:	d102      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800acdc:	4b44      	ldr	r3, [pc, #272]	; (800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800acde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace0:	e010      	b.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ace2:	4b41      	ldr	r3, [pc, #260]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acee:	d106      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800acf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf6:	d102      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800acf8:	4b3e      	ldr	r3, [pc, #248]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800acfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acfc:	e002      	b.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ad02:	e11e      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad04:	e11d      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad0a:	e11a      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad12:	d133      	bne.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ad14:	4b34      	ldr	r3, [pc, #208]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ad16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d004      	beq.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad2a:	d012      	beq.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800ad2c:	e023      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad2e:	4b2e      	ldr	r3, [pc, #184]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad3a:	d107      	bne.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 fbc9 	bl	800b4d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad4a:	e0fa      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad50:	e0f7      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad52:	4b25      	ldr	r3, [pc, #148]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad5e:	d107      	bne.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad60:	f107 0318 	add.w	r3, r7, #24
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 f90f 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ad6e:	e0e8      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad74:	e0e5      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad7a:	e0e2      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad82:	f040 808f 	bne.w	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ad86:	4b18      	ldr	r3, [pc, #96]	; (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ad88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad8a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ad8e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad96:	d075      	beq.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad9e:	d87e      	bhi.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ada0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada6:	d060      	beq.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800ada8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adae:	d876      	bhi.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800adb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adb6:	d045      	beq.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adbe:	d86e      	bhi.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adc6:	d02b      	beq.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800adc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adce:	d866      	bhi.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	2b00      	cmp	r3, #0
 800add4:	d004      	beq.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800add6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800addc:	d00e      	beq.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800adde:	e05e      	b.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ade0:	f000 f8bc 	bl	800af5c <HAL_RCCEx_GetD3PCLK1Freq>
 800ade4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ade6:	e0ac      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ade8:	58024400 	.word	0x58024400
 800adec:	03d09000 	.word	0x03d09000
 800adf0:	003d0900 	.word	0x003d0900
 800adf4:	017d7840 	.word	0x017d7840
 800adf8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adfc:	4b53      	ldr	r3, [pc, #332]	; (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae08:	d107      	bne.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae0a:	f107 0318 	add.w	r3, r7, #24
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 f8ba 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae18:	e093      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae1e:	e090      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae20:	4b4a      	ldr	r3, [pc, #296]	; (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae2c:	d107      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae2e:	f107 030c 	add.w	r3, r7, #12
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 f9fc 	bl	800b230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae3c:	e081      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae42:	e07e      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae44:	4b41      	ldr	r3, [pc, #260]	; (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 0304 	and.w	r3, r3, #4
 800ae4c:	2b04      	cmp	r3, #4
 800ae4e:	d109      	bne.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae50:	4b3e      	ldr	r3, [pc, #248]	; (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	08db      	lsrs	r3, r3, #3
 800ae56:	f003 0303 	and.w	r3, r3, #3
 800ae5a:	4a3d      	ldr	r2, [pc, #244]	; (800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ae5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae62:	e06e      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae68:	e06b      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae6a:	4b38      	ldr	r3, [pc, #224]	; (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae76:	d102      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800ae78:	4b36      	ldr	r3, [pc, #216]	; (800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae7c:	e061      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae82:	e05e      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae84:	4b31      	ldr	r3, [pc, #196]	; (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae90:	d102      	bne.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800ae92:	4b31      	ldr	r3, [pc, #196]	; (800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ae94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ae96:	e054      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae9c:	e051      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aea2:	e04e      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeaa:	d148      	bne.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aeac:	4b27      	ldr	r3, [pc, #156]	; (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aeae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aeb4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aebc:	d02a      	beq.n	800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aec4:	d838      	bhi.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800aec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d004      	beq.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800aecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aed2:	d00d      	beq.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800aed4:	e030      	b.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aed6:	4b1d      	ldr	r3, [pc, #116]	; (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aee2:	d102      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800aee4:	4b1c      	ldr	r3, [pc, #112]	; (800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aee6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aee8:	e02b      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeee:	e028      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aef0:	4b16      	ldr	r3, [pc, #88]	; (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aefc:	d107      	bne.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aefe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af02:	4618      	mov	r0, r3
 800af04:	f000 fae8 	bl	800b4d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800af0c:	e019      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af12:	e016      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af14:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af20:	d107      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af22:	f107 0318 	add.w	r3, r7, #24
 800af26:	4618      	mov	r0, r3
 800af28:	f000 f82e 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800af30:	e007      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af36:	e004      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af3c:	e001      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800af3e:	2300      	movs	r3, #0
 800af40:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800af42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800af44:	4618      	mov	r0, r3
 800af46:	3740      	adds	r7, #64	; 0x40
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	58024400 	.word	0x58024400
 800af50:	03d09000 	.word	0x03d09000
 800af54:	003d0900 	.word	0x003d0900
 800af58:	017d7840 	.word	0x017d7840

0800af5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af60:	f7fe fb4c 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 800af64:	4602      	mov	r2, r0
 800af66:	4b06      	ldr	r3, [pc, #24]	; (800af80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	091b      	lsrs	r3, r3, #4
 800af6c:	f003 0307 	and.w	r3, r3, #7
 800af70:	4904      	ldr	r1, [pc, #16]	; (800af84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af72:	5ccb      	ldrb	r3, [r1, r3]
 800af74:	f003 031f 	and.w	r3, r3, #31
 800af78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	58024400 	.word	0x58024400
 800af84:	080183e0 	.word	0x080183e0

0800af88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800af88:	b480      	push	{r7}
 800af8a:	b089      	sub	sp, #36	; 0x24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af90:	4ba1      	ldr	r3, [pc, #644]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af94:	f003 0303 	and.w	r3, r3, #3
 800af98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800af9a:	4b9f      	ldr	r3, [pc, #636]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9e:	0b1b      	lsrs	r3, r3, #12
 800afa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afa4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800afa6:	4b9c      	ldr	r3, [pc, #624]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	091b      	lsrs	r3, r3, #4
 800afac:	f003 0301 	and.w	r3, r3, #1
 800afb0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800afb2:	4b99      	ldr	r3, [pc, #612]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb6:	08db      	lsrs	r3, r3, #3
 800afb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	fb02 f303 	mul.w	r3, r2, r3
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 8111 	beq.w	800b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	2b02      	cmp	r3, #2
 800afda:	f000 8083 	beq.w	800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	f200 80a1 	bhi.w	800b128 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d003      	beq.n	800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d056      	beq.n	800b0a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aff2:	e099      	b.n	800b128 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aff4:	4b88      	ldr	r3, [pc, #544]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 0320 	and.w	r3, r3, #32
 800affc:	2b00      	cmp	r3, #0
 800affe:	d02d      	beq.n	800b05c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b000:	4b85      	ldr	r3, [pc, #532]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	08db      	lsrs	r3, r3, #3
 800b006:	f003 0303 	and.w	r3, r3, #3
 800b00a:	4a84      	ldr	r2, [pc, #528]	; (800b21c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b00c:	fa22 f303 	lsr.w	r3, r2, r3
 800b010:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	ee07 3a90 	vmov	s15, r3
 800b018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b02a:	4b7b      	ldr	r3, [pc, #492]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b032:	ee07 3a90 	vmov	s15, r3
 800b036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b03e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b04a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b056:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b05a:	e087      	b.n	800b16c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	ee07 3a90 	vmov	s15, r3
 800b062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b066:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b06e:	4b6a      	ldr	r3, [pc, #424]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b076:	ee07 3a90 	vmov	s15, r3
 800b07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b082:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b09a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b09e:	e065      	b.n	800b16c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b228 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0b2:	4b59      	ldr	r3, [pc, #356]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ba:	ee07 3a90 	vmov	s15, r3
 800b0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0e2:	e043      	b.n	800b16c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b22c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b0f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f6:	4b48      	ldr	r3, [pc, #288]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b106:	ed97 6a03 	vldr	s12, [r7, #12]
 800b10a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b10e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b11a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b122:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b126:	e021      	b.n	800b16c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b132:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b228 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b13a:	4b37      	ldr	r3, [pc, #220]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b14a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b14e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b15a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b162:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b166:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b16a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b16c:	4b2a      	ldr	r3, [pc, #168]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b170:	0a5b      	lsrs	r3, r3, #9
 800b172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b182:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b186:	edd7 6a07 	vldr	s13, [r7, #28]
 800b18a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b18e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b192:	ee17 2a90 	vmov	r2, s15
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b19a:	4b1f      	ldr	r3, [pc, #124]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b19e:	0c1b      	lsrs	r3, r3, #16
 800b1a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1a4:	ee07 3a90 	vmov	s15, r3
 800b1a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c0:	ee17 2a90 	vmov	r2, s15
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b1c8:	4b13      	ldr	r3, [pc, #76]	; (800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1cc:	0e1b      	lsrs	r3, r3, #24
 800b1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1d2:	ee07 3a90 	vmov	s15, r3
 800b1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ee:	ee17 2a90 	vmov	r2, s15
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b1f6:	e008      	b.n	800b20a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	609a      	str	r2, [r3, #8]
}
 800b20a:	bf00      	nop
 800b20c:	3724      	adds	r7, #36	; 0x24
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	58024400 	.word	0x58024400
 800b21c:	03d09000 	.word	0x03d09000
 800b220:	46000000 	.word	0x46000000
 800b224:	4c742400 	.word	0x4c742400
 800b228:	4a742400 	.word	0x4a742400
 800b22c:	4bbebc20 	.word	0x4bbebc20

0800b230 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b230:	b480      	push	{r7}
 800b232:	b089      	sub	sp, #36	; 0x24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b238:	4ba1      	ldr	r3, [pc, #644]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23c:	f003 0303 	and.w	r3, r3, #3
 800b240:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b242:	4b9f      	ldr	r3, [pc, #636]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b246:	0d1b      	lsrs	r3, r3, #20
 800b248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b24c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b24e:	4b9c      	ldr	r3, [pc, #624]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b252:	0a1b      	lsrs	r3, r3, #8
 800b254:	f003 0301 	and.w	r3, r3, #1
 800b258:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b25a:	4b99      	ldr	r3, [pc, #612]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b25c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b25e:	08db      	lsrs	r3, r3, #3
 800b260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	fb02 f303 	mul.w	r3, r2, r3
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 8111 	beq.w	800b4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	2b02      	cmp	r3, #2
 800b282:	f000 8083 	beq.w	800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	2b02      	cmp	r3, #2
 800b28a:	f200 80a1 	bhi.w	800b3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d003      	beq.n	800b29c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d056      	beq.n	800b348 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b29a:	e099      	b.n	800b3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b29c:	4b88      	ldr	r3, [pc, #544]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0320 	and.w	r3, r3, #32
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d02d      	beq.n	800b304 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2a8:	4b85      	ldr	r3, [pc, #532]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	08db      	lsrs	r3, r3, #3
 800b2ae:	f003 0303 	and.w	r3, r3, #3
 800b2b2:	4a84      	ldr	r2, [pc, #528]	; (800b4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b2b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	ee07 3a90 	vmov	s15, r3
 800b2c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d2:	4b7b      	ldr	r3, [pc, #492]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b302:	e087      	b.n	800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b316:	4b6a      	ldr	r3, [pc, #424]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b31e:	ee07 3a90 	vmov	s15, r3
 800b322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b326:	ed97 6a03 	vldr	s12, [r7, #12]
 800b32a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b346:	e065      	b.n	800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	ee07 3a90 	vmov	s15, r3
 800b34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b352:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35a:	4b59      	ldr	r3, [pc, #356]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b362:	ee07 3a90 	vmov	s15, r3
 800b366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b36e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b38a:	e043      	b.n	800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b396:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b39e:	4b48      	ldr	r3, [pc, #288]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a6:	ee07 3a90 	vmov	s15, r3
 800b3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3ce:	e021      	b.n	800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	ee07 3a90 	vmov	s15, r3
 800b3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3e2:	4b37      	ldr	r3, [pc, #220]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b40e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b412:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b414:	4b2a      	ldr	r3, [pc, #168]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b418:	0a5b      	lsrs	r3, r3, #9
 800b41a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b42a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b42e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b43a:	ee17 2a90 	vmov	r2, s15
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b442:	4b1f      	ldr	r3, [pc, #124]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b446:	0c1b      	lsrs	r3, r3, #16
 800b448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b44c:	ee07 3a90 	vmov	s15, r3
 800b450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b45c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b468:	ee17 2a90 	vmov	r2, s15
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b470:	4b13      	ldr	r3, [pc, #76]	; (800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b474:	0e1b      	lsrs	r3, r3, #24
 800b476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b47a:	ee07 3a90 	vmov	s15, r3
 800b47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b48a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b48e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b496:	ee17 2a90 	vmov	r2, s15
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b49e:	e008      	b.n	800b4b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	609a      	str	r2, [r3, #8]
}
 800b4b2:	bf00      	nop
 800b4b4:	3724      	adds	r7, #36	; 0x24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	58024400 	.word	0x58024400
 800b4c4:	03d09000 	.word	0x03d09000
 800b4c8:	46000000 	.word	0x46000000
 800b4cc:	4c742400 	.word	0x4c742400
 800b4d0:	4a742400 	.word	0x4a742400
 800b4d4:	4bbebc20 	.word	0x4bbebc20

0800b4d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b089      	sub	sp, #36	; 0x24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4e0:	4ba0      	ldr	r3, [pc, #640]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e4:	f003 0303 	and.w	r3, r3, #3
 800b4e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b4ea:	4b9e      	ldr	r3, [pc, #632]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ee:	091b      	lsrs	r3, r3, #4
 800b4f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b4f6:	4b9b      	ldr	r3, [pc, #620]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b500:	4b98      	ldr	r3, [pc, #608]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b504:	08db      	lsrs	r3, r3, #3
 800b506:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	fb02 f303 	mul.w	r3, r2, r3
 800b510:	ee07 3a90 	vmov	s15, r3
 800b514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b518:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f000 8111 	beq.w	800b746 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	2b02      	cmp	r3, #2
 800b528:	f000 8083 	beq.w	800b632 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	2b02      	cmp	r3, #2
 800b530:	f200 80a1 	bhi.w	800b676 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d056      	beq.n	800b5ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b540:	e099      	b.n	800b676 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b542:	4b88      	ldr	r3, [pc, #544]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 0320 	and.w	r3, r3, #32
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d02d      	beq.n	800b5aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b54e:	4b85      	ldr	r3, [pc, #532]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	08db      	lsrs	r3, r3, #3
 800b554:	f003 0303 	and.w	r3, r3, #3
 800b558:	4a83      	ldr	r2, [pc, #524]	; (800b768 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b55a:	fa22 f303 	lsr.w	r3, r2, r3
 800b55e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	ee07 3a90 	vmov	s15, r3
 800b566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	ee07 3a90 	vmov	s15, r3
 800b570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b578:	4b7a      	ldr	r3, [pc, #488]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b580:	ee07 3a90 	vmov	s15, r3
 800b584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b588:	ed97 6a03 	vldr	s12, [r7, #12]
 800b58c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b76c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b59c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5a4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b5a8:	e087      	b.n	800b6ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	ee07 3a90 	vmov	s15, r3
 800b5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b770 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5bc:	4b69      	ldr	r3, [pc, #420]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c4:	ee07 3a90 	vmov	s15, r3
 800b5c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5d0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b76c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5ec:	e065      	b.n	800b6ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	ee07 3a90 	vmov	s15, r3
 800b5f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b774 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b5fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b600:	4b58      	ldr	r3, [pc, #352]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b608:	ee07 3a90 	vmov	s15, r3
 800b60c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b610:	ed97 6a03 	vldr	s12, [r7, #12]
 800b614:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b76c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b61c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b62c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b630:	e043      	b.n	800b6ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	ee07 3a90 	vmov	s15, r3
 800b638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b63c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b778 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b644:	4b47      	ldr	r3, [pc, #284]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b64c:	ee07 3a90 	vmov	s15, r3
 800b650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b654:	ed97 6a03 	vldr	s12, [r7, #12]
 800b658:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b76c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b65c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b66c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b670:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b674:	e021      	b.n	800b6ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	ee07 3a90 	vmov	s15, r3
 800b67c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b680:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b770 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b688:	4b36      	ldr	r3, [pc, #216]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b690:	ee07 3a90 	vmov	s15, r3
 800b694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b698:	ed97 6a03 	vldr	s12, [r7, #12]
 800b69c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b76c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b6ba:	4b2a      	ldr	r3, [pc, #168]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6be:	0a5b      	lsrs	r3, r3, #9
 800b6c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6c4:	ee07 3a90 	vmov	s15, r3
 800b6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e0:	ee17 2a90 	vmov	r2, s15
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b6e8:	4b1e      	ldr	r3, [pc, #120]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ec:	0c1b      	lsrs	r3, r3, #16
 800b6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6f2:	ee07 3a90 	vmov	s15, r3
 800b6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b702:	edd7 6a07 	vldr	s13, [r7, #28]
 800b706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b70a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b70e:	ee17 2a90 	vmov	r2, s15
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b716:	4b13      	ldr	r3, [pc, #76]	; (800b764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b71a:	0e1b      	lsrs	r3, r3, #24
 800b71c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b720:	ee07 3a90 	vmov	s15, r3
 800b724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b72c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b730:	edd7 6a07 	vldr	s13, [r7, #28]
 800b734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b73c:	ee17 2a90 	vmov	r2, s15
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b744:	e008      	b.n	800b758 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	609a      	str	r2, [r3, #8]
}
 800b758:	bf00      	nop
 800b75a:	3724      	adds	r7, #36	; 0x24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	58024400 	.word	0x58024400
 800b768:	03d09000 	.word	0x03d09000
 800b76c:	46000000 	.word	0x46000000
 800b770:	4c742400 	.word	0x4c742400
 800b774:	4a742400 	.word	0x4a742400
 800b778:	4bbebc20 	.word	0x4bbebc20

0800b77c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b78a:	4b53      	ldr	r3, [pc, #332]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78e:	f003 0303 	and.w	r3, r3, #3
 800b792:	2b03      	cmp	r3, #3
 800b794:	d101      	bne.n	800b79a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e099      	b.n	800b8ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b79a:	4b4f      	ldr	r3, [pc, #316]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a4e      	ldr	r2, [pc, #312]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b7a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b7a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7a6:	f7f9 fb3b 	bl	8004e20 <HAL_GetTick>
 800b7aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7ac:	e008      	b.n	800b7c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b7ae:	f7f9 fb37 	bl	8004e20 <HAL_GetTick>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d901      	bls.n	800b7c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e086      	b.n	800b8ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7c0:	4b45      	ldr	r3, [pc, #276]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1f0      	bne.n	800b7ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b7cc:	4b42      	ldr	r3, [pc, #264]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	031b      	lsls	r3, r3, #12
 800b7da:	493f      	ldr	r1, [pc, #252]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	628b      	str	r3, [r1, #40]	; 0x28
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	025b      	lsls	r3, r3, #9
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	041b      	lsls	r3, r3, #16
 800b7fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b802:	431a      	orrs	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	3b01      	subs	r3, #1
 800b80a:	061b      	lsls	r3, r3, #24
 800b80c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b810:	4931      	ldr	r1, [pc, #196]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b812:	4313      	orrs	r3, r2
 800b814:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b816:	4b30      	ldr	r3, [pc, #192]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	492d      	ldr	r1, [pc, #180]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b824:	4313      	orrs	r3, r2
 800b826:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b828:	4b2b      	ldr	r3, [pc, #172]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	f023 0220 	bic.w	r2, r3, #32
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	4928      	ldr	r1, [pc, #160]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b836:	4313      	orrs	r3, r2
 800b838:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b83a:	4b27      	ldr	r3, [pc, #156]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83e:	4a26      	ldr	r2, [pc, #152]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b840:	f023 0310 	bic.w	r3, r3, #16
 800b844:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b846:	4b24      	ldr	r3, [pc, #144]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b84a:	4b24      	ldr	r3, [pc, #144]	; (800b8dc <RCCEx_PLL2_Config+0x160>)
 800b84c:	4013      	ands	r3, r2
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	69d2      	ldr	r2, [r2, #28]
 800b852:	00d2      	lsls	r2, r2, #3
 800b854:	4920      	ldr	r1, [pc, #128]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b856:	4313      	orrs	r3, r2
 800b858:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b85a:	4b1f      	ldr	r3, [pc, #124]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85e:	4a1e      	ldr	r2, [pc, #120]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b860:	f043 0310 	orr.w	r3, r3, #16
 800b864:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d106      	bne.n	800b87a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b86c:	4b1a      	ldr	r3, [pc, #104]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b870:	4a19      	ldr	r2, [pc, #100]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b872:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b876:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b878:	e00f      	b.n	800b89a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d106      	bne.n	800b88e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b880:	4b15      	ldr	r3, [pc, #84]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b884:	4a14      	ldr	r2, [pc, #80]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b88a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b88c:	e005      	b.n	800b89a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b88e:	4b12      	ldr	r3, [pc, #72]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	4a11      	ldr	r2, [pc, #68]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b898:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b89a:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a0e      	ldr	r2, [pc, #56]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b8a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b8a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8a6:	f7f9 fabb 	bl	8004e20 <HAL_GetTick>
 800b8aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8ac:	e008      	b.n	800b8c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b8ae:	f7f9 fab7 	bl	8004e20 <HAL_GetTick>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d901      	bls.n	800b8c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e006      	b.n	800b8ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8c0:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <RCCEx_PLL2_Config+0x15c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d0f0      	beq.n	800b8ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	58024400 	.word	0x58024400
 800b8dc:	ffff0007 	.word	0xffff0007

0800b8e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8ee:	4b53      	ldr	r3, [pc, #332]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f2:	f003 0303 	and.w	r3, r3, #3
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d101      	bne.n	800b8fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e099      	b.n	800ba32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b8fe:	4b4f      	ldr	r3, [pc, #316]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a4e      	ldr	r2, [pc, #312]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b90a:	f7f9 fa89 	bl	8004e20 <HAL_GetTick>
 800b90e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b910:	e008      	b.n	800b924 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b912:	f7f9 fa85 	bl	8004e20 <HAL_GetTick>
 800b916:	4602      	mov	r2, r0
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d901      	bls.n	800b924 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e086      	b.n	800ba32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b924:	4b45      	ldr	r3, [pc, #276]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1f0      	bne.n	800b912 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b930:	4b42      	ldr	r3, [pc, #264]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b934:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	051b      	lsls	r3, r3, #20
 800b93e:	493f      	ldr	r1, [pc, #252]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b940:	4313      	orrs	r3, r2
 800b942:	628b      	str	r3, [r1, #40]	; 0x28
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	3b01      	subs	r3, #1
 800b94a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	3b01      	subs	r3, #1
 800b954:	025b      	lsls	r3, r3, #9
 800b956:	b29b      	uxth	r3, r3
 800b958:	431a      	orrs	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	3b01      	subs	r3, #1
 800b960:	041b      	lsls	r3, r3, #16
 800b962:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b966:	431a      	orrs	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	061b      	lsls	r3, r3, #24
 800b970:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b974:	4931      	ldr	r1, [pc, #196]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b976:	4313      	orrs	r3, r2
 800b978:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b97a:	4b30      	ldr	r3, [pc, #192]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	492d      	ldr	r1, [pc, #180]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b98c:	4b2b      	ldr	r3, [pc, #172]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b990:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	4928      	ldr	r1, [pc, #160]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b99a:	4313      	orrs	r3, r2
 800b99c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b99e:	4b27      	ldr	r3, [pc, #156]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a2:	4a26      	ldr	r2, [pc, #152]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b9aa:	4b24      	ldr	r3, [pc, #144]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9ae:	4b24      	ldr	r3, [pc, #144]	; (800ba40 <RCCEx_PLL3_Config+0x160>)
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	69d2      	ldr	r2, [r2, #28]
 800b9b6:	00d2      	lsls	r2, r2, #3
 800b9b8:	4920      	ldr	r1, [pc, #128]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b9be:	4b1f      	ldr	r3, [pc, #124]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c2:	4a1e      	ldr	r2, [pc, #120]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d106      	bne.n	800b9de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b9d0:	4b1a      	ldr	r3, [pc, #104]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d4:	4a19      	ldr	r2, [pc, #100]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b9da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9dc:	e00f      	b.n	800b9fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d106      	bne.n	800b9f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b9e4:	4b15      	ldr	r3, [pc, #84]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e8:	4a14      	ldr	r2, [pc, #80]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b9f0:	e005      	b.n	800b9fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b9f2:	4b12      	ldr	r3, [pc, #72]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f6:	4a11      	ldr	r2, [pc, #68]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800b9f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a0e      	ldr	r2, [pc, #56]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800ba04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba0a:	f7f9 fa09 	bl	8004e20 <HAL_GetTick>
 800ba0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba10:	e008      	b.n	800ba24 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ba12:	f7f9 fa05 	bl	8004e20 <HAL_GetTick>
 800ba16:	4602      	mov	r2, r0
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d901      	bls.n	800ba24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba20:	2303      	movs	r3, #3
 800ba22:	e006      	b.n	800ba32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba24:	4b05      	ldr	r3, [pc, #20]	; (800ba3c <RCCEx_PLL3_Config+0x15c>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d0f0      	beq.n	800ba12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	58024400 	.word	0x58024400
 800ba40:	ffff0007 	.word	0xffff0007

0800ba44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d067      	beq.n	800bb26 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f7f6 fad4 	bl	8002018 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2202      	movs	r2, #2
 800ba74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	22ca      	movs	r2, #202	; 0xca
 800ba7e:	625a      	str	r2, [r3, #36]	; 0x24
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2253      	movs	r2, #83	; 0x53
 800ba86:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f923 	bl	800bcd4 <RTC_EnterInitMode>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d13b      	bne.n	800bb10 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6899      	ldr	r1, [r3, #8]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	4b23      	ldr	r3, [pc, #140]	; (800bb30 <HAL_RTC_Init+0xec>)
 800baa4:	400b      	ands	r3, r1
 800baa6:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6899      	ldr	r1, [r3, #8]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685a      	ldr	r2, [r3, #4]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	431a      	orrs	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	431a      	orrs	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	430a      	orrs	r2, r1
 800bac4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	0419      	lsls	r1, r3, #16
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68da      	ldr	r2, [r3, #12]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	430a      	orrs	r2, r1
 800bad6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f92b 	bl	800bd34 <RTC_ExitInitMode>
 800bade:	4603      	mov	r3, r0
 800bae0:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d113      	bne.n	800bb10 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f022 0203 	bic.w	r2, r2, #3
 800baf6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	69da      	ldr	r2, [r3, #28]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	22ff      	movs	r2, #255	; 0xff
 800bb16:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d103      	bne.n	800bb26 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2201      	movs	r2, #1
 800bb22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	ff8fffbf 	.word	0xff8fffbf

0800bb34 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	4b22      	ldr	r3, [pc, #136]	; (800bbe8 <HAL_RTC_GetTime+0xb4>)
 800bb60:	4013      	ands	r3, r2
 800bb62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	0c1b      	lsrs	r3, r3, #16
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	0a1b      	lsrs	r3, r3, #8
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	0d9b      	lsrs	r3, r3, #22
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	f003 0301 	and.w	r3, r3, #1
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d11a      	bne.n	800bbde <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 f8ff 	bl	800bdb0 <RTC_Bcd2ToByte>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	785b      	ldrb	r3, [r3, #1]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 f8f6 	bl	800bdb0 <RTC_Bcd2ToByte>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	789b      	ldrb	r3, [r3, #2]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 f8ed 	bl	800bdb0 <RTC_Bcd2ToByte>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	461a      	mov	r2, r3
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	007f7f7f 	.word	0x007f7f7f

0800bbec <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685a      	ldr	r2, [r3, #4]
 800bbfe:	4b21      	ldr	r3, [pc, #132]	; (800bc84 <HAL_RTC_GetDate+0x98>)
 800bc00:	4013      	ands	r3, r2
 800bc02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	0c1b      	lsrs	r3, r3, #16
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	0a1b      	lsrs	r3, r3, #8
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	f003 031f 	and.w	r3, r3, #31
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	0b5b      	lsrs	r3, r3, #13
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	f003 0307 	and.w	r3, r3, #7
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d11a      	bne.n	800bc78 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	78db      	ldrb	r3, [r3, #3]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 f8b2 	bl	800bdb0 <RTC_Bcd2ToByte>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	461a      	mov	r2, r3
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	785b      	ldrb	r3, [r3, #1]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f000 f8a9 	bl	800bdb0 <RTC_Bcd2ToByte>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	461a      	mov	r2, r3
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	789b      	ldrb	r3, [r3, #2]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 f8a0 	bl	800bdb0 <RTC_Bcd2ToByte>
 800bc70:	4603      	mov	r3, r0
 800bc72:	461a      	mov	r2, r3
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	00ffff3f 	.word	0x00ffff3f

0800bc88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68da      	ldr	r2, [r3, #12]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bc9e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800bca0:	f7f9 f8be 	bl	8004e20 <HAL_GetTick>
 800bca4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bca6:	e009      	b.n	800bcbc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bca8:	f7f9 f8ba 	bl	8004e20 <HAL_GetTick>
 800bcac:	4602      	mov	r2, r0
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcb6:	d901      	bls.n	800bcbc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e007      	b.n	800bccc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	f003 0320 	and.w	r3, r3, #32
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d0ee      	beq.n	800bca8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d11d      	bne.n	800bd2a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800bcf8:	f7f9 f892 	bl	8004e20 <HAL_GetTick>
 800bcfc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bcfe:	e00d      	b.n	800bd1c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bd00:	f7f9 f88e 	bl	8004e20 <HAL_GetTick>
 800bd04:	4602      	mov	r2, r0
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd0e:	d905      	bls.n	800bd1c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2203      	movs	r2, #3
 800bd18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0ea      	beq.n	800bd00 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800bd40:	4b1a      	ldr	r3, [pc, #104]	; (800bdac <RTC_ExitInitMode+0x78>)
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	4a19      	ldr	r2, [pc, #100]	; (800bdac <RTC_ExitInitMode+0x78>)
 800bd46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd4a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bd4c:	4b17      	ldr	r3, [pc, #92]	; (800bdac <RTC_ExitInitMode+0x78>)
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	f003 0320 	and.w	r3, r3, #32
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10c      	bne.n	800bd72 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff ff95 	bl	800bc88 <HAL_RTC_WaitForSynchro>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d01e      	beq.n	800bda2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2203      	movs	r2, #3
 800bd68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	73fb      	strb	r3, [r7, #15]
 800bd70:	e017      	b.n	800bda2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bd72:	4b0e      	ldr	r3, [pc, #56]	; (800bdac <RTC_ExitInitMode+0x78>)
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	4a0d      	ldr	r2, [pc, #52]	; (800bdac <RTC_ExitInitMode+0x78>)
 800bd78:	f023 0320 	bic.w	r3, r3, #32
 800bd7c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7ff ff82 	bl	800bc88 <HAL_RTC_WaitForSynchro>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d005      	beq.n	800bd96 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2203      	movs	r2, #3
 800bd8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800bd92:	2303      	movs	r3, #3
 800bd94:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bd96:	4b05      	ldr	r3, [pc, #20]	; (800bdac <RTC_ExitInitMode+0x78>)
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	4a04      	ldr	r2, [pc, #16]	; (800bdac <RTC_ExitInitMode+0x78>)
 800bd9c:	f043 0320 	orr.w	r3, r3, #32
 800bda0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800bda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	58004000 	.word	0x58004000

0800bdb0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800bdba:	79fb      	ldrb	r3, [r7, #7]
 800bdbc:	091b      	lsrs	r3, r3, #4
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	0092      	lsls	r2, r2, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800bdca:	79fb      	ldrb	r3, [r7, #7]
 800bdcc:	f003 030f 	and.w	r3, r3, #15
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	b2db      	uxtb	r3, r3
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800bdec:	2300      	movs	r3, #0
 800bdee:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d101      	bne.n	800bdfa <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e0eb      	b.n	800bfd2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a75      	ldr	r2, [pc, #468]	; (800bfdc <HAL_SPI_Init+0x1f8>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d00f      	beq.n	800be2a <HAL_SPI_Init+0x46>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a74      	ldr	r2, [pc, #464]	; (800bfe0 <HAL_SPI_Init+0x1fc>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d00a      	beq.n	800be2a <HAL_SPI_Init+0x46>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a72      	ldr	r2, [pc, #456]	; (800bfe4 <HAL_SPI_Init+0x200>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d005      	beq.n	800be2a <HAL_SPI_Init+0x46>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	2b0f      	cmp	r3, #15
 800be24:	d901      	bls.n	800be2a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	e0d3      	b.n	800bfd2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 f87a 	bl	800cf24 <SPI_GetPacketSize>
 800be30:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a69      	ldr	r2, [pc, #420]	; (800bfdc <HAL_SPI_Init+0x1f8>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d00c      	beq.n	800be56 <HAL_SPI_Init+0x72>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a67      	ldr	r2, [pc, #412]	; (800bfe0 <HAL_SPI_Init+0x1fc>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d007      	beq.n	800be56 <HAL_SPI_Init+0x72>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a66      	ldr	r2, [pc, #408]	; (800bfe4 <HAL_SPI_Init+0x200>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d002      	beq.n	800be56 <HAL_SPI_Init+0x72>
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	2b08      	cmp	r3, #8
 800be54:	d811      	bhi.n	800be7a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be5a:	4a60      	ldr	r2, [pc, #384]	; (800bfdc <HAL_SPI_Init+0x1f8>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d009      	beq.n	800be74 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a5e      	ldr	r2, [pc, #376]	; (800bfe0 <HAL_SPI_Init+0x1fc>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d004      	beq.n	800be74 <HAL_SPI_Init+0x90>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a5d      	ldr	r2, [pc, #372]	; (800bfe4 <HAL_SPI_Init+0x200>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d104      	bne.n	800be7e <HAL_SPI_Init+0x9a>
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2b10      	cmp	r3, #16
 800be78:	d901      	bls.n	800be7e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e0a9      	b.n	800bfd2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d106      	bne.n	800be98 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7f6 f9bc 	bl	8002210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2202      	movs	r2, #2
 800be9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f022 0201 	bic.w	r2, r2, #1
 800beae:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800beb8:	d119      	bne.n	800beee <HAL_SPI_Init+0x10a>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bec2:	d103      	bne.n	800becc <HAL_SPI_Init+0xe8>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d008      	beq.n	800bede <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10c      	bne.n	800beee <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bedc:	d107      	bne.n	800beee <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800beec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	69da      	ldr	r2, [r3, #28]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef6:	431a      	orrs	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	431a      	orrs	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf00:	ea42 0103 	orr.w	r1, r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	68da      	ldr	r2, [r3, #12]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	430a      	orrs	r2, r1
 800bf0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1e:	431a      	orrs	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	431a      	orrs	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	431a      	orrs	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	431a      	orrs	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	431a      	orrs	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf42:	431a      	orrs	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	431a      	orrs	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf4e:	ea42 0103 	orr.w	r1, r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d113      	bne.n	800bf8e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f022 0201 	bic.w	r2, r2, #1
 800bf9c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00a      	beq.n	800bfc0 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	430a      	orrs	r2, r1
 800bfbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	40013000 	.word	0x40013000
 800bfe0:	40003800 	.word	0x40003800
 800bfe4:	40003c00 	.word	0x40003c00

0800bfe8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af02      	add	r7, sp, #8
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	603b      	str	r3, [r7, #0]
 800bff4:	4613      	mov	r3, r2
 800bff6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3320      	adds	r3, #32
 800bffe:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d101      	bne.n	800c012 <HAL_SPI_Transmit+0x2a>
 800c00e:	2302      	movs	r3, #2
 800c010:	e1d7      	b.n	800c3c2 <HAL_SPI_Transmit+0x3da>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c01a:	f7f8 ff01 	bl	8004e20 <HAL_GetTick>
 800c01e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d007      	beq.n	800c03c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c02c:	2302      	movs	r3, #2
 800c02e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c038:	7efb      	ldrb	r3, [r7, #27]
 800c03a:	e1c2      	b.n	800c3c2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <HAL_SPI_Transmit+0x60>
 800c042:	88fb      	ldrh	r3, [r7, #6]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d107      	bne.n	800c058 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c054:	7efb      	ldrb	r3, [r7, #27]
 800c056:	e1b4      	b.n	800c3c2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2203      	movs	r2, #3
 800c05c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	88fa      	ldrh	r2, [r7, #6]
 800c072:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	88fa      	ldrh	r2, [r7, #6]
 800c07a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c0a8:	d107      	bne.n	800c0ba <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	4b96      	ldr	r3, [pc, #600]	; (800c31c <HAL_SPI_Transmit+0x334>)
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	88f9      	ldrh	r1, [r7, #6]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	6812      	ldr	r2, [r2, #0]
 800c0ca:	430b      	orrs	r3, r1
 800c0cc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f042 0201 	orr.w	r2, r2, #1
 800c0dc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0e6:	d107      	bne.n	800c0f8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	2b0f      	cmp	r3, #15
 800c0fe:	d947      	bls.n	800c190 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c100:	e03f      	b.n	800c182 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	f003 0302 	and.w	r3, r3, #2
 800c10c:	2b02      	cmp	r3, #2
 800c10e:	d114      	bne.n	800c13a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6812      	ldr	r2, [r2, #0]
 800c11a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c120:	1d1a      	adds	r2, r3, #4
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	3b01      	subs	r3, #1
 800c130:	b29a      	uxth	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c138:	e023      	b.n	800c182 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c13a:	f7f8 fe71 	bl	8004e20 <HAL_GetTick>
 800c13e:	4602      	mov	r2, r0
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	683a      	ldr	r2, [r7, #0]
 800c146:	429a      	cmp	r2, r3
 800c148:	d803      	bhi.n	800c152 <HAL_SPI_Transmit+0x16a>
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c150:	d102      	bne.n	800c158 <HAL_SPI_Transmit+0x170>
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d114      	bne.n	800c182 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f000 fe15 	bl	800cd88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c16c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e11f      	b.n	800c3c2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c188:	b29b      	uxth	r3, r3
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1b9      	bne.n	800c102 <HAL_SPI_Transmit+0x11a>
 800c18e:	e0f2      	b.n	800c376 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	2b07      	cmp	r3, #7
 800c196:	f240 80e7 	bls.w	800c368 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c19a:	e05d      	b.n	800c258 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	f003 0302 	and.w	r3, r3, #2
 800c1a6:	2b02      	cmp	r3, #2
 800c1a8:	d132      	bne.n	800c210 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d918      	bls.n	800c1e8 <HAL_SPI_Transmit+0x200>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d014      	beq.n	800c1e8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6812      	ldr	r2, [r2, #0]
 800c1c8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1ce:	1d1a      	adds	r2, r3, #4
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	3b02      	subs	r3, #2
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c1e6:	e037      	b.n	800c258 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1ec:	881a      	ldrh	r2, [r3, #0]
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1f6:	1c9a      	adds	r2, r3, #2
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c202:	b29b      	uxth	r3, r3
 800c204:	3b01      	subs	r3, #1
 800c206:	b29a      	uxth	r2, r3
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c20e:	e023      	b.n	800c258 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c210:	f7f8 fe06 	bl	8004e20 <HAL_GetTick>
 800c214:	4602      	mov	r2, r0
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d803      	bhi.n	800c228 <HAL_SPI_Transmit+0x240>
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c226:	d102      	bne.n	800c22e <HAL_SPI_Transmit+0x246>
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d114      	bne.n	800c258 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f000 fdaa 	bl	800cd88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e0b4      	b.n	800c3c2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c25e:	b29b      	uxth	r3, r3
 800c260:	2b00      	cmp	r3, #0
 800c262:	d19b      	bne.n	800c19c <HAL_SPI_Transmit+0x1b4>
 800c264:	e087      	b.n	800c376 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	695b      	ldr	r3, [r3, #20]
 800c26c:	f003 0302 	and.w	r3, r3, #2
 800c270:	2b02      	cmp	r3, #2
 800c272:	d155      	bne.n	800c320 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	2b03      	cmp	r3, #3
 800c27e:	d918      	bls.n	800c2b2 <HAL_SPI_Transmit+0x2ca>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c284:	2b40      	cmp	r3, #64	; 0x40
 800c286:	d914      	bls.n	800c2b2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6812      	ldr	r2, [r2, #0]
 800c292:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c298:	1d1a      	adds	r2, r3, #4
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	3b04      	subs	r3, #4
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c2b0:	e05a      	b.n	800c368 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d917      	bls.n	800c2ee <HAL_SPI_Transmit+0x306>
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d013      	beq.n	800c2ee <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2ca:	881a      	ldrh	r2, [r3, #0]
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2d4:	1c9a      	adds	r2, r3, #2
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	3b02      	subs	r3, #2
 800c2e4:	b29a      	uxth	r2, r3
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c2ec:	e03c      	b.n	800c368 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3320      	adds	r3, #32
 800c2f8:	7812      	ldrb	r2, [r2, #0]
 800c2fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	3b01      	subs	r3, #1
 800c310:	b29a      	uxth	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c318:	e026      	b.n	800c368 <HAL_SPI_Transmit+0x380>
 800c31a:	bf00      	nop
 800c31c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c320:	f7f8 fd7e 	bl	8004e20 <HAL_GetTick>
 800c324:	4602      	mov	r2, r0
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d803      	bhi.n	800c338 <HAL_SPI_Transmit+0x350>
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c336:	d102      	bne.n	800c33e <HAL_SPI_Transmit+0x356>
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d114      	bne.n	800c368 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f000 fd22 	bl	800cd88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c352:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	e02c      	b.n	800c3c2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c36e:	b29b      	uxth	r3, r3
 800c370:	2b00      	cmp	r3, #0
 800c372:	f47f af78 	bne.w	800c266 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2200      	movs	r2, #0
 800c37e:	2108      	movs	r1, #8
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f000 fda1 	bl	800cec8 <SPI_WaitOnFlagUntilTimeout>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d007      	beq.n	800c39c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c392:	f043 0220 	orr.w	r2, r3, #32
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 fcf3 	bl	800cd88 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d001      	beq.n	800c3c0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e000      	b.n	800c3c2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c3c0:	7efb      	ldrb	r3, [r7, #27]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3720      	adds	r7, #32
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop

0800c3cc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08a      	sub	sp, #40	; 0x28
 800c3d0:	af02      	add	r7, sp, #8
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3330      	adds	r3, #48	; 0x30
 800c3e6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3f0:	d112      	bne.n	800c418 <HAL_SPI_Receive+0x4c>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d10e      	bne.n	800c418 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2204      	movs	r2, #4
 800c3fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c402:	88fa      	ldrh	r2, [r7, #6]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	4613      	mov	r3, r2
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	68b9      	ldr	r1, [r7, #8]
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f000 f9ce 	bl	800c7b0 <HAL_SPI_TransmitReceive>
 800c414:	4603      	mov	r3, r0
 800c416:	e1c7      	b.n	800c7a8 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d101      	bne.n	800c426 <HAL_SPI_Receive+0x5a>
 800c422:	2302      	movs	r3, #2
 800c424:	e1c0      	b.n	800c7a8 <HAL_SPI_Receive+0x3dc>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c42e:	f7f8 fcf7 	bl	8004e20 <HAL_GetTick>
 800c432:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d007      	beq.n	800c450 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800c440:	2302      	movs	r3, #2
 800c442:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c44c:	7ffb      	ldrb	r3, [r7, #31]
 800c44e:	e1ab      	b.n	800c7a8 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d002      	beq.n	800c45c <HAL_SPI_Receive+0x90>
 800c456:	88fb      	ldrh	r3, [r7, #6]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d107      	bne.n	800c46c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c468:	7ffb      	ldrb	r3, [r7, #31]
 800c46a:	e19d      	b.n	800c7a8 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2204      	movs	r2, #4
 800c470:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2200      	movs	r2, #0
 800c478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	88fa      	ldrh	r2, [r7, #6]
 800c486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	88fa      	ldrh	r2, [r7, #6]
 800c48e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c4bc:	d107      	bne.n	800c4ce <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c4cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	4b94      	ldr	r3, [pc, #592]	; (800c728 <HAL_SPI_Receive+0x35c>)
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	88f9      	ldrh	r1, [r7, #6]
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	6812      	ldr	r2, [r2, #0]
 800c4de:	430b      	orrs	r3, r1
 800c4e0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f042 0201 	orr.w	r2, r2, #1
 800c4f0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4fa:	d107      	bne.n	800c50c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c50a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	2b0f      	cmp	r3, #15
 800c512:	d948      	bls.n	800c5a6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c514:	e040      	b.n	800c598 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	695a      	ldr	r2, [r3, #20]
 800c51c:	f248 0308 	movw	r3, #32776	; 0x8008
 800c520:	4013      	ands	r3, r2
 800c522:	2b00      	cmp	r3, #0
 800c524:	d014      	beq.n	800c550 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c52e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c530:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c536:	1d1a      	adds	r2, r3, #4
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c542:	b29b      	uxth	r3, r3
 800c544:	3b01      	subs	r3, #1
 800c546:	b29a      	uxth	r2, r3
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c54e:	e023      	b.n	800c598 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c550:	f7f8 fc66 	bl	8004e20 <HAL_GetTick>
 800c554:	4602      	mov	r2, r0
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d803      	bhi.n	800c568 <HAL_SPI_Receive+0x19c>
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c566:	d102      	bne.n	800c56e <HAL_SPI_Receive+0x1a2>
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d114      	bne.n	800c598 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f000 fc0a 	bl	800cd88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c582:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	e107      	b.n	800c7a8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1b8      	bne.n	800c516 <HAL_SPI_Receive+0x14a>
 800c5a4:	e0ed      	b.n	800c782 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	2b07      	cmp	r3, #7
 800c5ac:	f240 80e2 	bls.w	800c774 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c5b0:	e05b      	b.n	800c66a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d030      	beq.n	800c622 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	695b      	ldr	r3, [r3, #20]
 800c5c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d014      	beq.n	800c5f8 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c5d8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5de:	1d1a      	adds	r2, r3, #4
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	3b02      	subs	r3, #2
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c5f6:	e038      	b.n	800c66a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5fc:	69ba      	ldr	r2, [r7, #24]
 800c5fe:	8812      	ldrh	r2, [r2, #0]
 800c600:	b292      	uxth	r2, r2
 800c602:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c608:	1c9a      	adds	r2, r3, #2
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c614:	b29b      	uxth	r3, r3
 800c616:	3b01      	subs	r3, #1
 800c618:	b29a      	uxth	r2, r3
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c620:	e023      	b.n	800c66a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c622:	f7f8 fbfd 	bl	8004e20 <HAL_GetTick>
 800c626:	4602      	mov	r2, r0
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	683a      	ldr	r2, [r7, #0]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d803      	bhi.n	800c63a <HAL_SPI_Receive+0x26e>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c638:	d102      	bne.n	800c640 <HAL_SPI_Receive+0x274>
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d114      	bne.n	800c66a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f000 fba1 	bl	800cd88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2200      	movs	r2, #0
 800c64a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c654:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2201      	movs	r2, #1
 800c662:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	e09e      	b.n	800c7a8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c670:	b29b      	uxth	r3, r3
 800c672:	2b00      	cmp	r3, #0
 800c674:	d19d      	bne.n	800c5b2 <HAL_SPI_Receive+0x1e6>
 800c676:	e084      	b.n	800c782 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	695b      	ldr	r3, [r3, #20]
 800c67e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d052      	beq.n	800c72c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	695b      	ldr	r3, [r3, #20]
 800c68c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d014      	beq.n	800c6be <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c69c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c69e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6a4:	1d1a      	adds	r2, r3, #4
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	3b04      	subs	r3, #4
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c6bc:	e05a      	b.n	800c774 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	695b      	ldr	r3, [r3, #20]
 800c6c4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c6c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6cc:	d914      	bls.n	800c6f8 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6d2:	69ba      	ldr	r2, [r7, #24]
 800c6d4:	8812      	ldrh	r2, [r2, #0]
 800c6d6:	b292      	uxth	r2, r2
 800c6d8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6de:	1c9a      	adds	r2, r3, #2
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	3b02      	subs	r3, #2
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c6f6:	e03d      	b.n	800c774 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c704:	7812      	ldrb	r2, [r2, #0]
 800c706:	b2d2      	uxtb	r2, r2
 800c708:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	3b01      	subs	r3, #1
 800c71e:	b29a      	uxth	r2, r3
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c726:	e025      	b.n	800c774 <HAL_SPI_Receive+0x3a8>
 800c728:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c72c:	f7f8 fb78 	bl	8004e20 <HAL_GetTick>
 800c730:	4602      	mov	r2, r0
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d803      	bhi.n	800c744 <HAL_SPI_Receive+0x378>
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c742:	d102      	bne.n	800c74a <HAL_SPI_Receive+0x37e>
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d114      	bne.n	800c774 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	f000 fb1c 	bl	800cd88 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c75e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c770:	2301      	movs	r3, #1
 800c772:	e019      	b.n	800c7a8 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f47f af7b 	bne.w	800c678 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f000 fb00 	bl	800cd88 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d001      	beq.n	800c7a6 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800c7a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3720      	adds	r7, #32
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b08e      	sub	sp, #56	; 0x38
 800c7b4:	af02      	add	r7, sp, #8
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
 800c7bc:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	3320      	adds	r3, #32
 800c7ca:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	3330      	adds	r3, #48	; 0x30
 800c7d2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d101      	bne.n	800c7e2 <HAL_SPI_TransmitReceive+0x32>
 800c7de:	2302      	movs	r3, #2
 800c7e0:	e2ce      	b.n	800cd80 <HAL_SPI_TransmitReceive+0x5d0>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7ea:	f7f8 fb19 	bl	8004e20 <HAL_GetTick>
 800c7ee:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800c7f0:	887b      	ldrh	r3, [r7, #2]
 800c7f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800c7f4:	887b      	ldrh	r3, [r7, #2]
 800c7f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c7fe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c806:	7efb      	ldrb	r3, [r7, #27]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d014      	beq.n	800c836 <HAL_SPI_TransmitReceive+0x86>
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c812:	d106      	bne.n	800c822 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d102      	bne.n	800c822 <HAL_SPI_TransmitReceive+0x72>
 800c81c:	7efb      	ldrb	r3, [r7, #27]
 800c81e:	2b04      	cmp	r3, #4
 800c820:	d009      	beq.n	800c836 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800c822:	2302      	movs	r3, #2
 800c824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c830:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c834:	e2a4      	b.n	800cd80 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d005      	beq.n	800c848 <HAL_SPI_TransmitReceive+0x98>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d002      	beq.n	800c848 <HAL_SPI_TransmitReceive+0x98>
 800c842:	887b      	ldrh	r3, [r7, #2]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d109      	bne.n	800c85c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800c848:	2301      	movs	r3, #1
 800c84a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c856:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c85a:	e291      	b.n	800cd80 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b04      	cmp	r3, #4
 800c866:	d003      	beq.n	800c870 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2205      	movs	r2, #5
 800c86c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2200      	movs	r2, #0
 800c874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	887a      	ldrh	r2, [r7, #2]
 800c882:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	887a      	ldrh	r2, [r7, #2]
 800c88a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	68ba      	ldr	r2, [r7, #8]
 800c892:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	887a      	ldrh	r2, [r7, #2]
 800c898:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	887a      	ldrh	r2, [r7, #2]
 800c8a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	685a      	ldr	r2, [r3, #4]
 800c8b6:	4b9f      	ldr	r3, [pc, #636]	; (800cb34 <HAL_SPI_TransmitReceive+0x384>)
 800c8b8:	4013      	ands	r3, r2
 800c8ba:	8879      	ldrh	r1, [r7, #2]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	6812      	ldr	r2, [r2, #0]
 800c8c0:	430b      	orrs	r3, r1
 800c8c2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f042 0201 	orr.w	r2, r2, #1
 800c8d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8dc:	d107      	bne.n	800c8ee <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	2b0f      	cmp	r3, #15
 800c8f4:	d970      	bls.n	800c9d8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c8f6:	e068      	b.n	800c9ca <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	695b      	ldr	r3, [r3, #20]
 800c8fe:	f003 0302 	and.w	r3, r3, #2
 800c902:	2b02      	cmp	r3, #2
 800c904:	d11a      	bne.n	800c93c <HAL_SPI_TransmitReceive+0x18c>
 800c906:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d017      	beq.n	800c93c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	6812      	ldr	r2, [r2, #0]
 800c916:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c91c:	1d1a      	adds	r2, r3, #4
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c928:	b29b      	uxth	r3, r3
 800c92a:	3b01      	subs	r3, #1
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c93a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	695a      	ldr	r2, [r3, #20]
 800c942:	f248 0308 	movw	r3, #32776	; 0x8008
 800c946:	4013      	ands	r3, r2
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d01a      	beq.n	800c982 <HAL_SPI_TransmitReceive+0x1d2>
 800c94c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d017      	beq.n	800c982 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c95a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c95c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c962:	1d1a      	adds	r2, r3, #4
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c96e:	b29b      	uxth	r3, r3
 800c970:	3b01      	subs	r3, #1
 800c972:	b29a      	uxth	r2, r3
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c980:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c982:	f7f8 fa4d 	bl	8004e20 <HAL_GetTick>
 800c986:	4602      	mov	r2, r0
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	1ad3      	subs	r3, r2, r3
 800c98c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c98e:	429a      	cmp	r2, r3
 800c990:	d803      	bhi.n	800c99a <HAL_SPI_TransmitReceive+0x1ea>
 800c992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c998:	d102      	bne.n	800c9a0 <HAL_SPI_TransmitReceive+0x1f0>
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d114      	bne.n	800c9ca <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f000 f9f1 	bl	800cd88 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e1da      	b.n	800cd80 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c9ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d193      	bne.n	800c8f8 <HAL_SPI_TransmitReceive+0x148>
 800c9d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d190      	bne.n	800c8f8 <HAL_SPI_TransmitReceive+0x148>
 800c9d6:	e1ac      	b.n	800cd32 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	2b07      	cmp	r3, #7
 800c9de:	f240 81a0 	bls.w	800cd22 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c9e2:	e0a9      	b.n	800cb38 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	f003 0302 	and.w	r3, r3, #2
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d139      	bne.n	800ca66 <HAL_SPI_TransmitReceive+0x2b6>
 800c9f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d036      	beq.n	800ca66 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c9f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d91c      	bls.n	800ca38 <HAL_SPI_TransmitReceive+0x288>
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d018      	beq.n	800ca38 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6812      	ldr	r2, [r2, #0]
 800ca10:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca16:	1d1a      	adds	r2, r3, #4
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	3b02      	subs	r3, #2
 800ca26:	b29a      	uxth	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ca36:	e016      	b.n	800ca66 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca3c:	881a      	ldrh	r2, [r3, #0]
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca46:	1c9a      	adds	r2, r3, #2
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	3b01      	subs	r3, #1
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca64:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d03a      	beq.n	800caea <HAL_SPI_TransmitReceive+0x33a>
 800ca74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d037      	beq.n	800caea <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	695b      	ldr	r3, [r3, #20]
 800ca80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d018      	beq.n	800caba <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca92:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca98:	1d1a      	adds	r2, r3, #4
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	3b02      	subs	r3, #2
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cab6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cab8:	e017      	b.n	800caea <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cabe:	6a3a      	ldr	r2, [r7, #32]
 800cac0:	8812      	ldrh	r2, [r2, #0]
 800cac2:	b292      	uxth	r2, r2
 800cac4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caca:	1c9a      	adds	r2, r3, #2
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	3b01      	subs	r3, #1
 800cada:	b29a      	uxth	r2, r3
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cae8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800caea:	f7f8 f999 	bl	8004e20 <HAL_GetTick>
 800caee:	4602      	mov	r2, r0
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d803      	bhi.n	800cb02 <HAL_SPI_TransmitReceive+0x352>
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb00:	d102      	bne.n	800cb08 <HAL_SPI_TransmitReceive+0x358>
 800cb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d117      	bne.n	800cb38 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f000 f93d 	bl	800cd88 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e126      	b.n	800cd80 <HAL_SPI_TransmitReceive+0x5d0>
 800cb32:	bf00      	nop
 800cb34:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cb38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f47f af52 	bne.w	800c9e4 <HAL_SPI_TransmitReceive+0x234>
 800cb40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f47f af4e 	bne.w	800c9e4 <HAL_SPI_TransmitReceive+0x234>
 800cb48:	e0f3      	b.n	800cd32 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	f003 0302 	and.w	r3, r3, #2
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d15a      	bne.n	800cc0e <HAL_SPI_TransmitReceive+0x45e>
 800cb58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d057      	beq.n	800cc0e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cb5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	d91c      	bls.n	800cb9e <HAL_SPI_TransmitReceive+0x3ee>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb68:	2b40      	cmp	r3, #64	; 0x40
 800cb6a:	d918      	bls.n	800cb9e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	6812      	ldr	r2, [r2, #0]
 800cb76:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb7c:	1d1a      	adds	r2, r3, #4
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	3b04      	subs	r3, #4
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cb9c:	e037      	b.n	800cc0e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cb9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d91b      	bls.n	800cbdc <HAL_SPI_TransmitReceive+0x42c>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d017      	beq.n	800cbdc <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbb0:	881a      	ldrh	r2, [r3, #0]
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbba:	1c9a      	adds	r2, r3, #2
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	3b02      	subs	r3, #2
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cbda:	e018      	b.n	800cc0e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	3320      	adds	r3, #32
 800cbe6:	7812      	ldrb	r2, [r2, #0]
 800cbe8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	695b      	ldr	r3, [r3, #20]
 800cc14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d05e      	beq.n	800ccda <HAL_SPI_TransmitReceive+0x52a>
 800cc1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d05b      	beq.n	800ccda <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	695b      	ldr	r3, [r3, #20]
 800cc28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d018      	beq.n	800cc62 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cc3a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc40:	1d1a      	adds	r2, r3, #4
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	3b04      	subs	r3, #4
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cc60:	e03b      	b.n	800ccda <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	695b      	ldr	r3, [r3, #20]
 800cc68:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800cc6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc70:	d918      	bls.n	800cca4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc76:	6a3a      	ldr	r2, [r7, #32]
 800cc78:	8812      	ldrh	r2, [r2, #0]
 800cc7a:	b292      	uxth	r2, r2
 800cc7c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc82:	1c9a      	adds	r2, r3, #2
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	3b02      	subs	r3, #2
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cca0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cca2:	e01a      	b.n	800ccda <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccb0:	7812      	ldrb	r2, [r2, #0]
 800ccb2:	b2d2      	uxtb	r2, r2
 800ccb4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccba:	1c5a      	adds	r2, r3, #1
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ccda:	f7f8 f8a1 	bl	8004e20 <HAL_GetTick>
 800ccde:	4602      	mov	r2, r0
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d803      	bhi.n	800ccf2 <HAL_SPI_TransmitReceive+0x542>
 800ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf0:	d102      	bne.n	800ccf8 <HAL_SPI_TransmitReceive+0x548>
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d114      	bne.n	800cd22 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f000 f845 	bl	800cd88 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e02e      	b.n	800cd80 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cd22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f47f af10 	bne.w	800cb4a <HAL_SPI_TransmitReceive+0x39a>
 800cd2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f47f af0c 	bne.w	800cb4a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800cd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	2108      	movs	r1, #8
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f000 f8c3 	bl	800cec8 <SPI_WaitOnFlagUntilTimeout>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d007      	beq.n	800cd58 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd4e:	f043 0220 	orr.w	r2, r3, #32
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f000 f815 	bl	800cd88 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e001      	b.n	800cd80 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800cd7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3730      	adds	r7, #48	; 0x30
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	695b      	ldr	r3, [r3, #20]
 800cd96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	699a      	ldr	r2, [r3, #24]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f042 0208 	orr.w	r2, r2, #8
 800cda6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	699a      	ldr	r2, [r3, #24]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f042 0210 	orr.w	r2, r2, #16
 800cdb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f022 0201 	bic.w	r2, r2, #1
 800cdc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	6919      	ldr	r1, [r3, #16]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	4b3c      	ldr	r3, [pc, #240]	; (800cec4 <SPI_CloseTransfer+0x13c>)
 800cdd4:	400b      	ands	r3, r1
 800cdd6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	689a      	ldr	r2, [r3, #8]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cde6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	2b04      	cmp	r3, #4
 800cdf2:	d014      	beq.n	800ce1e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f003 0320 	and.w	r3, r3, #32
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00f      	beq.n	800ce1e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	699a      	ldr	r2, [r3, #24]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f042 0220 	orr.w	r2, r2, #32
 800ce1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d014      	beq.n	800ce54 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00f      	beq.n	800ce54 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce3a:	f043 0204 	orr.w	r2, r3, #4
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	699a      	ldr	r2, [r3, #24]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00f      	beq.n	800ce7e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce64:	f043 0201 	orr.w	r2, r3, #1
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	699a      	ldr	r2, [r3, #24]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00f      	beq.n	800cea8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce8e:	f043 0208 	orr.w	r2, r3, #8
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	699a      	ldr	r2, [r3, #24]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cea6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ceb8:	bf00      	nop
 800ceba:	3714      	adds	r7, #20
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr
 800cec4:	fffffc90 	.word	0xfffffc90

0800cec8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	603b      	str	r3, [r7, #0]
 800ced4:	4613      	mov	r3, r2
 800ced6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ced8:	e010      	b.n	800cefc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ceda:	f7f7 ffa1 	bl	8004e20 <HAL_GetTick>
 800cede:	4602      	mov	r2, r0
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	69ba      	ldr	r2, [r7, #24]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d803      	bhi.n	800cef2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef0:	d102      	bne.n	800cef8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d101      	bne.n	800cefc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cef8:	2303      	movs	r3, #3
 800cefa:	e00f      	b.n	800cf1c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	695a      	ldr	r2, [r3, #20]
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	4013      	ands	r3, r2
 800cf06:	68ba      	ldr	r2, [r7, #8]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	bf0c      	ite	eq
 800cf0c:	2301      	moveq	r3, #1
 800cf0e:	2300      	movne	r3, #0
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	461a      	mov	r2, r3
 800cf14:	79fb      	ldrb	r3, [r7, #7]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d0df      	beq.n	800ceda <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf30:	095b      	lsrs	r3, r3, #5
 800cf32:	3301      	adds	r3, #1
 800cf34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	3307      	adds	r3, #7
 800cf42:	08db      	lsrs	r3, r3, #3
 800cf44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	fb02 f303 	mul.w	r3, r2, r3
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3714      	adds	r7, #20
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e049      	b.n	800d000 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d106      	bne.n	800cf86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f841 	bl	800d008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2202      	movs	r2, #2
 800cf8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	3304      	adds	r3, #4
 800cf96:	4619      	mov	r1, r3
 800cf98:	4610      	mov	r0, r2
 800cf9a:	f000 fb5d 	bl	800d658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d010:	bf00      	nop
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d001      	beq.n	800d034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	e04f      	b.n	800d0d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2202      	movs	r2, #2
 800d038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	68da      	ldr	r2, [r3, #12]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f042 0201 	orr.w	r2, r2, #1
 800d04a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a23      	ldr	r2, [pc, #140]	; (800d0e0 <HAL_TIM_Base_Start_IT+0xc4>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d01d      	beq.n	800d092 <HAL_TIM_Base_Start_IT+0x76>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d05e:	d018      	beq.n	800d092 <HAL_TIM_Base_Start_IT+0x76>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a1f      	ldr	r2, [pc, #124]	; (800d0e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d013      	beq.n	800d092 <HAL_TIM_Base_Start_IT+0x76>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a1e      	ldr	r2, [pc, #120]	; (800d0e8 <HAL_TIM_Base_Start_IT+0xcc>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d00e      	beq.n	800d092 <HAL_TIM_Base_Start_IT+0x76>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a1c      	ldr	r2, [pc, #112]	; (800d0ec <HAL_TIM_Base_Start_IT+0xd0>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d009      	beq.n	800d092 <HAL_TIM_Base_Start_IT+0x76>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a1b      	ldr	r2, [pc, #108]	; (800d0f0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d004      	beq.n	800d092 <HAL_TIM_Base_Start_IT+0x76>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a19      	ldr	r2, [pc, #100]	; (800d0f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d115      	bne.n	800d0be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	689a      	ldr	r2, [r3, #8]
 800d098:	4b17      	ldr	r3, [pc, #92]	; (800d0f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d09a:	4013      	ands	r3, r2
 800d09c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b06      	cmp	r3, #6
 800d0a2:	d015      	beq.n	800d0d0 <HAL_TIM_Base_Start_IT+0xb4>
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0aa:	d011      	beq.n	800d0d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f042 0201 	orr.w	r2, r2, #1
 800d0ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0bc:	e008      	b.n	800d0d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f042 0201 	orr.w	r2, r2, #1
 800d0cc:	601a      	str	r2, [r3, #0]
 800d0ce:	e000      	b.n	800d0d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	40010000 	.word	0x40010000
 800d0e4:	40000400 	.word	0x40000400
 800d0e8:	40000800 	.word	0x40000800
 800d0ec:	40000c00 	.word	0x40000c00
 800d0f0:	40010400 	.word	0x40010400
 800d0f4:	40001800 	.word	0x40001800
 800d0f8:	00010007 	.word	0x00010007

0800d0fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d101      	bne.n	800d10e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d10a:	2301      	movs	r3, #1
 800d10c:	e049      	b.n	800d1a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d114:	b2db      	uxtb	r3, r3
 800d116:	2b00      	cmp	r3, #0
 800d118:	d106      	bne.n	800d128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7f5 fbc8 	bl	80028b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2202      	movs	r2, #2
 800d12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	3304      	adds	r3, #4
 800d138:	4619      	mov	r1, r3
 800d13a:	4610      	mov	r0, r2
 800d13c:	f000 fa8c 	bl	800d658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b082      	sub	sp, #8
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	691b      	ldr	r3, [r3, #16]
 800d1b8:	f003 0302 	and.w	r3, r3, #2
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d122      	bne.n	800d206 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	f003 0302 	and.w	r3, r3, #2
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d11b      	bne.n	800d206 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f06f 0202 	mvn.w	r2, #2
 800d1d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	f003 0303 	and.w	r3, r3, #3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d003      	beq.n	800d1f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 fa15 	bl	800d61c <HAL_TIM_IC_CaptureCallback>
 800d1f2:	e005      	b.n	800d200 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fa07 	bl	800d608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fa18 	bl	800d630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	f003 0304 	and.w	r3, r3, #4
 800d210:	2b04      	cmp	r3, #4
 800d212:	d122      	bne.n	800d25a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	f003 0304 	and.w	r3, r3, #4
 800d21e:	2b04      	cmp	r3, #4
 800d220:	d11b      	bne.n	800d25a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f06f 0204 	mvn.w	r2, #4
 800d22a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2202      	movs	r2, #2
 800d230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	699b      	ldr	r3, [r3, #24]
 800d238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d003      	beq.n	800d248 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f9eb 	bl	800d61c <HAL_TIM_IC_CaptureCallback>
 800d246:	e005      	b.n	800d254 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 f9dd 	bl	800d608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 f9ee 	bl	800d630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	f003 0308 	and.w	r3, r3, #8
 800d264:	2b08      	cmp	r3, #8
 800d266:	d122      	bne.n	800d2ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	f003 0308 	and.w	r3, r3, #8
 800d272:	2b08      	cmp	r3, #8
 800d274:	d11b      	bne.n	800d2ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f06f 0208 	mvn.w	r2, #8
 800d27e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2204      	movs	r2, #4
 800d284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	69db      	ldr	r3, [r3, #28]
 800d28c:	f003 0303 	and.w	r3, r3, #3
 800d290:	2b00      	cmp	r3, #0
 800d292:	d003      	beq.n	800d29c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 f9c1 	bl	800d61c <HAL_TIM_IC_CaptureCallback>
 800d29a:	e005      	b.n	800d2a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f9b3 	bl	800d608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f9c4 	bl	800d630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	f003 0310 	and.w	r3, r3, #16
 800d2b8:	2b10      	cmp	r3, #16
 800d2ba:	d122      	bne.n	800d302 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	f003 0310 	and.w	r3, r3, #16
 800d2c6:	2b10      	cmp	r3, #16
 800d2c8:	d11b      	bne.n	800d302 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f06f 0210 	mvn.w	r2, #16
 800d2d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2208      	movs	r2, #8
 800d2d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	69db      	ldr	r3, [r3, #28]
 800d2e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d003      	beq.n	800d2f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f997 	bl	800d61c <HAL_TIM_IC_CaptureCallback>
 800d2ee:	e005      	b.n	800d2fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 f989 	bl	800d608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 f99a 	bl	800d630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	f003 0301 	and.w	r3, r3, #1
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d10e      	bne.n	800d32e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	f003 0301 	and.w	r3, r3, #1
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d107      	bne.n	800d32e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f06f 0201 	mvn.w	r2, #1
 800d326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7f4 fe21 	bl	8001f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d338:	2b80      	cmp	r3, #128	; 0x80
 800d33a:	d10e      	bne.n	800d35a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d346:	2b80      	cmp	r3, #128	; 0x80
 800d348:	d107      	bne.n	800d35a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 feb1 	bl	800e0bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d368:	d10e      	bne.n	800d388 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d374:	2b80      	cmp	r3, #128	; 0x80
 800d376:	d107      	bne.n	800d388 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 fea4 	bl	800e0d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d392:	2b40      	cmp	r3, #64	; 0x40
 800d394:	d10e      	bne.n	800d3b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3a0:	2b40      	cmp	r3, #64	; 0x40
 800d3a2:	d107      	bne.n	800d3b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d3ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 f948 	bl	800d644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	691b      	ldr	r3, [r3, #16]
 800d3ba:	f003 0320 	and.w	r3, r3, #32
 800d3be:	2b20      	cmp	r3, #32
 800d3c0:	d10e      	bne.n	800d3e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	f003 0320 	and.w	r3, r3, #32
 800d3cc:	2b20      	cmp	r3, #32
 800d3ce:	d107      	bne.n	800d3e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f06f 0220 	mvn.w	r2, #32
 800d3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fe64 	bl	800e0a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d3e0:	bf00      	nop
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d101      	bne.n	800d402 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d3fe:	2302      	movs	r3, #2
 800d400:	e0fd      	b.n	800d5fe <HAL_TIM_PWM_ConfigChannel+0x216>
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2201      	movs	r2, #1
 800d406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b14      	cmp	r3, #20
 800d40e:	f200 80f0 	bhi.w	800d5f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800d412:	a201      	add	r2, pc, #4	; (adr r2, 800d418 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800d414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d418:	0800d46d 	.word	0x0800d46d
 800d41c:	0800d5f3 	.word	0x0800d5f3
 800d420:	0800d5f3 	.word	0x0800d5f3
 800d424:	0800d5f3 	.word	0x0800d5f3
 800d428:	0800d4ad 	.word	0x0800d4ad
 800d42c:	0800d5f3 	.word	0x0800d5f3
 800d430:	0800d5f3 	.word	0x0800d5f3
 800d434:	0800d5f3 	.word	0x0800d5f3
 800d438:	0800d4ef 	.word	0x0800d4ef
 800d43c:	0800d5f3 	.word	0x0800d5f3
 800d440:	0800d5f3 	.word	0x0800d5f3
 800d444:	0800d5f3 	.word	0x0800d5f3
 800d448:	0800d52f 	.word	0x0800d52f
 800d44c:	0800d5f3 	.word	0x0800d5f3
 800d450:	0800d5f3 	.word	0x0800d5f3
 800d454:	0800d5f3 	.word	0x0800d5f3
 800d458:	0800d571 	.word	0x0800d571
 800d45c:	0800d5f3 	.word	0x0800d5f3
 800d460:	0800d5f3 	.word	0x0800d5f3
 800d464:	0800d5f3 	.word	0x0800d5f3
 800d468:	0800d5b1 	.word	0x0800d5b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	68b9      	ldr	r1, [r7, #8]
 800d472:	4618      	mov	r0, r3
 800d474:	f000 f98a 	bl	800d78c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	699a      	ldr	r2, [r3, #24]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f042 0208 	orr.w	r2, r2, #8
 800d486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	699a      	ldr	r2, [r3, #24]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f022 0204 	bic.w	r2, r2, #4
 800d496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	6999      	ldr	r1, [r3, #24]
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	691a      	ldr	r2, [r3, #16]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	430a      	orrs	r2, r1
 800d4a8:	619a      	str	r2, [r3, #24]
      break;
 800d4aa:	e0a3      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68b9      	ldr	r1, [r7, #8]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f000 f9fa 	bl	800d8ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	699a      	ldr	r2, [r3, #24]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	699a      	ldr	r2, [r3, #24]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6999      	ldr	r1, [r3, #24]
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	691b      	ldr	r3, [r3, #16]
 800d4e2:	021a      	lsls	r2, r3, #8
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	619a      	str	r2, [r3, #24]
      break;
 800d4ec:	e082      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68b9      	ldr	r1, [r7, #8]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f000 fa63 	bl	800d9c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	69da      	ldr	r2, [r3, #28]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f042 0208 	orr.w	r2, r2, #8
 800d508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	69da      	ldr	r2, [r3, #28]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f022 0204 	bic.w	r2, r2, #4
 800d518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	69d9      	ldr	r1, [r3, #28]
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	691a      	ldr	r2, [r3, #16]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	430a      	orrs	r2, r1
 800d52a:	61da      	str	r2, [r3, #28]
      break;
 800d52c:	e062      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	68b9      	ldr	r1, [r7, #8]
 800d534:	4618      	mov	r0, r3
 800d536:	f000 fac9 	bl	800dacc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	69da      	ldr	r2, [r3, #28]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	69da      	ldr	r2, [r3, #28]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	69d9      	ldr	r1, [r3, #28]
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	691b      	ldr	r3, [r3, #16]
 800d564:	021a      	lsls	r2, r3, #8
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	430a      	orrs	r2, r1
 800d56c:	61da      	str	r2, [r3, #28]
      break;
 800d56e:	e041      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	68b9      	ldr	r1, [r7, #8]
 800d576:	4618      	mov	r0, r3
 800d578:	f000 fb10 	bl	800db9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f042 0208 	orr.w	r2, r2, #8
 800d58a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f022 0204 	bic.w	r2, r2, #4
 800d59a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	691a      	ldr	r2, [r3, #16]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	430a      	orrs	r2, r1
 800d5ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d5ae:	e021      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68b9      	ldr	r1, [r7, #8]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 fb52 	bl	800dc60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	691b      	ldr	r3, [r3, #16]
 800d5e6:	021a      	lsls	r2, r3, #8
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	430a      	orrs	r2, r1
 800d5ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d5f0:	e000      	b.n	800d5f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800d5f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop

0800d608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d610:	bf00      	nop
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d624:	bf00      	nop
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d638:	bf00      	nop
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d64c:	bf00      	nop
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4a40      	ldr	r2, [pc, #256]	; (800d76c <TIM_Base_SetConfig+0x114>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d013      	beq.n	800d698 <TIM_Base_SetConfig+0x40>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d676:	d00f      	beq.n	800d698 <TIM_Base_SetConfig+0x40>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a3d      	ldr	r2, [pc, #244]	; (800d770 <TIM_Base_SetConfig+0x118>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d00b      	beq.n	800d698 <TIM_Base_SetConfig+0x40>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a3c      	ldr	r2, [pc, #240]	; (800d774 <TIM_Base_SetConfig+0x11c>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d007      	beq.n	800d698 <TIM_Base_SetConfig+0x40>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a3b      	ldr	r2, [pc, #236]	; (800d778 <TIM_Base_SetConfig+0x120>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d003      	beq.n	800d698 <TIM_Base_SetConfig+0x40>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	4a3a      	ldr	r2, [pc, #232]	; (800d77c <TIM_Base_SetConfig+0x124>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d108      	bne.n	800d6aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d69e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a2f      	ldr	r2, [pc, #188]	; (800d76c <TIM_Base_SetConfig+0x114>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d01f      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6b8:	d01b      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a2c      	ldr	r2, [pc, #176]	; (800d770 <TIM_Base_SetConfig+0x118>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d017      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a2b      	ldr	r2, [pc, #172]	; (800d774 <TIM_Base_SetConfig+0x11c>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d013      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a2a      	ldr	r2, [pc, #168]	; (800d778 <TIM_Base_SetConfig+0x120>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d00f      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4a29      	ldr	r2, [pc, #164]	; (800d77c <TIM_Base_SetConfig+0x124>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d00b      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a28      	ldr	r2, [pc, #160]	; (800d780 <TIM_Base_SetConfig+0x128>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d007      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4a27      	ldr	r2, [pc, #156]	; (800d784 <TIM_Base_SetConfig+0x12c>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d003      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4a26      	ldr	r2, [pc, #152]	; (800d788 <TIM_Base_SetConfig+0x130>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d108      	bne.n	800d704 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	4313      	orrs	r3, r2
 800d702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	695b      	ldr	r3, [r3, #20]
 800d70e:	4313      	orrs	r3, r2
 800d710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	689a      	ldr	r2, [r3, #8]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4a10      	ldr	r2, [pc, #64]	; (800d76c <TIM_Base_SetConfig+0x114>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d00f      	beq.n	800d750 <TIM_Base_SetConfig+0xf8>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	4a12      	ldr	r2, [pc, #72]	; (800d77c <TIM_Base_SetConfig+0x124>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d00b      	beq.n	800d750 <TIM_Base_SetConfig+0xf8>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a11      	ldr	r2, [pc, #68]	; (800d780 <TIM_Base_SetConfig+0x128>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d007      	beq.n	800d750 <TIM_Base_SetConfig+0xf8>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	4a10      	ldr	r2, [pc, #64]	; (800d784 <TIM_Base_SetConfig+0x12c>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d003      	beq.n	800d750 <TIM_Base_SetConfig+0xf8>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a0f      	ldr	r2, [pc, #60]	; (800d788 <TIM_Base_SetConfig+0x130>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d103      	bne.n	800d758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	691a      	ldr	r2, [r3, #16]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	615a      	str	r2, [r3, #20]
}
 800d75e:	bf00      	nop
 800d760:	3714      	adds	r7, #20
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	40010000 	.word	0x40010000
 800d770:	40000400 	.word	0x40000400
 800d774:	40000800 	.word	0x40000800
 800d778:	40000c00 	.word	0x40000c00
 800d77c:	40010400 	.word	0x40010400
 800d780:	40014000 	.word	0x40014000
 800d784:	40014400 	.word	0x40014400
 800d788:	40014800 	.word	0x40014800

0800d78c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b087      	sub	sp, #28
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a1b      	ldr	r3, [r3, #32]
 800d79a:	f023 0201 	bic.w	r2, r3, #1
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a1b      	ldr	r3, [r3, #32]
 800d7a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	4b37      	ldr	r3, [pc, #220]	; (800d894 <TIM_OC1_SetConfig+0x108>)
 800d7b8:	4013      	ands	r3, r2
 800d7ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f023 0303 	bic.w	r3, r3, #3
 800d7c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	f023 0302 	bic.w	r3, r3, #2
 800d7d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a2d      	ldr	r2, [pc, #180]	; (800d898 <TIM_OC1_SetConfig+0x10c>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d00f      	beq.n	800d808 <TIM_OC1_SetConfig+0x7c>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a2c      	ldr	r2, [pc, #176]	; (800d89c <TIM_OC1_SetConfig+0x110>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d00b      	beq.n	800d808 <TIM_OC1_SetConfig+0x7c>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4a2b      	ldr	r2, [pc, #172]	; (800d8a0 <TIM_OC1_SetConfig+0x114>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d007      	beq.n	800d808 <TIM_OC1_SetConfig+0x7c>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a2a      	ldr	r2, [pc, #168]	; (800d8a4 <TIM_OC1_SetConfig+0x118>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d003      	beq.n	800d808 <TIM_OC1_SetConfig+0x7c>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a29      	ldr	r2, [pc, #164]	; (800d8a8 <TIM_OC1_SetConfig+0x11c>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d10c      	bne.n	800d822 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	f023 0308 	bic.w	r3, r3, #8
 800d80e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	697a      	ldr	r2, [r7, #20]
 800d816:	4313      	orrs	r3, r2
 800d818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f023 0304 	bic.w	r3, r3, #4
 800d820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4a1c      	ldr	r2, [pc, #112]	; (800d898 <TIM_OC1_SetConfig+0x10c>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d00f      	beq.n	800d84a <TIM_OC1_SetConfig+0xbe>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4a1b      	ldr	r2, [pc, #108]	; (800d89c <TIM_OC1_SetConfig+0x110>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d00b      	beq.n	800d84a <TIM_OC1_SetConfig+0xbe>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4a1a      	ldr	r2, [pc, #104]	; (800d8a0 <TIM_OC1_SetConfig+0x114>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d007      	beq.n	800d84a <TIM_OC1_SetConfig+0xbe>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4a19      	ldr	r2, [pc, #100]	; (800d8a4 <TIM_OC1_SetConfig+0x118>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d003      	beq.n	800d84a <TIM_OC1_SetConfig+0xbe>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a18      	ldr	r2, [pc, #96]	; (800d8a8 <TIM_OC1_SetConfig+0x11c>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d111      	bne.n	800d86e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	695b      	ldr	r3, [r3, #20]
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	4313      	orrs	r3, r2
 800d862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	693a      	ldr	r2, [r7, #16]
 800d86a:	4313      	orrs	r3, r2
 800d86c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	68fa      	ldr	r2, [r7, #12]
 800d878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	697a      	ldr	r2, [r7, #20]
 800d886:	621a      	str	r2, [r3, #32]
}
 800d888:	bf00      	nop
 800d88a:	371c      	adds	r7, #28
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr
 800d894:	fffeff8f 	.word	0xfffeff8f
 800d898:	40010000 	.word	0x40010000
 800d89c:	40010400 	.word	0x40010400
 800d8a0:	40014000 	.word	0x40014000
 800d8a4:	40014400 	.word	0x40014400
 800d8a8:	40014800 	.word	0x40014800

0800d8ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b087      	sub	sp, #28
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a1b      	ldr	r3, [r3, #32]
 800d8ba:	f023 0210 	bic.w	r2, r3, #16
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6a1b      	ldr	r3, [r3, #32]
 800d8c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	699b      	ldr	r3, [r3, #24]
 800d8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	4b34      	ldr	r3, [pc, #208]	; (800d9a8 <TIM_OC2_SetConfig+0xfc>)
 800d8d8:	4013      	ands	r3, r2
 800d8da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	021b      	lsls	r3, r3, #8
 800d8ea:	68fa      	ldr	r2, [r7, #12]
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	f023 0320 	bic.w	r3, r3, #32
 800d8f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	689b      	ldr	r3, [r3, #8]
 800d8fc:	011b      	lsls	r3, r3, #4
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	4313      	orrs	r3, r2
 800d902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	4a29      	ldr	r2, [pc, #164]	; (800d9ac <TIM_OC2_SetConfig+0x100>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d003      	beq.n	800d914 <TIM_OC2_SetConfig+0x68>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4a28      	ldr	r2, [pc, #160]	; (800d9b0 <TIM_OC2_SetConfig+0x104>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d10d      	bne.n	800d930 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d91a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	011b      	lsls	r3, r3, #4
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	4313      	orrs	r3, r2
 800d926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d92e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a1e      	ldr	r2, [pc, #120]	; (800d9ac <TIM_OC2_SetConfig+0x100>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d00f      	beq.n	800d958 <TIM_OC2_SetConfig+0xac>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a1d      	ldr	r2, [pc, #116]	; (800d9b0 <TIM_OC2_SetConfig+0x104>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d00b      	beq.n	800d958 <TIM_OC2_SetConfig+0xac>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a1c      	ldr	r2, [pc, #112]	; (800d9b4 <TIM_OC2_SetConfig+0x108>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d007      	beq.n	800d958 <TIM_OC2_SetConfig+0xac>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4a1b      	ldr	r2, [pc, #108]	; (800d9b8 <TIM_OC2_SetConfig+0x10c>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d003      	beq.n	800d958 <TIM_OC2_SetConfig+0xac>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4a1a      	ldr	r2, [pc, #104]	; (800d9bc <TIM_OC2_SetConfig+0x110>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d113      	bne.n	800d980 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d95e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	695b      	ldr	r3, [r3, #20]
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	693a      	ldr	r2, [r7, #16]
 800d970:	4313      	orrs	r3, r2
 800d972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	693a      	ldr	r2, [r7, #16]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	693a      	ldr	r2, [r7, #16]
 800d984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	621a      	str	r2, [r3, #32]
}
 800d99a:	bf00      	nop
 800d99c:	371c      	adds	r7, #28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	feff8fff 	.word	0xfeff8fff
 800d9ac:	40010000 	.word	0x40010000
 800d9b0:	40010400 	.word	0x40010400
 800d9b4:	40014000 	.word	0x40014000
 800d9b8:	40014400 	.word	0x40014400
 800d9bc:	40014800 	.word	0x40014800

0800d9c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b087      	sub	sp, #28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6a1b      	ldr	r3, [r3, #32]
 800d9ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a1b      	ldr	r3, [r3, #32]
 800d9da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f023 0303 	bic.w	r3, r3, #3
 800d9f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	689b      	ldr	r3, [r3, #8]
 800da0e:	021b      	lsls	r3, r3, #8
 800da10:	697a      	ldr	r2, [r7, #20]
 800da12:	4313      	orrs	r3, r2
 800da14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	4a27      	ldr	r2, [pc, #156]	; (800dab8 <TIM_OC3_SetConfig+0xf8>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d003      	beq.n	800da26 <TIM_OC3_SetConfig+0x66>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	4a26      	ldr	r2, [pc, #152]	; (800dabc <TIM_OC3_SetConfig+0xfc>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d10d      	bne.n	800da42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	021b      	lsls	r3, r3, #8
 800da34:	697a      	ldr	r2, [r7, #20]
 800da36:	4313      	orrs	r3, r2
 800da38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4a1c      	ldr	r2, [pc, #112]	; (800dab8 <TIM_OC3_SetConfig+0xf8>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d00f      	beq.n	800da6a <TIM_OC3_SetConfig+0xaa>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4a1b      	ldr	r2, [pc, #108]	; (800dabc <TIM_OC3_SetConfig+0xfc>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d00b      	beq.n	800da6a <TIM_OC3_SetConfig+0xaa>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4a1a      	ldr	r2, [pc, #104]	; (800dac0 <TIM_OC3_SetConfig+0x100>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d007      	beq.n	800da6a <TIM_OC3_SetConfig+0xaa>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4a19      	ldr	r2, [pc, #100]	; (800dac4 <TIM_OC3_SetConfig+0x104>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d003      	beq.n	800da6a <TIM_OC3_SetConfig+0xaa>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4a18      	ldr	r2, [pc, #96]	; (800dac8 <TIM_OC3_SetConfig+0x108>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d113      	bne.n	800da92 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	695b      	ldr	r3, [r3, #20]
 800da7e:	011b      	lsls	r3, r3, #4
 800da80:	693a      	ldr	r2, [r7, #16]
 800da82:	4313      	orrs	r3, r2
 800da84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	699b      	ldr	r3, [r3, #24]
 800da8a:	011b      	lsls	r3, r3, #4
 800da8c:	693a      	ldr	r2, [r7, #16]
 800da8e:	4313      	orrs	r3, r2
 800da90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	685a      	ldr	r2, [r3, #4]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	621a      	str	r2, [r3, #32]
}
 800daac:	bf00      	nop
 800daae:	371c      	adds	r7, #28
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr
 800dab8:	40010000 	.word	0x40010000
 800dabc:	40010400 	.word	0x40010400
 800dac0:	40014000 	.word	0x40014000
 800dac4:	40014400 	.word	0x40014400
 800dac8:	40014800 	.word	0x40014800

0800dacc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dacc:	b480      	push	{r7}
 800dace:	b087      	sub	sp, #28
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	69db      	ldr	r3, [r3, #28]
 800daf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dafa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	021b      	lsls	r3, r3, #8
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	4313      	orrs	r3, r2
 800db0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	031b      	lsls	r3, r3, #12
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	4313      	orrs	r3, r2
 800db22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4a18      	ldr	r2, [pc, #96]	; (800db88 <TIM_OC4_SetConfig+0xbc>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d00f      	beq.n	800db4c <TIM_OC4_SetConfig+0x80>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	4a17      	ldr	r2, [pc, #92]	; (800db8c <TIM_OC4_SetConfig+0xc0>)
 800db30:	4293      	cmp	r3, r2
 800db32:	d00b      	beq.n	800db4c <TIM_OC4_SetConfig+0x80>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4a16      	ldr	r2, [pc, #88]	; (800db90 <TIM_OC4_SetConfig+0xc4>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d007      	beq.n	800db4c <TIM_OC4_SetConfig+0x80>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4a15      	ldr	r2, [pc, #84]	; (800db94 <TIM_OC4_SetConfig+0xc8>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d003      	beq.n	800db4c <TIM_OC4_SetConfig+0x80>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4a14      	ldr	r2, [pc, #80]	; (800db98 <TIM_OC4_SetConfig+0xcc>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d109      	bne.n	800db60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	695b      	ldr	r3, [r3, #20]
 800db58:	019b      	lsls	r3, r3, #6
 800db5a:	697a      	ldr	r2, [r7, #20]
 800db5c:	4313      	orrs	r3, r2
 800db5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	697a      	ldr	r2, [r7, #20]
 800db64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	685a      	ldr	r2, [r3, #4]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	693a      	ldr	r2, [r7, #16]
 800db78:	621a      	str	r2, [r3, #32]
}
 800db7a:	bf00      	nop
 800db7c:	371c      	adds	r7, #28
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	40010000 	.word	0x40010000
 800db8c:	40010400 	.word	0x40010400
 800db90:	40014000 	.word	0x40014000
 800db94:	40014400 	.word	0x40014400
 800db98:	40014800 	.word	0x40014800

0800db9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b087      	sub	sp, #28
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6a1b      	ldr	r3, [r3, #32]
 800dbaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a1b      	ldr	r3, [r3, #32]
 800dbb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68fa      	ldr	r2, [r7, #12]
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dbdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	689b      	ldr	r3, [r3, #8]
 800dbe2:	041b      	lsls	r3, r3, #16
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4a17      	ldr	r2, [pc, #92]	; (800dc4c <TIM_OC5_SetConfig+0xb0>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d00f      	beq.n	800dc12 <TIM_OC5_SetConfig+0x76>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4a16      	ldr	r2, [pc, #88]	; (800dc50 <TIM_OC5_SetConfig+0xb4>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d00b      	beq.n	800dc12 <TIM_OC5_SetConfig+0x76>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4a15      	ldr	r2, [pc, #84]	; (800dc54 <TIM_OC5_SetConfig+0xb8>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d007      	beq.n	800dc12 <TIM_OC5_SetConfig+0x76>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a14      	ldr	r2, [pc, #80]	; (800dc58 <TIM_OC5_SetConfig+0xbc>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d003      	beq.n	800dc12 <TIM_OC5_SetConfig+0x76>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a13      	ldr	r2, [pc, #76]	; (800dc5c <TIM_OC5_SetConfig+0xc0>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d109      	bne.n	800dc26 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	695b      	ldr	r3, [r3, #20]
 800dc1e:	021b      	lsls	r3, r3, #8
 800dc20:	697a      	ldr	r2, [r7, #20]
 800dc22:	4313      	orrs	r3, r2
 800dc24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	685a      	ldr	r2, [r3, #4]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	621a      	str	r2, [r3, #32]
}
 800dc40:	bf00      	nop
 800dc42:	371c      	adds	r7, #28
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr
 800dc4c:	40010000 	.word	0x40010000
 800dc50:	40010400 	.word	0x40010400
 800dc54:	40014000 	.word	0x40014000
 800dc58:	40014400 	.word	0x40014400
 800dc5c:	40014800 	.word	0x40014800

0800dc60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b087      	sub	sp, #28
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a1b      	ldr	r3, [r3, #32]
 800dc6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6a1b      	ldr	r3, [r3, #32]
 800dc7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	021b      	lsls	r3, r3, #8
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	051b      	lsls	r3, r3, #20
 800dcaa:	693a      	ldr	r2, [r7, #16]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4a18      	ldr	r2, [pc, #96]	; (800dd14 <TIM_OC6_SetConfig+0xb4>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d00f      	beq.n	800dcd8 <TIM_OC6_SetConfig+0x78>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	4a17      	ldr	r2, [pc, #92]	; (800dd18 <TIM_OC6_SetConfig+0xb8>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d00b      	beq.n	800dcd8 <TIM_OC6_SetConfig+0x78>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4a16      	ldr	r2, [pc, #88]	; (800dd1c <TIM_OC6_SetConfig+0xbc>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d007      	beq.n	800dcd8 <TIM_OC6_SetConfig+0x78>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a15      	ldr	r2, [pc, #84]	; (800dd20 <TIM_OC6_SetConfig+0xc0>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d003      	beq.n	800dcd8 <TIM_OC6_SetConfig+0x78>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4a14      	ldr	r2, [pc, #80]	; (800dd24 <TIM_OC6_SetConfig+0xc4>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d109      	bne.n	800dcec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dcde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	029b      	lsls	r3, r3, #10
 800dce6:	697a      	ldr	r2, [r7, #20]
 800dce8:	4313      	orrs	r3, r2
 800dcea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	697a      	ldr	r2, [r7, #20]
 800dcf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	693a      	ldr	r2, [r7, #16]
 800dd04:	621a      	str	r2, [r3, #32]
}
 800dd06:	bf00      	nop
 800dd08:	371c      	adds	r7, #28
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop
 800dd14:	40010000 	.word	0x40010000
 800dd18:	40010400 	.word	0x40010400
 800dd1c:	40014000 	.word	0x40014000
 800dd20:	40014400 	.word	0x40014400
 800dd24:	40014800 	.word	0x40014800

0800dd28 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d109      	bne.n	800dd4c <HAL_TIMEx_PWMN_Start+0x24>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	bf14      	ite	ne
 800dd44:	2301      	movne	r3, #1
 800dd46:	2300      	moveq	r3, #0
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	e022      	b.n	800dd92 <HAL_TIMEx_PWMN_Start+0x6a>
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	2b04      	cmp	r3, #4
 800dd50:	d109      	bne.n	800dd66 <HAL_TIMEx_PWMN_Start+0x3e>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	bf14      	ite	ne
 800dd5e:	2301      	movne	r3, #1
 800dd60:	2300      	moveq	r3, #0
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	e015      	b.n	800dd92 <HAL_TIMEx_PWMN_Start+0x6a>
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	2b08      	cmp	r3, #8
 800dd6a:	d109      	bne.n	800dd80 <HAL_TIMEx_PWMN_Start+0x58>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	bf14      	ite	ne
 800dd78:	2301      	movne	r3, #1
 800dd7a:	2300      	moveq	r3, #0
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	e008      	b.n	800dd92 <HAL_TIMEx_PWMN_Start+0x6a>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	bf14      	ite	ne
 800dd8c:	2301      	movne	r3, #1
 800dd8e:	2300      	moveq	r3, #0
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	e06e      	b.n	800de78 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d104      	bne.n	800ddaa <HAL_TIMEx_PWMN_Start+0x82>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2202      	movs	r2, #2
 800dda4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dda8:	e013      	b.n	800ddd2 <HAL_TIMEx_PWMN_Start+0xaa>
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	2b04      	cmp	r3, #4
 800ddae:	d104      	bne.n	800ddba <HAL_TIMEx_PWMN_Start+0x92>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2202      	movs	r2, #2
 800ddb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddb8:	e00b      	b.n	800ddd2 <HAL_TIMEx_PWMN_Start+0xaa>
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	2b08      	cmp	r3, #8
 800ddbe:	d104      	bne.n	800ddca <HAL_TIMEx_PWMN_Start+0xa2>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2202      	movs	r2, #2
 800ddc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ddc8:	e003      	b.n	800ddd2 <HAL_TIMEx_PWMN_Start+0xaa>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2202      	movs	r2, #2
 800ddce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2204      	movs	r2, #4
 800ddd8:	6839      	ldr	r1, [r7, #0]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f000 f982 	bl	800e0e4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ddee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a22      	ldr	r2, [pc, #136]	; (800de80 <HAL_TIMEx_PWMN_Start+0x158>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d01d      	beq.n	800de36 <HAL_TIMEx_PWMN_Start+0x10e>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de02:	d018      	beq.n	800de36 <HAL_TIMEx_PWMN_Start+0x10e>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a1e      	ldr	r2, [pc, #120]	; (800de84 <HAL_TIMEx_PWMN_Start+0x15c>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d013      	beq.n	800de36 <HAL_TIMEx_PWMN_Start+0x10e>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a1d      	ldr	r2, [pc, #116]	; (800de88 <HAL_TIMEx_PWMN_Start+0x160>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d00e      	beq.n	800de36 <HAL_TIMEx_PWMN_Start+0x10e>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a1b      	ldr	r2, [pc, #108]	; (800de8c <HAL_TIMEx_PWMN_Start+0x164>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d009      	beq.n	800de36 <HAL_TIMEx_PWMN_Start+0x10e>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4a1a      	ldr	r2, [pc, #104]	; (800de90 <HAL_TIMEx_PWMN_Start+0x168>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d004      	beq.n	800de36 <HAL_TIMEx_PWMN_Start+0x10e>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4a18      	ldr	r2, [pc, #96]	; (800de94 <HAL_TIMEx_PWMN_Start+0x16c>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d115      	bne.n	800de62 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	689a      	ldr	r2, [r3, #8]
 800de3c:	4b16      	ldr	r3, [pc, #88]	; (800de98 <HAL_TIMEx_PWMN_Start+0x170>)
 800de3e:	4013      	ands	r3, r2
 800de40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b06      	cmp	r3, #6
 800de46:	d015      	beq.n	800de74 <HAL_TIMEx_PWMN_Start+0x14c>
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de4e:	d011      	beq.n	800de74 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f042 0201 	orr.w	r2, r2, #1
 800de5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de60:	e008      	b.n	800de74 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f042 0201 	orr.w	r2, r2, #1
 800de70:	601a      	str	r2, [r3, #0]
 800de72:	e000      	b.n	800de76 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	40010000 	.word	0x40010000
 800de84:	40000400 	.word	0x40000400
 800de88:	40000800 	.word	0x40000800
 800de8c:	40000c00 	.word	0x40000c00
 800de90:	40010400 	.word	0x40010400
 800de94:	40001800 	.word	0x40001800
 800de98:	00010007 	.word	0x00010007

0800de9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800deac:	2b01      	cmp	r3, #1
 800deae:	d101      	bne.n	800deb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800deb0:	2302      	movs	r3, #2
 800deb2:	e068      	b.n	800df86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2202      	movs	r2, #2
 800dec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a2e      	ldr	r2, [pc, #184]	; (800df94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d004      	beq.n	800dee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a2d      	ldr	r2, [pc, #180]	; (800df98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d108      	bne.n	800defa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800deee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	4313      	orrs	r3, r2
 800def8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	4313      	orrs	r3, r2
 800df0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a1e      	ldr	r2, [pc, #120]	; (800df94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d01d      	beq.n	800df5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df26:	d018      	beq.n	800df5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a1b      	ldr	r2, [pc, #108]	; (800df9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d013      	beq.n	800df5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a1a      	ldr	r2, [pc, #104]	; (800dfa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d00e      	beq.n	800df5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a18      	ldr	r2, [pc, #96]	; (800dfa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d009      	beq.n	800df5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a13      	ldr	r2, [pc, #76]	; (800df98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d004      	beq.n	800df5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a14      	ldr	r2, [pc, #80]	; (800dfa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d10c      	bne.n	800df74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	4313      	orrs	r3, r2
 800df6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	68ba      	ldr	r2, [r7, #8]
 800df72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2201      	movs	r2, #1
 800df78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df84:	2300      	movs	r3, #0
}
 800df86:	4618      	mov	r0, r3
 800df88:	3714      	adds	r7, #20
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	40010000 	.word	0x40010000
 800df98:	40010400 	.word	0x40010400
 800df9c:	40000400 	.word	0x40000400
 800dfa0:	40000800 	.word	0x40000800
 800dfa4:	40000c00 	.word	0x40000c00
 800dfa8:	40001800 	.word	0x40001800

0800dfac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d101      	bne.n	800dfc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dfc4:	2302      	movs	r3, #2
 800dfc6:	e065      	b.n	800e094 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	4313      	orrs	r3, r2
 800dff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4313      	orrs	r3, r2
 800e006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	4313      	orrs	r3, r2
 800e014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	695b      	ldr	r3, [r3, #20]
 800e020:	4313      	orrs	r3, r2
 800e022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02e:	4313      	orrs	r3, r2
 800e030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	041b      	lsls	r3, r3, #16
 800e03e:	4313      	orrs	r3, r2
 800e040:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a16      	ldr	r2, [pc, #88]	; (800e0a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d004      	beq.n	800e056 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a14      	ldr	r2, [pc, #80]	; (800e0a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d115      	bne.n	800e082 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e060:	051b      	lsls	r3, r3, #20
 800e062:	4313      	orrs	r3, r2
 800e064:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	69db      	ldr	r3, [r3, #28]
 800e070:	4313      	orrs	r3, r2
 800e072:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	6a1b      	ldr	r3, [r3, #32]
 800e07e:	4313      	orrs	r3, r2
 800e080:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68fa      	ldr	r2, [r7, #12]
 800e088:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	40010000 	.word	0x40010000
 800e0a4:	40010400 	.word	0x40010400

0800e0a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e0b0:	bf00      	nop
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0c4:	bf00      	nop
 800e0c6:	370c      	adds	r7, #12
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0d8:	bf00      	nop
 800e0da:	370c      	adds	r7, #12
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b087      	sub	sp, #28
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f003 031f 	and.w	r3, r3, #31
 800e0f6:	2204      	movs	r2, #4
 800e0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6a1a      	ldr	r2, [r3, #32]
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	43db      	mvns	r3, r3
 800e106:	401a      	ands	r2, r3
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6a1a      	ldr	r2, [r3, #32]
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	f003 031f 	and.w	r3, r3, #31
 800e116:	6879      	ldr	r1, [r7, #4]
 800e118:	fa01 f303 	lsl.w	r3, r1, r3
 800e11c:	431a      	orrs	r2, r3
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	621a      	str	r2, [r3, #32]
}
 800e122:	bf00      	nop
 800e124:	371c      	adds	r7, #28
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b082      	sub	sp, #8
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d101      	bne.n	800e140 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	e042      	b.n	800e1c6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e146:	2b00      	cmp	r3, #0
 800e148:	d106      	bne.n	800e158 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7f4 fcf2 	bl	8002b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2224      	movs	r2, #36	; 0x24
 800e15c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f022 0201 	bic.w	r2, r2, #1
 800e16e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 fbe3 	bl	800e93c <UART_SetConfig>
 800e176:	4603      	mov	r3, r0
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d101      	bne.n	800e180 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	e022      	b.n	800e1c6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e184:	2b00      	cmp	r3, #0
 800e186:	d002      	beq.n	800e18e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f001 f937 	bl	800f3fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	685a      	ldr	r2, [r3, #4]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e19c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	689a      	ldr	r2, [r3, #8]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e1ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f042 0201 	orr.w	r2, r2, #1
 800e1bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f001 f9be 	bl	800f540 <UART_CheckIdleState>
 800e1c4:	4603      	mov	r3, r0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b08a      	sub	sp, #40	; 0x28
 800e1d2:	af02      	add	r7, sp, #8
 800e1d4:	60f8      	str	r0, [r7, #12]
 800e1d6:	60b9      	str	r1, [r7, #8]
 800e1d8:	603b      	str	r3, [r7, #0]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1e4:	2b20      	cmp	r3, #32
 800e1e6:	f040 8083 	bne.w	800e2f0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <HAL_UART_Transmit+0x28>
 800e1f0:	88fb      	ldrh	r3, [r7, #6]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d101      	bne.n	800e1fa <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e07b      	b.n	800e2f2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e200:	2b01      	cmp	r3, #1
 800e202:	d101      	bne.n	800e208 <HAL_UART_Transmit+0x3a>
 800e204:	2302      	movs	r3, #2
 800e206:	e074      	b.n	800e2f2 <HAL_UART_Transmit+0x124>
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2200      	movs	r2, #0
 800e214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2221      	movs	r2, #33	; 0x21
 800e21c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e220:	f7f6 fdfe 	bl	8004e20 <HAL_GetTick>
 800e224:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	88fa      	ldrh	r2, [r7, #6]
 800e22a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	88fa      	ldrh	r2, [r7, #6]
 800e232:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e23e:	d108      	bne.n	800e252 <HAL_UART_Transmit+0x84>
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d104      	bne.n	800e252 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800e248:	2300      	movs	r3, #0
 800e24a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	61bb      	str	r3, [r7, #24]
 800e250:	e003      	b.n	800e25a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e256:	2300      	movs	r3, #0
 800e258:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800e262:	e02c      	b.n	800e2be <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	2200      	movs	r2, #0
 800e26c:	2180      	movs	r1, #128	; 0x80
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f001 f9b1 	bl	800f5d6 <UART_WaitOnFlagUntilTimeout>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800e27a:	2303      	movs	r3, #3
 800e27c:	e039      	b.n	800e2f2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d10b      	bne.n	800e29c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	881b      	ldrh	r3, [r3, #0]
 800e288:	461a      	mov	r2, r3
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e292:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	3302      	adds	r3, #2
 800e298:	61bb      	str	r3, [r7, #24]
 800e29a:	e007      	b.n	800e2ac <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	781a      	ldrb	r2, [r3, #0]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e2a6:	69fb      	ldr	r3, [r7, #28]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2c4:	b29b      	uxth	r3, r3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1cc      	bne.n	800e264 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	2140      	movs	r1, #64	; 0x40
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	f001 f97e 	bl	800f5d6 <UART_WaitOnFlagUntilTimeout>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d001      	beq.n	800e2e4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800e2e0:	2303      	movs	r3, #3
 800e2e2:	e006      	b.n	800e2f2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2220      	movs	r2, #32
 800e2e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	e000      	b.n	800e2f2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800e2f0:	2302      	movs	r3, #2
  }
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3720      	adds	r7, #32
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
	...

0800e2fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	60b9      	str	r1, [r7, #8]
 800e306:	4613      	mov	r3, r2
 800e308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e310:	2b20      	cmp	r3, #32
 800e312:	d131      	bne.n	800e378 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d002      	beq.n	800e320 <HAL_UART_Receive_IT+0x24>
 800e31a:	88fb      	ldrh	r3, [r7, #6]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d101      	bne.n	800e324 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e320:	2301      	movs	r3, #1
 800e322:	e02a      	b.n	800e37a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d101      	bne.n	800e332 <HAL_UART_Receive_IT+0x36>
 800e32e:	2302      	movs	r3, #2
 800e330:	e023      	b.n	800e37a <HAL_UART_Receive_IT+0x7e>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2201      	movs	r2, #1
 800e336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a0f      	ldr	r2, [pc, #60]	; (800e384 <HAL_UART_Receive_IT+0x88>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d00e      	beq.n	800e368 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e354:	2b00      	cmp	r3, #0
 800e356:	d007      	beq.n	800e368 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e366:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e368:	88fb      	ldrh	r3, [r7, #6]
 800e36a:	461a      	mov	r2, r3
 800e36c:	68b9      	ldr	r1, [r7, #8]
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f001 f9b2 	bl	800f6d8 <UART_Start_Receive_IT>
 800e374:	4603      	mov	r3, r0
 800e376:	e000      	b.n	800e37a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800e378:	2302      	movs	r3, #2
  }
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	58000c00 	.word	0x58000c00

0800e388 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b088      	sub	sp, #32
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	69db      	ldr	r3, [r3, #28]
 800e396:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e3a8:	69fa      	ldr	r2, [r7, #28]
 800e3aa:	f640 030f 	movw	r3, #2063	; 0x80f
 800e3ae:	4013      	ands	r3, r2
 800e3b0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d118      	bne.n	800e3ea <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	f003 0320 	and.w	r3, r3, #32
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d013      	beq.n	800e3ea <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	f003 0320 	and.w	r3, r3, #32
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d104      	bne.n	800e3d6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d009      	beq.n	800e3ea <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f000 8282 	beq.w	800e8e4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	4798      	blx	r3
      }
      return;
 800e3e8:	e27c      	b.n	800e8e4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f000 80ef 	beq.w	800e5d0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e3f2:	697a      	ldr	r2, [r7, #20]
 800e3f4:	4b73      	ldr	r3, [pc, #460]	; (800e5c4 <HAL_UART_IRQHandler+0x23c>)
 800e3f6:	4013      	ands	r3, r2
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d105      	bne.n	800e408 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e3fc:	69ba      	ldr	r2, [r7, #24]
 800e3fe:	4b72      	ldr	r3, [pc, #456]	; (800e5c8 <HAL_UART_IRQHandler+0x240>)
 800e400:	4013      	ands	r3, r2
 800e402:	2b00      	cmp	r3, #0
 800e404:	f000 80e4 	beq.w	800e5d0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d010      	beq.n	800e434 <HAL_UART_IRQHandler+0xac>
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d00b      	beq.n	800e434 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2201      	movs	r2, #1
 800e422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e42a:	f043 0201 	orr.w	r2, r3, #1
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	f003 0302 	and.w	r3, r3, #2
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d010      	beq.n	800e460 <HAL_UART_IRQHandler+0xd8>
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	f003 0301 	and.w	r3, r3, #1
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00b      	beq.n	800e460 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2202      	movs	r2, #2
 800e44e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e456:	f043 0204 	orr.w	r2, r3, #4
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	f003 0304 	and.w	r3, r3, #4
 800e466:	2b00      	cmp	r3, #0
 800e468:	d010      	beq.n	800e48c <HAL_UART_IRQHandler+0x104>
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f003 0301 	and.w	r3, r3, #1
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00b      	beq.n	800e48c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2204      	movs	r2, #4
 800e47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e482:	f043 0202 	orr.w	r2, r3, #2
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e48c:	69fb      	ldr	r3, [r7, #28]
 800e48e:	f003 0308 	and.w	r3, r3, #8
 800e492:	2b00      	cmp	r3, #0
 800e494:	d015      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	f003 0320 	and.w	r3, r3, #32
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d104      	bne.n	800e4aa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e4a0:	697a      	ldr	r2, [r7, #20]
 800e4a2:	4b48      	ldr	r3, [pc, #288]	; (800e5c4 <HAL_UART_IRQHandler+0x23c>)
 800e4a4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00b      	beq.n	800e4c2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2208      	movs	r2, #8
 800e4b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4b8:	f043 0208 	orr.w	r2, r3, #8
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d011      	beq.n	800e4f0 <HAL_UART_IRQHandler+0x168>
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d00c      	beq.n	800e4f0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4e6:	f043 0220 	orr.w	r2, r3, #32
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f000 81f6 	beq.w	800e8e8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	f003 0320 	and.w	r3, r3, #32
 800e502:	2b00      	cmp	r3, #0
 800e504:	d011      	beq.n	800e52a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e506:	69bb      	ldr	r3, [r7, #24]
 800e508:	f003 0320 	and.w	r3, r3, #32
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d104      	bne.n	800e51a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e516:	2b00      	cmp	r3, #0
 800e518:	d007      	beq.n	800e52a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d003      	beq.n	800e52a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e530:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	689b      	ldr	r3, [r3, #8]
 800e538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e53c:	2b40      	cmp	r3, #64	; 0x40
 800e53e:	d004      	beq.n	800e54a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e546:	2b00      	cmp	r3, #0
 800e548:	d031      	beq.n	800e5ae <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f001 f982 	bl	800f854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e55a:	2b40      	cmp	r3, #64	; 0x40
 800e55c:	d123      	bne.n	800e5a6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	689a      	ldr	r2, [r3, #8]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e56c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e572:	2b00      	cmp	r3, #0
 800e574:	d013      	beq.n	800e59e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e57a:	4a14      	ldr	r2, [pc, #80]	; (800e5cc <HAL_UART_IRQHandler+0x244>)
 800e57c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e582:	4618      	mov	r0, r3
 800e584:	f7f8 fa86 	bl	8006a94 <HAL_DMA_Abort_IT>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d017      	beq.n	800e5be <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e598:	4610      	mov	r0, r2
 800e59a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e59c:	e00f      	b.n	800e5be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 f9b6 	bl	800e910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5a4:	e00b      	b.n	800e5be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f9b2 	bl	800e910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5ac:	e007      	b.n	800e5be <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 f9ae 	bl	800e910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e5bc:	e194      	b.n	800e8e8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5be:	bf00      	nop
    return;
 800e5c0:	e192      	b.n	800e8e8 <HAL_UART_IRQHandler+0x560>
 800e5c2:	bf00      	nop
 800e5c4:	10000001 	.word	0x10000001
 800e5c8:	04000120 	.word	0x04000120
 800e5cc:	0800f8b9 	.word	0x0800f8b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	f040 810f 	bne.w	800e7f8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	f003 0310 	and.w	r3, r3, #16
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f000 8109 	beq.w	800e7f8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	f003 0310 	and.w	r3, r3, #16
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f000 8103 	beq.w	800e7f8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2210      	movs	r2, #16
 800e5f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e604:	2b40      	cmp	r3, #64	; 0x40
 800e606:	f040 80bb 	bne.w	800e780 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a96      	ldr	r2, [pc, #600]	; (800e86c <HAL_UART_IRQHandler+0x4e4>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d059      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a94      	ldr	r2, [pc, #592]	; (800e870 <HAL_UART_IRQHandler+0x4e8>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d053      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a92      	ldr	r2, [pc, #584]	; (800e874 <HAL_UART_IRQHandler+0x4ec>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d04d      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4a90      	ldr	r2, [pc, #576]	; (800e878 <HAL_UART_IRQHandler+0x4f0>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d047      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4a8e      	ldr	r2, [pc, #568]	; (800e87c <HAL_UART_IRQHandler+0x4f4>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d041      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a8c      	ldr	r2, [pc, #560]	; (800e880 <HAL_UART_IRQHandler+0x4f8>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d03b      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a8a      	ldr	r2, [pc, #552]	; (800e884 <HAL_UART_IRQHandler+0x4fc>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d035      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a88      	ldr	r2, [pc, #544]	; (800e888 <HAL_UART_IRQHandler+0x500>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d02f      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4a86      	ldr	r2, [pc, #536]	; (800e88c <HAL_UART_IRQHandler+0x504>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d029      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a84      	ldr	r2, [pc, #528]	; (800e890 <HAL_UART_IRQHandler+0x508>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d023      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a82      	ldr	r2, [pc, #520]	; (800e894 <HAL_UART_IRQHandler+0x50c>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d01d      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a80      	ldr	r2, [pc, #512]	; (800e898 <HAL_UART_IRQHandler+0x510>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d017      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a7e      	ldr	r2, [pc, #504]	; (800e89c <HAL_UART_IRQHandler+0x514>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d011      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4a7c      	ldr	r2, [pc, #496]	; (800e8a0 <HAL_UART_IRQHandler+0x518>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d00b      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a7a      	ldr	r2, [pc, #488]	; (800e8a4 <HAL_UART_IRQHandler+0x51c>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d005      	beq.n	800e6ca <HAL_UART_IRQHandler+0x342>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a78      	ldr	r2, [pc, #480]	; (800e8a8 <HAL_UART_IRQHandler+0x520>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d105      	bne.n	800e6d6 <HAL_UART_IRQHandler+0x34e>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	e004      	b.n	800e6e0 <HAL_UART_IRQHandler+0x358>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800e6e2:	893b      	ldrh	r3, [r7, #8]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f000 8101 	beq.w	800e8ec <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e6f0:	893a      	ldrh	r2, [r7, #8]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	f080 80fa 	bcs.w	800e8ec <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	893a      	ldrh	r2, [r7, #8]
 800e6fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e704:	69db      	ldr	r3, [r3, #28]
 800e706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e70a:	d02b      	beq.n	800e764 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e71a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	689a      	ldr	r2, [r3, #8]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f022 0201 	bic.w	r2, r2, #1
 800e72a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	689a      	ldr	r2, [r3, #8]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e73a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2220      	movs	r2, #32
 800e740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f022 0210 	bic.w	r2, r2, #16
 800e758:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e75e:	4618      	mov	r0, r3
 800e760:	f7f7 fe7a 	bl	8006458 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e770:	b29b      	uxth	r3, r3
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	b29b      	uxth	r3, r3
 800e776:	4619      	mov	r1, r3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 f8d3 	bl	800e924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e77e:	e0b5      	b.n	800e8ec <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e798:	b29b      	uxth	r3, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f000 80a8 	beq.w	800e8f0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800e7a0:	897b      	ldrh	r3, [r7, #10]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	f000 80a4 	beq.w	800e8f0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e7b6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	6899      	ldr	r1, [r3, #8]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	4b3a      	ldr	r3, [pc, #232]	; (800e8ac <HAL_UART_IRQHandler+0x524>)
 800e7c4:	400b      	ands	r3, r1
 800e7c6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2220      	movs	r2, #32
 800e7cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f022 0210 	bic.w	r2, r2, #16
 800e7ea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e7ec:	897b      	ldrh	r3, [r7, #10]
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 f897 	bl	800e924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e7f6:	e07b      	b.n	800e8f0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00d      	beq.n	800e81e <HAL_UART_IRQHandler+0x496>
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d008      	beq.n	800e81e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e814:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f001 fb5a 	bl	800fed0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e81c:	e06b      	b.n	800e8f6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e824:	2b00      	cmp	r3, #0
 800e826:	d012      	beq.n	800e84e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d104      	bne.n	800e83c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d008      	beq.n	800e84e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e840:	2b00      	cmp	r3, #0
 800e842:	d057      	beq.n	800e8f4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	4798      	blx	r3
    }
    return;
 800e84c:	e052      	b.n	800e8f4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e854:	2b00      	cmp	r3, #0
 800e856:	d02b      	beq.n	800e8b0 <HAL_UART_IRQHandler+0x528>
 800e858:	69bb      	ldr	r3, [r7, #24]
 800e85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d026      	beq.n	800e8b0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f001 f83e 	bl	800f8e4 <UART_EndTransmit_IT>
    return;
 800e868:	e045      	b.n	800e8f6 <HAL_UART_IRQHandler+0x56e>
 800e86a:	bf00      	nop
 800e86c:	40020010 	.word	0x40020010
 800e870:	40020028 	.word	0x40020028
 800e874:	40020040 	.word	0x40020040
 800e878:	40020058 	.word	0x40020058
 800e87c:	40020070 	.word	0x40020070
 800e880:	40020088 	.word	0x40020088
 800e884:	400200a0 	.word	0x400200a0
 800e888:	400200b8 	.word	0x400200b8
 800e88c:	40020410 	.word	0x40020410
 800e890:	40020428 	.word	0x40020428
 800e894:	40020440 	.word	0x40020440
 800e898:	40020458 	.word	0x40020458
 800e89c:	40020470 	.word	0x40020470
 800e8a0:	40020488 	.word	0x40020488
 800e8a4:	400204a0 	.word	0x400204a0
 800e8a8:	400204b8 	.word	0x400204b8
 800e8ac:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d008      	beq.n	800e8cc <HAL_UART_IRQHandler+0x544>
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d003      	beq.n	800e8cc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f001 fb17 	bl	800fef8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8ca:	e014      	b.n	800e8f6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00f      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x56e>
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	da0c      	bge.n	800e8f6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f001 fb01 	bl	800fee4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8e2:	e008      	b.n	800e8f6 <HAL_UART_IRQHandler+0x56e>
      return;
 800e8e4:	bf00      	nop
 800e8e6:	e006      	b.n	800e8f6 <HAL_UART_IRQHandler+0x56e>
    return;
 800e8e8:	bf00      	nop
 800e8ea:	e004      	b.n	800e8f6 <HAL_UART_IRQHandler+0x56e>
      return;
 800e8ec:	bf00      	nop
 800e8ee:	e002      	b.n	800e8f6 <HAL_UART_IRQHandler+0x56e>
      return;
 800e8f0:	bf00      	nop
 800e8f2:	e000      	b.n	800e8f6 <HAL_UART_IRQHandler+0x56e>
    return;
 800e8f4:	bf00      	nop
  }
}
 800e8f6:	3720      	adds	r7, #32
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e904:	bf00      	nop
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e918:	bf00      	nop
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	460b      	mov	r3, r1
 800e92e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e930:	bf00      	nop
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr

0800e93c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e93c:	b5b0      	push	{r4, r5, r7, lr}
 800e93e:	b08e      	sub	sp, #56	; 0x38
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e944:	2300      	movs	r3, #0
 800e946:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	689a      	ldr	r2, [r3, #8]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	691b      	ldr	r3, [r3, #16]
 800e952:	431a      	orrs	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	695b      	ldr	r3, [r3, #20]
 800e958:	431a      	orrs	r2, r3
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	69db      	ldr	r3, [r3, #28]
 800e95e:	4313      	orrs	r3, r2
 800e960:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	4bbf      	ldr	r3, [pc, #764]	; (800ec68 <UART_SetConfig+0x32c>)
 800e96a:	4013      	ands	r3, r2
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	6812      	ldr	r2, [r2, #0]
 800e970:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e972:	430b      	orrs	r3, r1
 800e974:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	68da      	ldr	r2, [r3, #12]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	430a      	orrs	r2, r1
 800e98a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4ab5      	ldr	r2, [pc, #724]	; (800ec6c <UART_SetConfig+0x330>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d004      	beq.n	800e9a6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a1b      	ldr	r3, [r3, #32]
 800e9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	689a      	ldr	r2, [r3, #8]
 800e9ac:	4bb0      	ldr	r3, [pc, #704]	; (800ec70 <UART_SetConfig+0x334>)
 800e9ae:	4013      	ands	r3, r2
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	6812      	ldr	r2, [r2, #0]
 800e9b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e9b6:	430b      	orrs	r3, r1
 800e9b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c0:	f023 010f 	bic.w	r1, r3, #15
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	430a      	orrs	r2, r1
 800e9ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4aa7      	ldr	r2, [pc, #668]	; (800ec74 <UART_SetConfig+0x338>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d176      	bne.n	800eac8 <UART_SetConfig+0x18c>
 800e9da:	4ba7      	ldr	r3, [pc, #668]	; (800ec78 <UART_SetConfig+0x33c>)
 800e9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9e2:	2b28      	cmp	r3, #40	; 0x28
 800e9e4:	d86c      	bhi.n	800eac0 <UART_SetConfig+0x184>
 800e9e6:	a201      	add	r2, pc, #4	; (adr r2, 800e9ec <UART_SetConfig+0xb0>)
 800e9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ec:	0800ea91 	.word	0x0800ea91
 800e9f0:	0800eac1 	.word	0x0800eac1
 800e9f4:	0800eac1 	.word	0x0800eac1
 800e9f8:	0800eac1 	.word	0x0800eac1
 800e9fc:	0800eac1 	.word	0x0800eac1
 800ea00:	0800eac1 	.word	0x0800eac1
 800ea04:	0800eac1 	.word	0x0800eac1
 800ea08:	0800eac1 	.word	0x0800eac1
 800ea0c:	0800ea99 	.word	0x0800ea99
 800ea10:	0800eac1 	.word	0x0800eac1
 800ea14:	0800eac1 	.word	0x0800eac1
 800ea18:	0800eac1 	.word	0x0800eac1
 800ea1c:	0800eac1 	.word	0x0800eac1
 800ea20:	0800eac1 	.word	0x0800eac1
 800ea24:	0800eac1 	.word	0x0800eac1
 800ea28:	0800eac1 	.word	0x0800eac1
 800ea2c:	0800eaa1 	.word	0x0800eaa1
 800ea30:	0800eac1 	.word	0x0800eac1
 800ea34:	0800eac1 	.word	0x0800eac1
 800ea38:	0800eac1 	.word	0x0800eac1
 800ea3c:	0800eac1 	.word	0x0800eac1
 800ea40:	0800eac1 	.word	0x0800eac1
 800ea44:	0800eac1 	.word	0x0800eac1
 800ea48:	0800eac1 	.word	0x0800eac1
 800ea4c:	0800eaa9 	.word	0x0800eaa9
 800ea50:	0800eac1 	.word	0x0800eac1
 800ea54:	0800eac1 	.word	0x0800eac1
 800ea58:	0800eac1 	.word	0x0800eac1
 800ea5c:	0800eac1 	.word	0x0800eac1
 800ea60:	0800eac1 	.word	0x0800eac1
 800ea64:	0800eac1 	.word	0x0800eac1
 800ea68:	0800eac1 	.word	0x0800eac1
 800ea6c:	0800eab1 	.word	0x0800eab1
 800ea70:	0800eac1 	.word	0x0800eac1
 800ea74:	0800eac1 	.word	0x0800eac1
 800ea78:	0800eac1 	.word	0x0800eac1
 800ea7c:	0800eac1 	.word	0x0800eac1
 800ea80:	0800eac1 	.word	0x0800eac1
 800ea84:	0800eac1 	.word	0x0800eac1
 800ea88:	0800eac1 	.word	0x0800eac1
 800ea8c:	0800eab9 	.word	0x0800eab9
 800ea90:	2301      	movs	r3, #1
 800ea92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea96:	e222      	b.n	800eede <UART_SetConfig+0x5a2>
 800ea98:	2304      	movs	r3, #4
 800ea9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea9e:	e21e      	b.n	800eede <UART_SetConfig+0x5a2>
 800eaa0:	2308      	movs	r3, #8
 800eaa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaa6:	e21a      	b.n	800eede <UART_SetConfig+0x5a2>
 800eaa8:	2310      	movs	r3, #16
 800eaaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaae:	e216      	b.n	800eede <UART_SetConfig+0x5a2>
 800eab0:	2320      	movs	r3, #32
 800eab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eab6:	e212      	b.n	800eede <UART_SetConfig+0x5a2>
 800eab8:	2340      	movs	r3, #64	; 0x40
 800eaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eabe:	e20e      	b.n	800eede <UART_SetConfig+0x5a2>
 800eac0:	2380      	movs	r3, #128	; 0x80
 800eac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eac6:	e20a      	b.n	800eede <UART_SetConfig+0x5a2>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a6b      	ldr	r2, [pc, #428]	; (800ec7c <UART_SetConfig+0x340>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d130      	bne.n	800eb34 <UART_SetConfig+0x1f8>
 800ead2:	4b69      	ldr	r3, [pc, #420]	; (800ec78 <UART_SetConfig+0x33c>)
 800ead4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ead6:	f003 0307 	and.w	r3, r3, #7
 800eada:	2b05      	cmp	r3, #5
 800eadc:	d826      	bhi.n	800eb2c <UART_SetConfig+0x1f0>
 800eade:	a201      	add	r2, pc, #4	; (adr r2, 800eae4 <UART_SetConfig+0x1a8>)
 800eae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae4:	0800eafd 	.word	0x0800eafd
 800eae8:	0800eb05 	.word	0x0800eb05
 800eaec:	0800eb0d 	.word	0x0800eb0d
 800eaf0:	0800eb15 	.word	0x0800eb15
 800eaf4:	0800eb1d 	.word	0x0800eb1d
 800eaf8:	0800eb25 	.word	0x0800eb25
 800eafc:	2300      	movs	r3, #0
 800eafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb02:	e1ec      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb04:	2304      	movs	r3, #4
 800eb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb0a:	e1e8      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb0c:	2308      	movs	r3, #8
 800eb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb12:	e1e4      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb14:	2310      	movs	r3, #16
 800eb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb1a:	e1e0      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb1c:	2320      	movs	r3, #32
 800eb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb22:	e1dc      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb24:	2340      	movs	r3, #64	; 0x40
 800eb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb2a:	e1d8      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb2c:	2380      	movs	r3, #128	; 0x80
 800eb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb32:	e1d4      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a51      	ldr	r2, [pc, #324]	; (800ec80 <UART_SetConfig+0x344>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d130      	bne.n	800eba0 <UART_SetConfig+0x264>
 800eb3e:	4b4e      	ldr	r3, [pc, #312]	; (800ec78 <UART_SetConfig+0x33c>)
 800eb40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb42:	f003 0307 	and.w	r3, r3, #7
 800eb46:	2b05      	cmp	r3, #5
 800eb48:	d826      	bhi.n	800eb98 <UART_SetConfig+0x25c>
 800eb4a:	a201      	add	r2, pc, #4	; (adr r2, 800eb50 <UART_SetConfig+0x214>)
 800eb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb50:	0800eb69 	.word	0x0800eb69
 800eb54:	0800eb71 	.word	0x0800eb71
 800eb58:	0800eb79 	.word	0x0800eb79
 800eb5c:	0800eb81 	.word	0x0800eb81
 800eb60:	0800eb89 	.word	0x0800eb89
 800eb64:	0800eb91 	.word	0x0800eb91
 800eb68:	2300      	movs	r3, #0
 800eb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb6e:	e1b6      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb70:	2304      	movs	r3, #4
 800eb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb76:	e1b2      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb78:	2308      	movs	r3, #8
 800eb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb7e:	e1ae      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb80:	2310      	movs	r3, #16
 800eb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb86:	e1aa      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb88:	2320      	movs	r3, #32
 800eb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb8e:	e1a6      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb90:	2340      	movs	r3, #64	; 0x40
 800eb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb96:	e1a2      	b.n	800eede <UART_SetConfig+0x5a2>
 800eb98:	2380      	movs	r3, #128	; 0x80
 800eb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb9e:	e19e      	b.n	800eede <UART_SetConfig+0x5a2>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a37      	ldr	r2, [pc, #220]	; (800ec84 <UART_SetConfig+0x348>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d130      	bne.n	800ec0c <UART_SetConfig+0x2d0>
 800ebaa:	4b33      	ldr	r3, [pc, #204]	; (800ec78 <UART_SetConfig+0x33c>)
 800ebac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebae:	f003 0307 	and.w	r3, r3, #7
 800ebb2:	2b05      	cmp	r3, #5
 800ebb4:	d826      	bhi.n	800ec04 <UART_SetConfig+0x2c8>
 800ebb6:	a201      	add	r2, pc, #4	; (adr r2, 800ebbc <UART_SetConfig+0x280>)
 800ebb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebbc:	0800ebd5 	.word	0x0800ebd5
 800ebc0:	0800ebdd 	.word	0x0800ebdd
 800ebc4:	0800ebe5 	.word	0x0800ebe5
 800ebc8:	0800ebed 	.word	0x0800ebed
 800ebcc:	0800ebf5 	.word	0x0800ebf5
 800ebd0:	0800ebfd 	.word	0x0800ebfd
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebda:	e180      	b.n	800eede <UART_SetConfig+0x5a2>
 800ebdc:	2304      	movs	r3, #4
 800ebde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebe2:	e17c      	b.n	800eede <UART_SetConfig+0x5a2>
 800ebe4:	2308      	movs	r3, #8
 800ebe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebea:	e178      	b.n	800eede <UART_SetConfig+0x5a2>
 800ebec:	2310      	movs	r3, #16
 800ebee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebf2:	e174      	b.n	800eede <UART_SetConfig+0x5a2>
 800ebf4:	2320      	movs	r3, #32
 800ebf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebfa:	e170      	b.n	800eede <UART_SetConfig+0x5a2>
 800ebfc:	2340      	movs	r3, #64	; 0x40
 800ebfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec02:	e16c      	b.n	800eede <UART_SetConfig+0x5a2>
 800ec04:	2380      	movs	r3, #128	; 0x80
 800ec06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec0a:	e168      	b.n	800eede <UART_SetConfig+0x5a2>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a1d      	ldr	r2, [pc, #116]	; (800ec88 <UART_SetConfig+0x34c>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d142      	bne.n	800ec9c <UART_SetConfig+0x360>
 800ec16:	4b18      	ldr	r3, [pc, #96]	; (800ec78 <UART_SetConfig+0x33c>)
 800ec18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec1a:	f003 0307 	and.w	r3, r3, #7
 800ec1e:	2b05      	cmp	r3, #5
 800ec20:	d838      	bhi.n	800ec94 <UART_SetConfig+0x358>
 800ec22:	a201      	add	r2, pc, #4	; (adr r2, 800ec28 <UART_SetConfig+0x2ec>)
 800ec24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec28:	0800ec41 	.word	0x0800ec41
 800ec2c:	0800ec49 	.word	0x0800ec49
 800ec30:	0800ec51 	.word	0x0800ec51
 800ec34:	0800ec59 	.word	0x0800ec59
 800ec38:	0800ec61 	.word	0x0800ec61
 800ec3c:	0800ec8d 	.word	0x0800ec8d
 800ec40:	2300      	movs	r3, #0
 800ec42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec46:	e14a      	b.n	800eede <UART_SetConfig+0x5a2>
 800ec48:	2304      	movs	r3, #4
 800ec4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec4e:	e146      	b.n	800eede <UART_SetConfig+0x5a2>
 800ec50:	2308      	movs	r3, #8
 800ec52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec56:	e142      	b.n	800eede <UART_SetConfig+0x5a2>
 800ec58:	2310      	movs	r3, #16
 800ec5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec5e:	e13e      	b.n	800eede <UART_SetConfig+0x5a2>
 800ec60:	2320      	movs	r3, #32
 800ec62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec66:	e13a      	b.n	800eede <UART_SetConfig+0x5a2>
 800ec68:	cfff69f3 	.word	0xcfff69f3
 800ec6c:	58000c00 	.word	0x58000c00
 800ec70:	11fff4ff 	.word	0x11fff4ff
 800ec74:	40011000 	.word	0x40011000
 800ec78:	58024400 	.word	0x58024400
 800ec7c:	40004400 	.word	0x40004400
 800ec80:	40004800 	.word	0x40004800
 800ec84:	40004c00 	.word	0x40004c00
 800ec88:	40005000 	.word	0x40005000
 800ec8c:	2340      	movs	r3, #64	; 0x40
 800ec8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec92:	e124      	b.n	800eede <UART_SetConfig+0x5a2>
 800ec94:	2380      	movs	r3, #128	; 0x80
 800ec96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec9a:	e120      	b.n	800eede <UART_SetConfig+0x5a2>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4acc      	ldr	r2, [pc, #816]	; (800efd4 <UART_SetConfig+0x698>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d176      	bne.n	800ed94 <UART_SetConfig+0x458>
 800eca6:	4bcc      	ldr	r3, [pc, #816]	; (800efd8 <UART_SetConfig+0x69c>)
 800eca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ecae:	2b28      	cmp	r3, #40	; 0x28
 800ecb0:	d86c      	bhi.n	800ed8c <UART_SetConfig+0x450>
 800ecb2:	a201      	add	r2, pc, #4	; (adr r2, 800ecb8 <UART_SetConfig+0x37c>)
 800ecb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb8:	0800ed5d 	.word	0x0800ed5d
 800ecbc:	0800ed8d 	.word	0x0800ed8d
 800ecc0:	0800ed8d 	.word	0x0800ed8d
 800ecc4:	0800ed8d 	.word	0x0800ed8d
 800ecc8:	0800ed8d 	.word	0x0800ed8d
 800eccc:	0800ed8d 	.word	0x0800ed8d
 800ecd0:	0800ed8d 	.word	0x0800ed8d
 800ecd4:	0800ed8d 	.word	0x0800ed8d
 800ecd8:	0800ed65 	.word	0x0800ed65
 800ecdc:	0800ed8d 	.word	0x0800ed8d
 800ece0:	0800ed8d 	.word	0x0800ed8d
 800ece4:	0800ed8d 	.word	0x0800ed8d
 800ece8:	0800ed8d 	.word	0x0800ed8d
 800ecec:	0800ed8d 	.word	0x0800ed8d
 800ecf0:	0800ed8d 	.word	0x0800ed8d
 800ecf4:	0800ed8d 	.word	0x0800ed8d
 800ecf8:	0800ed6d 	.word	0x0800ed6d
 800ecfc:	0800ed8d 	.word	0x0800ed8d
 800ed00:	0800ed8d 	.word	0x0800ed8d
 800ed04:	0800ed8d 	.word	0x0800ed8d
 800ed08:	0800ed8d 	.word	0x0800ed8d
 800ed0c:	0800ed8d 	.word	0x0800ed8d
 800ed10:	0800ed8d 	.word	0x0800ed8d
 800ed14:	0800ed8d 	.word	0x0800ed8d
 800ed18:	0800ed75 	.word	0x0800ed75
 800ed1c:	0800ed8d 	.word	0x0800ed8d
 800ed20:	0800ed8d 	.word	0x0800ed8d
 800ed24:	0800ed8d 	.word	0x0800ed8d
 800ed28:	0800ed8d 	.word	0x0800ed8d
 800ed2c:	0800ed8d 	.word	0x0800ed8d
 800ed30:	0800ed8d 	.word	0x0800ed8d
 800ed34:	0800ed8d 	.word	0x0800ed8d
 800ed38:	0800ed7d 	.word	0x0800ed7d
 800ed3c:	0800ed8d 	.word	0x0800ed8d
 800ed40:	0800ed8d 	.word	0x0800ed8d
 800ed44:	0800ed8d 	.word	0x0800ed8d
 800ed48:	0800ed8d 	.word	0x0800ed8d
 800ed4c:	0800ed8d 	.word	0x0800ed8d
 800ed50:	0800ed8d 	.word	0x0800ed8d
 800ed54:	0800ed8d 	.word	0x0800ed8d
 800ed58:	0800ed85 	.word	0x0800ed85
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed62:	e0bc      	b.n	800eede <UART_SetConfig+0x5a2>
 800ed64:	2304      	movs	r3, #4
 800ed66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed6a:	e0b8      	b.n	800eede <UART_SetConfig+0x5a2>
 800ed6c:	2308      	movs	r3, #8
 800ed6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed72:	e0b4      	b.n	800eede <UART_SetConfig+0x5a2>
 800ed74:	2310      	movs	r3, #16
 800ed76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed7a:	e0b0      	b.n	800eede <UART_SetConfig+0x5a2>
 800ed7c:	2320      	movs	r3, #32
 800ed7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed82:	e0ac      	b.n	800eede <UART_SetConfig+0x5a2>
 800ed84:	2340      	movs	r3, #64	; 0x40
 800ed86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed8a:	e0a8      	b.n	800eede <UART_SetConfig+0x5a2>
 800ed8c:	2380      	movs	r3, #128	; 0x80
 800ed8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed92:	e0a4      	b.n	800eede <UART_SetConfig+0x5a2>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a90      	ldr	r2, [pc, #576]	; (800efdc <UART_SetConfig+0x6a0>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d130      	bne.n	800ee00 <UART_SetConfig+0x4c4>
 800ed9e:	4b8e      	ldr	r3, [pc, #568]	; (800efd8 <UART_SetConfig+0x69c>)
 800eda0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda2:	f003 0307 	and.w	r3, r3, #7
 800eda6:	2b05      	cmp	r3, #5
 800eda8:	d826      	bhi.n	800edf8 <UART_SetConfig+0x4bc>
 800edaa:	a201      	add	r2, pc, #4	; (adr r2, 800edb0 <UART_SetConfig+0x474>)
 800edac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb0:	0800edc9 	.word	0x0800edc9
 800edb4:	0800edd1 	.word	0x0800edd1
 800edb8:	0800edd9 	.word	0x0800edd9
 800edbc:	0800ede1 	.word	0x0800ede1
 800edc0:	0800ede9 	.word	0x0800ede9
 800edc4:	0800edf1 	.word	0x0800edf1
 800edc8:	2300      	movs	r3, #0
 800edca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edce:	e086      	b.n	800eede <UART_SetConfig+0x5a2>
 800edd0:	2304      	movs	r3, #4
 800edd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edd6:	e082      	b.n	800eede <UART_SetConfig+0x5a2>
 800edd8:	2308      	movs	r3, #8
 800edda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edde:	e07e      	b.n	800eede <UART_SetConfig+0x5a2>
 800ede0:	2310      	movs	r3, #16
 800ede2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ede6:	e07a      	b.n	800eede <UART_SetConfig+0x5a2>
 800ede8:	2320      	movs	r3, #32
 800edea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edee:	e076      	b.n	800eede <UART_SetConfig+0x5a2>
 800edf0:	2340      	movs	r3, #64	; 0x40
 800edf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edf6:	e072      	b.n	800eede <UART_SetConfig+0x5a2>
 800edf8:	2380      	movs	r3, #128	; 0x80
 800edfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edfe:	e06e      	b.n	800eede <UART_SetConfig+0x5a2>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a76      	ldr	r2, [pc, #472]	; (800efe0 <UART_SetConfig+0x6a4>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d130      	bne.n	800ee6c <UART_SetConfig+0x530>
 800ee0a:	4b73      	ldr	r3, [pc, #460]	; (800efd8 <UART_SetConfig+0x69c>)
 800ee0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee0e:	f003 0307 	and.w	r3, r3, #7
 800ee12:	2b05      	cmp	r3, #5
 800ee14:	d826      	bhi.n	800ee64 <UART_SetConfig+0x528>
 800ee16:	a201      	add	r2, pc, #4	; (adr r2, 800ee1c <UART_SetConfig+0x4e0>)
 800ee18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee1c:	0800ee35 	.word	0x0800ee35
 800ee20:	0800ee3d 	.word	0x0800ee3d
 800ee24:	0800ee45 	.word	0x0800ee45
 800ee28:	0800ee4d 	.word	0x0800ee4d
 800ee2c:	0800ee55 	.word	0x0800ee55
 800ee30:	0800ee5d 	.word	0x0800ee5d
 800ee34:	2300      	movs	r3, #0
 800ee36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee3a:	e050      	b.n	800eede <UART_SetConfig+0x5a2>
 800ee3c:	2304      	movs	r3, #4
 800ee3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee42:	e04c      	b.n	800eede <UART_SetConfig+0x5a2>
 800ee44:	2308      	movs	r3, #8
 800ee46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee4a:	e048      	b.n	800eede <UART_SetConfig+0x5a2>
 800ee4c:	2310      	movs	r3, #16
 800ee4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee52:	e044      	b.n	800eede <UART_SetConfig+0x5a2>
 800ee54:	2320      	movs	r3, #32
 800ee56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee5a:	e040      	b.n	800eede <UART_SetConfig+0x5a2>
 800ee5c:	2340      	movs	r3, #64	; 0x40
 800ee5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee62:	e03c      	b.n	800eede <UART_SetConfig+0x5a2>
 800ee64:	2380      	movs	r3, #128	; 0x80
 800ee66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee6a:	e038      	b.n	800eede <UART_SetConfig+0x5a2>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a5c      	ldr	r2, [pc, #368]	; (800efe4 <UART_SetConfig+0x6a8>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d130      	bne.n	800eed8 <UART_SetConfig+0x59c>
 800ee76:	4b58      	ldr	r3, [pc, #352]	; (800efd8 <UART_SetConfig+0x69c>)
 800ee78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee7a:	f003 0307 	and.w	r3, r3, #7
 800ee7e:	2b05      	cmp	r3, #5
 800ee80:	d826      	bhi.n	800eed0 <UART_SetConfig+0x594>
 800ee82:	a201      	add	r2, pc, #4	; (adr r2, 800ee88 <UART_SetConfig+0x54c>)
 800ee84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee88:	0800eea1 	.word	0x0800eea1
 800ee8c:	0800eea9 	.word	0x0800eea9
 800ee90:	0800eeb1 	.word	0x0800eeb1
 800ee94:	0800eeb9 	.word	0x0800eeb9
 800ee98:	0800eec1 	.word	0x0800eec1
 800ee9c:	0800eec9 	.word	0x0800eec9
 800eea0:	2302      	movs	r3, #2
 800eea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eea6:	e01a      	b.n	800eede <UART_SetConfig+0x5a2>
 800eea8:	2304      	movs	r3, #4
 800eeaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeae:	e016      	b.n	800eede <UART_SetConfig+0x5a2>
 800eeb0:	2308      	movs	r3, #8
 800eeb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeb6:	e012      	b.n	800eede <UART_SetConfig+0x5a2>
 800eeb8:	2310      	movs	r3, #16
 800eeba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eebe:	e00e      	b.n	800eede <UART_SetConfig+0x5a2>
 800eec0:	2320      	movs	r3, #32
 800eec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eec6:	e00a      	b.n	800eede <UART_SetConfig+0x5a2>
 800eec8:	2340      	movs	r3, #64	; 0x40
 800eeca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eece:	e006      	b.n	800eede <UART_SetConfig+0x5a2>
 800eed0:	2380      	movs	r3, #128	; 0x80
 800eed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eed6:	e002      	b.n	800eede <UART_SetConfig+0x5a2>
 800eed8:	2380      	movs	r3, #128	; 0x80
 800eeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a40      	ldr	r2, [pc, #256]	; (800efe4 <UART_SetConfig+0x6a8>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	f040 80ef 	bne.w	800f0c8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eeea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eeee:	2b20      	cmp	r3, #32
 800eef0:	dc46      	bgt.n	800ef80 <UART_SetConfig+0x644>
 800eef2:	2b02      	cmp	r3, #2
 800eef4:	f2c0 8081 	blt.w	800effa <UART_SetConfig+0x6be>
 800eef8:	3b02      	subs	r3, #2
 800eefa:	2b1e      	cmp	r3, #30
 800eefc:	d87d      	bhi.n	800effa <UART_SetConfig+0x6be>
 800eefe:	a201      	add	r2, pc, #4	; (adr r2, 800ef04 <UART_SetConfig+0x5c8>)
 800ef00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef04:	0800ef87 	.word	0x0800ef87
 800ef08:	0800effb 	.word	0x0800effb
 800ef0c:	0800ef8f 	.word	0x0800ef8f
 800ef10:	0800effb 	.word	0x0800effb
 800ef14:	0800effb 	.word	0x0800effb
 800ef18:	0800effb 	.word	0x0800effb
 800ef1c:	0800ef9f 	.word	0x0800ef9f
 800ef20:	0800effb 	.word	0x0800effb
 800ef24:	0800effb 	.word	0x0800effb
 800ef28:	0800effb 	.word	0x0800effb
 800ef2c:	0800effb 	.word	0x0800effb
 800ef30:	0800effb 	.word	0x0800effb
 800ef34:	0800effb 	.word	0x0800effb
 800ef38:	0800effb 	.word	0x0800effb
 800ef3c:	0800efaf 	.word	0x0800efaf
 800ef40:	0800effb 	.word	0x0800effb
 800ef44:	0800effb 	.word	0x0800effb
 800ef48:	0800effb 	.word	0x0800effb
 800ef4c:	0800effb 	.word	0x0800effb
 800ef50:	0800effb 	.word	0x0800effb
 800ef54:	0800effb 	.word	0x0800effb
 800ef58:	0800effb 	.word	0x0800effb
 800ef5c:	0800effb 	.word	0x0800effb
 800ef60:	0800effb 	.word	0x0800effb
 800ef64:	0800effb 	.word	0x0800effb
 800ef68:	0800effb 	.word	0x0800effb
 800ef6c:	0800effb 	.word	0x0800effb
 800ef70:	0800effb 	.word	0x0800effb
 800ef74:	0800effb 	.word	0x0800effb
 800ef78:	0800effb 	.word	0x0800effb
 800ef7c:	0800efed 	.word	0x0800efed
 800ef80:	2b40      	cmp	r3, #64	; 0x40
 800ef82:	d036      	beq.n	800eff2 <UART_SetConfig+0x6b6>
 800ef84:	e039      	b.n	800effa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ef86:	f7fb ffe9 	bl	800af5c <HAL_RCCEx_GetD3PCLK1Freq>
 800ef8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ef8c:	e03b      	b.n	800f006 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef8e:	f107 0314 	add.w	r3, r7, #20
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fb fff8 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef9c:	e033      	b.n	800f006 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef9e:	f107 0308 	add.w	r3, r7, #8
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fc f944 	bl	800b230 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efac:	e02b      	b.n	800f006 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efae:	4b0a      	ldr	r3, [pc, #40]	; (800efd8 <UART_SetConfig+0x69c>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f003 0320 	and.w	r3, r3, #32
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d009      	beq.n	800efce <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efba:	4b07      	ldr	r3, [pc, #28]	; (800efd8 <UART_SetConfig+0x69c>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	08db      	lsrs	r3, r3, #3
 800efc0:	f003 0303 	and.w	r3, r3, #3
 800efc4:	4a08      	ldr	r2, [pc, #32]	; (800efe8 <UART_SetConfig+0x6ac>)
 800efc6:	fa22 f303 	lsr.w	r3, r2, r3
 800efca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efcc:	e01b      	b.n	800f006 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800efce:	4b06      	ldr	r3, [pc, #24]	; (800efe8 <UART_SetConfig+0x6ac>)
 800efd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efd2:	e018      	b.n	800f006 <UART_SetConfig+0x6ca>
 800efd4:	40011400 	.word	0x40011400
 800efd8:	58024400 	.word	0x58024400
 800efdc:	40007800 	.word	0x40007800
 800efe0:	40007c00 	.word	0x40007c00
 800efe4:	58000c00 	.word	0x58000c00
 800efe8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efec:	4bc4      	ldr	r3, [pc, #784]	; (800f300 <UART_SetConfig+0x9c4>)
 800efee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eff0:	e009      	b.n	800f006 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eff8:	e005      	b.n	800f006 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800effa:	2300      	movs	r3, #0
 800effc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800effe:	2301      	movs	r3, #1
 800f000:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f004:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f008:	2b00      	cmp	r3, #0
 800f00a:	f000 81da 	beq.w	800f3c2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f012:	4abc      	ldr	r2, [pc, #752]	; (800f304 <UART_SetConfig+0x9c8>)
 800f014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f018:	461a      	mov	r2, r3
 800f01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f020:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	4613      	mov	r3, r2
 800f028:	005b      	lsls	r3, r3, #1
 800f02a:	4413      	add	r3, r2
 800f02c:	6a3a      	ldr	r2, [r7, #32]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d305      	bcc.n	800f03e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f038:	6a3a      	ldr	r2, [r7, #32]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d903      	bls.n	800f046 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800f03e:	2301      	movs	r3, #1
 800f040:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f044:	e1bd      	b.n	800f3c2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f048:	4618      	mov	r0, r3
 800f04a:	f04f 0100 	mov.w	r1, #0
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f052:	4aac      	ldr	r2, [pc, #688]	; (800f304 <UART_SetConfig+0x9c8>)
 800f054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f058:	b29a      	uxth	r2, r3
 800f05a:	f04f 0300 	mov.w	r3, #0
 800f05e:	f7f1 f997 	bl	8000390 <__aeabi_uldivmod>
 800f062:	4602      	mov	r2, r0
 800f064:	460b      	mov	r3, r1
 800f066:	4610      	mov	r0, r2
 800f068:	4619      	mov	r1, r3
 800f06a:	f04f 0200 	mov.w	r2, #0
 800f06e:	f04f 0300 	mov.w	r3, #0
 800f072:	020b      	lsls	r3, r1, #8
 800f074:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f078:	0202      	lsls	r2, r0, #8
 800f07a:	6879      	ldr	r1, [r7, #4]
 800f07c:	6849      	ldr	r1, [r1, #4]
 800f07e:	0849      	lsrs	r1, r1, #1
 800f080:	4608      	mov	r0, r1
 800f082:	f04f 0100 	mov.w	r1, #0
 800f086:	1814      	adds	r4, r2, r0
 800f088:	eb43 0501 	adc.w	r5, r3, r1
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	461a      	mov	r2, r3
 800f092:	f04f 0300 	mov.w	r3, #0
 800f096:	4620      	mov	r0, r4
 800f098:	4629      	mov	r1, r5
 800f09a:	f7f1 f979 	bl	8000390 <__aeabi_uldivmod>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f0ac:	d308      	bcc.n	800f0c0 <UART_SetConfig+0x784>
 800f0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0b4:	d204      	bcs.n	800f0c0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0bc:	60da      	str	r2, [r3, #12]
 800f0be:	e180      	b.n	800f3c2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f0c6:	e17c      	b.n	800f3c2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	69db      	ldr	r3, [r3, #28]
 800f0cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0d0:	f040 80bf 	bne.w	800f252 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800f0d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f0d8:	2b20      	cmp	r3, #32
 800f0da:	dc49      	bgt.n	800f170 <UART_SetConfig+0x834>
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	db7c      	blt.n	800f1da <UART_SetConfig+0x89e>
 800f0e0:	2b20      	cmp	r3, #32
 800f0e2:	d87a      	bhi.n	800f1da <UART_SetConfig+0x89e>
 800f0e4:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <UART_SetConfig+0x7b0>)
 800f0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ea:	bf00      	nop
 800f0ec:	0800f177 	.word	0x0800f177
 800f0f0:	0800f17f 	.word	0x0800f17f
 800f0f4:	0800f1db 	.word	0x0800f1db
 800f0f8:	0800f1db 	.word	0x0800f1db
 800f0fc:	0800f187 	.word	0x0800f187
 800f100:	0800f1db 	.word	0x0800f1db
 800f104:	0800f1db 	.word	0x0800f1db
 800f108:	0800f1db 	.word	0x0800f1db
 800f10c:	0800f197 	.word	0x0800f197
 800f110:	0800f1db 	.word	0x0800f1db
 800f114:	0800f1db 	.word	0x0800f1db
 800f118:	0800f1db 	.word	0x0800f1db
 800f11c:	0800f1db 	.word	0x0800f1db
 800f120:	0800f1db 	.word	0x0800f1db
 800f124:	0800f1db 	.word	0x0800f1db
 800f128:	0800f1db 	.word	0x0800f1db
 800f12c:	0800f1a7 	.word	0x0800f1a7
 800f130:	0800f1db 	.word	0x0800f1db
 800f134:	0800f1db 	.word	0x0800f1db
 800f138:	0800f1db 	.word	0x0800f1db
 800f13c:	0800f1db 	.word	0x0800f1db
 800f140:	0800f1db 	.word	0x0800f1db
 800f144:	0800f1db 	.word	0x0800f1db
 800f148:	0800f1db 	.word	0x0800f1db
 800f14c:	0800f1db 	.word	0x0800f1db
 800f150:	0800f1db 	.word	0x0800f1db
 800f154:	0800f1db 	.word	0x0800f1db
 800f158:	0800f1db 	.word	0x0800f1db
 800f15c:	0800f1db 	.word	0x0800f1db
 800f160:	0800f1db 	.word	0x0800f1db
 800f164:	0800f1db 	.word	0x0800f1db
 800f168:	0800f1db 	.word	0x0800f1db
 800f16c:	0800f1cd 	.word	0x0800f1cd
 800f170:	2b40      	cmp	r3, #64	; 0x40
 800f172:	d02e      	beq.n	800f1d2 <UART_SetConfig+0x896>
 800f174:	e031      	b.n	800f1da <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f176:	f7fa fa71 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800f17a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f17c:	e033      	b.n	800f1e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f17e:	f7fa fa83 	bl	8009688 <HAL_RCC_GetPCLK2Freq>
 800f182:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f184:	e02f      	b.n	800f1e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f186:	f107 0314 	add.w	r3, r7, #20
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fb fefc 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f194:	e027      	b.n	800f1e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f196:	f107 0308 	add.w	r3, r7, #8
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fc f848 	bl	800b230 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1a4:	e01f      	b.n	800f1e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1a6:	4b58      	ldr	r3, [pc, #352]	; (800f308 <UART_SetConfig+0x9cc>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f003 0320 	and.w	r3, r3, #32
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d009      	beq.n	800f1c6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1b2:	4b55      	ldr	r3, [pc, #340]	; (800f308 <UART_SetConfig+0x9cc>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	08db      	lsrs	r3, r3, #3
 800f1b8:	f003 0303 	and.w	r3, r3, #3
 800f1bc:	4a53      	ldr	r2, [pc, #332]	; (800f30c <UART_SetConfig+0x9d0>)
 800f1be:	fa22 f303 	lsr.w	r3, r2, r3
 800f1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1c4:	e00f      	b.n	800f1e6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800f1c6:	4b51      	ldr	r3, [pc, #324]	; (800f30c <UART_SetConfig+0x9d0>)
 800f1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1ca:	e00c      	b.n	800f1e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1cc:	4b4c      	ldr	r3, [pc, #304]	; (800f300 <UART_SetConfig+0x9c4>)
 800f1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1d0:	e009      	b.n	800f1e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1d8:	e005      	b.n	800f1e6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f1e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f000 80ea 	beq.w	800f3c2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f2:	4a44      	ldr	r2, [pc, #272]	; (800f304 <UART_SetConfig+0x9c8>)
 800f1f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f200:	005a      	lsls	r2, r3, #1
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	085b      	lsrs	r3, r3, #1
 800f208:	441a      	add	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f212:	b29b      	uxth	r3, r3
 800f214:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f218:	2b0f      	cmp	r3, #15
 800f21a:	d916      	bls.n	800f24a <UART_SetConfig+0x90e>
 800f21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f222:	d212      	bcs.n	800f24a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f226:	b29b      	uxth	r3, r3
 800f228:	f023 030f 	bic.w	r3, r3, #15
 800f22c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f230:	085b      	lsrs	r3, r3, #1
 800f232:	b29b      	uxth	r3, r3
 800f234:	f003 0307 	and.w	r3, r3, #7
 800f238:	b29a      	uxth	r2, r3
 800f23a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f23c:	4313      	orrs	r3, r2
 800f23e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f246:	60da      	str	r2, [r3, #12]
 800f248:	e0bb      	b.n	800f3c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f24a:	2301      	movs	r3, #1
 800f24c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f250:	e0b7      	b.n	800f3c2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f252:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f256:	2b20      	cmp	r3, #32
 800f258:	dc4a      	bgt.n	800f2f0 <UART_SetConfig+0x9b4>
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	f2c0 8086 	blt.w	800f36c <UART_SetConfig+0xa30>
 800f260:	2b20      	cmp	r3, #32
 800f262:	f200 8083 	bhi.w	800f36c <UART_SetConfig+0xa30>
 800f266:	a201      	add	r2, pc, #4	; (adr r2, 800f26c <UART_SetConfig+0x930>)
 800f268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26c:	0800f2f7 	.word	0x0800f2f7
 800f270:	0800f311 	.word	0x0800f311
 800f274:	0800f36d 	.word	0x0800f36d
 800f278:	0800f36d 	.word	0x0800f36d
 800f27c:	0800f319 	.word	0x0800f319
 800f280:	0800f36d 	.word	0x0800f36d
 800f284:	0800f36d 	.word	0x0800f36d
 800f288:	0800f36d 	.word	0x0800f36d
 800f28c:	0800f329 	.word	0x0800f329
 800f290:	0800f36d 	.word	0x0800f36d
 800f294:	0800f36d 	.word	0x0800f36d
 800f298:	0800f36d 	.word	0x0800f36d
 800f29c:	0800f36d 	.word	0x0800f36d
 800f2a0:	0800f36d 	.word	0x0800f36d
 800f2a4:	0800f36d 	.word	0x0800f36d
 800f2a8:	0800f36d 	.word	0x0800f36d
 800f2ac:	0800f339 	.word	0x0800f339
 800f2b0:	0800f36d 	.word	0x0800f36d
 800f2b4:	0800f36d 	.word	0x0800f36d
 800f2b8:	0800f36d 	.word	0x0800f36d
 800f2bc:	0800f36d 	.word	0x0800f36d
 800f2c0:	0800f36d 	.word	0x0800f36d
 800f2c4:	0800f36d 	.word	0x0800f36d
 800f2c8:	0800f36d 	.word	0x0800f36d
 800f2cc:	0800f36d 	.word	0x0800f36d
 800f2d0:	0800f36d 	.word	0x0800f36d
 800f2d4:	0800f36d 	.word	0x0800f36d
 800f2d8:	0800f36d 	.word	0x0800f36d
 800f2dc:	0800f36d 	.word	0x0800f36d
 800f2e0:	0800f36d 	.word	0x0800f36d
 800f2e4:	0800f36d 	.word	0x0800f36d
 800f2e8:	0800f36d 	.word	0x0800f36d
 800f2ec:	0800f35f 	.word	0x0800f35f
 800f2f0:	2b40      	cmp	r3, #64	; 0x40
 800f2f2:	d037      	beq.n	800f364 <UART_SetConfig+0xa28>
 800f2f4:	e03a      	b.n	800f36c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2f6:	f7fa f9b1 	bl	800965c <HAL_RCC_GetPCLK1Freq>
 800f2fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f2fc:	e03c      	b.n	800f378 <UART_SetConfig+0xa3c>
 800f2fe:	bf00      	nop
 800f300:	003d0900 	.word	0x003d0900
 800f304:	08023698 	.word	0x08023698
 800f308:	58024400 	.word	0x58024400
 800f30c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f310:	f7fa f9ba 	bl	8009688 <HAL_RCC_GetPCLK2Freq>
 800f314:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f316:	e02f      	b.n	800f378 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f318:	f107 0314 	add.w	r3, r7, #20
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fb fe33 	bl	800af88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f326:	e027      	b.n	800f378 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f328:	f107 0308 	add.w	r3, r7, #8
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fb ff7f 	bl	800b230 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f336:	e01f      	b.n	800f378 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f338:	4b2c      	ldr	r3, [pc, #176]	; (800f3ec <UART_SetConfig+0xab0>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f003 0320 	and.w	r3, r3, #32
 800f340:	2b00      	cmp	r3, #0
 800f342:	d009      	beq.n	800f358 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f344:	4b29      	ldr	r3, [pc, #164]	; (800f3ec <UART_SetConfig+0xab0>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	08db      	lsrs	r3, r3, #3
 800f34a:	f003 0303 	and.w	r3, r3, #3
 800f34e:	4a28      	ldr	r2, [pc, #160]	; (800f3f0 <UART_SetConfig+0xab4>)
 800f350:	fa22 f303 	lsr.w	r3, r2, r3
 800f354:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f356:	e00f      	b.n	800f378 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f358:	4b25      	ldr	r3, [pc, #148]	; (800f3f0 <UART_SetConfig+0xab4>)
 800f35a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f35c:	e00c      	b.n	800f378 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f35e:	4b25      	ldr	r3, [pc, #148]	; (800f3f4 <UART_SetConfig+0xab8>)
 800f360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f362:	e009      	b.n	800f378 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f36a:	e005      	b.n	800f378 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f36c:	2300      	movs	r3, #0
 800f36e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f370:	2301      	movs	r3, #1
 800f372:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f376:	bf00      	nop
    }

    if (pclk != 0U)
 800f378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d021      	beq.n	800f3c2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f382:	4a1d      	ldr	r2, [pc, #116]	; (800f3f8 <UART_SetConfig+0xabc>)
 800f384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f388:	461a      	mov	r2, r3
 800f38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	085b      	lsrs	r3, r3, #1
 800f396:	441a      	add	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a6:	2b0f      	cmp	r3, #15
 800f3a8:	d908      	bls.n	800f3bc <UART_SetConfig+0xa80>
 800f3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3b0:	d204      	bcs.n	800f3bc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3b8:	60da      	str	r2, [r3, #12]
 800f3ba:	e002      	b.n	800f3c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f3de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3738      	adds	r7, #56	; 0x38
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bdb0      	pop	{r4, r5, r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	58024400 	.word	0x58024400
 800f3f0:	03d09000 	.word	0x03d09000
 800f3f4:	003d0900 	.word	0x003d0900
 800f3f8:	08023698 	.word	0x08023698

0800f3fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f408:	f003 0301 	and.w	r3, r3, #1
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00a      	beq.n	800f426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	430a      	orrs	r2, r1
 800f424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f42a:	f003 0302 	and.w	r3, r3, #2
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d00a      	beq.n	800f448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	430a      	orrs	r2, r1
 800f446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f44c:	f003 0304 	and.w	r3, r3, #4
 800f450:	2b00      	cmp	r3, #0
 800f452:	d00a      	beq.n	800f46a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	430a      	orrs	r2, r1
 800f468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f46e:	f003 0308 	and.w	r3, r3, #8
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00a      	beq.n	800f48c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	430a      	orrs	r2, r1
 800f48a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f490:	f003 0310 	and.w	r3, r3, #16
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00a      	beq.n	800f4ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	689b      	ldr	r3, [r3, #8]
 800f49e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	430a      	orrs	r2, r1
 800f4ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4b2:	f003 0320 	and.w	r3, r3, #32
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00a      	beq.n	800f4d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	430a      	orrs	r2, r1
 800f4ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d01a      	beq.n	800f512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	430a      	orrs	r2, r1
 800f4f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4fa:	d10a      	bne.n	800f512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	430a      	orrs	r2, r1
 800f510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d00a      	beq.n	800f534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	430a      	orrs	r2, r1
 800f532:	605a      	str	r2, [r3, #4]
  }
}
 800f534:	bf00      	nop
 800f536:	370c      	adds	r7, #12
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b086      	sub	sp, #24
 800f544:	af02      	add	r7, sp, #8
 800f546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f550:	f7f5 fc66 	bl	8004e20 <HAL_GetTick>
 800f554:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f003 0308 	and.w	r3, r3, #8
 800f560:	2b08      	cmp	r3, #8
 800f562:	d10e      	bne.n	800f582 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f568:	9300      	str	r3, [sp, #0]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2200      	movs	r2, #0
 800f56e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 f82f 	bl	800f5d6 <UART_WaitOnFlagUntilTimeout>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d001      	beq.n	800f582 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f57e:	2303      	movs	r3, #3
 800f580:	e025      	b.n	800f5ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f003 0304 	and.w	r3, r3, #4
 800f58c:	2b04      	cmp	r3, #4
 800f58e:	d10e      	bne.n	800f5ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f594:	9300      	str	r3, [sp, #0]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2200      	movs	r2, #0
 800f59a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 f819 	bl	800f5d6 <UART_WaitOnFlagUntilTimeout>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d001      	beq.n	800f5ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5aa:	2303      	movs	r3, #3
 800f5ac:	e00f      	b.n	800f5ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2220      	movs	r2, #32
 800f5b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2220      	movs	r2, #32
 800f5ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f5cc:	2300      	movs	r3, #0
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3710      	adds	r7, #16
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b084      	sub	sp, #16
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	60f8      	str	r0, [r7, #12]
 800f5de:	60b9      	str	r1, [r7, #8]
 800f5e0:	603b      	str	r3, [r7, #0]
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5e6:	e062      	b.n	800f6ae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ee:	d05e      	beq.n	800f6ae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f5f0:	f7f5 fc16 	bl	8004e20 <HAL_GetTick>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	69ba      	ldr	r2, [r7, #24]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d302      	bcc.n	800f606 <UART_WaitOnFlagUntilTimeout+0x30>
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d11d      	bne.n	800f642 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f614:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	689a      	ldr	r2, [r3, #8]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f022 0201 	bic.w	r2, r2, #1
 800f624:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2220      	movs	r2, #32
 800f62a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2220      	movs	r2, #32
 800f632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2200      	movs	r2, #0
 800f63a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f63e:	2303      	movs	r3, #3
 800f640:	e045      	b.n	800f6ce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f003 0304 	and.w	r3, r3, #4
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d02e      	beq.n	800f6ae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	69db      	ldr	r3, [r3, #28]
 800f656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f65a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f65e:	d126      	bne.n	800f6ae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f668:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	681a      	ldr	r2, [r3, #0]
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f678:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	689a      	ldr	r2, [r3, #8]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f022 0201 	bic.w	r2, r2, #1
 800f688:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2220      	movs	r2, #32
 800f68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2220      	movs	r2, #32
 800f696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2220      	movs	r2, #32
 800f69e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f6aa:	2303      	movs	r3, #3
 800f6ac:	e00f      	b.n	800f6ce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	69da      	ldr	r2, [r3, #28]
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	4013      	ands	r3, r2
 800f6b8:	68ba      	ldr	r2, [r7, #8]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	bf0c      	ite	eq
 800f6be:	2301      	moveq	r3, #1
 800f6c0:	2300      	movne	r3, #0
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d08d      	beq.n	800f5e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6cc:	2300      	movs	r3, #0
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
	...

0800f6d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	60b9      	str	r1, [r7, #8]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	68ba      	ldr	r2, [r7, #8]
 800f6ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	88fa      	ldrh	r2, [r7, #6]
 800f6f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	88fa      	ldrh	r2, [r7, #6]
 800f6f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2200      	movs	r2, #0
 800f700:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	689b      	ldr	r3, [r3, #8]
 800f706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f70a:	d10e      	bne.n	800f72a <UART_Start_Receive_IT+0x52>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d105      	bne.n	800f720 <UART_Start_Receive_IT+0x48>
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f71a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f71e:	e02d      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	22ff      	movs	r2, #255	; 0xff
 800f724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f728:	e028      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10d      	bne.n	800f74e <UART_Start_Receive_IT+0x76>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	691b      	ldr	r3, [r3, #16]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d104      	bne.n	800f744 <UART_Start_Receive_IT+0x6c>
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	22ff      	movs	r2, #255	; 0xff
 800f73e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f742:	e01b      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	227f      	movs	r2, #127	; 0x7f
 800f748:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f74c:	e016      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	689b      	ldr	r3, [r3, #8]
 800f752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f756:	d10d      	bne.n	800f774 <UART_Start_Receive_IT+0x9c>
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	691b      	ldr	r3, [r3, #16]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d104      	bne.n	800f76a <UART_Start_Receive_IT+0x92>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	227f      	movs	r2, #127	; 0x7f
 800f764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f768:	e008      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	223f      	movs	r2, #63	; 0x3f
 800f76e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f772:	e003      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2200      	movs	r2, #0
 800f778:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2200      	movs	r2, #0
 800f780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2222      	movs	r2, #34	; 0x22
 800f788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	689a      	ldr	r2, [r3, #8]
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f042 0201 	orr.w	r2, r2, #1
 800f79a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f7a4:	d12a      	bne.n	800f7fc <UART_Start_Receive_IT+0x124>
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7ac:	88fa      	ldrh	r2, [r7, #6]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d324      	bcc.n	800f7fc <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7ba:	d107      	bne.n	800f7cc <UART_Start_Receive_IT+0xf4>
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	691b      	ldr	r3, [r3, #16]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d103      	bne.n	800f7cc <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	4a1f      	ldr	r2, [pc, #124]	; (800f844 <UART_Start_Receive_IT+0x16c>)
 800f7c8:	671a      	str	r2, [r3, #112]	; 0x70
 800f7ca:	e002      	b.n	800f7d2 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	4a1e      	ldr	r2, [pc, #120]	; (800f848 <UART_Start_Receive_IT+0x170>)
 800f7d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f7e8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	689a      	ldr	r2, [r3, #8]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f7f8:	609a      	str	r2, [r3, #8]
 800f7fa:	e01b      	b.n	800f834 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f804:	d107      	bne.n	800f816 <UART_Start_Receive_IT+0x13e>
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d103      	bne.n	800f816 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	4a0e      	ldr	r2, [pc, #56]	; (800f84c <UART_Start_Receive_IT+0x174>)
 800f812:	671a      	str	r2, [r3, #112]	; 0x70
 800f814:	e002      	b.n	800f81c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	4a0d      	ldr	r2, [pc, #52]	; (800f850 <UART_Start_Receive_IT+0x178>)
 800f81a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f832:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	3714      	adds	r7, #20
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	0800fccd 	.word	0x0800fccd
 800f848:	0800fac9 	.word	0x0800fac9
 800f84c:	0800f9f1 	.word	0x0800f9f1
 800f850:	0800f919 	.word	0x0800f919

0800f854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f86a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	6899      	ldr	r1, [r3, #8]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	4b0f      	ldr	r3, [pc, #60]	; (800f8b4 <UART_EndRxTransfer+0x60>)
 800f878:	400b      	ands	r3, r1
 800f87a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f880:	2b01      	cmp	r3, #1
 800f882:	d107      	bne.n	800f894 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f022 0210 	bic.w	r2, r2, #16
 800f892:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2220      	movs	r2, #32
 800f898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f8a8:	bf00      	nop
 800f8aa:	370c      	adds	r7, #12
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr
 800f8b4:	effffffe 	.word	0xeffffffe

0800f8b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f7ff f81a 	bl	800e910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8dc:	bf00      	nop
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f8fa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2220      	movs	r2, #32
 800f900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7fe fff6 	bl	800e8fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f926:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f92e:	2b22      	cmp	r3, #34	; 0x22
 800f930:	d152      	bne.n	800f9d8 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f938:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f93a:	89bb      	ldrh	r3, [r7, #12]
 800f93c:	b2d9      	uxtb	r1, r3
 800f93e:	89fb      	ldrh	r3, [r7, #14]
 800f940:	b2da      	uxtb	r2, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f946:	400a      	ands	r2, r1
 800f948:	b2d2      	uxtb	r2, r2
 800f94a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f950:	1c5a      	adds	r2, r3, #1
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	3b01      	subs	r3, #1
 800f960:	b29a      	uxth	r2, r3
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f96e:	b29b      	uxth	r3, r3
 800f970:	2b00      	cmp	r3, #0
 800f972:	d139      	bne.n	800f9e8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f982:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	689a      	ldr	r2, [r3, #8]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f022 0201 	bic.w	r2, r2, #1
 800f992:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2220      	movs	r2, #32
 800f998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9a6:	2b01      	cmp	r3, #1
 800f9a8:	d10f      	bne.n	800f9ca <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f022 0210 	bic.w	r2, r2, #16
 800f9b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7fe ffae 	bl	800e924 <HAL_UARTEx_RxEventCallback>
 800f9c8:	e002      	b.n	800f9d0 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f7f1 ffea 	bl	80019a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f9d6:	e007      	b.n	800f9e8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	699a      	ldr	r2, [r3, #24]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f042 0208 	orr.w	r2, r2, #8
 800f9e6:	619a      	str	r2, [r3, #24]
}
 800f9e8:	bf00      	nop
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9fe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa06:	2b22      	cmp	r3, #34	; 0x22
 800fa08:	d152      	bne.n	800fab0 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa10:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa16:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800fa18:	89ba      	ldrh	r2, [r7, #12]
 800fa1a:	89fb      	ldrh	r3, [r7, #14]
 800fa1c:	4013      	ands	r3, r2
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa28:	1c9a      	adds	r2, r3, #2
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	3b01      	subs	r3, #1
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d139      	bne.n	800fac0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fa5a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	689a      	ldr	r2, [r3, #8]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f022 0201 	bic.w	r2, r2, #1
 800fa6a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2220      	movs	r2, #32
 800fa70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2200      	movs	r2, #0
 800fa78:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa7e:	2b01      	cmp	r3, #1
 800fa80:	d10f      	bne.n	800faa2 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f022 0210 	bic.w	r2, r2, #16
 800fa90:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa98:	4619      	mov	r1, r3
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f7fe ff42 	bl	800e924 <HAL_UARTEx_RxEventCallback>
 800faa0:	e002      	b.n	800faa8 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f7f1 ff7e 	bl	80019a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800faae:	e007      	b.n	800fac0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	699a      	ldr	r2, [r3, #24]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	f042 0208 	orr.w	r2, r2, #8
 800fabe:	619a      	str	r2, [r3, #24]
}
 800fac0:	bf00      	nop
 800fac2:	3710      	adds	r7, #16
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b088      	sub	sp, #32
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fad6:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	69db      	ldr	r3, [r3, #28]
 800fade:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800faf6:	2b22      	cmp	r3, #34	; 0x22
 800faf8:	f040 80d8 	bne.w	800fcac <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb02:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fb04:	e0a8      	b.n	800fc58 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb0c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fb0e:	89bb      	ldrh	r3, [r7, #12]
 800fb10:	b2d9      	uxtb	r1, r3
 800fb12:	8b7b      	ldrh	r3, [r7, #26]
 800fb14:	b2da      	uxtb	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb1a:	400a      	ands	r2, r1
 800fb1c:	b2d2      	uxtb	r2, r2
 800fb1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb24:	1c5a      	adds	r2, r3, #1
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	3b01      	subs	r3, #1
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	69db      	ldr	r3, [r3, #28]
 800fb42:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	f003 0307 	and.w	r3, r3, #7
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d04d      	beq.n	800fbea <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	f003 0301 	and.w	r3, r3, #1
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d010      	beq.n	800fb7a <UART_RxISR_8BIT_FIFOEN+0xb2>
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00b      	beq.n	800fb7a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2201      	movs	r2, #1
 800fb68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb70:	f043 0201 	orr.w	r2, r3, #1
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	f003 0302 	and.w	r3, r3, #2
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d010      	beq.n	800fba6 <UART_RxISR_8BIT_FIFOEN+0xde>
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	f003 0301 	and.w	r3, r3, #1
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00b      	beq.n	800fba6 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	2202      	movs	r2, #2
 800fb94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb9c:	f043 0204 	orr.w	r2, r3, #4
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fba6:	69fb      	ldr	r3, [r7, #28]
 800fba8:	f003 0304 	and.w	r3, r3, #4
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d010      	beq.n	800fbd2 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	f003 0301 	and.w	r3, r3, #1
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00b      	beq.n	800fbd2 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2204      	movs	r2, #4
 800fbc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbc8:	f043 0202 	orr.w	r2, r3, #2
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d006      	beq.n	800fbea <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7fe fe97 	bl	800e910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d130      	bne.n	800fc58 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	681a      	ldr	r2, [r3, #0]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fc04:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	6899      	ldr	r1, [r3, #8]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	4b2c      	ldr	r3, [pc, #176]	; (800fcc4 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800fc12:	400b      	ands	r3, r1
 800fc14:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2220      	movs	r2, #32
 800fc1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2200      	movs	r2, #0
 800fc22:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d10f      	bne.n	800fc4c <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f022 0210 	bic.w	r2, r2, #16
 800fc3a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc42:	4619      	mov	r1, r3
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7fe fe6d 	bl	800e924 <HAL_UARTEx_RxEventCallback>
 800fc4a:	e002      	b.n	800fc52 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f7f1 fea9 	bl	80019a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fc58:	89fb      	ldrh	r3, [r7, #14]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d005      	beq.n	800fc6a <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	f003 0320 	and.w	r3, r3, #32
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f47f af4e 	bne.w	800fb06 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc70:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fc72:	897b      	ldrh	r3, [r7, #10]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d021      	beq.n	800fcbc <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc7e:	897a      	ldrh	r2, [r7, #10]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d21b      	bcs.n	800fcbc <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	689a      	ldr	r2, [r3, #8]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800fc92:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4a0c      	ldr	r2, [pc, #48]	; (800fcc8 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800fc98:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f042 0220 	orr.w	r2, r2, #32
 800fca8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fcaa:	e007      	b.n	800fcbc <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	699a      	ldr	r2, [r3, #24]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f042 0208 	orr.w	r2, r2, #8
 800fcba:	619a      	str	r2, [r3, #24]
}
 800fcbc:	bf00      	nop
 800fcbe:	3720      	adds	r7, #32
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	effffffe 	.word	0xeffffffe
 800fcc8:	0800f919 	.word	0x0800f919

0800fccc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b08a      	sub	sp, #40	; 0x28
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcda:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	69db      	ldr	r3, [r3, #28]
 800fce2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcfa:	2b22      	cmp	r3, #34	; 0x22
 800fcfc:	f040 80d8 	bne.w	800feb0 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd06:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fd08:	e0a8      	b.n	800fe5c <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd10:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd16:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800fd18:	8aba      	ldrh	r2, [r7, #20]
 800fd1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd1c:	4013      	ands	r3, r2
 800fd1e:	b29a      	uxth	r2, r3
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd28:	1c9a      	adds	r2, r3, #2
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	3b01      	subs	r3, #1
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	69db      	ldr	r3, [r3, #28]
 800fd46:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4a:	f003 0307 	and.w	r3, r3, #7
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d04d      	beq.n	800fdee <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd54:	f003 0301 	and.w	r3, r3, #1
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d010      	beq.n	800fd7e <UART_RxISR_16BIT_FIFOEN+0xb2>
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d00b      	beq.n	800fd7e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd74:	f043 0201 	orr.w	r2, r3, #1
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd80:	f003 0302 	and.w	r3, r3, #2
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d010      	beq.n	800fdaa <UART_RxISR_16BIT_FIFOEN+0xde>
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	f003 0301 	and.w	r3, r3, #1
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d00b      	beq.n	800fdaa <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2202      	movs	r2, #2
 800fd98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fda0:	f043 0204 	orr.w	r2, r3, #4
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	f003 0304 	and.w	r3, r3, #4
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d010      	beq.n	800fdd6 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	f003 0301 	and.w	r3, r3, #1
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00b      	beq.n	800fdd6 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2204      	movs	r2, #4
 800fdc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdcc:	f043 0202 	orr.w	r2, r3, #2
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d006      	beq.n	800fdee <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f7fe fd95 	bl	800e910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d130      	bne.n	800fe5c <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fe08:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	6899      	ldr	r1, [r3, #8]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	4b2c      	ldr	r3, [pc, #176]	; (800fec8 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800fe16:	400b      	ands	r3, r1
 800fe18:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2220      	movs	r2, #32
 800fe1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d10f      	bne.n	800fe50 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f022 0210 	bic.w	r2, r2, #16
 800fe3e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe46:	4619      	mov	r1, r3
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7fe fd6b 	bl	800e924 <HAL_UARTEx_RxEventCallback>
 800fe4e:	e002      	b.n	800fe56 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7f1 fda7 	bl	80019a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fe5c:	8afb      	ldrh	r3, [r7, #22]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d005      	beq.n	800fe6e <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800fe62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe64:	f003 0320 	and.w	r3, r3, #32
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f47f af4e 	bne.w	800fd0a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe74:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fe76:	89fb      	ldrh	r3, [r7, #14]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d021      	beq.n	800fec0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fe82:	89fa      	ldrh	r2, [r7, #14]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d21b      	bcs.n	800fec0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	689a      	ldr	r2, [r3, #8]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800fe96:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	4a0c      	ldr	r2, [pc, #48]	; (800fecc <UART_RxISR_16BIT_FIFOEN+0x200>)
 800fe9c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f042 0220 	orr.w	r2, r2, #32
 800feac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800feae:	e007      	b.n	800fec0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	699a      	ldr	r2, [r3, #24]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f042 0208 	orr.w	r2, r2, #8
 800febe:	619a      	str	r2, [r3, #24]
}
 800fec0:	bf00      	nop
 800fec2:	3728      	adds	r7, #40	; 0x28
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	effffffe 	.word	0xeffffffe
 800fecc:	0800f9f1 	.word	0x0800f9f1

0800fed0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fed8:	bf00      	nop
 800feda:	370c      	adds	r7, #12
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800feec:	bf00      	nop
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr

0800fef8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ff00:	bf00      	nop
 800ff02:	370c      	adds	r7, #12
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b085      	sub	sp, #20
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d101      	bne.n	800ff22 <HAL_UARTEx_DisableFifoMode+0x16>
 800ff1e:	2302      	movs	r3, #2
 800ff20:	e027      	b.n	800ff72 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2201      	movs	r2, #1
 800ff26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2224      	movs	r2, #36	; 0x24
 800ff2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	f022 0201 	bic.w	r2, r2, #1
 800ff48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2220      	movs	r2, #32
 800ff64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff70:	2300      	movs	r3, #0
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3714      	adds	r7, #20
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr

0800ff7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b084      	sub	sp, #16
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d101      	bne.n	800ff96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff92:	2302      	movs	r3, #2
 800ff94:	e02d      	b.n	800fff2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2201      	movs	r2, #1
 800ff9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2224      	movs	r2, #36	; 0x24
 800ffa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f022 0201 	bic.w	r2, r2, #1
 800ffbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	683a      	ldr	r2, [r7, #0]
 800ffce:	430a      	orrs	r2, r1
 800ffd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 f850 	bl	8010078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2220      	movs	r2, #32
 800ffe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2200      	movs	r2, #0
 800ffec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fff0:	2300      	movs	r3, #0
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b084      	sub	sp, #16
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
 8010002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801000a:	2b01      	cmp	r3, #1
 801000c:	d101      	bne.n	8010012 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801000e:	2302      	movs	r3, #2
 8010010:	e02d      	b.n	801006e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2201      	movs	r2, #1
 8010016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2224      	movs	r2, #36	; 0x24
 801001e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f022 0201 	bic.w	r2, r2, #1
 8010038:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	689b      	ldr	r3, [r3, #8]
 8010040:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	683a      	ldr	r2, [r7, #0]
 801004a:	430a      	orrs	r2, r1
 801004c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 f812 	bl	8010078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2220      	movs	r2, #32
 8010060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
	...

08010078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010078:	b480      	push	{r7}
 801007a:	b085      	sub	sp, #20
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010084:	2b00      	cmp	r3, #0
 8010086:	d108      	bne.n	801009a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2201      	movs	r2, #1
 801008c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2201      	movs	r2, #1
 8010094:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010098:	e031      	b.n	80100fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801009a:	2310      	movs	r3, #16
 801009c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801009e:	2310      	movs	r3, #16
 80100a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	689b      	ldr	r3, [r3, #8]
 80100a8:	0e5b      	lsrs	r3, r3, #25
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	f003 0307 	and.w	r3, r3, #7
 80100b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	689b      	ldr	r3, [r3, #8]
 80100b8:	0f5b      	lsrs	r3, r3, #29
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	f003 0307 	and.w	r3, r3, #7
 80100c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100c2:	7bbb      	ldrb	r3, [r7, #14]
 80100c4:	7b3a      	ldrb	r2, [r7, #12]
 80100c6:	4911      	ldr	r1, [pc, #68]	; (801010c <UARTEx_SetNbDataToProcess+0x94>)
 80100c8:	5c8a      	ldrb	r2, [r1, r2]
 80100ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80100ce:	7b3a      	ldrb	r2, [r7, #12]
 80100d0:	490f      	ldr	r1, [pc, #60]	; (8010110 <UARTEx_SetNbDataToProcess+0x98>)
 80100d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80100d8:	b29a      	uxth	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100e0:	7bfb      	ldrb	r3, [r7, #15]
 80100e2:	7b7a      	ldrb	r2, [r7, #13]
 80100e4:	4909      	ldr	r1, [pc, #36]	; (801010c <UARTEx_SetNbDataToProcess+0x94>)
 80100e6:	5c8a      	ldrb	r2, [r1, r2]
 80100e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80100ec:	7b7a      	ldrb	r2, [r7, #13]
 80100ee:	4908      	ldr	r1, [pc, #32]	; (8010110 <UARTEx_SetNbDataToProcess+0x98>)
 80100f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80100fe:	bf00      	nop
 8010100:	3714      	adds	r7, #20
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr
 801010a:	bf00      	nop
 801010c:	080236b0 	.word	0x080236b0
 8010110:	080236b8 	.word	0x080236b8

08010114 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010114:	b084      	sub	sp, #16
 8010116:	b580      	push	{r7, lr}
 8010118:	b084      	sub	sp, #16
 801011a:	af00      	add	r7, sp, #0
 801011c:	6078      	str	r0, [r7, #4]
 801011e:	f107 001c 	add.w	r0, r7, #28
 8010122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010128:	2b01      	cmp	r3, #1
 801012a:	d120      	bne.n	801016e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010130:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	68da      	ldr	r2, [r3, #12]
 801013c:	4b2a      	ldr	r3, [pc, #168]	; (80101e8 <USB_CoreInit+0xd4>)
 801013e:	4013      	ands	r3, r2
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010152:	2b01      	cmp	r3, #1
 8010154:	d105      	bne.n	8010162 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f001 fb14 	bl	8011790 <USB_CoreReset>
 8010168:	4603      	mov	r3, r0
 801016a:	73fb      	strb	r3, [r7, #15]
 801016c:	e01a      	b.n	80101a4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f001 fb08 	bl	8011790 <USB_CoreReset>
 8010180:	4603      	mov	r3, r0
 8010182:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010186:	2b00      	cmp	r3, #0
 8010188:	d106      	bne.n	8010198 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801018e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	639a      	str	r2, [r3, #56]	; 0x38
 8010196:	e005      	b.n	80101a4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801019c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80101a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d116      	bne.n	80101d8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101ae:	b29a      	uxth	r2, r3
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80101b8:	4b0c      	ldr	r3, [pc, #48]	; (80101ec <USB_CoreInit+0xd8>)
 80101ba:	4313      	orrs	r3, r2
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	689b      	ldr	r3, [r3, #8]
 80101c4:	f043 0206 	orr.w	r2, r3, #6
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	f043 0220 	orr.w	r2, r3, #32
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80101d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3710      	adds	r7, #16
 80101de:	46bd      	mov	sp, r7
 80101e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80101e4:	b004      	add	sp, #16
 80101e6:	4770      	bx	lr
 80101e8:	ffbdffbf 	.word	0xffbdffbf
 80101ec:	03ee0000 	.word	0x03ee0000

080101f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b087      	sub	sp, #28
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	4613      	mov	r3, r2
 80101fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80101fe:	79fb      	ldrb	r3, [r7, #7]
 8010200:	2b02      	cmp	r3, #2
 8010202:	d165      	bne.n	80102d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	4a41      	ldr	r2, [pc, #260]	; (801030c <USB_SetTurnaroundTime+0x11c>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d906      	bls.n	801021a <USB_SetTurnaroundTime+0x2a>
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	4a40      	ldr	r2, [pc, #256]	; (8010310 <USB_SetTurnaroundTime+0x120>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d202      	bcs.n	801021a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010214:	230f      	movs	r3, #15
 8010216:	617b      	str	r3, [r7, #20]
 8010218:	e062      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	4a3c      	ldr	r2, [pc, #240]	; (8010310 <USB_SetTurnaroundTime+0x120>)
 801021e:	4293      	cmp	r3, r2
 8010220:	d306      	bcc.n	8010230 <USB_SetTurnaroundTime+0x40>
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	4a3b      	ldr	r2, [pc, #236]	; (8010314 <USB_SetTurnaroundTime+0x124>)
 8010226:	4293      	cmp	r3, r2
 8010228:	d202      	bcs.n	8010230 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801022a:	230e      	movs	r3, #14
 801022c:	617b      	str	r3, [r7, #20]
 801022e:	e057      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	4a38      	ldr	r2, [pc, #224]	; (8010314 <USB_SetTurnaroundTime+0x124>)
 8010234:	4293      	cmp	r3, r2
 8010236:	d306      	bcc.n	8010246 <USB_SetTurnaroundTime+0x56>
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	4a37      	ldr	r2, [pc, #220]	; (8010318 <USB_SetTurnaroundTime+0x128>)
 801023c:	4293      	cmp	r3, r2
 801023e:	d202      	bcs.n	8010246 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010240:	230d      	movs	r3, #13
 8010242:	617b      	str	r3, [r7, #20]
 8010244:	e04c      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	4a33      	ldr	r2, [pc, #204]	; (8010318 <USB_SetTurnaroundTime+0x128>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d306      	bcc.n	801025c <USB_SetTurnaroundTime+0x6c>
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	4a32      	ldr	r2, [pc, #200]	; (801031c <USB_SetTurnaroundTime+0x12c>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d802      	bhi.n	801025c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010256:	230c      	movs	r3, #12
 8010258:	617b      	str	r3, [r7, #20]
 801025a:	e041      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	4a2f      	ldr	r2, [pc, #188]	; (801031c <USB_SetTurnaroundTime+0x12c>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d906      	bls.n	8010272 <USB_SetTurnaroundTime+0x82>
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	4a2e      	ldr	r2, [pc, #184]	; (8010320 <USB_SetTurnaroundTime+0x130>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d802      	bhi.n	8010272 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801026c:	230b      	movs	r3, #11
 801026e:	617b      	str	r3, [r7, #20]
 8010270:	e036      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	4a2a      	ldr	r2, [pc, #168]	; (8010320 <USB_SetTurnaroundTime+0x130>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d906      	bls.n	8010288 <USB_SetTurnaroundTime+0x98>
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	4a29      	ldr	r2, [pc, #164]	; (8010324 <USB_SetTurnaroundTime+0x134>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d802      	bhi.n	8010288 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010282:	230a      	movs	r3, #10
 8010284:	617b      	str	r3, [r7, #20]
 8010286:	e02b      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	4a26      	ldr	r2, [pc, #152]	; (8010324 <USB_SetTurnaroundTime+0x134>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d906      	bls.n	801029e <USB_SetTurnaroundTime+0xae>
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	4a25      	ldr	r2, [pc, #148]	; (8010328 <USB_SetTurnaroundTime+0x138>)
 8010294:	4293      	cmp	r3, r2
 8010296:	d202      	bcs.n	801029e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010298:	2309      	movs	r3, #9
 801029a:	617b      	str	r3, [r7, #20]
 801029c:	e020      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	4a21      	ldr	r2, [pc, #132]	; (8010328 <USB_SetTurnaroundTime+0x138>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d306      	bcc.n	80102b4 <USB_SetTurnaroundTime+0xc4>
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	4a20      	ldr	r2, [pc, #128]	; (801032c <USB_SetTurnaroundTime+0x13c>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d802      	bhi.n	80102b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80102ae:	2308      	movs	r3, #8
 80102b0:	617b      	str	r3, [r7, #20]
 80102b2:	e015      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	4a1d      	ldr	r2, [pc, #116]	; (801032c <USB_SetTurnaroundTime+0x13c>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d906      	bls.n	80102ca <USB_SetTurnaroundTime+0xda>
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	4a1c      	ldr	r2, [pc, #112]	; (8010330 <USB_SetTurnaroundTime+0x140>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d202      	bcs.n	80102ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80102c4:	2307      	movs	r3, #7
 80102c6:	617b      	str	r3, [r7, #20]
 80102c8:	e00a      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80102ca:	2306      	movs	r3, #6
 80102cc:	617b      	str	r3, [r7, #20]
 80102ce:	e007      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80102d0:	79fb      	ldrb	r3, [r7, #7]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d102      	bne.n	80102dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80102d6:	2309      	movs	r3, #9
 80102d8:	617b      	str	r3, [r7, #20]
 80102da:	e001      	b.n	80102e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80102dc:	2309      	movs	r3, #9
 80102de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	68da      	ldr	r2, [r3, #12]
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	029b      	lsls	r3, r3, #10
 80102f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80102f8:	431a      	orrs	r2, r3
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80102fe:	2300      	movs	r3, #0
}
 8010300:	4618      	mov	r0, r3
 8010302:	371c      	adds	r7, #28
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	00d8acbf 	.word	0x00d8acbf
 8010310:	00e4e1c0 	.word	0x00e4e1c0
 8010314:	00f42400 	.word	0x00f42400
 8010318:	01067380 	.word	0x01067380
 801031c:	011a499f 	.word	0x011a499f
 8010320:	01312cff 	.word	0x01312cff
 8010324:	014ca43f 	.word	0x014ca43f
 8010328:	016e3600 	.word	0x016e3600
 801032c:	01a6ab1f 	.word	0x01a6ab1f
 8010330:	01e84800 	.word	0x01e84800

08010334 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	f043 0201 	orr.w	r2, r3, #1
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010348:	2300      	movs	r3, #0
}
 801034a:	4618      	mov	r0, r3
 801034c:	370c      	adds	r7, #12
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr

08010356 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010356:	b480      	push	{r7}
 8010358:	b083      	sub	sp, #12
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	689b      	ldr	r3, [r3, #8]
 8010362:	f023 0201 	bic.w	r2, r3, #1
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801036a:	2300      	movs	r3, #0
}
 801036c:	4618      	mov	r0, r3
 801036e:	370c      	adds	r7, #12
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr

08010378 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	460b      	mov	r3, r1
 8010382:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010390:	78fb      	ldrb	r3, [r7, #3]
 8010392:	2b01      	cmp	r3, #1
 8010394:	d106      	bne.n	80103a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	68db      	ldr	r3, [r3, #12]
 801039a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	60da      	str	r2, [r3, #12]
 80103a2:	e00b      	b.n	80103bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80103a4:	78fb      	ldrb	r3, [r7, #3]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d106      	bne.n	80103b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	68db      	ldr	r3, [r3, #12]
 80103ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	60da      	str	r2, [r3, #12]
 80103b6:	e001      	b.n	80103bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80103b8:	2301      	movs	r3, #1
 80103ba:	e003      	b.n	80103c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80103bc:	2032      	movs	r0, #50	; 0x32
 80103be:	f7f4 fd3b 	bl	8004e38 <HAL_Delay>

  return HAL_OK;
 80103c2:	2300      	movs	r3, #0
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80103cc:	b084      	sub	sp, #16
 80103ce:	b580      	push	{r7, lr}
 80103d0:	b086      	sub	sp, #24
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
 80103d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80103da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80103de:	2300      	movs	r3, #0
 80103e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80103e6:	2300      	movs	r3, #0
 80103e8:	613b      	str	r3, [r7, #16]
 80103ea:	e009      	b.n	8010400 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	3340      	adds	r3, #64	; 0x40
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	4413      	add	r3, r2
 80103f6:	2200      	movs	r2, #0
 80103f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	3301      	adds	r3, #1
 80103fe:	613b      	str	r3, [r7, #16]
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	2b0e      	cmp	r3, #14
 8010404:	d9f2      	bls.n	80103ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010408:	2b00      	cmp	r3, #0
 801040a:	d11c      	bne.n	8010446 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	68fa      	ldr	r2, [r7, #12]
 8010416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801041a:	f043 0302 	orr.w	r3, r3, #2
 801041e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010424:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	601a      	str	r2, [r3, #0]
 8010444:	e005      	b.n	8010452 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801044a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010458:	461a      	mov	r2, r3
 801045a:	2300      	movs	r3, #0
 801045c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010464:	4619      	mov	r1, r3
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801046c:	461a      	mov	r2, r3
 801046e:	680b      	ldr	r3, [r1, #0]
 8010470:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010474:	2b01      	cmp	r3, #1
 8010476:	d10c      	bne.n	8010492 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047a:	2b00      	cmp	r3, #0
 801047c:	d104      	bne.n	8010488 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801047e:	2100      	movs	r1, #0
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 f949 	bl	8010718 <USB_SetDevSpeed>
 8010486:	e008      	b.n	801049a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010488:	2101      	movs	r1, #1
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f000 f944 	bl	8010718 <USB_SetDevSpeed>
 8010490:	e003      	b.n	801049a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010492:	2103      	movs	r1, #3
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f000 f93f 	bl	8010718 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801049a:	2110      	movs	r1, #16
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 f8f3 	bl	8010688 <USB_FlushTxFifo>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d001      	beq.n	80104ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80104a8:	2301      	movs	r3, #1
 80104aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 f911 	bl	80106d4 <USB_FlushRxFifo>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d001      	beq.n	80104bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80104b8:	2301      	movs	r3, #1
 80104ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104c2:	461a      	mov	r2, r3
 80104c4:	2300      	movs	r3, #0
 80104c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104ce:	461a      	mov	r2, r3
 80104d0:	2300      	movs	r3, #0
 80104d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104da:	461a      	mov	r2, r3
 80104dc:	2300      	movs	r3, #0
 80104de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104e0:	2300      	movs	r3, #0
 80104e2:	613b      	str	r3, [r7, #16]
 80104e4:	e043      	b.n	801056e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	015a      	lsls	r2, r3, #5
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	4413      	add	r3, r2
 80104ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104fc:	d118      	bne.n	8010530 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d10a      	bne.n	801051a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	015a      	lsls	r2, r3, #5
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	4413      	add	r3, r2
 801050c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010510:	461a      	mov	r2, r3
 8010512:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010516:	6013      	str	r3, [r2, #0]
 8010518:	e013      	b.n	8010542 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	015a      	lsls	r2, r3, #5
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	4413      	add	r3, r2
 8010522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010526:	461a      	mov	r2, r3
 8010528:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801052c:	6013      	str	r3, [r2, #0]
 801052e:	e008      	b.n	8010542 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	015a      	lsls	r2, r3, #5
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	4413      	add	r3, r2
 8010538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801053c:	461a      	mov	r2, r3
 801053e:	2300      	movs	r3, #0
 8010540:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	015a      	lsls	r2, r3, #5
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	4413      	add	r3, r2
 801054a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801054e:	461a      	mov	r2, r3
 8010550:	2300      	movs	r3, #0
 8010552:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	015a      	lsls	r2, r3, #5
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	4413      	add	r3, r2
 801055c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010560:	461a      	mov	r2, r3
 8010562:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010566:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	3301      	adds	r3, #1
 801056c:	613b      	str	r3, [r7, #16]
 801056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010570:	693a      	ldr	r2, [r7, #16]
 8010572:	429a      	cmp	r2, r3
 8010574:	d3b7      	bcc.n	80104e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010576:	2300      	movs	r3, #0
 8010578:	613b      	str	r3, [r7, #16]
 801057a:	e043      	b.n	8010604 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	015a      	lsls	r2, r3, #5
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	4413      	add	r3, r2
 8010584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801058e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010592:	d118      	bne.n	80105c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d10a      	bne.n	80105b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	015a      	lsls	r2, r3, #5
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	4413      	add	r3, r2
 80105a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105a6:	461a      	mov	r2, r3
 80105a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80105ac:	6013      	str	r3, [r2, #0]
 80105ae:	e013      	b.n	80105d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	015a      	lsls	r2, r3, #5
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	4413      	add	r3, r2
 80105b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105bc:	461a      	mov	r2, r3
 80105be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80105c2:	6013      	str	r3, [r2, #0]
 80105c4:	e008      	b.n	80105d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	015a      	lsls	r2, r3, #5
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	4413      	add	r3, r2
 80105ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105d2:	461a      	mov	r2, r3
 80105d4:	2300      	movs	r3, #0
 80105d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	015a      	lsls	r2, r3, #5
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	4413      	add	r3, r2
 80105e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105e4:	461a      	mov	r2, r3
 80105e6:	2300      	movs	r3, #0
 80105e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	015a      	lsls	r2, r3, #5
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	4413      	add	r3, r2
 80105f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105f6:	461a      	mov	r2, r3
 80105f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80105fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	3301      	adds	r3, #1
 8010602:	613b      	str	r3, [r7, #16]
 8010604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010606:	693a      	ldr	r2, [r7, #16]
 8010608:	429a      	cmp	r2, r3
 801060a:	d3b7      	bcc.n	801057c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010612:	691b      	ldr	r3, [r3, #16]
 8010614:	68fa      	ldr	r2, [r7, #12]
 8010616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801061a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801061e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801062c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010630:	2b00      	cmp	r3, #0
 8010632:	d105      	bne.n	8010640 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	699b      	ldr	r3, [r3, #24]
 8010638:	f043 0210 	orr.w	r2, r3, #16
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	699a      	ldr	r2, [r3, #24]
 8010644:	4b0e      	ldr	r3, [pc, #56]	; (8010680 <USB_DevInit+0x2b4>)
 8010646:	4313      	orrs	r3, r2
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801064c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801064e:	2b00      	cmp	r3, #0
 8010650:	d005      	beq.n	801065e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	699b      	ldr	r3, [r3, #24]
 8010656:	f043 0208 	orr.w	r2, r3, #8
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801065e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010660:	2b01      	cmp	r3, #1
 8010662:	d105      	bne.n	8010670 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	699a      	ldr	r2, [r3, #24]
 8010668:	4b06      	ldr	r3, [pc, #24]	; (8010684 <USB_DevInit+0x2b8>)
 801066a:	4313      	orrs	r3, r2
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010670:	7dfb      	ldrb	r3, [r7, #23]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3718      	adds	r7, #24
 8010676:	46bd      	mov	sp, r7
 8010678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801067c:	b004      	add	sp, #16
 801067e:	4770      	bx	lr
 8010680:	803c3800 	.word	0x803c3800
 8010684:	40000004 	.word	0x40000004

08010688 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010688:	b480      	push	{r7}
 801068a:	b085      	sub	sp, #20
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010692:	2300      	movs	r3, #0
 8010694:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	019b      	lsls	r3, r3, #6
 801069a:	f043 0220 	orr.w	r2, r3, #32
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	3301      	adds	r3, #1
 80106a6:	60fb      	str	r3, [r7, #12]
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	4a09      	ldr	r2, [pc, #36]	; (80106d0 <USB_FlushTxFifo+0x48>)
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d901      	bls.n	80106b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80106b0:	2303      	movs	r3, #3
 80106b2:	e006      	b.n	80106c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	691b      	ldr	r3, [r3, #16]
 80106b8:	f003 0320 	and.w	r3, r3, #32
 80106bc:	2b20      	cmp	r3, #32
 80106be:	d0f0      	beq.n	80106a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3714      	adds	r7, #20
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr
 80106ce:	bf00      	nop
 80106d0:	00030d40 	.word	0x00030d40

080106d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b085      	sub	sp, #20
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80106dc:	2300      	movs	r3, #0
 80106de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2210      	movs	r2, #16
 80106e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	3301      	adds	r3, #1
 80106ea:	60fb      	str	r3, [r7, #12]
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	4a09      	ldr	r2, [pc, #36]	; (8010714 <USB_FlushRxFifo+0x40>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d901      	bls.n	80106f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80106f4:	2303      	movs	r3, #3
 80106f6:	e006      	b.n	8010706 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	691b      	ldr	r3, [r3, #16]
 80106fc:	f003 0310 	and.w	r3, r3, #16
 8010700:	2b10      	cmp	r3, #16
 8010702:	d0f0      	beq.n	80106e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010704:	2300      	movs	r3, #0
}
 8010706:	4618      	mov	r0, r3
 8010708:	3714      	adds	r7, #20
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop
 8010714:	00030d40 	.word	0x00030d40

08010718 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010718:	b480      	push	{r7}
 801071a:	b085      	sub	sp, #20
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	460b      	mov	r3, r1
 8010722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	78fb      	ldrb	r3, [r7, #3]
 8010732:	68f9      	ldr	r1, [r7, #12]
 8010734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010738:	4313      	orrs	r3, r2
 801073a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	3714      	adds	r7, #20
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr

0801074a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801074a:	b480      	push	{r7}
 801074c:	b087      	sub	sp, #28
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801075c:	689b      	ldr	r3, [r3, #8]
 801075e:	f003 0306 	and.w	r3, r3, #6
 8010762:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d102      	bne.n	8010770 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801076a:	2300      	movs	r3, #0
 801076c:	75fb      	strb	r3, [r7, #23]
 801076e:	e00a      	b.n	8010786 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2b02      	cmp	r3, #2
 8010774:	d002      	beq.n	801077c <USB_GetDevSpeed+0x32>
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2b06      	cmp	r3, #6
 801077a:	d102      	bne.n	8010782 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801077c:	2302      	movs	r3, #2
 801077e:	75fb      	strb	r3, [r7, #23]
 8010780:	e001      	b.n	8010786 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010782:	230f      	movs	r3, #15
 8010784:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010786:	7dfb      	ldrb	r3, [r7, #23]
}
 8010788:	4618      	mov	r0, r3
 801078a:	371c      	adds	r7, #28
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010794:	b480      	push	{r7}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	785b      	ldrb	r3, [r3, #1]
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d139      	bne.n	8010824 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107b6:	69da      	ldr	r2, [r3, #28]
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	f003 030f 	and.w	r3, r3, #15
 80107c0:	2101      	movs	r1, #1
 80107c2:	fa01 f303 	lsl.w	r3, r1, r3
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	68f9      	ldr	r1, [r7, #12]
 80107ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80107ce:	4313      	orrs	r3, r2
 80107d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	015a      	lsls	r2, r3, #5
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	4413      	add	r3, r2
 80107da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d153      	bne.n	8010890 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	015a      	lsls	r2, r3, #5
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	4413      	add	r3, r2
 80107f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	689b      	ldr	r3, [r3, #8]
 80107fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	78db      	ldrb	r3, [r3, #3]
 8010802:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010804:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	059b      	lsls	r3, r3, #22
 801080a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801080c:	431a      	orrs	r2, r3
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	0159      	lsls	r1, r3, #5
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	440b      	add	r3, r1
 8010816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801081a:	4619      	mov	r1, r3
 801081c:	4b20      	ldr	r3, [pc, #128]	; (80108a0 <USB_ActivateEndpoint+0x10c>)
 801081e:	4313      	orrs	r3, r2
 8010820:	600b      	str	r3, [r1, #0]
 8010822:	e035      	b.n	8010890 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801082a:	69da      	ldr	r2, [r3, #28]
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	f003 030f 	and.w	r3, r3, #15
 8010834:	2101      	movs	r1, #1
 8010836:	fa01 f303 	lsl.w	r3, r1, r3
 801083a:	041b      	lsls	r3, r3, #16
 801083c:	68f9      	ldr	r1, [r7, #12]
 801083e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010842:	4313      	orrs	r3, r2
 8010844:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	015a      	lsls	r2, r3, #5
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	4413      	add	r3, r2
 801084e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010858:	2b00      	cmp	r3, #0
 801085a:	d119      	bne.n	8010890 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	015a      	lsls	r2, r3, #5
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	4413      	add	r3, r2
 8010864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	689b      	ldr	r3, [r3, #8]
 801086e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	78db      	ldrb	r3, [r3, #3]
 8010876:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010878:	430b      	orrs	r3, r1
 801087a:	431a      	orrs	r2, r3
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	0159      	lsls	r1, r3, #5
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	440b      	add	r3, r1
 8010884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010888:	4619      	mov	r1, r3
 801088a:	4b05      	ldr	r3, [pc, #20]	; (80108a0 <USB_ActivateEndpoint+0x10c>)
 801088c:	4313      	orrs	r3, r2
 801088e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010890:	2300      	movs	r3, #0
}
 8010892:	4618      	mov	r0, r3
 8010894:	3714      	adds	r7, #20
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop
 80108a0:	10008000 	.word	0x10008000

080108a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b085      	sub	sp, #20
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	785b      	ldrb	r3, [r3, #1]
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d161      	bne.n	8010984 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	015a      	lsls	r2, r3, #5
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	4413      	add	r3, r2
 80108c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80108d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80108d6:	d11f      	bne.n	8010918 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	015a      	lsls	r2, r3, #5
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	4413      	add	r3, r2
 80108e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	68ba      	ldr	r2, [r7, #8]
 80108e8:	0151      	lsls	r1, r2, #5
 80108ea:	68fa      	ldr	r2, [r7, #12]
 80108ec:	440a      	add	r2, r1
 80108ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80108f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	015a      	lsls	r2, r3, #5
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	4413      	add	r3, r2
 8010900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	68ba      	ldr	r2, [r7, #8]
 8010908:	0151      	lsls	r1, r2, #5
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	440a      	add	r2, r1
 801090e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010916:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801091e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	f003 030f 	and.w	r3, r3, #15
 8010928:	2101      	movs	r1, #1
 801092a:	fa01 f303 	lsl.w	r3, r1, r3
 801092e:	b29b      	uxth	r3, r3
 8010930:	43db      	mvns	r3, r3
 8010932:	68f9      	ldr	r1, [r7, #12]
 8010934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010938:	4013      	ands	r3, r2
 801093a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010942:	69da      	ldr	r2, [r3, #28]
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	f003 030f 	and.w	r3, r3, #15
 801094c:	2101      	movs	r1, #1
 801094e:	fa01 f303 	lsl.w	r3, r1, r3
 8010952:	b29b      	uxth	r3, r3
 8010954:	43db      	mvns	r3, r3
 8010956:	68f9      	ldr	r1, [r7, #12]
 8010958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801095c:	4013      	ands	r3, r2
 801095e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	015a      	lsls	r2, r3, #5
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	4413      	add	r3, r2
 8010968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	0159      	lsls	r1, r3, #5
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	440b      	add	r3, r1
 8010976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801097a:	4619      	mov	r1, r3
 801097c:	4b35      	ldr	r3, [pc, #212]	; (8010a54 <USB_DeactivateEndpoint+0x1b0>)
 801097e:	4013      	ands	r3, r2
 8010980:	600b      	str	r3, [r1, #0]
 8010982:	e060      	b.n	8010a46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	015a      	lsls	r2, r3, #5
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	4413      	add	r3, r2
 801098c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801099a:	d11f      	bne.n	80109dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	015a      	lsls	r2, r3, #5
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	4413      	add	r3, r2
 80109a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	68ba      	ldr	r2, [r7, #8]
 80109ac:	0151      	lsls	r1, r2, #5
 80109ae:	68fa      	ldr	r2, [r7, #12]
 80109b0:	440a      	add	r2, r1
 80109b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80109ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	015a      	lsls	r2, r3, #5
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	4413      	add	r3, r2
 80109c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	68ba      	ldr	r2, [r7, #8]
 80109cc:	0151      	lsls	r1, r2, #5
 80109ce:	68fa      	ldr	r2, [r7, #12]
 80109d0:	440a      	add	r2, r1
 80109d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80109da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	781b      	ldrb	r3, [r3, #0]
 80109e8:	f003 030f 	and.w	r3, r3, #15
 80109ec:	2101      	movs	r1, #1
 80109ee:	fa01 f303 	lsl.w	r3, r1, r3
 80109f2:	041b      	lsls	r3, r3, #16
 80109f4:	43db      	mvns	r3, r3
 80109f6:	68f9      	ldr	r1, [r7, #12]
 80109f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80109fc:	4013      	ands	r3, r2
 80109fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a06:	69da      	ldr	r2, [r3, #28]
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	f003 030f 	and.w	r3, r3, #15
 8010a10:	2101      	movs	r1, #1
 8010a12:	fa01 f303 	lsl.w	r3, r1, r3
 8010a16:	041b      	lsls	r3, r3, #16
 8010a18:	43db      	mvns	r3, r3
 8010a1a:	68f9      	ldr	r1, [r7, #12]
 8010a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010a20:	4013      	ands	r3, r2
 8010a22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	015a      	lsls	r2, r3, #5
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	4413      	add	r3, r2
 8010a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a30:	681a      	ldr	r2, [r3, #0]
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	0159      	lsls	r1, r3, #5
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	440b      	add	r3, r1
 8010a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a3e:	4619      	mov	r1, r3
 8010a40:	4b05      	ldr	r3, [pc, #20]	; (8010a58 <USB_DeactivateEndpoint+0x1b4>)
 8010a42:	4013      	ands	r3, r2
 8010a44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010a46:	2300      	movs	r3, #0
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3714      	adds	r7, #20
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr
 8010a54:	ec337800 	.word	0xec337800
 8010a58:	eff37800 	.word	0xeff37800

08010a5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b08a      	sub	sp, #40	; 0x28
 8010a60:	af02      	add	r7, sp, #8
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	4613      	mov	r3, r2
 8010a68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	785b      	ldrb	r3, [r3, #1]
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	f040 8163 	bne.w	8010d44 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d132      	bne.n	8010aec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	015a      	lsls	r2, r3, #5
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a92:	691a      	ldr	r2, [r3, #16]
 8010a94:	69bb      	ldr	r3, [r7, #24]
 8010a96:	0159      	lsls	r1, r3, #5
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	440b      	add	r3, r1
 8010a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	4ba5      	ldr	r3, [pc, #660]	; (8010d38 <USB_EPStartXfer+0x2dc>)
 8010aa4:	4013      	ands	r3, r2
 8010aa6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010aa8:	69bb      	ldr	r3, [r7, #24]
 8010aaa:	015a      	lsls	r2, r3, #5
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	4413      	add	r3, r2
 8010ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ab4:	691b      	ldr	r3, [r3, #16]
 8010ab6:	69ba      	ldr	r2, [r7, #24]
 8010ab8:	0151      	lsls	r1, r2, #5
 8010aba:	69fa      	ldr	r2, [r7, #28]
 8010abc:	440a      	add	r2, r1
 8010abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ac2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010ac6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010ac8:	69bb      	ldr	r3, [r7, #24]
 8010aca:	015a      	lsls	r2, r3, #5
 8010acc:	69fb      	ldr	r3, [r7, #28]
 8010ace:	4413      	add	r3, r2
 8010ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ad4:	691a      	ldr	r2, [r3, #16]
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	0159      	lsls	r1, r3, #5
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	440b      	add	r3, r1
 8010ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	4b95      	ldr	r3, [pc, #596]	; (8010d3c <USB_EPStartXfer+0x2e0>)
 8010ae6:	4013      	ands	r3, r2
 8010ae8:	610b      	str	r3, [r1, #16]
 8010aea:	e074      	b.n	8010bd6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010aec:	69bb      	ldr	r3, [r7, #24]
 8010aee:	015a      	lsls	r2, r3, #5
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	4413      	add	r3, r2
 8010af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010af8:	691a      	ldr	r2, [r3, #16]
 8010afa:	69bb      	ldr	r3, [r7, #24]
 8010afc:	0159      	lsls	r1, r3, #5
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	440b      	add	r3, r1
 8010b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b06:	4619      	mov	r1, r3
 8010b08:	4b8c      	ldr	r3, [pc, #560]	; (8010d3c <USB_EPStartXfer+0x2e0>)
 8010b0a:	4013      	ands	r3, r2
 8010b0c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	015a      	lsls	r2, r3, #5
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	4413      	add	r3, r2
 8010b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b1a:	691a      	ldr	r2, [r3, #16]
 8010b1c:	69bb      	ldr	r3, [r7, #24]
 8010b1e:	0159      	lsls	r1, r3, #5
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	440b      	add	r3, r1
 8010b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b28:	4619      	mov	r1, r3
 8010b2a:	4b83      	ldr	r3, [pc, #524]	; (8010d38 <USB_EPStartXfer+0x2dc>)
 8010b2c:	4013      	ands	r3, r2
 8010b2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010b30:	69bb      	ldr	r3, [r7, #24]
 8010b32:	015a      	lsls	r2, r3, #5
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	4413      	add	r3, r2
 8010b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b3c:	691a      	ldr	r2, [r3, #16]
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	6959      	ldr	r1, [r3, #20]
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	689b      	ldr	r3, [r3, #8]
 8010b46:	440b      	add	r3, r1
 8010b48:	1e59      	subs	r1, r3, #1
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	689b      	ldr	r3, [r3, #8]
 8010b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8010b52:	04d9      	lsls	r1, r3, #19
 8010b54:	4b7a      	ldr	r3, [pc, #488]	; (8010d40 <USB_EPStartXfer+0x2e4>)
 8010b56:	400b      	ands	r3, r1
 8010b58:	69b9      	ldr	r1, [r7, #24]
 8010b5a:	0148      	lsls	r0, r1, #5
 8010b5c:	69f9      	ldr	r1, [r7, #28]
 8010b5e:	4401      	add	r1, r0
 8010b60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010b64:	4313      	orrs	r3, r2
 8010b66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	015a      	lsls	r2, r3, #5
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	4413      	add	r3, r2
 8010b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b74:	691a      	ldr	r2, [r3, #16]
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	695b      	ldr	r3, [r3, #20]
 8010b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b7e:	69b9      	ldr	r1, [r7, #24]
 8010b80:	0148      	lsls	r0, r1, #5
 8010b82:	69f9      	ldr	r1, [r7, #28]
 8010b84:	4401      	add	r1, r0
 8010b86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010b8a:	4313      	orrs	r3, r2
 8010b8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	78db      	ldrb	r3, [r3, #3]
 8010b92:	2b01      	cmp	r3, #1
 8010b94:	d11f      	bne.n	8010bd6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010b96:	69bb      	ldr	r3, [r7, #24]
 8010b98:	015a      	lsls	r2, r3, #5
 8010b9a:	69fb      	ldr	r3, [r7, #28]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ba2:	691b      	ldr	r3, [r3, #16]
 8010ba4:	69ba      	ldr	r2, [r7, #24]
 8010ba6:	0151      	lsls	r1, r2, #5
 8010ba8:	69fa      	ldr	r2, [r7, #28]
 8010baa:	440a      	add	r2, r1
 8010bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010bb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010bb6:	69bb      	ldr	r3, [r7, #24]
 8010bb8:	015a      	lsls	r2, r3, #5
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bc2:	691b      	ldr	r3, [r3, #16]
 8010bc4:	69ba      	ldr	r2, [r7, #24]
 8010bc6:	0151      	lsls	r1, r2, #5
 8010bc8:	69fa      	ldr	r2, [r7, #28]
 8010bca:	440a      	add	r2, r1
 8010bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010bd4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010bd6:	79fb      	ldrb	r3, [r7, #7]
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	d14b      	bne.n	8010c74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d009      	beq.n	8010bf8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010be4:	69bb      	ldr	r3, [r7, #24]
 8010be6:	015a      	lsls	r2, r3, #5
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	4413      	add	r3, r2
 8010bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	691b      	ldr	r3, [r3, #16]
 8010bf6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	78db      	ldrb	r3, [r3, #3]
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d128      	bne.n	8010c52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010c00:	69fb      	ldr	r3, [r7, #28]
 8010c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c06:	689b      	ldr	r3, [r3, #8]
 8010c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d110      	bne.n	8010c32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010c10:	69bb      	ldr	r3, [r7, #24]
 8010c12:	015a      	lsls	r2, r3, #5
 8010c14:	69fb      	ldr	r3, [r7, #28]
 8010c16:	4413      	add	r3, r2
 8010c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	69ba      	ldr	r2, [r7, #24]
 8010c20:	0151      	lsls	r1, r2, #5
 8010c22:	69fa      	ldr	r2, [r7, #28]
 8010c24:	440a      	add	r2, r1
 8010c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010c2e:	6013      	str	r3, [r2, #0]
 8010c30:	e00f      	b.n	8010c52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010c32:	69bb      	ldr	r3, [r7, #24]
 8010c34:	015a      	lsls	r2, r3, #5
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	4413      	add	r3, r2
 8010c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	69ba      	ldr	r2, [r7, #24]
 8010c42:	0151      	lsls	r1, r2, #5
 8010c44:	69fa      	ldr	r2, [r7, #28]
 8010c46:	440a      	add	r2, r1
 8010c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	015a      	lsls	r2, r3, #5
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	4413      	add	r3, r2
 8010c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	69ba      	ldr	r2, [r7, #24]
 8010c62:	0151      	lsls	r1, r2, #5
 8010c64:	69fa      	ldr	r2, [r7, #28]
 8010c66:	440a      	add	r2, r1
 8010c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010c70:	6013      	str	r3, [r2, #0]
 8010c72:	e133      	b.n	8010edc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	015a      	lsls	r2, r3, #5
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	69ba      	ldr	r2, [r7, #24]
 8010c84:	0151      	lsls	r1, r2, #5
 8010c86:	69fa      	ldr	r2, [r7, #28]
 8010c88:	440a      	add	r2, r1
 8010c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010c92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	78db      	ldrb	r3, [r3, #3]
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	d015      	beq.n	8010cc8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	695b      	ldr	r3, [r3, #20]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f000 811b 	beq.w	8010edc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	f003 030f 	and.w	r3, r3, #15
 8010cb6:	2101      	movs	r1, #1
 8010cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8010cbc:	69f9      	ldr	r1, [r7, #28]
 8010cbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	634b      	str	r3, [r1, #52]	; 0x34
 8010cc6:	e109      	b.n	8010edc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010cc8:	69fb      	ldr	r3, [r7, #28]
 8010cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cce:	689b      	ldr	r3, [r3, #8]
 8010cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d110      	bne.n	8010cfa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010cd8:	69bb      	ldr	r3, [r7, #24]
 8010cda:	015a      	lsls	r2, r3, #5
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	4413      	add	r3, r2
 8010ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	69ba      	ldr	r2, [r7, #24]
 8010ce8:	0151      	lsls	r1, r2, #5
 8010cea:	69fa      	ldr	r2, [r7, #28]
 8010cec:	440a      	add	r2, r1
 8010cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010cf6:	6013      	str	r3, [r2, #0]
 8010cf8:	e00f      	b.n	8010d1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	015a      	lsls	r2, r3, #5
 8010cfe:	69fb      	ldr	r3, [r7, #28]
 8010d00:	4413      	add	r3, r2
 8010d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	69ba      	ldr	r2, [r7, #24]
 8010d0a:	0151      	lsls	r1, r2, #5
 8010d0c:	69fa      	ldr	r2, [r7, #28]
 8010d0e:	440a      	add	r2, r1
 8010d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	68d9      	ldr	r1, [r3, #12]
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	781a      	ldrb	r2, [r3, #0]
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	695b      	ldr	r3, [r3, #20]
 8010d26:	b298      	uxth	r0, r3
 8010d28:	79fb      	ldrb	r3, [r7, #7]
 8010d2a:	9300      	str	r3, [sp, #0]
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	f000 fa38 	bl	80111a4 <USB_WritePacket>
 8010d34:	e0d2      	b.n	8010edc <USB_EPStartXfer+0x480>
 8010d36:	bf00      	nop
 8010d38:	e007ffff 	.word	0xe007ffff
 8010d3c:	fff80000 	.word	0xfff80000
 8010d40:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010d44:	69bb      	ldr	r3, [r7, #24]
 8010d46:	015a      	lsls	r2, r3, #5
 8010d48:	69fb      	ldr	r3, [r7, #28]
 8010d4a:	4413      	add	r3, r2
 8010d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d50:	691a      	ldr	r2, [r3, #16]
 8010d52:	69bb      	ldr	r3, [r7, #24]
 8010d54:	0159      	lsls	r1, r3, #5
 8010d56:	69fb      	ldr	r3, [r7, #28]
 8010d58:	440b      	add	r3, r1
 8010d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d5e:	4619      	mov	r1, r3
 8010d60:	4b61      	ldr	r3, [pc, #388]	; (8010ee8 <USB_EPStartXfer+0x48c>)
 8010d62:	4013      	ands	r3, r2
 8010d64:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	015a      	lsls	r2, r3, #5
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d72:	691a      	ldr	r2, [r3, #16]
 8010d74:	69bb      	ldr	r3, [r7, #24]
 8010d76:	0159      	lsls	r1, r3, #5
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	440b      	add	r3, r1
 8010d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d80:	4619      	mov	r1, r3
 8010d82:	4b5a      	ldr	r3, [pc, #360]	; (8010eec <USB_EPStartXfer+0x490>)
 8010d84:	4013      	ands	r3, r2
 8010d86:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	695b      	ldr	r3, [r3, #20]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d123      	bne.n	8010dd8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	015a      	lsls	r2, r3, #5
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	4413      	add	r3, r2
 8010d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d9c:	691a      	ldr	r2, [r3, #16]
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	689b      	ldr	r3, [r3, #8]
 8010da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010da6:	69b9      	ldr	r1, [r7, #24]
 8010da8:	0148      	lsls	r0, r1, #5
 8010daa:	69f9      	ldr	r1, [r7, #28]
 8010dac:	4401      	add	r1, r0
 8010dae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010db2:	4313      	orrs	r3, r2
 8010db4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	015a      	lsls	r2, r3, #5
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	4413      	add	r3, r2
 8010dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dc2:	691b      	ldr	r3, [r3, #16]
 8010dc4:	69ba      	ldr	r2, [r7, #24]
 8010dc6:	0151      	lsls	r1, r2, #5
 8010dc8:	69fa      	ldr	r2, [r7, #28]
 8010dca:	440a      	add	r2, r1
 8010dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010dd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010dd4:	6113      	str	r3, [r2, #16]
 8010dd6:	e033      	b.n	8010e40 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	695a      	ldr	r2, [r3, #20]
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	689b      	ldr	r3, [r3, #8]
 8010de0:	4413      	add	r3, r2
 8010de2:	1e5a      	subs	r2, r3, #1
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	689b      	ldr	r3, [r3, #8]
 8010de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	015a      	lsls	r2, r3, #5
 8010df2:	69fb      	ldr	r3, [r7, #28]
 8010df4:	4413      	add	r3, r2
 8010df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dfa:	691a      	ldr	r2, [r3, #16]
 8010dfc:	8afb      	ldrh	r3, [r7, #22]
 8010dfe:	04d9      	lsls	r1, r3, #19
 8010e00:	4b3b      	ldr	r3, [pc, #236]	; (8010ef0 <USB_EPStartXfer+0x494>)
 8010e02:	400b      	ands	r3, r1
 8010e04:	69b9      	ldr	r1, [r7, #24]
 8010e06:	0148      	lsls	r0, r1, #5
 8010e08:	69f9      	ldr	r1, [r7, #28]
 8010e0a:	4401      	add	r1, r0
 8010e0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010e10:	4313      	orrs	r3, r2
 8010e12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010e14:	69bb      	ldr	r3, [r7, #24]
 8010e16:	015a      	lsls	r2, r3, #5
 8010e18:	69fb      	ldr	r3, [r7, #28]
 8010e1a:	4413      	add	r3, r2
 8010e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e20:	691a      	ldr	r2, [r3, #16]
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	689b      	ldr	r3, [r3, #8]
 8010e26:	8af9      	ldrh	r1, [r7, #22]
 8010e28:	fb01 f303 	mul.w	r3, r1, r3
 8010e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e30:	69b9      	ldr	r1, [r7, #24]
 8010e32:	0148      	lsls	r0, r1, #5
 8010e34:	69f9      	ldr	r1, [r7, #28]
 8010e36:	4401      	add	r1, r0
 8010e38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010e3c:	4313      	orrs	r3, r2
 8010e3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010e40:	79fb      	ldrb	r3, [r7, #7]
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	d10d      	bne.n	8010e62 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d009      	beq.n	8010e62 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	68d9      	ldr	r1, [r3, #12]
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	015a      	lsls	r2, r3, #5
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	4413      	add	r3, r2
 8010e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e5e:	460a      	mov	r2, r1
 8010e60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	78db      	ldrb	r3, [r3, #3]
 8010e66:	2b01      	cmp	r3, #1
 8010e68:	d128      	bne.n	8010ebc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e70:	689b      	ldr	r3, [r3, #8]
 8010e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d110      	bne.n	8010e9c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	015a      	lsls	r2, r3, #5
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	4413      	add	r3, r2
 8010e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	69ba      	ldr	r2, [r7, #24]
 8010e8a:	0151      	lsls	r1, r2, #5
 8010e8c:	69fa      	ldr	r2, [r7, #28]
 8010e8e:	440a      	add	r2, r1
 8010e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010e98:	6013      	str	r3, [r2, #0]
 8010e9a:	e00f      	b.n	8010ebc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010e9c:	69bb      	ldr	r3, [r7, #24]
 8010e9e:	015a      	lsls	r2, r3, #5
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	4413      	add	r3, r2
 8010ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	69ba      	ldr	r2, [r7, #24]
 8010eac:	0151      	lsls	r1, r2, #5
 8010eae:	69fa      	ldr	r2, [r7, #28]
 8010eb0:	440a      	add	r2, r1
 8010eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010eba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010ebc:	69bb      	ldr	r3, [r7, #24]
 8010ebe:	015a      	lsls	r2, r3, #5
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	69ba      	ldr	r2, [r7, #24]
 8010ecc:	0151      	lsls	r1, r2, #5
 8010ece:	69fa      	ldr	r2, [r7, #28]
 8010ed0:	440a      	add	r2, r1
 8010ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ed6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010eda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010edc:	2300      	movs	r3, #0
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3720      	adds	r7, #32
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	fff80000 	.word	0xfff80000
 8010eec:	e007ffff 	.word	0xe007ffff
 8010ef0:	1ff80000 	.word	0x1ff80000

08010ef4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b087      	sub	sp, #28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	4613      	mov	r3, r2
 8010f00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	785b      	ldrb	r3, [r3, #1]
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	f040 80cd 	bne.w	80110b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	695b      	ldr	r3, [r3, #20]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d132      	bne.n	8010f84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	015a      	lsls	r2, r3, #5
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	4413      	add	r3, r2
 8010f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f2a:	691a      	ldr	r2, [r3, #16]
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	0159      	lsls	r1, r3, #5
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	440b      	add	r3, r1
 8010f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f38:	4619      	mov	r1, r3
 8010f3a:	4b98      	ldr	r3, [pc, #608]	; (801119c <USB_EP0StartXfer+0x2a8>)
 8010f3c:	4013      	ands	r3, r2
 8010f3e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	015a      	lsls	r2, r3, #5
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	4413      	add	r3, r2
 8010f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f4c:	691b      	ldr	r3, [r3, #16]
 8010f4e:	693a      	ldr	r2, [r7, #16]
 8010f50:	0151      	lsls	r1, r2, #5
 8010f52:	697a      	ldr	r2, [r7, #20]
 8010f54:	440a      	add	r2, r1
 8010f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010f5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	015a      	lsls	r2, r3, #5
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	4413      	add	r3, r2
 8010f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f6c:	691a      	ldr	r2, [r3, #16]
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	0159      	lsls	r1, r3, #5
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	440b      	add	r3, r1
 8010f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f7a:	4619      	mov	r1, r3
 8010f7c:	4b88      	ldr	r3, [pc, #544]	; (80111a0 <USB_EP0StartXfer+0x2ac>)
 8010f7e:	4013      	ands	r3, r2
 8010f80:	610b      	str	r3, [r1, #16]
 8010f82:	e04e      	b.n	8011022 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	015a      	lsls	r2, r3, #5
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	4413      	add	r3, r2
 8010f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f90:	691a      	ldr	r2, [r3, #16]
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	0159      	lsls	r1, r3, #5
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	440b      	add	r3, r1
 8010f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	4b7f      	ldr	r3, [pc, #508]	; (80111a0 <USB_EP0StartXfer+0x2ac>)
 8010fa2:	4013      	ands	r3, r2
 8010fa4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	015a      	lsls	r2, r3, #5
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	4413      	add	r3, r2
 8010fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fb2:	691a      	ldr	r2, [r3, #16]
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	0159      	lsls	r1, r3, #5
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	440b      	add	r3, r1
 8010fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	4b76      	ldr	r3, [pc, #472]	; (801119c <USB_EP0StartXfer+0x2a8>)
 8010fc4:	4013      	ands	r3, r2
 8010fc6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	695a      	ldr	r2, [r3, #20]
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	689b      	ldr	r3, [r3, #8]
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d903      	bls.n	8010fdc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	689a      	ldr	r2, [r3, #8]
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	015a      	lsls	r2, r3, #5
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	4413      	add	r3, r2
 8010fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe8:	691b      	ldr	r3, [r3, #16]
 8010fea:	693a      	ldr	r2, [r7, #16]
 8010fec:	0151      	lsls	r1, r2, #5
 8010fee:	697a      	ldr	r2, [r7, #20]
 8010ff0:	440a      	add	r2, r1
 8010ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	015a      	lsls	r2, r3, #5
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	4413      	add	r3, r2
 8011004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011008:	691a      	ldr	r2, [r3, #16]
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	695b      	ldr	r3, [r3, #20]
 801100e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011012:	6939      	ldr	r1, [r7, #16]
 8011014:	0148      	lsls	r0, r1, #5
 8011016:	6979      	ldr	r1, [r7, #20]
 8011018:	4401      	add	r1, r0
 801101a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801101e:	4313      	orrs	r3, r2
 8011020:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011022:	79fb      	ldrb	r3, [r7, #7]
 8011024:	2b01      	cmp	r3, #1
 8011026:	d11e      	bne.n	8011066 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	691b      	ldr	r3, [r3, #16]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d009      	beq.n	8011044 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	015a      	lsls	r2, r3, #5
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	4413      	add	r3, r2
 8011038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801103c:	461a      	mov	r2, r3
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	691b      	ldr	r3, [r3, #16]
 8011042:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	015a      	lsls	r2, r3, #5
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	4413      	add	r3, r2
 801104c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	693a      	ldr	r2, [r7, #16]
 8011054:	0151      	lsls	r1, r2, #5
 8011056:	697a      	ldr	r2, [r7, #20]
 8011058:	440a      	add	r2, r1
 801105a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801105e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011062:	6013      	str	r3, [r2, #0]
 8011064:	e092      	b.n	801118c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	015a      	lsls	r2, r3, #5
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	4413      	add	r3, r2
 801106e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	693a      	ldr	r2, [r7, #16]
 8011076:	0151      	lsls	r1, r2, #5
 8011078:	697a      	ldr	r2, [r7, #20]
 801107a:	440a      	add	r2, r1
 801107c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011080:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011084:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	695b      	ldr	r3, [r3, #20]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d07e      	beq.n	801118c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	f003 030f 	and.w	r3, r3, #15
 801109e:	2101      	movs	r1, #1
 80110a0:	fa01 f303 	lsl.w	r3, r1, r3
 80110a4:	6979      	ldr	r1, [r7, #20]
 80110a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80110aa:	4313      	orrs	r3, r2
 80110ac:	634b      	str	r3, [r1, #52]	; 0x34
 80110ae:	e06d      	b.n	801118c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	015a      	lsls	r2, r3, #5
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	4413      	add	r3, r2
 80110b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110bc:	691a      	ldr	r2, [r3, #16]
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	0159      	lsls	r1, r3, #5
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	440b      	add	r3, r1
 80110c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110ca:	4619      	mov	r1, r3
 80110cc:	4b34      	ldr	r3, [pc, #208]	; (80111a0 <USB_EP0StartXfer+0x2ac>)
 80110ce:	4013      	ands	r3, r2
 80110d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	015a      	lsls	r2, r3, #5
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	4413      	add	r3, r2
 80110da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110de:	691a      	ldr	r2, [r3, #16]
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	0159      	lsls	r1, r3, #5
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	440b      	add	r3, r1
 80110e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110ec:	4619      	mov	r1, r3
 80110ee:	4b2b      	ldr	r3, [pc, #172]	; (801119c <USB_EP0StartXfer+0x2a8>)
 80110f0:	4013      	ands	r3, r2
 80110f2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	695b      	ldr	r3, [r3, #20]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d003      	beq.n	8011104 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	689a      	ldr	r2, [r3, #8]
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	015a      	lsls	r2, r3, #5
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	4413      	add	r3, r2
 801110c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011110:	691b      	ldr	r3, [r3, #16]
 8011112:	693a      	ldr	r2, [r7, #16]
 8011114:	0151      	lsls	r1, r2, #5
 8011116:	697a      	ldr	r2, [r7, #20]
 8011118:	440a      	add	r2, r1
 801111a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801111e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011122:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	015a      	lsls	r2, r3, #5
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	4413      	add	r3, r2
 801112c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011130:	691a      	ldr	r2, [r3, #16]
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801113a:	6939      	ldr	r1, [r7, #16]
 801113c:	0148      	lsls	r0, r1, #5
 801113e:	6979      	ldr	r1, [r7, #20]
 8011140:	4401      	add	r1, r0
 8011142:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011146:	4313      	orrs	r3, r2
 8011148:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801114a:	79fb      	ldrb	r3, [r7, #7]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d10d      	bne.n	801116c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d009      	beq.n	801116c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	68d9      	ldr	r1, [r3, #12]
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	015a      	lsls	r2, r3, #5
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	4413      	add	r3, r2
 8011164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011168:	460a      	mov	r2, r1
 801116a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	015a      	lsls	r2, r3, #5
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	4413      	add	r3, r2
 8011174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	693a      	ldr	r2, [r7, #16]
 801117c:	0151      	lsls	r1, r2, #5
 801117e:	697a      	ldr	r2, [r7, #20]
 8011180:	440a      	add	r2, r1
 8011182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011186:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801118a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801118c:	2300      	movs	r3, #0
}
 801118e:	4618      	mov	r0, r3
 8011190:	371c      	adds	r7, #28
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop
 801119c:	e007ffff 	.word	0xe007ffff
 80111a0:	fff80000 	.word	0xfff80000

080111a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b089      	sub	sp, #36	; 0x24
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	4611      	mov	r1, r2
 80111b0:	461a      	mov	r2, r3
 80111b2:	460b      	mov	r3, r1
 80111b4:	71fb      	strb	r3, [r7, #7]
 80111b6:	4613      	mov	r3, r2
 80111b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80111c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d123      	bne.n	8011212 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80111ca:	88bb      	ldrh	r3, [r7, #4]
 80111cc:	3303      	adds	r3, #3
 80111ce:	089b      	lsrs	r3, r3, #2
 80111d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80111d2:	2300      	movs	r3, #0
 80111d4:	61bb      	str	r3, [r7, #24]
 80111d6:	e018      	b.n	801120a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80111d8:	79fb      	ldrb	r3, [r7, #7]
 80111da:	031a      	lsls	r2, r3, #12
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	4413      	add	r3, r2
 80111e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111e4:	461a      	mov	r2, r3
 80111e6:	69fb      	ldr	r3, [r7, #28]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	3301      	adds	r3, #1
 80111f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	3301      	adds	r3, #1
 80111f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80111f8:	69fb      	ldr	r3, [r7, #28]
 80111fa:	3301      	adds	r3, #1
 80111fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	3301      	adds	r3, #1
 8011202:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011204:	69bb      	ldr	r3, [r7, #24]
 8011206:	3301      	adds	r3, #1
 8011208:	61bb      	str	r3, [r7, #24]
 801120a:	69ba      	ldr	r2, [r7, #24]
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	429a      	cmp	r2, r3
 8011210:	d3e2      	bcc.n	80111d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011212:	2300      	movs	r3, #0
}
 8011214:	4618      	mov	r0, r3
 8011216:	3724      	adds	r7, #36	; 0x24
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr

08011220 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011220:	b480      	push	{r7}
 8011222:	b08b      	sub	sp, #44	; 0x2c
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	4613      	mov	r3, r2
 801122c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011236:	88fb      	ldrh	r3, [r7, #6]
 8011238:	089b      	lsrs	r3, r3, #2
 801123a:	b29b      	uxth	r3, r3
 801123c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801123e:	88fb      	ldrh	r3, [r7, #6]
 8011240:	f003 0303 	and.w	r3, r3, #3
 8011244:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011246:	2300      	movs	r3, #0
 8011248:	623b      	str	r3, [r7, #32]
 801124a:	e014      	b.n	8011276 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801124c:	69bb      	ldr	r3, [r7, #24]
 801124e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011252:	681a      	ldr	r2, [r3, #0]
 8011254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011256:	601a      	str	r2, [r3, #0]
    pDest++;
 8011258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125a:	3301      	adds	r3, #1
 801125c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011260:	3301      	adds	r3, #1
 8011262:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011266:	3301      	adds	r3, #1
 8011268:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	3301      	adds	r3, #1
 801126e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011270:	6a3b      	ldr	r3, [r7, #32]
 8011272:	3301      	adds	r3, #1
 8011274:	623b      	str	r3, [r7, #32]
 8011276:	6a3a      	ldr	r2, [r7, #32]
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	429a      	cmp	r2, r3
 801127c:	d3e6      	bcc.n	801124c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801127e:	8bfb      	ldrh	r3, [r7, #30]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d01e      	beq.n	80112c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011284:	2300      	movs	r3, #0
 8011286:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011288:	69bb      	ldr	r3, [r7, #24]
 801128a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801128e:	461a      	mov	r2, r3
 8011290:	f107 0310 	add.w	r3, r7, #16
 8011294:	6812      	ldr	r2, [r2, #0]
 8011296:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011298:	693a      	ldr	r2, [r7, #16]
 801129a:	6a3b      	ldr	r3, [r7, #32]
 801129c:	b2db      	uxtb	r3, r3
 801129e:	00db      	lsls	r3, r3, #3
 80112a0:	fa22 f303 	lsr.w	r3, r2, r3
 80112a4:	b2da      	uxtb	r2, r3
 80112a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a8:	701a      	strb	r2, [r3, #0]
      i++;
 80112aa:	6a3b      	ldr	r3, [r7, #32]
 80112ac:	3301      	adds	r3, #1
 80112ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80112b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b2:	3301      	adds	r3, #1
 80112b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80112b6:	8bfb      	ldrh	r3, [r7, #30]
 80112b8:	3b01      	subs	r3, #1
 80112ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80112bc:	8bfb      	ldrh	r3, [r7, #30]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d1ea      	bne.n	8011298 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80112c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	372c      	adds	r7, #44	; 0x2c
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr

080112d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80112d0:	b480      	push	{r7}
 80112d2:	b085      	sub	sp, #20
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	785b      	ldrb	r3, [r3, #1]
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d12c      	bne.n	8011346 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	015a      	lsls	r2, r3, #5
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	4413      	add	r3, r2
 80112f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	db12      	blt.n	8011324 <USB_EPSetStall+0x54>
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d00f      	beq.n	8011324 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	015a      	lsls	r2, r3, #5
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	4413      	add	r3, r2
 801130c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	68ba      	ldr	r2, [r7, #8]
 8011314:	0151      	lsls	r1, r2, #5
 8011316:	68fa      	ldr	r2, [r7, #12]
 8011318:	440a      	add	r2, r1
 801131a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801131e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011322:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	015a      	lsls	r2, r3, #5
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	4413      	add	r3, r2
 801132c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	68ba      	ldr	r2, [r7, #8]
 8011334:	0151      	lsls	r1, r2, #5
 8011336:	68fa      	ldr	r2, [r7, #12]
 8011338:	440a      	add	r2, r1
 801133a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801133e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011342:	6013      	str	r3, [r2, #0]
 8011344:	e02b      	b.n	801139e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	015a      	lsls	r2, r3, #5
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	4413      	add	r3, r2
 801134e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	db12      	blt.n	801137e <USB_EPSetStall+0xae>
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00f      	beq.n	801137e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	015a      	lsls	r2, r3, #5
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	4413      	add	r3, r2
 8011366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	68ba      	ldr	r2, [r7, #8]
 801136e:	0151      	lsls	r1, r2, #5
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	440a      	add	r2, r1
 8011374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011378:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801137c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	015a      	lsls	r2, r3, #5
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	4413      	add	r3, r2
 8011386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	68ba      	ldr	r2, [r7, #8]
 801138e:	0151      	lsls	r1, r2, #5
 8011390:	68fa      	ldr	r2, [r7, #12]
 8011392:	440a      	add	r2, r1
 8011394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801139c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801139e:	2300      	movs	r3, #0
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3714      	adds	r7, #20
 80113a4:	46bd      	mov	sp, r7
 80113a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113aa:	4770      	bx	lr

080113ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	785b      	ldrb	r3, [r3, #1]
 80113c4:	2b01      	cmp	r3, #1
 80113c6:	d128      	bne.n	801141a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	015a      	lsls	r2, r3, #5
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	4413      	add	r3, r2
 80113d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	68ba      	ldr	r2, [r7, #8]
 80113d8:	0151      	lsls	r1, r2, #5
 80113da:	68fa      	ldr	r2, [r7, #12]
 80113dc:	440a      	add	r2, r1
 80113de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80113e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	78db      	ldrb	r3, [r3, #3]
 80113ec:	2b03      	cmp	r3, #3
 80113ee:	d003      	beq.n	80113f8 <USB_EPClearStall+0x4c>
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	78db      	ldrb	r3, [r3, #3]
 80113f4:	2b02      	cmp	r3, #2
 80113f6:	d138      	bne.n	801146a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	015a      	lsls	r2, r3, #5
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	4413      	add	r3, r2
 8011400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	0151      	lsls	r1, r2, #5
 801140a:	68fa      	ldr	r2, [r7, #12]
 801140c:	440a      	add	r2, r1
 801140e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011416:	6013      	str	r3, [r2, #0]
 8011418:	e027      	b.n	801146a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	015a      	lsls	r2, r3, #5
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	4413      	add	r3, r2
 8011422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	68ba      	ldr	r2, [r7, #8]
 801142a:	0151      	lsls	r1, r2, #5
 801142c:	68fa      	ldr	r2, [r7, #12]
 801142e:	440a      	add	r2, r1
 8011430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011438:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	78db      	ldrb	r3, [r3, #3]
 801143e:	2b03      	cmp	r3, #3
 8011440:	d003      	beq.n	801144a <USB_EPClearStall+0x9e>
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	78db      	ldrb	r3, [r3, #3]
 8011446:	2b02      	cmp	r3, #2
 8011448:	d10f      	bne.n	801146a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	015a      	lsls	r2, r3, #5
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	4413      	add	r3, r2
 8011452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	68ba      	ldr	r2, [r7, #8]
 801145a:	0151      	lsls	r1, r2, #5
 801145c:	68fa      	ldr	r2, [r7, #12]
 801145e:	440a      	add	r2, r1
 8011460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011468:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801146a:	2300      	movs	r3, #0
}
 801146c:	4618      	mov	r0, r3
 801146e:	3714      	adds	r7, #20
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr

08011478 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011478:	b480      	push	{r7}
 801147a:	b085      	sub	sp, #20
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	460b      	mov	r3, r1
 8011482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	68fa      	ldr	r2, [r7, #12]
 8011492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011496:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801149a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	78fb      	ldrb	r3, [r7, #3]
 80114a6:	011b      	lsls	r3, r3, #4
 80114a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80114ac:	68f9      	ldr	r1, [r7, #12]
 80114ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80114b2:	4313      	orrs	r3, r2
 80114b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80114b6:	2300      	movs	r3, #0
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3714      	adds	r7, #20
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b085      	sub	sp, #20
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	68fa      	ldr	r2, [r7, #12]
 80114da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80114de:	f023 0303 	bic.w	r3, r3, #3
 80114e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114ea:	685b      	ldr	r3, [r3, #4]
 80114ec:	68fa      	ldr	r2, [r7, #12]
 80114ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80114f2:	f023 0302 	bic.w	r3, r3, #2
 80114f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80114f8:	2300      	movs	r3, #0
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3714      	adds	r7, #20
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr

08011506 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011506:	b480      	push	{r7}
 8011508:	b085      	sub	sp, #20
 801150a:	af00      	add	r7, sp, #0
 801150c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	68fa      	ldr	r2, [r7, #12]
 801151c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011520:	f023 0303 	bic.w	r3, r3, #3
 8011524:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	68fa      	ldr	r2, [r7, #12]
 8011530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011534:	f043 0302 	orr.w	r3, r3, #2
 8011538:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3714      	adds	r7, #20
 8011540:	46bd      	mov	sp, r7
 8011542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011546:	4770      	bx	lr

08011548 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011548:	b480      	push	{r7}
 801154a:	b085      	sub	sp, #20
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	695b      	ldr	r3, [r3, #20]
 8011554:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	699b      	ldr	r3, [r3, #24]
 801155a:	68fa      	ldr	r2, [r7, #12]
 801155c:	4013      	ands	r3, r2
 801155e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011560:	68fb      	ldr	r3, [r7, #12]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3714      	adds	r7, #20
 8011566:	46bd      	mov	sp, r7
 8011568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156c:	4770      	bx	lr

0801156e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801156e:	b480      	push	{r7}
 8011570:	b085      	sub	sp, #20
 8011572:	af00      	add	r7, sp, #0
 8011574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011580:	699b      	ldr	r3, [r3, #24]
 8011582:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801158a:	69db      	ldr	r3, [r3, #28]
 801158c:	68ba      	ldr	r2, [r7, #8]
 801158e:	4013      	ands	r3, r2
 8011590:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	0c1b      	lsrs	r3, r3, #16
}
 8011596:	4618      	mov	r0, r3
 8011598:	3714      	adds	r7, #20
 801159a:	46bd      	mov	sp, r7
 801159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a0:	4770      	bx	lr

080115a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80115a2:	b480      	push	{r7}
 80115a4:	b085      	sub	sp, #20
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115b4:	699b      	ldr	r3, [r3, #24]
 80115b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115be:	69db      	ldr	r3, [r3, #28]
 80115c0:	68ba      	ldr	r2, [r7, #8]
 80115c2:	4013      	ands	r3, r2
 80115c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	b29b      	uxth	r3, r3
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3714      	adds	r7, #20
 80115ce:	46bd      	mov	sp, r7
 80115d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d4:	4770      	bx	lr

080115d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80115d6:	b480      	push	{r7}
 80115d8:	b085      	sub	sp, #20
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
 80115de:	460b      	mov	r3, r1
 80115e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80115e6:	78fb      	ldrb	r3, [r7, #3]
 80115e8:	015a      	lsls	r2, r3, #5
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	4413      	add	r3, r2
 80115ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115f2:	689b      	ldr	r3, [r3, #8]
 80115f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115fc:	695b      	ldr	r3, [r3, #20]
 80115fe:	68ba      	ldr	r2, [r7, #8]
 8011600:	4013      	ands	r3, r2
 8011602:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011604:	68bb      	ldr	r3, [r7, #8]
}
 8011606:	4618      	mov	r0, r3
 8011608:	3714      	adds	r7, #20
 801160a:	46bd      	mov	sp, r7
 801160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011610:	4770      	bx	lr

08011612 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011612:	b480      	push	{r7}
 8011614:	b087      	sub	sp, #28
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
 801161a:	460b      	mov	r3, r1
 801161c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011628:	691b      	ldr	r3, [r3, #16]
 801162a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011634:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011636:	78fb      	ldrb	r3, [r7, #3]
 8011638:	f003 030f 	and.w	r3, r3, #15
 801163c:	68fa      	ldr	r2, [r7, #12]
 801163e:	fa22 f303 	lsr.w	r3, r2, r3
 8011642:	01db      	lsls	r3, r3, #7
 8011644:	b2db      	uxtb	r3, r3
 8011646:	693a      	ldr	r2, [r7, #16]
 8011648:	4313      	orrs	r3, r2
 801164a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801164c:	78fb      	ldrb	r3, [r7, #3]
 801164e:	015a      	lsls	r2, r3, #5
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	4413      	add	r3, r2
 8011654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011658:	689b      	ldr	r3, [r3, #8]
 801165a:	693a      	ldr	r2, [r7, #16]
 801165c:	4013      	ands	r3, r2
 801165e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011660:	68bb      	ldr	r3, [r7, #8]
}
 8011662:	4618      	mov	r0, r3
 8011664:	371c      	adds	r7, #28
 8011666:	46bd      	mov	sp, r7
 8011668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166c:	4770      	bx	lr

0801166e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801166e:	b480      	push	{r7}
 8011670:	b083      	sub	sp, #12
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	695b      	ldr	r3, [r3, #20]
 801167a:	f003 0301 	and.w	r3, r3, #1
}
 801167e:	4618      	mov	r0, r3
 8011680:	370c      	adds	r7, #12
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr
	...

0801168c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801168c:	b480      	push	{r7}
 801168e:	b085      	sub	sp, #20
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801169e:	681a      	ldr	r2, [r3, #0]
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116a6:	4619      	mov	r1, r3
 80116a8:	4b09      	ldr	r3, [pc, #36]	; (80116d0 <USB_ActivateSetup+0x44>)
 80116aa:	4013      	ands	r3, r2
 80116ac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	68fa      	ldr	r2, [r7, #12]
 80116b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80116bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80116c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80116c2:	2300      	movs	r3, #0
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3714      	adds	r7, #20
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr
 80116d0:	fffff800 	.word	0xfffff800

080116d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b087      	sub	sp, #28
 80116d8:	af00      	add	r7, sp, #0
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	460b      	mov	r3, r1
 80116de:	607a      	str	r2, [r7, #4]
 80116e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	333c      	adds	r3, #60	; 0x3c
 80116ea:	3304      	adds	r3, #4
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	4a26      	ldr	r2, [pc, #152]	; (801178c <USB_EP0_OutStart+0xb8>)
 80116f4:	4293      	cmp	r3, r2
 80116f6:	d90a      	bls.n	801170e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011708:	d101      	bne.n	801170e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801170a:	2300      	movs	r3, #0
 801170c:	e037      	b.n	801177e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011714:	461a      	mov	r2, r3
 8011716:	2300      	movs	r3, #0
 8011718:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011720:	691b      	ldr	r3, [r3, #16]
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801172c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011734:	691b      	ldr	r3, [r3, #16]
 8011736:	697a      	ldr	r2, [r7, #20]
 8011738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801173c:	f043 0318 	orr.w	r3, r3, #24
 8011740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011748:	691b      	ldr	r3, [r3, #16]
 801174a:	697a      	ldr	r2, [r7, #20]
 801174c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011750:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011754:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011756:	7afb      	ldrb	r3, [r7, #11]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d10f      	bne.n	801177c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011762:	461a      	mov	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	697a      	ldr	r2, [r7, #20]
 8011772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011776:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801177a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801177c:	2300      	movs	r3, #0
}
 801177e:	4618      	mov	r0, r3
 8011780:	371c      	adds	r7, #28
 8011782:	46bd      	mov	sp, r7
 8011784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011788:	4770      	bx	lr
 801178a:	bf00      	nop
 801178c:	4f54300a 	.word	0x4f54300a

08011790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011798:	2300      	movs	r3, #0
 801179a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	3301      	adds	r3, #1
 80117a0:	60fb      	str	r3, [r7, #12]
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	4a13      	ldr	r2, [pc, #76]	; (80117f4 <USB_CoreReset+0x64>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d901      	bls.n	80117ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80117aa:	2303      	movs	r3, #3
 80117ac:	e01b      	b.n	80117e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	691b      	ldr	r3, [r3, #16]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	daf2      	bge.n	801179c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80117b6:	2300      	movs	r3, #0
 80117b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	691b      	ldr	r3, [r3, #16]
 80117be:	f043 0201 	orr.w	r2, r3, #1
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3301      	adds	r3, #1
 80117ca:	60fb      	str	r3, [r7, #12]
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	4a09      	ldr	r2, [pc, #36]	; (80117f4 <USB_CoreReset+0x64>)
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d901      	bls.n	80117d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80117d4:	2303      	movs	r3, #3
 80117d6:	e006      	b.n	80117e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	691b      	ldr	r3, [r3, #16]
 80117dc:	f003 0301 	and.w	r3, r3, #1
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	d0f0      	beq.n	80117c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80117e4:	2300      	movs	r3, #0
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3714      	adds	r7, #20
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop
 80117f4:	00030d40 	.word	0x00030d40

080117f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	460b      	mov	r3, r1
 8011802:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011804:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011808:	f003 fcfc 	bl	8015204 <USBD_static_malloc>
 801180c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d105      	bne.n	8011820 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2200      	movs	r2, #0
 8011818:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801181c:	2302      	movs	r3, #2
 801181e:	e066      	b.n	80118ee <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	7c1b      	ldrb	r3, [r3, #16]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d119      	bne.n	8011864 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011834:	2202      	movs	r2, #2
 8011836:	2181      	movs	r1, #129	; 0x81
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f003 fbc0 	bl	8014fbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2201      	movs	r2, #1
 8011842:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011848:	2202      	movs	r2, #2
 801184a:	2101      	movs	r1, #1
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f003 fbb6 	bl	8014fbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2201      	movs	r2, #1
 8011856:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2210      	movs	r2, #16
 801185e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011862:	e016      	b.n	8011892 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011864:	2340      	movs	r3, #64	; 0x40
 8011866:	2202      	movs	r2, #2
 8011868:	2181      	movs	r1, #129	; 0x81
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f003 fba7 	bl	8014fbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2201      	movs	r2, #1
 8011874:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011876:	2340      	movs	r3, #64	; 0x40
 8011878:	2202      	movs	r2, #2
 801187a:	2101      	movs	r1, #1
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f003 fb9e 	bl	8014fbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2201      	movs	r2, #1
 8011886:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2210      	movs	r2, #16
 801188e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011892:	2308      	movs	r3, #8
 8011894:	2203      	movs	r2, #3
 8011896:	2182      	movs	r1, #130	; 0x82
 8011898:	6878      	ldr	r0, [r7, #4]
 801189a:	f003 fb90 	bl	8014fbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2201      	movs	r2, #1
 80118a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2200      	movs	r2, #0
 80118b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	2200      	movs	r2, #0
 80118bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	7c1b      	ldrb	r3, [r3, #16]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d109      	bne.n	80118dc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80118ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80118d2:	2101      	movs	r1, #1
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f003 fc61 	bl	801519c <USBD_LL_PrepareReceive>
 80118da:	e007      	b.n	80118ec <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80118e2:	2340      	movs	r3, #64	; 0x40
 80118e4:	2101      	movs	r1, #1
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f003 fc58 	bl	801519c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80118ec:	2300      	movs	r3, #0
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3710      	adds	r7, #16
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b082      	sub	sp, #8
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	6078      	str	r0, [r7, #4]
 80118fe:	460b      	mov	r3, r1
 8011900:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011902:	2181      	movs	r1, #129	; 0x81
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f003 fb80 	bl	801500a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2200      	movs	r2, #0
 801190e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011910:	2101      	movs	r1, #1
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f003 fb79 	bl	801500a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2200      	movs	r2, #0
 801191c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011920:	2182      	movs	r1, #130	; 0x82
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f003 fb71 	bl	801500a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2200      	movs	r2, #0
 8011934:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801193e:	2b00      	cmp	r3, #0
 8011940:	d00e      	beq.n	8011960 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011952:	4618      	mov	r0, r3
 8011954:	f003 fc64 	bl	8015220 <USBD_static_free>
    pdev->pClassData = NULL;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011960:	2300      	movs	r3, #0
}
 8011962:	4618      	mov	r0, r3
 8011964:	3708      	adds	r7, #8
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
	...

0801196c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b086      	sub	sp, #24
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801197c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801197e:	2300      	movs	r3, #0
 8011980:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011982:	2300      	movs	r3, #0
 8011984:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011986:	2300      	movs	r3, #0
 8011988:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d101      	bne.n	8011994 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011990:	2303      	movs	r3, #3
 8011992:	e0af      	b.n	8011af4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801199c:	2b00      	cmp	r3, #0
 801199e:	d03f      	beq.n	8011a20 <USBD_CDC_Setup+0xb4>
 80119a0:	2b20      	cmp	r3, #32
 80119a2:	f040 809f 	bne.w	8011ae4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	88db      	ldrh	r3, [r3, #6]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d02e      	beq.n	8011a0c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	b25b      	sxtb	r3, r3
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	da16      	bge.n	80119e6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119be:	689b      	ldr	r3, [r3, #8]
 80119c0:	683a      	ldr	r2, [r7, #0]
 80119c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80119c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80119c6:	683a      	ldr	r2, [r7, #0]
 80119c8:	88d2      	ldrh	r2, [r2, #6]
 80119ca:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	88db      	ldrh	r3, [r3, #6]
 80119d0:	2b07      	cmp	r3, #7
 80119d2:	bf28      	it	cs
 80119d4:	2307      	movcs	r3, #7
 80119d6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	89fa      	ldrh	r2, [r7, #14]
 80119dc:	4619      	mov	r1, r3
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f001 fb19 	bl	8013016 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80119e4:	e085      	b.n	8011af2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	785a      	ldrb	r2, [r3, #1]
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	88db      	ldrh	r3, [r3, #6]
 80119f4:	b2da      	uxtb	r2, r3
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80119fc:	6939      	ldr	r1, [r7, #16]
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	88db      	ldrh	r3, [r3, #6]
 8011a02:	461a      	mov	r2, r3
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f001 fb32 	bl	801306e <USBD_CtlPrepareRx>
      break;
 8011a0a:	e072      	b.n	8011af2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a12:	689b      	ldr	r3, [r3, #8]
 8011a14:	683a      	ldr	r2, [r7, #0]
 8011a16:	7850      	ldrb	r0, [r2, #1]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	6839      	ldr	r1, [r7, #0]
 8011a1c:	4798      	blx	r3
      break;
 8011a1e:	e068      	b.n	8011af2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	785b      	ldrb	r3, [r3, #1]
 8011a24:	2b0b      	cmp	r3, #11
 8011a26:	d852      	bhi.n	8011ace <USBD_CDC_Setup+0x162>
 8011a28:	a201      	add	r2, pc, #4	; (adr r2, 8011a30 <USBD_CDC_Setup+0xc4>)
 8011a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a2e:	bf00      	nop
 8011a30:	08011a61 	.word	0x08011a61
 8011a34:	08011add 	.word	0x08011add
 8011a38:	08011acf 	.word	0x08011acf
 8011a3c:	08011acf 	.word	0x08011acf
 8011a40:	08011acf 	.word	0x08011acf
 8011a44:	08011acf 	.word	0x08011acf
 8011a48:	08011acf 	.word	0x08011acf
 8011a4c:	08011acf 	.word	0x08011acf
 8011a50:	08011acf 	.word	0x08011acf
 8011a54:	08011acf 	.word	0x08011acf
 8011a58:	08011a8b 	.word	0x08011a8b
 8011a5c:	08011ab5 	.word	0x08011ab5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	2b03      	cmp	r3, #3
 8011a6a:	d107      	bne.n	8011a7c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011a6c:	f107 030a 	add.w	r3, r7, #10
 8011a70:	2202      	movs	r2, #2
 8011a72:	4619      	mov	r1, r3
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f001 face 	bl	8013016 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011a7a:	e032      	b.n	8011ae2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011a7c:	6839      	ldr	r1, [r7, #0]
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f001 fa58 	bl	8012f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8011a84:	2303      	movs	r3, #3
 8011a86:	75fb      	strb	r3, [r7, #23]
          break;
 8011a88:	e02b      	b.n	8011ae2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	2b03      	cmp	r3, #3
 8011a94:	d107      	bne.n	8011aa6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011a96:	f107 030d 	add.w	r3, r7, #13
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f001 fab9 	bl	8013016 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011aa4:	e01d      	b.n	8011ae2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011aa6:	6839      	ldr	r1, [r7, #0]
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f001 fa43 	bl	8012f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8011aae:	2303      	movs	r3, #3
 8011ab0:	75fb      	strb	r3, [r7, #23]
          break;
 8011ab2:	e016      	b.n	8011ae2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	2b03      	cmp	r3, #3
 8011abe:	d00f      	beq.n	8011ae0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011ac0:	6839      	ldr	r1, [r7, #0]
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f001 fa36 	bl	8012f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8011ac8:	2303      	movs	r3, #3
 8011aca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011acc:	e008      	b.n	8011ae0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f001 fa2f 	bl	8012f34 <USBD_CtlError>
          ret = USBD_FAIL;
 8011ad6:	2303      	movs	r3, #3
 8011ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8011ada:	e002      	b.n	8011ae2 <USBD_CDC_Setup+0x176>
          break;
 8011adc:	bf00      	nop
 8011ade:	e008      	b.n	8011af2 <USBD_CDC_Setup+0x186>
          break;
 8011ae0:	bf00      	nop
      }
      break;
 8011ae2:	e006      	b.n	8011af2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011ae4:	6839      	ldr	r1, [r7, #0]
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f001 fa24 	bl	8012f34 <USBD_CtlError>
      ret = USBD_FAIL;
 8011aec:	2303      	movs	r3, #3
 8011aee:	75fb      	strb	r3, [r7, #23]
      break;
 8011af0:	bf00      	nop
  }

  return (uint8_t)ret;
 8011af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3718      	adds	r7, #24
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	460b      	mov	r3, r1
 8011b06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d101      	bne.n	8011b1e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011b1a:	2303      	movs	r3, #3
 8011b1c:	e04f      	b.n	8011bbe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011b26:	78fa      	ldrb	r2, [r7, #3]
 8011b28:	6879      	ldr	r1, [r7, #4]
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	4413      	add	r3, r2
 8011b30:	009b      	lsls	r3, r3, #2
 8011b32:	440b      	add	r3, r1
 8011b34:	3318      	adds	r3, #24
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d029      	beq.n	8011b90 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011b3c:	78fa      	ldrb	r2, [r7, #3]
 8011b3e:	6879      	ldr	r1, [r7, #4]
 8011b40:	4613      	mov	r3, r2
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4413      	add	r3, r2
 8011b46:	009b      	lsls	r3, r3, #2
 8011b48:	440b      	add	r3, r1
 8011b4a:	3318      	adds	r3, #24
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	78f9      	ldrb	r1, [r7, #3]
 8011b50:	68f8      	ldr	r0, [r7, #12]
 8011b52:	460b      	mov	r3, r1
 8011b54:	00db      	lsls	r3, r3, #3
 8011b56:	1a5b      	subs	r3, r3, r1
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	4403      	add	r3, r0
 8011b5c:	3344      	adds	r3, #68	; 0x44
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	fbb2 f1f3 	udiv	r1, r2, r3
 8011b64:	fb03 f301 	mul.w	r3, r3, r1
 8011b68:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d110      	bne.n	8011b90 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011b6e:	78fa      	ldrb	r2, [r7, #3]
 8011b70:	6879      	ldr	r1, [r7, #4]
 8011b72:	4613      	mov	r3, r2
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	4413      	add	r3, r2
 8011b78:	009b      	lsls	r3, r3, #2
 8011b7a:	440b      	add	r3, r1
 8011b7c:	3318      	adds	r3, #24
 8011b7e:	2200      	movs	r2, #0
 8011b80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011b82:	78f9      	ldrb	r1, [r7, #3]
 8011b84:	2300      	movs	r3, #0
 8011b86:	2200      	movs	r2, #0
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f003 fae6 	bl	801515a <USBD_LL_Transmit>
 8011b8e:	e015      	b.n	8011bbc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	2200      	movs	r2, #0
 8011b94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b9e:	691b      	ldr	r3, [r3, #16]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00b      	beq.n	8011bbc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011baa:	691b      	ldr	r3, [r3, #16]
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011bb2:	68ba      	ldr	r2, [r7, #8]
 8011bb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011bb8:	78fa      	ldrb	r2, [r7, #3]
 8011bba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011bbc:	2300      	movs	r3, #0
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b084      	sub	sp, #16
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	460b      	mov	r3, r1
 8011bd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bd8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d101      	bne.n	8011be8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011be4:	2303      	movs	r3, #3
 8011be6:	e015      	b.n	8011c14 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011be8:	78fb      	ldrb	r3, [r7, #3]
 8011bea:	4619      	mov	r1, r3
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f003 faf6 	bl	80151de <USBD_LL_GetRxDataSize>
 8011bf2:	4602      	mov	r2, r0
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	68fa      	ldr	r2, [r7, #12]
 8011c04:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011c08:	68fa      	ldr	r2, [r7, #12]
 8011c0a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011c0e:	4611      	mov	r1, r2
 8011c10:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011c12:	2300      	movs	r3, #0
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3710      	adds	r7, #16
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b084      	sub	sp, #16
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c2a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d101      	bne.n	8011c36 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011c32:	2303      	movs	r3, #3
 8011c34:	e01b      	b.n	8011c6e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d015      	beq.n	8011c6c <USBD_CDC_EP0_RxReady+0x50>
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011c46:	2bff      	cmp	r3, #255	; 0xff
 8011c48:	d010      	beq.n	8011c6c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	68fa      	ldr	r2, [r7, #12]
 8011c54:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011c58:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011c5a:	68fa      	ldr	r2, [r7, #12]
 8011c5c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011c60:	b292      	uxth	r2, r2
 8011c62:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	22ff      	movs	r2, #255	; 0xff
 8011c68:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011c6c:	2300      	movs	r3, #0
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3710      	adds	r7, #16
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
	...

08011c78 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b083      	sub	sp, #12
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2243      	movs	r2, #67	; 0x43
 8011c84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011c86:	4b03      	ldr	r3, [pc, #12]	; (8011c94 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr
 8011c94:	2400016c 	.word	0x2400016c

08011c98 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2243      	movs	r2, #67	; 0x43
 8011ca4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011ca6:	4b03      	ldr	r3, [pc, #12]	; (8011cb4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	370c      	adds	r7, #12
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr
 8011cb4:	24000128 	.word	0x24000128

08011cb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2243      	movs	r2, #67	; 0x43
 8011cc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011cc6:	4b03      	ldr	r3, [pc, #12]	; (8011cd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	370c      	adds	r7, #12
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr
 8011cd4:	240001b0 	.word	0x240001b0

08011cd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	220a      	movs	r2, #10
 8011ce4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011ce6:	4b03      	ldr	r3, [pc, #12]	; (8011cf4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	370c      	adds	r7, #12
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr
 8011cf4:	240000e4 	.word	0x240000e4

08011cf8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d101      	bne.n	8011d0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011d08:	2303      	movs	r3, #3
 8011d0a:	e004      	b.n	8011d16 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	683a      	ldr	r2, [r7, #0]
 8011d10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011d14:	2300      	movs	r3, #0
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	370c      	adds	r7, #12
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr

08011d22 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011d22:	b480      	push	{r7}
 8011d24:	b087      	sub	sp, #28
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	60f8      	str	r0, [r7, #12]
 8011d2a:	60b9      	str	r1, [r7, #8]
 8011d2c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d34:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d101      	bne.n	8011d40 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011d3c:	2303      	movs	r3, #3
 8011d3e:	e008      	b.n	8011d52 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	68ba      	ldr	r2, [r7, #8]
 8011d44:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	371c      	adds	r7, #28
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr

08011d5e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011d5e:	b480      	push	{r7}
 8011d60:	b085      	sub	sp, #20
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
 8011d66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d6e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d101      	bne.n	8011d7a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011d76:	2303      	movs	r3, #3
 8011d78:	e004      	b.n	8011d84 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	683a      	ldr	r2, [r7, #0]
 8011d7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011d82:	2300      	movs	r3, #0
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3714      	adds	r7, #20
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr

08011d90 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d9e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011da0:	2301      	movs	r3, #1
 8011da2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d101      	bne.n	8011db2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011dae:	2303      	movs	r3, #3
 8011db0:	e01a      	b.n	8011de8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d114      	bne.n	8011de6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011dda:	2181      	movs	r1, #129	; 0x81
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f003 f9bc 	bl	801515a <USBD_LL_Transmit>

    ret = USBD_OK;
 8011de2:	2300      	movs	r3, #0
 8011de4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	3710      	adds	r7, #16
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b084      	sub	sp, #16
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011dfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d101      	bne.n	8011e0e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011e0a:	2303      	movs	r3, #3
 8011e0c:	e016      	b.n	8011e3c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	7c1b      	ldrb	r3, [r3, #16]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d109      	bne.n	8011e2a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011e20:	2101      	movs	r1, #1
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f003 f9ba 	bl	801519c <USBD_LL_PrepareReceive>
 8011e28:	e007      	b.n	8011e3a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011e30:	2340      	movs	r3, #64	; 0x40
 8011e32:	2101      	movs	r1, #1
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f003 f9b1 	bl	801519c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011e3a:	2300      	movs	r3, #0
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3710      	adds	r7, #16
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b086      	sub	sp, #24
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	60f8      	str	r0, [r7, #12]
 8011e4c:	60b9      	str	r1, [r7, #8]
 8011e4e:	4613      	mov	r3, r2
 8011e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d101      	bne.n	8011e5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011e58:	2303      	movs	r3, #3
 8011e5a:	e01f      	b.n	8011e9c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2200      	movs	r2, #0
 8011e68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d003      	beq.n	8011e82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	68ba      	ldr	r2, [r7, #8]
 8011e7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2201      	movs	r2, #1
 8011e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	79fa      	ldrb	r2, [r7, #7]
 8011e8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011e90:	68f8      	ldr	r0, [r7, #12]
 8011e92:	f003 f829 	bl	8014ee8 <USBD_LL_Init>
 8011e96:	4603      	mov	r3, r0
 8011e98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3718      	adds	r7, #24
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b084      	sub	sp, #16
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d101      	bne.n	8011ebc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011eb8:	2303      	movs	r3, #3
 8011eba:	e016      	b.n	8011eea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	683a      	ldr	r2, [r7, #0]
 8011ec0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d00b      	beq.n	8011ee8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ed8:	f107 020e 	add.w	r2, r7, #14
 8011edc:	4610      	mov	r0, r2
 8011ede:	4798      	blx	r3
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011ee8:	2300      	movs	r3, #0
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3710      	adds	r7, #16
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}

08011ef2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011ef2:	b580      	push	{r7, lr}
 8011ef4:	b082      	sub	sp, #8
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f003 f844 	bl	8014f88 <USBD_LL_Start>
 8011f00:	4603      	mov	r3, r0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3708      	adds	r7, #8
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}

08011f0a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011f0a:	b480      	push	{r7}
 8011f0c:	b083      	sub	sp, #12
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011f12:	2300      	movs	r3, #0
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	370c      	adds	r7, #12
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr

08011f20 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	460b      	mov	r3, r1
 8011f2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011f2c:	2303      	movs	r3, #3
 8011f2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d009      	beq.n	8011f4e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	78fa      	ldrb	r2, [r7, #3]
 8011f44:	4611      	mov	r1, r2
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	4798      	blx	r3
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3710      	adds	r7, #16
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	460b      	mov	r3, r1
 8011f62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d007      	beq.n	8011f7e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	78fa      	ldrb	r2, [r7, #3]
 8011f78:	4611      	mov	r1, r2
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	4798      	blx	r3
  }

  return USBD_OK;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3708      	adds	r7, #8
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f98:	6839      	ldr	r1, [r7, #0]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f000 ff90 	bl	8012ec0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011fae:	461a      	mov	r2, r3
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011fbc:	f003 031f 	and.w	r3, r3, #31
 8011fc0:	2b02      	cmp	r3, #2
 8011fc2:	d01a      	beq.n	8011ffa <USBD_LL_SetupStage+0x72>
 8011fc4:	2b02      	cmp	r3, #2
 8011fc6:	d822      	bhi.n	801200e <USBD_LL_SetupStage+0x86>
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d002      	beq.n	8011fd2 <USBD_LL_SetupStage+0x4a>
 8011fcc:	2b01      	cmp	r3, #1
 8011fce:	d00a      	beq.n	8011fe6 <USBD_LL_SetupStage+0x5e>
 8011fd0:	e01d      	b.n	801200e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011fd8:	4619      	mov	r1, r3
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f000 fa62 	bl	80124a4 <USBD_StdDevReq>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8011fe4:	e020      	b.n	8012028 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011fec:	4619      	mov	r1, r3
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f000 fac6 	bl	8012580 <USBD_StdItfReq>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8011ff8:	e016      	b.n	8012028 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012000:	4619      	mov	r1, r3
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 fb05 	bl	8012612 <USBD_StdEPReq>
 8012008:	4603      	mov	r3, r0
 801200a:	73fb      	strb	r3, [r7, #15]
      break;
 801200c:	e00c      	b.n	8012028 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012014:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012018:	b2db      	uxtb	r3, r3
 801201a:	4619      	mov	r1, r3
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f003 f813 	bl	8015048 <USBD_LL_StallEP>
 8012022:	4603      	mov	r3, r0
 8012024:	73fb      	strb	r3, [r7, #15]
      break;
 8012026:	bf00      	nop
  }

  return ret;
 8012028:	7bfb      	ldrb	r3, [r7, #15]
}
 801202a:	4618      	mov	r0, r3
 801202c:	3710      	adds	r7, #16
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}

08012032 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012032:	b580      	push	{r7, lr}
 8012034:	b086      	sub	sp, #24
 8012036:	af00      	add	r7, sp, #0
 8012038:	60f8      	str	r0, [r7, #12]
 801203a:	460b      	mov	r3, r1
 801203c:	607a      	str	r2, [r7, #4]
 801203e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012040:	7afb      	ldrb	r3, [r7, #11]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d138      	bne.n	80120b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801204c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012054:	2b03      	cmp	r3, #3
 8012056:	d14a      	bne.n	80120ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	689a      	ldr	r2, [r3, #8]
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	68db      	ldr	r3, [r3, #12]
 8012060:	429a      	cmp	r2, r3
 8012062:	d913      	bls.n	801208c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	689a      	ldr	r2, [r3, #8]
 8012068:	693b      	ldr	r3, [r7, #16]
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	1ad2      	subs	r2, r2, r3
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	68da      	ldr	r2, [r3, #12]
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	689b      	ldr	r3, [r3, #8]
 801207a:	4293      	cmp	r3, r2
 801207c:	bf28      	it	cs
 801207e:	4613      	movcs	r3, r2
 8012080:	461a      	mov	r2, r3
 8012082:	6879      	ldr	r1, [r7, #4]
 8012084:	68f8      	ldr	r0, [r7, #12]
 8012086:	f001 f80f 	bl	80130a8 <USBD_CtlContinueRx>
 801208a:	e030      	b.n	80120ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012092:	b2db      	uxtb	r3, r3
 8012094:	2b03      	cmp	r3, #3
 8012096:	d10b      	bne.n	80120b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801209e:	691b      	ldr	r3, [r3, #16]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d005      	beq.n	80120b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120aa:	691b      	ldr	r3, [r3, #16]
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80120b0:	68f8      	ldr	r0, [r7, #12]
 80120b2:	f001 f80a 	bl	80130ca <USBD_CtlSendStatus>
 80120b6:	e01a      	b.n	80120ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	2b03      	cmp	r3, #3
 80120c2:	d114      	bne.n	80120ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120ca:	699b      	ldr	r3, [r3, #24]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d00e      	beq.n	80120ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120d6:	699b      	ldr	r3, [r3, #24]
 80120d8:	7afa      	ldrb	r2, [r7, #11]
 80120da:	4611      	mov	r1, r2
 80120dc:	68f8      	ldr	r0, [r7, #12]
 80120de:	4798      	blx	r3
 80120e0:	4603      	mov	r3, r0
 80120e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80120e4:	7dfb      	ldrb	r3, [r7, #23]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d001      	beq.n	80120ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80120ea:	7dfb      	ldrb	r3, [r7, #23]
 80120ec:	e000      	b.n	80120f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80120ee:	2300      	movs	r3, #0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3718      	adds	r7, #24
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b086      	sub	sp, #24
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	60f8      	str	r0, [r7, #12]
 8012100:	460b      	mov	r3, r1
 8012102:	607a      	str	r2, [r7, #4]
 8012104:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012106:	7afb      	ldrb	r3, [r7, #11]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d16b      	bne.n	80121e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	3314      	adds	r3, #20
 8012110:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012118:	2b02      	cmp	r3, #2
 801211a:	d156      	bne.n	80121ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	689a      	ldr	r2, [r3, #8]
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	68db      	ldr	r3, [r3, #12]
 8012124:	429a      	cmp	r2, r3
 8012126:	d914      	bls.n	8012152 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	689a      	ldr	r2, [r3, #8]
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	68db      	ldr	r3, [r3, #12]
 8012130:	1ad2      	subs	r2, r2, r3
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012136:	693b      	ldr	r3, [r7, #16]
 8012138:	689b      	ldr	r3, [r3, #8]
 801213a:	461a      	mov	r2, r3
 801213c:	6879      	ldr	r1, [r7, #4]
 801213e:	68f8      	ldr	r0, [r7, #12]
 8012140:	f000 ff84 	bl	801304c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012144:	2300      	movs	r3, #0
 8012146:	2200      	movs	r2, #0
 8012148:	2100      	movs	r1, #0
 801214a:	68f8      	ldr	r0, [r7, #12]
 801214c:	f003 f826 	bl	801519c <USBD_LL_PrepareReceive>
 8012150:	e03b      	b.n	80121ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	68da      	ldr	r2, [r3, #12]
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	689b      	ldr	r3, [r3, #8]
 801215a:	429a      	cmp	r2, r3
 801215c:	d11c      	bne.n	8012198 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	685a      	ldr	r2, [r3, #4]
 8012162:	693b      	ldr	r3, [r7, #16]
 8012164:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012166:	429a      	cmp	r2, r3
 8012168:	d316      	bcc.n	8012198 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	685a      	ldr	r2, [r3, #4]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012174:	429a      	cmp	r2, r3
 8012176:	d20f      	bcs.n	8012198 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012178:	2200      	movs	r2, #0
 801217a:	2100      	movs	r1, #0
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f000 ff65 	bl	801304c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	2200      	movs	r2, #0
 8012186:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801218a:	2300      	movs	r3, #0
 801218c:	2200      	movs	r2, #0
 801218e:	2100      	movs	r1, #0
 8012190:	68f8      	ldr	r0, [r7, #12]
 8012192:	f003 f803 	bl	801519c <USBD_LL_PrepareReceive>
 8012196:	e018      	b.n	80121ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801219e:	b2db      	uxtb	r3, r3
 80121a0:	2b03      	cmp	r3, #3
 80121a2:	d10b      	bne.n	80121bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d005      	beq.n	80121bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121b6:	68db      	ldr	r3, [r3, #12]
 80121b8:	68f8      	ldr	r0, [r7, #12]
 80121ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80121bc:	2180      	movs	r1, #128	; 0x80
 80121be:	68f8      	ldr	r0, [r7, #12]
 80121c0:	f002 ff42 	bl	8015048 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80121c4:	68f8      	ldr	r0, [r7, #12]
 80121c6:	f000 ff93 	bl	80130f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d122      	bne.n	801221a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80121d4:	68f8      	ldr	r0, [r7, #12]
 80121d6:	f7ff fe98 	bl	8011f0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2200      	movs	r2, #0
 80121de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80121e2:	e01a      	b.n	801221a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	2b03      	cmp	r3, #3
 80121ee:	d114      	bne.n	801221a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121f6:	695b      	ldr	r3, [r3, #20]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00e      	beq.n	801221a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012202:	695b      	ldr	r3, [r3, #20]
 8012204:	7afa      	ldrb	r2, [r7, #11]
 8012206:	4611      	mov	r1, r2
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	4798      	blx	r3
 801220c:	4603      	mov	r3, r0
 801220e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012210:	7dfb      	ldrb	r3, [r7, #23]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d001      	beq.n	801221a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012216:	7dfb      	ldrb	r3, [r7, #23]
 8012218:	e000      	b.n	801221c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801221a:	2300      	movs	r3, #0
}
 801221c:	4618      	mov	r0, r3
 801221e:	3718      	adds	r7, #24
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2201      	movs	r2, #1
 8012230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2200      	movs	r2, #0
 8012238:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2200      	movs	r2, #0
 8012240:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2200      	movs	r2, #0
 8012246:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012250:	2b00      	cmp	r3, #0
 8012252:	d101      	bne.n	8012258 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012254:	2303      	movs	r3, #3
 8012256:	e02f      	b.n	80122b8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801225e:	2b00      	cmp	r3, #0
 8012260:	d00f      	beq.n	8012282 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012268:	685b      	ldr	r3, [r3, #4]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d009      	beq.n	8012282 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	687a      	ldr	r2, [r7, #4]
 8012278:	6852      	ldr	r2, [r2, #4]
 801227a:	b2d2      	uxtb	r2, r2
 801227c:	4611      	mov	r1, r2
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012282:	2340      	movs	r3, #64	; 0x40
 8012284:	2200      	movs	r2, #0
 8012286:	2100      	movs	r1, #0
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f002 fe98 	bl	8014fbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2201      	movs	r2, #1
 8012292:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2240      	movs	r2, #64	; 0x40
 801229a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801229e:	2340      	movs	r3, #64	; 0x40
 80122a0:	2200      	movs	r2, #0
 80122a2:	2180      	movs	r1, #128	; 0x80
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f002 fe8a 	bl	8014fbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2201      	movs	r2, #1
 80122ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2240      	movs	r2, #64	; 0x40
 80122b4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80122b6:	2300      	movs	r3, #0
}
 80122b8:	4618      	mov	r0, r3
 80122ba:	3708      	adds	r7, #8
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}

080122c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80122c0:	b480      	push	{r7}
 80122c2:	b083      	sub	sp, #12
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
 80122c8:	460b      	mov	r3, r1
 80122ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	78fa      	ldrb	r2, [r7, #3]
 80122d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80122d2:	2300      	movs	r3, #0
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	370c      	adds	r7, #12
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122ee:	b2da      	uxtb	r2, r3
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2204      	movs	r2, #4
 80122fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80122fe:	2300      	movs	r3, #0
}
 8012300:	4618      	mov	r0, r3
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr

0801230c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801230c:	b480      	push	{r7}
 801230e:	b083      	sub	sp, #12
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801231a:	b2db      	uxtb	r3, r3
 801231c:	2b04      	cmp	r3, #4
 801231e:	d106      	bne.n	801232e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012326:	b2da      	uxtb	r2, r3
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801232e:	2300      	movs	r3, #0
}
 8012330:	4618      	mov	r0, r3
 8012332:	370c      	adds	r7, #12
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr

0801233c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801234a:	2b00      	cmp	r3, #0
 801234c:	d101      	bne.n	8012352 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801234e:	2303      	movs	r3, #3
 8012350:	e012      	b.n	8012378 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012358:	b2db      	uxtb	r3, r3
 801235a:	2b03      	cmp	r3, #3
 801235c:	d10b      	bne.n	8012376 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012364:	69db      	ldr	r3, [r3, #28]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d005      	beq.n	8012376 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012370:	69db      	ldr	r3, [r3, #28]
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012376:	2300      	movs	r3, #0
}
 8012378:	4618      	mov	r0, r3
 801237a:	3708      	adds	r7, #8
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}

08012380 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	460b      	mov	r3, r1
 801238a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012392:	2b00      	cmp	r3, #0
 8012394:	d101      	bne.n	801239a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012396:	2303      	movs	r3, #3
 8012398:	e014      	b.n	80123c4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	2b03      	cmp	r3, #3
 80123a4:	d10d      	bne.n	80123c2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123ac:	6a1b      	ldr	r3, [r3, #32]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d007      	beq.n	80123c2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123b8:	6a1b      	ldr	r3, [r3, #32]
 80123ba:	78fa      	ldrb	r2, [r7, #3]
 80123bc:	4611      	mov	r1, r2
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80123c2:	2300      	movs	r3, #0
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	460b      	mov	r3, r1
 80123d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d101      	bne.n	80123e6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80123e2:	2303      	movs	r3, #3
 80123e4:	e014      	b.n	8012410 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	2b03      	cmp	r3, #3
 80123f0:	d10d      	bne.n	801240e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d007      	beq.n	801240e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012406:	78fa      	ldrb	r2, [r7, #3]
 8012408:	4611      	mov	r1, r2
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801240e:	2300      	movs	r3, #0
}
 8012410:	4618      	mov	r0, r3
 8012412:	3708      	adds	r7, #8
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}

08012418 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012418:	b480      	push	{r7}
 801241a:	b083      	sub	sp, #12
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012420:	2300      	movs	r3, #0
}
 8012422:	4618      	mov	r0, r3
 8012424:	370c      	adds	r7, #12
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr

0801242e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801242e:	b580      	push	{r7, lr}
 8012430:	b082      	sub	sp, #8
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2201      	movs	r2, #1
 801243a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012444:	2b00      	cmp	r3, #0
 8012446:	d009      	beq.n	801245c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	687a      	ldr	r2, [r7, #4]
 8012452:	6852      	ldr	r2, [r2, #4]
 8012454:	b2d2      	uxtb	r2, r2
 8012456:	4611      	mov	r1, r2
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	4798      	blx	r3
  }

  return USBD_OK;
 801245c:	2300      	movs	r3, #0
}
 801245e:	4618      	mov	r0, r3
 8012460:	3708      	adds	r7, #8
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}

08012466 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012466:	b480      	push	{r7}
 8012468:	b087      	sub	sp, #28
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	3301      	adds	r3, #1
 801247c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012484:	8a3b      	ldrh	r3, [r7, #16]
 8012486:	021b      	lsls	r3, r3, #8
 8012488:	b21a      	sxth	r2, r3
 801248a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801248e:	4313      	orrs	r3, r2
 8012490:	b21b      	sxth	r3, r3
 8012492:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012494:	89fb      	ldrh	r3, [r7, #14]
}
 8012496:	4618      	mov	r0, r3
 8012498:	371c      	adds	r7, #28
 801249a:	46bd      	mov	sp, r7
 801249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a0:	4770      	bx	lr
	...

080124a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b084      	sub	sp, #16
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80124ae:	2300      	movs	r3, #0
 80124b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	781b      	ldrb	r3, [r3, #0]
 80124b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80124ba:	2b40      	cmp	r3, #64	; 0x40
 80124bc:	d005      	beq.n	80124ca <USBD_StdDevReq+0x26>
 80124be:	2b40      	cmp	r3, #64	; 0x40
 80124c0:	d853      	bhi.n	801256a <USBD_StdDevReq+0xc6>
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00b      	beq.n	80124de <USBD_StdDevReq+0x3a>
 80124c6:	2b20      	cmp	r3, #32
 80124c8:	d14f      	bne.n	801256a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124d0:	689b      	ldr	r3, [r3, #8]
 80124d2:	6839      	ldr	r1, [r7, #0]
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	4798      	blx	r3
 80124d8:	4603      	mov	r3, r0
 80124da:	73fb      	strb	r3, [r7, #15]
      break;
 80124dc:	e04a      	b.n	8012574 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	785b      	ldrb	r3, [r3, #1]
 80124e2:	2b09      	cmp	r3, #9
 80124e4:	d83b      	bhi.n	801255e <USBD_StdDevReq+0xba>
 80124e6:	a201      	add	r2, pc, #4	; (adr r2, 80124ec <USBD_StdDevReq+0x48>)
 80124e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ec:	08012541 	.word	0x08012541
 80124f0:	08012555 	.word	0x08012555
 80124f4:	0801255f 	.word	0x0801255f
 80124f8:	0801254b 	.word	0x0801254b
 80124fc:	0801255f 	.word	0x0801255f
 8012500:	0801251f 	.word	0x0801251f
 8012504:	08012515 	.word	0x08012515
 8012508:	0801255f 	.word	0x0801255f
 801250c:	08012537 	.word	0x08012537
 8012510:	08012529 	.word	0x08012529
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012514:	6839      	ldr	r1, [r7, #0]
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f000 f9de 	bl	80128d8 <USBD_GetDescriptor>
          break;
 801251c:	e024      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801251e:	6839      	ldr	r1, [r7, #0]
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f000 fb43 	bl	8012bac <USBD_SetAddress>
          break;
 8012526:	e01f      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012528:	6839      	ldr	r1, [r7, #0]
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f000 fb82 	bl	8012c34 <USBD_SetConfig>
 8012530:	4603      	mov	r3, r0
 8012532:	73fb      	strb	r3, [r7, #15]
          break;
 8012534:	e018      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012536:	6839      	ldr	r1, [r7, #0]
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f000 fc21 	bl	8012d80 <USBD_GetConfig>
          break;
 801253e:	e013      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012540:	6839      	ldr	r1, [r7, #0]
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 fc52 	bl	8012dec <USBD_GetStatus>
          break;
 8012548:	e00e      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801254a:	6839      	ldr	r1, [r7, #0]
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 fc81 	bl	8012e54 <USBD_SetFeature>
          break;
 8012552:	e009      	b.n	8012568 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012554:	6839      	ldr	r1, [r7, #0]
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 fc90 	bl	8012e7c <USBD_ClrFeature>
          break;
 801255c:	e004      	b.n	8012568 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801255e:	6839      	ldr	r1, [r7, #0]
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 fce7 	bl	8012f34 <USBD_CtlError>
          break;
 8012566:	bf00      	nop
      }
      break;
 8012568:	e004      	b.n	8012574 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801256a:	6839      	ldr	r1, [r7, #0]
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f000 fce1 	bl	8012f34 <USBD_CtlError>
      break;
 8012572:	bf00      	nop
  }

  return ret;
 8012574:	7bfb      	ldrb	r3, [r7, #15]
}
 8012576:	4618      	mov	r0, r3
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}
 801257e:	bf00      	nop

08012580 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801258a:	2300      	movs	r3, #0
 801258c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012596:	2b40      	cmp	r3, #64	; 0x40
 8012598:	d005      	beq.n	80125a6 <USBD_StdItfReq+0x26>
 801259a:	2b40      	cmp	r3, #64	; 0x40
 801259c:	d82f      	bhi.n	80125fe <USBD_StdItfReq+0x7e>
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d001      	beq.n	80125a6 <USBD_StdItfReq+0x26>
 80125a2:	2b20      	cmp	r3, #32
 80125a4:	d12b      	bne.n	80125fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	3b01      	subs	r3, #1
 80125b0:	2b02      	cmp	r3, #2
 80125b2:	d81d      	bhi.n	80125f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	889b      	ldrh	r3, [r3, #4]
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d813      	bhi.n	80125e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125c4:	689b      	ldr	r3, [r3, #8]
 80125c6:	6839      	ldr	r1, [r7, #0]
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	4798      	blx	r3
 80125cc:	4603      	mov	r3, r0
 80125ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	88db      	ldrh	r3, [r3, #6]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d110      	bne.n	80125fa <USBD_StdItfReq+0x7a>
 80125d8:	7bfb      	ldrb	r3, [r7, #15]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d10d      	bne.n	80125fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f000 fd73 	bl	80130ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80125e4:	e009      	b.n	80125fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80125e6:	6839      	ldr	r1, [r7, #0]
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 fca3 	bl	8012f34 <USBD_CtlError>
          break;
 80125ee:	e004      	b.n	80125fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80125f0:	6839      	ldr	r1, [r7, #0]
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f000 fc9e 	bl	8012f34 <USBD_CtlError>
          break;
 80125f8:	e000      	b.n	80125fc <USBD_StdItfReq+0x7c>
          break;
 80125fa:	bf00      	nop
      }
      break;
 80125fc:	e004      	b.n	8012608 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80125fe:	6839      	ldr	r1, [r7, #0]
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f000 fc97 	bl	8012f34 <USBD_CtlError>
      break;
 8012606:	bf00      	nop
  }

  return ret;
 8012608:	7bfb      	ldrb	r3, [r7, #15]
}
 801260a:	4618      	mov	r0, r3
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}

08012612 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012612:	b580      	push	{r7, lr}
 8012614:	b084      	sub	sp, #16
 8012616:	af00      	add	r7, sp, #0
 8012618:	6078      	str	r0, [r7, #4]
 801261a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801261c:	2300      	movs	r3, #0
 801261e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	889b      	ldrh	r3, [r3, #4]
 8012624:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801262e:	2b40      	cmp	r3, #64	; 0x40
 8012630:	d007      	beq.n	8012642 <USBD_StdEPReq+0x30>
 8012632:	2b40      	cmp	r3, #64	; 0x40
 8012634:	f200 8145 	bhi.w	80128c2 <USBD_StdEPReq+0x2b0>
 8012638:	2b00      	cmp	r3, #0
 801263a:	d00c      	beq.n	8012656 <USBD_StdEPReq+0x44>
 801263c:	2b20      	cmp	r3, #32
 801263e:	f040 8140 	bne.w	80128c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012648:	689b      	ldr	r3, [r3, #8]
 801264a:	6839      	ldr	r1, [r7, #0]
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	4798      	blx	r3
 8012650:	4603      	mov	r3, r0
 8012652:	73fb      	strb	r3, [r7, #15]
      break;
 8012654:	e13a      	b.n	80128cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	785b      	ldrb	r3, [r3, #1]
 801265a:	2b03      	cmp	r3, #3
 801265c:	d007      	beq.n	801266e <USBD_StdEPReq+0x5c>
 801265e:	2b03      	cmp	r3, #3
 8012660:	f300 8129 	bgt.w	80128b6 <USBD_StdEPReq+0x2a4>
 8012664:	2b00      	cmp	r3, #0
 8012666:	d07f      	beq.n	8012768 <USBD_StdEPReq+0x156>
 8012668:	2b01      	cmp	r3, #1
 801266a:	d03c      	beq.n	80126e6 <USBD_StdEPReq+0xd4>
 801266c:	e123      	b.n	80128b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012674:	b2db      	uxtb	r3, r3
 8012676:	2b02      	cmp	r3, #2
 8012678:	d002      	beq.n	8012680 <USBD_StdEPReq+0x6e>
 801267a:	2b03      	cmp	r3, #3
 801267c:	d016      	beq.n	80126ac <USBD_StdEPReq+0x9a>
 801267e:	e02c      	b.n	80126da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012680:	7bbb      	ldrb	r3, [r7, #14]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d00d      	beq.n	80126a2 <USBD_StdEPReq+0x90>
 8012686:	7bbb      	ldrb	r3, [r7, #14]
 8012688:	2b80      	cmp	r3, #128	; 0x80
 801268a:	d00a      	beq.n	80126a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801268c:	7bbb      	ldrb	r3, [r7, #14]
 801268e:	4619      	mov	r1, r3
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f002 fcd9 	bl	8015048 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012696:	2180      	movs	r1, #128	; 0x80
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f002 fcd5 	bl	8015048 <USBD_LL_StallEP>
 801269e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80126a0:	e020      	b.n	80126e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80126a2:	6839      	ldr	r1, [r7, #0]
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f000 fc45 	bl	8012f34 <USBD_CtlError>
              break;
 80126aa:	e01b      	b.n	80126e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	885b      	ldrh	r3, [r3, #2]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d10e      	bne.n	80126d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80126b4:	7bbb      	ldrb	r3, [r7, #14]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00b      	beq.n	80126d2 <USBD_StdEPReq+0xc0>
 80126ba:	7bbb      	ldrb	r3, [r7, #14]
 80126bc:	2b80      	cmp	r3, #128	; 0x80
 80126be:	d008      	beq.n	80126d2 <USBD_StdEPReq+0xc0>
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	88db      	ldrh	r3, [r3, #6]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d104      	bne.n	80126d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80126c8:	7bbb      	ldrb	r3, [r7, #14]
 80126ca:	4619      	mov	r1, r3
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f002 fcbb 	bl	8015048 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f000 fcf9 	bl	80130ca <USBD_CtlSendStatus>

              break;
 80126d8:	e004      	b.n	80126e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80126da:	6839      	ldr	r1, [r7, #0]
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f000 fc29 	bl	8012f34 <USBD_CtlError>
              break;
 80126e2:	bf00      	nop
          }
          break;
 80126e4:	e0ec      	b.n	80128c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126ec:	b2db      	uxtb	r3, r3
 80126ee:	2b02      	cmp	r3, #2
 80126f0:	d002      	beq.n	80126f8 <USBD_StdEPReq+0xe6>
 80126f2:	2b03      	cmp	r3, #3
 80126f4:	d016      	beq.n	8012724 <USBD_StdEPReq+0x112>
 80126f6:	e030      	b.n	801275a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80126f8:	7bbb      	ldrb	r3, [r7, #14]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d00d      	beq.n	801271a <USBD_StdEPReq+0x108>
 80126fe:	7bbb      	ldrb	r3, [r7, #14]
 8012700:	2b80      	cmp	r3, #128	; 0x80
 8012702:	d00a      	beq.n	801271a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012704:	7bbb      	ldrb	r3, [r7, #14]
 8012706:	4619      	mov	r1, r3
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f002 fc9d 	bl	8015048 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801270e:	2180      	movs	r1, #128	; 0x80
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f002 fc99 	bl	8015048 <USBD_LL_StallEP>
 8012716:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012718:	e025      	b.n	8012766 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801271a:	6839      	ldr	r1, [r7, #0]
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f000 fc09 	bl	8012f34 <USBD_CtlError>
              break;
 8012722:	e020      	b.n	8012766 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	885b      	ldrh	r3, [r3, #2]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d11b      	bne.n	8012764 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801272c:	7bbb      	ldrb	r3, [r7, #14]
 801272e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012732:	2b00      	cmp	r3, #0
 8012734:	d004      	beq.n	8012740 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012736:	7bbb      	ldrb	r3, [r7, #14]
 8012738:	4619      	mov	r1, r3
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f002 fca3 	bl	8015086 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f000 fcc2 	bl	80130ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801274c:	689b      	ldr	r3, [r3, #8]
 801274e:	6839      	ldr	r1, [r7, #0]
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	4798      	blx	r3
 8012754:	4603      	mov	r3, r0
 8012756:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012758:	e004      	b.n	8012764 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801275a:	6839      	ldr	r1, [r7, #0]
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 fbe9 	bl	8012f34 <USBD_CtlError>
              break;
 8012762:	e000      	b.n	8012766 <USBD_StdEPReq+0x154>
              break;
 8012764:	bf00      	nop
          }
          break;
 8012766:	e0ab      	b.n	80128c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801276e:	b2db      	uxtb	r3, r3
 8012770:	2b02      	cmp	r3, #2
 8012772:	d002      	beq.n	801277a <USBD_StdEPReq+0x168>
 8012774:	2b03      	cmp	r3, #3
 8012776:	d032      	beq.n	80127de <USBD_StdEPReq+0x1cc>
 8012778:	e097      	b.n	80128aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801277a:	7bbb      	ldrb	r3, [r7, #14]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d007      	beq.n	8012790 <USBD_StdEPReq+0x17e>
 8012780:	7bbb      	ldrb	r3, [r7, #14]
 8012782:	2b80      	cmp	r3, #128	; 0x80
 8012784:	d004      	beq.n	8012790 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8012786:	6839      	ldr	r1, [r7, #0]
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f000 fbd3 	bl	8012f34 <USBD_CtlError>
                break;
 801278e:	e091      	b.n	80128b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012794:	2b00      	cmp	r3, #0
 8012796:	da0b      	bge.n	80127b0 <USBD_StdEPReq+0x19e>
 8012798:	7bbb      	ldrb	r3, [r7, #14]
 801279a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801279e:	4613      	mov	r3, r2
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	4413      	add	r3, r2
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	3310      	adds	r3, #16
 80127a8:	687a      	ldr	r2, [r7, #4]
 80127aa:	4413      	add	r3, r2
 80127ac:	3304      	adds	r3, #4
 80127ae:	e00b      	b.n	80127c8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80127b0:	7bbb      	ldrb	r3, [r7, #14]
 80127b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80127b6:	4613      	mov	r3, r2
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	4413      	add	r3, r2
 80127bc:	009b      	lsls	r3, r3, #2
 80127be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	4413      	add	r3, r2
 80127c6:	3304      	adds	r3, #4
 80127c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	2200      	movs	r2, #0
 80127ce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	2202      	movs	r2, #2
 80127d4:	4619      	mov	r1, r3
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 fc1d 	bl	8013016 <USBD_CtlSendData>
              break;
 80127dc:	e06a      	b.n	80128b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80127de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	da11      	bge.n	801280a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80127e6:	7bbb      	ldrb	r3, [r7, #14]
 80127e8:	f003 020f 	and.w	r2, r3, #15
 80127ec:	6879      	ldr	r1, [r7, #4]
 80127ee:	4613      	mov	r3, r2
 80127f0:	009b      	lsls	r3, r3, #2
 80127f2:	4413      	add	r3, r2
 80127f4:	009b      	lsls	r3, r3, #2
 80127f6:	440b      	add	r3, r1
 80127f8:	3324      	adds	r3, #36	; 0x24
 80127fa:	881b      	ldrh	r3, [r3, #0]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d117      	bne.n	8012830 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012800:	6839      	ldr	r1, [r7, #0]
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f000 fb96 	bl	8012f34 <USBD_CtlError>
                  break;
 8012808:	e054      	b.n	80128b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801280a:	7bbb      	ldrb	r3, [r7, #14]
 801280c:	f003 020f 	and.w	r2, r3, #15
 8012810:	6879      	ldr	r1, [r7, #4]
 8012812:	4613      	mov	r3, r2
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	4413      	add	r3, r2
 8012818:	009b      	lsls	r3, r3, #2
 801281a:	440b      	add	r3, r1
 801281c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012820:	881b      	ldrh	r3, [r3, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d104      	bne.n	8012830 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012826:	6839      	ldr	r1, [r7, #0]
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 fb83 	bl	8012f34 <USBD_CtlError>
                  break;
 801282e:	e041      	b.n	80128b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012834:	2b00      	cmp	r3, #0
 8012836:	da0b      	bge.n	8012850 <USBD_StdEPReq+0x23e>
 8012838:	7bbb      	ldrb	r3, [r7, #14]
 801283a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801283e:	4613      	mov	r3, r2
 8012840:	009b      	lsls	r3, r3, #2
 8012842:	4413      	add	r3, r2
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	3310      	adds	r3, #16
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	4413      	add	r3, r2
 801284c:	3304      	adds	r3, #4
 801284e:	e00b      	b.n	8012868 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012850:	7bbb      	ldrb	r3, [r7, #14]
 8012852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012856:	4613      	mov	r3, r2
 8012858:	009b      	lsls	r3, r3, #2
 801285a:	4413      	add	r3, r2
 801285c:	009b      	lsls	r3, r3, #2
 801285e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	4413      	add	r3, r2
 8012866:	3304      	adds	r3, #4
 8012868:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801286a:	7bbb      	ldrb	r3, [r7, #14]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d002      	beq.n	8012876 <USBD_StdEPReq+0x264>
 8012870:	7bbb      	ldrb	r3, [r7, #14]
 8012872:	2b80      	cmp	r3, #128	; 0x80
 8012874:	d103      	bne.n	801287e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	2200      	movs	r2, #0
 801287a:	601a      	str	r2, [r3, #0]
 801287c:	e00e      	b.n	801289c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801287e:	7bbb      	ldrb	r3, [r7, #14]
 8012880:	4619      	mov	r1, r3
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f002 fc1e 	bl	80150c4 <USBD_LL_IsStallEP>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d003      	beq.n	8012896 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	2201      	movs	r2, #1
 8012892:	601a      	str	r2, [r3, #0]
 8012894:	e002      	b.n	801289c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	2200      	movs	r2, #0
 801289a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	2202      	movs	r2, #2
 80128a0:	4619      	mov	r1, r3
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 fbb7 	bl	8013016 <USBD_CtlSendData>
              break;
 80128a8:	e004      	b.n	80128b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80128aa:	6839      	ldr	r1, [r7, #0]
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 fb41 	bl	8012f34 <USBD_CtlError>
              break;
 80128b2:	bf00      	nop
          }
          break;
 80128b4:	e004      	b.n	80128c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80128b6:	6839      	ldr	r1, [r7, #0]
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f000 fb3b 	bl	8012f34 <USBD_CtlError>
          break;
 80128be:	bf00      	nop
      }
      break;
 80128c0:	e004      	b.n	80128cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80128c2:	6839      	ldr	r1, [r7, #0]
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 fb35 	bl	8012f34 <USBD_CtlError>
      break;
 80128ca:	bf00      	nop
  }

  return ret;
 80128cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
	...

080128d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b084      	sub	sp, #16
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80128e2:	2300      	movs	r3, #0
 80128e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80128e6:	2300      	movs	r3, #0
 80128e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80128ea:	2300      	movs	r3, #0
 80128ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	885b      	ldrh	r3, [r3, #2]
 80128f2:	0a1b      	lsrs	r3, r3, #8
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	3b01      	subs	r3, #1
 80128f8:	2b06      	cmp	r3, #6
 80128fa:	f200 8128 	bhi.w	8012b4e <USBD_GetDescriptor+0x276>
 80128fe:	a201      	add	r2, pc, #4	; (adr r2, 8012904 <USBD_GetDescriptor+0x2c>)
 8012900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012904:	08012921 	.word	0x08012921
 8012908:	08012939 	.word	0x08012939
 801290c:	08012979 	.word	0x08012979
 8012910:	08012b4f 	.word	0x08012b4f
 8012914:	08012b4f 	.word	0x08012b4f
 8012918:	08012aef 	.word	0x08012aef
 801291c:	08012b1b 	.word	0x08012b1b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	7c12      	ldrb	r2, [r2, #16]
 801292c:	f107 0108 	add.w	r1, r7, #8
 8012930:	4610      	mov	r0, r2
 8012932:	4798      	blx	r3
 8012934:	60f8      	str	r0, [r7, #12]
      break;
 8012936:	e112      	b.n	8012b5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	7c1b      	ldrb	r3, [r3, #16]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d10d      	bne.n	801295c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012948:	f107 0208 	add.w	r2, r7, #8
 801294c:	4610      	mov	r0, r2
 801294e:	4798      	blx	r3
 8012950:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	3301      	adds	r3, #1
 8012956:	2202      	movs	r2, #2
 8012958:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801295a:	e100      	b.n	8012b5e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012964:	f107 0208 	add.w	r2, r7, #8
 8012968:	4610      	mov	r0, r2
 801296a:	4798      	blx	r3
 801296c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	3301      	adds	r3, #1
 8012972:	2202      	movs	r2, #2
 8012974:	701a      	strb	r2, [r3, #0]
      break;
 8012976:	e0f2      	b.n	8012b5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	885b      	ldrh	r3, [r3, #2]
 801297c:	b2db      	uxtb	r3, r3
 801297e:	2b05      	cmp	r3, #5
 8012980:	f200 80ac 	bhi.w	8012adc <USBD_GetDescriptor+0x204>
 8012984:	a201      	add	r2, pc, #4	; (adr r2, 801298c <USBD_GetDescriptor+0xb4>)
 8012986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801298a:	bf00      	nop
 801298c:	080129a5 	.word	0x080129a5
 8012990:	080129d9 	.word	0x080129d9
 8012994:	08012a0d 	.word	0x08012a0d
 8012998:	08012a41 	.word	0x08012a41
 801299c:	08012a75 	.word	0x08012a75
 80129a0:	08012aa9 	.word	0x08012aa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d00b      	beq.n	80129c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	7c12      	ldrb	r2, [r2, #16]
 80129bc:	f107 0108 	add.w	r1, r7, #8
 80129c0:	4610      	mov	r0, r2
 80129c2:	4798      	blx	r3
 80129c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80129c6:	e091      	b.n	8012aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80129c8:	6839      	ldr	r1, [r7, #0]
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	f000 fab2 	bl	8012f34 <USBD_CtlError>
            err++;
 80129d0:	7afb      	ldrb	r3, [r7, #11]
 80129d2:	3301      	adds	r3, #1
 80129d4:	72fb      	strb	r3, [r7, #11]
          break;
 80129d6:	e089      	b.n	8012aec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d00b      	beq.n	80129fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129ea:	689b      	ldr	r3, [r3, #8]
 80129ec:	687a      	ldr	r2, [r7, #4]
 80129ee:	7c12      	ldrb	r2, [r2, #16]
 80129f0:	f107 0108 	add.w	r1, r7, #8
 80129f4:	4610      	mov	r0, r2
 80129f6:	4798      	blx	r3
 80129f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80129fa:	e077      	b.n	8012aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80129fc:	6839      	ldr	r1, [r7, #0]
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f000 fa98 	bl	8012f34 <USBD_CtlError>
            err++;
 8012a04:	7afb      	ldrb	r3, [r7, #11]
 8012a06:	3301      	adds	r3, #1
 8012a08:	72fb      	strb	r3, [r7, #11]
          break;
 8012a0a:	e06f      	b.n	8012aec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d00b      	beq.n	8012a30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a1e:	68db      	ldr	r3, [r3, #12]
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	7c12      	ldrb	r2, [r2, #16]
 8012a24:	f107 0108 	add.w	r1, r7, #8
 8012a28:	4610      	mov	r0, r2
 8012a2a:	4798      	blx	r3
 8012a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a2e:	e05d      	b.n	8012aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012a30:	6839      	ldr	r1, [r7, #0]
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f000 fa7e 	bl	8012f34 <USBD_CtlError>
            err++;
 8012a38:	7afb      	ldrb	r3, [r7, #11]
 8012a3a:	3301      	adds	r3, #1
 8012a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8012a3e:	e055      	b.n	8012aec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a46:	691b      	ldr	r3, [r3, #16]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d00b      	beq.n	8012a64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a52:	691b      	ldr	r3, [r3, #16]
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	7c12      	ldrb	r2, [r2, #16]
 8012a58:	f107 0108 	add.w	r1, r7, #8
 8012a5c:	4610      	mov	r0, r2
 8012a5e:	4798      	blx	r3
 8012a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a62:	e043      	b.n	8012aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012a64:	6839      	ldr	r1, [r7, #0]
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f000 fa64 	bl	8012f34 <USBD_CtlError>
            err++;
 8012a6c:	7afb      	ldrb	r3, [r7, #11]
 8012a6e:	3301      	adds	r3, #1
 8012a70:	72fb      	strb	r3, [r7, #11]
          break;
 8012a72:	e03b      	b.n	8012aec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a7a:	695b      	ldr	r3, [r3, #20]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d00b      	beq.n	8012a98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a86:	695b      	ldr	r3, [r3, #20]
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	7c12      	ldrb	r2, [r2, #16]
 8012a8c:	f107 0108 	add.w	r1, r7, #8
 8012a90:	4610      	mov	r0, r2
 8012a92:	4798      	blx	r3
 8012a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a96:	e029      	b.n	8012aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012a98:	6839      	ldr	r1, [r7, #0]
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f000 fa4a 	bl	8012f34 <USBD_CtlError>
            err++;
 8012aa0:	7afb      	ldrb	r3, [r7, #11]
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8012aa6:	e021      	b.n	8012aec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aae:	699b      	ldr	r3, [r3, #24]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00b      	beq.n	8012acc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aba:	699b      	ldr	r3, [r3, #24]
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	7c12      	ldrb	r2, [r2, #16]
 8012ac0:	f107 0108 	add.w	r1, r7, #8
 8012ac4:	4610      	mov	r0, r2
 8012ac6:	4798      	blx	r3
 8012ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012aca:	e00f      	b.n	8012aec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012acc:	6839      	ldr	r1, [r7, #0]
 8012ace:	6878      	ldr	r0, [r7, #4]
 8012ad0:	f000 fa30 	bl	8012f34 <USBD_CtlError>
            err++;
 8012ad4:	7afb      	ldrb	r3, [r7, #11]
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8012ada:	e007      	b.n	8012aec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012adc:	6839      	ldr	r1, [r7, #0]
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f000 fa28 	bl	8012f34 <USBD_CtlError>
          err++;
 8012ae4:	7afb      	ldrb	r3, [r7, #11]
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012aea:	bf00      	nop
      }
      break;
 8012aec:	e037      	b.n	8012b5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	7c1b      	ldrb	r3, [r3, #16]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d109      	bne.n	8012b0a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012afe:	f107 0208 	add.w	r2, r7, #8
 8012b02:	4610      	mov	r0, r2
 8012b04:	4798      	blx	r3
 8012b06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b08:	e029      	b.n	8012b5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012b0a:	6839      	ldr	r1, [r7, #0]
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f000 fa11 	bl	8012f34 <USBD_CtlError>
        err++;
 8012b12:	7afb      	ldrb	r3, [r7, #11]
 8012b14:	3301      	adds	r3, #1
 8012b16:	72fb      	strb	r3, [r7, #11]
      break;
 8012b18:	e021      	b.n	8012b5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	7c1b      	ldrb	r3, [r3, #16]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d10d      	bne.n	8012b3e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b2a:	f107 0208 	add.w	r2, r7, #8
 8012b2e:	4610      	mov	r0, r2
 8012b30:	4798      	blx	r3
 8012b32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	3301      	adds	r3, #1
 8012b38:	2207      	movs	r2, #7
 8012b3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b3c:	e00f      	b.n	8012b5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012b3e:	6839      	ldr	r1, [r7, #0]
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f000 f9f7 	bl	8012f34 <USBD_CtlError>
        err++;
 8012b46:	7afb      	ldrb	r3, [r7, #11]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8012b4c:	e007      	b.n	8012b5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012b4e:	6839      	ldr	r1, [r7, #0]
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f000 f9ef 	bl	8012f34 <USBD_CtlError>
      err++;
 8012b56:	7afb      	ldrb	r3, [r7, #11]
 8012b58:	3301      	adds	r3, #1
 8012b5a:	72fb      	strb	r3, [r7, #11]
      break;
 8012b5c:	bf00      	nop
  }

  if (err != 0U)
 8012b5e:	7afb      	ldrb	r3, [r7, #11]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d11e      	bne.n	8012ba2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	88db      	ldrh	r3, [r3, #6]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d016      	beq.n	8012b9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012b6c:	893b      	ldrh	r3, [r7, #8]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d00e      	beq.n	8012b90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	88da      	ldrh	r2, [r3, #6]
 8012b76:	893b      	ldrh	r3, [r7, #8]
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	bf28      	it	cs
 8012b7c:	4613      	movcs	r3, r2
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012b82:	893b      	ldrh	r3, [r7, #8]
 8012b84:	461a      	mov	r2, r3
 8012b86:	68f9      	ldr	r1, [r7, #12]
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f000 fa44 	bl	8013016 <USBD_CtlSendData>
 8012b8e:	e009      	b.n	8012ba4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012b90:	6839      	ldr	r1, [r7, #0]
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f000 f9ce 	bl	8012f34 <USBD_CtlError>
 8012b98:	e004      	b.n	8012ba4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f000 fa95 	bl	80130ca <USBD_CtlSendStatus>
 8012ba0:	e000      	b.n	8012ba4 <USBD_GetDescriptor+0x2cc>
    return;
 8012ba2:	bf00      	nop
  }
}
 8012ba4:	3710      	adds	r7, #16
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop

08012bac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	889b      	ldrh	r3, [r3, #4]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d131      	bne.n	8012c22 <USBD_SetAddress+0x76>
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	88db      	ldrh	r3, [r3, #6]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d12d      	bne.n	8012c22 <USBD_SetAddress+0x76>
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	885b      	ldrh	r3, [r3, #2]
 8012bca:	2b7f      	cmp	r3, #127	; 0x7f
 8012bcc:	d829      	bhi.n	8012c22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	885b      	ldrh	r3, [r3, #2]
 8012bd2:	b2db      	uxtb	r3, r3
 8012bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012bd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012be0:	b2db      	uxtb	r3, r3
 8012be2:	2b03      	cmp	r3, #3
 8012be4:	d104      	bne.n	8012bf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012be6:	6839      	ldr	r1, [r7, #0]
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f000 f9a3 	bl	8012f34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bee:	e01d      	b.n	8012c2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	7bfa      	ldrb	r2, [r7, #15]
 8012bf4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012bf8:	7bfb      	ldrb	r3, [r7, #15]
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f002 fa8d 	bl	801511c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f000 fa61 	bl	80130ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012c08:	7bfb      	ldrb	r3, [r7, #15]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d004      	beq.n	8012c18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2202      	movs	r2, #2
 8012c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c16:	e009      	b.n	8012c2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c20:	e004      	b.n	8012c2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012c22:	6839      	ldr	r1, [r7, #0]
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f000 f985 	bl	8012f34 <USBD_CtlError>
  }
}
 8012c2a:	bf00      	nop
 8012c2c:	bf00      	nop
 8012c2e:	3710      	adds	r7, #16
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}

08012c34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b084      	sub	sp, #16
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
 8012c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	885b      	ldrh	r3, [r3, #2]
 8012c46:	b2da      	uxtb	r2, r3
 8012c48:	4b4c      	ldr	r3, [pc, #304]	; (8012d7c <USBD_SetConfig+0x148>)
 8012c4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012c4c:	4b4b      	ldr	r3, [pc, #300]	; (8012d7c <USBD_SetConfig+0x148>)
 8012c4e:	781b      	ldrb	r3, [r3, #0]
 8012c50:	2b01      	cmp	r3, #1
 8012c52:	d905      	bls.n	8012c60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012c54:	6839      	ldr	r1, [r7, #0]
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 f96c 	bl	8012f34 <USBD_CtlError>
    return USBD_FAIL;
 8012c5c:	2303      	movs	r3, #3
 8012c5e:	e088      	b.n	8012d72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	2b02      	cmp	r3, #2
 8012c6a:	d002      	beq.n	8012c72 <USBD_SetConfig+0x3e>
 8012c6c:	2b03      	cmp	r3, #3
 8012c6e:	d025      	beq.n	8012cbc <USBD_SetConfig+0x88>
 8012c70:	e071      	b.n	8012d56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012c72:	4b42      	ldr	r3, [pc, #264]	; (8012d7c <USBD_SetConfig+0x148>)
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d01c      	beq.n	8012cb4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012c7a:	4b40      	ldr	r3, [pc, #256]	; (8012d7c <USBD_SetConfig+0x148>)
 8012c7c:	781b      	ldrb	r3, [r3, #0]
 8012c7e:	461a      	mov	r2, r3
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012c84:	4b3d      	ldr	r3, [pc, #244]	; (8012d7c <USBD_SetConfig+0x148>)
 8012c86:	781b      	ldrb	r3, [r3, #0]
 8012c88:	4619      	mov	r1, r3
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f7ff f948 	bl	8011f20 <USBD_SetClassConfig>
 8012c90:	4603      	mov	r3, r0
 8012c92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012c94:	7bfb      	ldrb	r3, [r7, #15]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d004      	beq.n	8012ca4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012c9a:	6839      	ldr	r1, [r7, #0]
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f000 f949 	bl	8012f34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012ca2:	e065      	b.n	8012d70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f000 fa10 	bl	80130ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2203      	movs	r2, #3
 8012cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012cb2:	e05d      	b.n	8012d70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f000 fa08 	bl	80130ca <USBD_CtlSendStatus>
      break;
 8012cba:	e059      	b.n	8012d70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012cbc:	4b2f      	ldr	r3, [pc, #188]	; (8012d7c <USBD_SetConfig+0x148>)
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d112      	bne.n	8012cea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2202      	movs	r2, #2
 8012cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012ccc:	4b2b      	ldr	r3, [pc, #172]	; (8012d7c <USBD_SetConfig+0x148>)
 8012cce:	781b      	ldrb	r3, [r3, #0]
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012cd6:	4b29      	ldr	r3, [pc, #164]	; (8012d7c <USBD_SetConfig+0x148>)
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	4619      	mov	r1, r3
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f7ff f93b 	bl	8011f58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f000 f9f1 	bl	80130ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012ce8:	e042      	b.n	8012d70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012cea:	4b24      	ldr	r3, [pc, #144]	; (8012d7c <USBD_SetConfig+0x148>)
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	461a      	mov	r2, r3
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d02a      	beq.n	8012d4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	4619      	mov	r1, r3
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f7ff f929 	bl	8011f58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012d06:	4b1d      	ldr	r3, [pc, #116]	; (8012d7c <USBD_SetConfig+0x148>)
 8012d08:	781b      	ldrb	r3, [r3, #0]
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012d10:	4b1a      	ldr	r3, [pc, #104]	; (8012d7c <USBD_SetConfig+0x148>)
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	4619      	mov	r1, r3
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f7ff f902 	bl	8011f20 <USBD_SetClassConfig>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012d20:	7bfb      	ldrb	r3, [r7, #15]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d00f      	beq.n	8012d46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012d26:	6839      	ldr	r1, [r7, #0]
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f000 f903 	bl	8012f34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	b2db      	uxtb	r3, r3
 8012d34:	4619      	mov	r1, r3
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7ff f90e 	bl	8011f58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2202      	movs	r2, #2
 8012d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012d44:	e014      	b.n	8012d70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f000 f9bf 	bl	80130ca <USBD_CtlSendStatus>
      break;
 8012d4c:	e010      	b.n	8012d70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f000 f9bb 	bl	80130ca <USBD_CtlSendStatus>
      break;
 8012d54:	e00c      	b.n	8012d70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012d56:	6839      	ldr	r1, [r7, #0]
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f000 f8eb 	bl	8012f34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012d5e:	4b07      	ldr	r3, [pc, #28]	; (8012d7c <USBD_SetConfig+0x148>)
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	4619      	mov	r1, r3
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f7ff f8f7 	bl	8011f58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012d6a:	2303      	movs	r3, #3
 8012d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8012d6e:	bf00      	nop
  }

  return ret;
 8012d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3710      	adds	r7, #16
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	24000c0c 	.word	0x24000c0c

08012d80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	88db      	ldrh	r3, [r3, #6]
 8012d8e:	2b01      	cmp	r3, #1
 8012d90:	d004      	beq.n	8012d9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012d92:	6839      	ldr	r1, [r7, #0]
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 f8cd 	bl	8012f34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012d9a:	e023      	b.n	8012de4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	2b02      	cmp	r3, #2
 8012da6:	dc02      	bgt.n	8012dae <USBD_GetConfig+0x2e>
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	dc03      	bgt.n	8012db4 <USBD_GetConfig+0x34>
 8012dac:	e015      	b.n	8012dda <USBD_GetConfig+0x5a>
 8012dae:	2b03      	cmp	r3, #3
 8012db0:	d00b      	beq.n	8012dca <USBD_GetConfig+0x4a>
 8012db2:	e012      	b.n	8012dda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2200      	movs	r2, #0
 8012db8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	3308      	adds	r3, #8
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	4619      	mov	r1, r3
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f000 f927 	bl	8013016 <USBD_CtlSendData>
        break;
 8012dc8:	e00c      	b.n	8012de4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	3304      	adds	r3, #4
 8012dce:	2201      	movs	r2, #1
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f000 f91f 	bl	8013016 <USBD_CtlSendData>
        break;
 8012dd8:	e004      	b.n	8012de4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012dda:	6839      	ldr	r1, [r7, #0]
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f000 f8a9 	bl	8012f34 <USBD_CtlError>
        break;
 8012de2:	bf00      	nop
}
 8012de4:	bf00      	nop
 8012de6:	3708      	adds	r7, #8
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}

08012dec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	3b01      	subs	r3, #1
 8012e00:	2b02      	cmp	r3, #2
 8012e02:	d81e      	bhi.n	8012e42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	88db      	ldrh	r3, [r3, #6]
 8012e08:	2b02      	cmp	r3, #2
 8012e0a:	d004      	beq.n	8012e16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012e0c:	6839      	ldr	r1, [r7, #0]
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f000 f890 	bl	8012f34 <USBD_CtlError>
        break;
 8012e14:	e01a      	b.n	8012e4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2201      	movs	r2, #1
 8012e1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d005      	beq.n	8012e32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	68db      	ldr	r3, [r3, #12]
 8012e2a:	f043 0202 	orr.w	r2, r3, #2
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	330c      	adds	r3, #12
 8012e36:	2202      	movs	r2, #2
 8012e38:	4619      	mov	r1, r3
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f000 f8eb 	bl	8013016 <USBD_CtlSendData>
      break;
 8012e40:	e004      	b.n	8012e4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012e42:	6839      	ldr	r1, [r7, #0]
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f000 f875 	bl	8012f34 <USBD_CtlError>
      break;
 8012e4a:	bf00      	nop
  }
}
 8012e4c:	bf00      	nop
 8012e4e:	3708      	adds	r7, #8
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}

08012e54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	885b      	ldrh	r3, [r3, #2]
 8012e62:	2b01      	cmp	r3, #1
 8012e64:	d106      	bne.n	8012e74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2201      	movs	r2, #1
 8012e6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f000 f92b 	bl	80130ca <USBD_CtlSendStatus>
  }
}
 8012e74:	bf00      	nop
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e8c:	b2db      	uxtb	r3, r3
 8012e8e:	3b01      	subs	r3, #1
 8012e90:	2b02      	cmp	r3, #2
 8012e92:	d80b      	bhi.n	8012eac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	885b      	ldrh	r3, [r3, #2]
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d10c      	bne.n	8012eb6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f000 f910 	bl	80130ca <USBD_CtlSendStatus>
      }
      break;
 8012eaa:	e004      	b.n	8012eb6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012eac:	6839      	ldr	r1, [r7, #0]
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f000 f840 	bl	8012f34 <USBD_CtlError>
      break;
 8012eb4:	e000      	b.n	8012eb8 <USBD_ClrFeature+0x3c>
      break;
 8012eb6:	bf00      	nop
  }
}
 8012eb8:	bf00      	nop
 8012eba:	3708      	adds	r7, #8
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}

08012ec0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b084      	sub	sp, #16
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	781a      	ldrb	r2, [r3, #0]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	3301      	adds	r3, #1
 8012eda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	781a      	ldrb	r2, [r3, #0]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	3301      	adds	r3, #1
 8012ee8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	f7ff fabb 	bl	8012466 <SWAPBYTE>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	3301      	adds	r3, #1
 8012efc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	3301      	adds	r3, #1
 8012f02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012f04:	68f8      	ldr	r0, [r7, #12]
 8012f06:	f7ff faae 	bl	8012466 <SWAPBYTE>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	461a      	mov	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	3301      	adds	r3, #1
 8012f16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012f1e:	68f8      	ldr	r0, [r7, #12]
 8012f20:	f7ff faa1 	bl	8012466 <SWAPBYTE>
 8012f24:	4603      	mov	r3, r0
 8012f26:	461a      	mov	r2, r3
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	80da      	strh	r2, [r3, #6]
}
 8012f2c:	bf00      	nop
 8012f2e:	3710      	adds	r7, #16
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f3e:	2180      	movs	r1, #128	; 0x80
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f002 f881 	bl	8015048 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012f46:	2100      	movs	r1, #0
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f002 f87d 	bl	8015048 <USBD_LL_StallEP>
}
 8012f4e:	bf00      	nop
 8012f50:	3708      	adds	r7, #8
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}

08012f56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012f56:	b580      	push	{r7, lr}
 8012f58:	b086      	sub	sp, #24
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	60f8      	str	r0, [r7, #12]
 8012f5e:	60b9      	str	r1, [r7, #8]
 8012f60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012f62:	2300      	movs	r3, #0
 8012f64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d036      	beq.n	8012fda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012f70:	6938      	ldr	r0, [r7, #16]
 8012f72:	f000 f836 	bl	8012fe2 <USBD_GetLen>
 8012f76:	4603      	mov	r3, r0
 8012f78:	3301      	adds	r3, #1
 8012f7a:	b29b      	uxth	r3, r3
 8012f7c:	005b      	lsls	r3, r3, #1
 8012f7e:	b29a      	uxth	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012f84:	7dfb      	ldrb	r3, [r7, #23]
 8012f86:	68ba      	ldr	r2, [r7, #8]
 8012f88:	4413      	add	r3, r2
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	7812      	ldrb	r2, [r2, #0]
 8012f8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012f90:	7dfb      	ldrb	r3, [r7, #23]
 8012f92:	3301      	adds	r3, #1
 8012f94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012f96:	7dfb      	ldrb	r3, [r7, #23]
 8012f98:	68ba      	ldr	r2, [r7, #8]
 8012f9a:	4413      	add	r3, r2
 8012f9c:	2203      	movs	r2, #3
 8012f9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012fa0:	7dfb      	ldrb	r3, [r7, #23]
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012fa6:	e013      	b.n	8012fd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012fa8:	7dfb      	ldrb	r3, [r7, #23]
 8012faa:	68ba      	ldr	r2, [r7, #8]
 8012fac:	4413      	add	r3, r2
 8012fae:	693a      	ldr	r2, [r7, #16]
 8012fb0:	7812      	ldrb	r2, [r2, #0]
 8012fb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	613b      	str	r3, [r7, #16]
    idx++;
 8012fba:	7dfb      	ldrb	r3, [r7, #23]
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012fc0:	7dfb      	ldrb	r3, [r7, #23]
 8012fc2:	68ba      	ldr	r2, [r7, #8]
 8012fc4:	4413      	add	r3, r2
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	701a      	strb	r2, [r3, #0]
    idx++;
 8012fca:	7dfb      	ldrb	r3, [r7, #23]
 8012fcc:	3301      	adds	r3, #1
 8012fce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d1e7      	bne.n	8012fa8 <USBD_GetString+0x52>
 8012fd8:	e000      	b.n	8012fdc <USBD_GetString+0x86>
    return;
 8012fda:	bf00      	nop
  }
}
 8012fdc:	3718      	adds	r7, #24
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012fe2:	b480      	push	{r7}
 8012fe4:	b085      	sub	sp, #20
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012fea:	2300      	movs	r3, #0
 8012fec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012ff2:	e005      	b.n	8013000 <USBD_GetLen+0x1e>
  {
    len++;
 8012ff4:	7bfb      	ldrb	r3, [r7, #15]
 8012ff6:	3301      	adds	r3, #1
 8012ff8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d1f5      	bne.n	8012ff4 <USBD_GetLen+0x12>
  }

  return len;
 8013008:	7bfb      	ldrb	r3, [r7, #15]
}
 801300a:	4618      	mov	r0, r3
 801300c:	3714      	adds	r7, #20
 801300e:	46bd      	mov	sp, r7
 8013010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013014:	4770      	bx	lr

08013016 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013016:	b580      	push	{r7, lr}
 8013018:	b084      	sub	sp, #16
 801301a:	af00      	add	r7, sp, #0
 801301c:	60f8      	str	r0, [r7, #12]
 801301e:	60b9      	str	r1, [r7, #8]
 8013020:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2202      	movs	r2, #2
 8013026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	687a      	ldr	r2, [r7, #4]
 801302e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	687a      	ldr	r2, [r7, #4]
 8013034:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	68ba      	ldr	r2, [r7, #8]
 801303a:	2100      	movs	r1, #0
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	f002 f88c 	bl	801515a <USBD_LL_Transmit>

  return USBD_OK;
 8013042:	2300      	movs	r3, #0
}
 8013044:	4618      	mov	r0, r3
 8013046:	3710      	adds	r7, #16
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	68ba      	ldr	r2, [r7, #8]
 801305c:	2100      	movs	r1, #0
 801305e:	68f8      	ldr	r0, [r7, #12]
 8013060:	f002 f87b 	bl	801515a <USBD_LL_Transmit>

  return USBD_OK;
 8013064:	2300      	movs	r3, #0
}
 8013066:	4618      	mov	r0, r3
 8013068:	3710      	adds	r7, #16
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}

0801306e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801306e:	b580      	push	{r7, lr}
 8013070:	b084      	sub	sp, #16
 8013072:	af00      	add	r7, sp, #0
 8013074:	60f8      	str	r0, [r7, #12]
 8013076:	60b9      	str	r1, [r7, #8]
 8013078:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2203      	movs	r2, #3
 801307e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	687a      	ldr	r2, [r7, #4]
 801308e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	68ba      	ldr	r2, [r7, #8]
 8013096:	2100      	movs	r1, #0
 8013098:	68f8      	ldr	r0, [r7, #12]
 801309a:	f002 f87f 	bl	801519c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801309e:	2300      	movs	r3, #0
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3710      	adds	r7, #16
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	60f8      	str	r0, [r7, #12]
 80130b0:	60b9      	str	r1, [r7, #8]
 80130b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	68ba      	ldr	r2, [r7, #8]
 80130b8:	2100      	movs	r1, #0
 80130ba:	68f8      	ldr	r0, [r7, #12]
 80130bc:	f002 f86e 	bl	801519c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80130c0:	2300      	movs	r3, #0
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3710      	adds	r7, #16
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}

080130ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80130ca:	b580      	push	{r7, lr}
 80130cc:	b082      	sub	sp, #8
 80130ce:	af00      	add	r7, sp, #0
 80130d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2204      	movs	r2, #4
 80130d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80130da:	2300      	movs	r3, #0
 80130dc:	2200      	movs	r2, #0
 80130de:	2100      	movs	r1, #0
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f002 f83a 	bl	801515a <USBD_LL_Transmit>

  return USBD_OK;
 80130e6:	2300      	movs	r3, #0
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3708      	adds	r7, #8
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}

080130f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b082      	sub	sp, #8
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2205      	movs	r2, #5
 80130fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013100:	2300      	movs	r3, #0
 8013102:	2200      	movs	r2, #0
 8013104:	2100      	movs	r1, #0
 8013106:	6878      	ldr	r0, [r7, #4]
 8013108:	f002 f848 	bl	801519c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801310c:	2300      	movs	r3, #0
}
 801310e:	4618      	mov	r0, r3
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}

08013116 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013116:	b480      	push	{r7}
 8013118:	b085      	sub	sp, #20
 801311a:	af00      	add	r7, sp, #0
 801311c:	4603      	mov	r3, r0
 801311e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013120:	2300      	movs	r3, #0
 8013122:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013128:	2b84      	cmp	r3, #132	; 0x84
 801312a:	d005      	beq.n	8013138 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801312c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	4413      	add	r3, r2
 8013134:	3303      	adds	r3, #3
 8013136:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013138:	68fb      	ldr	r3, [r7, #12]
}
 801313a:	4618      	mov	r0, r3
 801313c:	3714      	adds	r7, #20
 801313e:	46bd      	mov	sp, r7
 8013140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013144:	4770      	bx	lr

08013146 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013146:	b580      	push	{r7, lr}
 8013148:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801314a:	f000 fc17 	bl	801397c <vTaskStartScheduler>
  
  return osOK;
 801314e:	2300      	movs	r3, #0
}
 8013150:	4618      	mov	r0, r3
 8013152:	bd80      	pop	{r7, pc}

08013154 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013156:	b089      	sub	sp, #36	; 0x24
 8013158:	af04      	add	r7, sp, #16
 801315a:	6078      	str	r0, [r7, #4]
 801315c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	695b      	ldr	r3, [r3, #20]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d020      	beq.n	80131a8 <osThreadCreate+0x54>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	699b      	ldr	r3, [r3, #24]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d01c      	beq.n	80131a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	685c      	ldr	r4, [r3, #4]
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681d      	ldr	r5, [r3, #0]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	691e      	ldr	r6, [r3, #16]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013180:	4618      	mov	r0, r3
 8013182:	f7ff ffc8 	bl	8013116 <makeFreeRtosPriority>
 8013186:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	695b      	ldr	r3, [r3, #20]
 801318c:	687a      	ldr	r2, [r7, #4]
 801318e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013190:	9202      	str	r2, [sp, #8]
 8013192:	9301      	str	r3, [sp, #4]
 8013194:	9100      	str	r1, [sp, #0]
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	4632      	mov	r2, r6
 801319a:	4629      	mov	r1, r5
 801319c:	4620      	mov	r0, r4
 801319e:	f000 f8ed 	bl	801337c <xTaskCreateStatic>
 80131a2:	4603      	mov	r3, r0
 80131a4:	60fb      	str	r3, [r7, #12]
 80131a6:	e01c      	b.n	80131e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	685c      	ldr	r4, [r3, #4]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80131b4:	b29e      	uxth	r6, r3
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80131bc:	4618      	mov	r0, r3
 80131be:	f7ff ffaa 	bl	8013116 <makeFreeRtosPriority>
 80131c2:	4602      	mov	r2, r0
 80131c4:	f107 030c 	add.w	r3, r7, #12
 80131c8:	9301      	str	r3, [sp, #4]
 80131ca:	9200      	str	r2, [sp, #0]
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	4632      	mov	r2, r6
 80131d0:	4629      	mov	r1, r5
 80131d2:	4620      	mov	r0, r4
 80131d4:	f000 f92f 	bl	8013436 <xTaskCreate>
 80131d8:	4603      	mov	r3, r0
 80131da:	2b01      	cmp	r3, #1
 80131dc:	d001      	beq.n	80131e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80131de:	2300      	movs	r3, #0
 80131e0:	e000      	b.n	80131e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80131e2:	68fb      	ldr	r3, [r7, #12]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3714      	adds	r7, #20
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080131ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d001      	beq.n	8013202 <osDelay+0x16>
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	e000      	b.n	8013204 <osDelay+0x18>
 8013202:	2301      	movs	r3, #1
 8013204:	4618      	mov	r0, r3
 8013206:	f000 fa63 	bl	80136d0 <vTaskDelay>
  
  return osOK;
 801320a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801320c:	4618      	mov	r0, r3
 801320e:	3710      	adds	r7, #16
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013214:	b480      	push	{r7}
 8013216:	b083      	sub	sp, #12
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f103 0208 	add.w	r2, r3, #8
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f04f 32ff 	mov.w	r2, #4294967295
 801322c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f103 0208 	add.w	r2, r3, #8
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f103 0208 	add.w	r2, r3, #8
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2200      	movs	r2, #0
 8013246:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013248:	bf00      	nop
 801324a:	370c      	adds	r7, #12
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr

08013254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013254:	b480      	push	{r7}
 8013256:	b083      	sub	sp, #12
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2200      	movs	r2, #0
 8013260:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013262:	bf00      	nop
 8013264:	370c      	adds	r7, #12
 8013266:	46bd      	mov	sp, r7
 8013268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326c:	4770      	bx	lr

0801326e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801326e:	b480      	push	{r7}
 8013270:	b085      	sub	sp, #20
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
 8013276:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	68fa      	ldr	r2, [r7, #12]
 8013282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	689a      	ldr	r2, [r3, #8]
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	689b      	ldr	r3, [r3, #8]
 8013290:	683a      	ldr	r2, [r7, #0]
 8013292:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	683a      	ldr	r2, [r7, #0]
 8013298:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	1c5a      	adds	r2, r3, #1
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	601a      	str	r2, [r3, #0]
}
 80132aa:	bf00      	nop
 80132ac:	3714      	adds	r7, #20
 80132ae:	46bd      	mov	sp, r7
 80132b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b4:	4770      	bx	lr

080132b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80132b6:	b480      	push	{r7}
 80132b8:	b085      	sub	sp, #20
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
 80132be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132cc:	d103      	bne.n	80132d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	691b      	ldr	r3, [r3, #16]
 80132d2:	60fb      	str	r3, [r7, #12]
 80132d4:	e00c      	b.n	80132f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	3308      	adds	r3, #8
 80132da:	60fb      	str	r3, [r7, #12]
 80132dc:	e002      	b.n	80132e4 <vListInsert+0x2e>
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	60fb      	str	r3, [r7, #12]
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	685b      	ldr	r3, [r3, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	68ba      	ldr	r2, [r7, #8]
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d2f6      	bcs.n	80132de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	685a      	ldr	r2, [r3, #4]
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	683a      	ldr	r2, [r7, #0]
 80132fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	68fa      	ldr	r2, [r7, #12]
 8013304:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	683a      	ldr	r2, [r7, #0]
 801330a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	1c5a      	adds	r2, r3, #1
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	601a      	str	r2, [r3, #0]
}
 801331c:	bf00      	nop
 801331e:	3714      	adds	r7, #20
 8013320:	46bd      	mov	sp, r7
 8013322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013326:	4770      	bx	lr

08013328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013328:	b480      	push	{r7}
 801332a:	b085      	sub	sp, #20
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	691b      	ldr	r3, [r3, #16]
 8013334:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	685b      	ldr	r3, [r3, #4]
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	6892      	ldr	r2, [r2, #8]
 801333e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	689b      	ldr	r3, [r3, #8]
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	6852      	ldr	r2, [r2, #4]
 8013348:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	685b      	ldr	r3, [r3, #4]
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	429a      	cmp	r2, r3
 8013352:	d103      	bne.n	801335c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	689a      	ldr	r2, [r3, #8]
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2200      	movs	r2, #0
 8013360:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	1e5a      	subs	r2, r3, #1
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	681b      	ldr	r3, [r3, #0]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3714      	adds	r7, #20
 8013374:	46bd      	mov	sp, r7
 8013376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337a:	4770      	bx	lr

0801337c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801337c:	b580      	push	{r7, lr}
 801337e:	b08e      	sub	sp, #56	; 0x38
 8013380:	af04      	add	r7, sp, #16
 8013382:	60f8      	str	r0, [r7, #12]
 8013384:	60b9      	str	r1, [r7, #8]
 8013386:	607a      	str	r2, [r7, #4]
 8013388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801338c:	2b00      	cmp	r3, #0
 801338e:	d10a      	bne.n	80133a6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013394:	f383 8811 	msr	BASEPRI, r3
 8013398:	f3bf 8f6f 	isb	sy
 801339c:	f3bf 8f4f 	dsb	sy
 80133a0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80133a2:	bf00      	nop
 80133a4:	e7fe      	b.n	80133a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80133a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d10a      	bne.n	80133c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80133ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b0:	f383 8811 	msr	BASEPRI, r3
 80133b4:	f3bf 8f6f 	isb	sy
 80133b8:	f3bf 8f4f 	dsb	sy
 80133bc:	61fb      	str	r3, [r7, #28]
}
 80133be:	bf00      	nop
 80133c0:	e7fe      	b.n	80133c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80133c2:	23b4      	movs	r3, #180	; 0xb4
 80133c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	2bb4      	cmp	r3, #180	; 0xb4
 80133ca:	d00a      	beq.n	80133e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80133cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d0:	f383 8811 	msr	BASEPRI, r3
 80133d4:	f3bf 8f6f 	isb	sy
 80133d8:	f3bf 8f4f 	dsb	sy
 80133dc:	61bb      	str	r3, [r7, #24]
}
 80133de:	bf00      	nop
 80133e0:	e7fe      	b.n	80133e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80133e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80133e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d01e      	beq.n	8013428 <xTaskCreateStatic+0xac>
 80133ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d01b      	beq.n	8013428 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80133f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80133f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80133fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133fc:	2202      	movs	r2, #2
 80133fe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013402:	2300      	movs	r3, #0
 8013404:	9303      	str	r3, [sp, #12]
 8013406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013408:	9302      	str	r3, [sp, #8]
 801340a:	f107 0314 	add.w	r3, r7, #20
 801340e:	9301      	str	r3, [sp, #4]
 8013410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013412:	9300      	str	r3, [sp, #0]
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	68b9      	ldr	r1, [r7, #8]
 801341a:	68f8      	ldr	r0, [r7, #12]
 801341c:	f000 f850 	bl	80134c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013422:	f000 f8eb 	bl	80135fc <prvAddNewTaskToReadyList>
 8013426:	e001      	b.n	801342c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013428:	2300      	movs	r3, #0
 801342a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801342c:	697b      	ldr	r3, [r7, #20]
	}
 801342e:	4618      	mov	r0, r3
 8013430:	3728      	adds	r7, #40	; 0x28
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}

08013436 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013436:	b580      	push	{r7, lr}
 8013438:	b08c      	sub	sp, #48	; 0x30
 801343a:	af04      	add	r7, sp, #16
 801343c:	60f8      	str	r0, [r7, #12]
 801343e:	60b9      	str	r1, [r7, #8]
 8013440:	603b      	str	r3, [r7, #0]
 8013442:	4613      	mov	r3, r2
 8013444:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013446:	88fb      	ldrh	r3, [r7, #6]
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	4618      	mov	r0, r3
 801344c:	f001 f814 	bl	8014478 <pvPortMalloc>
 8013450:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d00e      	beq.n	8013476 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013458:	20b4      	movs	r0, #180	; 0xb4
 801345a:	f001 f80d 	bl	8014478 <pvPortMalloc>
 801345e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d003      	beq.n	801346e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013466:	69fb      	ldr	r3, [r7, #28]
 8013468:	697a      	ldr	r2, [r7, #20]
 801346a:	631a      	str	r2, [r3, #48]	; 0x30
 801346c:	e005      	b.n	801347a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801346e:	6978      	ldr	r0, [r7, #20]
 8013470:	f001 f8ce 	bl	8014610 <vPortFree>
 8013474:	e001      	b.n	801347a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013476:	2300      	movs	r3, #0
 8013478:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801347a:	69fb      	ldr	r3, [r7, #28]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d017      	beq.n	80134b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013480:	69fb      	ldr	r3, [r7, #28]
 8013482:	2200      	movs	r2, #0
 8013484:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013488:	88fa      	ldrh	r2, [r7, #6]
 801348a:	2300      	movs	r3, #0
 801348c:	9303      	str	r3, [sp, #12]
 801348e:	69fb      	ldr	r3, [r7, #28]
 8013490:	9302      	str	r3, [sp, #8]
 8013492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013494:	9301      	str	r3, [sp, #4]
 8013496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013498:	9300      	str	r3, [sp, #0]
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	68b9      	ldr	r1, [r7, #8]
 801349e:	68f8      	ldr	r0, [r7, #12]
 80134a0:	f000 f80e 	bl	80134c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80134a4:	69f8      	ldr	r0, [r7, #28]
 80134a6:	f000 f8a9 	bl	80135fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80134aa:	2301      	movs	r3, #1
 80134ac:	61bb      	str	r3, [r7, #24]
 80134ae:	e002      	b.n	80134b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80134b0:	f04f 33ff 	mov.w	r3, #4294967295
 80134b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80134b6:	69bb      	ldr	r3, [r7, #24]
	}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3720      	adds	r7, #32
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b088      	sub	sp, #32
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	60f8      	str	r0, [r7, #12]
 80134c8:	60b9      	str	r1, [r7, #8]
 80134ca:	607a      	str	r2, [r7, #4]
 80134cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80134ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80134d2:	6879      	ldr	r1, [r7, #4]
 80134d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80134d8:	440b      	add	r3, r1
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	4413      	add	r3, r2
 80134de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80134e0:	69bb      	ldr	r3, [r7, #24]
 80134e2:	f023 0307 	bic.w	r3, r3, #7
 80134e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	f003 0307 	and.w	r3, r3, #7
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d00a      	beq.n	8013508 <prvInitialiseNewTask+0x48>
	__asm volatile
 80134f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f6:	f383 8811 	msr	BASEPRI, r3
 80134fa:	f3bf 8f6f 	isb	sy
 80134fe:	f3bf 8f4f 	dsb	sy
 8013502:	617b      	str	r3, [r7, #20]
}
 8013504:	bf00      	nop
 8013506:	e7fe      	b.n	8013506 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d01f      	beq.n	801354e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801350e:	2300      	movs	r3, #0
 8013510:	61fb      	str	r3, [r7, #28]
 8013512:	e012      	b.n	801353a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013514:	68ba      	ldr	r2, [r7, #8]
 8013516:	69fb      	ldr	r3, [r7, #28]
 8013518:	4413      	add	r3, r2
 801351a:	7819      	ldrb	r1, [r3, #0]
 801351c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	4413      	add	r3, r2
 8013522:	3334      	adds	r3, #52	; 0x34
 8013524:	460a      	mov	r2, r1
 8013526:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013528:	68ba      	ldr	r2, [r7, #8]
 801352a:	69fb      	ldr	r3, [r7, #28]
 801352c:	4413      	add	r3, r2
 801352e:	781b      	ldrb	r3, [r3, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d006      	beq.n	8013542 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	3301      	adds	r3, #1
 8013538:	61fb      	str	r3, [r7, #28]
 801353a:	69fb      	ldr	r3, [r7, #28]
 801353c:	2b0f      	cmp	r3, #15
 801353e:	d9e9      	bls.n	8013514 <prvInitialiseNewTask+0x54>
 8013540:	e000      	b.n	8013544 <prvInitialiseNewTask+0x84>
			{
				break;
 8013542:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013546:	2200      	movs	r2, #0
 8013548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801354c:	e003      	b.n	8013556 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013550:	2200      	movs	r2, #0
 8013552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013558:	2b06      	cmp	r3, #6
 801355a:	d901      	bls.n	8013560 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801355c:	2306      	movs	r3, #6
 801355e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013564:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801356a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801356e:	2200      	movs	r2, #0
 8013570:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013574:	3304      	adds	r3, #4
 8013576:	4618      	mov	r0, r3
 8013578:	f7ff fe6c 	bl	8013254 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801357e:	3318      	adds	r3, #24
 8013580:	4618      	mov	r0, r3
 8013582:	f7ff fe67 	bl	8013254 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801358a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801358e:	f1c3 0207 	rsb	r2, r3, #7
 8013592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013594:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801359a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801359e:	2200      	movs	r2, #0
 80135a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80135a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a6:	2200      	movs	r2, #0
 80135a8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80135ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ae:	334c      	adds	r3, #76	; 0x4c
 80135b0:	2260      	movs	r2, #96	; 0x60
 80135b2:	2100      	movs	r1, #0
 80135b4:	4618      	mov	r0, r3
 80135b6:	f001 ff9e 	bl	80154f6 <memset>
 80135ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135bc:	4a0c      	ldr	r2, [pc, #48]	; (80135f0 <prvInitialiseNewTask+0x130>)
 80135be:	651a      	str	r2, [r3, #80]	; 0x50
 80135c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c2:	4a0c      	ldr	r2, [pc, #48]	; (80135f4 <prvInitialiseNewTask+0x134>)
 80135c4:	655a      	str	r2, [r3, #84]	; 0x54
 80135c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c8:	4a0b      	ldr	r2, [pc, #44]	; (80135f8 <prvInitialiseNewTask+0x138>)
 80135ca:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80135cc:	683a      	ldr	r2, [r7, #0]
 80135ce:	68f9      	ldr	r1, [r7, #12]
 80135d0:	69b8      	ldr	r0, [r7, #24]
 80135d2:	f000 fd41 	bl	8014058 <pxPortInitialiseStack>
 80135d6:	4602      	mov	r2, r0
 80135d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80135dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d002      	beq.n	80135e8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80135e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80135e8:	bf00      	nop
 80135ea:	3720      	adds	r7, #32
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}
 80135f0:	080236e0 	.word	0x080236e0
 80135f4:	08023700 	.word	0x08023700
 80135f8:	080236c0 	.word	0x080236c0

080135fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013604:	f000 fe56 	bl	80142b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013608:	4b2a      	ldr	r3, [pc, #168]	; (80136b4 <prvAddNewTaskToReadyList+0xb8>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	3301      	adds	r3, #1
 801360e:	4a29      	ldr	r2, [pc, #164]	; (80136b4 <prvAddNewTaskToReadyList+0xb8>)
 8013610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013612:	4b29      	ldr	r3, [pc, #164]	; (80136b8 <prvAddNewTaskToReadyList+0xbc>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d109      	bne.n	801362e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801361a:	4a27      	ldr	r2, [pc, #156]	; (80136b8 <prvAddNewTaskToReadyList+0xbc>)
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013620:	4b24      	ldr	r3, [pc, #144]	; (80136b4 <prvAddNewTaskToReadyList+0xb8>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	2b01      	cmp	r3, #1
 8013626:	d110      	bne.n	801364a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013628:	f000 fbee 	bl	8013e08 <prvInitialiseTaskLists>
 801362c:	e00d      	b.n	801364a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801362e:	4b23      	ldr	r3, [pc, #140]	; (80136bc <prvAddNewTaskToReadyList+0xc0>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d109      	bne.n	801364a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013636:	4b20      	ldr	r3, [pc, #128]	; (80136b8 <prvAddNewTaskToReadyList+0xbc>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013640:	429a      	cmp	r2, r3
 8013642:	d802      	bhi.n	801364a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013644:	4a1c      	ldr	r2, [pc, #112]	; (80136b8 <prvAddNewTaskToReadyList+0xbc>)
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801364a:	4b1d      	ldr	r3, [pc, #116]	; (80136c0 <prvAddNewTaskToReadyList+0xc4>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	3301      	adds	r3, #1
 8013650:	4a1b      	ldr	r2, [pc, #108]	; (80136c0 <prvAddNewTaskToReadyList+0xc4>)
 8013652:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013658:	2201      	movs	r2, #1
 801365a:	409a      	lsls	r2, r3
 801365c:	4b19      	ldr	r3, [pc, #100]	; (80136c4 <prvAddNewTaskToReadyList+0xc8>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	4313      	orrs	r3, r2
 8013662:	4a18      	ldr	r2, [pc, #96]	; (80136c4 <prvAddNewTaskToReadyList+0xc8>)
 8013664:	6013      	str	r3, [r2, #0]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801366a:	4613      	mov	r3, r2
 801366c:	009b      	lsls	r3, r3, #2
 801366e:	4413      	add	r3, r2
 8013670:	009b      	lsls	r3, r3, #2
 8013672:	4a15      	ldr	r2, [pc, #84]	; (80136c8 <prvAddNewTaskToReadyList+0xcc>)
 8013674:	441a      	add	r2, r3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	3304      	adds	r3, #4
 801367a:	4619      	mov	r1, r3
 801367c:	4610      	mov	r0, r2
 801367e:	f7ff fdf6 	bl	801326e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013682:	f000 fe47 	bl	8014314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013686:	4b0d      	ldr	r3, [pc, #52]	; (80136bc <prvAddNewTaskToReadyList+0xc0>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00e      	beq.n	80136ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801368e:	4b0a      	ldr	r3, [pc, #40]	; (80136b8 <prvAddNewTaskToReadyList+0xbc>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013698:	429a      	cmp	r2, r3
 801369a:	d207      	bcs.n	80136ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801369c:	4b0b      	ldr	r3, [pc, #44]	; (80136cc <prvAddNewTaskToReadyList+0xd0>)
 801369e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136a2:	601a      	str	r2, [r3, #0]
 80136a4:	f3bf 8f4f 	dsb	sy
 80136a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80136ac:	bf00      	nop
 80136ae:	3708      	adds	r7, #8
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	24000d10 	.word	0x24000d10
 80136b8:	24000c10 	.word	0x24000c10
 80136bc:	24000d1c 	.word	0x24000d1c
 80136c0:	24000d2c 	.word	0x24000d2c
 80136c4:	24000d18 	.word	0x24000d18
 80136c8:	24000c14 	.word	0x24000c14
 80136cc:	e000ed04 	.word	0xe000ed04

080136d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b084      	sub	sp, #16
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80136d8:	2300      	movs	r3, #0
 80136da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d017      	beq.n	8013712 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80136e2:	4b13      	ldr	r3, [pc, #76]	; (8013730 <vTaskDelay+0x60>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d00a      	beq.n	8013700 <vTaskDelay+0x30>
	__asm volatile
 80136ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ee:	f383 8811 	msr	BASEPRI, r3
 80136f2:	f3bf 8f6f 	isb	sy
 80136f6:	f3bf 8f4f 	dsb	sy
 80136fa:	60bb      	str	r3, [r7, #8]
}
 80136fc:	bf00      	nop
 80136fe:	e7fe      	b.n	80136fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013700:	f000 f9a6 	bl	8013a50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013704:	2100      	movs	r1, #0
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f000 fc40 	bl	8013f8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801370c:	f000 f9ae 	bl	8013a6c <xTaskResumeAll>
 8013710:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d107      	bne.n	8013728 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013718:	4b06      	ldr	r3, [pc, #24]	; (8013734 <vTaskDelay+0x64>)
 801371a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801371e:	601a      	str	r2, [r3, #0]
 8013720:	f3bf 8f4f 	dsb	sy
 8013724:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013728:	bf00      	nop
 801372a:	3710      	adds	r7, #16
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}
 8013730:	24000d38 	.word	0x24000d38
 8013734:	e000ed04 	.word	0xe000ed04

08013738 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013738:	b580      	push	{r7, lr}
 801373a:	b084      	sub	sp, #16
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013740:	f000 fdb8 	bl	80142b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d102      	bne.n	8013750 <vTaskSuspend+0x18>
 801374a:	4b3c      	ldr	r3, [pc, #240]	; (801383c <vTaskSuspend+0x104>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	e000      	b.n	8013752 <vTaskSuspend+0x1a>
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	3304      	adds	r3, #4
 8013758:	4618      	mov	r0, r3
 801375a:	f7ff fde5 	bl	8013328 <uxListRemove>
 801375e:	4603      	mov	r3, r0
 8013760:	2b00      	cmp	r3, #0
 8013762:	d115      	bne.n	8013790 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013768:	4935      	ldr	r1, [pc, #212]	; (8013840 <vTaskSuspend+0x108>)
 801376a:	4613      	mov	r3, r2
 801376c:	009b      	lsls	r3, r3, #2
 801376e:	4413      	add	r3, r2
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	440b      	add	r3, r1
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d10a      	bne.n	8013790 <vTaskSuspend+0x58>
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801377e:	2201      	movs	r2, #1
 8013780:	fa02 f303 	lsl.w	r3, r2, r3
 8013784:	43da      	mvns	r2, r3
 8013786:	4b2f      	ldr	r3, [pc, #188]	; (8013844 <vTaskSuspend+0x10c>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	4013      	ands	r3, r2
 801378c:	4a2d      	ldr	r2, [pc, #180]	; (8013844 <vTaskSuspend+0x10c>)
 801378e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013794:	2b00      	cmp	r3, #0
 8013796:	d004      	beq.n	80137a2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	3318      	adds	r3, #24
 801379c:	4618      	mov	r0, r3
 801379e:	f7ff fdc3 	bl	8013328 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	3304      	adds	r3, #4
 80137a6:	4619      	mov	r1, r3
 80137a8:	4827      	ldr	r0, [pc, #156]	; (8013848 <vTaskSuspend+0x110>)
 80137aa:	f7ff fd60 	bl	801326e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	d103      	bne.n	80137c2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	2200      	movs	r2, #0
 80137be:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80137c2:	f000 fda7 	bl	8014314 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80137c6:	4b21      	ldr	r3, [pc, #132]	; (801384c <vTaskSuspend+0x114>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d005      	beq.n	80137da <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80137ce:	f000 fd71 	bl	80142b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80137d2:	f000 fbbb 	bl	8013f4c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80137d6:	f000 fd9d 	bl	8014314 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80137da:	4b18      	ldr	r3, [pc, #96]	; (801383c <vTaskSuspend+0x104>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	68fa      	ldr	r2, [r7, #12]
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d127      	bne.n	8013834 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80137e4:	4b19      	ldr	r3, [pc, #100]	; (801384c <vTaskSuspend+0x114>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d017      	beq.n	801381c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80137ec:	4b18      	ldr	r3, [pc, #96]	; (8013850 <vTaskSuspend+0x118>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d00a      	beq.n	801380a <vTaskSuspend+0xd2>
	__asm volatile
 80137f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f8:	f383 8811 	msr	BASEPRI, r3
 80137fc:	f3bf 8f6f 	isb	sy
 8013800:	f3bf 8f4f 	dsb	sy
 8013804:	60bb      	str	r3, [r7, #8]
}
 8013806:	bf00      	nop
 8013808:	e7fe      	b.n	8013808 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801380a:	4b12      	ldr	r3, [pc, #72]	; (8013854 <vTaskSuspend+0x11c>)
 801380c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013810:	601a      	str	r2, [r3, #0]
 8013812:	f3bf 8f4f 	dsb	sy
 8013816:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801381a:	e00b      	b.n	8013834 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801381c:	4b0a      	ldr	r3, [pc, #40]	; (8013848 <vTaskSuspend+0x110>)
 801381e:	681a      	ldr	r2, [r3, #0]
 8013820:	4b0d      	ldr	r3, [pc, #52]	; (8013858 <vTaskSuspend+0x120>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	429a      	cmp	r2, r3
 8013826:	d103      	bne.n	8013830 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8013828:	4b04      	ldr	r3, [pc, #16]	; (801383c <vTaskSuspend+0x104>)
 801382a:	2200      	movs	r2, #0
 801382c:	601a      	str	r2, [r3, #0]
	}
 801382e:	e001      	b.n	8013834 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8013830:	f000 fa70 	bl	8013d14 <vTaskSwitchContext>
	}
 8013834:	bf00      	nop
 8013836:	3710      	adds	r7, #16
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	24000c10 	.word	0x24000c10
 8013840:	24000c14 	.word	0x24000c14
 8013844:	24000d18 	.word	0x24000d18
 8013848:	24000cfc 	.word	0x24000cfc
 801384c:	24000d1c 	.word	0x24000d1c
 8013850:	24000d38 	.word	0x24000d38
 8013854:	e000ed04 	.word	0xe000ed04
 8013858:	24000d10 	.word	0x24000d10

0801385c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801385c:	b480      	push	{r7}
 801385e:	b087      	sub	sp, #28
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013864:	2300      	movs	r3, #0
 8013866:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d10a      	bne.n	8013888 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8013872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013876:	f383 8811 	msr	BASEPRI, r3
 801387a:	f3bf 8f6f 	isb	sy
 801387e:	f3bf 8f4f 	dsb	sy
 8013882:	60fb      	str	r3, [r7, #12]
}
 8013884:	bf00      	nop
 8013886:	e7fe      	b.n	8013886 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	695b      	ldr	r3, [r3, #20]
 801388c:	4a0a      	ldr	r2, [pc, #40]	; (80138b8 <prvTaskIsTaskSuspended+0x5c>)
 801388e:	4293      	cmp	r3, r2
 8013890:	d10a      	bne.n	80138a8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013896:	4a09      	ldr	r2, [pc, #36]	; (80138bc <prvTaskIsTaskSuspended+0x60>)
 8013898:	4293      	cmp	r3, r2
 801389a:	d005      	beq.n	80138a8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d101      	bne.n	80138a8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80138a4:	2301      	movs	r3, #1
 80138a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80138a8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80138aa:	4618      	mov	r0, r3
 80138ac:	371c      	adds	r7, #28
 80138ae:	46bd      	mov	sp, r7
 80138b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b4:	4770      	bx	lr
 80138b6:	bf00      	nop
 80138b8:	24000cfc 	.word	0x24000cfc
 80138bc:	24000cd0 	.word	0x24000cd0

080138c0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d10a      	bne.n	80138e8 <vTaskResume+0x28>
	__asm volatile
 80138d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d6:	f383 8811 	msr	BASEPRI, r3
 80138da:	f3bf 8f6f 	isb	sy
 80138de:	f3bf 8f4f 	dsb	sy
 80138e2:	60bb      	str	r3, [r7, #8]
}
 80138e4:	bf00      	nop
 80138e6:	e7fe      	b.n	80138e6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80138e8:	4b20      	ldr	r3, [pc, #128]	; (801396c <vTaskResume+0xac>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	68fa      	ldr	r2, [r7, #12]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d037      	beq.n	8013962 <vTaskResume+0xa2>
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d034      	beq.n	8013962 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80138f8:	f000 fcdc 	bl	80142b4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80138fc:	68f8      	ldr	r0, [r7, #12]
 80138fe:	f7ff ffad 	bl	801385c <prvTaskIsTaskSuspended>
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	d02a      	beq.n	801395e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	3304      	adds	r3, #4
 801390c:	4618      	mov	r0, r3
 801390e:	f7ff fd0b 	bl	8013328 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013916:	2201      	movs	r2, #1
 8013918:	409a      	lsls	r2, r3
 801391a:	4b15      	ldr	r3, [pc, #84]	; (8013970 <vTaskResume+0xb0>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	4313      	orrs	r3, r2
 8013920:	4a13      	ldr	r2, [pc, #76]	; (8013970 <vTaskResume+0xb0>)
 8013922:	6013      	str	r3, [r2, #0]
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013928:	4613      	mov	r3, r2
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	4413      	add	r3, r2
 801392e:	009b      	lsls	r3, r3, #2
 8013930:	4a10      	ldr	r2, [pc, #64]	; (8013974 <vTaskResume+0xb4>)
 8013932:	441a      	add	r2, r3
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	3304      	adds	r3, #4
 8013938:	4619      	mov	r1, r3
 801393a:	4610      	mov	r0, r2
 801393c:	f7ff fc97 	bl	801326e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013944:	4b09      	ldr	r3, [pc, #36]	; (801396c <vTaskResume+0xac>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801394a:	429a      	cmp	r2, r3
 801394c:	d307      	bcc.n	801395e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801394e:	4b0a      	ldr	r3, [pc, #40]	; (8013978 <vTaskResume+0xb8>)
 8013950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013954:	601a      	str	r2, [r3, #0]
 8013956:	f3bf 8f4f 	dsb	sy
 801395a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801395e:	f000 fcd9 	bl	8014314 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013962:	bf00      	nop
 8013964:	3710      	adds	r7, #16
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}
 801396a:	bf00      	nop
 801396c:	24000c10 	.word	0x24000c10
 8013970:	24000d18 	.word	0x24000d18
 8013974:	24000c14 	.word	0x24000c14
 8013978:	e000ed04 	.word	0xe000ed04

0801397c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b08a      	sub	sp, #40	; 0x28
 8013980:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013982:	2300      	movs	r3, #0
 8013984:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013986:	2300      	movs	r3, #0
 8013988:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801398a:	463a      	mov	r2, r7
 801398c:	1d39      	adds	r1, r7, #4
 801398e:	f107 0308 	add.w	r3, r7, #8
 8013992:	4618      	mov	r0, r3
 8013994:	f7ed f9cc 	bl	8000d30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013998:	6839      	ldr	r1, [r7, #0]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	68ba      	ldr	r2, [r7, #8]
 801399e:	9202      	str	r2, [sp, #8]
 80139a0:	9301      	str	r3, [sp, #4]
 80139a2:	2300      	movs	r3, #0
 80139a4:	9300      	str	r3, [sp, #0]
 80139a6:	2300      	movs	r3, #0
 80139a8:	460a      	mov	r2, r1
 80139aa:	4921      	ldr	r1, [pc, #132]	; (8013a30 <vTaskStartScheduler+0xb4>)
 80139ac:	4821      	ldr	r0, [pc, #132]	; (8013a34 <vTaskStartScheduler+0xb8>)
 80139ae:	f7ff fce5 	bl	801337c <xTaskCreateStatic>
 80139b2:	4603      	mov	r3, r0
 80139b4:	4a20      	ldr	r2, [pc, #128]	; (8013a38 <vTaskStartScheduler+0xbc>)
 80139b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80139b8:	4b1f      	ldr	r3, [pc, #124]	; (8013a38 <vTaskStartScheduler+0xbc>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d002      	beq.n	80139c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80139c0:	2301      	movs	r3, #1
 80139c2:	617b      	str	r3, [r7, #20]
 80139c4:	e001      	b.n	80139ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80139c6:	2300      	movs	r3, #0
 80139c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	2b01      	cmp	r3, #1
 80139ce:	d11b      	bne.n	8013a08 <vTaskStartScheduler+0x8c>
	__asm volatile
 80139d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d4:	f383 8811 	msr	BASEPRI, r3
 80139d8:	f3bf 8f6f 	isb	sy
 80139dc:	f3bf 8f4f 	dsb	sy
 80139e0:	613b      	str	r3, [r7, #16]
}
 80139e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80139e4:	4b15      	ldr	r3, [pc, #84]	; (8013a3c <vTaskStartScheduler+0xc0>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	334c      	adds	r3, #76	; 0x4c
 80139ea:	4a15      	ldr	r2, [pc, #84]	; (8013a40 <vTaskStartScheduler+0xc4>)
 80139ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80139ee:	4b15      	ldr	r3, [pc, #84]	; (8013a44 <vTaskStartScheduler+0xc8>)
 80139f0:	f04f 32ff 	mov.w	r2, #4294967295
 80139f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80139f6:	4b14      	ldr	r3, [pc, #80]	; (8013a48 <vTaskStartScheduler+0xcc>)
 80139f8:	2201      	movs	r2, #1
 80139fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80139fc:	4b13      	ldr	r3, [pc, #76]	; (8013a4c <vTaskStartScheduler+0xd0>)
 80139fe:	2200      	movs	r2, #0
 8013a00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013a02:	f000 fbb5 	bl	8014170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013a06:	e00e      	b.n	8013a26 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a0e:	d10a      	bne.n	8013a26 <vTaskStartScheduler+0xaa>
	__asm volatile
 8013a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a14:	f383 8811 	msr	BASEPRI, r3
 8013a18:	f3bf 8f6f 	isb	sy
 8013a1c:	f3bf 8f4f 	dsb	sy
 8013a20:	60fb      	str	r3, [r7, #12]
}
 8013a22:	bf00      	nop
 8013a24:	e7fe      	b.n	8013a24 <vTaskStartScheduler+0xa8>
}
 8013a26:	bf00      	nop
 8013a28:	3718      	adds	r7, #24
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	08018390 	.word	0x08018390
 8013a34:	08013dd9 	.word	0x08013dd9
 8013a38:	24000d34 	.word	0x24000d34
 8013a3c:	24000c10 	.word	0x24000c10
 8013a40:	2400025c 	.word	0x2400025c
 8013a44:	24000d30 	.word	0x24000d30
 8013a48:	24000d1c 	.word	0x24000d1c
 8013a4c:	24000d14 	.word	0x24000d14

08013a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013a50:	b480      	push	{r7}
 8013a52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013a54:	4b04      	ldr	r3, [pc, #16]	; (8013a68 <vTaskSuspendAll+0x18>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	3301      	adds	r3, #1
 8013a5a:	4a03      	ldr	r2, [pc, #12]	; (8013a68 <vTaskSuspendAll+0x18>)
 8013a5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013a5e:	bf00      	nop
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr
 8013a68:	24000d38 	.word	0x24000d38

08013a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b084      	sub	sp, #16
 8013a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013a72:	2300      	movs	r3, #0
 8013a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013a76:	2300      	movs	r3, #0
 8013a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013a7a:	4b41      	ldr	r3, [pc, #260]	; (8013b80 <xTaskResumeAll+0x114>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d10a      	bne.n	8013a98 <xTaskResumeAll+0x2c>
	__asm volatile
 8013a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a86:	f383 8811 	msr	BASEPRI, r3
 8013a8a:	f3bf 8f6f 	isb	sy
 8013a8e:	f3bf 8f4f 	dsb	sy
 8013a92:	603b      	str	r3, [r7, #0]
}
 8013a94:	bf00      	nop
 8013a96:	e7fe      	b.n	8013a96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013a98:	f000 fc0c 	bl	80142b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013a9c:	4b38      	ldr	r3, [pc, #224]	; (8013b80 <xTaskResumeAll+0x114>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	3b01      	subs	r3, #1
 8013aa2:	4a37      	ldr	r2, [pc, #220]	; (8013b80 <xTaskResumeAll+0x114>)
 8013aa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013aa6:	4b36      	ldr	r3, [pc, #216]	; (8013b80 <xTaskResumeAll+0x114>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d161      	bne.n	8013b72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013aae:	4b35      	ldr	r3, [pc, #212]	; (8013b84 <xTaskResumeAll+0x118>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d05d      	beq.n	8013b72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013ab6:	e02e      	b.n	8013b16 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ab8:	4b33      	ldr	r3, [pc, #204]	; (8013b88 <xTaskResumeAll+0x11c>)
 8013aba:	68db      	ldr	r3, [r3, #12]
 8013abc:	68db      	ldr	r3, [r3, #12]
 8013abe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	3318      	adds	r3, #24
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7ff fc2f 	bl	8013328 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	3304      	adds	r3, #4
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7ff fc2a 	bl	8013328 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad8:	2201      	movs	r2, #1
 8013ada:	409a      	lsls	r2, r3
 8013adc:	4b2b      	ldr	r3, [pc, #172]	; (8013b8c <xTaskResumeAll+0x120>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	4a2a      	ldr	r2, [pc, #168]	; (8013b8c <xTaskResumeAll+0x120>)
 8013ae4:	6013      	str	r3, [r2, #0]
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aea:	4613      	mov	r3, r2
 8013aec:	009b      	lsls	r3, r3, #2
 8013aee:	4413      	add	r3, r2
 8013af0:	009b      	lsls	r3, r3, #2
 8013af2:	4a27      	ldr	r2, [pc, #156]	; (8013b90 <xTaskResumeAll+0x124>)
 8013af4:	441a      	add	r2, r3
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	3304      	adds	r3, #4
 8013afa:	4619      	mov	r1, r3
 8013afc:	4610      	mov	r0, r2
 8013afe:	f7ff fbb6 	bl	801326e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b06:	4b23      	ldr	r3, [pc, #140]	; (8013b94 <xTaskResumeAll+0x128>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d302      	bcc.n	8013b16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013b10:	4b21      	ldr	r3, [pc, #132]	; (8013b98 <xTaskResumeAll+0x12c>)
 8013b12:	2201      	movs	r2, #1
 8013b14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b16:	4b1c      	ldr	r3, [pc, #112]	; (8013b88 <xTaskResumeAll+0x11c>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d1cc      	bne.n	8013ab8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d001      	beq.n	8013b28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013b24:	f000 fa12 	bl	8013f4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013b28:	4b1c      	ldr	r3, [pc, #112]	; (8013b9c <xTaskResumeAll+0x130>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d010      	beq.n	8013b56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013b34:	f000 f836 	bl	8013ba4 <xTaskIncrementTick>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d002      	beq.n	8013b44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013b3e:	4b16      	ldr	r3, [pc, #88]	; (8013b98 <xTaskResumeAll+0x12c>)
 8013b40:	2201      	movs	r2, #1
 8013b42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	3b01      	subs	r3, #1
 8013b48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d1f1      	bne.n	8013b34 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8013b50:	4b12      	ldr	r3, [pc, #72]	; (8013b9c <xTaskResumeAll+0x130>)
 8013b52:	2200      	movs	r2, #0
 8013b54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013b56:	4b10      	ldr	r3, [pc, #64]	; (8013b98 <xTaskResumeAll+0x12c>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d009      	beq.n	8013b72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013b5e:	2301      	movs	r3, #1
 8013b60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013b62:	4b0f      	ldr	r3, [pc, #60]	; (8013ba0 <xTaskResumeAll+0x134>)
 8013b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b68:	601a      	str	r2, [r3, #0]
 8013b6a:	f3bf 8f4f 	dsb	sy
 8013b6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013b72:	f000 fbcf 	bl	8014314 <vPortExitCritical>

	return xAlreadyYielded;
 8013b76:	68bb      	ldr	r3, [r7, #8]
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3710      	adds	r7, #16
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	24000d38 	.word	0x24000d38
 8013b84:	24000d10 	.word	0x24000d10
 8013b88:	24000cd0 	.word	0x24000cd0
 8013b8c:	24000d18 	.word	0x24000d18
 8013b90:	24000c14 	.word	0x24000c14
 8013b94:	24000c10 	.word	0x24000c10
 8013b98:	24000d24 	.word	0x24000d24
 8013b9c:	24000d20 	.word	0x24000d20
 8013ba0:	e000ed04 	.word	0xe000ed04

08013ba4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013baa:	2300      	movs	r3, #0
 8013bac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013bae:	4b4e      	ldr	r3, [pc, #312]	; (8013ce8 <xTaskIncrementTick+0x144>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	f040 808e 	bne.w	8013cd4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013bb8:	4b4c      	ldr	r3, [pc, #304]	; (8013cec <xTaskIncrementTick+0x148>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013bc0:	4a4a      	ldr	r2, [pc, #296]	; (8013cec <xTaskIncrementTick+0x148>)
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d120      	bne.n	8013c0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013bcc:	4b48      	ldr	r3, [pc, #288]	; (8013cf0 <xTaskIncrementTick+0x14c>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d00a      	beq.n	8013bec <xTaskIncrementTick+0x48>
	__asm volatile
 8013bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bda:	f383 8811 	msr	BASEPRI, r3
 8013bde:	f3bf 8f6f 	isb	sy
 8013be2:	f3bf 8f4f 	dsb	sy
 8013be6:	603b      	str	r3, [r7, #0]
}
 8013be8:	bf00      	nop
 8013bea:	e7fe      	b.n	8013bea <xTaskIncrementTick+0x46>
 8013bec:	4b40      	ldr	r3, [pc, #256]	; (8013cf0 <xTaskIncrementTick+0x14c>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	60fb      	str	r3, [r7, #12]
 8013bf2:	4b40      	ldr	r3, [pc, #256]	; (8013cf4 <xTaskIncrementTick+0x150>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	4a3e      	ldr	r2, [pc, #248]	; (8013cf0 <xTaskIncrementTick+0x14c>)
 8013bf8:	6013      	str	r3, [r2, #0]
 8013bfa:	4a3e      	ldr	r2, [pc, #248]	; (8013cf4 <xTaskIncrementTick+0x150>)
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	6013      	str	r3, [r2, #0]
 8013c00:	4b3d      	ldr	r3, [pc, #244]	; (8013cf8 <xTaskIncrementTick+0x154>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	3301      	adds	r3, #1
 8013c06:	4a3c      	ldr	r2, [pc, #240]	; (8013cf8 <xTaskIncrementTick+0x154>)
 8013c08:	6013      	str	r3, [r2, #0]
 8013c0a:	f000 f99f 	bl	8013f4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013c0e:	4b3b      	ldr	r3, [pc, #236]	; (8013cfc <xTaskIncrementTick+0x158>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	693a      	ldr	r2, [r7, #16]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d348      	bcc.n	8013caa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c18:	4b35      	ldr	r3, [pc, #212]	; (8013cf0 <xTaskIncrementTick+0x14c>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d104      	bne.n	8013c2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c22:	4b36      	ldr	r3, [pc, #216]	; (8013cfc <xTaskIncrementTick+0x158>)
 8013c24:	f04f 32ff 	mov.w	r2, #4294967295
 8013c28:	601a      	str	r2, [r3, #0]
					break;
 8013c2a:	e03e      	b.n	8013caa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c2c:	4b30      	ldr	r3, [pc, #192]	; (8013cf0 <xTaskIncrementTick+0x14c>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	68db      	ldr	r3, [r3, #12]
 8013c32:	68db      	ldr	r3, [r3, #12]
 8013c34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	685b      	ldr	r3, [r3, #4]
 8013c3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013c3c:	693a      	ldr	r2, [r7, #16]
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d203      	bcs.n	8013c4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013c44:	4a2d      	ldr	r2, [pc, #180]	; (8013cfc <xTaskIncrementTick+0x158>)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013c4a:	e02e      	b.n	8013caa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	3304      	adds	r3, #4
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7ff fb69 	bl	8013328 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d004      	beq.n	8013c68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	3318      	adds	r3, #24
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7ff fb60 	bl	8013328 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	409a      	lsls	r2, r3
 8013c70:	4b23      	ldr	r3, [pc, #140]	; (8013d00 <xTaskIncrementTick+0x15c>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	4313      	orrs	r3, r2
 8013c76:	4a22      	ldr	r2, [pc, #136]	; (8013d00 <xTaskIncrementTick+0x15c>)
 8013c78:	6013      	str	r3, [r2, #0]
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c7e:	4613      	mov	r3, r2
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	4413      	add	r3, r2
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	4a1f      	ldr	r2, [pc, #124]	; (8013d04 <xTaskIncrementTick+0x160>)
 8013c88:	441a      	add	r2, r3
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	3304      	adds	r3, #4
 8013c8e:	4619      	mov	r1, r3
 8013c90:	4610      	mov	r0, r2
 8013c92:	f7ff faec 	bl	801326e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c96:	68bb      	ldr	r3, [r7, #8]
 8013c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c9a:	4b1b      	ldr	r3, [pc, #108]	; (8013d08 <xTaskIncrementTick+0x164>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d3b9      	bcc.n	8013c18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ca8:	e7b6      	b.n	8013c18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013caa:	4b17      	ldr	r3, [pc, #92]	; (8013d08 <xTaskIncrementTick+0x164>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cb0:	4914      	ldr	r1, [pc, #80]	; (8013d04 <xTaskIncrementTick+0x160>)
 8013cb2:	4613      	mov	r3, r2
 8013cb4:	009b      	lsls	r3, r3, #2
 8013cb6:	4413      	add	r3, r2
 8013cb8:	009b      	lsls	r3, r3, #2
 8013cba:	440b      	add	r3, r1
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	2b01      	cmp	r3, #1
 8013cc0:	d901      	bls.n	8013cc6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013cc6:	4b11      	ldr	r3, [pc, #68]	; (8013d0c <xTaskIncrementTick+0x168>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d007      	beq.n	8013cde <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8013cce:	2301      	movs	r3, #1
 8013cd0:	617b      	str	r3, [r7, #20]
 8013cd2:	e004      	b.n	8013cde <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013cd4:	4b0e      	ldr	r3, [pc, #56]	; (8013d10 <xTaskIncrementTick+0x16c>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	3301      	adds	r3, #1
 8013cda:	4a0d      	ldr	r2, [pc, #52]	; (8013d10 <xTaskIncrementTick+0x16c>)
 8013cdc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013cde:	697b      	ldr	r3, [r7, #20]
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3718      	adds	r7, #24
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	24000d38 	.word	0x24000d38
 8013cec:	24000d14 	.word	0x24000d14
 8013cf0:	24000cc8 	.word	0x24000cc8
 8013cf4:	24000ccc 	.word	0x24000ccc
 8013cf8:	24000d28 	.word	0x24000d28
 8013cfc:	24000d30 	.word	0x24000d30
 8013d00:	24000d18 	.word	0x24000d18
 8013d04:	24000c14 	.word	0x24000c14
 8013d08:	24000c10 	.word	0x24000c10
 8013d0c:	24000d24 	.word	0x24000d24
 8013d10:	24000d20 	.word	0x24000d20

08013d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013d14:	b480      	push	{r7}
 8013d16:	b087      	sub	sp, #28
 8013d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013d1a:	4b29      	ldr	r3, [pc, #164]	; (8013dc0 <vTaskSwitchContext+0xac>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d003      	beq.n	8013d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013d22:	4b28      	ldr	r3, [pc, #160]	; (8013dc4 <vTaskSwitchContext+0xb0>)
 8013d24:	2201      	movs	r2, #1
 8013d26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013d28:	e044      	b.n	8013db4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8013d2a:	4b26      	ldr	r3, [pc, #152]	; (8013dc4 <vTaskSwitchContext+0xb0>)
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d30:	4b25      	ldr	r3, [pc, #148]	; (8013dc8 <vTaskSwitchContext+0xb4>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	fab3 f383 	clz	r3, r3
 8013d3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013d3e:	7afb      	ldrb	r3, [r7, #11]
 8013d40:	f1c3 031f 	rsb	r3, r3, #31
 8013d44:	617b      	str	r3, [r7, #20]
 8013d46:	4921      	ldr	r1, [pc, #132]	; (8013dcc <vTaskSwitchContext+0xb8>)
 8013d48:	697a      	ldr	r2, [r7, #20]
 8013d4a:	4613      	mov	r3, r2
 8013d4c:	009b      	lsls	r3, r3, #2
 8013d4e:	4413      	add	r3, r2
 8013d50:	009b      	lsls	r3, r3, #2
 8013d52:	440b      	add	r3, r1
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d10a      	bne.n	8013d70 <vTaskSwitchContext+0x5c>
	__asm volatile
 8013d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d5e:	f383 8811 	msr	BASEPRI, r3
 8013d62:	f3bf 8f6f 	isb	sy
 8013d66:	f3bf 8f4f 	dsb	sy
 8013d6a:	607b      	str	r3, [r7, #4]
}
 8013d6c:	bf00      	nop
 8013d6e:	e7fe      	b.n	8013d6e <vTaskSwitchContext+0x5a>
 8013d70:	697a      	ldr	r2, [r7, #20]
 8013d72:	4613      	mov	r3, r2
 8013d74:	009b      	lsls	r3, r3, #2
 8013d76:	4413      	add	r3, r2
 8013d78:	009b      	lsls	r3, r3, #2
 8013d7a:	4a14      	ldr	r2, [pc, #80]	; (8013dcc <vTaskSwitchContext+0xb8>)
 8013d7c:	4413      	add	r3, r2
 8013d7e:	613b      	str	r3, [r7, #16]
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	685a      	ldr	r2, [r3, #4]
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	605a      	str	r2, [r3, #4]
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	685a      	ldr	r2, [r3, #4]
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	3308      	adds	r3, #8
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d104      	bne.n	8013da0 <vTaskSwitchContext+0x8c>
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	685a      	ldr	r2, [r3, #4]
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	605a      	str	r2, [r3, #4]
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	68db      	ldr	r3, [r3, #12]
 8013da6:	4a0a      	ldr	r2, [pc, #40]	; (8013dd0 <vTaskSwitchContext+0xbc>)
 8013da8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013daa:	4b09      	ldr	r3, [pc, #36]	; (8013dd0 <vTaskSwitchContext+0xbc>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	334c      	adds	r3, #76	; 0x4c
 8013db0:	4a08      	ldr	r2, [pc, #32]	; (8013dd4 <vTaskSwitchContext+0xc0>)
 8013db2:	6013      	str	r3, [r2, #0]
}
 8013db4:	bf00      	nop
 8013db6:	371c      	adds	r7, #28
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr
 8013dc0:	24000d38 	.word	0x24000d38
 8013dc4:	24000d24 	.word	0x24000d24
 8013dc8:	24000d18 	.word	0x24000d18
 8013dcc:	24000c14 	.word	0x24000c14
 8013dd0:	24000c10 	.word	0x24000c10
 8013dd4:	2400025c 	.word	0x2400025c

08013dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013de0:	f000 f852 	bl	8013e88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013de4:	4b06      	ldr	r3, [pc, #24]	; (8013e00 <prvIdleTask+0x28>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	d9f9      	bls.n	8013de0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013dec:	4b05      	ldr	r3, [pc, #20]	; (8013e04 <prvIdleTask+0x2c>)
 8013dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013df2:	601a      	str	r2, [r3, #0]
 8013df4:	f3bf 8f4f 	dsb	sy
 8013df8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013dfc:	e7f0      	b.n	8013de0 <prvIdleTask+0x8>
 8013dfe:	bf00      	nop
 8013e00:	24000c14 	.word	0x24000c14
 8013e04:	e000ed04 	.word	0xe000ed04

08013e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e0e:	2300      	movs	r3, #0
 8013e10:	607b      	str	r3, [r7, #4]
 8013e12:	e00c      	b.n	8013e2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013e14:	687a      	ldr	r2, [r7, #4]
 8013e16:	4613      	mov	r3, r2
 8013e18:	009b      	lsls	r3, r3, #2
 8013e1a:	4413      	add	r3, r2
 8013e1c:	009b      	lsls	r3, r3, #2
 8013e1e:	4a12      	ldr	r2, [pc, #72]	; (8013e68 <prvInitialiseTaskLists+0x60>)
 8013e20:	4413      	add	r3, r2
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7ff f9f6 	bl	8013214 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	607b      	str	r3, [r7, #4]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	2b06      	cmp	r3, #6
 8013e32:	d9ef      	bls.n	8013e14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013e34:	480d      	ldr	r0, [pc, #52]	; (8013e6c <prvInitialiseTaskLists+0x64>)
 8013e36:	f7ff f9ed 	bl	8013214 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013e3a:	480d      	ldr	r0, [pc, #52]	; (8013e70 <prvInitialiseTaskLists+0x68>)
 8013e3c:	f7ff f9ea 	bl	8013214 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013e40:	480c      	ldr	r0, [pc, #48]	; (8013e74 <prvInitialiseTaskLists+0x6c>)
 8013e42:	f7ff f9e7 	bl	8013214 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013e46:	480c      	ldr	r0, [pc, #48]	; (8013e78 <prvInitialiseTaskLists+0x70>)
 8013e48:	f7ff f9e4 	bl	8013214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013e4c:	480b      	ldr	r0, [pc, #44]	; (8013e7c <prvInitialiseTaskLists+0x74>)
 8013e4e:	f7ff f9e1 	bl	8013214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013e52:	4b0b      	ldr	r3, [pc, #44]	; (8013e80 <prvInitialiseTaskLists+0x78>)
 8013e54:	4a05      	ldr	r2, [pc, #20]	; (8013e6c <prvInitialiseTaskLists+0x64>)
 8013e56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013e58:	4b0a      	ldr	r3, [pc, #40]	; (8013e84 <prvInitialiseTaskLists+0x7c>)
 8013e5a:	4a05      	ldr	r2, [pc, #20]	; (8013e70 <prvInitialiseTaskLists+0x68>)
 8013e5c:	601a      	str	r2, [r3, #0]
}
 8013e5e:	bf00      	nop
 8013e60:	3708      	adds	r7, #8
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
 8013e66:	bf00      	nop
 8013e68:	24000c14 	.word	0x24000c14
 8013e6c:	24000ca0 	.word	0x24000ca0
 8013e70:	24000cb4 	.word	0x24000cb4
 8013e74:	24000cd0 	.word	0x24000cd0
 8013e78:	24000ce4 	.word	0x24000ce4
 8013e7c:	24000cfc 	.word	0x24000cfc
 8013e80:	24000cc8 	.word	0x24000cc8
 8013e84:	24000ccc 	.word	0x24000ccc

08013e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e8e:	e019      	b.n	8013ec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013e90:	f000 fa10 	bl	80142b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e94:	4b10      	ldr	r3, [pc, #64]	; (8013ed8 <prvCheckTasksWaitingTermination+0x50>)
 8013e96:	68db      	ldr	r3, [r3, #12]
 8013e98:	68db      	ldr	r3, [r3, #12]
 8013e9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	3304      	adds	r3, #4
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7ff fa41 	bl	8013328 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013ea6:	4b0d      	ldr	r3, [pc, #52]	; (8013edc <prvCheckTasksWaitingTermination+0x54>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	3b01      	subs	r3, #1
 8013eac:	4a0b      	ldr	r2, [pc, #44]	; (8013edc <prvCheckTasksWaitingTermination+0x54>)
 8013eae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013eb0:	4b0b      	ldr	r3, [pc, #44]	; (8013ee0 <prvCheckTasksWaitingTermination+0x58>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	3b01      	subs	r3, #1
 8013eb6:	4a0a      	ldr	r2, [pc, #40]	; (8013ee0 <prvCheckTasksWaitingTermination+0x58>)
 8013eb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013eba:	f000 fa2b 	bl	8014314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f000 f810 	bl	8013ee4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013ec4:	4b06      	ldr	r3, [pc, #24]	; (8013ee0 <prvCheckTasksWaitingTermination+0x58>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1e1      	bne.n	8013e90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013ecc:	bf00      	nop
 8013ece:	bf00      	nop
 8013ed0:	3708      	adds	r7, #8
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	24000ce4 	.word	0x24000ce4
 8013edc:	24000d10 	.word	0x24000d10
 8013ee0:	24000cf8 	.word	0x24000cf8

08013ee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	334c      	adds	r3, #76	; 0x4c
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f001 ffcd 	bl	8015e90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d108      	bne.n	8013f12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f04:	4618      	mov	r0, r3
 8013f06:	f000 fb83 	bl	8014610 <vPortFree>
				vPortFree( pxTCB );
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f000 fb80 	bl	8014610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013f10:	e018      	b.n	8013f44 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	d103      	bne.n	8013f24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f000 fb77 	bl	8014610 <vPortFree>
	}
 8013f22:	e00f      	b.n	8013f44 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013f2a:	2b02      	cmp	r3, #2
 8013f2c:	d00a      	beq.n	8013f44 <prvDeleteTCB+0x60>
	__asm volatile
 8013f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f32:	f383 8811 	msr	BASEPRI, r3
 8013f36:	f3bf 8f6f 	isb	sy
 8013f3a:	f3bf 8f4f 	dsb	sy
 8013f3e:	60fb      	str	r3, [r7, #12]
}
 8013f40:	bf00      	nop
 8013f42:	e7fe      	b.n	8013f42 <prvDeleteTCB+0x5e>
	}
 8013f44:	bf00      	nop
 8013f46:	3710      	adds	r7, #16
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013f4c:	b480      	push	{r7}
 8013f4e:	b083      	sub	sp, #12
 8013f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f52:	4b0c      	ldr	r3, [pc, #48]	; (8013f84 <prvResetNextTaskUnblockTime+0x38>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d104      	bne.n	8013f66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013f5c:	4b0a      	ldr	r3, [pc, #40]	; (8013f88 <prvResetNextTaskUnblockTime+0x3c>)
 8013f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013f64:	e008      	b.n	8013f78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f66:	4b07      	ldr	r3, [pc, #28]	; (8013f84 <prvResetNextTaskUnblockTime+0x38>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	68db      	ldr	r3, [r3, #12]
 8013f6c:	68db      	ldr	r3, [r3, #12]
 8013f6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	4a04      	ldr	r2, [pc, #16]	; (8013f88 <prvResetNextTaskUnblockTime+0x3c>)
 8013f76:	6013      	str	r3, [r2, #0]
}
 8013f78:	bf00      	nop
 8013f7a:	370c      	adds	r7, #12
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr
 8013f84:	24000cc8 	.word	0x24000cc8
 8013f88:	24000d30 	.word	0x24000d30

08013f8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b084      	sub	sp, #16
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013f96:	4b29      	ldr	r3, [pc, #164]	; (801403c <prvAddCurrentTaskToDelayedList+0xb0>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f9c:	4b28      	ldr	r3, [pc, #160]	; (8014040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	3304      	adds	r3, #4
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7ff f9c0 	bl	8013328 <uxListRemove>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d10b      	bne.n	8013fc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013fae:	4b24      	ldr	r3, [pc, #144]	; (8014040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8013fba:	43da      	mvns	r2, r3
 8013fbc:	4b21      	ldr	r3, [pc, #132]	; (8014044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4013      	ands	r3, r2
 8013fc2:	4a20      	ldr	r2, [pc, #128]	; (8014044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013fc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fcc:	d10a      	bne.n	8013fe4 <prvAddCurrentTaskToDelayedList+0x58>
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d007      	beq.n	8013fe4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013fd4:	4b1a      	ldr	r3, [pc, #104]	; (8014040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	3304      	adds	r3, #4
 8013fda:	4619      	mov	r1, r3
 8013fdc:	481a      	ldr	r0, [pc, #104]	; (8014048 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013fde:	f7ff f946 	bl	801326e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013fe2:	e026      	b.n	8014032 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013fe4:	68fa      	ldr	r2, [r7, #12]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	4413      	add	r3, r2
 8013fea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013fec:	4b14      	ldr	r3, [pc, #80]	; (8014040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	68ba      	ldr	r2, [r7, #8]
 8013ff2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013ff4:	68ba      	ldr	r2, [r7, #8]
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d209      	bcs.n	8014010 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ffc:	4b13      	ldr	r3, [pc, #76]	; (801404c <prvAddCurrentTaskToDelayedList+0xc0>)
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	4b0f      	ldr	r3, [pc, #60]	; (8014040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	3304      	adds	r3, #4
 8014006:	4619      	mov	r1, r3
 8014008:	4610      	mov	r0, r2
 801400a:	f7ff f954 	bl	80132b6 <vListInsert>
}
 801400e:	e010      	b.n	8014032 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014010:	4b0f      	ldr	r3, [pc, #60]	; (8014050 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014012:	681a      	ldr	r2, [r3, #0]
 8014014:	4b0a      	ldr	r3, [pc, #40]	; (8014040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	3304      	adds	r3, #4
 801401a:	4619      	mov	r1, r3
 801401c:	4610      	mov	r0, r2
 801401e:	f7ff f94a 	bl	80132b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014022:	4b0c      	ldr	r3, [pc, #48]	; (8014054 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	68ba      	ldr	r2, [r7, #8]
 8014028:	429a      	cmp	r2, r3
 801402a:	d202      	bcs.n	8014032 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801402c:	4a09      	ldr	r2, [pc, #36]	; (8014054 <prvAddCurrentTaskToDelayedList+0xc8>)
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	6013      	str	r3, [r2, #0]
}
 8014032:	bf00      	nop
 8014034:	3710      	adds	r7, #16
 8014036:	46bd      	mov	sp, r7
 8014038:	bd80      	pop	{r7, pc}
 801403a:	bf00      	nop
 801403c:	24000d14 	.word	0x24000d14
 8014040:	24000c10 	.word	0x24000c10
 8014044:	24000d18 	.word	0x24000d18
 8014048:	24000cfc 	.word	0x24000cfc
 801404c:	24000ccc 	.word	0x24000ccc
 8014050:	24000cc8 	.word	0x24000cc8
 8014054:	24000d30 	.word	0x24000d30

08014058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014058:	b480      	push	{r7}
 801405a:	b085      	sub	sp, #20
 801405c:	af00      	add	r7, sp, #0
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	3b04      	subs	r3, #4
 8014068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	3b04      	subs	r3, #4
 8014076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	f023 0201 	bic.w	r2, r3, #1
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	3b04      	subs	r3, #4
 8014086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014088:	4a0c      	ldr	r2, [pc, #48]	; (80140bc <pxPortInitialiseStack+0x64>)
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	3b14      	subs	r3, #20
 8014092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014094:	687a      	ldr	r2, [r7, #4]
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	3b04      	subs	r3, #4
 801409e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	f06f 0202 	mvn.w	r2, #2
 80140a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	3b20      	subs	r3, #32
 80140ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80140ae:	68fb      	ldr	r3, [r7, #12]
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3714      	adds	r7, #20
 80140b4:	46bd      	mov	sp, r7
 80140b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ba:	4770      	bx	lr
 80140bc:	080140c1 	.word	0x080140c1

080140c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80140c0:	b480      	push	{r7}
 80140c2:	b085      	sub	sp, #20
 80140c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80140c6:	2300      	movs	r3, #0
 80140c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80140ca:	4b12      	ldr	r3, [pc, #72]	; (8014114 <prvTaskExitError+0x54>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140d2:	d00a      	beq.n	80140ea <prvTaskExitError+0x2a>
	__asm volatile
 80140d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d8:	f383 8811 	msr	BASEPRI, r3
 80140dc:	f3bf 8f6f 	isb	sy
 80140e0:	f3bf 8f4f 	dsb	sy
 80140e4:	60fb      	str	r3, [r7, #12]
}
 80140e6:	bf00      	nop
 80140e8:	e7fe      	b.n	80140e8 <prvTaskExitError+0x28>
	__asm volatile
 80140ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ee:	f383 8811 	msr	BASEPRI, r3
 80140f2:	f3bf 8f6f 	isb	sy
 80140f6:	f3bf 8f4f 	dsb	sy
 80140fa:	60bb      	str	r3, [r7, #8]
}
 80140fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80140fe:	bf00      	nop
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d0fc      	beq.n	8014100 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014106:	bf00      	nop
 8014108:	bf00      	nop
 801410a:	3714      	adds	r7, #20
 801410c:	46bd      	mov	sp, r7
 801410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014112:	4770      	bx	lr
 8014114:	240001f4 	.word	0x240001f4
	...

08014120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014120:	4b07      	ldr	r3, [pc, #28]	; (8014140 <pxCurrentTCBConst2>)
 8014122:	6819      	ldr	r1, [r3, #0]
 8014124:	6808      	ldr	r0, [r1, #0]
 8014126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801412a:	f380 8809 	msr	PSP, r0
 801412e:	f3bf 8f6f 	isb	sy
 8014132:	f04f 0000 	mov.w	r0, #0
 8014136:	f380 8811 	msr	BASEPRI, r0
 801413a:	4770      	bx	lr
 801413c:	f3af 8000 	nop.w

08014140 <pxCurrentTCBConst2>:
 8014140:	24000c10 	.word	0x24000c10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014144:	bf00      	nop
 8014146:	bf00      	nop

08014148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014148:	4808      	ldr	r0, [pc, #32]	; (801416c <prvPortStartFirstTask+0x24>)
 801414a:	6800      	ldr	r0, [r0, #0]
 801414c:	6800      	ldr	r0, [r0, #0]
 801414e:	f380 8808 	msr	MSP, r0
 8014152:	f04f 0000 	mov.w	r0, #0
 8014156:	f380 8814 	msr	CONTROL, r0
 801415a:	b662      	cpsie	i
 801415c:	b661      	cpsie	f
 801415e:	f3bf 8f4f 	dsb	sy
 8014162:	f3bf 8f6f 	isb	sy
 8014166:	df00      	svc	0
 8014168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801416a:	bf00      	nop
 801416c:	e000ed08 	.word	0xe000ed08

08014170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b086      	sub	sp, #24
 8014174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014176:	4b46      	ldr	r3, [pc, #280]	; (8014290 <xPortStartScheduler+0x120>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	4a46      	ldr	r2, [pc, #280]	; (8014294 <xPortStartScheduler+0x124>)
 801417c:	4293      	cmp	r3, r2
 801417e:	d10a      	bne.n	8014196 <xPortStartScheduler+0x26>
	__asm volatile
 8014180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014184:	f383 8811 	msr	BASEPRI, r3
 8014188:	f3bf 8f6f 	isb	sy
 801418c:	f3bf 8f4f 	dsb	sy
 8014190:	613b      	str	r3, [r7, #16]
}
 8014192:	bf00      	nop
 8014194:	e7fe      	b.n	8014194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014196:	4b3e      	ldr	r3, [pc, #248]	; (8014290 <xPortStartScheduler+0x120>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	4a3f      	ldr	r2, [pc, #252]	; (8014298 <xPortStartScheduler+0x128>)
 801419c:	4293      	cmp	r3, r2
 801419e:	d10a      	bne.n	80141b6 <xPortStartScheduler+0x46>
	__asm volatile
 80141a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a4:	f383 8811 	msr	BASEPRI, r3
 80141a8:	f3bf 8f6f 	isb	sy
 80141ac:	f3bf 8f4f 	dsb	sy
 80141b0:	60fb      	str	r3, [r7, #12]
}
 80141b2:	bf00      	nop
 80141b4:	e7fe      	b.n	80141b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80141b6:	4b39      	ldr	r3, [pc, #228]	; (801429c <xPortStartScheduler+0x12c>)
 80141b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	b2db      	uxtb	r3, r3
 80141c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	22ff      	movs	r2, #255	; 0xff
 80141c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80141d0:	78fb      	ldrb	r3, [r7, #3]
 80141d2:	b2db      	uxtb	r3, r3
 80141d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80141d8:	b2da      	uxtb	r2, r3
 80141da:	4b31      	ldr	r3, [pc, #196]	; (80142a0 <xPortStartScheduler+0x130>)
 80141dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80141de:	4b31      	ldr	r3, [pc, #196]	; (80142a4 <xPortStartScheduler+0x134>)
 80141e0:	2207      	movs	r2, #7
 80141e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80141e4:	e009      	b.n	80141fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80141e6:	4b2f      	ldr	r3, [pc, #188]	; (80142a4 <xPortStartScheduler+0x134>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	3b01      	subs	r3, #1
 80141ec:	4a2d      	ldr	r2, [pc, #180]	; (80142a4 <xPortStartScheduler+0x134>)
 80141ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80141f0:	78fb      	ldrb	r3, [r7, #3]
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	005b      	lsls	r3, r3, #1
 80141f6:	b2db      	uxtb	r3, r3
 80141f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80141fa:	78fb      	ldrb	r3, [r7, #3]
 80141fc:	b2db      	uxtb	r3, r3
 80141fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014202:	2b80      	cmp	r3, #128	; 0x80
 8014204:	d0ef      	beq.n	80141e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014206:	4b27      	ldr	r3, [pc, #156]	; (80142a4 <xPortStartScheduler+0x134>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	f1c3 0307 	rsb	r3, r3, #7
 801420e:	2b04      	cmp	r3, #4
 8014210:	d00a      	beq.n	8014228 <xPortStartScheduler+0xb8>
	__asm volatile
 8014212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014216:	f383 8811 	msr	BASEPRI, r3
 801421a:	f3bf 8f6f 	isb	sy
 801421e:	f3bf 8f4f 	dsb	sy
 8014222:	60bb      	str	r3, [r7, #8]
}
 8014224:	bf00      	nop
 8014226:	e7fe      	b.n	8014226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014228:	4b1e      	ldr	r3, [pc, #120]	; (80142a4 <xPortStartScheduler+0x134>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	021b      	lsls	r3, r3, #8
 801422e:	4a1d      	ldr	r2, [pc, #116]	; (80142a4 <xPortStartScheduler+0x134>)
 8014230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014232:	4b1c      	ldr	r3, [pc, #112]	; (80142a4 <xPortStartScheduler+0x134>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801423a:	4a1a      	ldr	r2, [pc, #104]	; (80142a4 <xPortStartScheduler+0x134>)
 801423c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	b2da      	uxtb	r2, r3
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014246:	4b18      	ldr	r3, [pc, #96]	; (80142a8 <xPortStartScheduler+0x138>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	4a17      	ldr	r2, [pc, #92]	; (80142a8 <xPortStartScheduler+0x138>)
 801424c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014252:	4b15      	ldr	r3, [pc, #84]	; (80142a8 <xPortStartScheduler+0x138>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	4a14      	ldr	r2, [pc, #80]	; (80142a8 <xPortStartScheduler+0x138>)
 8014258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801425c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801425e:	f000 f8dd 	bl	801441c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014262:	4b12      	ldr	r3, [pc, #72]	; (80142ac <xPortStartScheduler+0x13c>)
 8014264:	2200      	movs	r2, #0
 8014266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014268:	f000 f8fc 	bl	8014464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801426c:	4b10      	ldr	r3, [pc, #64]	; (80142b0 <xPortStartScheduler+0x140>)
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	4a0f      	ldr	r2, [pc, #60]	; (80142b0 <xPortStartScheduler+0x140>)
 8014272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014278:	f7ff ff66 	bl	8014148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801427c:	f7ff fd4a 	bl	8013d14 <vTaskSwitchContext>
	prvTaskExitError();
 8014280:	f7ff ff1e 	bl	80140c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014284:	2300      	movs	r3, #0
}
 8014286:	4618      	mov	r0, r3
 8014288:	3718      	adds	r7, #24
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
 801428e:	bf00      	nop
 8014290:	e000ed00 	.word	0xe000ed00
 8014294:	410fc271 	.word	0x410fc271
 8014298:	410fc270 	.word	0x410fc270
 801429c:	e000e400 	.word	0xe000e400
 80142a0:	24000d3c 	.word	0x24000d3c
 80142a4:	24000d40 	.word	0x24000d40
 80142a8:	e000ed20 	.word	0xe000ed20
 80142ac:	240001f4 	.word	0x240001f4
 80142b0:	e000ef34 	.word	0xe000ef34

080142b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80142b4:	b480      	push	{r7}
 80142b6:	b083      	sub	sp, #12
 80142b8:	af00      	add	r7, sp, #0
	__asm volatile
 80142ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142be:	f383 8811 	msr	BASEPRI, r3
 80142c2:	f3bf 8f6f 	isb	sy
 80142c6:	f3bf 8f4f 	dsb	sy
 80142ca:	607b      	str	r3, [r7, #4]
}
 80142cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80142ce:	4b0f      	ldr	r3, [pc, #60]	; (801430c <vPortEnterCritical+0x58>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	3301      	adds	r3, #1
 80142d4:	4a0d      	ldr	r2, [pc, #52]	; (801430c <vPortEnterCritical+0x58>)
 80142d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80142d8:	4b0c      	ldr	r3, [pc, #48]	; (801430c <vPortEnterCritical+0x58>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d10f      	bne.n	8014300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80142e0:	4b0b      	ldr	r3, [pc, #44]	; (8014310 <vPortEnterCritical+0x5c>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d00a      	beq.n	8014300 <vPortEnterCritical+0x4c>
	__asm volatile
 80142ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142ee:	f383 8811 	msr	BASEPRI, r3
 80142f2:	f3bf 8f6f 	isb	sy
 80142f6:	f3bf 8f4f 	dsb	sy
 80142fa:	603b      	str	r3, [r7, #0]
}
 80142fc:	bf00      	nop
 80142fe:	e7fe      	b.n	80142fe <vPortEnterCritical+0x4a>
	}
}
 8014300:	bf00      	nop
 8014302:	370c      	adds	r7, #12
 8014304:	46bd      	mov	sp, r7
 8014306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430a:	4770      	bx	lr
 801430c:	240001f4 	.word	0x240001f4
 8014310:	e000ed04 	.word	0xe000ed04

08014314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014314:	b480      	push	{r7}
 8014316:	b083      	sub	sp, #12
 8014318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801431a:	4b12      	ldr	r3, [pc, #72]	; (8014364 <vPortExitCritical+0x50>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d10a      	bne.n	8014338 <vPortExitCritical+0x24>
	__asm volatile
 8014322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014326:	f383 8811 	msr	BASEPRI, r3
 801432a:	f3bf 8f6f 	isb	sy
 801432e:	f3bf 8f4f 	dsb	sy
 8014332:	607b      	str	r3, [r7, #4]
}
 8014334:	bf00      	nop
 8014336:	e7fe      	b.n	8014336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014338:	4b0a      	ldr	r3, [pc, #40]	; (8014364 <vPortExitCritical+0x50>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	3b01      	subs	r3, #1
 801433e:	4a09      	ldr	r2, [pc, #36]	; (8014364 <vPortExitCritical+0x50>)
 8014340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014342:	4b08      	ldr	r3, [pc, #32]	; (8014364 <vPortExitCritical+0x50>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d105      	bne.n	8014356 <vPortExitCritical+0x42>
 801434a:	2300      	movs	r3, #0
 801434c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014356:	bf00      	nop
 8014358:	370c      	adds	r7, #12
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop
 8014364:	240001f4 	.word	0x240001f4
	...

08014370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014370:	f3ef 8009 	mrs	r0, PSP
 8014374:	f3bf 8f6f 	isb	sy
 8014378:	4b15      	ldr	r3, [pc, #84]	; (80143d0 <pxCurrentTCBConst>)
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	f01e 0f10 	tst.w	lr, #16
 8014380:	bf08      	it	eq
 8014382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801438a:	6010      	str	r0, [r2, #0]
 801438c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014394:	f380 8811 	msr	BASEPRI, r0
 8014398:	f3bf 8f4f 	dsb	sy
 801439c:	f3bf 8f6f 	isb	sy
 80143a0:	f7ff fcb8 	bl	8013d14 <vTaskSwitchContext>
 80143a4:	f04f 0000 	mov.w	r0, #0
 80143a8:	f380 8811 	msr	BASEPRI, r0
 80143ac:	bc09      	pop	{r0, r3}
 80143ae:	6819      	ldr	r1, [r3, #0]
 80143b0:	6808      	ldr	r0, [r1, #0]
 80143b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b6:	f01e 0f10 	tst.w	lr, #16
 80143ba:	bf08      	it	eq
 80143bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80143c0:	f380 8809 	msr	PSP, r0
 80143c4:	f3bf 8f6f 	isb	sy
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop
 80143cc:	f3af 8000 	nop.w

080143d0 <pxCurrentTCBConst>:
 80143d0:	24000c10 	.word	0x24000c10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80143d4:	bf00      	nop
 80143d6:	bf00      	nop

080143d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
	__asm volatile
 80143de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e2:	f383 8811 	msr	BASEPRI, r3
 80143e6:	f3bf 8f6f 	isb	sy
 80143ea:	f3bf 8f4f 	dsb	sy
 80143ee:	607b      	str	r3, [r7, #4]
}
 80143f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80143f2:	f7ff fbd7 	bl	8013ba4 <xTaskIncrementTick>
 80143f6:	4603      	mov	r3, r0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d003      	beq.n	8014404 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80143fc:	4b06      	ldr	r3, [pc, #24]	; (8014418 <SysTick_Handler+0x40>)
 80143fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014402:	601a      	str	r2, [r3, #0]
 8014404:	2300      	movs	r3, #0
 8014406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	f383 8811 	msr	BASEPRI, r3
}
 801440e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014410:	bf00      	nop
 8014412:	3708      	adds	r7, #8
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}
 8014418:	e000ed04 	.word	0xe000ed04

0801441c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801441c:	b480      	push	{r7}
 801441e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014420:	4b0b      	ldr	r3, [pc, #44]	; (8014450 <vPortSetupTimerInterrupt+0x34>)
 8014422:	2200      	movs	r2, #0
 8014424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014426:	4b0b      	ldr	r3, [pc, #44]	; (8014454 <vPortSetupTimerInterrupt+0x38>)
 8014428:	2200      	movs	r2, #0
 801442a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801442c:	4b0a      	ldr	r3, [pc, #40]	; (8014458 <vPortSetupTimerInterrupt+0x3c>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	4a0a      	ldr	r2, [pc, #40]	; (801445c <vPortSetupTimerInterrupt+0x40>)
 8014432:	fba2 2303 	umull	r2, r3, r2, r3
 8014436:	099b      	lsrs	r3, r3, #6
 8014438:	4a09      	ldr	r2, [pc, #36]	; (8014460 <vPortSetupTimerInterrupt+0x44>)
 801443a:	3b01      	subs	r3, #1
 801443c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801443e:	4b04      	ldr	r3, [pc, #16]	; (8014450 <vPortSetupTimerInterrupt+0x34>)
 8014440:	2207      	movs	r2, #7
 8014442:	601a      	str	r2, [r3, #0]
}
 8014444:	bf00      	nop
 8014446:	46bd      	mov	sp, r7
 8014448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444c:	4770      	bx	lr
 801444e:	bf00      	nop
 8014450:	e000e010 	.word	0xe000e010
 8014454:	e000e018 	.word	0xe000e018
 8014458:	24000044 	.word	0x24000044
 801445c:	10624dd3 	.word	0x10624dd3
 8014460:	e000e014 	.word	0xe000e014

08014464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014474 <vPortEnableVFP+0x10>
 8014468:	6801      	ldr	r1, [r0, #0]
 801446a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801446e:	6001      	str	r1, [r0, #0]
 8014470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014472:	bf00      	nop
 8014474:	e000ed88 	.word	0xe000ed88

08014478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b08a      	sub	sp, #40	; 0x28
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014480:	2300      	movs	r3, #0
 8014482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014484:	f7ff fae4 	bl	8013a50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014488:	4b5b      	ldr	r3, [pc, #364]	; (80145f8 <pvPortMalloc+0x180>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d101      	bne.n	8014494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014490:	f000 f920 	bl	80146d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014494:	4b59      	ldr	r3, [pc, #356]	; (80145fc <pvPortMalloc+0x184>)
 8014496:	681a      	ldr	r2, [r3, #0]
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	4013      	ands	r3, r2
 801449c:	2b00      	cmp	r3, #0
 801449e:	f040 8093 	bne.w	80145c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d01d      	beq.n	80144e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80144a8:	2208      	movs	r2, #8
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	4413      	add	r3, r2
 80144ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f003 0307 	and.w	r3, r3, #7
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d014      	beq.n	80144e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f023 0307 	bic.w	r3, r3, #7
 80144c0:	3308      	adds	r3, #8
 80144c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	f003 0307 	and.w	r3, r3, #7
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d00a      	beq.n	80144e4 <pvPortMalloc+0x6c>
	__asm volatile
 80144ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d2:	f383 8811 	msr	BASEPRI, r3
 80144d6:	f3bf 8f6f 	isb	sy
 80144da:	f3bf 8f4f 	dsb	sy
 80144de:	617b      	str	r3, [r7, #20]
}
 80144e0:	bf00      	nop
 80144e2:	e7fe      	b.n	80144e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d06e      	beq.n	80145c8 <pvPortMalloc+0x150>
 80144ea:	4b45      	ldr	r3, [pc, #276]	; (8014600 <pvPortMalloc+0x188>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d869      	bhi.n	80145c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80144f4:	4b43      	ldr	r3, [pc, #268]	; (8014604 <pvPortMalloc+0x18c>)
 80144f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80144f8:	4b42      	ldr	r3, [pc, #264]	; (8014604 <pvPortMalloc+0x18c>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80144fe:	e004      	b.n	801450a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450c:	685b      	ldr	r3, [r3, #4]
 801450e:	687a      	ldr	r2, [r7, #4]
 8014510:	429a      	cmp	r2, r3
 8014512:	d903      	bls.n	801451c <pvPortMalloc+0xa4>
 8014514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d1f1      	bne.n	8014500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801451c:	4b36      	ldr	r3, [pc, #216]	; (80145f8 <pvPortMalloc+0x180>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014522:	429a      	cmp	r2, r3
 8014524:	d050      	beq.n	80145c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014526:	6a3b      	ldr	r3, [r7, #32]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	2208      	movs	r2, #8
 801452c:	4413      	add	r3, r2
 801452e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014532:	681a      	ldr	r2, [r3, #0]
 8014534:	6a3b      	ldr	r3, [r7, #32]
 8014536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801453a:	685a      	ldr	r2, [r3, #4]
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	1ad2      	subs	r2, r2, r3
 8014540:	2308      	movs	r3, #8
 8014542:	005b      	lsls	r3, r3, #1
 8014544:	429a      	cmp	r2, r3
 8014546:	d91f      	bls.n	8014588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	4413      	add	r3, r2
 801454e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014550:	69bb      	ldr	r3, [r7, #24]
 8014552:	f003 0307 	and.w	r3, r3, #7
 8014556:	2b00      	cmp	r3, #0
 8014558:	d00a      	beq.n	8014570 <pvPortMalloc+0xf8>
	__asm volatile
 801455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801455e:	f383 8811 	msr	BASEPRI, r3
 8014562:	f3bf 8f6f 	isb	sy
 8014566:	f3bf 8f4f 	dsb	sy
 801456a:	613b      	str	r3, [r7, #16]
}
 801456c:	bf00      	nop
 801456e:	e7fe      	b.n	801456e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014572:	685a      	ldr	r2, [r3, #4]
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	1ad2      	subs	r2, r2, r3
 8014578:	69bb      	ldr	r3, [r7, #24]
 801457a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801457e:	687a      	ldr	r2, [r7, #4]
 8014580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014582:	69b8      	ldr	r0, [r7, #24]
 8014584:	f000 f908 	bl	8014798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014588:	4b1d      	ldr	r3, [pc, #116]	; (8014600 <pvPortMalloc+0x188>)
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458e:	685b      	ldr	r3, [r3, #4]
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	4a1b      	ldr	r2, [pc, #108]	; (8014600 <pvPortMalloc+0x188>)
 8014594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014596:	4b1a      	ldr	r3, [pc, #104]	; (8014600 <pvPortMalloc+0x188>)
 8014598:	681a      	ldr	r2, [r3, #0]
 801459a:	4b1b      	ldr	r3, [pc, #108]	; (8014608 <pvPortMalloc+0x190>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	429a      	cmp	r2, r3
 80145a0:	d203      	bcs.n	80145aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80145a2:	4b17      	ldr	r3, [pc, #92]	; (8014600 <pvPortMalloc+0x188>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	4a18      	ldr	r2, [pc, #96]	; (8014608 <pvPortMalloc+0x190>)
 80145a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80145aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ac:	685a      	ldr	r2, [r3, #4]
 80145ae:	4b13      	ldr	r3, [pc, #76]	; (80145fc <pvPortMalloc+0x184>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	431a      	orrs	r2, r3
 80145b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80145b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ba:	2200      	movs	r2, #0
 80145bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80145be:	4b13      	ldr	r3, [pc, #76]	; (801460c <pvPortMalloc+0x194>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	3301      	adds	r3, #1
 80145c4:	4a11      	ldr	r2, [pc, #68]	; (801460c <pvPortMalloc+0x194>)
 80145c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80145c8:	f7ff fa50 	bl	8013a6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80145cc:	69fb      	ldr	r3, [r7, #28]
 80145ce:	f003 0307 	and.w	r3, r3, #7
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d00a      	beq.n	80145ec <pvPortMalloc+0x174>
	__asm volatile
 80145d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145da:	f383 8811 	msr	BASEPRI, r3
 80145de:	f3bf 8f6f 	isb	sy
 80145e2:	f3bf 8f4f 	dsb	sy
 80145e6:	60fb      	str	r3, [r7, #12]
}
 80145e8:	bf00      	nop
 80145ea:	e7fe      	b.n	80145ea <pvPortMalloc+0x172>
	return pvReturn;
 80145ec:	69fb      	ldr	r3, [r7, #28]
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	3728      	adds	r7, #40	; 0x28
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}
 80145f6:	bf00      	nop
 80145f8:	2400494c 	.word	0x2400494c
 80145fc:	24004960 	.word	0x24004960
 8014600:	24004950 	.word	0x24004950
 8014604:	24004944 	.word	0x24004944
 8014608:	24004954 	.word	0x24004954
 801460c:	24004958 	.word	0x24004958

08014610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b086      	sub	sp, #24
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d04d      	beq.n	80146be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014622:	2308      	movs	r3, #8
 8014624:	425b      	negs	r3, r3
 8014626:	697a      	ldr	r2, [r7, #20]
 8014628:	4413      	add	r3, r2
 801462a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	685a      	ldr	r2, [r3, #4]
 8014634:	4b24      	ldr	r3, [pc, #144]	; (80146c8 <vPortFree+0xb8>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	4013      	ands	r3, r2
 801463a:	2b00      	cmp	r3, #0
 801463c:	d10a      	bne.n	8014654 <vPortFree+0x44>
	__asm volatile
 801463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014642:	f383 8811 	msr	BASEPRI, r3
 8014646:	f3bf 8f6f 	isb	sy
 801464a:	f3bf 8f4f 	dsb	sy
 801464e:	60fb      	str	r3, [r7, #12]
}
 8014650:	bf00      	nop
 8014652:	e7fe      	b.n	8014652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d00a      	beq.n	8014672 <vPortFree+0x62>
	__asm volatile
 801465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014660:	f383 8811 	msr	BASEPRI, r3
 8014664:	f3bf 8f6f 	isb	sy
 8014668:	f3bf 8f4f 	dsb	sy
 801466c:	60bb      	str	r3, [r7, #8]
}
 801466e:	bf00      	nop
 8014670:	e7fe      	b.n	8014670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	685a      	ldr	r2, [r3, #4]
 8014676:	4b14      	ldr	r3, [pc, #80]	; (80146c8 <vPortFree+0xb8>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	4013      	ands	r3, r2
 801467c:	2b00      	cmp	r3, #0
 801467e:	d01e      	beq.n	80146be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d11a      	bne.n	80146be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014688:	693b      	ldr	r3, [r7, #16]
 801468a:	685a      	ldr	r2, [r3, #4]
 801468c:	4b0e      	ldr	r3, [pc, #56]	; (80146c8 <vPortFree+0xb8>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	43db      	mvns	r3, r3
 8014692:	401a      	ands	r2, r3
 8014694:	693b      	ldr	r3, [r7, #16]
 8014696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014698:	f7ff f9da 	bl	8013a50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801469c:	693b      	ldr	r3, [r7, #16]
 801469e:	685a      	ldr	r2, [r3, #4]
 80146a0:	4b0a      	ldr	r3, [pc, #40]	; (80146cc <vPortFree+0xbc>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	4413      	add	r3, r2
 80146a6:	4a09      	ldr	r2, [pc, #36]	; (80146cc <vPortFree+0xbc>)
 80146a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80146aa:	6938      	ldr	r0, [r7, #16]
 80146ac:	f000 f874 	bl	8014798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80146b0:	4b07      	ldr	r3, [pc, #28]	; (80146d0 <vPortFree+0xc0>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	3301      	adds	r3, #1
 80146b6:	4a06      	ldr	r2, [pc, #24]	; (80146d0 <vPortFree+0xc0>)
 80146b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80146ba:	f7ff f9d7 	bl	8013a6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80146be:	bf00      	nop
 80146c0:	3718      	adds	r7, #24
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	24004960 	.word	0x24004960
 80146cc:	24004950 	.word	0x24004950
 80146d0:	2400495c 	.word	0x2400495c

080146d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80146d4:	b480      	push	{r7}
 80146d6:	b085      	sub	sp, #20
 80146d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80146da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80146de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80146e0:	4b27      	ldr	r3, [pc, #156]	; (8014780 <prvHeapInit+0xac>)
 80146e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	f003 0307 	and.w	r3, r3, #7
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d00c      	beq.n	8014708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	3307      	adds	r3, #7
 80146f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	f023 0307 	bic.w	r3, r3, #7
 80146fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80146fc:	68ba      	ldr	r2, [r7, #8]
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	1ad3      	subs	r3, r2, r3
 8014702:	4a1f      	ldr	r2, [pc, #124]	; (8014780 <prvHeapInit+0xac>)
 8014704:	4413      	add	r3, r2
 8014706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801470c:	4a1d      	ldr	r2, [pc, #116]	; (8014784 <prvHeapInit+0xb0>)
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014712:	4b1c      	ldr	r3, [pc, #112]	; (8014784 <prvHeapInit+0xb0>)
 8014714:	2200      	movs	r2, #0
 8014716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	68ba      	ldr	r2, [r7, #8]
 801471c:	4413      	add	r3, r2
 801471e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014720:	2208      	movs	r2, #8
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	1a9b      	subs	r3, r3, r2
 8014726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	f023 0307 	bic.w	r3, r3, #7
 801472e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	4a15      	ldr	r2, [pc, #84]	; (8014788 <prvHeapInit+0xb4>)
 8014734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014736:	4b14      	ldr	r3, [pc, #80]	; (8014788 <prvHeapInit+0xb4>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	2200      	movs	r2, #0
 801473c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801473e:	4b12      	ldr	r3, [pc, #72]	; (8014788 <prvHeapInit+0xb4>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	2200      	movs	r2, #0
 8014744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	68fa      	ldr	r2, [r7, #12]
 801474e:	1ad2      	subs	r2, r2, r3
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014754:	4b0c      	ldr	r3, [pc, #48]	; (8014788 <prvHeapInit+0xb4>)
 8014756:	681a      	ldr	r2, [r3, #0]
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801475c:	683b      	ldr	r3, [r7, #0]
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	4a0a      	ldr	r2, [pc, #40]	; (801478c <prvHeapInit+0xb8>)
 8014762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	685b      	ldr	r3, [r3, #4]
 8014768:	4a09      	ldr	r2, [pc, #36]	; (8014790 <prvHeapInit+0xbc>)
 801476a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801476c:	4b09      	ldr	r3, [pc, #36]	; (8014794 <prvHeapInit+0xc0>)
 801476e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014772:	601a      	str	r2, [r3, #0]
}
 8014774:	bf00      	nop
 8014776:	3714      	adds	r7, #20
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	24000d44 	.word	0x24000d44
 8014784:	24004944 	.word	0x24004944
 8014788:	2400494c 	.word	0x2400494c
 801478c:	24004954 	.word	0x24004954
 8014790:	24004950 	.word	0x24004950
 8014794:	24004960 	.word	0x24004960

08014798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014798:	b480      	push	{r7}
 801479a:	b085      	sub	sp, #20
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80147a0:	4b28      	ldr	r3, [pc, #160]	; (8014844 <prvInsertBlockIntoFreeList+0xac>)
 80147a2:	60fb      	str	r3, [r7, #12]
 80147a4:	e002      	b.n	80147ac <prvInsertBlockIntoFreeList+0x14>
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	60fb      	str	r3, [r7, #12]
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	687a      	ldr	r2, [r7, #4]
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d8f7      	bhi.n	80147a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	68ba      	ldr	r2, [r7, #8]
 80147c0:	4413      	add	r3, r2
 80147c2:	687a      	ldr	r2, [r7, #4]
 80147c4:	429a      	cmp	r2, r3
 80147c6:	d108      	bne.n	80147da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	685a      	ldr	r2, [r3, #4]
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	685b      	ldr	r3, [r3, #4]
 80147d0:	441a      	add	r2, r3
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	68ba      	ldr	r2, [r7, #8]
 80147e4:	441a      	add	r2, r3
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d118      	bne.n	8014820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	681a      	ldr	r2, [r3, #0]
 80147f2:	4b15      	ldr	r3, [pc, #84]	; (8014848 <prvInsertBlockIntoFreeList+0xb0>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d00d      	beq.n	8014816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	685a      	ldr	r2, [r3, #4]
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	685b      	ldr	r3, [r3, #4]
 8014804:	441a      	add	r2, r3
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	681a      	ldr	r2, [r3, #0]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	601a      	str	r2, [r3, #0]
 8014814:	e008      	b.n	8014828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014816:	4b0c      	ldr	r3, [pc, #48]	; (8014848 <prvInsertBlockIntoFreeList+0xb0>)
 8014818:	681a      	ldr	r2, [r3, #0]
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	601a      	str	r2, [r3, #0]
 801481e:	e003      	b.n	8014828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	681a      	ldr	r2, [r3, #0]
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014828:	68fa      	ldr	r2, [r7, #12]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	429a      	cmp	r2, r3
 801482e:	d002      	beq.n	8014836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	687a      	ldr	r2, [r7, #4]
 8014834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014836:	bf00      	nop
 8014838:	3714      	adds	r7, #20
 801483a:	46bd      	mov	sp, r7
 801483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014840:	4770      	bx	lr
 8014842:	bf00      	nop
 8014844:	24004944 	.word	0x24004944
 8014848:	2400494c 	.word	0x2400494c

0801484c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014850:	2200      	movs	r2, #0
 8014852:	4913      	ldr	r1, [pc, #76]	; (80148a0 <MX_USB_DEVICE_Init+0x54>)
 8014854:	4813      	ldr	r0, [pc, #76]	; (80148a4 <MX_USB_DEVICE_Init+0x58>)
 8014856:	f7fd faf5 	bl	8011e44 <USBD_Init>
 801485a:	4603      	mov	r3, r0
 801485c:	2b00      	cmp	r3, #0
 801485e:	d001      	beq.n	8014864 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014860:	f7ed fb98 	bl	8001f94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014864:	4910      	ldr	r1, [pc, #64]	; (80148a8 <MX_USB_DEVICE_Init+0x5c>)
 8014866:	480f      	ldr	r0, [pc, #60]	; (80148a4 <MX_USB_DEVICE_Init+0x58>)
 8014868:	f7fd fb1c 	bl	8011ea4 <USBD_RegisterClass>
 801486c:	4603      	mov	r3, r0
 801486e:	2b00      	cmp	r3, #0
 8014870:	d001      	beq.n	8014876 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014872:	f7ed fb8f 	bl	8001f94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014876:	490d      	ldr	r1, [pc, #52]	; (80148ac <MX_USB_DEVICE_Init+0x60>)
 8014878:	480a      	ldr	r0, [pc, #40]	; (80148a4 <MX_USB_DEVICE_Init+0x58>)
 801487a:	f7fd fa3d 	bl	8011cf8 <USBD_CDC_RegisterInterface>
 801487e:	4603      	mov	r3, r0
 8014880:	2b00      	cmp	r3, #0
 8014882:	d001      	beq.n	8014888 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014884:	f7ed fb86 	bl	8001f94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014888:	4806      	ldr	r0, [pc, #24]	; (80148a4 <MX_USB_DEVICE_Init+0x58>)
 801488a:	f7fd fb32 	bl	8011ef2 <USBD_Start>
 801488e:	4603      	mov	r3, r0
 8014890:	2b00      	cmp	r3, #0
 8014892:	d001      	beq.n	8014898 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014894:	f7ed fb7e 	bl	8001f94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014898:	f7f3 ff60 	bl	800875c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801489c:	bf00      	nop
 801489e:	bd80      	pop	{r7, pc}
 80148a0:	2400020c 	.word	0x2400020c
 80148a4:	240051e8 	.word	0x240051e8
 80148a8:	240000f0 	.word	0x240000f0
 80148ac:	240001f8 	.word	0x240001f8

080148b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80148b4:	2200      	movs	r2, #0
 80148b6:	4905      	ldr	r1, [pc, #20]	; (80148cc <CDC_Init_FS+0x1c>)
 80148b8:	4805      	ldr	r0, [pc, #20]	; (80148d0 <CDC_Init_FS+0x20>)
 80148ba:	f7fd fa32 	bl	8011d22 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80148be:	4905      	ldr	r1, [pc, #20]	; (80148d4 <CDC_Init_FS+0x24>)
 80148c0:	4803      	ldr	r0, [pc, #12]	; (80148d0 <CDC_Init_FS+0x20>)
 80148c2:	f7fd fa4c 	bl	8011d5e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80148c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	24005cb8 	.word	0x24005cb8
 80148d0:	240051e8 	.word	0x240051e8
 80148d4:	240054b8 	.word	0x240054b8

080148d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80148d8:	b480      	push	{r7}
 80148da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80148dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80148de:	4618      	mov	r0, r3
 80148e0:	46bd      	mov	sp, r7
 80148e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e6:	4770      	bx	lr

080148e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80148e8:	b480      	push	{r7}
 80148ea:	b083      	sub	sp, #12
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	4603      	mov	r3, r0
 80148f0:	6039      	str	r1, [r7, #0]
 80148f2:	71fb      	strb	r3, [r7, #7]
 80148f4:	4613      	mov	r3, r2
 80148f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80148f8:	79fb      	ldrb	r3, [r7, #7]
 80148fa:	2b23      	cmp	r3, #35	; 0x23
 80148fc:	d84a      	bhi.n	8014994 <CDC_Control_FS+0xac>
 80148fe:	a201      	add	r2, pc, #4	; (adr r2, 8014904 <CDC_Control_FS+0x1c>)
 8014900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014904:	08014995 	.word	0x08014995
 8014908:	08014995 	.word	0x08014995
 801490c:	08014995 	.word	0x08014995
 8014910:	08014995 	.word	0x08014995
 8014914:	08014995 	.word	0x08014995
 8014918:	08014995 	.word	0x08014995
 801491c:	08014995 	.word	0x08014995
 8014920:	08014995 	.word	0x08014995
 8014924:	08014995 	.word	0x08014995
 8014928:	08014995 	.word	0x08014995
 801492c:	08014995 	.word	0x08014995
 8014930:	08014995 	.word	0x08014995
 8014934:	08014995 	.word	0x08014995
 8014938:	08014995 	.word	0x08014995
 801493c:	08014995 	.word	0x08014995
 8014940:	08014995 	.word	0x08014995
 8014944:	08014995 	.word	0x08014995
 8014948:	08014995 	.word	0x08014995
 801494c:	08014995 	.word	0x08014995
 8014950:	08014995 	.word	0x08014995
 8014954:	08014995 	.word	0x08014995
 8014958:	08014995 	.word	0x08014995
 801495c:	08014995 	.word	0x08014995
 8014960:	08014995 	.word	0x08014995
 8014964:	08014995 	.word	0x08014995
 8014968:	08014995 	.word	0x08014995
 801496c:	08014995 	.word	0x08014995
 8014970:	08014995 	.word	0x08014995
 8014974:	08014995 	.word	0x08014995
 8014978:	08014995 	.word	0x08014995
 801497c:	08014995 	.word	0x08014995
 8014980:	08014995 	.word	0x08014995
 8014984:	08014995 	.word	0x08014995
 8014988:	08014995 	.word	0x08014995
 801498c:	08014995 	.word	0x08014995
 8014990:	08014995 	.word	0x08014995
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014994:	bf00      	nop
  }

  return (USBD_OK);
 8014996:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014998:	4618      	mov	r0, r3
 801499a:	370c      	adds	r7, #12
 801499c:	46bd      	mov	sp, r7
 801499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a2:	4770      	bx	lr

080149a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80149ae:	6879      	ldr	r1, [r7, #4]
 80149b0:	4805      	ldr	r0, [pc, #20]	; (80149c8 <CDC_Receive_FS+0x24>)
 80149b2:	f7fd f9d4 	bl	8011d5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80149b6:	4804      	ldr	r0, [pc, #16]	; (80149c8 <CDC_Receive_FS+0x24>)
 80149b8:	f7fd fa1a 	bl	8011df0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80149bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3708      	adds	r7, #8
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	bf00      	nop
 80149c8:	240051e8 	.word	0x240051e8

080149cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b084      	sub	sp, #16
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	460b      	mov	r3, r1
 80149d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80149d8:	2300      	movs	r3, #0
 80149da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80149dc:	4b0d      	ldr	r3, [pc, #52]	; (8014a14 <CDC_Transmit_FS+0x48>)
 80149de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80149e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d001      	beq.n	80149f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80149ee:	2301      	movs	r3, #1
 80149f0:	e00b      	b.n	8014a0a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80149f2:	887b      	ldrh	r3, [r7, #2]
 80149f4:	461a      	mov	r2, r3
 80149f6:	6879      	ldr	r1, [r7, #4]
 80149f8:	4806      	ldr	r0, [pc, #24]	; (8014a14 <CDC_Transmit_FS+0x48>)
 80149fa:	f7fd f992 	bl	8011d22 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80149fe:	4805      	ldr	r0, [pc, #20]	; (8014a14 <CDC_Transmit_FS+0x48>)
 8014a00:	f7fd f9c6 	bl	8011d90 <USBD_CDC_TransmitPacket>
 8014a04:	4603      	mov	r3, r0
 8014a06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	3710      	adds	r7, #16
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bd80      	pop	{r7, pc}
 8014a12:	bf00      	nop
 8014a14:	240051e8 	.word	0x240051e8

08014a18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014a18:	b480      	push	{r7}
 8014a1a:	b087      	sub	sp, #28
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	60f8      	str	r0, [r7, #12]
 8014a20:	60b9      	str	r1, [r7, #8]
 8014a22:	4613      	mov	r3, r2
 8014a24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014a26:	2300      	movs	r3, #0
 8014a28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	371c      	adds	r7, #28
 8014a32:	46bd      	mov	sp, r7
 8014a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a38:	4770      	bx	lr
	...

08014a3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a3c:	b480      	push	{r7}
 8014a3e:	b083      	sub	sp, #12
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	4603      	mov	r3, r0
 8014a44:	6039      	str	r1, [r7, #0]
 8014a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	2212      	movs	r2, #18
 8014a4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014a4e:	4b03      	ldr	r3, [pc, #12]	; (8014a5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	370c      	adds	r7, #12
 8014a54:	46bd      	mov	sp, r7
 8014a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5a:	4770      	bx	lr
 8014a5c:	24000228 	.word	0x24000228

08014a60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	4603      	mov	r3, r0
 8014a68:	6039      	str	r1, [r7, #0]
 8014a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	2204      	movs	r2, #4
 8014a70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014a72:	4b03      	ldr	r3, [pc, #12]	; (8014a80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	370c      	adds	r7, #12
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr
 8014a80:	2400023c 	.word	0x2400023c

08014a84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b082      	sub	sp, #8
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	6039      	str	r1, [r7, #0]
 8014a8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014a90:	79fb      	ldrb	r3, [r7, #7]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d105      	bne.n	8014aa2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014a96:	683a      	ldr	r2, [r7, #0]
 8014a98:	4907      	ldr	r1, [pc, #28]	; (8014ab8 <USBD_FS_ProductStrDescriptor+0x34>)
 8014a9a:	4808      	ldr	r0, [pc, #32]	; (8014abc <USBD_FS_ProductStrDescriptor+0x38>)
 8014a9c:	f7fe fa5b 	bl	8012f56 <USBD_GetString>
 8014aa0:	e004      	b.n	8014aac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014aa2:	683a      	ldr	r2, [r7, #0]
 8014aa4:	4904      	ldr	r1, [pc, #16]	; (8014ab8 <USBD_FS_ProductStrDescriptor+0x34>)
 8014aa6:	4805      	ldr	r0, [pc, #20]	; (8014abc <USBD_FS_ProductStrDescriptor+0x38>)
 8014aa8:	f7fe fa55 	bl	8012f56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014aac:	4b02      	ldr	r3, [pc, #8]	; (8014ab8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3708      	adds	r7, #8
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop
 8014ab8:	240064b8 	.word	0x240064b8
 8014abc:	08018398 	.word	0x08018398

08014ac0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	6039      	str	r1, [r7, #0]
 8014aca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014acc:	683a      	ldr	r2, [r7, #0]
 8014ace:	4904      	ldr	r1, [pc, #16]	; (8014ae0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014ad0:	4804      	ldr	r0, [pc, #16]	; (8014ae4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014ad2:	f7fe fa40 	bl	8012f56 <USBD_GetString>
  return USBD_StrDesc;
 8014ad6:	4b02      	ldr	r3, [pc, #8]	; (8014ae0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3708      	adds	r7, #8
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	240064b8 	.word	0x240064b8
 8014ae4:	080183b0 	.word	0x080183b0

08014ae8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b082      	sub	sp, #8
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	4603      	mov	r3, r0
 8014af0:	6039      	str	r1, [r7, #0]
 8014af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	221a      	movs	r2, #26
 8014af8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014afa:	f000 f843 	bl	8014b84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014afe:	4b02      	ldr	r3, [pc, #8]	; (8014b08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3708      	adds	r7, #8
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}
 8014b08:	24000240 	.word	0x24000240

08014b0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	4603      	mov	r3, r0
 8014b14:	6039      	str	r1, [r7, #0]
 8014b16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014b18:	79fb      	ldrb	r3, [r7, #7]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d105      	bne.n	8014b2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014b1e:	683a      	ldr	r2, [r7, #0]
 8014b20:	4907      	ldr	r1, [pc, #28]	; (8014b40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014b22:	4808      	ldr	r0, [pc, #32]	; (8014b44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014b24:	f7fe fa17 	bl	8012f56 <USBD_GetString>
 8014b28:	e004      	b.n	8014b34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014b2a:	683a      	ldr	r2, [r7, #0]
 8014b2c:	4904      	ldr	r1, [pc, #16]	; (8014b40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014b2e:	4805      	ldr	r0, [pc, #20]	; (8014b44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014b30:	f7fe fa11 	bl	8012f56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014b34:	4b02      	ldr	r3, [pc, #8]	; (8014b40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3708      	adds	r7, #8
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	240064b8 	.word	0x240064b8
 8014b44:	080183c4 	.word	0x080183c4

08014b48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	4603      	mov	r3, r0
 8014b50:	6039      	str	r1, [r7, #0]
 8014b52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014b54:	79fb      	ldrb	r3, [r7, #7]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d105      	bne.n	8014b66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014b5a:	683a      	ldr	r2, [r7, #0]
 8014b5c:	4907      	ldr	r1, [pc, #28]	; (8014b7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014b5e:	4808      	ldr	r0, [pc, #32]	; (8014b80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014b60:	f7fe f9f9 	bl	8012f56 <USBD_GetString>
 8014b64:	e004      	b.n	8014b70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014b66:	683a      	ldr	r2, [r7, #0]
 8014b68:	4904      	ldr	r1, [pc, #16]	; (8014b7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014b6a:	4805      	ldr	r0, [pc, #20]	; (8014b80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014b6c:	f7fe f9f3 	bl	8012f56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014b70:	4b02      	ldr	r3, [pc, #8]	; (8014b7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3708      	adds	r7, #8
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	240064b8 	.word	0x240064b8
 8014b80:	080183d0 	.word	0x080183d0

08014b84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b084      	sub	sp, #16
 8014b88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014b8a:	4b0f      	ldr	r3, [pc, #60]	; (8014bc8 <Get_SerialNum+0x44>)
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014b90:	4b0e      	ldr	r3, [pc, #56]	; (8014bcc <Get_SerialNum+0x48>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014b96:	4b0e      	ldr	r3, [pc, #56]	; (8014bd0 <Get_SerialNum+0x4c>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	4413      	add	r3, r2
 8014ba2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d009      	beq.n	8014bbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014baa:	2208      	movs	r2, #8
 8014bac:	4909      	ldr	r1, [pc, #36]	; (8014bd4 <Get_SerialNum+0x50>)
 8014bae:	68f8      	ldr	r0, [r7, #12]
 8014bb0:	f000 f814 	bl	8014bdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014bb4:	2204      	movs	r2, #4
 8014bb6:	4908      	ldr	r1, [pc, #32]	; (8014bd8 <Get_SerialNum+0x54>)
 8014bb8:	68b8      	ldr	r0, [r7, #8]
 8014bba:	f000 f80f 	bl	8014bdc <IntToUnicode>
  }
}
 8014bbe:	bf00      	nop
 8014bc0:	3710      	adds	r7, #16
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	1ff1e800 	.word	0x1ff1e800
 8014bcc:	1ff1e804 	.word	0x1ff1e804
 8014bd0:	1ff1e808 	.word	0x1ff1e808
 8014bd4:	24000242 	.word	0x24000242
 8014bd8:	24000252 	.word	0x24000252

08014bdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014bdc:	b480      	push	{r7}
 8014bde:	b087      	sub	sp, #28
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	60f8      	str	r0, [r7, #12]
 8014be4:	60b9      	str	r1, [r7, #8]
 8014be6:	4613      	mov	r3, r2
 8014be8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014bea:	2300      	movs	r3, #0
 8014bec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014bee:	2300      	movs	r3, #0
 8014bf0:	75fb      	strb	r3, [r7, #23]
 8014bf2:	e027      	b.n	8014c44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	0f1b      	lsrs	r3, r3, #28
 8014bf8:	2b09      	cmp	r3, #9
 8014bfa:	d80b      	bhi.n	8014c14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	0f1b      	lsrs	r3, r3, #28
 8014c00:	b2da      	uxtb	r2, r3
 8014c02:	7dfb      	ldrb	r3, [r7, #23]
 8014c04:	005b      	lsls	r3, r3, #1
 8014c06:	4619      	mov	r1, r3
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	440b      	add	r3, r1
 8014c0c:	3230      	adds	r2, #48	; 0x30
 8014c0e:	b2d2      	uxtb	r2, r2
 8014c10:	701a      	strb	r2, [r3, #0]
 8014c12:	e00a      	b.n	8014c2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	0f1b      	lsrs	r3, r3, #28
 8014c18:	b2da      	uxtb	r2, r3
 8014c1a:	7dfb      	ldrb	r3, [r7, #23]
 8014c1c:	005b      	lsls	r3, r3, #1
 8014c1e:	4619      	mov	r1, r3
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	440b      	add	r3, r1
 8014c24:	3237      	adds	r2, #55	; 0x37
 8014c26:	b2d2      	uxtb	r2, r2
 8014c28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	011b      	lsls	r3, r3, #4
 8014c2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014c30:	7dfb      	ldrb	r3, [r7, #23]
 8014c32:	005b      	lsls	r3, r3, #1
 8014c34:	3301      	adds	r3, #1
 8014c36:	68ba      	ldr	r2, [r7, #8]
 8014c38:	4413      	add	r3, r2
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014c3e:	7dfb      	ldrb	r3, [r7, #23]
 8014c40:	3301      	adds	r3, #1
 8014c42:	75fb      	strb	r3, [r7, #23]
 8014c44:	7dfa      	ldrb	r2, [r7, #23]
 8014c46:	79fb      	ldrb	r3, [r7, #7]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d3d3      	bcc.n	8014bf4 <IntToUnicode+0x18>
  }
}
 8014c4c:	bf00      	nop
 8014c4e:	bf00      	nop
 8014c50:	371c      	adds	r7, #28
 8014c52:	46bd      	mov	sp, r7
 8014c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c58:	4770      	bx	lr
	...

08014c5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b08a      	sub	sp, #40	; 0x28
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014c64:	f107 0314 	add.w	r3, r7, #20
 8014c68:	2200      	movs	r2, #0
 8014c6a:	601a      	str	r2, [r3, #0]
 8014c6c:	605a      	str	r2, [r3, #4]
 8014c6e:	609a      	str	r2, [r3, #8]
 8014c70:	60da      	str	r2, [r3, #12]
 8014c72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	4a1f      	ldr	r2, [pc, #124]	; (8014cf8 <HAL_PCD_MspInit+0x9c>)
 8014c7a:	4293      	cmp	r3, r2
 8014c7c:	d138      	bne.n	8014cf0 <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8014c7e:	f7f3 fd6d 	bl	800875c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014c82:	4b1e      	ldr	r3, [pc, #120]	; (8014cfc <HAL_PCD_MspInit+0xa0>)
 8014c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c88:	4a1c      	ldr	r2, [pc, #112]	; (8014cfc <HAL_PCD_MspInit+0xa0>)
 8014c8a:	f043 0301 	orr.w	r3, r3, #1
 8014c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014c92:	4b1a      	ldr	r3, [pc, #104]	; (8014cfc <HAL_PCD_MspInit+0xa0>)
 8014c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c98:	f003 0301 	and.w	r3, r3, #1
 8014c9c:	613b      	str	r3, [r7, #16]
 8014c9e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014ca0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ca6:	2302      	movs	r3, #2
 8014ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014caa:	2300      	movs	r3, #0
 8014cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014cb2:	230a      	movs	r3, #10
 8014cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014cb6:	f107 0314 	add.w	r3, r7, #20
 8014cba:	4619      	mov	r1, r3
 8014cbc:	4810      	ldr	r0, [pc, #64]	; (8014d00 <HAL_PCD_MspInit+0xa4>)
 8014cbe:	f7f2 f92d 	bl	8006f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014cc2:	4b0e      	ldr	r3, [pc, #56]	; (8014cfc <HAL_PCD_MspInit+0xa0>)
 8014cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014cc8:	4a0c      	ldr	r2, [pc, #48]	; (8014cfc <HAL_PCD_MspInit+0xa0>)
 8014cca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014cce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014cd2:	4b0a      	ldr	r3, [pc, #40]	; (8014cfc <HAL_PCD_MspInit+0xa0>)
 8014cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014cdc:	60fb      	str	r3, [r7, #12]
 8014cde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	2105      	movs	r1, #5
 8014ce4:	2065      	movs	r0, #101	; 0x65
 8014ce6:	f7f1 fa3d 	bl	8006164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014cea:	2065      	movs	r0, #101	; 0x65
 8014cec:	f7f1 fa54 	bl	8006198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014cf0:	bf00      	nop
 8014cf2:	3728      	adds	r7, #40	; 0x28
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}
 8014cf8:	40080000 	.word	0x40080000
 8014cfc:	58024400 	.word	0x58024400
 8014d00:	58020000 	.word	0x58020000

08014d04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b082      	sub	sp, #8
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014d18:	4619      	mov	r1, r3
 8014d1a:	4610      	mov	r0, r2
 8014d1c:	f7fd f934 	bl	8011f88 <USBD_LL_SetupStage>
}
 8014d20:	bf00      	nop
 8014d22:	3708      	adds	r7, #8
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}

08014d28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b082      	sub	sp, #8
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	460b      	mov	r3, r1
 8014d32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014d3a:	78fa      	ldrb	r2, [r7, #3]
 8014d3c:	6879      	ldr	r1, [r7, #4]
 8014d3e:	4613      	mov	r3, r2
 8014d40:	00db      	lsls	r3, r3, #3
 8014d42:	1a9b      	subs	r3, r3, r2
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	440b      	add	r3, r1
 8014d48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014d4c:	681a      	ldr	r2, [r3, #0]
 8014d4e:	78fb      	ldrb	r3, [r7, #3]
 8014d50:	4619      	mov	r1, r3
 8014d52:	f7fd f96e 	bl	8012032 <USBD_LL_DataOutStage>
}
 8014d56:	bf00      	nop
 8014d58:	3708      	adds	r7, #8
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}

08014d5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d5e:	b580      	push	{r7, lr}
 8014d60:	b082      	sub	sp, #8
 8014d62:	af00      	add	r7, sp, #0
 8014d64:	6078      	str	r0, [r7, #4]
 8014d66:	460b      	mov	r3, r1
 8014d68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014d70:	78fa      	ldrb	r2, [r7, #3]
 8014d72:	6879      	ldr	r1, [r7, #4]
 8014d74:	4613      	mov	r3, r2
 8014d76:	00db      	lsls	r3, r3, #3
 8014d78:	1a9b      	subs	r3, r3, r2
 8014d7a:	009b      	lsls	r3, r3, #2
 8014d7c:	440b      	add	r3, r1
 8014d7e:	3348      	adds	r3, #72	; 0x48
 8014d80:	681a      	ldr	r2, [r3, #0]
 8014d82:	78fb      	ldrb	r3, [r7, #3]
 8014d84:	4619      	mov	r1, r3
 8014d86:	f7fd f9b7 	bl	80120f8 <USBD_LL_DataInStage>
}
 8014d8a:	bf00      	nop
 8014d8c:	3708      	adds	r7, #8
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b082      	sub	sp, #8
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7fd facb 	bl	801233c <USBD_LL_SOF>
}
 8014da6:	bf00      	nop
 8014da8:	3708      	adds	r7, #8
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}

08014dae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dae:	b580      	push	{r7, lr}
 8014db0:	b084      	sub	sp, #16
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014db6:	2301      	movs	r3, #1
 8014db8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	68db      	ldr	r3, [r3, #12]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d102      	bne.n	8014dc8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	73fb      	strb	r3, [r7, #15]
 8014dc6:	e008      	b.n	8014dda <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	68db      	ldr	r3, [r3, #12]
 8014dcc:	2b02      	cmp	r3, #2
 8014dce:	d102      	bne.n	8014dd6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	73fb      	strb	r3, [r7, #15]
 8014dd4:	e001      	b.n	8014dda <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014dd6:	f7ed f8dd 	bl	8001f94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014de0:	7bfa      	ldrb	r2, [r7, #15]
 8014de2:	4611      	mov	r1, r2
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7fd fa6b 	bl	80122c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7fd fa17 	bl	8012224 <USBD_LL_Reset>
}
 8014df6:	bf00      	nop
 8014df8:	3710      	adds	r7, #16
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
	...

08014e00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7fd fa66 	bl	80122e0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	6812      	ldr	r2, [r2, #0]
 8014e22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014e26:	f043 0301 	orr.w	r3, r3, #1
 8014e2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6a1b      	ldr	r3, [r3, #32]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d005      	beq.n	8014e40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014e34:	4b04      	ldr	r3, [pc, #16]	; (8014e48 <HAL_PCD_SuspendCallback+0x48>)
 8014e36:	691b      	ldr	r3, [r3, #16]
 8014e38:	4a03      	ldr	r2, [pc, #12]	; (8014e48 <HAL_PCD_SuspendCallback+0x48>)
 8014e3a:	f043 0306 	orr.w	r3, r3, #6
 8014e3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014e40:	bf00      	nop
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}
 8014e48:	e000ed00 	.word	0xe000ed00

08014e4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b082      	sub	sp, #8
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7fd fa56 	bl	801230c <USBD_LL_Resume>
}
 8014e60:	bf00      	nop
 8014e62:	3708      	adds	r7, #8
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}

08014e68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	460b      	mov	r3, r1
 8014e72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014e7a:	78fa      	ldrb	r2, [r7, #3]
 8014e7c:	4611      	mov	r1, r2
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f7fd faa4 	bl	80123cc <USBD_LL_IsoOUTIncomplete>
}
 8014e84:	bf00      	nop
 8014e86:	3708      	adds	r7, #8
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}

08014e8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	460b      	mov	r3, r1
 8014e96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014e9e:	78fa      	ldrb	r2, [r7, #3]
 8014ea0:	4611      	mov	r1, r2
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7fd fa6c 	bl	8012380 <USBD_LL_IsoINIncomplete>
}
 8014ea8:	bf00      	nop
 8014eaa:	3708      	adds	r7, #8
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}

08014eb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7fd faaa 	bl	8012418 <USBD_LL_DevConnected>
}
 8014ec4:	bf00      	nop
 8014ec6:	3708      	adds	r7, #8
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b082      	sub	sp, #8
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fd faa7 	bl	801242e <USBD_LL_DevDisconnected>
}
 8014ee0:	bf00      	nop
 8014ee2:	3708      	adds	r7, #8
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}

08014ee8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b082      	sub	sp, #8
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d13e      	bne.n	8014f76 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014ef8:	4a21      	ldr	r2, [pc, #132]	; (8014f80 <USBD_LL_Init+0x98>)
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	4a1f      	ldr	r2, [pc, #124]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014f08:	4b1d      	ldr	r3, [pc, #116]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f0a:	4a1e      	ldr	r2, [pc, #120]	; (8014f84 <USBD_LL_Init+0x9c>)
 8014f0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8014f0e:	4b1c      	ldr	r3, [pc, #112]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f10:	2209      	movs	r2, #9
 8014f12:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014f14:	4b1a      	ldr	r3, [pc, #104]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f16:	2202      	movs	r2, #2
 8014f18:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 8014f1a:	4b19      	ldr	r3, [pc, #100]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f1c:	2201      	movs	r2, #1
 8014f1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014f20:	4b17      	ldr	r3, [pc, #92]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f22:	2202      	movs	r2, #2
 8014f24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014f26:	4b16      	ldr	r3, [pc, #88]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f28:	2200      	movs	r2, #0
 8014f2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014f2c:	4b14      	ldr	r3, [pc, #80]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f2e:	2200      	movs	r2, #0
 8014f30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014f32:	4b13      	ldr	r3, [pc, #76]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f34:	2200      	movs	r2, #0
 8014f36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014f38:	4b11      	ldr	r3, [pc, #68]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014f3e:	4b10      	ldr	r3, [pc, #64]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f40:	2200      	movs	r2, #0
 8014f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014f44:	4b0e      	ldr	r3, [pc, #56]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f46:	2200      	movs	r2, #0
 8014f48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014f4a:	480d      	ldr	r0, [pc, #52]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f4c:	f7f2 f9e1 	bl	8007312 <HAL_PCD_Init>
 8014f50:	4603      	mov	r3, r0
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d001      	beq.n	8014f5a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8014f56:	f7ed f81d 	bl	8001f94 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014f5a:	2180      	movs	r1, #128	; 0x80
 8014f5c:	4808      	ldr	r0, [pc, #32]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f5e:	f7f3 fb72 	bl	8008646 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014f62:	2240      	movs	r2, #64	; 0x40
 8014f64:	2100      	movs	r1, #0
 8014f66:	4806      	ldr	r0, [pc, #24]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f68:	f7f3 fb26 	bl	80085b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014f6c:	2280      	movs	r2, #128	; 0x80
 8014f6e:	2101      	movs	r1, #1
 8014f70:	4803      	ldr	r0, [pc, #12]	; (8014f80 <USBD_LL_Init+0x98>)
 8014f72:	f7f3 fb21 	bl	80085b8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8014f76:	2300      	movs	r3, #0
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}
 8014f80:	240066b8 	.word	0x240066b8
 8014f84:	40080000 	.word	0x40080000

08014f88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b084      	sub	sp, #16
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f90:	2300      	movs	r3, #0
 8014f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f94:	2300      	movs	r3, #0
 8014f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7f2 fadb 	bl	800755a <HAL_PCD_Start>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014fa8:	7bfb      	ldrb	r3, [r7, #15]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f000 f942 	bl	8015234 <USBD_Get_USB_Status>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	3710      	adds	r7, #16
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}

08014fbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014fbe:	b580      	push	{r7, lr}
 8014fc0:	b084      	sub	sp, #16
 8014fc2:	af00      	add	r7, sp, #0
 8014fc4:	6078      	str	r0, [r7, #4]
 8014fc6:	4608      	mov	r0, r1
 8014fc8:	4611      	mov	r1, r2
 8014fca:	461a      	mov	r2, r3
 8014fcc:	4603      	mov	r3, r0
 8014fce:	70fb      	strb	r3, [r7, #3]
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	70bb      	strb	r3, [r7, #2]
 8014fd4:	4613      	mov	r3, r2
 8014fd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fd8:	2300      	movs	r3, #0
 8014fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fdc:	2300      	movs	r3, #0
 8014fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014fe6:	78bb      	ldrb	r3, [r7, #2]
 8014fe8:	883a      	ldrh	r2, [r7, #0]
 8014fea:	78f9      	ldrb	r1, [r7, #3]
 8014fec:	f7f2 feec 	bl	8007dc8 <HAL_PCD_EP_Open>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ff4:	7bfb      	ldrb	r3, [r7, #15]
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f000 f91c 	bl	8015234 <USBD_Get_USB_Status>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015000:	7bbb      	ldrb	r3, [r7, #14]
}
 8015002:	4618      	mov	r0, r3
 8015004:	3710      	adds	r7, #16
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}

0801500a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801500a:	b580      	push	{r7, lr}
 801500c:	b084      	sub	sp, #16
 801500e:	af00      	add	r7, sp, #0
 8015010:	6078      	str	r0, [r7, #4]
 8015012:	460b      	mov	r3, r1
 8015014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015016:	2300      	movs	r3, #0
 8015018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801501a:	2300      	movs	r3, #0
 801501c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015024:	78fa      	ldrb	r2, [r7, #3]
 8015026:	4611      	mov	r1, r2
 8015028:	4618      	mov	r0, r3
 801502a:	f7f2 ff35 	bl	8007e98 <HAL_PCD_EP_Close>
 801502e:	4603      	mov	r3, r0
 8015030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015032:	7bfb      	ldrb	r3, [r7, #15]
 8015034:	4618      	mov	r0, r3
 8015036:	f000 f8fd 	bl	8015234 <USBD_Get_USB_Status>
 801503a:	4603      	mov	r3, r0
 801503c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801503e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015040:	4618      	mov	r0, r3
 8015042:	3710      	adds	r7, #16
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b084      	sub	sp, #16
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
 8015050:	460b      	mov	r3, r1
 8015052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015054:	2300      	movs	r3, #0
 8015056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015058:	2300      	movs	r3, #0
 801505a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015062:	78fa      	ldrb	r2, [r7, #3]
 8015064:	4611      	mov	r1, r2
 8015066:	4618      	mov	r0, r3
 8015068:	f7f3 f80d 	bl	8008086 <HAL_PCD_EP_SetStall>
 801506c:	4603      	mov	r3, r0
 801506e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015070:	7bfb      	ldrb	r3, [r7, #15]
 8015072:	4618      	mov	r0, r3
 8015074:	f000 f8de 	bl	8015234 <USBD_Get_USB_Status>
 8015078:	4603      	mov	r3, r0
 801507a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801507c:	7bbb      	ldrb	r3, [r7, #14]
}
 801507e:	4618      	mov	r0, r3
 8015080:	3710      	adds	r7, #16
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}

08015086 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015086:	b580      	push	{r7, lr}
 8015088:	b084      	sub	sp, #16
 801508a:	af00      	add	r7, sp, #0
 801508c:	6078      	str	r0, [r7, #4]
 801508e:	460b      	mov	r3, r1
 8015090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015092:	2300      	movs	r3, #0
 8015094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015096:	2300      	movs	r3, #0
 8015098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80150a0:	78fa      	ldrb	r2, [r7, #3]
 80150a2:	4611      	mov	r1, r2
 80150a4:	4618      	mov	r0, r3
 80150a6:	f7f3 f852 	bl	800814e <HAL_PCD_EP_ClrStall>
 80150aa:	4603      	mov	r3, r0
 80150ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150ae:	7bfb      	ldrb	r3, [r7, #15]
 80150b0:	4618      	mov	r0, r3
 80150b2:	f000 f8bf 	bl	8015234 <USBD_Get_USB_Status>
 80150b6:	4603      	mov	r3, r0
 80150b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80150ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80150bc:	4618      	mov	r0, r3
 80150be:	3710      	adds	r7, #16
 80150c0:	46bd      	mov	sp, r7
 80150c2:	bd80      	pop	{r7, pc}

080150c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150c4:	b480      	push	{r7}
 80150c6:	b085      	sub	sp, #20
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
 80150cc:	460b      	mov	r3, r1
 80150ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80150d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80150d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	da0b      	bge.n	80150f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80150e0:	78fb      	ldrb	r3, [r7, #3]
 80150e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80150e6:	68f9      	ldr	r1, [r7, #12]
 80150e8:	4613      	mov	r3, r2
 80150ea:	00db      	lsls	r3, r3, #3
 80150ec:	1a9b      	subs	r3, r3, r2
 80150ee:	009b      	lsls	r3, r3, #2
 80150f0:	440b      	add	r3, r1
 80150f2:	333e      	adds	r3, #62	; 0x3e
 80150f4:	781b      	ldrb	r3, [r3, #0]
 80150f6:	e00b      	b.n	8015110 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80150f8:	78fb      	ldrb	r3, [r7, #3]
 80150fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80150fe:	68f9      	ldr	r1, [r7, #12]
 8015100:	4613      	mov	r3, r2
 8015102:	00db      	lsls	r3, r3, #3
 8015104:	1a9b      	subs	r3, r3, r2
 8015106:	009b      	lsls	r3, r3, #2
 8015108:	440b      	add	r3, r1
 801510a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801510e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015110:	4618      	mov	r0, r3
 8015112:	3714      	adds	r7, #20
 8015114:	46bd      	mov	sp, r7
 8015116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511a:	4770      	bx	lr

0801511c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b084      	sub	sp, #16
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
 8015124:	460b      	mov	r3, r1
 8015126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015128:	2300      	movs	r3, #0
 801512a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801512c:	2300      	movs	r3, #0
 801512e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015136:	78fa      	ldrb	r2, [r7, #3]
 8015138:	4611      	mov	r1, r2
 801513a:	4618      	mov	r0, r3
 801513c:	f7f2 fe1f 	bl	8007d7e <HAL_PCD_SetAddress>
 8015140:	4603      	mov	r3, r0
 8015142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015144:	7bfb      	ldrb	r3, [r7, #15]
 8015146:	4618      	mov	r0, r3
 8015148:	f000 f874 	bl	8015234 <USBD_Get_USB_Status>
 801514c:	4603      	mov	r3, r0
 801514e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015150:	7bbb      	ldrb	r3, [r7, #14]
}
 8015152:	4618      	mov	r0, r3
 8015154:	3710      	adds	r7, #16
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}

0801515a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801515a:	b580      	push	{r7, lr}
 801515c:	b086      	sub	sp, #24
 801515e:	af00      	add	r7, sp, #0
 8015160:	60f8      	str	r0, [r7, #12]
 8015162:	607a      	str	r2, [r7, #4]
 8015164:	603b      	str	r3, [r7, #0]
 8015166:	460b      	mov	r3, r1
 8015168:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801516a:	2300      	movs	r3, #0
 801516c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801516e:	2300      	movs	r3, #0
 8015170:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015178:	7af9      	ldrb	r1, [r7, #11]
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	687a      	ldr	r2, [r7, #4]
 801517e:	f7f2 ff38 	bl	8007ff2 <HAL_PCD_EP_Transmit>
 8015182:	4603      	mov	r3, r0
 8015184:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015186:	7dfb      	ldrb	r3, [r7, #23]
 8015188:	4618      	mov	r0, r3
 801518a:	f000 f853 	bl	8015234 <USBD_Get_USB_Status>
 801518e:	4603      	mov	r3, r0
 8015190:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015192:	7dbb      	ldrb	r3, [r7, #22]
}
 8015194:	4618      	mov	r0, r3
 8015196:	3718      	adds	r7, #24
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}

0801519c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b086      	sub	sp, #24
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	607a      	str	r2, [r7, #4]
 80151a6:	603b      	str	r3, [r7, #0]
 80151a8:	460b      	mov	r3, r1
 80151aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151ac:	2300      	movs	r3, #0
 80151ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151b0:	2300      	movs	r3, #0
 80151b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80151ba:	7af9      	ldrb	r1, [r7, #11]
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	687a      	ldr	r2, [r7, #4]
 80151c0:	f7f2 feb4 	bl	8007f2c <HAL_PCD_EP_Receive>
 80151c4:	4603      	mov	r3, r0
 80151c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80151c8:	7dfb      	ldrb	r3, [r7, #23]
 80151ca:	4618      	mov	r0, r3
 80151cc:	f000 f832 	bl	8015234 <USBD_Get_USB_Status>
 80151d0:	4603      	mov	r3, r0
 80151d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80151d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3718      	adds	r7, #24
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}

080151de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80151de:	b580      	push	{r7, lr}
 80151e0:	b082      	sub	sp, #8
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	6078      	str	r0, [r7, #4]
 80151e6:	460b      	mov	r3, r1
 80151e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80151f0:	78fa      	ldrb	r2, [r7, #3]
 80151f2:	4611      	mov	r1, r2
 80151f4:	4618      	mov	r0, r3
 80151f6:	f7f2 fee4 	bl	8007fc2 <HAL_PCD_EP_GetRxCount>
 80151fa:	4603      	mov	r3, r0
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015204:	b480      	push	{r7}
 8015206:	b083      	sub	sp, #12
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801520c:	4b03      	ldr	r3, [pc, #12]	; (801521c <USBD_static_malloc+0x18>)
}
 801520e:	4618      	mov	r0, r3
 8015210:	370c      	adds	r7, #12
 8015212:	46bd      	mov	sp, r7
 8015214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	24004964 	.word	0x24004964

08015220 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015220:	b480      	push	{r7}
 8015222:	b083      	sub	sp, #12
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]

}
 8015228:	bf00      	nop
 801522a:	370c      	adds	r7, #12
 801522c:	46bd      	mov	sp, r7
 801522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015232:	4770      	bx	lr

08015234 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015234:	b480      	push	{r7}
 8015236:	b085      	sub	sp, #20
 8015238:	af00      	add	r7, sp, #0
 801523a:	4603      	mov	r3, r0
 801523c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801523e:	2300      	movs	r3, #0
 8015240:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015242:	79fb      	ldrb	r3, [r7, #7]
 8015244:	2b03      	cmp	r3, #3
 8015246:	d817      	bhi.n	8015278 <USBD_Get_USB_Status+0x44>
 8015248:	a201      	add	r2, pc, #4	; (adr r2, 8015250 <USBD_Get_USB_Status+0x1c>)
 801524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801524e:	bf00      	nop
 8015250:	08015261 	.word	0x08015261
 8015254:	08015267 	.word	0x08015267
 8015258:	0801526d 	.word	0x0801526d
 801525c:	08015273 	.word	0x08015273
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015260:	2300      	movs	r3, #0
 8015262:	73fb      	strb	r3, [r7, #15]
    break;
 8015264:	e00b      	b.n	801527e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015266:	2303      	movs	r3, #3
 8015268:	73fb      	strb	r3, [r7, #15]
    break;
 801526a:	e008      	b.n	801527e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801526c:	2301      	movs	r3, #1
 801526e:	73fb      	strb	r3, [r7, #15]
    break;
 8015270:	e005      	b.n	801527e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015272:	2303      	movs	r3, #3
 8015274:	73fb      	strb	r3, [r7, #15]
    break;
 8015276:	e002      	b.n	801527e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015278:	2303      	movs	r3, #3
 801527a:	73fb      	strb	r3, [r7, #15]
    break;
 801527c:	bf00      	nop
  }
  return usb_status;
 801527e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015280:	4618      	mov	r0, r3
 8015282:	3714      	adds	r7, #20
 8015284:	46bd      	mov	sp, r7
 8015286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528a:	4770      	bx	lr

0801528c <atoi>:
 801528c:	220a      	movs	r2, #10
 801528e:	2100      	movs	r1, #0
 8015290:	f000 bfae 	b.w	80161f0 <strtol>

08015294 <__errno>:
 8015294:	4b01      	ldr	r3, [pc, #4]	; (801529c <__errno+0x8>)
 8015296:	6818      	ldr	r0, [r3, #0]
 8015298:	4770      	bx	lr
 801529a:	bf00      	nop
 801529c:	2400025c 	.word	0x2400025c

080152a0 <std>:
 80152a0:	2300      	movs	r3, #0
 80152a2:	b510      	push	{r4, lr}
 80152a4:	4604      	mov	r4, r0
 80152a6:	e9c0 3300 	strd	r3, r3, [r0]
 80152aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80152ae:	6083      	str	r3, [r0, #8]
 80152b0:	8181      	strh	r1, [r0, #12]
 80152b2:	6643      	str	r3, [r0, #100]	; 0x64
 80152b4:	81c2      	strh	r2, [r0, #14]
 80152b6:	6183      	str	r3, [r0, #24]
 80152b8:	4619      	mov	r1, r3
 80152ba:	2208      	movs	r2, #8
 80152bc:	305c      	adds	r0, #92	; 0x5c
 80152be:	f000 f91a 	bl	80154f6 <memset>
 80152c2:	4b05      	ldr	r3, [pc, #20]	; (80152d8 <std+0x38>)
 80152c4:	6263      	str	r3, [r4, #36]	; 0x24
 80152c6:	4b05      	ldr	r3, [pc, #20]	; (80152dc <std+0x3c>)
 80152c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80152ca:	4b05      	ldr	r3, [pc, #20]	; (80152e0 <std+0x40>)
 80152cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80152ce:	4b05      	ldr	r3, [pc, #20]	; (80152e4 <std+0x44>)
 80152d0:	6224      	str	r4, [r4, #32]
 80152d2:	6323      	str	r3, [r4, #48]	; 0x30
 80152d4:	bd10      	pop	{r4, pc}
 80152d6:	bf00      	nop
 80152d8:	08015fa9 	.word	0x08015fa9
 80152dc:	08015fcb 	.word	0x08015fcb
 80152e0:	08016003 	.word	0x08016003
 80152e4:	08016027 	.word	0x08016027

080152e8 <_cleanup_r>:
 80152e8:	4901      	ldr	r1, [pc, #4]	; (80152f0 <_cleanup_r+0x8>)
 80152ea:	f000 b8af 	b.w	801544c <_fwalk_reent>
 80152ee:	bf00      	nop
 80152f0:	08016fb1 	.word	0x08016fb1

080152f4 <__sfmoreglue>:
 80152f4:	b570      	push	{r4, r5, r6, lr}
 80152f6:	1e4a      	subs	r2, r1, #1
 80152f8:	2568      	movs	r5, #104	; 0x68
 80152fa:	4355      	muls	r5, r2
 80152fc:	460e      	mov	r6, r1
 80152fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015302:	f000 f901 	bl	8015508 <_malloc_r>
 8015306:	4604      	mov	r4, r0
 8015308:	b140      	cbz	r0, 801531c <__sfmoreglue+0x28>
 801530a:	2100      	movs	r1, #0
 801530c:	e9c0 1600 	strd	r1, r6, [r0]
 8015310:	300c      	adds	r0, #12
 8015312:	60a0      	str	r0, [r4, #8]
 8015314:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015318:	f000 f8ed 	bl	80154f6 <memset>
 801531c:	4620      	mov	r0, r4
 801531e:	bd70      	pop	{r4, r5, r6, pc}

08015320 <__sfp_lock_acquire>:
 8015320:	4801      	ldr	r0, [pc, #4]	; (8015328 <__sfp_lock_acquire+0x8>)
 8015322:	f000 b8d8 	b.w	80154d6 <__retarget_lock_acquire_recursive>
 8015326:	bf00      	nop
 8015328:	24006ac8 	.word	0x24006ac8

0801532c <__sfp_lock_release>:
 801532c:	4801      	ldr	r0, [pc, #4]	; (8015334 <__sfp_lock_release+0x8>)
 801532e:	f000 b8d3 	b.w	80154d8 <__retarget_lock_release_recursive>
 8015332:	bf00      	nop
 8015334:	24006ac8 	.word	0x24006ac8

08015338 <__sinit_lock_acquire>:
 8015338:	4801      	ldr	r0, [pc, #4]	; (8015340 <__sinit_lock_acquire+0x8>)
 801533a:	f000 b8cc 	b.w	80154d6 <__retarget_lock_acquire_recursive>
 801533e:	bf00      	nop
 8015340:	24006ac3 	.word	0x24006ac3

08015344 <__sinit_lock_release>:
 8015344:	4801      	ldr	r0, [pc, #4]	; (801534c <__sinit_lock_release+0x8>)
 8015346:	f000 b8c7 	b.w	80154d8 <__retarget_lock_release_recursive>
 801534a:	bf00      	nop
 801534c:	24006ac3 	.word	0x24006ac3

08015350 <__sinit>:
 8015350:	b510      	push	{r4, lr}
 8015352:	4604      	mov	r4, r0
 8015354:	f7ff fff0 	bl	8015338 <__sinit_lock_acquire>
 8015358:	69a3      	ldr	r3, [r4, #24]
 801535a:	b11b      	cbz	r3, 8015364 <__sinit+0x14>
 801535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015360:	f7ff bff0 	b.w	8015344 <__sinit_lock_release>
 8015364:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015368:	6523      	str	r3, [r4, #80]	; 0x50
 801536a:	4b13      	ldr	r3, [pc, #76]	; (80153b8 <__sinit+0x68>)
 801536c:	4a13      	ldr	r2, [pc, #76]	; (80153bc <__sinit+0x6c>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	62a2      	str	r2, [r4, #40]	; 0x28
 8015372:	42a3      	cmp	r3, r4
 8015374:	bf04      	itt	eq
 8015376:	2301      	moveq	r3, #1
 8015378:	61a3      	streq	r3, [r4, #24]
 801537a:	4620      	mov	r0, r4
 801537c:	f000 f820 	bl	80153c0 <__sfp>
 8015380:	6060      	str	r0, [r4, #4]
 8015382:	4620      	mov	r0, r4
 8015384:	f000 f81c 	bl	80153c0 <__sfp>
 8015388:	60a0      	str	r0, [r4, #8]
 801538a:	4620      	mov	r0, r4
 801538c:	f000 f818 	bl	80153c0 <__sfp>
 8015390:	2200      	movs	r2, #0
 8015392:	60e0      	str	r0, [r4, #12]
 8015394:	2104      	movs	r1, #4
 8015396:	6860      	ldr	r0, [r4, #4]
 8015398:	f7ff ff82 	bl	80152a0 <std>
 801539c:	68a0      	ldr	r0, [r4, #8]
 801539e:	2201      	movs	r2, #1
 80153a0:	2109      	movs	r1, #9
 80153a2:	f7ff ff7d 	bl	80152a0 <std>
 80153a6:	68e0      	ldr	r0, [r4, #12]
 80153a8:	2202      	movs	r2, #2
 80153aa:	2112      	movs	r1, #18
 80153ac:	f7ff ff78 	bl	80152a0 <std>
 80153b0:	2301      	movs	r3, #1
 80153b2:	61a3      	str	r3, [r4, #24]
 80153b4:	e7d2      	b.n	801535c <__sinit+0xc>
 80153b6:	bf00      	nop
 80153b8:	08023720 	.word	0x08023720
 80153bc:	080152e9 	.word	0x080152e9

080153c0 <__sfp>:
 80153c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153c2:	4607      	mov	r7, r0
 80153c4:	f7ff ffac 	bl	8015320 <__sfp_lock_acquire>
 80153c8:	4b1e      	ldr	r3, [pc, #120]	; (8015444 <__sfp+0x84>)
 80153ca:	681e      	ldr	r6, [r3, #0]
 80153cc:	69b3      	ldr	r3, [r6, #24]
 80153ce:	b913      	cbnz	r3, 80153d6 <__sfp+0x16>
 80153d0:	4630      	mov	r0, r6
 80153d2:	f7ff ffbd 	bl	8015350 <__sinit>
 80153d6:	3648      	adds	r6, #72	; 0x48
 80153d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80153dc:	3b01      	subs	r3, #1
 80153de:	d503      	bpl.n	80153e8 <__sfp+0x28>
 80153e0:	6833      	ldr	r3, [r6, #0]
 80153e2:	b30b      	cbz	r3, 8015428 <__sfp+0x68>
 80153e4:	6836      	ldr	r6, [r6, #0]
 80153e6:	e7f7      	b.n	80153d8 <__sfp+0x18>
 80153e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80153ec:	b9d5      	cbnz	r5, 8015424 <__sfp+0x64>
 80153ee:	4b16      	ldr	r3, [pc, #88]	; (8015448 <__sfp+0x88>)
 80153f0:	60e3      	str	r3, [r4, #12]
 80153f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80153f6:	6665      	str	r5, [r4, #100]	; 0x64
 80153f8:	f000 f86c 	bl	80154d4 <__retarget_lock_init_recursive>
 80153fc:	f7ff ff96 	bl	801532c <__sfp_lock_release>
 8015400:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015404:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015408:	6025      	str	r5, [r4, #0]
 801540a:	61a5      	str	r5, [r4, #24]
 801540c:	2208      	movs	r2, #8
 801540e:	4629      	mov	r1, r5
 8015410:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015414:	f000 f86f 	bl	80154f6 <memset>
 8015418:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801541c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015420:	4620      	mov	r0, r4
 8015422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015424:	3468      	adds	r4, #104	; 0x68
 8015426:	e7d9      	b.n	80153dc <__sfp+0x1c>
 8015428:	2104      	movs	r1, #4
 801542a:	4638      	mov	r0, r7
 801542c:	f7ff ff62 	bl	80152f4 <__sfmoreglue>
 8015430:	4604      	mov	r4, r0
 8015432:	6030      	str	r0, [r6, #0]
 8015434:	2800      	cmp	r0, #0
 8015436:	d1d5      	bne.n	80153e4 <__sfp+0x24>
 8015438:	f7ff ff78 	bl	801532c <__sfp_lock_release>
 801543c:	230c      	movs	r3, #12
 801543e:	603b      	str	r3, [r7, #0]
 8015440:	e7ee      	b.n	8015420 <__sfp+0x60>
 8015442:	bf00      	nop
 8015444:	08023720 	.word	0x08023720
 8015448:	ffff0001 	.word	0xffff0001

0801544c <_fwalk_reent>:
 801544c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015450:	4606      	mov	r6, r0
 8015452:	4688      	mov	r8, r1
 8015454:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015458:	2700      	movs	r7, #0
 801545a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801545e:	f1b9 0901 	subs.w	r9, r9, #1
 8015462:	d505      	bpl.n	8015470 <_fwalk_reent+0x24>
 8015464:	6824      	ldr	r4, [r4, #0]
 8015466:	2c00      	cmp	r4, #0
 8015468:	d1f7      	bne.n	801545a <_fwalk_reent+0xe>
 801546a:	4638      	mov	r0, r7
 801546c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015470:	89ab      	ldrh	r3, [r5, #12]
 8015472:	2b01      	cmp	r3, #1
 8015474:	d907      	bls.n	8015486 <_fwalk_reent+0x3a>
 8015476:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801547a:	3301      	adds	r3, #1
 801547c:	d003      	beq.n	8015486 <_fwalk_reent+0x3a>
 801547e:	4629      	mov	r1, r5
 8015480:	4630      	mov	r0, r6
 8015482:	47c0      	blx	r8
 8015484:	4307      	orrs	r7, r0
 8015486:	3568      	adds	r5, #104	; 0x68
 8015488:	e7e9      	b.n	801545e <_fwalk_reent+0x12>
	...

0801548c <__libc_init_array>:
 801548c:	b570      	push	{r4, r5, r6, lr}
 801548e:	4d0d      	ldr	r5, [pc, #52]	; (80154c4 <__libc_init_array+0x38>)
 8015490:	4c0d      	ldr	r4, [pc, #52]	; (80154c8 <__libc_init_array+0x3c>)
 8015492:	1b64      	subs	r4, r4, r5
 8015494:	10a4      	asrs	r4, r4, #2
 8015496:	2600      	movs	r6, #0
 8015498:	42a6      	cmp	r6, r4
 801549a:	d109      	bne.n	80154b0 <__libc_init_array+0x24>
 801549c:	4d0b      	ldr	r5, [pc, #44]	; (80154cc <__libc_init_array+0x40>)
 801549e:	4c0c      	ldr	r4, [pc, #48]	; (80154d0 <__libc_init_array+0x44>)
 80154a0:	f002 fe9e 	bl	80181e0 <_init>
 80154a4:	1b64      	subs	r4, r4, r5
 80154a6:	10a4      	asrs	r4, r4, #2
 80154a8:	2600      	movs	r6, #0
 80154aa:	42a6      	cmp	r6, r4
 80154ac:	d105      	bne.n	80154ba <__libc_init_array+0x2e>
 80154ae:	bd70      	pop	{r4, r5, r6, pc}
 80154b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80154b4:	4798      	blx	r3
 80154b6:	3601      	adds	r6, #1
 80154b8:	e7ee      	b.n	8015498 <__libc_init_array+0xc>
 80154ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80154be:	4798      	blx	r3
 80154c0:	3601      	adds	r6, #1
 80154c2:	e7f2      	b.n	80154aa <__libc_init_array+0x1e>
 80154c4:	08023b10 	.word	0x08023b10
 80154c8:	08023b10 	.word	0x08023b10
 80154cc:	08023b10 	.word	0x08023b10
 80154d0:	08023b14 	.word	0x08023b14

080154d4 <__retarget_lock_init_recursive>:
 80154d4:	4770      	bx	lr

080154d6 <__retarget_lock_acquire_recursive>:
 80154d6:	4770      	bx	lr

080154d8 <__retarget_lock_release_recursive>:
 80154d8:	4770      	bx	lr

080154da <memcpy>:
 80154da:	440a      	add	r2, r1
 80154dc:	4291      	cmp	r1, r2
 80154de:	f100 33ff 	add.w	r3, r0, #4294967295
 80154e2:	d100      	bne.n	80154e6 <memcpy+0xc>
 80154e4:	4770      	bx	lr
 80154e6:	b510      	push	{r4, lr}
 80154e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80154ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80154f0:	4291      	cmp	r1, r2
 80154f2:	d1f9      	bne.n	80154e8 <memcpy+0xe>
 80154f4:	bd10      	pop	{r4, pc}

080154f6 <memset>:
 80154f6:	4402      	add	r2, r0
 80154f8:	4603      	mov	r3, r0
 80154fa:	4293      	cmp	r3, r2
 80154fc:	d100      	bne.n	8015500 <memset+0xa>
 80154fe:	4770      	bx	lr
 8015500:	f803 1b01 	strb.w	r1, [r3], #1
 8015504:	e7f9      	b.n	80154fa <memset+0x4>
	...

08015508 <_malloc_r>:
 8015508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801550a:	1ccd      	adds	r5, r1, #3
 801550c:	f025 0503 	bic.w	r5, r5, #3
 8015510:	3508      	adds	r5, #8
 8015512:	2d0c      	cmp	r5, #12
 8015514:	bf38      	it	cc
 8015516:	250c      	movcc	r5, #12
 8015518:	2d00      	cmp	r5, #0
 801551a:	4606      	mov	r6, r0
 801551c:	db01      	blt.n	8015522 <_malloc_r+0x1a>
 801551e:	42a9      	cmp	r1, r5
 8015520:	d903      	bls.n	801552a <_malloc_r+0x22>
 8015522:	230c      	movs	r3, #12
 8015524:	6033      	str	r3, [r6, #0]
 8015526:	2000      	movs	r0, #0
 8015528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801552a:	f001 fdad 	bl	8017088 <__malloc_lock>
 801552e:	4921      	ldr	r1, [pc, #132]	; (80155b4 <_malloc_r+0xac>)
 8015530:	680a      	ldr	r2, [r1, #0]
 8015532:	4614      	mov	r4, r2
 8015534:	b99c      	cbnz	r4, 801555e <_malloc_r+0x56>
 8015536:	4f20      	ldr	r7, [pc, #128]	; (80155b8 <_malloc_r+0xb0>)
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	b923      	cbnz	r3, 8015546 <_malloc_r+0x3e>
 801553c:	4621      	mov	r1, r4
 801553e:	4630      	mov	r0, r6
 8015540:	f000 fd02 	bl	8015f48 <_sbrk_r>
 8015544:	6038      	str	r0, [r7, #0]
 8015546:	4629      	mov	r1, r5
 8015548:	4630      	mov	r0, r6
 801554a:	f000 fcfd 	bl	8015f48 <_sbrk_r>
 801554e:	1c43      	adds	r3, r0, #1
 8015550:	d123      	bne.n	801559a <_malloc_r+0x92>
 8015552:	230c      	movs	r3, #12
 8015554:	6033      	str	r3, [r6, #0]
 8015556:	4630      	mov	r0, r6
 8015558:	f001 fd9c 	bl	8017094 <__malloc_unlock>
 801555c:	e7e3      	b.n	8015526 <_malloc_r+0x1e>
 801555e:	6823      	ldr	r3, [r4, #0]
 8015560:	1b5b      	subs	r3, r3, r5
 8015562:	d417      	bmi.n	8015594 <_malloc_r+0x8c>
 8015564:	2b0b      	cmp	r3, #11
 8015566:	d903      	bls.n	8015570 <_malloc_r+0x68>
 8015568:	6023      	str	r3, [r4, #0]
 801556a:	441c      	add	r4, r3
 801556c:	6025      	str	r5, [r4, #0]
 801556e:	e004      	b.n	801557a <_malloc_r+0x72>
 8015570:	6863      	ldr	r3, [r4, #4]
 8015572:	42a2      	cmp	r2, r4
 8015574:	bf0c      	ite	eq
 8015576:	600b      	streq	r3, [r1, #0]
 8015578:	6053      	strne	r3, [r2, #4]
 801557a:	4630      	mov	r0, r6
 801557c:	f001 fd8a 	bl	8017094 <__malloc_unlock>
 8015580:	f104 000b 	add.w	r0, r4, #11
 8015584:	1d23      	adds	r3, r4, #4
 8015586:	f020 0007 	bic.w	r0, r0, #7
 801558a:	1ac2      	subs	r2, r0, r3
 801558c:	d0cc      	beq.n	8015528 <_malloc_r+0x20>
 801558e:	1a1b      	subs	r3, r3, r0
 8015590:	50a3      	str	r3, [r4, r2]
 8015592:	e7c9      	b.n	8015528 <_malloc_r+0x20>
 8015594:	4622      	mov	r2, r4
 8015596:	6864      	ldr	r4, [r4, #4]
 8015598:	e7cc      	b.n	8015534 <_malloc_r+0x2c>
 801559a:	1cc4      	adds	r4, r0, #3
 801559c:	f024 0403 	bic.w	r4, r4, #3
 80155a0:	42a0      	cmp	r0, r4
 80155a2:	d0e3      	beq.n	801556c <_malloc_r+0x64>
 80155a4:	1a21      	subs	r1, r4, r0
 80155a6:	4630      	mov	r0, r6
 80155a8:	f000 fcce 	bl	8015f48 <_sbrk_r>
 80155ac:	3001      	adds	r0, #1
 80155ae:	d1dd      	bne.n	801556c <_malloc_r+0x64>
 80155b0:	e7cf      	b.n	8015552 <_malloc_r+0x4a>
 80155b2:	bf00      	nop
 80155b4:	24004b84 	.word	0x24004b84
 80155b8:	24004b88 	.word	0x24004b88

080155bc <__cvt>:
 80155bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155be:	ed2d 8b02 	vpush	{d8}
 80155c2:	eeb0 8b40 	vmov.f64	d8, d0
 80155c6:	b085      	sub	sp, #20
 80155c8:	4617      	mov	r7, r2
 80155ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80155cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80155ce:	ee18 2a90 	vmov	r2, s17
 80155d2:	f025 0520 	bic.w	r5, r5, #32
 80155d6:	2a00      	cmp	r2, #0
 80155d8:	bfb6      	itet	lt
 80155da:	222d      	movlt	r2, #45	; 0x2d
 80155dc:	2200      	movge	r2, #0
 80155de:	eeb1 8b40 	vneglt.f64	d8, d0
 80155e2:	2d46      	cmp	r5, #70	; 0x46
 80155e4:	460c      	mov	r4, r1
 80155e6:	701a      	strb	r2, [r3, #0]
 80155e8:	d004      	beq.n	80155f4 <__cvt+0x38>
 80155ea:	2d45      	cmp	r5, #69	; 0x45
 80155ec:	d100      	bne.n	80155f0 <__cvt+0x34>
 80155ee:	3401      	adds	r4, #1
 80155f0:	2102      	movs	r1, #2
 80155f2:	e000      	b.n	80155f6 <__cvt+0x3a>
 80155f4:	2103      	movs	r1, #3
 80155f6:	ab03      	add	r3, sp, #12
 80155f8:	9301      	str	r3, [sp, #4]
 80155fa:	ab02      	add	r3, sp, #8
 80155fc:	9300      	str	r3, [sp, #0]
 80155fe:	4622      	mov	r2, r4
 8015600:	4633      	mov	r3, r6
 8015602:	eeb0 0b48 	vmov.f64	d0, d8
 8015606:	f000 fecb 	bl	80163a0 <_dtoa_r>
 801560a:	2d47      	cmp	r5, #71	; 0x47
 801560c:	d109      	bne.n	8015622 <__cvt+0x66>
 801560e:	07fb      	lsls	r3, r7, #31
 8015610:	d407      	bmi.n	8015622 <__cvt+0x66>
 8015612:	9b03      	ldr	r3, [sp, #12]
 8015614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015616:	1a1b      	subs	r3, r3, r0
 8015618:	6013      	str	r3, [r2, #0]
 801561a:	b005      	add	sp, #20
 801561c:	ecbd 8b02 	vpop	{d8}
 8015620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015622:	2d46      	cmp	r5, #70	; 0x46
 8015624:	eb00 0204 	add.w	r2, r0, r4
 8015628:	d10c      	bne.n	8015644 <__cvt+0x88>
 801562a:	7803      	ldrb	r3, [r0, #0]
 801562c:	2b30      	cmp	r3, #48	; 0x30
 801562e:	d107      	bne.n	8015640 <__cvt+0x84>
 8015630:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015638:	bf1c      	itt	ne
 801563a:	f1c4 0401 	rsbne	r4, r4, #1
 801563e:	6034      	strne	r4, [r6, #0]
 8015640:	6833      	ldr	r3, [r6, #0]
 8015642:	441a      	add	r2, r3
 8015644:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801564c:	bf08      	it	eq
 801564e:	9203      	streq	r2, [sp, #12]
 8015650:	2130      	movs	r1, #48	; 0x30
 8015652:	9b03      	ldr	r3, [sp, #12]
 8015654:	4293      	cmp	r3, r2
 8015656:	d2dc      	bcs.n	8015612 <__cvt+0x56>
 8015658:	1c5c      	adds	r4, r3, #1
 801565a:	9403      	str	r4, [sp, #12]
 801565c:	7019      	strb	r1, [r3, #0]
 801565e:	e7f8      	b.n	8015652 <__cvt+0x96>

08015660 <__exponent>:
 8015660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015662:	4603      	mov	r3, r0
 8015664:	2900      	cmp	r1, #0
 8015666:	bfb8      	it	lt
 8015668:	4249      	neglt	r1, r1
 801566a:	f803 2b02 	strb.w	r2, [r3], #2
 801566e:	bfb4      	ite	lt
 8015670:	222d      	movlt	r2, #45	; 0x2d
 8015672:	222b      	movge	r2, #43	; 0x2b
 8015674:	2909      	cmp	r1, #9
 8015676:	7042      	strb	r2, [r0, #1]
 8015678:	dd2a      	ble.n	80156d0 <__exponent+0x70>
 801567a:	f10d 0407 	add.w	r4, sp, #7
 801567e:	46a4      	mov	ip, r4
 8015680:	270a      	movs	r7, #10
 8015682:	46a6      	mov	lr, r4
 8015684:	460a      	mov	r2, r1
 8015686:	fb91 f6f7 	sdiv	r6, r1, r7
 801568a:	fb07 1516 	mls	r5, r7, r6, r1
 801568e:	3530      	adds	r5, #48	; 0x30
 8015690:	2a63      	cmp	r2, #99	; 0x63
 8015692:	f104 34ff 	add.w	r4, r4, #4294967295
 8015696:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801569a:	4631      	mov	r1, r6
 801569c:	dcf1      	bgt.n	8015682 <__exponent+0x22>
 801569e:	3130      	adds	r1, #48	; 0x30
 80156a0:	f1ae 0502 	sub.w	r5, lr, #2
 80156a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80156a8:	1c44      	adds	r4, r0, #1
 80156aa:	4629      	mov	r1, r5
 80156ac:	4561      	cmp	r1, ip
 80156ae:	d30a      	bcc.n	80156c6 <__exponent+0x66>
 80156b0:	f10d 0209 	add.w	r2, sp, #9
 80156b4:	eba2 020e 	sub.w	r2, r2, lr
 80156b8:	4565      	cmp	r5, ip
 80156ba:	bf88      	it	hi
 80156bc:	2200      	movhi	r2, #0
 80156be:	4413      	add	r3, r2
 80156c0:	1a18      	subs	r0, r3, r0
 80156c2:	b003      	add	sp, #12
 80156c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80156ce:	e7ed      	b.n	80156ac <__exponent+0x4c>
 80156d0:	2330      	movs	r3, #48	; 0x30
 80156d2:	3130      	adds	r1, #48	; 0x30
 80156d4:	7083      	strb	r3, [r0, #2]
 80156d6:	70c1      	strb	r1, [r0, #3]
 80156d8:	1d03      	adds	r3, r0, #4
 80156da:	e7f1      	b.n	80156c0 <__exponent+0x60>
 80156dc:	0000      	movs	r0, r0
	...

080156e0 <_printf_float>:
 80156e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e4:	b08b      	sub	sp, #44	; 0x2c
 80156e6:	460c      	mov	r4, r1
 80156e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80156ec:	4616      	mov	r6, r2
 80156ee:	461f      	mov	r7, r3
 80156f0:	4605      	mov	r5, r0
 80156f2:	f001 fcab 	bl	801704c <_localeconv_r>
 80156f6:	f8d0 b000 	ldr.w	fp, [r0]
 80156fa:	4658      	mov	r0, fp
 80156fc:	f7ea fdf0 	bl	80002e0 <strlen>
 8015700:	2300      	movs	r3, #0
 8015702:	9308      	str	r3, [sp, #32]
 8015704:	f8d8 3000 	ldr.w	r3, [r8]
 8015708:	f894 9018 	ldrb.w	r9, [r4, #24]
 801570c:	6822      	ldr	r2, [r4, #0]
 801570e:	3307      	adds	r3, #7
 8015710:	f023 0307 	bic.w	r3, r3, #7
 8015714:	f103 0108 	add.w	r1, r3, #8
 8015718:	f8c8 1000 	str.w	r1, [r8]
 801571c:	4682      	mov	sl, r0
 801571e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015722:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8015726:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8015988 <_printf_float+0x2a8>
 801572a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801572e:	eeb0 6bc0 	vabs.f64	d6, d0
 8015732:	eeb4 6b47 	vcmp.f64	d6, d7
 8015736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801573a:	dd24      	ble.n	8015786 <_printf_float+0xa6>
 801573c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015744:	d502      	bpl.n	801574c <_printf_float+0x6c>
 8015746:	232d      	movs	r3, #45	; 0x2d
 8015748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801574c:	4b90      	ldr	r3, [pc, #576]	; (8015990 <_printf_float+0x2b0>)
 801574e:	4891      	ldr	r0, [pc, #580]	; (8015994 <_printf_float+0x2b4>)
 8015750:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8015754:	bf94      	ite	ls
 8015756:	4698      	movls	r8, r3
 8015758:	4680      	movhi	r8, r0
 801575a:	2303      	movs	r3, #3
 801575c:	6123      	str	r3, [r4, #16]
 801575e:	f022 0204 	bic.w	r2, r2, #4
 8015762:	2300      	movs	r3, #0
 8015764:	6022      	str	r2, [r4, #0]
 8015766:	9304      	str	r3, [sp, #16]
 8015768:	9700      	str	r7, [sp, #0]
 801576a:	4633      	mov	r3, r6
 801576c:	aa09      	add	r2, sp, #36	; 0x24
 801576e:	4621      	mov	r1, r4
 8015770:	4628      	mov	r0, r5
 8015772:	f000 f9d3 	bl	8015b1c <_printf_common>
 8015776:	3001      	adds	r0, #1
 8015778:	f040 808a 	bne.w	8015890 <_printf_float+0x1b0>
 801577c:	f04f 30ff 	mov.w	r0, #4294967295
 8015780:	b00b      	add	sp, #44	; 0x2c
 8015782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015786:	eeb4 0b40 	vcmp.f64	d0, d0
 801578a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801578e:	d709      	bvc.n	80157a4 <_printf_float+0xc4>
 8015790:	ee10 3a90 	vmov	r3, s1
 8015794:	2b00      	cmp	r3, #0
 8015796:	bfbc      	itt	lt
 8015798:	232d      	movlt	r3, #45	; 0x2d
 801579a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801579e:	487e      	ldr	r0, [pc, #504]	; (8015998 <_printf_float+0x2b8>)
 80157a0:	4b7e      	ldr	r3, [pc, #504]	; (801599c <_printf_float+0x2bc>)
 80157a2:	e7d5      	b.n	8015750 <_printf_float+0x70>
 80157a4:	6863      	ldr	r3, [r4, #4]
 80157a6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80157aa:	9104      	str	r1, [sp, #16]
 80157ac:	1c59      	adds	r1, r3, #1
 80157ae:	d13c      	bne.n	801582a <_printf_float+0x14a>
 80157b0:	2306      	movs	r3, #6
 80157b2:	6063      	str	r3, [r4, #4]
 80157b4:	2300      	movs	r3, #0
 80157b6:	9303      	str	r3, [sp, #12]
 80157b8:	ab08      	add	r3, sp, #32
 80157ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80157be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80157c2:	ab07      	add	r3, sp, #28
 80157c4:	6861      	ldr	r1, [r4, #4]
 80157c6:	9300      	str	r3, [sp, #0]
 80157c8:	6022      	str	r2, [r4, #0]
 80157ca:	f10d 031b 	add.w	r3, sp, #27
 80157ce:	4628      	mov	r0, r5
 80157d0:	f7ff fef4 	bl	80155bc <__cvt>
 80157d4:	9b04      	ldr	r3, [sp, #16]
 80157d6:	9907      	ldr	r1, [sp, #28]
 80157d8:	2b47      	cmp	r3, #71	; 0x47
 80157da:	4680      	mov	r8, r0
 80157dc:	d108      	bne.n	80157f0 <_printf_float+0x110>
 80157de:	1cc8      	adds	r0, r1, #3
 80157e0:	db02      	blt.n	80157e8 <_printf_float+0x108>
 80157e2:	6863      	ldr	r3, [r4, #4]
 80157e4:	4299      	cmp	r1, r3
 80157e6:	dd41      	ble.n	801586c <_printf_float+0x18c>
 80157e8:	f1a9 0902 	sub.w	r9, r9, #2
 80157ec:	fa5f f989 	uxtb.w	r9, r9
 80157f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80157f4:	d820      	bhi.n	8015838 <_printf_float+0x158>
 80157f6:	3901      	subs	r1, #1
 80157f8:	464a      	mov	r2, r9
 80157fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80157fe:	9107      	str	r1, [sp, #28]
 8015800:	f7ff ff2e 	bl	8015660 <__exponent>
 8015804:	9a08      	ldr	r2, [sp, #32]
 8015806:	9004      	str	r0, [sp, #16]
 8015808:	1813      	adds	r3, r2, r0
 801580a:	2a01      	cmp	r2, #1
 801580c:	6123      	str	r3, [r4, #16]
 801580e:	dc02      	bgt.n	8015816 <_printf_float+0x136>
 8015810:	6822      	ldr	r2, [r4, #0]
 8015812:	07d2      	lsls	r2, r2, #31
 8015814:	d501      	bpl.n	801581a <_printf_float+0x13a>
 8015816:	3301      	adds	r3, #1
 8015818:	6123      	str	r3, [r4, #16]
 801581a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d0a2      	beq.n	8015768 <_printf_float+0x88>
 8015822:	232d      	movs	r3, #45	; 0x2d
 8015824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015828:	e79e      	b.n	8015768 <_printf_float+0x88>
 801582a:	9904      	ldr	r1, [sp, #16]
 801582c:	2947      	cmp	r1, #71	; 0x47
 801582e:	d1c1      	bne.n	80157b4 <_printf_float+0xd4>
 8015830:	2b00      	cmp	r3, #0
 8015832:	d1bf      	bne.n	80157b4 <_printf_float+0xd4>
 8015834:	2301      	movs	r3, #1
 8015836:	e7bc      	b.n	80157b2 <_printf_float+0xd2>
 8015838:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801583c:	d118      	bne.n	8015870 <_printf_float+0x190>
 801583e:	2900      	cmp	r1, #0
 8015840:	6863      	ldr	r3, [r4, #4]
 8015842:	dd0b      	ble.n	801585c <_printf_float+0x17c>
 8015844:	6121      	str	r1, [r4, #16]
 8015846:	b913      	cbnz	r3, 801584e <_printf_float+0x16e>
 8015848:	6822      	ldr	r2, [r4, #0]
 801584a:	07d0      	lsls	r0, r2, #31
 801584c:	d502      	bpl.n	8015854 <_printf_float+0x174>
 801584e:	3301      	adds	r3, #1
 8015850:	440b      	add	r3, r1
 8015852:	6123      	str	r3, [r4, #16]
 8015854:	2300      	movs	r3, #0
 8015856:	65a1      	str	r1, [r4, #88]	; 0x58
 8015858:	9304      	str	r3, [sp, #16]
 801585a:	e7de      	b.n	801581a <_printf_float+0x13a>
 801585c:	b913      	cbnz	r3, 8015864 <_printf_float+0x184>
 801585e:	6822      	ldr	r2, [r4, #0]
 8015860:	07d2      	lsls	r2, r2, #31
 8015862:	d501      	bpl.n	8015868 <_printf_float+0x188>
 8015864:	3302      	adds	r3, #2
 8015866:	e7f4      	b.n	8015852 <_printf_float+0x172>
 8015868:	2301      	movs	r3, #1
 801586a:	e7f2      	b.n	8015852 <_printf_float+0x172>
 801586c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8015870:	9b08      	ldr	r3, [sp, #32]
 8015872:	4299      	cmp	r1, r3
 8015874:	db05      	blt.n	8015882 <_printf_float+0x1a2>
 8015876:	6823      	ldr	r3, [r4, #0]
 8015878:	6121      	str	r1, [r4, #16]
 801587a:	07d8      	lsls	r0, r3, #31
 801587c:	d5ea      	bpl.n	8015854 <_printf_float+0x174>
 801587e:	1c4b      	adds	r3, r1, #1
 8015880:	e7e7      	b.n	8015852 <_printf_float+0x172>
 8015882:	2900      	cmp	r1, #0
 8015884:	bfd4      	ite	le
 8015886:	f1c1 0202 	rsble	r2, r1, #2
 801588a:	2201      	movgt	r2, #1
 801588c:	4413      	add	r3, r2
 801588e:	e7e0      	b.n	8015852 <_printf_float+0x172>
 8015890:	6823      	ldr	r3, [r4, #0]
 8015892:	055a      	lsls	r2, r3, #21
 8015894:	d407      	bmi.n	80158a6 <_printf_float+0x1c6>
 8015896:	6923      	ldr	r3, [r4, #16]
 8015898:	4642      	mov	r2, r8
 801589a:	4631      	mov	r1, r6
 801589c:	4628      	mov	r0, r5
 801589e:	47b8      	blx	r7
 80158a0:	3001      	adds	r0, #1
 80158a2:	d12a      	bne.n	80158fa <_printf_float+0x21a>
 80158a4:	e76a      	b.n	801577c <_printf_float+0x9c>
 80158a6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80158aa:	f240 80e2 	bls.w	8015a72 <_printf_float+0x392>
 80158ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80158b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80158b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158ba:	d133      	bne.n	8015924 <_printf_float+0x244>
 80158bc:	4a38      	ldr	r2, [pc, #224]	; (80159a0 <_printf_float+0x2c0>)
 80158be:	2301      	movs	r3, #1
 80158c0:	4631      	mov	r1, r6
 80158c2:	4628      	mov	r0, r5
 80158c4:	47b8      	blx	r7
 80158c6:	3001      	adds	r0, #1
 80158c8:	f43f af58 	beq.w	801577c <_printf_float+0x9c>
 80158cc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80158d0:	429a      	cmp	r2, r3
 80158d2:	db02      	blt.n	80158da <_printf_float+0x1fa>
 80158d4:	6823      	ldr	r3, [r4, #0]
 80158d6:	07d8      	lsls	r0, r3, #31
 80158d8:	d50f      	bpl.n	80158fa <_printf_float+0x21a>
 80158da:	4653      	mov	r3, sl
 80158dc:	465a      	mov	r2, fp
 80158de:	4631      	mov	r1, r6
 80158e0:	4628      	mov	r0, r5
 80158e2:	47b8      	blx	r7
 80158e4:	3001      	adds	r0, #1
 80158e6:	f43f af49 	beq.w	801577c <_printf_float+0x9c>
 80158ea:	f04f 0800 	mov.w	r8, #0
 80158ee:	f104 091a 	add.w	r9, r4, #26
 80158f2:	9b08      	ldr	r3, [sp, #32]
 80158f4:	3b01      	subs	r3, #1
 80158f6:	4543      	cmp	r3, r8
 80158f8:	dc09      	bgt.n	801590e <_printf_float+0x22e>
 80158fa:	6823      	ldr	r3, [r4, #0]
 80158fc:	079b      	lsls	r3, r3, #30
 80158fe:	f100 8108 	bmi.w	8015b12 <_printf_float+0x432>
 8015902:	68e0      	ldr	r0, [r4, #12]
 8015904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015906:	4298      	cmp	r0, r3
 8015908:	bfb8      	it	lt
 801590a:	4618      	movlt	r0, r3
 801590c:	e738      	b.n	8015780 <_printf_float+0xa0>
 801590e:	2301      	movs	r3, #1
 8015910:	464a      	mov	r2, r9
 8015912:	4631      	mov	r1, r6
 8015914:	4628      	mov	r0, r5
 8015916:	47b8      	blx	r7
 8015918:	3001      	adds	r0, #1
 801591a:	f43f af2f 	beq.w	801577c <_printf_float+0x9c>
 801591e:	f108 0801 	add.w	r8, r8, #1
 8015922:	e7e6      	b.n	80158f2 <_printf_float+0x212>
 8015924:	9b07      	ldr	r3, [sp, #28]
 8015926:	2b00      	cmp	r3, #0
 8015928:	dc3c      	bgt.n	80159a4 <_printf_float+0x2c4>
 801592a:	4a1d      	ldr	r2, [pc, #116]	; (80159a0 <_printf_float+0x2c0>)
 801592c:	2301      	movs	r3, #1
 801592e:	4631      	mov	r1, r6
 8015930:	4628      	mov	r0, r5
 8015932:	47b8      	blx	r7
 8015934:	3001      	adds	r0, #1
 8015936:	f43f af21 	beq.w	801577c <_printf_float+0x9c>
 801593a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801593e:	4313      	orrs	r3, r2
 8015940:	d102      	bne.n	8015948 <_printf_float+0x268>
 8015942:	6823      	ldr	r3, [r4, #0]
 8015944:	07d9      	lsls	r1, r3, #31
 8015946:	d5d8      	bpl.n	80158fa <_printf_float+0x21a>
 8015948:	4653      	mov	r3, sl
 801594a:	465a      	mov	r2, fp
 801594c:	4631      	mov	r1, r6
 801594e:	4628      	mov	r0, r5
 8015950:	47b8      	blx	r7
 8015952:	3001      	adds	r0, #1
 8015954:	f43f af12 	beq.w	801577c <_printf_float+0x9c>
 8015958:	f04f 0900 	mov.w	r9, #0
 801595c:	f104 0a1a 	add.w	sl, r4, #26
 8015960:	9b07      	ldr	r3, [sp, #28]
 8015962:	425b      	negs	r3, r3
 8015964:	454b      	cmp	r3, r9
 8015966:	dc01      	bgt.n	801596c <_printf_float+0x28c>
 8015968:	9b08      	ldr	r3, [sp, #32]
 801596a:	e795      	b.n	8015898 <_printf_float+0x1b8>
 801596c:	2301      	movs	r3, #1
 801596e:	4652      	mov	r2, sl
 8015970:	4631      	mov	r1, r6
 8015972:	4628      	mov	r0, r5
 8015974:	47b8      	blx	r7
 8015976:	3001      	adds	r0, #1
 8015978:	f43f af00 	beq.w	801577c <_printf_float+0x9c>
 801597c:	f109 0901 	add.w	r9, r9, #1
 8015980:	e7ee      	b.n	8015960 <_printf_float+0x280>
 8015982:	bf00      	nop
 8015984:	f3af 8000 	nop.w
 8015988:	ffffffff 	.word	0xffffffff
 801598c:	7fefffff 	.word	0x7fefffff
 8015990:	08023724 	.word	0x08023724
 8015994:	08023728 	.word	0x08023728
 8015998:	08023730 	.word	0x08023730
 801599c:	0802372c 	.word	0x0802372c
 80159a0:	08023734 	.word	0x08023734
 80159a4:	9a08      	ldr	r2, [sp, #32]
 80159a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80159a8:	429a      	cmp	r2, r3
 80159aa:	bfa8      	it	ge
 80159ac:	461a      	movge	r2, r3
 80159ae:	2a00      	cmp	r2, #0
 80159b0:	4691      	mov	r9, r2
 80159b2:	dc38      	bgt.n	8015a26 <_printf_float+0x346>
 80159b4:	2300      	movs	r3, #0
 80159b6:	9305      	str	r3, [sp, #20]
 80159b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80159bc:	f104 021a 	add.w	r2, r4, #26
 80159c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80159c2:	9905      	ldr	r1, [sp, #20]
 80159c4:	9304      	str	r3, [sp, #16]
 80159c6:	eba3 0309 	sub.w	r3, r3, r9
 80159ca:	428b      	cmp	r3, r1
 80159cc:	dc33      	bgt.n	8015a36 <_printf_float+0x356>
 80159ce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	db3c      	blt.n	8015a50 <_printf_float+0x370>
 80159d6:	6823      	ldr	r3, [r4, #0]
 80159d8:	07da      	lsls	r2, r3, #31
 80159da:	d439      	bmi.n	8015a50 <_printf_float+0x370>
 80159dc:	9a08      	ldr	r2, [sp, #32]
 80159de:	9b04      	ldr	r3, [sp, #16]
 80159e0:	9907      	ldr	r1, [sp, #28]
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	eba2 0901 	sub.w	r9, r2, r1
 80159e8:	4599      	cmp	r9, r3
 80159ea:	bfa8      	it	ge
 80159ec:	4699      	movge	r9, r3
 80159ee:	f1b9 0f00 	cmp.w	r9, #0
 80159f2:	dc35      	bgt.n	8015a60 <_printf_float+0x380>
 80159f4:	f04f 0800 	mov.w	r8, #0
 80159f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80159fc:	f104 0a1a 	add.w	sl, r4, #26
 8015a00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015a04:	1a9b      	subs	r3, r3, r2
 8015a06:	eba3 0309 	sub.w	r3, r3, r9
 8015a0a:	4543      	cmp	r3, r8
 8015a0c:	f77f af75 	ble.w	80158fa <_printf_float+0x21a>
 8015a10:	2301      	movs	r3, #1
 8015a12:	4652      	mov	r2, sl
 8015a14:	4631      	mov	r1, r6
 8015a16:	4628      	mov	r0, r5
 8015a18:	47b8      	blx	r7
 8015a1a:	3001      	adds	r0, #1
 8015a1c:	f43f aeae 	beq.w	801577c <_printf_float+0x9c>
 8015a20:	f108 0801 	add.w	r8, r8, #1
 8015a24:	e7ec      	b.n	8015a00 <_printf_float+0x320>
 8015a26:	4613      	mov	r3, r2
 8015a28:	4631      	mov	r1, r6
 8015a2a:	4642      	mov	r2, r8
 8015a2c:	4628      	mov	r0, r5
 8015a2e:	47b8      	blx	r7
 8015a30:	3001      	adds	r0, #1
 8015a32:	d1bf      	bne.n	80159b4 <_printf_float+0x2d4>
 8015a34:	e6a2      	b.n	801577c <_printf_float+0x9c>
 8015a36:	2301      	movs	r3, #1
 8015a38:	4631      	mov	r1, r6
 8015a3a:	4628      	mov	r0, r5
 8015a3c:	9204      	str	r2, [sp, #16]
 8015a3e:	47b8      	blx	r7
 8015a40:	3001      	adds	r0, #1
 8015a42:	f43f ae9b 	beq.w	801577c <_printf_float+0x9c>
 8015a46:	9b05      	ldr	r3, [sp, #20]
 8015a48:	9a04      	ldr	r2, [sp, #16]
 8015a4a:	3301      	adds	r3, #1
 8015a4c:	9305      	str	r3, [sp, #20]
 8015a4e:	e7b7      	b.n	80159c0 <_printf_float+0x2e0>
 8015a50:	4653      	mov	r3, sl
 8015a52:	465a      	mov	r2, fp
 8015a54:	4631      	mov	r1, r6
 8015a56:	4628      	mov	r0, r5
 8015a58:	47b8      	blx	r7
 8015a5a:	3001      	adds	r0, #1
 8015a5c:	d1be      	bne.n	80159dc <_printf_float+0x2fc>
 8015a5e:	e68d      	b.n	801577c <_printf_float+0x9c>
 8015a60:	9a04      	ldr	r2, [sp, #16]
 8015a62:	464b      	mov	r3, r9
 8015a64:	4442      	add	r2, r8
 8015a66:	4631      	mov	r1, r6
 8015a68:	4628      	mov	r0, r5
 8015a6a:	47b8      	blx	r7
 8015a6c:	3001      	adds	r0, #1
 8015a6e:	d1c1      	bne.n	80159f4 <_printf_float+0x314>
 8015a70:	e684      	b.n	801577c <_printf_float+0x9c>
 8015a72:	9a08      	ldr	r2, [sp, #32]
 8015a74:	2a01      	cmp	r2, #1
 8015a76:	dc01      	bgt.n	8015a7c <_printf_float+0x39c>
 8015a78:	07db      	lsls	r3, r3, #31
 8015a7a:	d537      	bpl.n	8015aec <_printf_float+0x40c>
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	4642      	mov	r2, r8
 8015a80:	4631      	mov	r1, r6
 8015a82:	4628      	mov	r0, r5
 8015a84:	47b8      	blx	r7
 8015a86:	3001      	adds	r0, #1
 8015a88:	f43f ae78 	beq.w	801577c <_printf_float+0x9c>
 8015a8c:	4653      	mov	r3, sl
 8015a8e:	465a      	mov	r2, fp
 8015a90:	4631      	mov	r1, r6
 8015a92:	4628      	mov	r0, r5
 8015a94:	47b8      	blx	r7
 8015a96:	3001      	adds	r0, #1
 8015a98:	f43f ae70 	beq.w	801577c <_printf_float+0x9c>
 8015a9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8015aa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aa8:	d01b      	beq.n	8015ae2 <_printf_float+0x402>
 8015aaa:	9b08      	ldr	r3, [sp, #32]
 8015aac:	f108 0201 	add.w	r2, r8, #1
 8015ab0:	3b01      	subs	r3, #1
 8015ab2:	4631      	mov	r1, r6
 8015ab4:	4628      	mov	r0, r5
 8015ab6:	47b8      	blx	r7
 8015ab8:	3001      	adds	r0, #1
 8015aba:	d10e      	bne.n	8015ada <_printf_float+0x3fa>
 8015abc:	e65e      	b.n	801577c <_printf_float+0x9c>
 8015abe:	2301      	movs	r3, #1
 8015ac0:	464a      	mov	r2, r9
 8015ac2:	4631      	mov	r1, r6
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	47b8      	blx	r7
 8015ac8:	3001      	adds	r0, #1
 8015aca:	f43f ae57 	beq.w	801577c <_printf_float+0x9c>
 8015ace:	f108 0801 	add.w	r8, r8, #1
 8015ad2:	9b08      	ldr	r3, [sp, #32]
 8015ad4:	3b01      	subs	r3, #1
 8015ad6:	4543      	cmp	r3, r8
 8015ad8:	dcf1      	bgt.n	8015abe <_printf_float+0x3de>
 8015ada:	9b04      	ldr	r3, [sp, #16]
 8015adc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015ae0:	e6db      	b.n	801589a <_printf_float+0x1ba>
 8015ae2:	f04f 0800 	mov.w	r8, #0
 8015ae6:	f104 091a 	add.w	r9, r4, #26
 8015aea:	e7f2      	b.n	8015ad2 <_printf_float+0x3f2>
 8015aec:	2301      	movs	r3, #1
 8015aee:	4642      	mov	r2, r8
 8015af0:	e7df      	b.n	8015ab2 <_printf_float+0x3d2>
 8015af2:	2301      	movs	r3, #1
 8015af4:	464a      	mov	r2, r9
 8015af6:	4631      	mov	r1, r6
 8015af8:	4628      	mov	r0, r5
 8015afa:	47b8      	blx	r7
 8015afc:	3001      	adds	r0, #1
 8015afe:	f43f ae3d 	beq.w	801577c <_printf_float+0x9c>
 8015b02:	f108 0801 	add.w	r8, r8, #1
 8015b06:	68e3      	ldr	r3, [r4, #12]
 8015b08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b0a:	1a5b      	subs	r3, r3, r1
 8015b0c:	4543      	cmp	r3, r8
 8015b0e:	dcf0      	bgt.n	8015af2 <_printf_float+0x412>
 8015b10:	e6f7      	b.n	8015902 <_printf_float+0x222>
 8015b12:	f04f 0800 	mov.w	r8, #0
 8015b16:	f104 0919 	add.w	r9, r4, #25
 8015b1a:	e7f4      	b.n	8015b06 <_printf_float+0x426>

08015b1c <_printf_common>:
 8015b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b20:	4616      	mov	r6, r2
 8015b22:	4699      	mov	r9, r3
 8015b24:	688a      	ldr	r2, [r1, #8]
 8015b26:	690b      	ldr	r3, [r1, #16]
 8015b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	bfb8      	it	lt
 8015b30:	4613      	movlt	r3, r2
 8015b32:	6033      	str	r3, [r6, #0]
 8015b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015b38:	4607      	mov	r7, r0
 8015b3a:	460c      	mov	r4, r1
 8015b3c:	b10a      	cbz	r2, 8015b42 <_printf_common+0x26>
 8015b3e:	3301      	adds	r3, #1
 8015b40:	6033      	str	r3, [r6, #0]
 8015b42:	6823      	ldr	r3, [r4, #0]
 8015b44:	0699      	lsls	r1, r3, #26
 8015b46:	bf42      	ittt	mi
 8015b48:	6833      	ldrmi	r3, [r6, #0]
 8015b4a:	3302      	addmi	r3, #2
 8015b4c:	6033      	strmi	r3, [r6, #0]
 8015b4e:	6825      	ldr	r5, [r4, #0]
 8015b50:	f015 0506 	ands.w	r5, r5, #6
 8015b54:	d106      	bne.n	8015b64 <_printf_common+0x48>
 8015b56:	f104 0a19 	add.w	sl, r4, #25
 8015b5a:	68e3      	ldr	r3, [r4, #12]
 8015b5c:	6832      	ldr	r2, [r6, #0]
 8015b5e:	1a9b      	subs	r3, r3, r2
 8015b60:	42ab      	cmp	r3, r5
 8015b62:	dc26      	bgt.n	8015bb2 <_printf_common+0x96>
 8015b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015b68:	1e13      	subs	r3, r2, #0
 8015b6a:	6822      	ldr	r2, [r4, #0]
 8015b6c:	bf18      	it	ne
 8015b6e:	2301      	movne	r3, #1
 8015b70:	0692      	lsls	r2, r2, #26
 8015b72:	d42b      	bmi.n	8015bcc <_printf_common+0xb0>
 8015b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b78:	4649      	mov	r1, r9
 8015b7a:	4638      	mov	r0, r7
 8015b7c:	47c0      	blx	r8
 8015b7e:	3001      	adds	r0, #1
 8015b80:	d01e      	beq.n	8015bc0 <_printf_common+0xa4>
 8015b82:	6823      	ldr	r3, [r4, #0]
 8015b84:	68e5      	ldr	r5, [r4, #12]
 8015b86:	6832      	ldr	r2, [r6, #0]
 8015b88:	f003 0306 	and.w	r3, r3, #6
 8015b8c:	2b04      	cmp	r3, #4
 8015b8e:	bf08      	it	eq
 8015b90:	1aad      	subeq	r5, r5, r2
 8015b92:	68a3      	ldr	r3, [r4, #8]
 8015b94:	6922      	ldr	r2, [r4, #16]
 8015b96:	bf0c      	ite	eq
 8015b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b9c:	2500      	movne	r5, #0
 8015b9e:	4293      	cmp	r3, r2
 8015ba0:	bfc4      	itt	gt
 8015ba2:	1a9b      	subgt	r3, r3, r2
 8015ba4:	18ed      	addgt	r5, r5, r3
 8015ba6:	2600      	movs	r6, #0
 8015ba8:	341a      	adds	r4, #26
 8015baa:	42b5      	cmp	r5, r6
 8015bac:	d11a      	bne.n	8015be4 <_printf_common+0xc8>
 8015bae:	2000      	movs	r0, #0
 8015bb0:	e008      	b.n	8015bc4 <_printf_common+0xa8>
 8015bb2:	2301      	movs	r3, #1
 8015bb4:	4652      	mov	r2, sl
 8015bb6:	4649      	mov	r1, r9
 8015bb8:	4638      	mov	r0, r7
 8015bba:	47c0      	blx	r8
 8015bbc:	3001      	adds	r0, #1
 8015bbe:	d103      	bne.n	8015bc8 <_printf_common+0xac>
 8015bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8015bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bc8:	3501      	adds	r5, #1
 8015bca:	e7c6      	b.n	8015b5a <_printf_common+0x3e>
 8015bcc:	18e1      	adds	r1, r4, r3
 8015bce:	1c5a      	adds	r2, r3, #1
 8015bd0:	2030      	movs	r0, #48	; 0x30
 8015bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015bd6:	4422      	add	r2, r4
 8015bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015be0:	3302      	adds	r3, #2
 8015be2:	e7c7      	b.n	8015b74 <_printf_common+0x58>
 8015be4:	2301      	movs	r3, #1
 8015be6:	4622      	mov	r2, r4
 8015be8:	4649      	mov	r1, r9
 8015bea:	4638      	mov	r0, r7
 8015bec:	47c0      	blx	r8
 8015bee:	3001      	adds	r0, #1
 8015bf0:	d0e6      	beq.n	8015bc0 <_printf_common+0xa4>
 8015bf2:	3601      	adds	r6, #1
 8015bf4:	e7d9      	b.n	8015baa <_printf_common+0x8e>
	...

08015bf8 <_printf_i>:
 8015bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015bfc:	460c      	mov	r4, r1
 8015bfe:	4691      	mov	r9, r2
 8015c00:	7e27      	ldrb	r7, [r4, #24]
 8015c02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c04:	2f78      	cmp	r7, #120	; 0x78
 8015c06:	4680      	mov	r8, r0
 8015c08:	469a      	mov	sl, r3
 8015c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c0e:	d807      	bhi.n	8015c20 <_printf_i+0x28>
 8015c10:	2f62      	cmp	r7, #98	; 0x62
 8015c12:	d80a      	bhi.n	8015c2a <_printf_i+0x32>
 8015c14:	2f00      	cmp	r7, #0
 8015c16:	f000 80d8 	beq.w	8015dca <_printf_i+0x1d2>
 8015c1a:	2f58      	cmp	r7, #88	; 0x58
 8015c1c:	f000 80a3 	beq.w	8015d66 <_printf_i+0x16e>
 8015c20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015c28:	e03a      	b.n	8015ca0 <_printf_i+0xa8>
 8015c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015c2e:	2b15      	cmp	r3, #21
 8015c30:	d8f6      	bhi.n	8015c20 <_printf_i+0x28>
 8015c32:	a001      	add	r0, pc, #4	; (adr r0, 8015c38 <_printf_i+0x40>)
 8015c34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015c38:	08015c91 	.word	0x08015c91
 8015c3c:	08015ca5 	.word	0x08015ca5
 8015c40:	08015c21 	.word	0x08015c21
 8015c44:	08015c21 	.word	0x08015c21
 8015c48:	08015c21 	.word	0x08015c21
 8015c4c:	08015c21 	.word	0x08015c21
 8015c50:	08015ca5 	.word	0x08015ca5
 8015c54:	08015c21 	.word	0x08015c21
 8015c58:	08015c21 	.word	0x08015c21
 8015c5c:	08015c21 	.word	0x08015c21
 8015c60:	08015c21 	.word	0x08015c21
 8015c64:	08015db1 	.word	0x08015db1
 8015c68:	08015cd5 	.word	0x08015cd5
 8015c6c:	08015d93 	.word	0x08015d93
 8015c70:	08015c21 	.word	0x08015c21
 8015c74:	08015c21 	.word	0x08015c21
 8015c78:	08015dd3 	.word	0x08015dd3
 8015c7c:	08015c21 	.word	0x08015c21
 8015c80:	08015cd5 	.word	0x08015cd5
 8015c84:	08015c21 	.word	0x08015c21
 8015c88:	08015c21 	.word	0x08015c21
 8015c8c:	08015d9b 	.word	0x08015d9b
 8015c90:	680b      	ldr	r3, [r1, #0]
 8015c92:	1d1a      	adds	r2, r3, #4
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	600a      	str	r2, [r1, #0]
 8015c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	e0a3      	b.n	8015dec <_printf_i+0x1f4>
 8015ca4:	6825      	ldr	r5, [r4, #0]
 8015ca6:	6808      	ldr	r0, [r1, #0]
 8015ca8:	062e      	lsls	r6, r5, #24
 8015caa:	f100 0304 	add.w	r3, r0, #4
 8015cae:	d50a      	bpl.n	8015cc6 <_printf_i+0xce>
 8015cb0:	6805      	ldr	r5, [r0, #0]
 8015cb2:	600b      	str	r3, [r1, #0]
 8015cb4:	2d00      	cmp	r5, #0
 8015cb6:	da03      	bge.n	8015cc0 <_printf_i+0xc8>
 8015cb8:	232d      	movs	r3, #45	; 0x2d
 8015cba:	426d      	negs	r5, r5
 8015cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015cc0:	485e      	ldr	r0, [pc, #376]	; (8015e3c <_printf_i+0x244>)
 8015cc2:	230a      	movs	r3, #10
 8015cc4:	e019      	b.n	8015cfa <_printf_i+0x102>
 8015cc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015cca:	6805      	ldr	r5, [r0, #0]
 8015ccc:	600b      	str	r3, [r1, #0]
 8015cce:	bf18      	it	ne
 8015cd0:	b22d      	sxthne	r5, r5
 8015cd2:	e7ef      	b.n	8015cb4 <_printf_i+0xbc>
 8015cd4:	680b      	ldr	r3, [r1, #0]
 8015cd6:	6825      	ldr	r5, [r4, #0]
 8015cd8:	1d18      	adds	r0, r3, #4
 8015cda:	6008      	str	r0, [r1, #0]
 8015cdc:	0628      	lsls	r0, r5, #24
 8015cde:	d501      	bpl.n	8015ce4 <_printf_i+0xec>
 8015ce0:	681d      	ldr	r5, [r3, #0]
 8015ce2:	e002      	b.n	8015cea <_printf_i+0xf2>
 8015ce4:	0669      	lsls	r1, r5, #25
 8015ce6:	d5fb      	bpl.n	8015ce0 <_printf_i+0xe8>
 8015ce8:	881d      	ldrh	r5, [r3, #0]
 8015cea:	4854      	ldr	r0, [pc, #336]	; (8015e3c <_printf_i+0x244>)
 8015cec:	2f6f      	cmp	r7, #111	; 0x6f
 8015cee:	bf0c      	ite	eq
 8015cf0:	2308      	moveq	r3, #8
 8015cf2:	230a      	movne	r3, #10
 8015cf4:	2100      	movs	r1, #0
 8015cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015cfa:	6866      	ldr	r6, [r4, #4]
 8015cfc:	60a6      	str	r6, [r4, #8]
 8015cfe:	2e00      	cmp	r6, #0
 8015d00:	bfa2      	ittt	ge
 8015d02:	6821      	ldrge	r1, [r4, #0]
 8015d04:	f021 0104 	bicge.w	r1, r1, #4
 8015d08:	6021      	strge	r1, [r4, #0]
 8015d0a:	b90d      	cbnz	r5, 8015d10 <_printf_i+0x118>
 8015d0c:	2e00      	cmp	r6, #0
 8015d0e:	d04d      	beq.n	8015dac <_printf_i+0x1b4>
 8015d10:	4616      	mov	r6, r2
 8015d12:	fbb5 f1f3 	udiv	r1, r5, r3
 8015d16:	fb03 5711 	mls	r7, r3, r1, r5
 8015d1a:	5dc7      	ldrb	r7, [r0, r7]
 8015d1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d20:	462f      	mov	r7, r5
 8015d22:	42bb      	cmp	r3, r7
 8015d24:	460d      	mov	r5, r1
 8015d26:	d9f4      	bls.n	8015d12 <_printf_i+0x11a>
 8015d28:	2b08      	cmp	r3, #8
 8015d2a:	d10b      	bne.n	8015d44 <_printf_i+0x14c>
 8015d2c:	6823      	ldr	r3, [r4, #0]
 8015d2e:	07df      	lsls	r7, r3, #31
 8015d30:	d508      	bpl.n	8015d44 <_printf_i+0x14c>
 8015d32:	6923      	ldr	r3, [r4, #16]
 8015d34:	6861      	ldr	r1, [r4, #4]
 8015d36:	4299      	cmp	r1, r3
 8015d38:	bfde      	ittt	le
 8015d3a:	2330      	movle	r3, #48	; 0x30
 8015d3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015d40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015d44:	1b92      	subs	r2, r2, r6
 8015d46:	6122      	str	r2, [r4, #16]
 8015d48:	f8cd a000 	str.w	sl, [sp]
 8015d4c:	464b      	mov	r3, r9
 8015d4e:	aa03      	add	r2, sp, #12
 8015d50:	4621      	mov	r1, r4
 8015d52:	4640      	mov	r0, r8
 8015d54:	f7ff fee2 	bl	8015b1c <_printf_common>
 8015d58:	3001      	adds	r0, #1
 8015d5a:	d14c      	bne.n	8015df6 <_printf_i+0x1fe>
 8015d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d60:	b004      	add	sp, #16
 8015d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d66:	4835      	ldr	r0, [pc, #212]	; (8015e3c <_printf_i+0x244>)
 8015d68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015d6c:	6823      	ldr	r3, [r4, #0]
 8015d6e:	680e      	ldr	r6, [r1, #0]
 8015d70:	061f      	lsls	r7, r3, #24
 8015d72:	f856 5b04 	ldr.w	r5, [r6], #4
 8015d76:	600e      	str	r6, [r1, #0]
 8015d78:	d514      	bpl.n	8015da4 <_printf_i+0x1ac>
 8015d7a:	07d9      	lsls	r1, r3, #31
 8015d7c:	bf44      	itt	mi
 8015d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8015d82:	6023      	strmi	r3, [r4, #0]
 8015d84:	b91d      	cbnz	r5, 8015d8e <_printf_i+0x196>
 8015d86:	6823      	ldr	r3, [r4, #0]
 8015d88:	f023 0320 	bic.w	r3, r3, #32
 8015d8c:	6023      	str	r3, [r4, #0]
 8015d8e:	2310      	movs	r3, #16
 8015d90:	e7b0      	b.n	8015cf4 <_printf_i+0xfc>
 8015d92:	6823      	ldr	r3, [r4, #0]
 8015d94:	f043 0320 	orr.w	r3, r3, #32
 8015d98:	6023      	str	r3, [r4, #0]
 8015d9a:	2378      	movs	r3, #120	; 0x78
 8015d9c:	4828      	ldr	r0, [pc, #160]	; (8015e40 <_printf_i+0x248>)
 8015d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015da2:	e7e3      	b.n	8015d6c <_printf_i+0x174>
 8015da4:	065e      	lsls	r6, r3, #25
 8015da6:	bf48      	it	mi
 8015da8:	b2ad      	uxthmi	r5, r5
 8015daa:	e7e6      	b.n	8015d7a <_printf_i+0x182>
 8015dac:	4616      	mov	r6, r2
 8015dae:	e7bb      	b.n	8015d28 <_printf_i+0x130>
 8015db0:	680b      	ldr	r3, [r1, #0]
 8015db2:	6826      	ldr	r6, [r4, #0]
 8015db4:	6960      	ldr	r0, [r4, #20]
 8015db6:	1d1d      	adds	r5, r3, #4
 8015db8:	600d      	str	r5, [r1, #0]
 8015dba:	0635      	lsls	r5, r6, #24
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	d501      	bpl.n	8015dc4 <_printf_i+0x1cc>
 8015dc0:	6018      	str	r0, [r3, #0]
 8015dc2:	e002      	b.n	8015dca <_printf_i+0x1d2>
 8015dc4:	0671      	lsls	r1, r6, #25
 8015dc6:	d5fb      	bpl.n	8015dc0 <_printf_i+0x1c8>
 8015dc8:	8018      	strh	r0, [r3, #0]
 8015dca:	2300      	movs	r3, #0
 8015dcc:	6123      	str	r3, [r4, #16]
 8015dce:	4616      	mov	r6, r2
 8015dd0:	e7ba      	b.n	8015d48 <_printf_i+0x150>
 8015dd2:	680b      	ldr	r3, [r1, #0]
 8015dd4:	1d1a      	adds	r2, r3, #4
 8015dd6:	600a      	str	r2, [r1, #0]
 8015dd8:	681e      	ldr	r6, [r3, #0]
 8015dda:	6862      	ldr	r2, [r4, #4]
 8015ddc:	2100      	movs	r1, #0
 8015dde:	4630      	mov	r0, r6
 8015de0:	f7ea fa86 	bl	80002f0 <memchr>
 8015de4:	b108      	cbz	r0, 8015dea <_printf_i+0x1f2>
 8015de6:	1b80      	subs	r0, r0, r6
 8015de8:	6060      	str	r0, [r4, #4]
 8015dea:	6863      	ldr	r3, [r4, #4]
 8015dec:	6123      	str	r3, [r4, #16]
 8015dee:	2300      	movs	r3, #0
 8015df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015df4:	e7a8      	b.n	8015d48 <_printf_i+0x150>
 8015df6:	6923      	ldr	r3, [r4, #16]
 8015df8:	4632      	mov	r2, r6
 8015dfa:	4649      	mov	r1, r9
 8015dfc:	4640      	mov	r0, r8
 8015dfe:	47d0      	blx	sl
 8015e00:	3001      	adds	r0, #1
 8015e02:	d0ab      	beq.n	8015d5c <_printf_i+0x164>
 8015e04:	6823      	ldr	r3, [r4, #0]
 8015e06:	079b      	lsls	r3, r3, #30
 8015e08:	d413      	bmi.n	8015e32 <_printf_i+0x23a>
 8015e0a:	68e0      	ldr	r0, [r4, #12]
 8015e0c:	9b03      	ldr	r3, [sp, #12]
 8015e0e:	4298      	cmp	r0, r3
 8015e10:	bfb8      	it	lt
 8015e12:	4618      	movlt	r0, r3
 8015e14:	e7a4      	b.n	8015d60 <_printf_i+0x168>
 8015e16:	2301      	movs	r3, #1
 8015e18:	4632      	mov	r2, r6
 8015e1a:	4649      	mov	r1, r9
 8015e1c:	4640      	mov	r0, r8
 8015e1e:	47d0      	blx	sl
 8015e20:	3001      	adds	r0, #1
 8015e22:	d09b      	beq.n	8015d5c <_printf_i+0x164>
 8015e24:	3501      	adds	r5, #1
 8015e26:	68e3      	ldr	r3, [r4, #12]
 8015e28:	9903      	ldr	r1, [sp, #12]
 8015e2a:	1a5b      	subs	r3, r3, r1
 8015e2c:	42ab      	cmp	r3, r5
 8015e2e:	dcf2      	bgt.n	8015e16 <_printf_i+0x21e>
 8015e30:	e7eb      	b.n	8015e0a <_printf_i+0x212>
 8015e32:	2500      	movs	r5, #0
 8015e34:	f104 0619 	add.w	r6, r4, #25
 8015e38:	e7f5      	b.n	8015e26 <_printf_i+0x22e>
 8015e3a:	bf00      	nop
 8015e3c:	08023736 	.word	0x08023736
 8015e40:	08023747 	.word	0x08023747

08015e44 <iprintf>:
 8015e44:	b40f      	push	{r0, r1, r2, r3}
 8015e46:	4b0a      	ldr	r3, [pc, #40]	; (8015e70 <iprintf+0x2c>)
 8015e48:	b513      	push	{r0, r1, r4, lr}
 8015e4a:	681c      	ldr	r4, [r3, #0]
 8015e4c:	b124      	cbz	r4, 8015e58 <iprintf+0x14>
 8015e4e:	69a3      	ldr	r3, [r4, #24]
 8015e50:	b913      	cbnz	r3, 8015e58 <iprintf+0x14>
 8015e52:	4620      	mov	r0, r4
 8015e54:	f7ff fa7c 	bl	8015350 <__sinit>
 8015e58:	ab05      	add	r3, sp, #20
 8015e5a:	9a04      	ldr	r2, [sp, #16]
 8015e5c:	68a1      	ldr	r1, [r4, #8]
 8015e5e:	9301      	str	r3, [sp, #4]
 8015e60:	4620      	mov	r0, r4
 8015e62:	f001 fe81 	bl	8017b68 <_vfiprintf_r>
 8015e66:	b002      	add	sp, #8
 8015e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e6c:	b004      	add	sp, #16
 8015e6e:	4770      	bx	lr
 8015e70:	2400025c 	.word	0x2400025c

08015e74 <cleanup_glue>:
 8015e74:	b538      	push	{r3, r4, r5, lr}
 8015e76:	460c      	mov	r4, r1
 8015e78:	6809      	ldr	r1, [r1, #0]
 8015e7a:	4605      	mov	r5, r0
 8015e7c:	b109      	cbz	r1, 8015e82 <cleanup_glue+0xe>
 8015e7e:	f7ff fff9 	bl	8015e74 <cleanup_glue>
 8015e82:	4621      	mov	r1, r4
 8015e84:	4628      	mov	r0, r5
 8015e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e8a:	f001 bc97 	b.w	80177bc <_free_r>
	...

08015e90 <_reclaim_reent>:
 8015e90:	4b2c      	ldr	r3, [pc, #176]	; (8015f44 <_reclaim_reent+0xb4>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	4283      	cmp	r3, r0
 8015e96:	b570      	push	{r4, r5, r6, lr}
 8015e98:	4604      	mov	r4, r0
 8015e9a:	d051      	beq.n	8015f40 <_reclaim_reent+0xb0>
 8015e9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015e9e:	b143      	cbz	r3, 8015eb2 <_reclaim_reent+0x22>
 8015ea0:	68db      	ldr	r3, [r3, #12]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d14a      	bne.n	8015f3c <_reclaim_reent+0xac>
 8015ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ea8:	6819      	ldr	r1, [r3, #0]
 8015eaa:	b111      	cbz	r1, 8015eb2 <_reclaim_reent+0x22>
 8015eac:	4620      	mov	r0, r4
 8015eae:	f001 fc85 	bl	80177bc <_free_r>
 8015eb2:	6961      	ldr	r1, [r4, #20]
 8015eb4:	b111      	cbz	r1, 8015ebc <_reclaim_reent+0x2c>
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	f001 fc80 	bl	80177bc <_free_r>
 8015ebc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015ebe:	b111      	cbz	r1, 8015ec6 <_reclaim_reent+0x36>
 8015ec0:	4620      	mov	r0, r4
 8015ec2:	f001 fc7b 	bl	80177bc <_free_r>
 8015ec6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015ec8:	b111      	cbz	r1, 8015ed0 <_reclaim_reent+0x40>
 8015eca:	4620      	mov	r0, r4
 8015ecc:	f001 fc76 	bl	80177bc <_free_r>
 8015ed0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015ed2:	b111      	cbz	r1, 8015eda <_reclaim_reent+0x4a>
 8015ed4:	4620      	mov	r0, r4
 8015ed6:	f001 fc71 	bl	80177bc <_free_r>
 8015eda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015edc:	b111      	cbz	r1, 8015ee4 <_reclaim_reent+0x54>
 8015ede:	4620      	mov	r0, r4
 8015ee0:	f001 fc6c 	bl	80177bc <_free_r>
 8015ee4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015ee6:	b111      	cbz	r1, 8015eee <_reclaim_reent+0x5e>
 8015ee8:	4620      	mov	r0, r4
 8015eea:	f001 fc67 	bl	80177bc <_free_r>
 8015eee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015ef0:	b111      	cbz	r1, 8015ef8 <_reclaim_reent+0x68>
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	f001 fc62 	bl	80177bc <_free_r>
 8015ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015efa:	b111      	cbz	r1, 8015f02 <_reclaim_reent+0x72>
 8015efc:	4620      	mov	r0, r4
 8015efe:	f001 fc5d 	bl	80177bc <_free_r>
 8015f02:	69a3      	ldr	r3, [r4, #24]
 8015f04:	b1e3      	cbz	r3, 8015f40 <_reclaim_reent+0xb0>
 8015f06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015f08:	4620      	mov	r0, r4
 8015f0a:	4798      	blx	r3
 8015f0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015f0e:	b1b9      	cbz	r1, 8015f40 <_reclaim_reent+0xb0>
 8015f10:	4620      	mov	r0, r4
 8015f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f16:	f7ff bfad 	b.w	8015e74 <cleanup_glue>
 8015f1a:	5949      	ldr	r1, [r1, r5]
 8015f1c:	b941      	cbnz	r1, 8015f30 <_reclaim_reent+0xa0>
 8015f1e:	3504      	adds	r5, #4
 8015f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f22:	2d80      	cmp	r5, #128	; 0x80
 8015f24:	68d9      	ldr	r1, [r3, #12]
 8015f26:	d1f8      	bne.n	8015f1a <_reclaim_reent+0x8a>
 8015f28:	4620      	mov	r0, r4
 8015f2a:	f001 fc47 	bl	80177bc <_free_r>
 8015f2e:	e7ba      	b.n	8015ea6 <_reclaim_reent+0x16>
 8015f30:	680e      	ldr	r6, [r1, #0]
 8015f32:	4620      	mov	r0, r4
 8015f34:	f001 fc42 	bl	80177bc <_free_r>
 8015f38:	4631      	mov	r1, r6
 8015f3a:	e7ef      	b.n	8015f1c <_reclaim_reent+0x8c>
 8015f3c:	2500      	movs	r5, #0
 8015f3e:	e7ef      	b.n	8015f20 <_reclaim_reent+0x90>
 8015f40:	bd70      	pop	{r4, r5, r6, pc}
 8015f42:	bf00      	nop
 8015f44:	2400025c 	.word	0x2400025c

08015f48 <_sbrk_r>:
 8015f48:	b538      	push	{r3, r4, r5, lr}
 8015f4a:	4d06      	ldr	r5, [pc, #24]	; (8015f64 <_sbrk_r+0x1c>)
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	4604      	mov	r4, r0
 8015f50:	4608      	mov	r0, r1
 8015f52:	602b      	str	r3, [r5, #0]
 8015f54:	f7ec fb60 	bl	8002618 <_sbrk>
 8015f58:	1c43      	adds	r3, r0, #1
 8015f5a:	d102      	bne.n	8015f62 <_sbrk_r+0x1a>
 8015f5c:	682b      	ldr	r3, [r5, #0]
 8015f5e:	b103      	cbz	r3, 8015f62 <_sbrk_r+0x1a>
 8015f60:	6023      	str	r3, [r4, #0]
 8015f62:	bd38      	pop	{r3, r4, r5, pc}
 8015f64:	24006acc 	.word	0x24006acc

08015f68 <siprintf>:
 8015f68:	b40e      	push	{r1, r2, r3}
 8015f6a:	b500      	push	{lr}
 8015f6c:	b09c      	sub	sp, #112	; 0x70
 8015f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8015f70:	9002      	str	r0, [sp, #8]
 8015f72:	9006      	str	r0, [sp, #24]
 8015f74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015f78:	4809      	ldr	r0, [pc, #36]	; (8015fa0 <siprintf+0x38>)
 8015f7a:	9107      	str	r1, [sp, #28]
 8015f7c:	9104      	str	r1, [sp, #16]
 8015f7e:	4909      	ldr	r1, [pc, #36]	; (8015fa4 <siprintf+0x3c>)
 8015f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f84:	9105      	str	r1, [sp, #20]
 8015f86:	6800      	ldr	r0, [r0, #0]
 8015f88:	9301      	str	r3, [sp, #4]
 8015f8a:	a902      	add	r1, sp, #8
 8015f8c:	f001 fcc2 	bl	8017914 <_svfiprintf_r>
 8015f90:	9b02      	ldr	r3, [sp, #8]
 8015f92:	2200      	movs	r2, #0
 8015f94:	701a      	strb	r2, [r3, #0]
 8015f96:	b01c      	add	sp, #112	; 0x70
 8015f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f9c:	b003      	add	sp, #12
 8015f9e:	4770      	bx	lr
 8015fa0:	2400025c 	.word	0x2400025c
 8015fa4:	ffff0208 	.word	0xffff0208

08015fa8 <__sread>:
 8015fa8:	b510      	push	{r4, lr}
 8015faa:	460c      	mov	r4, r1
 8015fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fb0:	f001 ff0a 	bl	8017dc8 <_read_r>
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	bfab      	itete	ge
 8015fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015fba:	89a3      	ldrhlt	r3, [r4, #12]
 8015fbc:	181b      	addge	r3, r3, r0
 8015fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015fc2:	bfac      	ite	ge
 8015fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8015fc6:	81a3      	strhlt	r3, [r4, #12]
 8015fc8:	bd10      	pop	{r4, pc}

08015fca <__swrite>:
 8015fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fce:	461f      	mov	r7, r3
 8015fd0:	898b      	ldrh	r3, [r1, #12]
 8015fd2:	05db      	lsls	r3, r3, #23
 8015fd4:	4605      	mov	r5, r0
 8015fd6:	460c      	mov	r4, r1
 8015fd8:	4616      	mov	r6, r2
 8015fda:	d505      	bpl.n	8015fe8 <__swrite+0x1e>
 8015fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fe0:	2302      	movs	r3, #2
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	f001 f836 	bl	8017054 <_lseek_r>
 8015fe8:	89a3      	ldrh	r3, [r4, #12]
 8015fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015ff2:	81a3      	strh	r3, [r4, #12]
 8015ff4:	4632      	mov	r2, r6
 8015ff6:	463b      	mov	r3, r7
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ffe:	f000 b901 	b.w	8016204 <_write_r>

08016002 <__sseek>:
 8016002:	b510      	push	{r4, lr}
 8016004:	460c      	mov	r4, r1
 8016006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801600a:	f001 f823 	bl	8017054 <_lseek_r>
 801600e:	1c43      	adds	r3, r0, #1
 8016010:	89a3      	ldrh	r3, [r4, #12]
 8016012:	bf15      	itete	ne
 8016014:	6560      	strne	r0, [r4, #84]	; 0x54
 8016016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801601a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801601e:	81a3      	strheq	r3, [r4, #12]
 8016020:	bf18      	it	ne
 8016022:	81a3      	strhne	r3, [r4, #12]
 8016024:	bd10      	pop	{r4, pc}

08016026 <__sclose>:
 8016026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801602a:	f000 b91b 	b.w	8016264 <_close_r>
	...

08016030 <strtok>:
 8016030:	4b16      	ldr	r3, [pc, #88]	; (801608c <strtok+0x5c>)
 8016032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016034:	681e      	ldr	r6, [r3, #0]
 8016036:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8016038:	4605      	mov	r5, r0
 801603a:	b9fc      	cbnz	r4, 801607c <strtok+0x4c>
 801603c:	2050      	movs	r0, #80	; 0x50
 801603e:	9101      	str	r1, [sp, #4]
 8016040:	f001 f81a 	bl	8017078 <malloc>
 8016044:	9901      	ldr	r1, [sp, #4]
 8016046:	65b0      	str	r0, [r6, #88]	; 0x58
 8016048:	4602      	mov	r2, r0
 801604a:	b920      	cbnz	r0, 8016056 <strtok+0x26>
 801604c:	4b10      	ldr	r3, [pc, #64]	; (8016090 <strtok+0x60>)
 801604e:	4811      	ldr	r0, [pc, #68]	; (8016094 <strtok+0x64>)
 8016050:	2157      	movs	r1, #87	; 0x57
 8016052:	f000 f8e9 	bl	8016228 <__assert_func>
 8016056:	e9c0 4400 	strd	r4, r4, [r0]
 801605a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801605e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016062:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016066:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801606a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801606e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8016072:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016076:	6184      	str	r4, [r0, #24]
 8016078:	7704      	strb	r4, [r0, #28]
 801607a:	6244      	str	r4, [r0, #36]	; 0x24
 801607c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801607e:	2301      	movs	r3, #1
 8016080:	4628      	mov	r0, r5
 8016082:	b002      	add	sp, #8
 8016084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016088:	f000 b806 	b.w	8016098 <__strtok_r>
 801608c:	2400025c 	.word	0x2400025c
 8016090:	08023758 	.word	0x08023758
 8016094:	0802376f 	.word	0x0802376f

08016098 <__strtok_r>:
 8016098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801609a:	b908      	cbnz	r0, 80160a0 <__strtok_r+0x8>
 801609c:	6810      	ldr	r0, [r2, #0]
 801609e:	b188      	cbz	r0, 80160c4 <__strtok_r+0x2c>
 80160a0:	4604      	mov	r4, r0
 80160a2:	4620      	mov	r0, r4
 80160a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80160a8:	460f      	mov	r7, r1
 80160aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80160ae:	b91e      	cbnz	r6, 80160b8 <__strtok_r+0x20>
 80160b0:	b965      	cbnz	r5, 80160cc <__strtok_r+0x34>
 80160b2:	6015      	str	r5, [r2, #0]
 80160b4:	4628      	mov	r0, r5
 80160b6:	e005      	b.n	80160c4 <__strtok_r+0x2c>
 80160b8:	42b5      	cmp	r5, r6
 80160ba:	d1f6      	bne.n	80160aa <__strtok_r+0x12>
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d1f0      	bne.n	80160a2 <__strtok_r+0xa>
 80160c0:	6014      	str	r4, [r2, #0]
 80160c2:	7003      	strb	r3, [r0, #0]
 80160c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160c6:	461c      	mov	r4, r3
 80160c8:	e00c      	b.n	80160e4 <__strtok_r+0x4c>
 80160ca:	b915      	cbnz	r5, 80160d2 <__strtok_r+0x3a>
 80160cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80160d0:	460e      	mov	r6, r1
 80160d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80160d6:	42ab      	cmp	r3, r5
 80160d8:	d1f7      	bne.n	80160ca <__strtok_r+0x32>
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d0f3      	beq.n	80160c6 <__strtok_r+0x2e>
 80160de:	2300      	movs	r3, #0
 80160e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80160e4:	6014      	str	r4, [r2, #0]
 80160e6:	e7ed      	b.n	80160c4 <__strtok_r+0x2c>

080160e8 <_strtol_l.isra.0>:
 80160e8:	2b01      	cmp	r3, #1
 80160ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160ee:	d001      	beq.n	80160f4 <_strtol_l.isra.0+0xc>
 80160f0:	2b24      	cmp	r3, #36	; 0x24
 80160f2:	d906      	bls.n	8016102 <_strtol_l.isra.0+0x1a>
 80160f4:	f7ff f8ce 	bl	8015294 <__errno>
 80160f8:	2316      	movs	r3, #22
 80160fa:	6003      	str	r3, [r0, #0]
 80160fc:	2000      	movs	r0, #0
 80160fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016102:	4f3a      	ldr	r7, [pc, #232]	; (80161ec <_strtol_l.isra.0+0x104>)
 8016104:	468e      	mov	lr, r1
 8016106:	4676      	mov	r6, lr
 8016108:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801610c:	5de5      	ldrb	r5, [r4, r7]
 801610e:	f015 0508 	ands.w	r5, r5, #8
 8016112:	d1f8      	bne.n	8016106 <_strtol_l.isra.0+0x1e>
 8016114:	2c2d      	cmp	r4, #45	; 0x2d
 8016116:	d134      	bne.n	8016182 <_strtol_l.isra.0+0x9a>
 8016118:	f89e 4000 	ldrb.w	r4, [lr]
 801611c:	f04f 0801 	mov.w	r8, #1
 8016120:	f106 0e02 	add.w	lr, r6, #2
 8016124:	2b00      	cmp	r3, #0
 8016126:	d05c      	beq.n	80161e2 <_strtol_l.isra.0+0xfa>
 8016128:	2b10      	cmp	r3, #16
 801612a:	d10c      	bne.n	8016146 <_strtol_l.isra.0+0x5e>
 801612c:	2c30      	cmp	r4, #48	; 0x30
 801612e:	d10a      	bne.n	8016146 <_strtol_l.isra.0+0x5e>
 8016130:	f89e 4000 	ldrb.w	r4, [lr]
 8016134:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016138:	2c58      	cmp	r4, #88	; 0x58
 801613a:	d14d      	bne.n	80161d8 <_strtol_l.isra.0+0xf0>
 801613c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8016140:	2310      	movs	r3, #16
 8016142:	f10e 0e02 	add.w	lr, lr, #2
 8016146:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801614a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801614e:	2600      	movs	r6, #0
 8016150:	fbbc f9f3 	udiv	r9, ip, r3
 8016154:	4635      	mov	r5, r6
 8016156:	fb03 ca19 	mls	sl, r3, r9, ip
 801615a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801615e:	2f09      	cmp	r7, #9
 8016160:	d818      	bhi.n	8016194 <_strtol_l.isra.0+0xac>
 8016162:	463c      	mov	r4, r7
 8016164:	42a3      	cmp	r3, r4
 8016166:	dd24      	ble.n	80161b2 <_strtol_l.isra.0+0xca>
 8016168:	2e00      	cmp	r6, #0
 801616a:	db1f      	blt.n	80161ac <_strtol_l.isra.0+0xc4>
 801616c:	45a9      	cmp	r9, r5
 801616e:	d31d      	bcc.n	80161ac <_strtol_l.isra.0+0xc4>
 8016170:	d101      	bne.n	8016176 <_strtol_l.isra.0+0x8e>
 8016172:	45a2      	cmp	sl, r4
 8016174:	db1a      	blt.n	80161ac <_strtol_l.isra.0+0xc4>
 8016176:	fb05 4503 	mla	r5, r5, r3, r4
 801617a:	2601      	movs	r6, #1
 801617c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016180:	e7eb      	b.n	801615a <_strtol_l.isra.0+0x72>
 8016182:	2c2b      	cmp	r4, #43	; 0x2b
 8016184:	bf08      	it	eq
 8016186:	f89e 4000 	ldrbeq.w	r4, [lr]
 801618a:	46a8      	mov	r8, r5
 801618c:	bf08      	it	eq
 801618e:	f106 0e02 	addeq.w	lr, r6, #2
 8016192:	e7c7      	b.n	8016124 <_strtol_l.isra.0+0x3c>
 8016194:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016198:	2f19      	cmp	r7, #25
 801619a:	d801      	bhi.n	80161a0 <_strtol_l.isra.0+0xb8>
 801619c:	3c37      	subs	r4, #55	; 0x37
 801619e:	e7e1      	b.n	8016164 <_strtol_l.isra.0+0x7c>
 80161a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80161a4:	2f19      	cmp	r7, #25
 80161a6:	d804      	bhi.n	80161b2 <_strtol_l.isra.0+0xca>
 80161a8:	3c57      	subs	r4, #87	; 0x57
 80161aa:	e7db      	b.n	8016164 <_strtol_l.isra.0+0x7c>
 80161ac:	f04f 36ff 	mov.w	r6, #4294967295
 80161b0:	e7e4      	b.n	801617c <_strtol_l.isra.0+0x94>
 80161b2:	2e00      	cmp	r6, #0
 80161b4:	da05      	bge.n	80161c2 <_strtol_l.isra.0+0xda>
 80161b6:	2322      	movs	r3, #34	; 0x22
 80161b8:	6003      	str	r3, [r0, #0]
 80161ba:	4665      	mov	r5, ip
 80161bc:	b942      	cbnz	r2, 80161d0 <_strtol_l.isra.0+0xe8>
 80161be:	4628      	mov	r0, r5
 80161c0:	e79d      	b.n	80160fe <_strtol_l.isra.0+0x16>
 80161c2:	f1b8 0f00 	cmp.w	r8, #0
 80161c6:	d000      	beq.n	80161ca <_strtol_l.isra.0+0xe2>
 80161c8:	426d      	negs	r5, r5
 80161ca:	2a00      	cmp	r2, #0
 80161cc:	d0f7      	beq.n	80161be <_strtol_l.isra.0+0xd6>
 80161ce:	b10e      	cbz	r6, 80161d4 <_strtol_l.isra.0+0xec>
 80161d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80161d4:	6011      	str	r1, [r2, #0]
 80161d6:	e7f2      	b.n	80161be <_strtol_l.isra.0+0xd6>
 80161d8:	2430      	movs	r4, #48	; 0x30
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d1b3      	bne.n	8016146 <_strtol_l.isra.0+0x5e>
 80161de:	2308      	movs	r3, #8
 80161e0:	e7b1      	b.n	8016146 <_strtol_l.isra.0+0x5e>
 80161e2:	2c30      	cmp	r4, #48	; 0x30
 80161e4:	d0a4      	beq.n	8016130 <_strtol_l.isra.0+0x48>
 80161e6:	230a      	movs	r3, #10
 80161e8:	e7ad      	b.n	8016146 <_strtol_l.isra.0+0x5e>
 80161ea:	bf00      	nop
 80161ec:	0802380d 	.word	0x0802380d

080161f0 <strtol>:
 80161f0:	4613      	mov	r3, r2
 80161f2:	460a      	mov	r2, r1
 80161f4:	4601      	mov	r1, r0
 80161f6:	4802      	ldr	r0, [pc, #8]	; (8016200 <strtol+0x10>)
 80161f8:	6800      	ldr	r0, [r0, #0]
 80161fa:	f7ff bf75 	b.w	80160e8 <_strtol_l.isra.0>
 80161fe:	bf00      	nop
 8016200:	2400025c 	.word	0x2400025c

08016204 <_write_r>:
 8016204:	b538      	push	{r3, r4, r5, lr}
 8016206:	4d07      	ldr	r5, [pc, #28]	; (8016224 <_write_r+0x20>)
 8016208:	4604      	mov	r4, r0
 801620a:	4608      	mov	r0, r1
 801620c:	4611      	mov	r1, r2
 801620e:	2200      	movs	r2, #0
 8016210:	602a      	str	r2, [r5, #0]
 8016212:	461a      	mov	r2, r3
 8016214:	f7eb fd40 	bl	8001c98 <_write>
 8016218:	1c43      	adds	r3, r0, #1
 801621a:	d102      	bne.n	8016222 <_write_r+0x1e>
 801621c:	682b      	ldr	r3, [r5, #0]
 801621e:	b103      	cbz	r3, 8016222 <_write_r+0x1e>
 8016220:	6023      	str	r3, [r4, #0]
 8016222:	bd38      	pop	{r3, r4, r5, pc}
 8016224:	24006acc 	.word	0x24006acc

08016228 <__assert_func>:
 8016228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801622a:	4614      	mov	r4, r2
 801622c:	461a      	mov	r2, r3
 801622e:	4b09      	ldr	r3, [pc, #36]	; (8016254 <__assert_func+0x2c>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	4605      	mov	r5, r0
 8016234:	68d8      	ldr	r0, [r3, #12]
 8016236:	b14c      	cbz	r4, 801624c <__assert_func+0x24>
 8016238:	4b07      	ldr	r3, [pc, #28]	; (8016258 <__assert_func+0x30>)
 801623a:	9100      	str	r1, [sp, #0]
 801623c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016240:	4906      	ldr	r1, [pc, #24]	; (801625c <__assert_func+0x34>)
 8016242:	462b      	mov	r3, r5
 8016244:	f000 fef0 	bl	8017028 <fiprintf>
 8016248:	f001 fe90 	bl	8017f6c <abort>
 801624c:	4b04      	ldr	r3, [pc, #16]	; (8016260 <__assert_func+0x38>)
 801624e:	461c      	mov	r4, r3
 8016250:	e7f3      	b.n	801623a <__assert_func+0x12>
 8016252:	bf00      	nop
 8016254:	2400025c 	.word	0x2400025c
 8016258:	080237d0 	.word	0x080237d0
 801625c:	080237dd 	.word	0x080237dd
 8016260:	0802380b 	.word	0x0802380b

08016264 <_close_r>:
 8016264:	b538      	push	{r3, r4, r5, lr}
 8016266:	4d06      	ldr	r5, [pc, #24]	; (8016280 <_close_r+0x1c>)
 8016268:	2300      	movs	r3, #0
 801626a:	4604      	mov	r4, r0
 801626c:	4608      	mov	r0, r1
 801626e:	602b      	str	r3, [r5, #0]
 8016270:	f7ec f99d 	bl	80025ae <_close>
 8016274:	1c43      	adds	r3, r0, #1
 8016276:	d102      	bne.n	801627e <_close_r+0x1a>
 8016278:	682b      	ldr	r3, [r5, #0]
 801627a:	b103      	cbz	r3, 801627e <_close_r+0x1a>
 801627c:	6023      	str	r3, [r4, #0]
 801627e:	bd38      	pop	{r3, r4, r5, pc}
 8016280:	24006acc 	.word	0x24006acc

08016284 <quorem>:
 8016284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016288:	6903      	ldr	r3, [r0, #16]
 801628a:	690c      	ldr	r4, [r1, #16]
 801628c:	42a3      	cmp	r3, r4
 801628e:	4607      	mov	r7, r0
 8016290:	f2c0 8081 	blt.w	8016396 <quorem+0x112>
 8016294:	3c01      	subs	r4, #1
 8016296:	f101 0814 	add.w	r8, r1, #20
 801629a:	f100 0514 	add.w	r5, r0, #20
 801629e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80162a2:	9301      	str	r3, [sp, #4]
 80162a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80162a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80162ac:	3301      	adds	r3, #1
 80162ae:	429a      	cmp	r2, r3
 80162b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80162b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80162b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80162bc:	d331      	bcc.n	8016322 <quorem+0x9e>
 80162be:	f04f 0e00 	mov.w	lr, #0
 80162c2:	4640      	mov	r0, r8
 80162c4:	46ac      	mov	ip, r5
 80162c6:	46f2      	mov	sl, lr
 80162c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80162cc:	b293      	uxth	r3, r2
 80162ce:	fb06 e303 	mla	r3, r6, r3, lr
 80162d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80162d6:	b29b      	uxth	r3, r3
 80162d8:	ebaa 0303 	sub.w	r3, sl, r3
 80162dc:	0c12      	lsrs	r2, r2, #16
 80162de:	f8dc a000 	ldr.w	sl, [ip]
 80162e2:	fb06 e202 	mla	r2, r6, r2, lr
 80162e6:	fa13 f38a 	uxtah	r3, r3, sl
 80162ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80162ee:	fa1f fa82 	uxth.w	sl, r2
 80162f2:	f8dc 2000 	ldr.w	r2, [ip]
 80162f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80162fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80162fe:	b29b      	uxth	r3, r3
 8016300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016304:	4581      	cmp	r9, r0
 8016306:	f84c 3b04 	str.w	r3, [ip], #4
 801630a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801630e:	d2db      	bcs.n	80162c8 <quorem+0x44>
 8016310:	f855 300b 	ldr.w	r3, [r5, fp]
 8016314:	b92b      	cbnz	r3, 8016322 <quorem+0x9e>
 8016316:	9b01      	ldr	r3, [sp, #4]
 8016318:	3b04      	subs	r3, #4
 801631a:	429d      	cmp	r5, r3
 801631c:	461a      	mov	r2, r3
 801631e:	d32e      	bcc.n	801637e <quorem+0xfa>
 8016320:	613c      	str	r4, [r7, #16]
 8016322:	4638      	mov	r0, r7
 8016324:	f001 f93a 	bl	801759c <__mcmp>
 8016328:	2800      	cmp	r0, #0
 801632a:	db24      	blt.n	8016376 <quorem+0xf2>
 801632c:	3601      	adds	r6, #1
 801632e:	4628      	mov	r0, r5
 8016330:	f04f 0c00 	mov.w	ip, #0
 8016334:	f858 2b04 	ldr.w	r2, [r8], #4
 8016338:	f8d0 e000 	ldr.w	lr, [r0]
 801633c:	b293      	uxth	r3, r2
 801633e:	ebac 0303 	sub.w	r3, ip, r3
 8016342:	0c12      	lsrs	r2, r2, #16
 8016344:	fa13 f38e 	uxtah	r3, r3, lr
 8016348:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801634c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016350:	b29b      	uxth	r3, r3
 8016352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016356:	45c1      	cmp	r9, r8
 8016358:	f840 3b04 	str.w	r3, [r0], #4
 801635c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016360:	d2e8      	bcs.n	8016334 <quorem+0xb0>
 8016362:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801636a:	b922      	cbnz	r2, 8016376 <quorem+0xf2>
 801636c:	3b04      	subs	r3, #4
 801636e:	429d      	cmp	r5, r3
 8016370:	461a      	mov	r2, r3
 8016372:	d30a      	bcc.n	801638a <quorem+0x106>
 8016374:	613c      	str	r4, [r7, #16]
 8016376:	4630      	mov	r0, r6
 8016378:	b003      	add	sp, #12
 801637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801637e:	6812      	ldr	r2, [r2, #0]
 8016380:	3b04      	subs	r3, #4
 8016382:	2a00      	cmp	r2, #0
 8016384:	d1cc      	bne.n	8016320 <quorem+0x9c>
 8016386:	3c01      	subs	r4, #1
 8016388:	e7c7      	b.n	801631a <quorem+0x96>
 801638a:	6812      	ldr	r2, [r2, #0]
 801638c:	3b04      	subs	r3, #4
 801638e:	2a00      	cmp	r2, #0
 8016390:	d1f0      	bne.n	8016374 <quorem+0xf0>
 8016392:	3c01      	subs	r4, #1
 8016394:	e7eb      	b.n	801636e <quorem+0xea>
 8016396:	2000      	movs	r0, #0
 8016398:	e7ee      	b.n	8016378 <quorem+0xf4>
 801639a:	0000      	movs	r0, r0
 801639c:	0000      	movs	r0, r0
	...

080163a0 <_dtoa_r>:
 80163a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163a4:	ec59 8b10 	vmov	r8, r9, d0
 80163a8:	b095      	sub	sp, #84	; 0x54
 80163aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80163ac:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80163ae:	9107      	str	r1, [sp, #28]
 80163b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80163b4:	4606      	mov	r6, r0
 80163b6:	9209      	str	r2, [sp, #36]	; 0x24
 80163b8:	9310      	str	r3, [sp, #64]	; 0x40
 80163ba:	b975      	cbnz	r5, 80163da <_dtoa_r+0x3a>
 80163bc:	2010      	movs	r0, #16
 80163be:	f000 fe5b 	bl	8017078 <malloc>
 80163c2:	4602      	mov	r2, r0
 80163c4:	6270      	str	r0, [r6, #36]	; 0x24
 80163c6:	b920      	cbnz	r0, 80163d2 <_dtoa_r+0x32>
 80163c8:	4bab      	ldr	r3, [pc, #684]	; (8016678 <_dtoa_r+0x2d8>)
 80163ca:	21ea      	movs	r1, #234	; 0xea
 80163cc:	48ab      	ldr	r0, [pc, #684]	; (801667c <_dtoa_r+0x2dc>)
 80163ce:	f7ff ff2b 	bl	8016228 <__assert_func>
 80163d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80163d6:	6005      	str	r5, [r0, #0]
 80163d8:	60c5      	str	r5, [r0, #12]
 80163da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80163dc:	6819      	ldr	r1, [r3, #0]
 80163de:	b151      	cbz	r1, 80163f6 <_dtoa_r+0x56>
 80163e0:	685a      	ldr	r2, [r3, #4]
 80163e2:	604a      	str	r2, [r1, #4]
 80163e4:	2301      	movs	r3, #1
 80163e6:	4093      	lsls	r3, r2
 80163e8:	608b      	str	r3, [r1, #8]
 80163ea:	4630      	mov	r0, r6
 80163ec:	f000 fe98 	bl	8017120 <_Bfree>
 80163f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80163f2:	2200      	movs	r2, #0
 80163f4:	601a      	str	r2, [r3, #0]
 80163f6:	f1b9 0300 	subs.w	r3, r9, #0
 80163fa:	bfbb      	ittet	lt
 80163fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016400:	9303      	strlt	r3, [sp, #12]
 8016402:	2300      	movge	r3, #0
 8016404:	2201      	movlt	r2, #1
 8016406:	bfac      	ite	ge
 8016408:	6023      	strge	r3, [r4, #0]
 801640a:	6022      	strlt	r2, [r4, #0]
 801640c:	4b9c      	ldr	r3, [pc, #624]	; (8016680 <_dtoa_r+0x2e0>)
 801640e:	9c03      	ldr	r4, [sp, #12]
 8016410:	43a3      	bics	r3, r4
 8016412:	d11a      	bne.n	801644a <_dtoa_r+0xaa>
 8016414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016416:	f242 730f 	movw	r3, #9999	; 0x270f
 801641a:	6013      	str	r3, [r2, #0]
 801641c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8016420:	ea53 0308 	orrs.w	r3, r3, r8
 8016424:	f000 8512 	beq.w	8016e4c <_dtoa_r+0xaac>
 8016428:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801642a:	b953      	cbnz	r3, 8016442 <_dtoa_r+0xa2>
 801642c:	4b95      	ldr	r3, [pc, #596]	; (8016684 <_dtoa_r+0x2e4>)
 801642e:	e01f      	b.n	8016470 <_dtoa_r+0xd0>
 8016430:	4b95      	ldr	r3, [pc, #596]	; (8016688 <_dtoa_r+0x2e8>)
 8016432:	9300      	str	r3, [sp, #0]
 8016434:	3308      	adds	r3, #8
 8016436:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016438:	6013      	str	r3, [r2, #0]
 801643a:	9800      	ldr	r0, [sp, #0]
 801643c:	b015      	add	sp, #84	; 0x54
 801643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016442:	4b90      	ldr	r3, [pc, #576]	; (8016684 <_dtoa_r+0x2e4>)
 8016444:	9300      	str	r3, [sp, #0]
 8016446:	3303      	adds	r3, #3
 8016448:	e7f5      	b.n	8016436 <_dtoa_r+0x96>
 801644a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801644e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016456:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801645a:	d10b      	bne.n	8016474 <_dtoa_r+0xd4>
 801645c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801645e:	2301      	movs	r3, #1
 8016460:	6013      	str	r3, [r2, #0]
 8016462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016464:	2b00      	cmp	r3, #0
 8016466:	f000 84ee 	beq.w	8016e46 <_dtoa_r+0xaa6>
 801646a:	4888      	ldr	r0, [pc, #544]	; (801668c <_dtoa_r+0x2ec>)
 801646c:	6018      	str	r0, [r3, #0]
 801646e:	1e43      	subs	r3, r0, #1
 8016470:	9300      	str	r3, [sp, #0]
 8016472:	e7e2      	b.n	801643a <_dtoa_r+0x9a>
 8016474:	a913      	add	r1, sp, #76	; 0x4c
 8016476:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801647a:	aa12      	add	r2, sp, #72	; 0x48
 801647c:	4630      	mov	r0, r6
 801647e:	f001 f931 	bl	80176e4 <__d2b>
 8016482:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8016486:	4605      	mov	r5, r0
 8016488:	9812      	ldr	r0, [sp, #72]	; 0x48
 801648a:	2900      	cmp	r1, #0
 801648c:	d047      	beq.n	801651e <_dtoa_r+0x17e>
 801648e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016490:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016498:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801649c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80164a0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80164a4:	2400      	movs	r4, #0
 80164a6:	ec43 2b16 	vmov	d6, r2, r3
 80164aa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80164ae:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8016660 <_dtoa_r+0x2c0>
 80164b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80164b6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8016668 <_dtoa_r+0x2c8>
 80164ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80164be:	eeb0 7b46 	vmov.f64	d7, d6
 80164c2:	ee06 1a90 	vmov	s13, r1
 80164c6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80164ca:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8016670 <_dtoa_r+0x2d0>
 80164ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 80164d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80164d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80164da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164de:	ee16 ba90 	vmov	fp, s13
 80164e2:	9411      	str	r4, [sp, #68]	; 0x44
 80164e4:	d508      	bpl.n	80164f8 <_dtoa_r+0x158>
 80164e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80164ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80164ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164f2:	bf18      	it	ne
 80164f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80164f8:	f1bb 0f16 	cmp.w	fp, #22
 80164fc:	d832      	bhi.n	8016564 <_dtoa_r+0x1c4>
 80164fe:	4b64      	ldr	r3, [pc, #400]	; (8016690 <_dtoa_r+0x2f0>)
 8016500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016504:	ed93 7b00 	vldr	d7, [r3]
 8016508:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801650c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016514:	d501      	bpl.n	801651a <_dtoa_r+0x17a>
 8016516:	f10b 3bff 	add.w	fp, fp, #4294967295
 801651a:	2300      	movs	r3, #0
 801651c:	e023      	b.n	8016566 <_dtoa_r+0x1c6>
 801651e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016520:	4401      	add	r1, r0
 8016522:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8016526:	2b20      	cmp	r3, #32
 8016528:	bfc3      	ittte	gt
 801652a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801652e:	fa04 f303 	lslgt.w	r3, r4, r3
 8016532:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8016536:	f1c3 0320 	rsble	r3, r3, #32
 801653a:	bfc6      	itte	gt
 801653c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8016540:	ea43 0308 	orrgt.w	r3, r3, r8
 8016544:	fa08 f303 	lslle.w	r3, r8, r3
 8016548:	ee07 3a90 	vmov	s15, r3
 801654c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016550:	3901      	subs	r1, #1
 8016552:	ed8d 7b00 	vstr	d7, [sp]
 8016556:	9c01      	ldr	r4, [sp, #4]
 8016558:	e9dd 2300 	ldrd	r2, r3, [sp]
 801655c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8016560:	2401      	movs	r4, #1
 8016562:	e7a0      	b.n	80164a6 <_dtoa_r+0x106>
 8016564:	2301      	movs	r3, #1
 8016566:	930f      	str	r3, [sp, #60]	; 0x3c
 8016568:	1a43      	subs	r3, r0, r1
 801656a:	1e5a      	subs	r2, r3, #1
 801656c:	bf45      	ittet	mi
 801656e:	f1c3 0301 	rsbmi	r3, r3, #1
 8016572:	9305      	strmi	r3, [sp, #20]
 8016574:	2300      	movpl	r3, #0
 8016576:	2300      	movmi	r3, #0
 8016578:	9206      	str	r2, [sp, #24]
 801657a:	bf54      	ite	pl
 801657c:	9305      	strpl	r3, [sp, #20]
 801657e:	9306      	strmi	r3, [sp, #24]
 8016580:	f1bb 0f00 	cmp.w	fp, #0
 8016584:	db18      	blt.n	80165b8 <_dtoa_r+0x218>
 8016586:	9b06      	ldr	r3, [sp, #24]
 8016588:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801658c:	445b      	add	r3, fp
 801658e:	9306      	str	r3, [sp, #24]
 8016590:	2300      	movs	r3, #0
 8016592:	9a07      	ldr	r2, [sp, #28]
 8016594:	2a09      	cmp	r2, #9
 8016596:	d849      	bhi.n	801662c <_dtoa_r+0x28c>
 8016598:	2a05      	cmp	r2, #5
 801659a:	bfc4      	itt	gt
 801659c:	3a04      	subgt	r2, #4
 801659e:	9207      	strgt	r2, [sp, #28]
 80165a0:	9a07      	ldr	r2, [sp, #28]
 80165a2:	f1a2 0202 	sub.w	r2, r2, #2
 80165a6:	bfcc      	ite	gt
 80165a8:	2400      	movgt	r4, #0
 80165aa:	2401      	movle	r4, #1
 80165ac:	2a03      	cmp	r2, #3
 80165ae:	d848      	bhi.n	8016642 <_dtoa_r+0x2a2>
 80165b0:	e8df f002 	tbb	[pc, r2]
 80165b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80165b8:	9b05      	ldr	r3, [sp, #20]
 80165ba:	2200      	movs	r2, #0
 80165bc:	eba3 030b 	sub.w	r3, r3, fp
 80165c0:	9305      	str	r3, [sp, #20]
 80165c2:	920e      	str	r2, [sp, #56]	; 0x38
 80165c4:	f1cb 0300 	rsb	r3, fp, #0
 80165c8:	e7e3      	b.n	8016592 <_dtoa_r+0x1f2>
 80165ca:	2200      	movs	r2, #0
 80165cc:	9208      	str	r2, [sp, #32]
 80165ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165d0:	2a00      	cmp	r2, #0
 80165d2:	dc39      	bgt.n	8016648 <_dtoa_r+0x2a8>
 80165d4:	f04f 0a01 	mov.w	sl, #1
 80165d8:	46d1      	mov	r9, sl
 80165da:	4652      	mov	r2, sl
 80165dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80165e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80165e2:	2100      	movs	r1, #0
 80165e4:	6079      	str	r1, [r7, #4]
 80165e6:	2004      	movs	r0, #4
 80165e8:	f100 0c14 	add.w	ip, r0, #20
 80165ec:	4594      	cmp	ip, r2
 80165ee:	6879      	ldr	r1, [r7, #4]
 80165f0:	d92f      	bls.n	8016652 <_dtoa_r+0x2b2>
 80165f2:	4630      	mov	r0, r6
 80165f4:	930c      	str	r3, [sp, #48]	; 0x30
 80165f6:	f000 fd53 	bl	80170a0 <_Balloc>
 80165fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165fc:	9000      	str	r0, [sp, #0]
 80165fe:	4602      	mov	r2, r0
 8016600:	2800      	cmp	r0, #0
 8016602:	d149      	bne.n	8016698 <_dtoa_r+0x2f8>
 8016604:	4b23      	ldr	r3, [pc, #140]	; (8016694 <_dtoa_r+0x2f4>)
 8016606:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801660a:	e6df      	b.n	80163cc <_dtoa_r+0x2c>
 801660c:	2201      	movs	r2, #1
 801660e:	e7dd      	b.n	80165cc <_dtoa_r+0x22c>
 8016610:	2200      	movs	r2, #0
 8016612:	9208      	str	r2, [sp, #32]
 8016614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016616:	eb0b 0a02 	add.w	sl, fp, r2
 801661a:	f10a 0901 	add.w	r9, sl, #1
 801661e:	464a      	mov	r2, r9
 8016620:	2a01      	cmp	r2, #1
 8016622:	bfb8      	it	lt
 8016624:	2201      	movlt	r2, #1
 8016626:	e7db      	b.n	80165e0 <_dtoa_r+0x240>
 8016628:	2201      	movs	r2, #1
 801662a:	e7f2      	b.n	8016612 <_dtoa_r+0x272>
 801662c:	2401      	movs	r4, #1
 801662e:	2200      	movs	r2, #0
 8016630:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8016634:	f04f 3aff 	mov.w	sl, #4294967295
 8016638:	2100      	movs	r1, #0
 801663a:	46d1      	mov	r9, sl
 801663c:	2212      	movs	r2, #18
 801663e:	9109      	str	r1, [sp, #36]	; 0x24
 8016640:	e7ce      	b.n	80165e0 <_dtoa_r+0x240>
 8016642:	2201      	movs	r2, #1
 8016644:	9208      	str	r2, [sp, #32]
 8016646:	e7f5      	b.n	8016634 <_dtoa_r+0x294>
 8016648:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801664c:	46d1      	mov	r9, sl
 801664e:	4652      	mov	r2, sl
 8016650:	e7c6      	b.n	80165e0 <_dtoa_r+0x240>
 8016652:	3101      	adds	r1, #1
 8016654:	6079      	str	r1, [r7, #4]
 8016656:	0040      	lsls	r0, r0, #1
 8016658:	e7c6      	b.n	80165e8 <_dtoa_r+0x248>
 801665a:	bf00      	nop
 801665c:	f3af 8000 	nop.w
 8016660:	636f4361 	.word	0x636f4361
 8016664:	3fd287a7 	.word	0x3fd287a7
 8016668:	8b60c8b3 	.word	0x8b60c8b3
 801666c:	3fc68a28 	.word	0x3fc68a28
 8016670:	509f79fb 	.word	0x509f79fb
 8016674:	3fd34413 	.word	0x3fd34413
 8016678:	08023758 	.word	0x08023758
 801667c:	0802391a 	.word	0x0802391a
 8016680:	7ff00000 	.word	0x7ff00000
 8016684:	08023916 	.word	0x08023916
 8016688:	0802390d 	.word	0x0802390d
 801668c:	08023735 	.word	0x08023735
 8016690:	08023a18 	.word	0x08023a18
 8016694:	08023979 	.word	0x08023979
 8016698:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801669a:	9900      	ldr	r1, [sp, #0]
 801669c:	6011      	str	r1, [r2, #0]
 801669e:	f1b9 0f0e 	cmp.w	r9, #14
 80166a2:	d872      	bhi.n	801678a <_dtoa_r+0x3ea>
 80166a4:	2c00      	cmp	r4, #0
 80166a6:	d070      	beq.n	801678a <_dtoa_r+0x3ea>
 80166a8:	f1bb 0f00 	cmp.w	fp, #0
 80166ac:	f340 80a6 	ble.w	80167fc <_dtoa_r+0x45c>
 80166b0:	49ca      	ldr	r1, [pc, #808]	; (80169dc <_dtoa_r+0x63c>)
 80166b2:	f00b 020f 	and.w	r2, fp, #15
 80166b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80166ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80166be:	ed92 7b00 	vldr	d7, [r2]
 80166c2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80166c6:	f000 808d 	beq.w	80167e4 <_dtoa_r+0x444>
 80166ca:	4ac5      	ldr	r2, [pc, #788]	; (80169e0 <_dtoa_r+0x640>)
 80166cc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80166d0:	ed92 6b08 	vldr	d6, [r2, #32]
 80166d4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80166d8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80166dc:	f001 010f 	and.w	r1, r1, #15
 80166e0:	2203      	movs	r2, #3
 80166e2:	48bf      	ldr	r0, [pc, #764]	; (80169e0 <_dtoa_r+0x640>)
 80166e4:	2900      	cmp	r1, #0
 80166e6:	d17f      	bne.n	80167e8 <_dtoa_r+0x448>
 80166e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80166ec:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80166f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80166f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80166f6:	2900      	cmp	r1, #0
 80166f8:	f000 80b2 	beq.w	8016860 <_dtoa_r+0x4c0>
 80166fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016700:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016704:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801670c:	f140 80a8 	bpl.w	8016860 <_dtoa_r+0x4c0>
 8016710:	f1b9 0f00 	cmp.w	r9, #0
 8016714:	f000 80a4 	beq.w	8016860 <_dtoa_r+0x4c0>
 8016718:	f1ba 0f00 	cmp.w	sl, #0
 801671c:	dd31      	ble.n	8016782 <_dtoa_r+0x3e2>
 801671e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8016722:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016726:	ed8d 7b02 	vstr	d7, [sp, #8]
 801672a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801672e:	3201      	adds	r2, #1
 8016730:	4650      	mov	r0, sl
 8016732:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016736:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801673a:	ee07 2a90 	vmov	s15, r2
 801673e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016742:	eea7 5b06 	vfma.f64	d5, d7, d6
 8016746:	ed8d 5b02 	vstr	d5, [sp, #8]
 801674a:	9c03      	ldr	r4, [sp, #12]
 801674c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016750:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8016754:	2800      	cmp	r0, #0
 8016756:	f040 8086 	bne.w	8016866 <_dtoa_r+0x4c6>
 801675a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801675e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8016762:	ec42 1b17 	vmov	d7, r1, r2
 8016766:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801676e:	f300 8272 	bgt.w	8016c56 <_dtoa_r+0x8b6>
 8016772:	eeb1 7b47 	vneg.f64	d7, d7
 8016776:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801677e:	f100 8267 	bmi.w	8016c50 <_dtoa_r+0x8b0>
 8016782:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8016786:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801678a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801678c:	2a00      	cmp	r2, #0
 801678e:	f2c0 8129 	blt.w	80169e4 <_dtoa_r+0x644>
 8016792:	f1bb 0f0e 	cmp.w	fp, #14
 8016796:	f300 8125 	bgt.w	80169e4 <_dtoa_r+0x644>
 801679a:	4b90      	ldr	r3, [pc, #576]	; (80169dc <_dtoa_r+0x63c>)
 801679c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80167a0:	ed93 6b00 	vldr	d6, [r3]
 80167a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	f280 80c3 	bge.w	8016932 <_dtoa_r+0x592>
 80167ac:	f1b9 0f00 	cmp.w	r9, #0
 80167b0:	f300 80bf 	bgt.w	8016932 <_dtoa_r+0x592>
 80167b4:	f040 824c 	bne.w	8016c50 <_dtoa_r+0x8b0>
 80167b8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80167bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80167c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80167c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80167c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167cc:	464c      	mov	r4, r9
 80167ce:	464f      	mov	r7, r9
 80167d0:	f280 8222 	bge.w	8016c18 <_dtoa_r+0x878>
 80167d4:	f8dd 8000 	ldr.w	r8, [sp]
 80167d8:	2331      	movs	r3, #49	; 0x31
 80167da:	f808 3b01 	strb.w	r3, [r8], #1
 80167de:	f10b 0b01 	add.w	fp, fp, #1
 80167e2:	e21e      	b.n	8016c22 <_dtoa_r+0x882>
 80167e4:	2202      	movs	r2, #2
 80167e6:	e77c      	b.n	80166e2 <_dtoa_r+0x342>
 80167e8:	07cc      	lsls	r4, r1, #31
 80167ea:	d504      	bpl.n	80167f6 <_dtoa_r+0x456>
 80167ec:	ed90 6b00 	vldr	d6, [r0]
 80167f0:	3201      	adds	r2, #1
 80167f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80167f6:	1049      	asrs	r1, r1, #1
 80167f8:	3008      	adds	r0, #8
 80167fa:	e773      	b.n	80166e4 <_dtoa_r+0x344>
 80167fc:	d02e      	beq.n	801685c <_dtoa_r+0x4bc>
 80167fe:	f1cb 0100 	rsb	r1, fp, #0
 8016802:	4a76      	ldr	r2, [pc, #472]	; (80169dc <_dtoa_r+0x63c>)
 8016804:	f001 000f 	and.w	r0, r1, #15
 8016808:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801680c:	ed92 7b00 	vldr	d7, [r2]
 8016810:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8016814:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016818:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801681c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8016820:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8016824:	486e      	ldr	r0, [pc, #440]	; (80169e0 <_dtoa_r+0x640>)
 8016826:	1109      	asrs	r1, r1, #4
 8016828:	2400      	movs	r4, #0
 801682a:	2202      	movs	r2, #2
 801682c:	b939      	cbnz	r1, 801683e <_dtoa_r+0x49e>
 801682e:	2c00      	cmp	r4, #0
 8016830:	f43f af60 	beq.w	80166f4 <_dtoa_r+0x354>
 8016834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801683c:	e75a      	b.n	80166f4 <_dtoa_r+0x354>
 801683e:	07cf      	lsls	r7, r1, #31
 8016840:	d509      	bpl.n	8016856 <_dtoa_r+0x4b6>
 8016842:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8016846:	ed90 7b00 	vldr	d7, [r0]
 801684a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801684e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8016852:	3201      	adds	r2, #1
 8016854:	2401      	movs	r4, #1
 8016856:	1049      	asrs	r1, r1, #1
 8016858:	3008      	adds	r0, #8
 801685a:	e7e7      	b.n	801682c <_dtoa_r+0x48c>
 801685c:	2202      	movs	r2, #2
 801685e:	e749      	b.n	80166f4 <_dtoa_r+0x354>
 8016860:	465f      	mov	r7, fp
 8016862:	4648      	mov	r0, r9
 8016864:	e765      	b.n	8016732 <_dtoa_r+0x392>
 8016866:	ec42 1b17 	vmov	d7, r1, r2
 801686a:	4a5c      	ldr	r2, [pc, #368]	; (80169dc <_dtoa_r+0x63c>)
 801686c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016870:	ed12 4b02 	vldr	d4, [r2, #-8]
 8016874:	9a00      	ldr	r2, [sp, #0]
 8016876:	1814      	adds	r4, r2, r0
 8016878:	9a08      	ldr	r2, [sp, #32]
 801687a:	b352      	cbz	r2, 80168d2 <_dtoa_r+0x532>
 801687c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8016880:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8016884:	f8dd 8000 	ldr.w	r8, [sp]
 8016888:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801688c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8016890:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016894:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016898:	ee14 2a90 	vmov	r2, s9
 801689c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80168a0:	3230      	adds	r2, #48	; 0x30
 80168a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80168a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80168aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ae:	f808 2b01 	strb.w	r2, [r8], #1
 80168b2:	d439      	bmi.n	8016928 <_dtoa_r+0x588>
 80168b4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80168b8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80168bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168c0:	d472      	bmi.n	80169a8 <_dtoa_r+0x608>
 80168c2:	45a0      	cmp	r8, r4
 80168c4:	f43f af5d 	beq.w	8016782 <_dtoa_r+0x3e2>
 80168c8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80168cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80168d0:	e7e0      	b.n	8016894 <_dtoa_r+0x4f4>
 80168d2:	f8dd 8000 	ldr.w	r8, [sp]
 80168d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80168da:	4621      	mov	r1, r4
 80168dc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80168e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80168e4:	ee14 2a90 	vmov	r2, s9
 80168e8:	3230      	adds	r2, #48	; 0x30
 80168ea:	f808 2b01 	strb.w	r2, [r8], #1
 80168ee:	45a0      	cmp	r8, r4
 80168f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80168f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80168f8:	d118      	bne.n	801692c <_dtoa_r+0x58c>
 80168fa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80168fe:	ee37 4b05 	vadd.f64	d4, d7, d5
 8016902:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8016906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801690a:	dc4d      	bgt.n	80169a8 <_dtoa_r+0x608>
 801690c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8016910:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016918:	f57f af33 	bpl.w	8016782 <_dtoa_r+0x3e2>
 801691c:	4688      	mov	r8, r1
 801691e:	3901      	subs	r1, #1
 8016920:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8016924:	2b30      	cmp	r3, #48	; 0x30
 8016926:	d0f9      	beq.n	801691c <_dtoa_r+0x57c>
 8016928:	46bb      	mov	fp, r7
 801692a:	e02a      	b.n	8016982 <_dtoa_r+0x5e2>
 801692c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016930:	e7d6      	b.n	80168e0 <_dtoa_r+0x540>
 8016932:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016936:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801693a:	f8dd 8000 	ldr.w	r8, [sp]
 801693e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8016942:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8016946:	ee15 3a10 	vmov	r3, s10
 801694a:	3330      	adds	r3, #48	; 0x30
 801694c:	f808 3b01 	strb.w	r3, [r8], #1
 8016950:	9b00      	ldr	r3, [sp, #0]
 8016952:	eba8 0303 	sub.w	r3, r8, r3
 8016956:	4599      	cmp	r9, r3
 8016958:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801695c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8016960:	d133      	bne.n	80169ca <_dtoa_r+0x62a>
 8016962:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016966:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801696a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801696e:	dc1a      	bgt.n	80169a6 <_dtoa_r+0x606>
 8016970:	eeb4 7b46 	vcmp.f64	d7, d6
 8016974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016978:	d103      	bne.n	8016982 <_dtoa_r+0x5e2>
 801697a:	ee15 3a10 	vmov	r3, s10
 801697e:	07d9      	lsls	r1, r3, #31
 8016980:	d411      	bmi.n	80169a6 <_dtoa_r+0x606>
 8016982:	4629      	mov	r1, r5
 8016984:	4630      	mov	r0, r6
 8016986:	f000 fbcb 	bl	8017120 <_Bfree>
 801698a:	2300      	movs	r3, #0
 801698c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801698e:	f888 3000 	strb.w	r3, [r8]
 8016992:	f10b 0301 	add.w	r3, fp, #1
 8016996:	6013      	str	r3, [r2, #0]
 8016998:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801699a:	2b00      	cmp	r3, #0
 801699c:	f43f ad4d 	beq.w	801643a <_dtoa_r+0x9a>
 80169a0:	f8c3 8000 	str.w	r8, [r3]
 80169a4:	e549      	b.n	801643a <_dtoa_r+0x9a>
 80169a6:	465f      	mov	r7, fp
 80169a8:	4643      	mov	r3, r8
 80169aa:	4698      	mov	r8, r3
 80169ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80169b0:	2a39      	cmp	r2, #57	; 0x39
 80169b2:	d106      	bne.n	80169c2 <_dtoa_r+0x622>
 80169b4:	9a00      	ldr	r2, [sp, #0]
 80169b6:	429a      	cmp	r2, r3
 80169b8:	d1f7      	bne.n	80169aa <_dtoa_r+0x60a>
 80169ba:	9900      	ldr	r1, [sp, #0]
 80169bc:	2230      	movs	r2, #48	; 0x30
 80169be:	3701      	adds	r7, #1
 80169c0:	700a      	strb	r2, [r1, #0]
 80169c2:	781a      	ldrb	r2, [r3, #0]
 80169c4:	3201      	adds	r2, #1
 80169c6:	701a      	strb	r2, [r3, #0]
 80169c8:	e7ae      	b.n	8016928 <_dtoa_r+0x588>
 80169ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80169ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80169d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169d6:	d1b2      	bne.n	801693e <_dtoa_r+0x59e>
 80169d8:	e7d3      	b.n	8016982 <_dtoa_r+0x5e2>
 80169da:	bf00      	nop
 80169dc:	08023a18 	.word	0x08023a18
 80169e0:	080239f0 	.word	0x080239f0
 80169e4:	9908      	ldr	r1, [sp, #32]
 80169e6:	2900      	cmp	r1, #0
 80169e8:	f000 80d1 	beq.w	8016b8e <_dtoa_r+0x7ee>
 80169ec:	9907      	ldr	r1, [sp, #28]
 80169ee:	2901      	cmp	r1, #1
 80169f0:	f300 80b4 	bgt.w	8016b5c <_dtoa_r+0x7bc>
 80169f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80169f6:	2900      	cmp	r1, #0
 80169f8:	f000 80ac 	beq.w	8016b54 <_dtoa_r+0x7b4>
 80169fc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016a00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016a04:	461c      	mov	r4, r3
 8016a06:	930a      	str	r3, [sp, #40]	; 0x28
 8016a08:	9b05      	ldr	r3, [sp, #20]
 8016a0a:	4413      	add	r3, r2
 8016a0c:	9305      	str	r3, [sp, #20]
 8016a0e:	9b06      	ldr	r3, [sp, #24]
 8016a10:	2101      	movs	r1, #1
 8016a12:	4413      	add	r3, r2
 8016a14:	4630      	mov	r0, r6
 8016a16:	9306      	str	r3, [sp, #24]
 8016a18:	f000 fc3e 	bl	8017298 <__i2b>
 8016a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a1e:	4607      	mov	r7, r0
 8016a20:	f1b8 0f00 	cmp.w	r8, #0
 8016a24:	dd0d      	ble.n	8016a42 <_dtoa_r+0x6a2>
 8016a26:	9a06      	ldr	r2, [sp, #24]
 8016a28:	2a00      	cmp	r2, #0
 8016a2a:	dd0a      	ble.n	8016a42 <_dtoa_r+0x6a2>
 8016a2c:	4542      	cmp	r2, r8
 8016a2e:	9905      	ldr	r1, [sp, #20]
 8016a30:	bfa8      	it	ge
 8016a32:	4642      	movge	r2, r8
 8016a34:	1a89      	subs	r1, r1, r2
 8016a36:	9105      	str	r1, [sp, #20]
 8016a38:	9906      	ldr	r1, [sp, #24]
 8016a3a:	eba8 0802 	sub.w	r8, r8, r2
 8016a3e:	1a8a      	subs	r2, r1, r2
 8016a40:	9206      	str	r2, [sp, #24]
 8016a42:	b303      	cbz	r3, 8016a86 <_dtoa_r+0x6e6>
 8016a44:	9a08      	ldr	r2, [sp, #32]
 8016a46:	2a00      	cmp	r2, #0
 8016a48:	f000 80a6 	beq.w	8016b98 <_dtoa_r+0x7f8>
 8016a4c:	2c00      	cmp	r4, #0
 8016a4e:	dd13      	ble.n	8016a78 <_dtoa_r+0x6d8>
 8016a50:	4639      	mov	r1, r7
 8016a52:	4622      	mov	r2, r4
 8016a54:	4630      	mov	r0, r6
 8016a56:	930c      	str	r3, [sp, #48]	; 0x30
 8016a58:	f000 fcda 	bl	8017410 <__pow5mult>
 8016a5c:	462a      	mov	r2, r5
 8016a5e:	4601      	mov	r1, r0
 8016a60:	4607      	mov	r7, r0
 8016a62:	4630      	mov	r0, r6
 8016a64:	f000 fc2e 	bl	80172c4 <__multiply>
 8016a68:	4629      	mov	r1, r5
 8016a6a:	900a      	str	r0, [sp, #40]	; 0x28
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	f000 fb57 	bl	8017120 <_Bfree>
 8016a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a76:	4615      	mov	r5, r2
 8016a78:	1b1a      	subs	r2, r3, r4
 8016a7a:	d004      	beq.n	8016a86 <_dtoa_r+0x6e6>
 8016a7c:	4629      	mov	r1, r5
 8016a7e:	4630      	mov	r0, r6
 8016a80:	f000 fcc6 	bl	8017410 <__pow5mult>
 8016a84:	4605      	mov	r5, r0
 8016a86:	2101      	movs	r1, #1
 8016a88:	4630      	mov	r0, r6
 8016a8a:	f000 fc05 	bl	8017298 <__i2b>
 8016a8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	4604      	mov	r4, r0
 8016a94:	f340 8082 	ble.w	8016b9c <_dtoa_r+0x7fc>
 8016a98:	461a      	mov	r2, r3
 8016a9a:	4601      	mov	r1, r0
 8016a9c:	4630      	mov	r0, r6
 8016a9e:	f000 fcb7 	bl	8017410 <__pow5mult>
 8016aa2:	9b07      	ldr	r3, [sp, #28]
 8016aa4:	2b01      	cmp	r3, #1
 8016aa6:	4604      	mov	r4, r0
 8016aa8:	dd7b      	ble.n	8016ba2 <_dtoa_r+0x802>
 8016aaa:	2300      	movs	r3, #0
 8016aac:	930a      	str	r3, [sp, #40]	; 0x28
 8016aae:	6922      	ldr	r2, [r4, #16]
 8016ab0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016ab4:	6910      	ldr	r0, [r2, #16]
 8016ab6:	f000 fb9f 	bl	80171f8 <__hi0bits>
 8016aba:	f1c0 0020 	rsb	r0, r0, #32
 8016abe:	9b06      	ldr	r3, [sp, #24]
 8016ac0:	4418      	add	r0, r3
 8016ac2:	f010 001f 	ands.w	r0, r0, #31
 8016ac6:	f000 808d 	beq.w	8016be4 <_dtoa_r+0x844>
 8016aca:	f1c0 0220 	rsb	r2, r0, #32
 8016ace:	2a04      	cmp	r2, #4
 8016ad0:	f340 8086 	ble.w	8016be0 <_dtoa_r+0x840>
 8016ad4:	f1c0 001c 	rsb	r0, r0, #28
 8016ad8:	9b05      	ldr	r3, [sp, #20]
 8016ada:	4403      	add	r3, r0
 8016adc:	9305      	str	r3, [sp, #20]
 8016ade:	9b06      	ldr	r3, [sp, #24]
 8016ae0:	4403      	add	r3, r0
 8016ae2:	4480      	add	r8, r0
 8016ae4:	9306      	str	r3, [sp, #24]
 8016ae6:	9b05      	ldr	r3, [sp, #20]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	dd05      	ble.n	8016af8 <_dtoa_r+0x758>
 8016aec:	4629      	mov	r1, r5
 8016aee:	461a      	mov	r2, r3
 8016af0:	4630      	mov	r0, r6
 8016af2:	f000 fce7 	bl	80174c4 <__lshift>
 8016af6:	4605      	mov	r5, r0
 8016af8:	9b06      	ldr	r3, [sp, #24]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	dd05      	ble.n	8016b0a <_dtoa_r+0x76a>
 8016afe:	4621      	mov	r1, r4
 8016b00:	461a      	mov	r2, r3
 8016b02:	4630      	mov	r0, r6
 8016b04:	f000 fcde 	bl	80174c4 <__lshift>
 8016b08:	4604      	mov	r4, r0
 8016b0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d06b      	beq.n	8016be8 <_dtoa_r+0x848>
 8016b10:	4621      	mov	r1, r4
 8016b12:	4628      	mov	r0, r5
 8016b14:	f000 fd42 	bl	801759c <__mcmp>
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	da65      	bge.n	8016be8 <_dtoa_r+0x848>
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	4629      	mov	r1, r5
 8016b20:	220a      	movs	r2, #10
 8016b22:	4630      	mov	r0, r6
 8016b24:	f000 fb1e 	bl	8017164 <__multadd>
 8016b28:	9b08      	ldr	r3, [sp, #32]
 8016b2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016b2e:	4605      	mov	r5, r0
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	f000 8192 	beq.w	8016e5a <_dtoa_r+0xaba>
 8016b36:	4639      	mov	r1, r7
 8016b38:	2300      	movs	r3, #0
 8016b3a:	220a      	movs	r2, #10
 8016b3c:	4630      	mov	r0, r6
 8016b3e:	f000 fb11 	bl	8017164 <__multadd>
 8016b42:	f1ba 0f00 	cmp.w	sl, #0
 8016b46:	4607      	mov	r7, r0
 8016b48:	f300 808e 	bgt.w	8016c68 <_dtoa_r+0x8c8>
 8016b4c:	9b07      	ldr	r3, [sp, #28]
 8016b4e:	2b02      	cmp	r3, #2
 8016b50:	dc51      	bgt.n	8016bf6 <_dtoa_r+0x856>
 8016b52:	e089      	b.n	8016c68 <_dtoa_r+0x8c8>
 8016b54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016b56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016b5a:	e751      	b.n	8016a00 <_dtoa_r+0x660>
 8016b5c:	f109 34ff 	add.w	r4, r9, #4294967295
 8016b60:	42a3      	cmp	r3, r4
 8016b62:	bfbf      	itttt	lt
 8016b64:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8016b66:	1ae3      	sublt	r3, r4, r3
 8016b68:	18d2      	addlt	r2, r2, r3
 8016b6a:	4613      	movlt	r3, r2
 8016b6c:	bfb7      	itett	lt
 8016b6e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016b70:	1b1c      	subge	r4, r3, r4
 8016b72:	4623      	movlt	r3, r4
 8016b74:	2400      	movlt	r4, #0
 8016b76:	f1b9 0f00 	cmp.w	r9, #0
 8016b7a:	bfb5      	itete	lt
 8016b7c:	9a05      	ldrlt	r2, [sp, #20]
 8016b7e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8016b82:	eba2 0809 	sublt.w	r8, r2, r9
 8016b86:	464a      	movge	r2, r9
 8016b88:	bfb8      	it	lt
 8016b8a:	2200      	movlt	r2, #0
 8016b8c:	e73b      	b.n	8016a06 <_dtoa_r+0x666>
 8016b8e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016b92:	9f08      	ldr	r7, [sp, #32]
 8016b94:	461c      	mov	r4, r3
 8016b96:	e743      	b.n	8016a20 <_dtoa_r+0x680>
 8016b98:	461a      	mov	r2, r3
 8016b9a:	e76f      	b.n	8016a7c <_dtoa_r+0x6dc>
 8016b9c:	9b07      	ldr	r3, [sp, #28]
 8016b9e:	2b01      	cmp	r3, #1
 8016ba0:	dc18      	bgt.n	8016bd4 <_dtoa_r+0x834>
 8016ba2:	9b02      	ldr	r3, [sp, #8]
 8016ba4:	b9b3      	cbnz	r3, 8016bd4 <_dtoa_r+0x834>
 8016ba6:	9b03      	ldr	r3, [sp, #12]
 8016ba8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016bac:	b9a2      	cbnz	r2, 8016bd8 <_dtoa_r+0x838>
 8016bae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016bb2:	0d12      	lsrs	r2, r2, #20
 8016bb4:	0512      	lsls	r2, r2, #20
 8016bb6:	b18a      	cbz	r2, 8016bdc <_dtoa_r+0x83c>
 8016bb8:	9b05      	ldr	r3, [sp, #20]
 8016bba:	3301      	adds	r3, #1
 8016bbc:	9305      	str	r3, [sp, #20]
 8016bbe:	9b06      	ldr	r3, [sp, #24]
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	9306      	str	r3, [sp, #24]
 8016bc4:	2301      	movs	r3, #1
 8016bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8016bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	f47f af6f 	bne.w	8016aae <_dtoa_r+0x70e>
 8016bd0:	2001      	movs	r0, #1
 8016bd2:	e774      	b.n	8016abe <_dtoa_r+0x71e>
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	e7f6      	b.n	8016bc6 <_dtoa_r+0x826>
 8016bd8:	9b02      	ldr	r3, [sp, #8]
 8016bda:	e7f4      	b.n	8016bc6 <_dtoa_r+0x826>
 8016bdc:	920a      	str	r2, [sp, #40]	; 0x28
 8016bde:	e7f3      	b.n	8016bc8 <_dtoa_r+0x828>
 8016be0:	d081      	beq.n	8016ae6 <_dtoa_r+0x746>
 8016be2:	4610      	mov	r0, r2
 8016be4:	301c      	adds	r0, #28
 8016be6:	e777      	b.n	8016ad8 <_dtoa_r+0x738>
 8016be8:	f1b9 0f00 	cmp.w	r9, #0
 8016bec:	dc37      	bgt.n	8016c5e <_dtoa_r+0x8be>
 8016bee:	9b07      	ldr	r3, [sp, #28]
 8016bf0:	2b02      	cmp	r3, #2
 8016bf2:	dd34      	ble.n	8016c5e <_dtoa_r+0x8be>
 8016bf4:	46ca      	mov	sl, r9
 8016bf6:	f1ba 0f00 	cmp.w	sl, #0
 8016bfa:	d10d      	bne.n	8016c18 <_dtoa_r+0x878>
 8016bfc:	4621      	mov	r1, r4
 8016bfe:	4653      	mov	r3, sl
 8016c00:	2205      	movs	r2, #5
 8016c02:	4630      	mov	r0, r6
 8016c04:	f000 faae 	bl	8017164 <__multadd>
 8016c08:	4601      	mov	r1, r0
 8016c0a:	4604      	mov	r4, r0
 8016c0c:	4628      	mov	r0, r5
 8016c0e:	f000 fcc5 	bl	801759c <__mcmp>
 8016c12:	2800      	cmp	r0, #0
 8016c14:	f73f adde 	bgt.w	80167d4 <_dtoa_r+0x434>
 8016c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c1a:	f8dd 8000 	ldr.w	r8, [sp]
 8016c1e:	ea6f 0b03 	mvn.w	fp, r3
 8016c22:	f04f 0900 	mov.w	r9, #0
 8016c26:	4621      	mov	r1, r4
 8016c28:	4630      	mov	r0, r6
 8016c2a:	f000 fa79 	bl	8017120 <_Bfree>
 8016c2e:	2f00      	cmp	r7, #0
 8016c30:	f43f aea7 	beq.w	8016982 <_dtoa_r+0x5e2>
 8016c34:	f1b9 0f00 	cmp.w	r9, #0
 8016c38:	d005      	beq.n	8016c46 <_dtoa_r+0x8a6>
 8016c3a:	45b9      	cmp	r9, r7
 8016c3c:	d003      	beq.n	8016c46 <_dtoa_r+0x8a6>
 8016c3e:	4649      	mov	r1, r9
 8016c40:	4630      	mov	r0, r6
 8016c42:	f000 fa6d 	bl	8017120 <_Bfree>
 8016c46:	4639      	mov	r1, r7
 8016c48:	4630      	mov	r0, r6
 8016c4a:	f000 fa69 	bl	8017120 <_Bfree>
 8016c4e:	e698      	b.n	8016982 <_dtoa_r+0x5e2>
 8016c50:	2400      	movs	r4, #0
 8016c52:	4627      	mov	r7, r4
 8016c54:	e7e0      	b.n	8016c18 <_dtoa_r+0x878>
 8016c56:	46bb      	mov	fp, r7
 8016c58:	4604      	mov	r4, r0
 8016c5a:	4607      	mov	r7, r0
 8016c5c:	e5ba      	b.n	80167d4 <_dtoa_r+0x434>
 8016c5e:	9b08      	ldr	r3, [sp, #32]
 8016c60:	46ca      	mov	sl, r9
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	f000 8100 	beq.w	8016e68 <_dtoa_r+0xac8>
 8016c68:	f1b8 0f00 	cmp.w	r8, #0
 8016c6c:	dd05      	ble.n	8016c7a <_dtoa_r+0x8da>
 8016c6e:	4639      	mov	r1, r7
 8016c70:	4642      	mov	r2, r8
 8016c72:	4630      	mov	r0, r6
 8016c74:	f000 fc26 	bl	80174c4 <__lshift>
 8016c78:	4607      	mov	r7, r0
 8016c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d05d      	beq.n	8016d3c <_dtoa_r+0x99c>
 8016c80:	6879      	ldr	r1, [r7, #4]
 8016c82:	4630      	mov	r0, r6
 8016c84:	f000 fa0c 	bl	80170a0 <_Balloc>
 8016c88:	4680      	mov	r8, r0
 8016c8a:	b928      	cbnz	r0, 8016c98 <_dtoa_r+0x8f8>
 8016c8c:	4b82      	ldr	r3, [pc, #520]	; (8016e98 <_dtoa_r+0xaf8>)
 8016c8e:	4602      	mov	r2, r0
 8016c90:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016c94:	f7ff bb9a 	b.w	80163cc <_dtoa_r+0x2c>
 8016c98:	693a      	ldr	r2, [r7, #16]
 8016c9a:	3202      	adds	r2, #2
 8016c9c:	0092      	lsls	r2, r2, #2
 8016c9e:	f107 010c 	add.w	r1, r7, #12
 8016ca2:	300c      	adds	r0, #12
 8016ca4:	f7fe fc19 	bl	80154da <memcpy>
 8016ca8:	2201      	movs	r2, #1
 8016caa:	4641      	mov	r1, r8
 8016cac:	4630      	mov	r0, r6
 8016cae:	f000 fc09 	bl	80174c4 <__lshift>
 8016cb2:	9b00      	ldr	r3, [sp, #0]
 8016cb4:	3301      	adds	r3, #1
 8016cb6:	9305      	str	r3, [sp, #20]
 8016cb8:	9b00      	ldr	r3, [sp, #0]
 8016cba:	4453      	add	r3, sl
 8016cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8016cbe:	9b02      	ldr	r3, [sp, #8]
 8016cc0:	f003 0301 	and.w	r3, r3, #1
 8016cc4:	46b9      	mov	r9, r7
 8016cc6:	9308      	str	r3, [sp, #32]
 8016cc8:	4607      	mov	r7, r0
 8016cca:	9b05      	ldr	r3, [sp, #20]
 8016ccc:	4621      	mov	r1, r4
 8016cce:	3b01      	subs	r3, #1
 8016cd0:	4628      	mov	r0, r5
 8016cd2:	9302      	str	r3, [sp, #8]
 8016cd4:	f7ff fad6 	bl	8016284 <quorem>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	3330      	adds	r3, #48	; 0x30
 8016cdc:	9006      	str	r0, [sp, #24]
 8016cde:	4649      	mov	r1, r9
 8016ce0:	4628      	mov	r0, r5
 8016ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8016ce4:	f000 fc5a 	bl	801759c <__mcmp>
 8016ce8:	463a      	mov	r2, r7
 8016cea:	4682      	mov	sl, r0
 8016cec:	4621      	mov	r1, r4
 8016cee:	4630      	mov	r0, r6
 8016cf0:	f000 fc70 	bl	80175d4 <__mdiff>
 8016cf4:	68c2      	ldr	r2, [r0, #12]
 8016cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cf8:	4680      	mov	r8, r0
 8016cfa:	bb0a      	cbnz	r2, 8016d40 <_dtoa_r+0x9a0>
 8016cfc:	4601      	mov	r1, r0
 8016cfe:	4628      	mov	r0, r5
 8016d00:	f000 fc4c 	bl	801759c <__mcmp>
 8016d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d06:	4602      	mov	r2, r0
 8016d08:	4641      	mov	r1, r8
 8016d0a:	4630      	mov	r0, r6
 8016d0c:	920e      	str	r2, [sp, #56]	; 0x38
 8016d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8016d10:	f000 fa06 	bl	8017120 <_Bfree>
 8016d14:	9b07      	ldr	r3, [sp, #28]
 8016d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d18:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016d1c:	ea43 0102 	orr.w	r1, r3, r2
 8016d20:	9b08      	ldr	r3, [sp, #32]
 8016d22:	430b      	orrs	r3, r1
 8016d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d26:	d10d      	bne.n	8016d44 <_dtoa_r+0x9a4>
 8016d28:	2b39      	cmp	r3, #57	; 0x39
 8016d2a:	d029      	beq.n	8016d80 <_dtoa_r+0x9e0>
 8016d2c:	f1ba 0f00 	cmp.w	sl, #0
 8016d30:	dd01      	ble.n	8016d36 <_dtoa_r+0x996>
 8016d32:	9b06      	ldr	r3, [sp, #24]
 8016d34:	3331      	adds	r3, #49	; 0x31
 8016d36:	9a02      	ldr	r2, [sp, #8]
 8016d38:	7013      	strb	r3, [r2, #0]
 8016d3a:	e774      	b.n	8016c26 <_dtoa_r+0x886>
 8016d3c:	4638      	mov	r0, r7
 8016d3e:	e7b8      	b.n	8016cb2 <_dtoa_r+0x912>
 8016d40:	2201      	movs	r2, #1
 8016d42:	e7e1      	b.n	8016d08 <_dtoa_r+0x968>
 8016d44:	f1ba 0f00 	cmp.w	sl, #0
 8016d48:	db06      	blt.n	8016d58 <_dtoa_r+0x9b8>
 8016d4a:	9907      	ldr	r1, [sp, #28]
 8016d4c:	ea41 0a0a 	orr.w	sl, r1, sl
 8016d50:	9908      	ldr	r1, [sp, #32]
 8016d52:	ea5a 0101 	orrs.w	r1, sl, r1
 8016d56:	d120      	bne.n	8016d9a <_dtoa_r+0x9fa>
 8016d58:	2a00      	cmp	r2, #0
 8016d5a:	ddec      	ble.n	8016d36 <_dtoa_r+0x996>
 8016d5c:	4629      	mov	r1, r5
 8016d5e:	2201      	movs	r2, #1
 8016d60:	4630      	mov	r0, r6
 8016d62:	9305      	str	r3, [sp, #20]
 8016d64:	f000 fbae 	bl	80174c4 <__lshift>
 8016d68:	4621      	mov	r1, r4
 8016d6a:	4605      	mov	r5, r0
 8016d6c:	f000 fc16 	bl	801759c <__mcmp>
 8016d70:	2800      	cmp	r0, #0
 8016d72:	9b05      	ldr	r3, [sp, #20]
 8016d74:	dc02      	bgt.n	8016d7c <_dtoa_r+0x9dc>
 8016d76:	d1de      	bne.n	8016d36 <_dtoa_r+0x996>
 8016d78:	07da      	lsls	r2, r3, #31
 8016d7a:	d5dc      	bpl.n	8016d36 <_dtoa_r+0x996>
 8016d7c:	2b39      	cmp	r3, #57	; 0x39
 8016d7e:	d1d8      	bne.n	8016d32 <_dtoa_r+0x992>
 8016d80:	9a02      	ldr	r2, [sp, #8]
 8016d82:	2339      	movs	r3, #57	; 0x39
 8016d84:	7013      	strb	r3, [r2, #0]
 8016d86:	4643      	mov	r3, r8
 8016d88:	4698      	mov	r8, r3
 8016d8a:	3b01      	subs	r3, #1
 8016d8c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8016d90:	2a39      	cmp	r2, #57	; 0x39
 8016d92:	d051      	beq.n	8016e38 <_dtoa_r+0xa98>
 8016d94:	3201      	adds	r2, #1
 8016d96:	701a      	strb	r2, [r3, #0]
 8016d98:	e745      	b.n	8016c26 <_dtoa_r+0x886>
 8016d9a:	2a00      	cmp	r2, #0
 8016d9c:	dd03      	ble.n	8016da6 <_dtoa_r+0xa06>
 8016d9e:	2b39      	cmp	r3, #57	; 0x39
 8016da0:	d0ee      	beq.n	8016d80 <_dtoa_r+0x9e0>
 8016da2:	3301      	adds	r3, #1
 8016da4:	e7c7      	b.n	8016d36 <_dtoa_r+0x996>
 8016da6:	9a05      	ldr	r2, [sp, #20]
 8016da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016daa:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016dae:	428a      	cmp	r2, r1
 8016db0:	d02b      	beq.n	8016e0a <_dtoa_r+0xa6a>
 8016db2:	4629      	mov	r1, r5
 8016db4:	2300      	movs	r3, #0
 8016db6:	220a      	movs	r2, #10
 8016db8:	4630      	mov	r0, r6
 8016dba:	f000 f9d3 	bl	8017164 <__multadd>
 8016dbe:	45b9      	cmp	r9, r7
 8016dc0:	4605      	mov	r5, r0
 8016dc2:	f04f 0300 	mov.w	r3, #0
 8016dc6:	f04f 020a 	mov.w	r2, #10
 8016dca:	4649      	mov	r1, r9
 8016dcc:	4630      	mov	r0, r6
 8016dce:	d107      	bne.n	8016de0 <_dtoa_r+0xa40>
 8016dd0:	f000 f9c8 	bl	8017164 <__multadd>
 8016dd4:	4681      	mov	r9, r0
 8016dd6:	4607      	mov	r7, r0
 8016dd8:	9b05      	ldr	r3, [sp, #20]
 8016dda:	3301      	adds	r3, #1
 8016ddc:	9305      	str	r3, [sp, #20]
 8016dde:	e774      	b.n	8016cca <_dtoa_r+0x92a>
 8016de0:	f000 f9c0 	bl	8017164 <__multadd>
 8016de4:	4639      	mov	r1, r7
 8016de6:	4681      	mov	r9, r0
 8016de8:	2300      	movs	r3, #0
 8016dea:	220a      	movs	r2, #10
 8016dec:	4630      	mov	r0, r6
 8016dee:	f000 f9b9 	bl	8017164 <__multadd>
 8016df2:	4607      	mov	r7, r0
 8016df4:	e7f0      	b.n	8016dd8 <_dtoa_r+0xa38>
 8016df6:	f1ba 0f00 	cmp.w	sl, #0
 8016dfa:	9a00      	ldr	r2, [sp, #0]
 8016dfc:	bfcc      	ite	gt
 8016dfe:	46d0      	movgt	r8, sl
 8016e00:	f04f 0801 	movle.w	r8, #1
 8016e04:	4490      	add	r8, r2
 8016e06:	f04f 0900 	mov.w	r9, #0
 8016e0a:	4629      	mov	r1, r5
 8016e0c:	2201      	movs	r2, #1
 8016e0e:	4630      	mov	r0, r6
 8016e10:	9302      	str	r3, [sp, #8]
 8016e12:	f000 fb57 	bl	80174c4 <__lshift>
 8016e16:	4621      	mov	r1, r4
 8016e18:	4605      	mov	r5, r0
 8016e1a:	f000 fbbf 	bl	801759c <__mcmp>
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	dcb1      	bgt.n	8016d86 <_dtoa_r+0x9e6>
 8016e22:	d102      	bne.n	8016e2a <_dtoa_r+0xa8a>
 8016e24:	9b02      	ldr	r3, [sp, #8]
 8016e26:	07db      	lsls	r3, r3, #31
 8016e28:	d4ad      	bmi.n	8016d86 <_dtoa_r+0x9e6>
 8016e2a:	4643      	mov	r3, r8
 8016e2c:	4698      	mov	r8, r3
 8016e2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016e32:	2a30      	cmp	r2, #48	; 0x30
 8016e34:	d0fa      	beq.n	8016e2c <_dtoa_r+0xa8c>
 8016e36:	e6f6      	b.n	8016c26 <_dtoa_r+0x886>
 8016e38:	9a00      	ldr	r2, [sp, #0]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d1a4      	bne.n	8016d88 <_dtoa_r+0x9e8>
 8016e3e:	f10b 0b01 	add.w	fp, fp, #1
 8016e42:	2331      	movs	r3, #49	; 0x31
 8016e44:	e778      	b.n	8016d38 <_dtoa_r+0x998>
 8016e46:	4b15      	ldr	r3, [pc, #84]	; (8016e9c <_dtoa_r+0xafc>)
 8016e48:	f7ff bb12 	b.w	8016470 <_dtoa_r+0xd0>
 8016e4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	f47f aaee 	bne.w	8016430 <_dtoa_r+0x90>
 8016e54:	4b12      	ldr	r3, [pc, #72]	; (8016ea0 <_dtoa_r+0xb00>)
 8016e56:	f7ff bb0b 	b.w	8016470 <_dtoa_r+0xd0>
 8016e5a:	f1ba 0f00 	cmp.w	sl, #0
 8016e5e:	dc03      	bgt.n	8016e68 <_dtoa_r+0xac8>
 8016e60:	9b07      	ldr	r3, [sp, #28]
 8016e62:	2b02      	cmp	r3, #2
 8016e64:	f73f aec7 	bgt.w	8016bf6 <_dtoa_r+0x856>
 8016e68:	f8dd 8000 	ldr.w	r8, [sp]
 8016e6c:	4621      	mov	r1, r4
 8016e6e:	4628      	mov	r0, r5
 8016e70:	f7ff fa08 	bl	8016284 <quorem>
 8016e74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016e78:	f808 3b01 	strb.w	r3, [r8], #1
 8016e7c:	9a00      	ldr	r2, [sp, #0]
 8016e7e:	eba8 0202 	sub.w	r2, r8, r2
 8016e82:	4592      	cmp	sl, r2
 8016e84:	ddb7      	ble.n	8016df6 <_dtoa_r+0xa56>
 8016e86:	4629      	mov	r1, r5
 8016e88:	2300      	movs	r3, #0
 8016e8a:	220a      	movs	r2, #10
 8016e8c:	4630      	mov	r0, r6
 8016e8e:	f000 f969 	bl	8017164 <__multadd>
 8016e92:	4605      	mov	r5, r0
 8016e94:	e7ea      	b.n	8016e6c <_dtoa_r+0xacc>
 8016e96:	bf00      	nop
 8016e98:	08023979 	.word	0x08023979
 8016e9c:	08023734 	.word	0x08023734
 8016ea0:	0802390d 	.word	0x0802390d

08016ea4 <__sflush_r>:
 8016ea4:	898a      	ldrh	r2, [r1, #12]
 8016ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eaa:	4605      	mov	r5, r0
 8016eac:	0710      	lsls	r0, r2, #28
 8016eae:	460c      	mov	r4, r1
 8016eb0:	d458      	bmi.n	8016f64 <__sflush_r+0xc0>
 8016eb2:	684b      	ldr	r3, [r1, #4]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	dc05      	bgt.n	8016ec4 <__sflush_r+0x20>
 8016eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	dc02      	bgt.n	8016ec4 <__sflush_r+0x20>
 8016ebe:	2000      	movs	r0, #0
 8016ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ec6:	2e00      	cmp	r6, #0
 8016ec8:	d0f9      	beq.n	8016ebe <__sflush_r+0x1a>
 8016eca:	2300      	movs	r3, #0
 8016ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016ed0:	682f      	ldr	r7, [r5, #0]
 8016ed2:	602b      	str	r3, [r5, #0]
 8016ed4:	d032      	beq.n	8016f3c <__sflush_r+0x98>
 8016ed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016ed8:	89a3      	ldrh	r3, [r4, #12]
 8016eda:	075a      	lsls	r2, r3, #29
 8016edc:	d505      	bpl.n	8016eea <__sflush_r+0x46>
 8016ede:	6863      	ldr	r3, [r4, #4]
 8016ee0:	1ac0      	subs	r0, r0, r3
 8016ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016ee4:	b10b      	cbz	r3, 8016eea <__sflush_r+0x46>
 8016ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ee8:	1ac0      	subs	r0, r0, r3
 8016eea:	2300      	movs	r3, #0
 8016eec:	4602      	mov	r2, r0
 8016eee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ef0:	6a21      	ldr	r1, [r4, #32]
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	47b0      	blx	r6
 8016ef6:	1c43      	adds	r3, r0, #1
 8016ef8:	89a3      	ldrh	r3, [r4, #12]
 8016efa:	d106      	bne.n	8016f0a <__sflush_r+0x66>
 8016efc:	6829      	ldr	r1, [r5, #0]
 8016efe:	291d      	cmp	r1, #29
 8016f00:	d82c      	bhi.n	8016f5c <__sflush_r+0xb8>
 8016f02:	4a2a      	ldr	r2, [pc, #168]	; (8016fac <__sflush_r+0x108>)
 8016f04:	40ca      	lsrs	r2, r1
 8016f06:	07d6      	lsls	r6, r2, #31
 8016f08:	d528      	bpl.n	8016f5c <__sflush_r+0xb8>
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	6062      	str	r2, [r4, #4]
 8016f0e:	04d9      	lsls	r1, r3, #19
 8016f10:	6922      	ldr	r2, [r4, #16]
 8016f12:	6022      	str	r2, [r4, #0]
 8016f14:	d504      	bpl.n	8016f20 <__sflush_r+0x7c>
 8016f16:	1c42      	adds	r2, r0, #1
 8016f18:	d101      	bne.n	8016f1e <__sflush_r+0x7a>
 8016f1a:	682b      	ldr	r3, [r5, #0]
 8016f1c:	b903      	cbnz	r3, 8016f20 <__sflush_r+0x7c>
 8016f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8016f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f22:	602f      	str	r7, [r5, #0]
 8016f24:	2900      	cmp	r1, #0
 8016f26:	d0ca      	beq.n	8016ebe <__sflush_r+0x1a>
 8016f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f2c:	4299      	cmp	r1, r3
 8016f2e:	d002      	beq.n	8016f36 <__sflush_r+0x92>
 8016f30:	4628      	mov	r0, r5
 8016f32:	f000 fc43 	bl	80177bc <_free_r>
 8016f36:	2000      	movs	r0, #0
 8016f38:	6360      	str	r0, [r4, #52]	; 0x34
 8016f3a:	e7c1      	b.n	8016ec0 <__sflush_r+0x1c>
 8016f3c:	6a21      	ldr	r1, [r4, #32]
 8016f3e:	2301      	movs	r3, #1
 8016f40:	4628      	mov	r0, r5
 8016f42:	47b0      	blx	r6
 8016f44:	1c41      	adds	r1, r0, #1
 8016f46:	d1c7      	bne.n	8016ed8 <__sflush_r+0x34>
 8016f48:	682b      	ldr	r3, [r5, #0]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d0c4      	beq.n	8016ed8 <__sflush_r+0x34>
 8016f4e:	2b1d      	cmp	r3, #29
 8016f50:	d001      	beq.n	8016f56 <__sflush_r+0xb2>
 8016f52:	2b16      	cmp	r3, #22
 8016f54:	d101      	bne.n	8016f5a <__sflush_r+0xb6>
 8016f56:	602f      	str	r7, [r5, #0]
 8016f58:	e7b1      	b.n	8016ebe <__sflush_r+0x1a>
 8016f5a:	89a3      	ldrh	r3, [r4, #12]
 8016f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f60:	81a3      	strh	r3, [r4, #12]
 8016f62:	e7ad      	b.n	8016ec0 <__sflush_r+0x1c>
 8016f64:	690f      	ldr	r7, [r1, #16]
 8016f66:	2f00      	cmp	r7, #0
 8016f68:	d0a9      	beq.n	8016ebe <__sflush_r+0x1a>
 8016f6a:	0793      	lsls	r3, r2, #30
 8016f6c:	680e      	ldr	r6, [r1, #0]
 8016f6e:	bf08      	it	eq
 8016f70:	694b      	ldreq	r3, [r1, #20]
 8016f72:	600f      	str	r7, [r1, #0]
 8016f74:	bf18      	it	ne
 8016f76:	2300      	movne	r3, #0
 8016f78:	eba6 0807 	sub.w	r8, r6, r7
 8016f7c:	608b      	str	r3, [r1, #8]
 8016f7e:	f1b8 0f00 	cmp.w	r8, #0
 8016f82:	dd9c      	ble.n	8016ebe <__sflush_r+0x1a>
 8016f84:	6a21      	ldr	r1, [r4, #32]
 8016f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f88:	4643      	mov	r3, r8
 8016f8a:	463a      	mov	r2, r7
 8016f8c:	4628      	mov	r0, r5
 8016f8e:	47b0      	blx	r6
 8016f90:	2800      	cmp	r0, #0
 8016f92:	dc06      	bgt.n	8016fa2 <__sflush_r+0xfe>
 8016f94:	89a3      	ldrh	r3, [r4, #12]
 8016f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f9a:	81a3      	strh	r3, [r4, #12]
 8016f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8016fa0:	e78e      	b.n	8016ec0 <__sflush_r+0x1c>
 8016fa2:	4407      	add	r7, r0
 8016fa4:	eba8 0800 	sub.w	r8, r8, r0
 8016fa8:	e7e9      	b.n	8016f7e <__sflush_r+0xda>
 8016faa:	bf00      	nop
 8016fac:	20400001 	.word	0x20400001

08016fb0 <_fflush_r>:
 8016fb0:	b538      	push	{r3, r4, r5, lr}
 8016fb2:	690b      	ldr	r3, [r1, #16]
 8016fb4:	4605      	mov	r5, r0
 8016fb6:	460c      	mov	r4, r1
 8016fb8:	b913      	cbnz	r3, 8016fc0 <_fflush_r+0x10>
 8016fba:	2500      	movs	r5, #0
 8016fbc:	4628      	mov	r0, r5
 8016fbe:	bd38      	pop	{r3, r4, r5, pc}
 8016fc0:	b118      	cbz	r0, 8016fca <_fflush_r+0x1a>
 8016fc2:	6983      	ldr	r3, [r0, #24]
 8016fc4:	b90b      	cbnz	r3, 8016fca <_fflush_r+0x1a>
 8016fc6:	f7fe f9c3 	bl	8015350 <__sinit>
 8016fca:	4b14      	ldr	r3, [pc, #80]	; (801701c <_fflush_r+0x6c>)
 8016fcc:	429c      	cmp	r4, r3
 8016fce:	d11b      	bne.n	8017008 <_fflush_r+0x58>
 8016fd0:	686c      	ldr	r4, [r5, #4]
 8016fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d0ef      	beq.n	8016fba <_fflush_r+0xa>
 8016fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016fdc:	07d0      	lsls	r0, r2, #31
 8016fde:	d404      	bmi.n	8016fea <_fflush_r+0x3a>
 8016fe0:	0599      	lsls	r1, r3, #22
 8016fe2:	d402      	bmi.n	8016fea <_fflush_r+0x3a>
 8016fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fe6:	f7fe fa76 	bl	80154d6 <__retarget_lock_acquire_recursive>
 8016fea:	4628      	mov	r0, r5
 8016fec:	4621      	mov	r1, r4
 8016fee:	f7ff ff59 	bl	8016ea4 <__sflush_r>
 8016ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ff4:	07da      	lsls	r2, r3, #31
 8016ff6:	4605      	mov	r5, r0
 8016ff8:	d4e0      	bmi.n	8016fbc <_fflush_r+0xc>
 8016ffa:	89a3      	ldrh	r3, [r4, #12]
 8016ffc:	059b      	lsls	r3, r3, #22
 8016ffe:	d4dd      	bmi.n	8016fbc <_fflush_r+0xc>
 8017000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017002:	f7fe fa69 	bl	80154d8 <__retarget_lock_release_recursive>
 8017006:	e7d9      	b.n	8016fbc <_fflush_r+0xc>
 8017008:	4b05      	ldr	r3, [pc, #20]	; (8017020 <_fflush_r+0x70>)
 801700a:	429c      	cmp	r4, r3
 801700c:	d101      	bne.n	8017012 <_fflush_r+0x62>
 801700e:	68ac      	ldr	r4, [r5, #8]
 8017010:	e7df      	b.n	8016fd2 <_fflush_r+0x22>
 8017012:	4b04      	ldr	r3, [pc, #16]	; (8017024 <_fflush_r+0x74>)
 8017014:	429c      	cmp	r4, r3
 8017016:	bf08      	it	eq
 8017018:	68ec      	ldreq	r4, [r5, #12]
 801701a:	e7da      	b.n	8016fd2 <_fflush_r+0x22>
 801701c:	080236e0 	.word	0x080236e0
 8017020:	08023700 	.word	0x08023700
 8017024:	080236c0 	.word	0x080236c0

08017028 <fiprintf>:
 8017028:	b40e      	push	{r1, r2, r3}
 801702a:	b503      	push	{r0, r1, lr}
 801702c:	4601      	mov	r1, r0
 801702e:	ab03      	add	r3, sp, #12
 8017030:	4805      	ldr	r0, [pc, #20]	; (8017048 <fiprintf+0x20>)
 8017032:	f853 2b04 	ldr.w	r2, [r3], #4
 8017036:	6800      	ldr	r0, [r0, #0]
 8017038:	9301      	str	r3, [sp, #4]
 801703a:	f000 fd95 	bl	8017b68 <_vfiprintf_r>
 801703e:	b002      	add	sp, #8
 8017040:	f85d eb04 	ldr.w	lr, [sp], #4
 8017044:	b003      	add	sp, #12
 8017046:	4770      	bx	lr
 8017048:	2400025c 	.word	0x2400025c

0801704c <_localeconv_r>:
 801704c:	4800      	ldr	r0, [pc, #0]	; (8017050 <_localeconv_r+0x4>)
 801704e:	4770      	bx	lr
 8017050:	240003b0 	.word	0x240003b0

08017054 <_lseek_r>:
 8017054:	b538      	push	{r3, r4, r5, lr}
 8017056:	4d07      	ldr	r5, [pc, #28]	; (8017074 <_lseek_r+0x20>)
 8017058:	4604      	mov	r4, r0
 801705a:	4608      	mov	r0, r1
 801705c:	4611      	mov	r1, r2
 801705e:	2200      	movs	r2, #0
 8017060:	602a      	str	r2, [r5, #0]
 8017062:	461a      	mov	r2, r3
 8017064:	f7eb faca 	bl	80025fc <_lseek>
 8017068:	1c43      	adds	r3, r0, #1
 801706a:	d102      	bne.n	8017072 <_lseek_r+0x1e>
 801706c:	682b      	ldr	r3, [r5, #0]
 801706e:	b103      	cbz	r3, 8017072 <_lseek_r+0x1e>
 8017070:	6023      	str	r3, [r4, #0]
 8017072:	bd38      	pop	{r3, r4, r5, pc}
 8017074:	24006acc 	.word	0x24006acc

08017078 <malloc>:
 8017078:	4b02      	ldr	r3, [pc, #8]	; (8017084 <malloc+0xc>)
 801707a:	4601      	mov	r1, r0
 801707c:	6818      	ldr	r0, [r3, #0]
 801707e:	f7fe ba43 	b.w	8015508 <_malloc_r>
 8017082:	bf00      	nop
 8017084:	2400025c 	.word	0x2400025c

08017088 <__malloc_lock>:
 8017088:	4801      	ldr	r0, [pc, #4]	; (8017090 <__malloc_lock+0x8>)
 801708a:	f7fe ba24 	b.w	80154d6 <__retarget_lock_acquire_recursive>
 801708e:	bf00      	nop
 8017090:	24006ac4 	.word	0x24006ac4

08017094 <__malloc_unlock>:
 8017094:	4801      	ldr	r0, [pc, #4]	; (801709c <__malloc_unlock+0x8>)
 8017096:	f7fe ba1f 	b.w	80154d8 <__retarget_lock_release_recursive>
 801709a:	bf00      	nop
 801709c:	24006ac4 	.word	0x24006ac4

080170a0 <_Balloc>:
 80170a0:	b570      	push	{r4, r5, r6, lr}
 80170a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80170a4:	4604      	mov	r4, r0
 80170a6:	460d      	mov	r5, r1
 80170a8:	b976      	cbnz	r6, 80170c8 <_Balloc+0x28>
 80170aa:	2010      	movs	r0, #16
 80170ac:	f7ff ffe4 	bl	8017078 <malloc>
 80170b0:	4602      	mov	r2, r0
 80170b2:	6260      	str	r0, [r4, #36]	; 0x24
 80170b4:	b920      	cbnz	r0, 80170c0 <_Balloc+0x20>
 80170b6:	4b18      	ldr	r3, [pc, #96]	; (8017118 <_Balloc+0x78>)
 80170b8:	4818      	ldr	r0, [pc, #96]	; (801711c <_Balloc+0x7c>)
 80170ba:	2166      	movs	r1, #102	; 0x66
 80170bc:	f7ff f8b4 	bl	8016228 <__assert_func>
 80170c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80170c4:	6006      	str	r6, [r0, #0]
 80170c6:	60c6      	str	r6, [r0, #12]
 80170c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80170ca:	68f3      	ldr	r3, [r6, #12]
 80170cc:	b183      	cbz	r3, 80170f0 <_Balloc+0x50>
 80170ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170d0:	68db      	ldr	r3, [r3, #12]
 80170d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80170d6:	b9b8      	cbnz	r0, 8017108 <_Balloc+0x68>
 80170d8:	2101      	movs	r1, #1
 80170da:	fa01 f605 	lsl.w	r6, r1, r5
 80170de:	1d72      	adds	r2, r6, #5
 80170e0:	0092      	lsls	r2, r2, #2
 80170e2:	4620      	mov	r0, r4
 80170e4:	f000 fb5a 	bl	801779c <_calloc_r>
 80170e8:	b160      	cbz	r0, 8017104 <_Balloc+0x64>
 80170ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80170ee:	e00e      	b.n	801710e <_Balloc+0x6e>
 80170f0:	2221      	movs	r2, #33	; 0x21
 80170f2:	2104      	movs	r1, #4
 80170f4:	4620      	mov	r0, r4
 80170f6:	f000 fb51 	bl	801779c <_calloc_r>
 80170fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170fc:	60f0      	str	r0, [r6, #12]
 80170fe:	68db      	ldr	r3, [r3, #12]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d1e4      	bne.n	80170ce <_Balloc+0x2e>
 8017104:	2000      	movs	r0, #0
 8017106:	bd70      	pop	{r4, r5, r6, pc}
 8017108:	6802      	ldr	r2, [r0, #0]
 801710a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801710e:	2300      	movs	r3, #0
 8017110:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017114:	e7f7      	b.n	8017106 <_Balloc+0x66>
 8017116:	bf00      	nop
 8017118:	08023758 	.word	0x08023758
 801711c:	0802398a 	.word	0x0802398a

08017120 <_Bfree>:
 8017120:	b570      	push	{r4, r5, r6, lr}
 8017122:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017124:	4605      	mov	r5, r0
 8017126:	460c      	mov	r4, r1
 8017128:	b976      	cbnz	r6, 8017148 <_Bfree+0x28>
 801712a:	2010      	movs	r0, #16
 801712c:	f7ff ffa4 	bl	8017078 <malloc>
 8017130:	4602      	mov	r2, r0
 8017132:	6268      	str	r0, [r5, #36]	; 0x24
 8017134:	b920      	cbnz	r0, 8017140 <_Bfree+0x20>
 8017136:	4b09      	ldr	r3, [pc, #36]	; (801715c <_Bfree+0x3c>)
 8017138:	4809      	ldr	r0, [pc, #36]	; (8017160 <_Bfree+0x40>)
 801713a:	218a      	movs	r1, #138	; 0x8a
 801713c:	f7ff f874 	bl	8016228 <__assert_func>
 8017140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017144:	6006      	str	r6, [r0, #0]
 8017146:	60c6      	str	r6, [r0, #12]
 8017148:	b13c      	cbz	r4, 801715a <_Bfree+0x3a>
 801714a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801714c:	6862      	ldr	r2, [r4, #4]
 801714e:	68db      	ldr	r3, [r3, #12]
 8017150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017154:	6021      	str	r1, [r4, #0]
 8017156:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801715a:	bd70      	pop	{r4, r5, r6, pc}
 801715c:	08023758 	.word	0x08023758
 8017160:	0802398a 	.word	0x0802398a

08017164 <__multadd>:
 8017164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017168:	690e      	ldr	r6, [r1, #16]
 801716a:	4607      	mov	r7, r0
 801716c:	4698      	mov	r8, r3
 801716e:	460c      	mov	r4, r1
 8017170:	f101 0014 	add.w	r0, r1, #20
 8017174:	2300      	movs	r3, #0
 8017176:	6805      	ldr	r5, [r0, #0]
 8017178:	b2a9      	uxth	r1, r5
 801717a:	fb02 8101 	mla	r1, r2, r1, r8
 801717e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8017182:	0c2d      	lsrs	r5, r5, #16
 8017184:	fb02 c505 	mla	r5, r2, r5, ip
 8017188:	b289      	uxth	r1, r1
 801718a:	3301      	adds	r3, #1
 801718c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8017190:	429e      	cmp	r6, r3
 8017192:	f840 1b04 	str.w	r1, [r0], #4
 8017196:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801719a:	dcec      	bgt.n	8017176 <__multadd+0x12>
 801719c:	f1b8 0f00 	cmp.w	r8, #0
 80171a0:	d022      	beq.n	80171e8 <__multadd+0x84>
 80171a2:	68a3      	ldr	r3, [r4, #8]
 80171a4:	42b3      	cmp	r3, r6
 80171a6:	dc19      	bgt.n	80171dc <__multadd+0x78>
 80171a8:	6861      	ldr	r1, [r4, #4]
 80171aa:	4638      	mov	r0, r7
 80171ac:	3101      	adds	r1, #1
 80171ae:	f7ff ff77 	bl	80170a0 <_Balloc>
 80171b2:	4605      	mov	r5, r0
 80171b4:	b928      	cbnz	r0, 80171c2 <__multadd+0x5e>
 80171b6:	4602      	mov	r2, r0
 80171b8:	4b0d      	ldr	r3, [pc, #52]	; (80171f0 <__multadd+0x8c>)
 80171ba:	480e      	ldr	r0, [pc, #56]	; (80171f4 <__multadd+0x90>)
 80171bc:	21b5      	movs	r1, #181	; 0xb5
 80171be:	f7ff f833 	bl	8016228 <__assert_func>
 80171c2:	6922      	ldr	r2, [r4, #16]
 80171c4:	3202      	adds	r2, #2
 80171c6:	f104 010c 	add.w	r1, r4, #12
 80171ca:	0092      	lsls	r2, r2, #2
 80171cc:	300c      	adds	r0, #12
 80171ce:	f7fe f984 	bl	80154da <memcpy>
 80171d2:	4621      	mov	r1, r4
 80171d4:	4638      	mov	r0, r7
 80171d6:	f7ff ffa3 	bl	8017120 <_Bfree>
 80171da:	462c      	mov	r4, r5
 80171dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80171e0:	3601      	adds	r6, #1
 80171e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80171e6:	6126      	str	r6, [r4, #16]
 80171e8:	4620      	mov	r0, r4
 80171ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171ee:	bf00      	nop
 80171f0:	08023979 	.word	0x08023979
 80171f4:	0802398a 	.word	0x0802398a

080171f8 <__hi0bits>:
 80171f8:	0c03      	lsrs	r3, r0, #16
 80171fa:	041b      	lsls	r3, r3, #16
 80171fc:	b9d3      	cbnz	r3, 8017234 <__hi0bits+0x3c>
 80171fe:	0400      	lsls	r0, r0, #16
 8017200:	2310      	movs	r3, #16
 8017202:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017206:	bf04      	itt	eq
 8017208:	0200      	lsleq	r0, r0, #8
 801720a:	3308      	addeq	r3, #8
 801720c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017210:	bf04      	itt	eq
 8017212:	0100      	lsleq	r0, r0, #4
 8017214:	3304      	addeq	r3, #4
 8017216:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801721a:	bf04      	itt	eq
 801721c:	0080      	lsleq	r0, r0, #2
 801721e:	3302      	addeq	r3, #2
 8017220:	2800      	cmp	r0, #0
 8017222:	db05      	blt.n	8017230 <__hi0bits+0x38>
 8017224:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017228:	f103 0301 	add.w	r3, r3, #1
 801722c:	bf08      	it	eq
 801722e:	2320      	moveq	r3, #32
 8017230:	4618      	mov	r0, r3
 8017232:	4770      	bx	lr
 8017234:	2300      	movs	r3, #0
 8017236:	e7e4      	b.n	8017202 <__hi0bits+0xa>

08017238 <__lo0bits>:
 8017238:	6803      	ldr	r3, [r0, #0]
 801723a:	f013 0207 	ands.w	r2, r3, #7
 801723e:	4601      	mov	r1, r0
 8017240:	d00b      	beq.n	801725a <__lo0bits+0x22>
 8017242:	07da      	lsls	r2, r3, #31
 8017244:	d424      	bmi.n	8017290 <__lo0bits+0x58>
 8017246:	0798      	lsls	r0, r3, #30
 8017248:	bf49      	itett	mi
 801724a:	085b      	lsrmi	r3, r3, #1
 801724c:	089b      	lsrpl	r3, r3, #2
 801724e:	2001      	movmi	r0, #1
 8017250:	600b      	strmi	r3, [r1, #0]
 8017252:	bf5c      	itt	pl
 8017254:	600b      	strpl	r3, [r1, #0]
 8017256:	2002      	movpl	r0, #2
 8017258:	4770      	bx	lr
 801725a:	b298      	uxth	r0, r3
 801725c:	b9b0      	cbnz	r0, 801728c <__lo0bits+0x54>
 801725e:	0c1b      	lsrs	r3, r3, #16
 8017260:	2010      	movs	r0, #16
 8017262:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017266:	bf04      	itt	eq
 8017268:	0a1b      	lsreq	r3, r3, #8
 801726a:	3008      	addeq	r0, #8
 801726c:	071a      	lsls	r2, r3, #28
 801726e:	bf04      	itt	eq
 8017270:	091b      	lsreq	r3, r3, #4
 8017272:	3004      	addeq	r0, #4
 8017274:	079a      	lsls	r2, r3, #30
 8017276:	bf04      	itt	eq
 8017278:	089b      	lsreq	r3, r3, #2
 801727a:	3002      	addeq	r0, #2
 801727c:	07da      	lsls	r2, r3, #31
 801727e:	d403      	bmi.n	8017288 <__lo0bits+0x50>
 8017280:	085b      	lsrs	r3, r3, #1
 8017282:	f100 0001 	add.w	r0, r0, #1
 8017286:	d005      	beq.n	8017294 <__lo0bits+0x5c>
 8017288:	600b      	str	r3, [r1, #0]
 801728a:	4770      	bx	lr
 801728c:	4610      	mov	r0, r2
 801728e:	e7e8      	b.n	8017262 <__lo0bits+0x2a>
 8017290:	2000      	movs	r0, #0
 8017292:	4770      	bx	lr
 8017294:	2020      	movs	r0, #32
 8017296:	4770      	bx	lr

08017298 <__i2b>:
 8017298:	b510      	push	{r4, lr}
 801729a:	460c      	mov	r4, r1
 801729c:	2101      	movs	r1, #1
 801729e:	f7ff feff 	bl	80170a0 <_Balloc>
 80172a2:	4602      	mov	r2, r0
 80172a4:	b928      	cbnz	r0, 80172b2 <__i2b+0x1a>
 80172a6:	4b05      	ldr	r3, [pc, #20]	; (80172bc <__i2b+0x24>)
 80172a8:	4805      	ldr	r0, [pc, #20]	; (80172c0 <__i2b+0x28>)
 80172aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80172ae:	f7fe ffbb 	bl	8016228 <__assert_func>
 80172b2:	2301      	movs	r3, #1
 80172b4:	6144      	str	r4, [r0, #20]
 80172b6:	6103      	str	r3, [r0, #16]
 80172b8:	bd10      	pop	{r4, pc}
 80172ba:	bf00      	nop
 80172bc:	08023979 	.word	0x08023979
 80172c0:	0802398a 	.word	0x0802398a

080172c4 <__multiply>:
 80172c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c8:	4614      	mov	r4, r2
 80172ca:	690a      	ldr	r2, [r1, #16]
 80172cc:	6923      	ldr	r3, [r4, #16]
 80172ce:	429a      	cmp	r2, r3
 80172d0:	bfb8      	it	lt
 80172d2:	460b      	movlt	r3, r1
 80172d4:	460d      	mov	r5, r1
 80172d6:	bfbc      	itt	lt
 80172d8:	4625      	movlt	r5, r4
 80172da:	461c      	movlt	r4, r3
 80172dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80172e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80172e4:	68ab      	ldr	r3, [r5, #8]
 80172e6:	6869      	ldr	r1, [r5, #4]
 80172e8:	eb0a 0709 	add.w	r7, sl, r9
 80172ec:	42bb      	cmp	r3, r7
 80172ee:	b085      	sub	sp, #20
 80172f0:	bfb8      	it	lt
 80172f2:	3101      	addlt	r1, #1
 80172f4:	f7ff fed4 	bl	80170a0 <_Balloc>
 80172f8:	b930      	cbnz	r0, 8017308 <__multiply+0x44>
 80172fa:	4602      	mov	r2, r0
 80172fc:	4b42      	ldr	r3, [pc, #264]	; (8017408 <__multiply+0x144>)
 80172fe:	4843      	ldr	r0, [pc, #268]	; (801740c <__multiply+0x148>)
 8017300:	f240 115d 	movw	r1, #349	; 0x15d
 8017304:	f7fe ff90 	bl	8016228 <__assert_func>
 8017308:	f100 0614 	add.w	r6, r0, #20
 801730c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8017310:	4633      	mov	r3, r6
 8017312:	2200      	movs	r2, #0
 8017314:	4543      	cmp	r3, r8
 8017316:	d31e      	bcc.n	8017356 <__multiply+0x92>
 8017318:	f105 0c14 	add.w	ip, r5, #20
 801731c:	f104 0314 	add.w	r3, r4, #20
 8017320:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8017324:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8017328:	9202      	str	r2, [sp, #8]
 801732a:	ebac 0205 	sub.w	r2, ip, r5
 801732e:	3a15      	subs	r2, #21
 8017330:	f022 0203 	bic.w	r2, r2, #3
 8017334:	3204      	adds	r2, #4
 8017336:	f105 0115 	add.w	r1, r5, #21
 801733a:	458c      	cmp	ip, r1
 801733c:	bf38      	it	cc
 801733e:	2204      	movcc	r2, #4
 8017340:	9201      	str	r2, [sp, #4]
 8017342:	9a02      	ldr	r2, [sp, #8]
 8017344:	9303      	str	r3, [sp, #12]
 8017346:	429a      	cmp	r2, r3
 8017348:	d808      	bhi.n	801735c <__multiply+0x98>
 801734a:	2f00      	cmp	r7, #0
 801734c:	dc55      	bgt.n	80173fa <__multiply+0x136>
 801734e:	6107      	str	r7, [r0, #16]
 8017350:	b005      	add	sp, #20
 8017352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017356:	f843 2b04 	str.w	r2, [r3], #4
 801735a:	e7db      	b.n	8017314 <__multiply+0x50>
 801735c:	f8b3 a000 	ldrh.w	sl, [r3]
 8017360:	f1ba 0f00 	cmp.w	sl, #0
 8017364:	d020      	beq.n	80173a8 <__multiply+0xe4>
 8017366:	f105 0e14 	add.w	lr, r5, #20
 801736a:	46b1      	mov	r9, r6
 801736c:	2200      	movs	r2, #0
 801736e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8017372:	f8d9 b000 	ldr.w	fp, [r9]
 8017376:	b2a1      	uxth	r1, r4
 8017378:	fa1f fb8b 	uxth.w	fp, fp
 801737c:	fb0a b101 	mla	r1, sl, r1, fp
 8017380:	4411      	add	r1, r2
 8017382:	f8d9 2000 	ldr.w	r2, [r9]
 8017386:	0c24      	lsrs	r4, r4, #16
 8017388:	0c12      	lsrs	r2, r2, #16
 801738a:	fb0a 2404 	mla	r4, sl, r4, r2
 801738e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8017392:	b289      	uxth	r1, r1
 8017394:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8017398:	45f4      	cmp	ip, lr
 801739a:	f849 1b04 	str.w	r1, [r9], #4
 801739e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80173a2:	d8e4      	bhi.n	801736e <__multiply+0xaa>
 80173a4:	9901      	ldr	r1, [sp, #4]
 80173a6:	5072      	str	r2, [r6, r1]
 80173a8:	9a03      	ldr	r2, [sp, #12]
 80173aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80173ae:	3304      	adds	r3, #4
 80173b0:	f1b9 0f00 	cmp.w	r9, #0
 80173b4:	d01f      	beq.n	80173f6 <__multiply+0x132>
 80173b6:	6834      	ldr	r4, [r6, #0]
 80173b8:	f105 0114 	add.w	r1, r5, #20
 80173bc:	46b6      	mov	lr, r6
 80173be:	f04f 0a00 	mov.w	sl, #0
 80173c2:	880a      	ldrh	r2, [r1, #0]
 80173c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80173c8:	fb09 b202 	mla	r2, r9, r2, fp
 80173cc:	4492      	add	sl, r2
 80173ce:	b2a4      	uxth	r4, r4
 80173d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80173d4:	f84e 4b04 	str.w	r4, [lr], #4
 80173d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80173dc:	f8be 2000 	ldrh.w	r2, [lr]
 80173e0:	0c24      	lsrs	r4, r4, #16
 80173e2:	fb09 2404 	mla	r4, r9, r4, r2
 80173e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80173ea:	458c      	cmp	ip, r1
 80173ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80173f0:	d8e7      	bhi.n	80173c2 <__multiply+0xfe>
 80173f2:	9a01      	ldr	r2, [sp, #4]
 80173f4:	50b4      	str	r4, [r6, r2]
 80173f6:	3604      	adds	r6, #4
 80173f8:	e7a3      	b.n	8017342 <__multiply+0x7e>
 80173fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d1a5      	bne.n	801734e <__multiply+0x8a>
 8017402:	3f01      	subs	r7, #1
 8017404:	e7a1      	b.n	801734a <__multiply+0x86>
 8017406:	bf00      	nop
 8017408:	08023979 	.word	0x08023979
 801740c:	0802398a 	.word	0x0802398a

08017410 <__pow5mult>:
 8017410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017414:	4615      	mov	r5, r2
 8017416:	f012 0203 	ands.w	r2, r2, #3
 801741a:	4606      	mov	r6, r0
 801741c:	460f      	mov	r7, r1
 801741e:	d007      	beq.n	8017430 <__pow5mult+0x20>
 8017420:	4c25      	ldr	r4, [pc, #148]	; (80174b8 <__pow5mult+0xa8>)
 8017422:	3a01      	subs	r2, #1
 8017424:	2300      	movs	r3, #0
 8017426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801742a:	f7ff fe9b 	bl	8017164 <__multadd>
 801742e:	4607      	mov	r7, r0
 8017430:	10ad      	asrs	r5, r5, #2
 8017432:	d03d      	beq.n	80174b0 <__pow5mult+0xa0>
 8017434:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017436:	b97c      	cbnz	r4, 8017458 <__pow5mult+0x48>
 8017438:	2010      	movs	r0, #16
 801743a:	f7ff fe1d 	bl	8017078 <malloc>
 801743e:	4602      	mov	r2, r0
 8017440:	6270      	str	r0, [r6, #36]	; 0x24
 8017442:	b928      	cbnz	r0, 8017450 <__pow5mult+0x40>
 8017444:	4b1d      	ldr	r3, [pc, #116]	; (80174bc <__pow5mult+0xac>)
 8017446:	481e      	ldr	r0, [pc, #120]	; (80174c0 <__pow5mult+0xb0>)
 8017448:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801744c:	f7fe feec 	bl	8016228 <__assert_func>
 8017450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017454:	6004      	str	r4, [r0, #0]
 8017456:	60c4      	str	r4, [r0, #12]
 8017458:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801745c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017460:	b94c      	cbnz	r4, 8017476 <__pow5mult+0x66>
 8017462:	f240 2171 	movw	r1, #625	; 0x271
 8017466:	4630      	mov	r0, r6
 8017468:	f7ff ff16 	bl	8017298 <__i2b>
 801746c:	2300      	movs	r3, #0
 801746e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017472:	4604      	mov	r4, r0
 8017474:	6003      	str	r3, [r0, #0]
 8017476:	f04f 0900 	mov.w	r9, #0
 801747a:	07eb      	lsls	r3, r5, #31
 801747c:	d50a      	bpl.n	8017494 <__pow5mult+0x84>
 801747e:	4639      	mov	r1, r7
 8017480:	4622      	mov	r2, r4
 8017482:	4630      	mov	r0, r6
 8017484:	f7ff ff1e 	bl	80172c4 <__multiply>
 8017488:	4639      	mov	r1, r7
 801748a:	4680      	mov	r8, r0
 801748c:	4630      	mov	r0, r6
 801748e:	f7ff fe47 	bl	8017120 <_Bfree>
 8017492:	4647      	mov	r7, r8
 8017494:	106d      	asrs	r5, r5, #1
 8017496:	d00b      	beq.n	80174b0 <__pow5mult+0xa0>
 8017498:	6820      	ldr	r0, [r4, #0]
 801749a:	b938      	cbnz	r0, 80174ac <__pow5mult+0x9c>
 801749c:	4622      	mov	r2, r4
 801749e:	4621      	mov	r1, r4
 80174a0:	4630      	mov	r0, r6
 80174a2:	f7ff ff0f 	bl	80172c4 <__multiply>
 80174a6:	6020      	str	r0, [r4, #0]
 80174a8:	f8c0 9000 	str.w	r9, [r0]
 80174ac:	4604      	mov	r4, r0
 80174ae:	e7e4      	b.n	801747a <__pow5mult+0x6a>
 80174b0:	4638      	mov	r0, r7
 80174b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174b6:	bf00      	nop
 80174b8:	08023ae0 	.word	0x08023ae0
 80174bc:	08023758 	.word	0x08023758
 80174c0:	0802398a 	.word	0x0802398a

080174c4 <__lshift>:
 80174c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174c8:	460c      	mov	r4, r1
 80174ca:	6849      	ldr	r1, [r1, #4]
 80174cc:	6923      	ldr	r3, [r4, #16]
 80174ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80174d2:	68a3      	ldr	r3, [r4, #8]
 80174d4:	4607      	mov	r7, r0
 80174d6:	4691      	mov	r9, r2
 80174d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80174dc:	f108 0601 	add.w	r6, r8, #1
 80174e0:	42b3      	cmp	r3, r6
 80174e2:	db0b      	blt.n	80174fc <__lshift+0x38>
 80174e4:	4638      	mov	r0, r7
 80174e6:	f7ff fddb 	bl	80170a0 <_Balloc>
 80174ea:	4605      	mov	r5, r0
 80174ec:	b948      	cbnz	r0, 8017502 <__lshift+0x3e>
 80174ee:	4602      	mov	r2, r0
 80174f0:	4b28      	ldr	r3, [pc, #160]	; (8017594 <__lshift+0xd0>)
 80174f2:	4829      	ldr	r0, [pc, #164]	; (8017598 <__lshift+0xd4>)
 80174f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80174f8:	f7fe fe96 	bl	8016228 <__assert_func>
 80174fc:	3101      	adds	r1, #1
 80174fe:	005b      	lsls	r3, r3, #1
 8017500:	e7ee      	b.n	80174e0 <__lshift+0x1c>
 8017502:	2300      	movs	r3, #0
 8017504:	f100 0114 	add.w	r1, r0, #20
 8017508:	f100 0210 	add.w	r2, r0, #16
 801750c:	4618      	mov	r0, r3
 801750e:	4553      	cmp	r3, sl
 8017510:	db33      	blt.n	801757a <__lshift+0xb6>
 8017512:	6920      	ldr	r0, [r4, #16]
 8017514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017518:	f104 0314 	add.w	r3, r4, #20
 801751c:	f019 091f 	ands.w	r9, r9, #31
 8017520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017524:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017528:	d02b      	beq.n	8017582 <__lshift+0xbe>
 801752a:	f1c9 0e20 	rsb	lr, r9, #32
 801752e:	468a      	mov	sl, r1
 8017530:	2200      	movs	r2, #0
 8017532:	6818      	ldr	r0, [r3, #0]
 8017534:	fa00 f009 	lsl.w	r0, r0, r9
 8017538:	4302      	orrs	r2, r0
 801753a:	f84a 2b04 	str.w	r2, [sl], #4
 801753e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017542:	459c      	cmp	ip, r3
 8017544:	fa22 f20e 	lsr.w	r2, r2, lr
 8017548:	d8f3      	bhi.n	8017532 <__lshift+0x6e>
 801754a:	ebac 0304 	sub.w	r3, ip, r4
 801754e:	3b15      	subs	r3, #21
 8017550:	f023 0303 	bic.w	r3, r3, #3
 8017554:	3304      	adds	r3, #4
 8017556:	f104 0015 	add.w	r0, r4, #21
 801755a:	4584      	cmp	ip, r0
 801755c:	bf38      	it	cc
 801755e:	2304      	movcc	r3, #4
 8017560:	50ca      	str	r2, [r1, r3]
 8017562:	b10a      	cbz	r2, 8017568 <__lshift+0xa4>
 8017564:	f108 0602 	add.w	r6, r8, #2
 8017568:	3e01      	subs	r6, #1
 801756a:	4638      	mov	r0, r7
 801756c:	612e      	str	r6, [r5, #16]
 801756e:	4621      	mov	r1, r4
 8017570:	f7ff fdd6 	bl	8017120 <_Bfree>
 8017574:	4628      	mov	r0, r5
 8017576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801757a:	f842 0f04 	str.w	r0, [r2, #4]!
 801757e:	3301      	adds	r3, #1
 8017580:	e7c5      	b.n	801750e <__lshift+0x4a>
 8017582:	3904      	subs	r1, #4
 8017584:	f853 2b04 	ldr.w	r2, [r3], #4
 8017588:	f841 2f04 	str.w	r2, [r1, #4]!
 801758c:	459c      	cmp	ip, r3
 801758e:	d8f9      	bhi.n	8017584 <__lshift+0xc0>
 8017590:	e7ea      	b.n	8017568 <__lshift+0xa4>
 8017592:	bf00      	nop
 8017594:	08023979 	.word	0x08023979
 8017598:	0802398a 	.word	0x0802398a

0801759c <__mcmp>:
 801759c:	b530      	push	{r4, r5, lr}
 801759e:	6902      	ldr	r2, [r0, #16]
 80175a0:	690c      	ldr	r4, [r1, #16]
 80175a2:	1b12      	subs	r2, r2, r4
 80175a4:	d10e      	bne.n	80175c4 <__mcmp+0x28>
 80175a6:	f100 0314 	add.w	r3, r0, #20
 80175aa:	3114      	adds	r1, #20
 80175ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80175b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80175b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80175b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80175bc:	42a5      	cmp	r5, r4
 80175be:	d003      	beq.n	80175c8 <__mcmp+0x2c>
 80175c0:	d305      	bcc.n	80175ce <__mcmp+0x32>
 80175c2:	2201      	movs	r2, #1
 80175c4:	4610      	mov	r0, r2
 80175c6:	bd30      	pop	{r4, r5, pc}
 80175c8:	4283      	cmp	r3, r0
 80175ca:	d3f3      	bcc.n	80175b4 <__mcmp+0x18>
 80175cc:	e7fa      	b.n	80175c4 <__mcmp+0x28>
 80175ce:	f04f 32ff 	mov.w	r2, #4294967295
 80175d2:	e7f7      	b.n	80175c4 <__mcmp+0x28>

080175d4 <__mdiff>:
 80175d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175d8:	460c      	mov	r4, r1
 80175da:	4606      	mov	r6, r0
 80175dc:	4611      	mov	r1, r2
 80175de:	4620      	mov	r0, r4
 80175e0:	4617      	mov	r7, r2
 80175e2:	f7ff ffdb 	bl	801759c <__mcmp>
 80175e6:	1e05      	subs	r5, r0, #0
 80175e8:	d110      	bne.n	801760c <__mdiff+0x38>
 80175ea:	4629      	mov	r1, r5
 80175ec:	4630      	mov	r0, r6
 80175ee:	f7ff fd57 	bl	80170a0 <_Balloc>
 80175f2:	b930      	cbnz	r0, 8017602 <__mdiff+0x2e>
 80175f4:	4b39      	ldr	r3, [pc, #228]	; (80176dc <__mdiff+0x108>)
 80175f6:	4602      	mov	r2, r0
 80175f8:	f240 2132 	movw	r1, #562	; 0x232
 80175fc:	4838      	ldr	r0, [pc, #224]	; (80176e0 <__mdiff+0x10c>)
 80175fe:	f7fe fe13 	bl	8016228 <__assert_func>
 8017602:	2301      	movs	r3, #1
 8017604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801760c:	bfa4      	itt	ge
 801760e:	463b      	movge	r3, r7
 8017610:	4627      	movge	r7, r4
 8017612:	4630      	mov	r0, r6
 8017614:	6879      	ldr	r1, [r7, #4]
 8017616:	bfa6      	itte	ge
 8017618:	461c      	movge	r4, r3
 801761a:	2500      	movge	r5, #0
 801761c:	2501      	movlt	r5, #1
 801761e:	f7ff fd3f 	bl	80170a0 <_Balloc>
 8017622:	b920      	cbnz	r0, 801762e <__mdiff+0x5a>
 8017624:	4b2d      	ldr	r3, [pc, #180]	; (80176dc <__mdiff+0x108>)
 8017626:	4602      	mov	r2, r0
 8017628:	f44f 7110 	mov.w	r1, #576	; 0x240
 801762c:	e7e6      	b.n	80175fc <__mdiff+0x28>
 801762e:	693e      	ldr	r6, [r7, #16]
 8017630:	60c5      	str	r5, [r0, #12]
 8017632:	6925      	ldr	r5, [r4, #16]
 8017634:	f107 0114 	add.w	r1, r7, #20
 8017638:	f104 0914 	add.w	r9, r4, #20
 801763c:	f100 0e14 	add.w	lr, r0, #20
 8017640:	f107 0210 	add.w	r2, r7, #16
 8017644:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8017648:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801764c:	46f2      	mov	sl, lr
 801764e:	2700      	movs	r7, #0
 8017650:	f859 3b04 	ldr.w	r3, [r9], #4
 8017654:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017658:	fa1f f883 	uxth.w	r8, r3
 801765c:	fa17 f78b 	uxtah	r7, r7, fp
 8017660:	0c1b      	lsrs	r3, r3, #16
 8017662:	eba7 0808 	sub.w	r8, r7, r8
 8017666:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801766a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801766e:	fa1f f888 	uxth.w	r8, r8
 8017672:	141f      	asrs	r7, r3, #16
 8017674:	454d      	cmp	r5, r9
 8017676:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801767a:	f84a 3b04 	str.w	r3, [sl], #4
 801767e:	d8e7      	bhi.n	8017650 <__mdiff+0x7c>
 8017680:	1b2b      	subs	r3, r5, r4
 8017682:	3b15      	subs	r3, #21
 8017684:	f023 0303 	bic.w	r3, r3, #3
 8017688:	3304      	adds	r3, #4
 801768a:	3415      	adds	r4, #21
 801768c:	42a5      	cmp	r5, r4
 801768e:	bf38      	it	cc
 8017690:	2304      	movcc	r3, #4
 8017692:	4419      	add	r1, r3
 8017694:	4473      	add	r3, lr
 8017696:	469e      	mov	lr, r3
 8017698:	460d      	mov	r5, r1
 801769a:	4565      	cmp	r5, ip
 801769c:	d30e      	bcc.n	80176bc <__mdiff+0xe8>
 801769e:	f10c 0203 	add.w	r2, ip, #3
 80176a2:	1a52      	subs	r2, r2, r1
 80176a4:	f022 0203 	bic.w	r2, r2, #3
 80176a8:	3903      	subs	r1, #3
 80176aa:	458c      	cmp	ip, r1
 80176ac:	bf38      	it	cc
 80176ae:	2200      	movcc	r2, #0
 80176b0:	441a      	add	r2, r3
 80176b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80176b6:	b17b      	cbz	r3, 80176d8 <__mdiff+0x104>
 80176b8:	6106      	str	r6, [r0, #16]
 80176ba:	e7a5      	b.n	8017608 <__mdiff+0x34>
 80176bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80176c0:	fa17 f488 	uxtah	r4, r7, r8
 80176c4:	1422      	asrs	r2, r4, #16
 80176c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80176ca:	b2a4      	uxth	r4, r4
 80176cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80176d0:	f84e 4b04 	str.w	r4, [lr], #4
 80176d4:	1417      	asrs	r7, r2, #16
 80176d6:	e7e0      	b.n	801769a <__mdiff+0xc6>
 80176d8:	3e01      	subs	r6, #1
 80176da:	e7ea      	b.n	80176b2 <__mdiff+0xde>
 80176dc:	08023979 	.word	0x08023979
 80176e0:	0802398a 	.word	0x0802398a

080176e4 <__d2b>:
 80176e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80176e8:	4689      	mov	r9, r1
 80176ea:	2101      	movs	r1, #1
 80176ec:	ec57 6b10 	vmov	r6, r7, d0
 80176f0:	4690      	mov	r8, r2
 80176f2:	f7ff fcd5 	bl	80170a0 <_Balloc>
 80176f6:	4604      	mov	r4, r0
 80176f8:	b930      	cbnz	r0, 8017708 <__d2b+0x24>
 80176fa:	4602      	mov	r2, r0
 80176fc:	4b25      	ldr	r3, [pc, #148]	; (8017794 <__d2b+0xb0>)
 80176fe:	4826      	ldr	r0, [pc, #152]	; (8017798 <__d2b+0xb4>)
 8017700:	f240 310a 	movw	r1, #778	; 0x30a
 8017704:	f7fe fd90 	bl	8016228 <__assert_func>
 8017708:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801770c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017710:	bb35      	cbnz	r5, 8017760 <__d2b+0x7c>
 8017712:	2e00      	cmp	r6, #0
 8017714:	9301      	str	r3, [sp, #4]
 8017716:	d028      	beq.n	801776a <__d2b+0x86>
 8017718:	4668      	mov	r0, sp
 801771a:	9600      	str	r6, [sp, #0]
 801771c:	f7ff fd8c 	bl	8017238 <__lo0bits>
 8017720:	9900      	ldr	r1, [sp, #0]
 8017722:	b300      	cbz	r0, 8017766 <__d2b+0x82>
 8017724:	9a01      	ldr	r2, [sp, #4]
 8017726:	f1c0 0320 	rsb	r3, r0, #32
 801772a:	fa02 f303 	lsl.w	r3, r2, r3
 801772e:	430b      	orrs	r3, r1
 8017730:	40c2      	lsrs	r2, r0
 8017732:	6163      	str	r3, [r4, #20]
 8017734:	9201      	str	r2, [sp, #4]
 8017736:	9b01      	ldr	r3, [sp, #4]
 8017738:	61a3      	str	r3, [r4, #24]
 801773a:	2b00      	cmp	r3, #0
 801773c:	bf14      	ite	ne
 801773e:	2202      	movne	r2, #2
 8017740:	2201      	moveq	r2, #1
 8017742:	6122      	str	r2, [r4, #16]
 8017744:	b1d5      	cbz	r5, 801777c <__d2b+0x98>
 8017746:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801774a:	4405      	add	r5, r0
 801774c:	f8c9 5000 	str.w	r5, [r9]
 8017750:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017754:	f8c8 0000 	str.w	r0, [r8]
 8017758:	4620      	mov	r0, r4
 801775a:	b003      	add	sp, #12
 801775c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017764:	e7d5      	b.n	8017712 <__d2b+0x2e>
 8017766:	6161      	str	r1, [r4, #20]
 8017768:	e7e5      	b.n	8017736 <__d2b+0x52>
 801776a:	a801      	add	r0, sp, #4
 801776c:	f7ff fd64 	bl	8017238 <__lo0bits>
 8017770:	9b01      	ldr	r3, [sp, #4]
 8017772:	6163      	str	r3, [r4, #20]
 8017774:	2201      	movs	r2, #1
 8017776:	6122      	str	r2, [r4, #16]
 8017778:	3020      	adds	r0, #32
 801777a:	e7e3      	b.n	8017744 <__d2b+0x60>
 801777c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017780:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017784:	f8c9 0000 	str.w	r0, [r9]
 8017788:	6918      	ldr	r0, [r3, #16]
 801778a:	f7ff fd35 	bl	80171f8 <__hi0bits>
 801778e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017792:	e7df      	b.n	8017754 <__d2b+0x70>
 8017794:	08023979 	.word	0x08023979
 8017798:	0802398a 	.word	0x0802398a

0801779c <_calloc_r>:
 801779c:	b513      	push	{r0, r1, r4, lr}
 801779e:	434a      	muls	r2, r1
 80177a0:	4611      	mov	r1, r2
 80177a2:	9201      	str	r2, [sp, #4]
 80177a4:	f7fd feb0 	bl	8015508 <_malloc_r>
 80177a8:	4604      	mov	r4, r0
 80177aa:	b118      	cbz	r0, 80177b4 <_calloc_r+0x18>
 80177ac:	9a01      	ldr	r2, [sp, #4]
 80177ae:	2100      	movs	r1, #0
 80177b0:	f7fd fea1 	bl	80154f6 <memset>
 80177b4:	4620      	mov	r0, r4
 80177b6:	b002      	add	sp, #8
 80177b8:	bd10      	pop	{r4, pc}
	...

080177bc <_free_r>:
 80177bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177be:	2900      	cmp	r1, #0
 80177c0:	d048      	beq.n	8017854 <_free_r+0x98>
 80177c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177c6:	9001      	str	r0, [sp, #4]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	f1a1 0404 	sub.w	r4, r1, #4
 80177ce:	bfb8      	it	lt
 80177d0:	18e4      	addlt	r4, r4, r3
 80177d2:	f7ff fc59 	bl	8017088 <__malloc_lock>
 80177d6:	4a20      	ldr	r2, [pc, #128]	; (8017858 <_free_r+0x9c>)
 80177d8:	9801      	ldr	r0, [sp, #4]
 80177da:	6813      	ldr	r3, [r2, #0]
 80177dc:	4615      	mov	r5, r2
 80177de:	b933      	cbnz	r3, 80177ee <_free_r+0x32>
 80177e0:	6063      	str	r3, [r4, #4]
 80177e2:	6014      	str	r4, [r2, #0]
 80177e4:	b003      	add	sp, #12
 80177e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80177ea:	f7ff bc53 	b.w	8017094 <__malloc_unlock>
 80177ee:	42a3      	cmp	r3, r4
 80177f0:	d90b      	bls.n	801780a <_free_r+0x4e>
 80177f2:	6821      	ldr	r1, [r4, #0]
 80177f4:	1862      	adds	r2, r4, r1
 80177f6:	4293      	cmp	r3, r2
 80177f8:	bf04      	itt	eq
 80177fa:	681a      	ldreq	r2, [r3, #0]
 80177fc:	685b      	ldreq	r3, [r3, #4]
 80177fe:	6063      	str	r3, [r4, #4]
 8017800:	bf04      	itt	eq
 8017802:	1852      	addeq	r2, r2, r1
 8017804:	6022      	streq	r2, [r4, #0]
 8017806:	602c      	str	r4, [r5, #0]
 8017808:	e7ec      	b.n	80177e4 <_free_r+0x28>
 801780a:	461a      	mov	r2, r3
 801780c:	685b      	ldr	r3, [r3, #4]
 801780e:	b10b      	cbz	r3, 8017814 <_free_r+0x58>
 8017810:	42a3      	cmp	r3, r4
 8017812:	d9fa      	bls.n	801780a <_free_r+0x4e>
 8017814:	6811      	ldr	r1, [r2, #0]
 8017816:	1855      	adds	r5, r2, r1
 8017818:	42a5      	cmp	r5, r4
 801781a:	d10b      	bne.n	8017834 <_free_r+0x78>
 801781c:	6824      	ldr	r4, [r4, #0]
 801781e:	4421      	add	r1, r4
 8017820:	1854      	adds	r4, r2, r1
 8017822:	42a3      	cmp	r3, r4
 8017824:	6011      	str	r1, [r2, #0]
 8017826:	d1dd      	bne.n	80177e4 <_free_r+0x28>
 8017828:	681c      	ldr	r4, [r3, #0]
 801782a:	685b      	ldr	r3, [r3, #4]
 801782c:	6053      	str	r3, [r2, #4]
 801782e:	4421      	add	r1, r4
 8017830:	6011      	str	r1, [r2, #0]
 8017832:	e7d7      	b.n	80177e4 <_free_r+0x28>
 8017834:	d902      	bls.n	801783c <_free_r+0x80>
 8017836:	230c      	movs	r3, #12
 8017838:	6003      	str	r3, [r0, #0]
 801783a:	e7d3      	b.n	80177e4 <_free_r+0x28>
 801783c:	6825      	ldr	r5, [r4, #0]
 801783e:	1961      	adds	r1, r4, r5
 8017840:	428b      	cmp	r3, r1
 8017842:	bf04      	itt	eq
 8017844:	6819      	ldreq	r1, [r3, #0]
 8017846:	685b      	ldreq	r3, [r3, #4]
 8017848:	6063      	str	r3, [r4, #4]
 801784a:	bf04      	itt	eq
 801784c:	1949      	addeq	r1, r1, r5
 801784e:	6021      	streq	r1, [r4, #0]
 8017850:	6054      	str	r4, [r2, #4]
 8017852:	e7c7      	b.n	80177e4 <_free_r+0x28>
 8017854:	b003      	add	sp, #12
 8017856:	bd30      	pop	{r4, r5, pc}
 8017858:	24004b84 	.word	0x24004b84

0801785c <__ssputs_r>:
 801785c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017860:	688e      	ldr	r6, [r1, #8]
 8017862:	429e      	cmp	r6, r3
 8017864:	4682      	mov	sl, r0
 8017866:	460c      	mov	r4, r1
 8017868:	4690      	mov	r8, r2
 801786a:	461f      	mov	r7, r3
 801786c:	d838      	bhi.n	80178e0 <__ssputs_r+0x84>
 801786e:	898a      	ldrh	r2, [r1, #12]
 8017870:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017874:	d032      	beq.n	80178dc <__ssputs_r+0x80>
 8017876:	6825      	ldr	r5, [r4, #0]
 8017878:	6909      	ldr	r1, [r1, #16]
 801787a:	eba5 0901 	sub.w	r9, r5, r1
 801787e:	6965      	ldr	r5, [r4, #20]
 8017880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017888:	3301      	adds	r3, #1
 801788a:	444b      	add	r3, r9
 801788c:	106d      	asrs	r5, r5, #1
 801788e:	429d      	cmp	r5, r3
 8017890:	bf38      	it	cc
 8017892:	461d      	movcc	r5, r3
 8017894:	0553      	lsls	r3, r2, #21
 8017896:	d531      	bpl.n	80178fc <__ssputs_r+0xa0>
 8017898:	4629      	mov	r1, r5
 801789a:	f7fd fe35 	bl	8015508 <_malloc_r>
 801789e:	4606      	mov	r6, r0
 80178a0:	b950      	cbnz	r0, 80178b8 <__ssputs_r+0x5c>
 80178a2:	230c      	movs	r3, #12
 80178a4:	f8ca 3000 	str.w	r3, [sl]
 80178a8:	89a3      	ldrh	r3, [r4, #12]
 80178aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178ae:	81a3      	strh	r3, [r4, #12]
 80178b0:	f04f 30ff 	mov.w	r0, #4294967295
 80178b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178b8:	6921      	ldr	r1, [r4, #16]
 80178ba:	464a      	mov	r2, r9
 80178bc:	f7fd fe0d 	bl	80154da <memcpy>
 80178c0:	89a3      	ldrh	r3, [r4, #12]
 80178c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80178c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178ca:	81a3      	strh	r3, [r4, #12]
 80178cc:	6126      	str	r6, [r4, #16]
 80178ce:	6165      	str	r5, [r4, #20]
 80178d0:	444e      	add	r6, r9
 80178d2:	eba5 0509 	sub.w	r5, r5, r9
 80178d6:	6026      	str	r6, [r4, #0]
 80178d8:	60a5      	str	r5, [r4, #8]
 80178da:	463e      	mov	r6, r7
 80178dc:	42be      	cmp	r6, r7
 80178de:	d900      	bls.n	80178e2 <__ssputs_r+0x86>
 80178e0:	463e      	mov	r6, r7
 80178e2:	4632      	mov	r2, r6
 80178e4:	6820      	ldr	r0, [r4, #0]
 80178e6:	4641      	mov	r1, r8
 80178e8:	f000 fbbe 	bl	8018068 <memmove>
 80178ec:	68a3      	ldr	r3, [r4, #8]
 80178ee:	6822      	ldr	r2, [r4, #0]
 80178f0:	1b9b      	subs	r3, r3, r6
 80178f2:	4432      	add	r2, r6
 80178f4:	60a3      	str	r3, [r4, #8]
 80178f6:	6022      	str	r2, [r4, #0]
 80178f8:	2000      	movs	r0, #0
 80178fa:	e7db      	b.n	80178b4 <__ssputs_r+0x58>
 80178fc:	462a      	mov	r2, r5
 80178fe:	f000 fbcd 	bl	801809c <_realloc_r>
 8017902:	4606      	mov	r6, r0
 8017904:	2800      	cmp	r0, #0
 8017906:	d1e1      	bne.n	80178cc <__ssputs_r+0x70>
 8017908:	6921      	ldr	r1, [r4, #16]
 801790a:	4650      	mov	r0, sl
 801790c:	f7ff ff56 	bl	80177bc <_free_r>
 8017910:	e7c7      	b.n	80178a2 <__ssputs_r+0x46>
	...

08017914 <_svfiprintf_r>:
 8017914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017918:	4698      	mov	r8, r3
 801791a:	898b      	ldrh	r3, [r1, #12]
 801791c:	061b      	lsls	r3, r3, #24
 801791e:	b09d      	sub	sp, #116	; 0x74
 8017920:	4607      	mov	r7, r0
 8017922:	460d      	mov	r5, r1
 8017924:	4614      	mov	r4, r2
 8017926:	d50e      	bpl.n	8017946 <_svfiprintf_r+0x32>
 8017928:	690b      	ldr	r3, [r1, #16]
 801792a:	b963      	cbnz	r3, 8017946 <_svfiprintf_r+0x32>
 801792c:	2140      	movs	r1, #64	; 0x40
 801792e:	f7fd fdeb 	bl	8015508 <_malloc_r>
 8017932:	6028      	str	r0, [r5, #0]
 8017934:	6128      	str	r0, [r5, #16]
 8017936:	b920      	cbnz	r0, 8017942 <_svfiprintf_r+0x2e>
 8017938:	230c      	movs	r3, #12
 801793a:	603b      	str	r3, [r7, #0]
 801793c:	f04f 30ff 	mov.w	r0, #4294967295
 8017940:	e0d1      	b.n	8017ae6 <_svfiprintf_r+0x1d2>
 8017942:	2340      	movs	r3, #64	; 0x40
 8017944:	616b      	str	r3, [r5, #20]
 8017946:	2300      	movs	r3, #0
 8017948:	9309      	str	r3, [sp, #36]	; 0x24
 801794a:	2320      	movs	r3, #32
 801794c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017950:	f8cd 800c 	str.w	r8, [sp, #12]
 8017954:	2330      	movs	r3, #48	; 0x30
 8017956:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017b00 <_svfiprintf_r+0x1ec>
 801795a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801795e:	f04f 0901 	mov.w	r9, #1
 8017962:	4623      	mov	r3, r4
 8017964:	469a      	mov	sl, r3
 8017966:	f813 2b01 	ldrb.w	r2, [r3], #1
 801796a:	b10a      	cbz	r2, 8017970 <_svfiprintf_r+0x5c>
 801796c:	2a25      	cmp	r2, #37	; 0x25
 801796e:	d1f9      	bne.n	8017964 <_svfiprintf_r+0x50>
 8017970:	ebba 0b04 	subs.w	fp, sl, r4
 8017974:	d00b      	beq.n	801798e <_svfiprintf_r+0x7a>
 8017976:	465b      	mov	r3, fp
 8017978:	4622      	mov	r2, r4
 801797a:	4629      	mov	r1, r5
 801797c:	4638      	mov	r0, r7
 801797e:	f7ff ff6d 	bl	801785c <__ssputs_r>
 8017982:	3001      	adds	r0, #1
 8017984:	f000 80aa 	beq.w	8017adc <_svfiprintf_r+0x1c8>
 8017988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801798a:	445a      	add	r2, fp
 801798c:	9209      	str	r2, [sp, #36]	; 0x24
 801798e:	f89a 3000 	ldrb.w	r3, [sl]
 8017992:	2b00      	cmp	r3, #0
 8017994:	f000 80a2 	beq.w	8017adc <_svfiprintf_r+0x1c8>
 8017998:	2300      	movs	r3, #0
 801799a:	f04f 32ff 	mov.w	r2, #4294967295
 801799e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80179a2:	f10a 0a01 	add.w	sl, sl, #1
 80179a6:	9304      	str	r3, [sp, #16]
 80179a8:	9307      	str	r3, [sp, #28]
 80179aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80179ae:	931a      	str	r3, [sp, #104]	; 0x68
 80179b0:	4654      	mov	r4, sl
 80179b2:	2205      	movs	r2, #5
 80179b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179b8:	4851      	ldr	r0, [pc, #324]	; (8017b00 <_svfiprintf_r+0x1ec>)
 80179ba:	f7e8 fc99 	bl	80002f0 <memchr>
 80179be:	9a04      	ldr	r2, [sp, #16]
 80179c0:	b9d8      	cbnz	r0, 80179fa <_svfiprintf_r+0xe6>
 80179c2:	06d0      	lsls	r0, r2, #27
 80179c4:	bf44      	itt	mi
 80179c6:	2320      	movmi	r3, #32
 80179c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179cc:	0711      	lsls	r1, r2, #28
 80179ce:	bf44      	itt	mi
 80179d0:	232b      	movmi	r3, #43	; 0x2b
 80179d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179d6:	f89a 3000 	ldrb.w	r3, [sl]
 80179da:	2b2a      	cmp	r3, #42	; 0x2a
 80179dc:	d015      	beq.n	8017a0a <_svfiprintf_r+0xf6>
 80179de:	9a07      	ldr	r2, [sp, #28]
 80179e0:	4654      	mov	r4, sl
 80179e2:	2000      	movs	r0, #0
 80179e4:	f04f 0c0a 	mov.w	ip, #10
 80179e8:	4621      	mov	r1, r4
 80179ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179ee:	3b30      	subs	r3, #48	; 0x30
 80179f0:	2b09      	cmp	r3, #9
 80179f2:	d94e      	bls.n	8017a92 <_svfiprintf_r+0x17e>
 80179f4:	b1b0      	cbz	r0, 8017a24 <_svfiprintf_r+0x110>
 80179f6:	9207      	str	r2, [sp, #28]
 80179f8:	e014      	b.n	8017a24 <_svfiprintf_r+0x110>
 80179fa:	eba0 0308 	sub.w	r3, r0, r8
 80179fe:	fa09 f303 	lsl.w	r3, r9, r3
 8017a02:	4313      	orrs	r3, r2
 8017a04:	9304      	str	r3, [sp, #16]
 8017a06:	46a2      	mov	sl, r4
 8017a08:	e7d2      	b.n	80179b0 <_svfiprintf_r+0x9c>
 8017a0a:	9b03      	ldr	r3, [sp, #12]
 8017a0c:	1d19      	adds	r1, r3, #4
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	9103      	str	r1, [sp, #12]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	bfbb      	ittet	lt
 8017a16:	425b      	neglt	r3, r3
 8017a18:	f042 0202 	orrlt.w	r2, r2, #2
 8017a1c:	9307      	strge	r3, [sp, #28]
 8017a1e:	9307      	strlt	r3, [sp, #28]
 8017a20:	bfb8      	it	lt
 8017a22:	9204      	strlt	r2, [sp, #16]
 8017a24:	7823      	ldrb	r3, [r4, #0]
 8017a26:	2b2e      	cmp	r3, #46	; 0x2e
 8017a28:	d10c      	bne.n	8017a44 <_svfiprintf_r+0x130>
 8017a2a:	7863      	ldrb	r3, [r4, #1]
 8017a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8017a2e:	d135      	bne.n	8017a9c <_svfiprintf_r+0x188>
 8017a30:	9b03      	ldr	r3, [sp, #12]
 8017a32:	1d1a      	adds	r2, r3, #4
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	9203      	str	r2, [sp, #12]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	bfb8      	it	lt
 8017a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a40:	3402      	adds	r4, #2
 8017a42:	9305      	str	r3, [sp, #20]
 8017a44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017b10 <_svfiprintf_r+0x1fc>
 8017a48:	7821      	ldrb	r1, [r4, #0]
 8017a4a:	2203      	movs	r2, #3
 8017a4c:	4650      	mov	r0, sl
 8017a4e:	f7e8 fc4f 	bl	80002f0 <memchr>
 8017a52:	b140      	cbz	r0, 8017a66 <_svfiprintf_r+0x152>
 8017a54:	2340      	movs	r3, #64	; 0x40
 8017a56:	eba0 000a 	sub.w	r0, r0, sl
 8017a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8017a5e:	9b04      	ldr	r3, [sp, #16]
 8017a60:	4303      	orrs	r3, r0
 8017a62:	3401      	adds	r4, #1
 8017a64:	9304      	str	r3, [sp, #16]
 8017a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a6a:	4826      	ldr	r0, [pc, #152]	; (8017b04 <_svfiprintf_r+0x1f0>)
 8017a6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a70:	2206      	movs	r2, #6
 8017a72:	f7e8 fc3d 	bl	80002f0 <memchr>
 8017a76:	2800      	cmp	r0, #0
 8017a78:	d038      	beq.n	8017aec <_svfiprintf_r+0x1d8>
 8017a7a:	4b23      	ldr	r3, [pc, #140]	; (8017b08 <_svfiprintf_r+0x1f4>)
 8017a7c:	bb1b      	cbnz	r3, 8017ac6 <_svfiprintf_r+0x1b2>
 8017a7e:	9b03      	ldr	r3, [sp, #12]
 8017a80:	3307      	adds	r3, #7
 8017a82:	f023 0307 	bic.w	r3, r3, #7
 8017a86:	3308      	adds	r3, #8
 8017a88:	9303      	str	r3, [sp, #12]
 8017a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a8c:	4433      	add	r3, r6
 8017a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8017a90:	e767      	b.n	8017962 <_svfiprintf_r+0x4e>
 8017a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a96:	460c      	mov	r4, r1
 8017a98:	2001      	movs	r0, #1
 8017a9a:	e7a5      	b.n	80179e8 <_svfiprintf_r+0xd4>
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	3401      	adds	r4, #1
 8017aa0:	9305      	str	r3, [sp, #20]
 8017aa2:	4619      	mov	r1, r3
 8017aa4:	f04f 0c0a 	mov.w	ip, #10
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017aae:	3a30      	subs	r2, #48	; 0x30
 8017ab0:	2a09      	cmp	r2, #9
 8017ab2:	d903      	bls.n	8017abc <_svfiprintf_r+0x1a8>
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d0c5      	beq.n	8017a44 <_svfiprintf_r+0x130>
 8017ab8:	9105      	str	r1, [sp, #20]
 8017aba:	e7c3      	b.n	8017a44 <_svfiprintf_r+0x130>
 8017abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ac0:	4604      	mov	r4, r0
 8017ac2:	2301      	movs	r3, #1
 8017ac4:	e7f0      	b.n	8017aa8 <_svfiprintf_r+0x194>
 8017ac6:	ab03      	add	r3, sp, #12
 8017ac8:	9300      	str	r3, [sp, #0]
 8017aca:	462a      	mov	r2, r5
 8017acc:	4b0f      	ldr	r3, [pc, #60]	; (8017b0c <_svfiprintf_r+0x1f8>)
 8017ace:	a904      	add	r1, sp, #16
 8017ad0:	4638      	mov	r0, r7
 8017ad2:	f7fd fe05 	bl	80156e0 <_printf_float>
 8017ad6:	1c42      	adds	r2, r0, #1
 8017ad8:	4606      	mov	r6, r0
 8017ada:	d1d6      	bne.n	8017a8a <_svfiprintf_r+0x176>
 8017adc:	89ab      	ldrh	r3, [r5, #12]
 8017ade:	065b      	lsls	r3, r3, #25
 8017ae0:	f53f af2c 	bmi.w	801793c <_svfiprintf_r+0x28>
 8017ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017ae6:	b01d      	add	sp, #116	; 0x74
 8017ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aec:	ab03      	add	r3, sp, #12
 8017aee:	9300      	str	r3, [sp, #0]
 8017af0:	462a      	mov	r2, r5
 8017af2:	4b06      	ldr	r3, [pc, #24]	; (8017b0c <_svfiprintf_r+0x1f8>)
 8017af4:	a904      	add	r1, sp, #16
 8017af6:	4638      	mov	r0, r7
 8017af8:	f7fe f87e 	bl	8015bf8 <_printf_i>
 8017afc:	e7eb      	b.n	8017ad6 <_svfiprintf_r+0x1c2>
 8017afe:	bf00      	nop
 8017b00:	08023aec 	.word	0x08023aec
 8017b04:	08023af6 	.word	0x08023af6
 8017b08:	080156e1 	.word	0x080156e1
 8017b0c:	0801785d 	.word	0x0801785d
 8017b10:	08023af2 	.word	0x08023af2

08017b14 <__sfputc_r>:
 8017b14:	6893      	ldr	r3, [r2, #8]
 8017b16:	3b01      	subs	r3, #1
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	b410      	push	{r4}
 8017b1c:	6093      	str	r3, [r2, #8]
 8017b1e:	da08      	bge.n	8017b32 <__sfputc_r+0x1e>
 8017b20:	6994      	ldr	r4, [r2, #24]
 8017b22:	42a3      	cmp	r3, r4
 8017b24:	db01      	blt.n	8017b2a <__sfputc_r+0x16>
 8017b26:	290a      	cmp	r1, #10
 8017b28:	d103      	bne.n	8017b32 <__sfputc_r+0x1e>
 8017b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b2e:	f000 b95d 	b.w	8017dec <__swbuf_r>
 8017b32:	6813      	ldr	r3, [r2, #0]
 8017b34:	1c58      	adds	r0, r3, #1
 8017b36:	6010      	str	r0, [r2, #0]
 8017b38:	7019      	strb	r1, [r3, #0]
 8017b3a:	4608      	mov	r0, r1
 8017b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b40:	4770      	bx	lr

08017b42 <__sfputs_r>:
 8017b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b44:	4606      	mov	r6, r0
 8017b46:	460f      	mov	r7, r1
 8017b48:	4614      	mov	r4, r2
 8017b4a:	18d5      	adds	r5, r2, r3
 8017b4c:	42ac      	cmp	r4, r5
 8017b4e:	d101      	bne.n	8017b54 <__sfputs_r+0x12>
 8017b50:	2000      	movs	r0, #0
 8017b52:	e007      	b.n	8017b64 <__sfputs_r+0x22>
 8017b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b58:	463a      	mov	r2, r7
 8017b5a:	4630      	mov	r0, r6
 8017b5c:	f7ff ffda 	bl	8017b14 <__sfputc_r>
 8017b60:	1c43      	adds	r3, r0, #1
 8017b62:	d1f3      	bne.n	8017b4c <__sfputs_r+0xa>
 8017b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017b68 <_vfiprintf_r>:
 8017b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b6c:	460d      	mov	r5, r1
 8017b6e:	b09d      	sub	sp, #116	; 0x74
 8017b70:	4614      	mov	r4, r2
 8017b72:	4698      	mov	r8, r3
 8017b74:	4606      	mov	r6, r0
 8017b76:	b118      	cbz	r0, 8017b80 <_vfiprintf_r+0x18>
 8017b78:	6983      	ldr	r3, [r0, #24]
 8017b7a:	b90b      	cbnz	r3, 8017b80 <_vfiprintf_r+0x18>
 8017b7c:	f7fd fbe8 	bl	8015350 <__sinit>
 8017b80:	4b89      	ldr	r3, [pc, #548]	; (8017da8 <_vfiprintf_r+0x240>)
 8017b82:	429d      	cmp	r5, r3
 8017b84:	d11b      	bne.n	8017bbe <_vfiprintf_r+0x56>
 8017b86:	6875      	ldr	r5, [r6, #4]
 8017b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b8a:	07d9      	lsls	r1, r3, #31
 8017b8c:	d405      	bmi.n	8017b9a <_vfiprintf_r+0x32>
 8017b8e:	89ab      	ldrh	r3, [r5, #12]
 8017b90:	059a      	lsls	r2, r3, #22
 8017b92:	d402      	bmi.n	8017b9a <_vfiprintf_r+0x32>
 8017b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b96:	f7fd fc9e 	bl	80154d6 <__retarget_lock_acquire_recursive>
 8017b9a:	89ab      	ldrh	r3, [r5, #12]
 8017b9c:	071b      	lsls	r3, r3, #28
 8017b9e:	d501      	bpl.n	8017ba4 <_vfiprintf_r+0x3c>
 8017ba0:	692b      	ldr	r3, [r5, #16]
 8017ba2:	b9eb      	cbnz	r3, 8017be0 <_vfiprintf_r+0x78>
 8017ba4:	4629      	mov	r1, r5
 8017ba6:	4630      	mov	r0, r6
 8017ba8:	f000 f972 	bl	8017e90 <__swsetup_r>
 8017bac:	b1c0      	cbz	r0, 8017be0 <_vfiprintf_r+0x78>
 8017bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017bb0:	07dc      	lsls	r4, r3, #31
 8017bb2:	d50e      	bpl.n	8017bd2 <_vfiprintf_r+0x6a>
 8017bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8017bb8:	b01d      	add	sp, #116	; 0x74
 8017bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bbe:	4b7b      	ldr	r3, [pc, #492]	; (8017dac <_vfiprintf_r+0x244>)
 8017bc0:	429d      	cmp	r5, r3
 8017bc2:	d101      	bne.n	8017bc8 <_vfiprintf_r+0x60>
 8017bc4:	68b5      	ldr	r5, [r6, #8]
 8017bc6:	e7df      	b.n	8017b88 <_vfiprintf_r+0x20>
 8017bc8:	4b79      	ldr	r3, [pc, #484]	; (8017db0 <_vfiprintf_r+0x248>)
 8017bca:	429d      	cmp	r5, r3
 8017bcc:	bf08      	it	eq
 8017bce:	68f5      	ldreq	r5, [r6, #12]
 8017bd0:	e7da      	b.n	8017b88 <_vfiprintf_r+0x20>
 8017bd2:	89ab      	ldrh	r3, [r5, #12]
 8017bd4:	0598      	lsls	r0, r3, #22
 8017bd6:	d4ed      	bmi.n	8017bb4 <_vfiprintf_r+0x4c>
 8017bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017bda:	f7fd fc7d 	bl	80154d8 <__retarget_lock_release_recursive>
 8017bde:	e7e9      	b.n	8017bb4 <_vfiprintf_r+0x4c>
 8017be0:	2300      	movs	r3, #0
 8017be2:	9309      	str	r3, [sp, #36]	; 0x24
 8017be4:	2320      	movs	r3, #32
 8017be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8017bee:	2330      	movs	r3, #48	; 0x30
 8017bf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017db4 <_vfiprintf_r+0x24c>
 8017bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017bf8:	f04f 0901 	mov.w	r9, #1
 8017bfc:	4623      	mov	r3, r4
 8017bfe:	469a      	mov	sl, r3
 8017c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c04:	b10a      	cbz	r2, 8017c0a <_vfiprintf_r+0xa2>
 8017c06:	2a25      	cmp	r2, #37	; 0x25
 8017c08:	d1f9      	bne.n	8017bfe <_vfiprintf_r+0x96>
 8017c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8017c0e:	d00b      	beq.n	8017c28 <_vfiprintf_r+0xc0>
 8017c10:	465b      	mov	r3, fp
 8017c12:	4622      	mov	r2, r4
 8017c14:	4629      	mov	r1, r5
 8017c16:	4630      	mov	r0, r6
 8017c18:	f7ff ff93 	bl	8017b42 <__sfputs_r>
 8017c1c:	3001      	adds	r0, #1
 8017c1e:	f000 80aa 	beq.w	8017d76 <_vfiprintf_r+0x20e>
 8017c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c24:	445a      	add	r2, fp
 8017c26:	9209      	str	r2, [sp, #36]	; 0x24
 8017c28:	f89a 3000 	ldrb.w	r3, [sl]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	f000 80a2 	beq.w	8017d76 <_vfiprintf_r+0x20e>
 8017c32:	2300      	movs	r3, #0
 8017c34:	f04f 32ff 	mov.w	r2, #4294967295
 8017c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c3c:	f10a 0a01 	add.w	sl, sl, #1
 8017c40:	9304      	str	r3, [sp, #16]
 8017c42:	9307      	str	r3, [sp, #28]
 8017c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c48:	931a      	str	r3, [sp, #104]	; 0x68
 8017c4a:	4654      	mov	r4, sl
 8017c4c:	2205      	movs	r2, #5
 8017c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c52:	4858      	ldr	r0, [pc, #352]	; (8017db4 <_vfiprintf_r+0x24c>)
 8017c54:	f7e8 fb4c 	bl	80002f0 <memchr>
 8017c58:	9a04      	ldr	r2, [sp, #16]
 8017c5a:	b9d8      	cbnz	r0, 8017c94 <_vfiprintf_r+0x12c>
 8017c5c:	06d1      	lsls	r1, r2, #27
 8017c5e:	bf44      	itt	mi
 8017c60:	2320      	movmi	r3, #32
 8017c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c66:	0713      	lsls	r3, r2, #28
 8017c68:	bf44      	itt	mi
 8017c6a:	232b      	movmi	r3, #43	; 0x2b
 8017c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c70:	f89a 3000 	ldrb.w	r3, [sl]
 8017c74:	2b2a      	cmp	r3, #42	; 0x2a
 8017c76:	d015      	beq.n	8017ca4 <_vfiprintf_r+0x13c>
 8017c78:	9a07      	ldr	r2, [sp, #28]
 8017c7a:	4654      	mov	r4, sl
 8017c7c:	2000      	movs	r0, #0
 8017c7e:	f04f 0c0a 	mov.w	ip, #10
 8017c82:	4621      	mov	r1, r4
 8017c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c88:	3b30      	subs	r3, #48	; 0x30
 8017c8a:	2b09      	cmp	r3, #9
 8017c8c:	d94e      	bls.n	8017d2c <_vfiprintf_r+0x1c4>
 8017c8e:	b1b0      	cbz	r0, 8017cbe <_vfiprintf_r+0x156>
 8017c90:	9207      	str	r2, [sp, #28]
 8017c92:	e014      	b.n	8017cbe <_vfiprintf_r+0x156>
 8017c94:	eba0 0308 	sub.w	r3, r0, r8
 8017c98:	fa09 f303 	lsl.w	r3, r9, r3
 8017c9c:	4313      	orrs	r3, r2
 8017c9e:	9304      	str	r3, [sp, #16]
 8017ca0:	46a2      	mov	sl, r4
 8017ca2:	e7d2      	b.n	8017c4a <_vfiprintf_r+0xe2>
 8017ca4:	9b03      	ldr	r3, [sp, #12]
 8017ca6:	1d19      	adds	r1, r3, #4
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	9103      	str	r1, [sp, #12]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	bfbb      	ittet	lt
 8017cb0:	425b      	neglt	r3, r3
 8017cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8017cb6:	9307      	strge	r3, [sp, #28]
 8017cb8:	9307      	strlt	r3, [sp, #28]
 8017cba:	bfb8      	it	lt
 8017cbc:	9204      	strlt	r2, [sp, #16]
 8017cbe:	7823      	ldrb	r3, [r4, #0]
 8017cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8017cc2:	d10c      	bne.n	8017cde <_vfiprintf_r+0x176>
 8017cc4:	7863      	ldrb	r3, [r4, #1]
 8017cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8017cc8:	d135      	bne.n	8017d36 <_vfiprintf_r+0x1ce>
 8017cca:	9b03      	ldr	r3, [sp, #12]
 8017ccc:	1d1a      	adds	r2, r3, #4
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	9203      	str	r2, [sp, #12]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	bfb8      	it	lt
 8017cd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8017cda:	3402      	adds	r4, #2
 8017cdc:	9305      	str	r3, [sp, #20]
 8017cde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017dc4 <_vfiprintf_r+0x25c>
 8017ce2:	7821      	ldrb	r1, [r4, #0]
 8017ce4:	2203      	movs	r2, #3
 8017ce6:	4650      	mov	r0, sl
 8017ce8:	f7e8 fb02 	bl	80002f0 <memchr>
 8017cec:	b140      	cbz	r0, 8017d00 <_vfiprintf_r+0x198>
 8017cee:	2340      	movs	r3, #64	; 0x40
 8017cf0:	eba0 000a 	sub.w	r0, r0, sl
 8017cf4:	fa03 f000 	lsl.w	r0, r3, r0
 8017cf8:	9b04      	ldr	r3, [sp, #16]
 8017cfa:	4303      	orrs	r3, r0
 8017cfc:	3401      	adds	r4, #1
 8017cfe:	9304      	str	r3, [sp, #16]
 8017d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d04:	482c      	ldr	r0, [pc, #176]	; (8017db8 <_vfiprintf_r+0x250>)
 8017d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d0a:	2206      	movs	r2, #6
 8017d0c:	f7e8 faf0 	bl	80002f0 <memchr>
 8017d10:	2800      	cmp	r0, #0
 8017d12:	d03f      	beq.n	8017d94 <_vfiprintf_r+0x22c>
 8017d14:	4b29      	ldr	r3, [pc, #164]	; (8017dbc <_vfiprintf_r+0x254>)
 8017d16:	bb1b      	cbnz	r3, 8017d60 <_vfiprintf_r+0x1f8>
 8017d18:	9b03      	ldr	r3, [sp, #12]
 8017d1a:	3307      	adds	r3, #7
 8017d1c:	f023 0307 	bic.w	r3, r3, #7
 8017d20:	3308      	adds	r3, #8
 8017d22:	9303      	str	r3, [sp, #12]
 8017d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d26:	443b      	add	r3, r7
 8017d28:	9309      	str	r3, [sp, #36]	; 0x24
 8017d2a:	e767      	b.n	8017bfc <_vfiprintf_r+0x94>
 8017d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d30:	460c      	mov	r4, r1
 8017d32:	2001      	movs	r0, #1
 8017d34:	e7a5      	b.n	8017c82 <_vfiprintf_r+0x11a>
 8017d36:	2300      	movs	r3, #0
 8017d38:	3401      	adds	r4, #1
 8017d3a:	9305      	str	r3, [sp, #20]
 8017d3c:	4619      	mov	r1, r3
 8017d3e:	f04f 0c0a 	mov.w	ip, #10
 8017d42:	4620      	mov	r0, r4
 8017d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d48:	3a30      	subs	r2, #48	; 0x30
 8017d4a:	2a09      	cmp	r2, #9
 8017d4c:	d903      	bls.n	8017d56 <_vfiprintf_r+0x1ee>
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d0c5      	beq.n	8017cde <_vfiprintf_r+0x176>
 8017d52:	9105      	str	r1, [sp, #20]
 8017d54:	e7c3      	b.n	8017cde <_vfiprintf_r+0x176>
 8017d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d5a:	4604      	mov	r4, r0
 8017d5c:	2301      	movs	r3, #1
 8017d5e:	e7f0      	b.n	8017d42 <_vfiprintf_r+0x1da>
 8017d60:	ab03      	add	r3, sp, #12
 8017d62:	9300      	str	r3, [sp, #0]
 8017d64:	462a      	mov	r2, r5
 8017d66:	4b16      	ldr	r3, [pc, #88]	; (8017dc0 <_vfiprintf_r+0x258>)
 8017d68:	a904      	add	r1, sp, #16
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	f7fd fcb8 	bl	80156e0 <_printf_float>
 8017d70:	4607      	mov	r7, r0
 8017d72:	1c78      	adds	r0, r7, #1
 8017d74:	d1d6      	bne.n	8017d24 <_vfiprintf_r+0x1bc>
 8017d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d78:	07d9      	lsls	r1, r3, #31
 8017d7a:	d405      	bmi.n	8017d88 <_vfiprintf_r+0x220>
 8017d7c:	89ab      	ldrh	r3, [r5, #12]
 8017d7e:	059a      	lsls	r2, r3, #22
 8017d80:	d402      	bmi.n	8017d88 <_vfiprintf_r+0x220>
 8017d82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d84:	f7fd fba8 	bl	80154d8 <__retarget_lock_release_recursive>
 8017d88:	89ab      	ldrh	r3, [r5, #12]
 8017d8a:	065b      	lsls	r3, r3, #25
 8017d8c:	f53f af12 	bmi.w	8017bb4 <_vfiprintf_r+0x4c>
 8017d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d92:	e711      	b.n	8017bb8 <_vfiprintf_r+0x50>
 8017d94:	ab03      	add	r3, sp, #12
 8017d96:	9300      	str	r3, [sp, #0]
 8017d98:	462a      	mov	r2, r5
 8017d9a:	4b09      	ldr	r3, [pc, #36]	; (8017dc0 <_vfiprintf_r+0x258>)
 8017d9c:	a904      	add	r1, sp, #16
 8017d9e:	4630      	mov	r0, r6
 8017da0:	f7fd ff2a 	bl	8015bf8 <_printf_i>
 8017da4:	e7e4      	b.n	8017d70 <_vfiprintf_r+0x208>
 8017da6:	bf00      	nop
 8017da8:	080236e0 	.word	0x080236e0
 8017dac:	08023700 	.word	0x08023700
 8017db0:	080236c0 	.word	0x080236c0
 8017db4:	08023aec 	.word	0x08023aec
 8017db8:	08023af6 	.word	0x08023af6
 8017dbc:	080156e1 	.word	0x080156e1
 8017dc0:	08017b43 	.word	0x08017b43
 8017dc4:	08023af2 	.word	0x08023af2

08017dc8 <_read_r>:
 8017dc8:	b538      	push	{r3, r4, r5, lr}
 8017dca:	4d07      	ldr	r5, [pc, #28]	; (8017de8 <_read_r+0x20>)
 8017dcc:	4604      	mov	r4, r0
 8017dce:	4608      	mov	r0, r1
 8017dd0:	4611      	mov	r1, r2
 8017dd2:	2200      	movs	r2, #0
 8017dd4:	602a      	str	r2, [r5, #0]
 8017dd6:	461a      	mov	r2, r3
 8017dd8:	f7ea fbcc 	bl	8002574 <_read>
 8017ddc:	1c43      	adds	r3, r0, #1
 8017dde:	d102      	bne.n	8017de6 <_read_r+0x1e>
 8017de0:	682b      	ldr	r3, [r5, #0]
 8017de2:	b103      	cbz	r3, 8017de6 <_read_r+0x1e>
 8017de4:	6023      	str	r3, [r4, #0]
 8017de6:	bd38      	pop	{r3, r4, r5, pc}
 8017de8:	24006acc 	.word	0x24006acc

08017dec <__swbuf_r>:
 8017dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dee:	460e      	mov	r6, r1
 8017df0:	4614      	mov	r4, r2
 8017df2:	4605      	mov	r5, r0
 8017df4:	b118      	cbz	r0, 8017dfe <__swbuf_r+0x12>
 8017df6:	6983      	ldr	r3, [r0, #24]
 8017df8:	b90b      	cbnz	r3, 8017dfe <__swbuf_r+0x12>
 8017dfa:	f7fd faa9 	bl	8015350 <__sinit>
 8017dfe:	4b21      	ldr	r3, [pc, #132]	; (8017e84 <__swbuf_r+0x98>)
 8017e00:	429c      	cmp	r4, r3
 8017e02:	d12b      	bne.n	8017e5c <__swbuf_r+0x70>
 8017e04:	686c      	ldr	r4, [r5, #4]
 8017e06:	69a3      	ldr	r3, [r4, #24]
 8017e08:	60a3      	str	r3, [r4, #8]
 8017e0a:	89a3      	ldrh	r3, [r4, #12]
 8017e0c:	071a      	lsls	r2, r3, #28
 8017e0e:	d52f      	bpl.n	8017e70 <__swbuf_r+0x84>
 8017e10:	6923      	ldr	r3, [r4, #16]
 8017e12:	b36b      	cbz	r3, 8017e70 <__swbuf_r+0x84>
 8017e14:	6923      	ldr	r3, [r4, #16]
 8017e16:	6820      	ldr	r0, [r4, #0]
 8017e18:	1ac0      	subs	r0, r0, r3
 8017e1a:	6963      	ldr	r3, [r4, #20]
 8017e1c:	b2f6      	uxtb	r6, r6
 8017e1e:	4283      	cmp	r3, r0
 8017e20:	4637      	mov	r7, r6
 8017e22:	dc04      	bgt.n	8017e2e <__swbuf_r+0x42>
 8017e24:	4621      	mov	r1, r4
 8017e26:	4628      	mov	r0, r5
 8017e28:	f7ff f8c2 	bl	8016fb0 <_fflush_r>
 8017e2c:	bb30      	cbnz	r0, 8017e7c <__swbuf_r+0x90>
 8017e2e:	68a3      	ldr	r3, [r4, #8]
 8017e30:	3b01      	subs	r3, #1
 8017e32:	60a3      	str	r3, [r4, #8]
 8017e34:	6823      	ldr	r3, [r4, #0]
 8017e36:	1c5a      	adds	r2, r3, #1
 8017e38:	6022      	str	r2, [r4, #0]
 8017e3a:	701e      	strb	r6, [r3, #0]
 8017e3c:	6963      	ldr	r3, [r4, #20]
 8017e3e:	3001      	adds	r0, #1
 8017e40:	4283      	cmp	r3, r0
 8017e42:	d004      	beq.n	8017e4e <__swbuf_r+0x62>
 8017e44:	89a3      	ldrh	r3, [r4, #12]
 8017e46:	07db      	lsls	r3, r3, #31
 8017e48:	d506      	bpl.n	8017e58 <__swbuf_r+0x6c>
 8017e4a:	2e0a      	cmp	r6, #10
 8017e4c:	d104      	bne.n	8017e58 <__swbuf_r+0x6c>
 8017e4e:	4621      	mov	r1, r4
 8017e50:	4628      	mov	r0, r5
 8017e52:	f7ff f8ad 	bl	8016fb0 <_fflush_r>
 8017e56:	b988      	cbnz	r0, 8017e7c <__swbuf_r+0x90>
 8017e58:	4638      	mov	r0, r7
 8017e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e5c:	4b0a      	ldr	r3, [pc, #40]	; (8017e88 <__swbuf_r+0x9c>)
 8017e5e:	429c      	cmp	r4, r3
 8017e60:	d101      	bne.n	8017e66 <__swbuf_r+0x7a>
 8017e62:	68ac      	ldr	r4, [r5, #8]
 8017e64:	e7cf      	b.n	8017e06 <__swbuf_r+0x1a>
 8017e66:	4b09      	ldr	r3, [pc, #36]	; (8017e8c <__swbuf_r+0xa0>)
 8017e68:	429c      	cmp	r4, r3
 8017e6a:	bf08      	it	eq
 8017e6c:	68ec      	ldreq	r4, [r5, #12]
 8017e6e:	e7ca      	b.n	8017e06 <__swbuf_r+0x1a>
 8017e70:	4621      	mov	r1, r4
 8017e72:	4628      	mov	r0, r5
 8017e74:	f000 f80c 	bl	8017e90 <__swsetup_r>
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	d0cb      	beq.n	8017e14 <__swbuf_r+0x28>
 8017e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8017e80:	e7ea      	b.n	8017e58 <__swbuf_r+0x6c>
 8017e82:	bf00      	nop
 8017e84:	080236e0 	.word	0x080236e0
 8017e88:	08023700 	.word	0x08023700
 8017e8c:	080236c0 	.word	0x080236c0

08017e90 <__swsetup_r>:
 8017e90:	4b32      	ldr	r3, [pc, #200]	; (8017f5c <__swsetup_r+0xcc>)
 8017e92:	b570      	push	{r4, r5, r6, lr}
 8017e94:	681d      	ldr	r5, [r3, #0]
 8017e96:	4606      	mov	r6, r0
 8017e98:	460c      	mov	r4, r1
 8017e9a:	b125      	cbz	r5, 8017ea6 <__swsetup_r+0x16>
 8017e9c:	69ab      	ldr	r3, [r5, #24]
 8017e9e:	b913      	cbnz	r3, 8017ea6 <__swsetup_r+0x16>
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	f7fd fa55 	bl	8015350 <__sinit>
 8017ea6:	4b2e      	ldr	r3, [pc, #184]	; (8017f60 <__swsetup_r+0xd0>)
 8017ea8:	429c      	cmp	r4, r3
 8017eaa:	d10f      	bne.n	8017ecc <__swsetup_r+0x3c>
 8017eac:	686c      	ldr	r4, [r5, #4]
 8017eae:	89a3      	ldrh	r3, [r4, #12]
 8017eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017eb4:	0719      	lsls	r1, r3, #28
 8017eb6:	d42c      	bmi.n	8017f12 <__swsetup_r+0x82>
 8017eb8:	06dd      	lsls	r5, r3, #27
 8017eba:	d411      	bmi.n	8017ee0 <__swsetup_r+0x50>
 8017ebc:	2309      	movs	r3, #9
 8017ebe:	6033      	str	r3, [r6, #0]
 8017ec0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017ec4:	81a3      	strh	r3, [r4, #12]
 8017ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8017eca:	e03e      	b.n	8017f4a <__swsetup_r+0xba>
 8017ecc:	4b25      	ldr	r3, [pc, #148]	; (8017f64 <__swsetup_r+0xd4>)
 8017ece:	429c      	cmp	r4, r3
 8017ed0:	d101      	bne.n	8017ed6 <__swsetup_r+0x46>
 8017ed2:	68ac      	ldr	r4, [r5, #8]
 8017ed4:	e7eb      	b.n	8017eae <__swsetup_r+0x1e>
 8017ed6:	4b24      	ldr	r3, [pc, #144]	; (8017f68 <__swsetup_r+0xd8>)
 8017ed8:	429c      	cmp	r4, r3
 8017eda:	bf08      	it	eq
 8017edc:	68ec      	ldreq	r4, [r5, #12]
 8017ede:	e7e6      	b.n	8017eae <__swsetup_r+0x1e>
 8017ee0:	0758      	lsls	r0, r3, #29
 8017ee2:	d512      	bpl.n	8017f0a <__swsetup_r+0x7a>
 8017ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ee6:	b141      	cbz	r1, 8017efa <__swsetup_r+0x6a>
 8017ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017eec:	4299      	cmp	r1, r3
 8017eee:	d002      	beq.n	8017ef6 <__swsetup_r+0x66>
 8017ef0:	4630      	mov	r0, r6
 8017ef2:	f7ff fc63 	bl	80177bc <_free_r>
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	6363      	str	r3, [r4, #52]	; 0x34
 8017efa:	89a3      	ldrh	r3, [r4, #12]
 8017efc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017f00:	81a3      	strh	r3, [r4, #12]
 8017f02:	2300      	movs	r3, #0
 8017f04:	6063      	str	r3, [r4, #4]
 8017f06:	6923      	ldr	r3, [r4, #16]
 8017f08:	6023      	str	r3, [r4, #0]
 8017f0a:	89a3      	ldrh	r3, [r4, #12]
 8017f0c:	f043 0308 	orr.w	r3, r3, #8
 8017f10:	81a3      	strh	r3, [r4, #12]
 8017f12:	6923      	ldr	r3, [r4, #16]
 8017f14:	b94b      	cbnz	r3, 8017f2a <__swsetup_r+0x9a>
 8017f16:	89a3      	ldrh	r3, [r4, #12]
 8017f18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017f20:	d003      	beq.n	8017f2a <__swsetup_r+0x9a>
 8017f22:	4621      	mov	r1, r4
 8017f24:	4630      	mov	r0, r6
 8017f26:	f000 f84d 	bl	8017fc4 <__smakebuf_r>
 8017f2a:	89a0      	ldrh	r0, [r4, #12]
 8017f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f30:	f010 0301 	ands.w	r3, r0, #1
 8017f34:	d00a      	beq.n	8017f4c <__swsetup_r+0xbc>
 8017f36:	2300      	movs	r3, #0
 8017f38:	60a3      	str	r3, [r4, #8]
 8017f3a:	6963      	ldr	r3, [r4, #20]
 8017f3c:	425b      	negs	r3, r3
 8017f3e:	61a3      	str	r3, [r4, #24]
 8017f40:	6923      	ldr	r3, [r4, #16]
 8017f42:	b943      	cbnz	r3, 8017f56 <__swsetup_r+0xc6>
 8017f44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017f48:	d1ba      	bne.n	8017ec0 <__swsetup_r+0x30>
 8017f4a:	bd70      	pop	{r4, r5, r6, pc}
 8017f4c:	0781      	lsls	r1, r0, #30
 8017f4e:	bf58      	it	pl
 8017f50:	6963      	ldrpl	r3, [r4, #20]
 8017f52:	60a3      	str	r3, [r4, #8]
 8017f54:	e7f4      	b.n	8017f40 <__swsetup_r+0xb0>
 8017f56:	2000      	movs	r0, #0
 8017f58:	e7f7      	b.n	8017f4a <__swsetup_r+0xba>
 8017f5a:	bf00      	nop
 8017f5c:	2400025c 	.word	0x2400025c
 8017f60:	080236e0 	.word	0x080236e0
 8017f64:	08023700 	.word	0x08023700
 8017f68:	080236c0 	.word	0x080236c0

08017f6c <abort>:
 8017f6c:	b508      	push	{r3, lr}
 8017f6e:	2006      	movs	r0, #6
 8017f70:	f000 f8e2 	bl	8018138 <raise>
 8017f74:	2001      	movs	r0, #1
 8017f76:	f7ea faf3 	bl	8002560 <_exit>

08017f7a <__swhatbuf_r>:
 8017f7a:	b570      	push	{r4, r5, r6, lr}
 8017f7c:	460e      	mov	r6, r1
 8017f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f82:	2900      	cmp	r1, #0
 8017f84:	b096      	sub	sp, #88	; 0x58
 8017f86:	4614      	mov	r4, r2
 8017f88:	461d      	mov	r5, r3
 8017f8a:	da07      	bge.n	8017f9c <__swhatbuf_r+0x22>
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	602b      	str	r3, [r5, #0]
 8017f90:	89b3      	ldrh	r3, [r6, #12]
 8017f92:	061a      	lsls	r2, r3, #24
 8017f94:	d410      	bmi.n	8017fb8 <__swhatbuf_r+0x3e>
 8017f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f9a:	e00e      	b.n	8017fba <__swhatbuf_r+0x40>
 8017f9c:	466a      	mov	r2, sp
 8017f9e:	f000 f8f5 	bl	801818c <_fstat_r>
 8017fa2:	2800      	cmp	r0, #0
 8017fa4:	dbf2      	blt.n	8017f8c <__swhatbuf_r+0x12>
 8017fa6:	9a01      	ldr	r2, [sp, #4]
 8017fa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017fac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017fb0:	425a      	negs	r2, r3
 8017fb2:	415a      	adcs	r2, r3
 8017fb4:	602a      	str	r2, [r5, #0]
 8017fb6:	e7ee      	b.n	8017f96 <__swhatbuf_r+0x1c>
 8017fb8:	2340      	movs	r3, #64	; 0x40
 8017fba:	2000      	movs	r0, #0
 8017fbc:	6023      	str	r3, [r4, #0]
 8017fbe:	b016      	add	sp, #88	; 0x58
 8017fc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08017fc4 <__smakebuf_r>:
 8017fc4:	898b      	ldrh	r3, [r1, #12]
 8017fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017fc8:	079d      	lsls	r5, r3, #30
 8017fca:	4606      	mov	r6, r0
 8017fcc:	460c      	mov	r4, r1
 8017fce:	d507      	bpl.n	8017fe0 <__smakebuf_r+0x1c>
 8017fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017fd4:	6023      	str	r3, [r4, #0]
 8017fd6:	6123      	str	r3, [r4, #16]
 8017fd8:	2301      	movs	r3, #1
 8017fda:	6163      	str	r3, [r4, #20]
 8017fdc:	b002      	add	sp, #8
 8017fde:	bd70      	pop	{r4, r5, r6, pc}
 8017fe0:	ab01      	add	r3, sp, #4
 8017fe2:	466a      	mov	r2, sp
 8017fe4:	f7ff ffc9 	bl	8017f7a <__swhatbuf_r>
 8017fe8:	9900      	ldr	r1, [sp, #0]
 8017fea:	4605      	mov	r5, r0
 8017fec:	4630      	mov	r0, r6
 8017fee:	f7fd fa8b 	bl	8015508 <_malloc_r>
 8017ff2:	b948      	cbnz	r0, 8018008 <__smakebuf_r+0x44>
 8017ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ff8:	059a      	lsls	r2, r3, #22
 8017ffa:	d4ef      	bmi.n	8017fdc <__smakebuf_r+0x18>
 8017ffc:	f023 0303 	bic.w	r3, r3, #3
 8018000:	f043 0302 	orr.w	r3, r3, #2
 8018004:	81a3      	strh	r3, [r4, #12]
 8018006:	e7e3      	b.n	8017fd0 <__smakebuf_r+0xc>
 8018008:	4b0d      	ldr	r3, [pc, #52]	; (8018040 <__smakebuf_r+0x7c>)
 801800a:	62b3      	str	r3, [r6, #40]	; 0x28
 801800c:	89a3      	ldrh	r3, [r4, #12]
 801800e:	6020      	str	r0, [r4, #0]
 8018010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018014:	81a3      	strh	r3, [r4, #12]
 8018016:	9b00      	ldr	r3, [sp, #0]
 8018018:	6163      	str	r3, [r4, #20]
 801801a:	9b01      	ldr	r3, [sp, #4]
 801801c:	6120      	str	r0, [r4, #16]
 801801e:	b15b      	cbz	r3, 8018038 <__smakebuf_r+0x74>
 8018020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018024:	4630      	mov	r0, r6
 8018026:	f000 f8c3 	bl	80181b0 <_isatty_r>
 801802a:	b128      	cbz	r0, 8018038 <__smakebuf_r+0x74>
 801802c:	89a3      	ldrh	r3, [r4, #12]
 801802e:	f023 0303 	bic.w	r3, r3, #3
 8018032:	f043 0301 	orr.w	r3, r3, #1
 8018036:	81a3      	strh	r3, [r4, #12]
 8018038:	89a0      	ldrh	r0, [r4, #12]
 801803a:	4305      	orrs	r5, r0
 801803c:	81a5      	strh	r5, [r4, #12]
 801803e:	e7cd      	b.n	8017fdc <__smakebuf_r+0x18>
 8018040:	080152e9 	.word	0x080152e9

08018044 <__ascii_mbtowc>:
 8018044:	b082      	sub	sp, #8
 8018046:	b901      	cbnz	r1, 801804a <__ascii_mbtowc+0x6>
 8018048:	a901      	add	r1, sp, #4
 801804a:	b142      	cbz	r2, 801805e <__ascii_mbtowc+0x1a>
 801804c:	b14b      	cbz	r3, 8018062 <__ascii_mbtowc+0x1e>
 801804e:	7813      	ldrb	r3, [r2, #0]
 8018050:	600b      	str	r3, [r1, #0]
 8018052:	7812      	ldrb	r2, [r2, #0]
 8018054:	1e10      	subs	r0, r2, #0
 8018056:	bf18      	it	ne
 8018058:	2001      	movne	r0, #1
 801805a:	b002      	add	sp, #8
 801805c:	4770      	bx	lr
 801805e:	4610      	mov	r0, r2
 8018060:	e7fb      	b.n	801805a <__ascii_mbtowc+0x16>
 8018062:	f06f 0001 	mvn.w	r0, #1
 8018066:	e7f8      	b.n	801805a <__ascii_mbtowc+0x16>

08018068 <memmove>:
 8018068:	4288      	cmp	r0, r1
 801806a:	b510      	push	{r4, lr}
 801806c:	eb01 0402 	add.w	r4, r1, r2
 8018070:	d902      	bls.n	8018078 <memmove+0x10>
 8018072:	4284      	cmp	r4, r0
 8018074:	4623      	mov	r3, r4
 8018076:	d807      	bhi.n	8018088 <memmove+0x20>
 8018078:	1e43      	subs	r3, r0, #1
 801807a:	42a1      	cmp	r1, r4
 801807c:	d008      	beq.n	8018090 <memmove+0x28>
 801807e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018086:	e7f8      	b.n	801807a <memmove+0x12>
 8018088:	4402      	add	r2, r0
 801808a:	4601      	mov	r1, r0
 801808c:	428a      	cmp	r2, r1
 801808e:	d100      	bne.n	8018092 <memmove+0x2a>
 8018090:	bd10      	pop	{r4, pc}
 8018092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801809a:	e7f7      	b.n	801808c <memmove+0x24>

0801809c <_realloc_r>:
 801809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801809e:	4607      	mov	r7, r0
 80180a0:	4614      	mov	r4, r2
 80180a2:	460e      	mov	r6, r1
 80180a4:	b921      	cbnz	r1, 80180b0 <_realloc_r+0x14>
 80180a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80180aa:	4611      	mov	r1, r2
 80180ac:	f7fd ba2c 	b.w	8015508 <_malloc_r>
 80180b0:	b922      	cbnz	r2, 80180bc <_realloc_r+0x20>
 80180b2:	f7ff fb83 	bl	80177bc <_free_r>
 80180b6:	4625      	mov	r5, r4
 80180b8:	4628      	mov	r0, r5
 80180ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180bc:	f000 f888 	bl	80181d0 <_malloc_usable_size_r>
 80180c0:	42a0      	cmp	r0, r4
 80180c2:	d20f      	bcs.n	80180e4 <_realloc_r+0x48>
 80180c4:	4621      	mov	r1, r4
 80180c6:	4638      	mov	r0, r7
 80180c8:	f7fd fa1e 	bl	8015508 <_malloc_r>
 80180cc:	4605      	mov	r5, r0
 80180ce:	2800      	cmp	r0, #0
 80180d0:	d0f2      	beq.n	80180b8 <_realloc_r+0x1c>
 80180d2:	4631      	mov	r1, r6
 80180d4:	4622      	mov	r2, r4
 80180d6:	f7fd fa00 	bl	80154da <memcpy>
 80180da:	4631      	mov	r1, r6
 80180dc:	4638      	mov	r0, r7
 80180de:	f7ff fb6d 	bl	80177bc <_free_r>
 80180e2:	e7e9      	b.n	80180b8 <_realloc_r+0x1c>
 80180e4:	4635      	mov	r5, r6
 80180e6:	e7e7      	b.n	80180b8 <_realloc_r+0x1c>

080180e8 <_raise_r>:
 80180e8:	291f      	cmp	r1, #31
 80180ea:	b538      	push	{r3, r4, r5, lr}
 80180ec:	4604      	mov	r4, r0
 80180ee:	460d      	mov	r5, r1
 80180f0:	d904      	bls.n	80180fc <_raise_r+0x14>
 80180f2:	2316      	movs	r3, #22
 80180f4:	6003      	str	r3, [r0, #0]
 80180f6:	f04f 30ff 	mov.w	r0, #4294967295
 80180fa:	bd38      	pop	{r3, r4, r5, pc}
 80180fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80180fe:	b112      	cbz	r2, 8018106 <_raise_r+0x1e>
 8018100:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018104:	b94b      	cbnz	r3, 801811a <_raise_r+0x32>
 8018106:	4620      	mov	r0, r4
 8018108:	f000 f830 	bl	801816c <_getpid_r>
 801810c:	462a      	mov	r2, r5
 801810e:	4601      	mov	r1, r0
 8018110:	4620      	mov	r0, r4
 8018112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018116:	f000 b817 	b.w	8018148 <_kill_r>
 801811a:	2b01      	cmp	r3, #1
 801811c:	d00a      	beq.n	8018134 <_raise_r+0x4c>
 801811e:	1c59      	adds	r1, r3, #1
 8018120:	d103      	bne.n	801812a <_raise_r+0x42>
 8018122:	2316      	movs	r3, #22
 8018124:	6003      	str	r3, [r0, #0]
 8018126:	2001      	movs	r0, #1
 8018128:	e7e7      	b.n	80180fa <_raise_r+0x12>
 801812a:	2400      	movs	r4, #0
 801812c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018130:	4628      	mov	r0, r5
 8018132:	4798      	blx	r3
 8018134:	2000      	movs	r0, #0
 8018136:	e7e0      	b.n	80180fa <_raise_r+0x12>

08018138 <raise>:
 8018138:	4b02      	ldr	r3, [pc, #8]	; (8018144 <raise+0xc>)
 801813a:	4601      	mov	r1, r0
 801813c:	6818      	ldr	r0, [r3, #0]
 801813e:	f7ff bfd3 	b.w	80180e8 <_raise_r>
 8018142:	bf00      	nop
 8018144:	2400025c 	.word	0x2400025c

08018148 <_kill_r>:
 8018148:	b538      	push	{r3, r4, r5, lr}
 801814a:	4d07      	ldr	r5, [pc, #28]	; (8018168 <_kill_r+0x20>)
 801814c:	2300      	movs	r3, #0
 801814e:	4604      	mov	r4, r0
 8018150:	4608      	mov	r0, r1
 8018152:	4611      	mov	r1, r2
 8018154:	602b      	str	r3, [r5, #0]
 8018156:	f7ea f9f3 	bl	8002540 <_kill>
 801815a:	1c43      	adds	r3, r0, #1
 801815c:	d102      	bne.n	8018164 <_kill_r+0x1c>
 801815e:	682b      	ldr	r3, [r5, #0]
 8018160:	b103      	cbz	r3, 8018164 <_kill_r+0x1c>
 8018162:	6023      	str	r3, [r4, #0]
 8018164:	bd38      	pop	{r3, r4, r5, pc}
 8018166:	bf00      	nop
 8018168:	24006acc 	.word	0x24006acc

0801816c <_getpid_r>:
 801816c:	f7ea b9e0 	b.w	8002530 <_getpid>

08018170 <__ascii_wctomb>:
 8018170:	b149      	cbz	r1, 8018186 <__ascii_wctomb+0x16>
 8018172:	2aff      	cmp	r2, #255	; 0xff
 8018174:	bf85      	ittet	hi
 8018176:	238a      	movhi	r3, #138	; 0x8a
 8018178:	6003      	strhi	r3, [r0, #0]
 801817a:	700a      	strbls	r2, [r1, #0]
 801817c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018180:	bf98      	it	ls
 8018182:	2001      	movls	r0, #1
 8018184:	4770      	bx	lr
 8018186:	4608      	mov	r0, r1
 8018188:	4770      	bx	lr
	...

0801818c <_fstat_r>:
 801818c:	b538      	push	{r3, r4, r5, lr}
 801818e:	4d07      	ldr	r5, [pc, #28]	; (80181ac <_fstat_r+0x20>)
 8018190:	2300      	movs	r3, #0
 8018192:	4604      	mov	r4, r0
 8018194:	4608      	mov	r0, r1
 8018196:	4611      	mov	r1, r2
 8018198:	602b      	str	r3, [r5, #0]
 801819a:	f7ea fa14 	bl	80025c6 <_fstat>
 801819e:	1c43      	adds	r3, r0, #1
 80181a0:	d102      	bne.n	80181a8 <_fstat_r+0x1c>
 80181a2:	682b      	ldr	r3, [r5, #0]
 80181a4:	b103      	cbz	r3, 80181a8 <_fstat_r+0x1c>
 80181a6:	6023      	str	r3, [r4, #0]
 80181a8:	bd38      	pop	{r3, r4, r5, pc}
 80181aa:	bf00      	nop
 80181ac:	24006acc 	.word	0x24006acc

080181b0 <_isatty_r>:
 80181b0:	b538      	push	{r3, r4, r5, lr}
 80181b2:	4d06      	ldr	r5, [pc, #24]	; (80181cc <_isatty_r+0x1c>)
 80181b4:	2300      	movs	r3, #0
 80181b6:	4604      	mov	r4, r0
 80181b8:	4608      	mov	r0, r1
 80181ba:	602b      	str	r3, [r5, #0]
 80181bc:	f7ea fa13 	bl	80025e6 <_isatty>
 80181c0:	1c43      	adds	r3, r0, #1
 80181c2:	d102      	bne.n	80181ca <_isatty_r+0x1a>
 80181c4:	682b      	ldr	r3, [r5, #0]
 80181c6:	b103      	cbz	r3, 80181ca <_isatty_r+0x1a>
 80181c8:	6023      	str	r3, [r4, #0]
 80181ca:	bd38      	pop	{r3, r4, r5, pc}
 80181cc:	24006acc 	.word	0x24006acc

080181d0 <_malloc_usable_size_r>:
 80181d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181d4:	1f18      	subs	r0, r3, #4
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	bfbc      	itt	lt
 80181da:	580b      	ldrlt	r3, [r1, r0]
 80181dc:	18c0      	addlt	r0, r0, r3
 80181de:	4770      	bx	lr

080181e0 <_init>:
 80181e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181e2:	bf00      	nop
 80181e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181e6:	bc08      	pop	{r3}
 80181e8:	469e      	mov	lr, r3
 80181ea:	4770      	bx	lr

080181ec <_fini>:
 80181ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ee:	bf00      	nop
 80181f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181f2:	bc08      	pop	{r3}
 80181f4:	469e      	mov	lr, r3
 80181f6:	4770      	bx	lr
